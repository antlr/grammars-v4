compilationUnit
 packageDeclaration
  package
  qualifiedName
   identifier
    myapplication
   .
   identifier
    mylibrary
  ;
 importDeclaration
  import
  qualifiedName
   identifier
    java
   .
   identifier
    util
   .
   identifier
    Random
  ;
 importDeclaration
  import
  qualifiedName
   identifier
    java
   .
   identifier
    util
  .
  *
  ;
 importDeclaration
  import
  qualifiedName
   identifier
    java
  .
  *
  ;
 importDeclaration
  import
  static
  qualifiedName
   identifier
    java
   .
   identifier
    lang
   .
   identifier
    System
   .
   identifier
    out
  ;
 importDeclaration
  import
  static
  qualifiedName
   identifier
    screen
   .
   identifier
    ColorName
  .
  *
  ;
 typeDeclaration
  classOrInterfaceModifier
   public
  enumDeclaration
   enum
   identifier
    ColorName
   {
   enumConstants
    enumConstant
     identifier
      RED
    ,
    enumConstant
     identifier
      BLUE
    ,
    enumConstant
     identifier
      GREEN
   }
 ;
 typeDeclaration
  classOrInterfaceModifier
   public
  classDeclaration
   class
   identifier
    LexerTest
   classBody
    {
    classBodyDeclaration
     modifier
      classOrInterfaceModifier
       static
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        void
       identifier
        main
       formalParameters
        (
        formalParameterList
         formalParameter
          typeType
           classOrInterfaceType
            typeIdentifier
             String
           [
           ]
          variableDeclaratorId
           identifier
            args
        )
       methodBody
        block
         {
         blockStatement
          localVariableDeclaration
           typeType
            primitiveType
             long
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               creditCardNumber
             =
             variableInitializer
              expression
               primary
                literal
                 integerLiteral
                  1234_5678_9012_3456L
          ;
         blockStatement
          localVariableDeclaration
           typeType
            primitiveType
             long
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               socialSecurityNumber
             =
             variableInitializer
              expression
               primary
                literal
                 integerLiteral
                  999_99_9999L
          ;
         blockStatement
          localVariableDeclaration
           typeType
            primitiveType
             float
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               pi
             =
             variableInitializer
              expression
               primary
                literal
                 floatLiteral
                  3.14_15F
          ;
         blockStatement
          localVariableDeclaration
           typeType
            primitiveType
             long
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               hexBytes
             =
             variableInitializer
              expression
               primary
                literal
                 integerLiteral
                  0xFF_EC_DE_5E
          ;
         blockStatement
          localVariableDeclaration
           typeType
            primitiveType
             long
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               hexWords
             =
             variableInitializer
              expression
               primary
                literal
                 integerLiteral
                  0xCAFE_BABE
          ;
         blockStatement
          localVariableDeclaration
           typeType
            primitiveType
             long
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               maxLong
             =
             variableInitializer
              expression
               primary
                literal
                 integerLiteral
                  0x7fff_ffff_ffff_ffffL
          ;
         blockStatement
          localVariableDeclaration
           typeType
            primitiveType
             byte
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               nybbles
             =
             variableInitializer
              expression
               primary
                literal
                 integerLiteral
                  0b0010_0101
          ;
         blockStatement
          localVariableDeclaration
           typeType
            primitiveType
             long
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               bytes
             =
             variableInitializer
              expression
               primary
                literal
                 integerLiteral
                  0b11010010_01101001_10010100_10010010
          ;
         blockStatement
          localVariableDeclaration
           typeType
            primitiveType
             long
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               lastReceivedMessageId
             =
             variableInitializer
              expression
               primary
                literal
                 integerLiteral
                  0L
          ;
         blockStatement
          localVariableDeclaration
           typeType
            primitiveType
             double
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               hexDouble1
             =
             variableInitializer
              expression
               primary
                literal
                 floatLiteral
                  0x1.0p0
          ;
         blockStatement
          localVariableDeclaration
           typeType
            primitiveType
             double
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               hexDouble2
             =
             variableInitializer
              expression
               primary
                literal
                 floatLiteral
                  0x1.956ad0aae33a4p117
          ;
         blockStatement
          localVariableDeclaration
           typeType
            primitiveType
             int
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               octal
             =
             variableInitializer
              expression
               primary
                literal
                 integerLiteral
                  01234567
          ;
         blockStatement
          localVariableDeclaration
           typeType
            primitiveType
             long
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               hexUpper
             =
             variableInitializer
              expression
               primary
                literal
                 integerLiteral
                  0x1234567890ABCDEFL
          ;
         blockStatement
          localVariableDeclaration
           typeType
            primitiveType
             long
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               hexLower
             =
             variableInitializer
              expression
               primary
                literal
                 integerLiteral
                  0x1234567890abcedfl
          ;
         blockStatement
          localVariableDeclaration
           typeType
            primitiveType
             int
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               x1
             =
             variableInitializer
              expression
               primary
                identifier
                 _52
          ;
         blockStatement
          localVariableDeclaration
           typeType
            primitiveType
             int
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               x2
             =
             variableInitializer
              expression
               primary
                literal
                 integerLiteral
                  5_2
          ;
         blockStatement
          localVariableDeclaration
           typeType
            primitiveType
             int
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               x4
             =
             variableInitializer
              expression
               primary
                literal
                 integerLiteral
                  5_______2
          ;
         blockStatement
          localVariableDeclaration
           typeType
            primitiveType
             int
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               x7
             =
             variableInitializer
              expression
               primary
                literal
                 integerLiteral
                  0x5_2
          ;
         blockStatement
          localVariableDeclaration
           typeType
            primitiveType
             int
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               x9
             =
             variableInitializer
              expression
               primary
                literal
                 integerLiteral
                  0_52
          ;
         blockStatement
          localVariableDeclaration
           typeType
            primitiveType
             int
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               x10
             =
             variableInitializer
              expression
               primary
                literal
                 integerLiteral
                  05_2
          ;
         blockStatement
          localVariableDeclaration
           typeType
            primitiveType
             int
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               x
            ,
            variableDeclarator
             variableDeclaratorId
              identifier
               y
            ,
            variableDeclarator
             variableDeclaratorId
              identifier
               result
          ;
         blockStatement
          statement
           expression
            expression
             primary
              identifier
               result
            =
            expression
             expression
              primary
               identifier
                x
             +
             expression
              primary
               identifier
                y
           ;
         blockStatement
          statement
           expression
            expression
             primary
              identifier
               result
            =
            expression
             expression
              primary
               identifier
                x
             -
             expression
              primary
               identifier
                y
           ;
         blockStatement
          statement
           expression
            expression
             primary
              identifier
               result
            =
            expression
             expression
              primary
               identifier
                x
             *
             expression
              primary
               identifier
                y
           ;
         blockStatement
          statement
           expression
            expression
             primary
              identifier
               result
            =
            expression
             expression
              primary
               identifier
                y
             /
             expression
              primary
               identifier
                x
           ;
         blockStatement
          statement
           expression
            expression
             primary
              identifier
               result
            =
            expression
             expression
              primary
               identifier
                x
             %
             expression
              primary
               literal
                integerLiteral
                 3
           ;
         blockStatement
          statement
           expression
            expression
             primary
              identifier
               result
            =
            expression
             +
             expression
              primary
               identifier
                x
           ;
         blockStatement
          statement
           expression
            expression
             primary
              identifier
               result
            =
            expression
             -
             expression
              primary
               identifier
                y
           ;
         blockStatement
          statement
           expression
            expression
             primary
              identifier
               result
            =
            expression
             ++
             expression
              primary
               identifier
                x
           ;
         blockStatement
          statement
           expression
            expression
             primary
              identifier
               result
            =
            expression
             --
             expression
              primary
               identifier
                y
           ;
         blockStatement
          localVariableDeclaration
           typeType
            primitiveType
             boolean
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               ok
             =
             variableInitializer
              expression
               primary
                literal
                 false
          ;
         blockStatement
          localVariableDeclaration
           typeType
            primitiveType
             boolean
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               not_ok
             =
             variableInitializer
              expression
               !
               expression
                primary
                 identifier
                  ok
          ;
         blockStatement
          statement
           expression
            expression
             primary
              (
              expression
               expression
                primary
                 identifier
                  result
               =
               expression
                primary
                 typeTypeOrVoid
                  typeType
                   classOrInterfaceType
                    typeIdentifier
                     System
                 .
                 class
              )
            .
            methodCall
             identifier
              getName
             arguments
              (
              )
           ;
         blockStatement
          statement
           expression
            ++
            expression
             primary
              identifier
               x
           ;
         blockStatement
          statement
           expression
            expression
             primary
              identifier
               x
            ++
           ;
         blockStatement
          statement
           expression
            --
            expression
             primary
              identifier
               y
           ;
         blockStatement
          statement
           expression
            expression
             primary
              identifier
               y
            --
           ;
         blockStatement
          statement
           expression
            expression
             expression
              primary
               identifier
                LexerTest
             .
             identifier
              prePost
            ++
           ;
         blockStatement
          statement
           expression
            expression
             expression
              primary
               identifier
                LexerTest
             .
             identifier
              prePost
            --
           ;
         blockStatement
          statement
           expression
            expression
             expression
              expression
               expression
                primary
                 identifier
                  myapplication
               .
               identifier
                mylibrary
              .
              identifier
               LexerTest
             .
             identifier
              prePost
            ++
           ;
         blockStatement
          statement
           expression
            expression
             expression
              expression
               expression
                primary
                 identifier
                  myapplication
               .
               identifier
                mylibrary
              .
              identifier
               LexerTest
             .
             identifier
              prePost
            --
           ;
         blockStatement
          statement
           expression
            expression
             expression
              primary
               this
             .
             identifier
              prePost
            ++
           ;
         blockStatement
          statement
           expression
            expression
             expression
              primary
               this
             .
             identifier
              prePost
            --
           ;
         blockStatement
          statement
           expression
            expression
             expression
              primary
               super
             .
             identifier
              prePost
            ++
           ;
         blockStatement
          statement
           expression
            expression
             expression
              primary
               super
             .
             identifier
              prePost
            --
           ;
         blockStatement
          statement
           expression
            expression
             expression
              methodCall
               identifier
                someMethod
               arguments
                (
                )
             [
             expression
              primary
               literal
                integerLiteral
                 0
             ]
            ++
           ;
         blockStatement
          statement
           expression
            expression
             expression
              methodCall
               identifier
                someMethod
               arguments
                (
                )
             [
             expression
              primary
               literal
                integerLiteral
                 0
             ]
            --
           ;
         blockStatement
          statement
           expression
            ++
            expression
             expression
              primary
               identifier
                LexerTest
             .
             identifier
              prePost
           ;
         blockStatement
          statement
           expression
            --
            expression
             expression
              primary
               identifier
                LexerTest
             .
             identifier
              prePost
           ;
         blockStatement
          statement
           expression
            ++
            expression
             expression
              expression
               expression
                primary
                 identifier
                  myapplication
               .
               identifier
                mylibrary
              .
              identifier
               LexerTest
             .
             identifier
              prePost
           ;
         blockStatement
          statement
           expression
            --
            expression
             expression
              expression
               expression
                primary
                 identifier
                  myapplication
               .
               identifier
                mylibrary
              .
              identifier
               LexerTest
             .
             identifier
              prePost
           ;
         blockStatement
          statement
           expression
            ++
            expression
             expression
              primary
               this
             .
             identifier
              prePost
           ;
         blockStatement
          statement
           expression
            --
            expression
             expression
              primary
               this
             .
             identifier
              prePost
           ;
         blockStatement
          statement
           expression
            ++
            expression
             expression
              primary
               super
             .
             identifier
              prePost
           ;
         blockStatement
          statement
           expression
            --
            expression
             expression
              primary
               super
             .
             identifier
              prePost
           ;
         blockStatement
          statement
           expression
            ++
            expression
             expression
              methodCall
               identifier
                someMethod
               arguments
                (
                )
             [
             expression
              primary
               literal
                integerLiteral
                 0
             ]
           ;
         blockStatement
          statement
           expression
            --
            expression
             expression
              methodCall
               identifier
                someMethod
               arguments
                (
                )
             [
             expression
              primary
               literal
                integerLiteral
                 0
             ]
           ;
         blockStatement
          statement
           expression
            expression
             primary
              identifier
               result
            =
            expression
             expression
              primary
               identifier
                x
             ==
             expression
              primary
               identifier
                y
           ;
         blockStatement
          statement
           expression
            expression
             primary
              identifier
               result
            =
            expression
             expression
              primary
               identifier
                x
             !=
             expression
              primary
               identifier
                y
           ;
         blockStatement
          statement
           expression
            expression
             primary
              identifier
               result
            =
            expression
             expression
              primary
               identifier
                x
             >
             expression
              primary
               identifier
                y
           ;
         blockStatement
          statement
           expression
            expression
             primary
              identifier
               result
            =
            expression
             expression
              primary
               identifier
                x
             >=
             expression
              primary
               identifier
                y
           ;
         blockStatement
          statement
           expression
            expression
             primary
              identifier
               result
            =
            expression
             expression
              primary
               identifier
                x
             <
             expression
              primary
               identifier
                y
           ;
         blockStatement
          statement
           expression
            expression
             primary
              identifier
               result
            =
            expression
             expression
              primary
               identifier
                x
             <=
             expression
              primary
               identifier
                y
           ;
         blockStatement
          statement
           if
           parExpression
            (
            expression
             expression
              primary
               (
               expression
                expression
                 primary
                  identifier
                   x
                >
                expression
                 primary
                  literal
                   integerLiteral
                    8
               )
             &&
             expression
              primary
               (
               expression
                expression
                 primary
                  identifier
                   y
                >
                expression
                 primary
                  literal
                   integerLiteral
                    8
               )
            )
           statement
            block
             {
             }
         blockStatement
          statement
           if
           parExpression
            (
            expression
             expression
              primary
               (
               expression
                expression
                 primary
                  identifier
                   x
                >
                expression
                 primary
                  literal
                   integerLiteral
                    10
               )
             ||
             expression
              primary
               (
               expression
                expression
                 primary
                  identifier
                   y
                >
                expression
                 primary
                  literal
                   integerLiteral
                    10
               )
            )
           statement
            block
             {
             }
         blockStatement
          statement
           expression
            expression
             primary
              identifier
               result
            =
            expression
             expression
              primary
               (
               expression
                expression
                 primary
                  identifier
                   x
                >
                expression
                 primary
                  literal
                   integerLiteral
                    10
               )
             ?
             expression
              primary
               identifier
                x
             :
             expression
              primary
               identifier
                y
           ;
         blockStatement
          localVariableDeclaration
           typeType
            primitiveType
             int
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               f
             =
             variableInitializer
              expression
               expression
                primary
                 identifier
                  b1
               ?
               expression
                primary
                 identifier
                  b2
               :
               expression
                expression
                 primary
                  identifier
                   b3
                ?
                expression
                 primary
                  literal
                   integerLiteral
                    3
                :
                expression
                 primary
                  literal
                   integerLiteral
                    4
          ;
         blockStatement
          statement
           expression
            expression
             primary
              identifier
               result
            =
            expression
             ~
             expression
              primary
               identifier
                x
           ;
         blockStatement
          statement
           expression
            expression
             primary
              identifier
               result
            =
            expression
             expression
              primary
               identifier
                x
             <
             <
             expression
              primary
               literal
                integerLiteral
                 1
           ;
         blockStatement
          statement
           expression
            expression
             primary
              identifier
               result
            =
            expression
             expression
              primary
               identifier
                x
             >
             >
             expression
              primary
               literal
                integerLiteral
                 2
           ;
         blockStatement
          statement
           expression
            expression
             primary
              identifier
               result
            =
            expression
             expression
              primary
               identifier
                x
             >
             >
             >
             expression
              primary
               literal
                integerLiteral
                 3
           ;
         blockStatement
          statement
           expression
            expression
             primary
              identifier
               result
            =
            expression
             expression
              primary
               identifier
                x
             &
             expression
              primary
               literal
                integerLiteral
                 4
           ;
         blockStatement
          statement
           expression
            expression
             primary
              identifier
               result
            =
            expression
             expression
              primary
               identifier
                x
             ^
             expression
              primary
               literal
                integerLiteral
                 5
           ;
         blockStatement
          statement
           expression
            expression
             primary
              identifier
               result
            =
            expression
             expression
              primary
               identifier
                x
             |
             expression
              primary
               literal
                integerLiteral
                 6
           ;
         blockStatement
          statement
           expression
            expression
             primary
              identifier
               result
            =
            expression
             primary
              identifier
               x
           ;
         blockStatement
          statement
           expression
            expression
             primary
              identifier
               result
            +=
            expression
             primary
              identifier
               x
           ;
         blockStatement
          statement
           expression
            expression
             primary
              identifier
               result
            -=
            expression
             primary
              identifier
               x
           ;
         blockStatement
          statement
           expression
            expression
             primary
              identifier
               result
            *=
            expression
             primary
              identifier
               x
           ;
         blockStatement
          statement
           expression
            expression
             primary
              identifier
               result
            /=
            expression
             primary
              identifier
               x
           ;
         blockStatement
          statement
           expression
            expression
             primary
              identifier
               result
            %=
            expression
             primary
              identifier
               x
           ;
         blockStatement
          statement
           expression
            expression
             primary
              identifier
               result
            &=
            expression
             primary
              identifier
               x
           ;
         blockStatement
          statement
           expression
            expression
             primary
              identifier
               result
            ^=
            expression
             primary
              identifier
               x
           ;
         blockStatement
          statement
           expression
            expression
             primary
              identifier
               result
            |=
            expression
             primary
              identifier
               x
           ;
         blockStatement
          statement
           expression
            expression
             primary
              identifier
               result
            <<=
            expression
             primary
              identifier
               x
           ;
         blockStatement
          statement
           expression
            expression
             primary
              identifier
               result
            >>=
            expression
             primary
              identifier
               x
           ;
         blockStatement
          statement
           expression
            expression
             primary
              identifier
               result
            >>>=
            expression
             primary
              identifier
               x
           ;
         }
    classBodyDeclaration
     modifier
      classOrInterfaceModifier
       public
     modifier
      classOrInterfaceModifier
       static
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        void
       identifier
        methodCalls
       formalParameters
        (
        )
       methodBody
        block
         {
         blockStatement
          statement
           expression
            expression
             expression
              new
              creator
               createdName
                identifier
                 Object
               classCreatorRest
                arguments
                 (
                 )
             .
             methodCall
              identifier
               getClass
              arguments
               (
               )
            .
            methodCall
             identifier
              hashCode
             arguments
              (
              )
           ;
         blockStatement
          statement
           expression
            expression
             expression
              new
              creator
               createdName
                identifier
                 String
               arrayCreatorRest
                [
                ]
                arrayInitializer
                 {
                 variableInitializer
                  expression
                   primary
                    literal
                     "test"
                 }
             [
             expression
              primary
               literal
                integerLiteral
                 0
             ]
            .
            methodCall
             identifier
              getLength
             arguments
              (
              )
           ;
         blockStatement
          localVariableDeclaration
           typeType
            classOrInterfaceType
             typeIdentifier
              String
            [
            ]
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               strings
          ;
         blockStatement
          statement
           expression
            expression
             expression
              primary
               (
               expression
                expression
                 primary
                  identifier
                   strings
                =
                expression
                 new
                 creator
                  createdName
                   identifier
                    String
                  arrayCreatorRest
                   [
                   ]
                   arrayInitializer
                    {
                    variableInitializer
                     expression
                      primary
                       literal
                        "test"
                    }
               )
             [
             expression
              primary
               literal
                integerLiteral
                 0
             ]
            .
            methodCall
             identifier
              charAt
             arguments
              (
              expressionList
               expression
                primary
                 literal
                  integerLiteral
                   0
              )
           ;
         blockStatement
          statement
           expression
            expression
             expression
              primary
               identifier
                strings
             [
             expression
              primary
               literal
                integerLiteral
                 0
             ]
            .
            methodCall
             identifier
              length
             arguments
              (
              )
           ;
         blockStatement
          localVariableDeclaration
           typeType
            classOrInterfaceType
             typeIdentifier
              Foo
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               foo
             =
             variableInitializer
              expression
               expression
                new
                creator
                 createdName
                  identifier
                   Foo
                 classCreatorRest
                  arguments
                   (
                   )
               .
               new
               innerCreator
                identifier
                 Bar
                classCreatorRest
                 arguments
                  (
                  )
          ;
         blockStatement
          statement
           expression
            expression
             primary
              identifier
               foo
            .
            methodCall
             identifier
              hashCode
             arguments
              (
              )
           ;
         blockStatement
          statement
           expression
            expression
             primary
              typeTypeOrVoid
               typeType
                classOrInterfaceType
                 typeIdentifier
                  Foo
              .
              class
            .
            methodCall
             identifier
              hashCode
             arguments
              (
              )
           ;
         blockStatement
          statement
           expression
            expression
             new
             creator
              createdName
               identifier
                HashMap
               typeArgumentsOrDiamond
                typeArguments
                 <
                 typeArgument
                  typeType
                   classOrInterfaceType
                    typeIdentifier
                     Object
                 ,
                 typeArgument
                  typeType
                   classOrInterfaceType
                    typeIdentifier
                     String
                 >
              classCreatorRest
               arguments
                (
                expressionList
                 expression
                  primary
                   literal
                    integerLiteral
                     5
                )
            .
            methodCall
             identifier
              get
             arguments
              (
              expressionList
               expression
                primary
                 literal
                  null
              )
           ;
         }
    }
 typeDeclaration
  classOrInterfaceModifier
   public
  classDeclaration
   class
   identifier
    ImportsTest
   classBody
    {
    classBodyDeclaration
     modifier
      classOrInterfaceModifier
       public
     modifier
      classOrInterfaceModifier
       static
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        void
       identifier
        main
       formalParameters
        (
        formalParameterList
         formalParameter
          typeType
           classOrInterfaceType
            typeIdentifier
             String
           [
           ]
          variableDeclaratorId
           identifier
            args
        )
       methodBody
        block
         {
         blockStatement
          localVariableDeclaration
           typeType
            classOrInterfaceType
             typeIdentifier
              Random
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               random
             =
             variableInitializer
              expression
               new
               creator
                createdName
                 identifier
                  Random
                classCreatorRest
                 arguments
                  (
                  )
          ;
         }
    }
 typeDeclaration
  classOrInterfaceModifier
   public
  classDeclaration
   class
   identifier
    HelloWorld
   classBody
    {
    classBodyDeclaration
     modifier
      classOrInterfaceModifier
       public
     modifier
      classOrInterfaceModifier
       static
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        void
       identifier
        main
       formalParameters
        (
        formalParameterList
         formalParameter
          typeType
           classOrInterfaceType
            typeIdentifier
             String
           [
           ]
          variableDeclaratorId
           identifier
            args
        )
       methodBody
        block
         {
         blockStatement
          statement
           expression
            expression
             primary
              identifier
               out
            .
            methodCall
             identifier
              println
             arguments
              (
              expressionList
               expression
                primary
                 literal
                  "Hello World!"
              )
           ;
         blockStatement
          statement
           if
           parExpression
            (
            expression
             expression
              primary
               identifier
                i
             ==
             expression
              primary
               literal
                integerLiteral
                 3
            )
           statement
            expression
             methodCall
              identifier
               doSomething
              arguments
               (
               )
            ;
         blockStatement
          statement
           if
           parExpression
            (
            expression
             expression
              primary
               identifier
                i
             ==
             expression
              primary
               literal
                integerLiteral
                 2
            )
           statement
            block
             {
             blockStatement
              statement
               expression
                methodCall
                 identifier
                  doSomething
                 arguments
                  (
                  )
               ;
             }
           else
           statement
            block
             {
             blockStatement
              statement
               expression
                methodCall
                 identifier
                  doSomethingElse
                 arguments
                  (
                  )
               ;
             }
         blockStatement
          statement
           if
           parExpression
            (
            expression
             expression
              primary
               identifier
                i
             ==
             expression
              primary
               literal
                integerLiteral
                 3
            )
           statement
            block
             {
             blockStatement
              statement
               expression
                methodCall
                 identifier
                  doSomething
                 arguments
                  (
                  )
               ;
             }
           else
           statement
            if
            parExpression
             (
             expression
              expression
               primary
                identifier
                 i
              ==
              expression
               primary
                literal
                 integerLiteral
                  2
             )
            statement
             block
              {
              blockStatement
               statement
                expression
                 methodCall
                  identifier
                   doSomethingElse
                  arguments
                   (
                   )
                ;
              }
            else
            statement
             block
              {
              blockStatement
               statement
                expression
                 methodCall
                  identifier
                   doSomethingDifferent
                  arguments
                   (
                   )
                ;
              }
         blockStatement
          localVariableDeclaration
           typeType
            primitiveType
             int
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               a
             =
             variableInitializer
              expression
               primary
                literal
                 integerLiteral
                  1
          ;
         blockStatement
          localVariableDeclaration
           typeType
            primitiveType
             int
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               b
             =
             variableInitializer
              expression
               primary
                literal
                 integerLiteral
                  2
          ;
         blockStatement
          localVariableDeclaration
           typeType
            primitiveType
             int
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               minVal
             =
             variableInitializer
              expression
               expression
                primary
                 (
                 expression
                  expression
                   primary
                    identifier
                     a
                  <
                  expression
                   primary
                    identifier
                     b
                 )
               ?
               expression
                primary
                 identifier
                  a
               :
               expression
                primary
                 identifier
                  b
          ;
         blockStatement
          statement
           switch
           parExpression
            (
            expression
             primary
              identifier
               ch
            )
           {
           switchBlockStatementGroup
            switchLabel
             case
             expression
              primary
               literal
                'A'
             :
            blockStatement
             statement
              expression
               methodCall
                identifier
                 doSomething
                arguments
                 (
                 )
              ;
            blockStatement
             statement
              break
              ;
           switchBlockStatementGroup
            switchLabel
             case
             expression
              primary
               literal
                'B'
             :
            switchLabel
             case
             expression
              primary
               literal
                'C'
             :
            blockStatement
             statement
              expression
               methodCall
                identifier
                 doSomethingElse
                arguments
                 (
                 )
              ;
            blockStatement
             statement
              break
              ;
           switchBlockStatementGroup
            switchLabel
             default
             :
            blockStatement
             statement
              expression
               methodCall
                identifier
                 doSomethingDifferent
                arguments
                 (
                 )
              ;
            blockStatement
             statement
              break
              ;
           }
         blockStatement
          statement
           while
           parExpression
            (
            expression
             expression
              primary
               identifier
                i
             <
             expression
              primary
               literal
                integerLiteral
                 10
            )
           statement
            block
             {
             blockStatement
              statement
               expression
                methodCall
                 identifier
                  doSomething
                 arguments
                  (
                  )
               ;
             }
         blockStatement
          statement
           do
           statement
            block
             {
             blockStatement
              statement
               expression
                methodCall
                 identifier
                  doSomething
                 arguments
                  (
                  )
               ;
             }
           while
           parExpression
            (
            expression
             expression
              primary
               identifier
                i
             <
             expression
              primary
               literal
                integerLiteral
                 10
            )
           ;
         blockStatement
          statement
           for
           (
           forControl
            forInit
             localVariableDeclaration
              typeType
               primitiveType
                int
              variableDeclarators
               variableDeclarator
                variableDeclaratorId
                 identifier
                  i
                =
                variableInitializer
                 expression
                  primary
                   literal
                    integerLiteral
                     0
            ;
            expression
             expression
              primary
               identifier
                i
             <
             expression
              primary
               literal
                integerLiteral
                 10
            ;
            expressionList
             expression
              expression
               primary
                identifier
                 i
              ++
           )
           statement
            block
             {
             blockStatement
              statement
               expression
                methodCall
                 identifier
                  doSomething
                 arguments
                  (
                  )
               ;
             }
         blockStatement
          statement
           for
           (
           forControl
            forInit
             localVariableDeclaration
              typeType
               primitiveType
                int
              variableDeclarators
               variableDeclarator
                variableDeclaratorId
                 identifier
                  i
                =
                variableInitializer
                 expression
                  primary
                   literal
                    integerLiteral
                     0
               ,
               variableDeclarator
                variableDeclaratorId
                 identifier
                  j
                =
                variableInitializer
                 expression
                  primary
                   literal
                    integerLiteral
                     9
            ;
            expression
             expression
              primary
               identifier
                i
             <
             expression
              primary
               literal
                integerLiteral
                 10
            ;
            expressionList
             expression
              expression
               primary
                identifier
                 i
              ++
             ,
             expression
              expression
               primary
                identifier
                 j
              -=
              expression
               primary
                literal
                 integerLiteral
                  3
           )
           statement
            block
             {
             blockStatement
              statement
               expression
                methodCall
                 identifier
                  doSomething
                 arguments
                  (
                  )
               ;
             }
         blockStatement
          statement
           for
           (
           forControl
            ;
            ;
           )
           statement
            block
             {
             blockStatement
              statement
               expression
                methodCall
                 identifier
                  doSomething
                 arguments
                  (
                  )
               ;
             }
         blockStatement
          statement
           for
           (
           forControl
            enhancedForControl
             typeType
              primitiveType
               int
             variableDeclaratorId
              identifier
               i
             :
             expression
              primary
               identifier
                intArray
           )
           statement
            block
             {
             blockStatement
              statement
               expression
                methodCall
                 identifier
                  doSomething
                 arguments
                  (
                  expressionList
                   expression
                    primary
                     identifier
                      i
                  )
               ;
             }
         blockStatement
          statement
           identifier
            start
           :
           statement
            expression
             methodCall
              identifier
               someMethod
              arguments
               (
               )
            ;
         blockStatement
          statement
           for
           (
           forControl
            forInit
             localVariableDeclaration
              typeType
               primitiveType
                int
              variableDeclarators
               variableDeclarator
                variableDeclaratorId
                 identifier
                  i
                =
                variableInitializer
                 expression
                  primary
                   literal
                    integerLiteral
                     0
            ;
            expression
             expression
              primary
               identifier
                i
             <
             expression
              primary
               literal
                integerLiteral
                 10
            ;
            expressionList
             expression
              expression
               primary
                identifier
                 i
              ++
           )
           statement
            block
             {
             blockStatement
              statement
               while
               parExpression
                (
                expression
                 primary
                  literal
                   true
                )
               statement
                block
                 {
                 blockStatement
                  statement
                   break
                   ;
                 }
             }
         blockStatement
          statement
           identifier
            outer
           :
           statement
            for
            (
            forControl
             forInit
              localVariableDeclaration
               typeType
                primitiveType
                 int
               variableDeclarators
                variableDeclarator
                 variableDeclaratorId
                  identifier
                   i
                 =
                 variableInitializer
                  expression
                   primary
                    literal
                     integerLiteral
                      0
             ;
             expression
              expression
               primary
                identifier
                 i
              <
              expression
               primary
                literal
                 integerLiteral
                  10
             ;
             expressionList
              expression
               expression
                primary
                 identifier
                  i
               ++
            )
            statement
             block
              {
              blockStatement
               statement
                while
                parExpression
                 (
                 expression
                  primary
                   literal
                    true
                 )
                statement
                 block
                  {
                  blockStatement
                   statement
                    break
                    identifier
                     outer
                    ;
                  }
              }
         blockStatement
          localVariableDeclaration
           typeType
            primitiveType
             int
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               ch
          ;
         blockStatement
          statement
           while
           parExpression
            (
            expression
             expression
              primary
               identifier
                ch
             =
             expression
              methodCall
               identifier
                getChar
               arguments
                (
                )
            )
           statement
            block
             {
             blockStatement
              statement
               if
               parExpression
                (
                expression
                 expression
                  primary
                   identifier
                    ch
                 ==
                 expression
                  primary
                   literal
                    ' '
                )
               statement
                block
                 {
                 blockStatement
                  statement
                   continue
                   ;
                 }
             blockStatement
              statement
               expression
                methodCall
                 identifier
                  doSomething
                 arguments
                  (
                  )
               ;
             }
         blockStatement
          statement
           identifier
            outer
           :
           statement
            for
            (
            forControl
             enhancedForControl
              typeType
               classOrInterfaceType
                typeIdentifier
                 String
              variableDeclaratorId
               identifier
                str
              :
              expression
               primary
                identifier
                 stringsArr
            )
            statement
             block
              {
              blockStatement
               localVariableDeclaration
                typeType
                 primitiveType
                  char
                 [
                 ]
                variableDeclarators
                 variableDeclarator
                  variableDeclaratorId
                   identifier
                    strChars
                  =
                  variableInitializer
                   expression
                    expression
                     primary
                      identifier
                       str
                    .
                    methodCall
                     identifier
                      toCharArray
                     arguments
                      (
                      )
               ;
              blockStatement
               statement
                for
                (
                forControl
                 enhancedForControl
                  typeType
                   primitiveType
                    char
                  variableDeclaratorId
                   identifier
                    ch
                  :
                  expression
                   primary
                    identifier
                     strChars
                )
                statement
                 block
                  {
                  blockStatement
                   statement
                    if
                    parExpression
                     (
                     expression
                      expression
                       primary
                        identifier
                         ch
                      ==
                      expression
                       primary
                        literal
                         ' '
                     )
                    statement
                     block
                      {
                      blockStatement
                       statement
                        continue
                        identifier
                         outer
                        ;
                      }
                  blockStatement
                   statement
                    expression
                     methodCall
                      identifier
                       doSomething
                      arguments
                       (
                       expressionList
                        expression
                         primary
                          identifier
                           ch
                       )
                    ;
                  }
              }
         blockStatement
          statement
           if
           parExpression
            (
            expression
             primary
              identifier
               streamClosed
            )
           statement
            block
             {
             blockStatement
              statement
               return
               ;
             }
         blockStatement
          statement
           expression
            methodCall
             identifier
              readFromStream
             arguments
              (
              )
           ;
         blockStatement
          localVariableDeclaration
           typeType
            primitiveType
             int
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               result
             =
             variableInitializer
              expression
               expression
                primary
                 identifier
                  a
               +
               expression
                primary
                 identifier
                  b
          ;
         blockStatement
          statement
           return
           expression
            primary
             identifier
              result
           ;
         blockStatement
          statement
           try
           block
            {
            blockStatement
             statement
              expression
               methodCall
                identifier
                 methodThrowingExceptions
                arguments
                 (
                 )
              ;
            }
           catchClause
            catch
            (
            catchType
             qualifiedName
              identifier
               Exception
            identifier
             ex
            )
            block
             {
             blockStatement
              statement
               expression
                methodCall
                 identifier
                  reportException
                 arguments
                  (
                  expressionList
                   expression
                    primary
                     identifier
                      ex
                  )
               ;
             }
           finallyBlock
            finally
            block
             {
             blockStatement
              statement
               expression
                methodCall
                 identifier
                  freeResources
                 arguments
                  (
                  )
               ;
             }
         blockStatement
          statement
           try
           block
            {
            blockStatement
             statement
              expression
               methodCall
                identifier
                 methodThrowingExceptions
                arguments
                 (
                 )
              ;
            }
           catchClause
            catch
            (
            catchType
             qualifiedName
              identifier
               IOException
             |
             qualifiedName
              identifier
               IllegalArgumentException
            identifier
             ex
            )
            block
             {
             blockStatement
              statement
               expression
                methodCall
                 identifier
                  reportException
                 arguments
                  (
                  expressionList
                   expression
                    primary
                     identifier
                      ex
                  )
               ;
             }
         blockStatement
          statement
           try
           resourceSpecification
            (
            resources
             resource
              classOrInterfaceType
               typeIdentifier
                FileOutputStream
              variableDeclaratorId
               identifier
                fos
              =
              expression
               new
               creator
                createdName
                 identifier
                  FileOutputStream
                classCreatorRest
                 arguments
                  (
                  expressionList
                   expression
                    primary
                     literal
                      "filename"
                  )
             ;
             resource
              classOrInterfaceType
               typeIdentifier
                XMLEncoder
              variableDeclaratorId
               identifier
                xEnc
              =
              expression
               new
               creator
                createdName
                 identifier
                  XMLEncoder
                classCreatorRest
                 arguments
                  (
                  expressionList
                   expression
                    primary
                     identifier
                      fos
                  )
            )
           block
            {
            blockStatement
             statement
              expression
               expression
                primary
                 identifier
                  xEnc
               .
               methodCall
                identifier
                 writeObject
                arguments
                 (
                 expressionList
                  expression
                   primary
                    identifier
                     object
                 )
              ;
            }
           catchClause
            catch
            (
            catchType
             qualifiedName
              identifier
               IOException
            identifier
             ex
            )
            block
             {
             blockStatement
              statement
               expression
                expression
                 expression
                  primary
                   identifier
                    Logger
                 .
                 methodCall
                  identifier
                   getLogger
                  arguments
                   (
                   expressionList
                    expression
                     expression
                      primary
                       typeTypeOrVoid
                        typeType
                         classOrInterfaceType
                          typeIdentifier
                           Serializer
                       .
                       class
                     .
                     methodCall
                      identifier
                       getName
                      arguments
                       (
                       )
                   )
                .
                methodCall
                 identifier
                  log
                 arguments
                  (
                  expressionList
                   expression
                    expression
                     primary
                      identifier
                       Level
                    .
                    identifier
                     SEVERE
                   ,
                   expression
                    primary
                     literal
                      null
                   ,
                   expression
                    primary
                     identifier
                      ex
                  )
               ;
             }
         blockStatement
          statement
           if
           parExpression
            (
            expression
             expression
              primary
               identifier
                obj
             ==
             expression
              primary
               literal
                null
            )
           statement
            block
             {
             blockStatement
              statement
               throw
               expression
                new
                creator
                 createdName
                  identifier
                   NullPointerException
                 classCreatorRest
                  arguments
                   (
                   )
               ;
             }
         blockStatement
          statement
           expression
            methodCall
             identifier
              doSomethingWithObject
             arguments
              (
              expressionList
               expression
                primary
                 identifier
                  obj
              )
           ;
         blockStatement
          statement
           synchronized
           parExpression
            (
            expression
             primary
              identifier
               someObject
            )
           block
            {
            }
         blockStatement
          statement
           assert
           expression
            expression
             primary
              identifier
               n
            !=
            expression
             primary
              literal
               integerLiteral
                0
           ;
         blockStatement
          statement
           assert
           expression
            expression
             primary
              identifier
               n
            !=
            expression
             primary
              literal
               integerLiteral
                0
           :
           expression
            primary
             literal
              "n was equal to zero"
           ;
         blockStatement
          localVariableDeclaration
           typeType
            primitiveType
             int
            [
            ]
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               numbers
             =
             variableInitializer
              expression
               new
               creator
                createdName
                 primitiveType
                  int
                arrayCreatorRest
                 [
                 expression
                  primary
                   literal
                    integerLiteral
                     5
                 ]
          ;
         blockStatement
          statement
           expression
            expression
             expression
              primary
               identifier
                numbers
             [
             expression
              primary
               literal
                integerLiteral
                 0
             ]
            =
            expression
             primary
              literal
               integerLiteral
                2
           ;
         blockStatement
          localVariableDeclaration
           typeType
            primitiveType
             int
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               x
             =
             variableInitializer
              expression
               expression
                primary
                 identifier
                  numbers
               [
               expression
                primary
                 literal
                  integerLiteral
                   0
               ]
          ;
         blockStatement
          localVariableDeclaration
           typeType
            primitiveType
             int
            [
            ]
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               numbers
             =
             variableInitializer
              expression
               new
               creator
                createdName
                 primitiveType
                  int
                arrayCreatorRest
                 [
                 ]
                 arrayInitializer
                  {
                  variableInitializer
                   expression
                    primary
                     literal
                      integerLiteral
                       20
                  ,
                  variableInitializer
                   expression
                    primary
                     literal
                      integerLiteral
                       1
                  ,
                  variableInitializer
                   expression
                    primary
                     literal
                      integerLiteral
                       42
                  ,
                  variableInitializer
                   expression
                    primary
                     literal
                      integerLiteral
                       15
                  ,
                  variableInitializer
                   expression
                    primary
                     literal
                      integerLiteral
                       34
                  }
          ;
         blockStatement
          localVariableDeclaration
           typeType
            primitiveType
             int
            [
            ]
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               numbers2
             =
             variableInitializer
              arrayInitializer
               {
               variableInitializer
                expression
                 primary
                  literal
                   integerLiteral
                    20
               ,
               variableInitializer
                expression
                 primary
                  literal
                   integerLiteral
                    1
               ,
               variableInitializer
                expression
                 primary
                  literal
                   integerLiteral
                    42
               ,
               variableInitializer
                expression
                 primary
                  literal
                   integerLiteral
                    15
               ,
               variableInitializer
                expression
                 primary
                  literal
                   integerLiteral
                    34
               }
          ;
         blockStatement
          localVariableDeclaration
           typeType
            primitiveType
             int
            [
            ]
            [
            ]
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               numbers
             =
             variableInitializer
              expression
               new
               creator
                createdName
                 primitiveType
                  int
                arrayCreatorRest
                 [
                 expression
                  primary
                   literal
                    integerLiteral
                     3
                 ]
                 [
                 expression
                  primary
                   literal
                    integerLiteral
                     3
                 ]
          ;
         blockStatement
          statement
           expression
            expression
             expression
              expression
               primary
                identifier
                 numbers
              [
              expression
               primary
                literal
                 integerLiteral
                  1
              ]
             [
             expression
              primary
               literal
                integerLiteral
                 2
             ]
            =
            expression
             primary
              literal
               integerLiteral
                2
           ;
         blockStatement
          localVariableDeclaration
           typeType
            primitiveType
             int
            [
            ]
            [
            ]
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               numbers2
             =
             variableInitializer
              arrayInitializer
               {
               variableInitializer
                arrayInitializer
                 {
                 variableInitializer
                  expression
                   primary
                    literal
                     integerLiteral
                      2
                 ,
                 variableInitializer
                  expression
                   primary
                    literal
                     integerLiteral
                      3
                 ,
                 variableInitializer
                  expression
                   primary
                    literal
                     integerLiteral
                      2
                 }
               ,
               variableInitializer
                arrayInitializer
                 {
                 variableInitializer
                  expression
                   primary
                    literal
                     integerLiteral
                      1
                 ,
                 variableInitializer
                  expression
                   primary
                    literal
                     integerLiteral
                      2
                 ,
                 variableInitializer
                  expression
                   primary
                    literal
                     integerLiteral
                      6
                 }
               ,
               variableInitializer
                arrayInitializer
                 {
                 variableInitializer
                  expression
                   primary
                    literal
                     integerLiteral
                      2
                 ,
                 variableInitializer
                  expression
                   primary
                    literal
                     integerLiteral
                      4
                 ,
                 variableInitializer
                  expression
                   primary
                    literal
                     integerLiteral
                      5
                 }
               }
          ;
         blockStatement
          localVariableDeclaration
           typeType
            primitiveType
             int
            [
            ]
            [
            ]
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               numbers
             =
             variableInitializer
              expression
               new
               creator
                createdName
                 primitiveType
                  int
                arrayCreatorRest
                 [
                 expression
                  primary
                   literal
                    integerLiteral
                     2
                 ]
                 [
                 ]
          ;
         blockStatement
          statement
           expression
            expression
             expression
              primary
               identifier
                numbers
             [
             expression
              primary
               literal
                integerLiteral
                 0
             ]
            =
            expression
             new
             creator
              createdName
               primitiveType
                int
              arrayCreatorRest
               [
               expression
                primary
                 literal
                  integerLiteral
                   3
               ]
           ;
         blockStatement
          statement
           expression
            expression
             expression
              primary
               identifier
                numbers
             [
             expression
              primary
               literal
                integerLiteral
                 1
             ]
            =
            expression
             new
             creator
              createdName
               primitiveType
                int
              arrayCreatorRest
               [
               expression
                primary
                 literal
                  integerLiteral
                   2
               ]
           ;
         blockStatement
          statement
           expression
            expression
             expression
              expression
               primary
                identifier
                 numbers
              [
              expression
               primary
                literal
                 integerLiteral
                  0
              ]
             [
             expression
              primary
               literal
                integerLiteral
                 0
             ]
            ++
           ;
         blockStatement
          statement
           expression
            expression
             expression
              expression
               primary
                identifier
                 numbers
              [
              expression
               primary
                literal
                 integerLiteral
                  0
              ]
             [
             expression
              primary
               literal
                integerLiteral
                 0
             ]
            --
           ;
         blockStatement
          statement
           expression
            ++
            expression
             expression
              expression
               primary
                identifier
                 numbers
              [
              expression
               primary
                literal
                 integerLiteral
                  0
              ]
             [
             expression
              primary
               literal
                integerLiteral
                 0
             ]
           ;
         blockStatement
          statement
           expression
            --
            expression
             expression
              expression
               primary
                identifier
                 numbers
              [
              expression
               primary
                literal
                 integerLiteral
                  0
              ]
             [
             expression
              primary
               literal
                integerLiteral
                 0
             ]
           ;
         blockStatement
          statement
           expression
            expression
             expression
              methodCall
               identifier
                foo
               arguments
                (
                )
             [
             expression
              primary
               literal
                integerLiteral
                 0
             ]
            ++
           ;
         blockStatement
          statement
           expression
            expression
             expression
              methodCall
               identifier
                foo
               arguments
                (
                )
             [
             expression
              primary
               literal
                integerLiteral
                 0
             ]
            --
           ;
         blockStatement
          statement
           expression
            ++
            expression
             expression
              methodCall
               identifier
                foo
               arguments
                (
                )
             [
             expression
              primary
               literal
                integerLiteral
                 0
             ]
           ;
         blockStatement
          statement
           expression
            --
            expression
             expression
              methodCall
               identifier
                foo
               arguments
                (
                )
             [
             expression
              primary
               literal
                integerLiteral
                 0
             ]
           ;
         }
    }
 typeDeclaration
  classDeclaration
   class
   identifier
    Foo
   classBody
    {
    }
 typeDeclaration
  classDeclaration
   class
   identifier
    Foo
   classBody
    {
    classBodyDeclaration
     memberDeclaration
      classDeclaration
       class
       identifier
        Bar
       classBody
        {
        }
    classBodyDeclaration
     modifier
      classOrInterfaceModifier
       static
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        void
       identifier
        inner_class_constructor
       formalParameters
        (
        )
       methodBody
        block
         {
         blockStatement
          localVariableDeclaration
           typeType
            classOrInterfaceType
             typeIdentifier
              Foo
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               foo
             =
             variableInitializer
              expression
               new
               creator
                createdName
                 identifier
                  Foo
                classCreatorRest
                 arguments
                  (
                  )
          ;
         blockStatement
          localVariableDeclaration
           typeType
            classOrInterfaceType
             identifier
              Foo
             .
             typeIdentifier
              Bar
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               fooBar1
             =
             variableInitializer
              expression
               expression
                primary
                 identifier
                  foo
               .
               new
               innerCreator
                identifier
                 Bar
                classCreatorRest
                 arguments
                  (
                  )
          ;
         blockStatement
          localVariableDeclaration
           typeType
            classOrInterfaceType
             identifier
              Foo
             .
             typeIdentifier
              Bar
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               fooBar2
             =
             variableInitializer
              expression
               expression
                new
                creator
                 createdName
                  identifier
                   Foo
                 classCreatorRest
                  arguments
                   (
                   )
               .
               new
               innerCreator
                identifier
                 Bar
                classCreatorRest
                 arguments
                  (
                  )
          ;
         }
    }
 typeDeclaration
  classDeclaration
   class
   identifier
    Foo
   classBody
    {
    classBodyDeclaration
     modifier
      classOrInterfaceModifier
       static
     memberDeclaration
      classDeclaration
       class
       identifier
        Bar
       classBody
        {
        }
    }
 typeDeclaration
  classDeclaration
   class
   identifier
    Foo
   classBody
    {
    classBodyDeclaration
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        void
       identifier
        bar
       formalParameters
        (
        )
       methodBody
        block
         {
         blockStatement
          localTypeDeclaration
           classOrInterfaceModifier
            annotation
             @
             qualifiedName
              identifier
               WeakOuter
           classDeclaration
            class
            identifier
             Foobar
            classBody
             {
             }
         }
    }
 typeDeclaration
  classDeclaration
   class
   identifier
    Foo
   classBody
    {
    classBodyDeclaration
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        void
       identifier
        bar
       formalParameters
        (
        )
       methodBody
        block
         {
         blockStatement
          statement
           expression
            new
            creator
             createdName
              identifier
               Object
             classCreatorRest
              arguments
               (
               )
              classBody
               {
               }
           ;
         }
    }
 typeDeclaration
  classOrInterfaceModifier
   public
  classDeclaration
   class
   identifier
    Foo
   classBody
    {
    classBodyDeclaration
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        typeType
         primitiveType
          int
       identifier
        go
       formalParameters
        (
        )
       methodBody
        block
         {
         blockStatement
          statement
           return
           expression
            primary
             literal
              integerLiteral
               0
           ;
         }
    classBodyDeclaration
     modifier
      classOrInterfaceModifier
       private
     memberDeclaration
      classDeclaration
       class
       identifier
        Bar
       classBody
        {
        }
    }
 typeDeclaration
  classDeclaration
   class
   identifier
    Foo
   classBody
    {
    classBodyDeclaration
     memberDeclaration
      fieldDeclaration
       typeType
        classOrInterfaceType
         typeIdentifier
          String
       variableDeclarators
        variableDeclarator
         variableDeclaratorId
          identifier
           str
       ;
    classBodyDeclaration
     memberDeclaration
      constructorDeclaration
       identifier
        Foo
       formalParameters
        (
        )
       block
        {
        }
    classBodyDeclaration
     memberDeclaration
      constructorDeclaration
       identifier
        Foo
       formalParameters
        (
        formalParameterList
         formalParameter
          typeType
           classOrInterfaceType
            typeIdentifier
             String
          variableDeclaratorId
           identifier
            str
        )
       block
        {
        blockStatement
         statement
          expression
           expression
            expression
             primary
              this
            .
            identifier
             str
           =
           expression
            primary
             identifier
              str
          ;
        }
    }
 typeDeclaration
  classDeclaration
   class
   identifier
    Foo
   classBody
    {
    classBodyDeclaration
     static
     block
      {
      }
    }
 typeDeclaration
  classDeclaration
   class
   identifier
    Foo
   classBody
    {
    classBodyDeclaration
     block
      {
      }
    }
 typeDeclaration
  classDeclaration
   class
   identifier
    Foo
   classBody
    {
    classBodyDeclaration
     modifier
      classOrInterfaceModifier
       public
     memberDeclaration
      constructorDeclaration
       identifier
        Foo
       formalParameters
        (
        )
       block
        {
        blockStatement
         statement
          expression
           expression
            expression
             primary
              identifier
               System
            .
            identifier
             out
           .
           methodCall
            identifier
             println
            arguments
             (
             expressionList
              expression
               expression
                expression
                 primary
                  typeTypeOrVoid
                   typeType
                    classOrInterfaceType
                     typeIdentifier
                      Foo
                  .
                  class
                .
                methodCall
                 identifier
                  getName
                 arguments
                  (
                  )
               +
               expression
                primary
                 literal
                  ": constructor runtime"
             )
          ;
        }
    classBodyDeclaration
     modifier
      classOrInterfaceModifier
       public
     memberDeclaration
      constructorDeclaration
       identifier
        Foo
       formalParameters
        (
        formalParameterList
         formalParameter
          typeType
           primitiveType
            int
          variableDeclaratorId
           identifier
            a
         ,
         formalParameter
          typeType
           primitiveType
            int
          variableDeclaratorId
           identifier
            b
        )
       block
        {
        blockStatement
         statement
          expression
           expression
            expression
             primary
              identifier
               System
            .
            identifier
             out
           .
           methodCall
            identifier
             println
            arguments
             (
             expressionList
              expression
               expression
                expression
                 expression
                  primary
                   typeTypeOrVoid
                    typeType
                     classOrInterfaceType
                      typeIdentifier
                       Foo
                   .
                   class
                 .
                 methodCall
                  identifier
                   getName
                  arguments
                   (
                   )
                +
                expression
                 primary
                  literal
                   ": overloaded constructor "
               +
               expression
                methodCall
                 this
                 arguments
                  (
                  )
             )
          ;
        }
    classBodyDeclaration
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        typeType
         primitiveType
          int
       identifier
        bar
       formalParameters
        (
        formalParameterList
         formalParameter
          typeType
           primitiveType
            int
          variableDeclaratorId
           identifier
            a
         ,
         formalParameter
          typeType
           primitiveType
            int
          variableDeclaratorId
           identifier
            b
        )
       methodBody
        block
         {
         blockStatement
          statement
           return
           expression
            expression
             primary
              (
              expression
               expression
                primary
                 identifier
                  a
               *
               expression
                primary
                 literal
                  integerLiteral
                   2
              )
            +
            expression
             primary
              identifier
               b
           ;
         }
    classBodyDeclaration
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        typeType
         primitiveType
          int
       identifier
        bar
       formalParameters
        (
        formalParameterList
         formalParameter
          typeType
           primitiveType
            int
          variableDeclaratorId
           identifier
            a
        )
       methodBody
        block
         {
         blockStatement
          statement
           return
           expression
            expression
             primary
              identifier
               a
            *
            expression
             primary
              literal
               integerLiteral
                2
           ;
         }
    classBodyDeclaration
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        void
       identifier
        openStream
       formalParameters
        (
        )
       throws
       qualifiedNameList
        qualifiedName
         identifier
          IOException
        ,
        qualifiedName
         identifier
          myException
       methodBody
        block
         {
         }
    classBodyDeclaration
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        void
       identifier
        printReport
       formalParameters
        (
        formalParameterList
         formalParameter
          typeType
           classOrInterfaceType
            typeIdentifier
             String
          variableDeclaratorId
           identifier
            header
         ,
         lastFormalParameter
          typeType
           primitiveType
            int
          ...
          variableDeclaratorId
           identifier
            numbers
        )
       methodBody
        block
         {
         blockStatement
          statement
           expression
            expression
             expression
              primary
               identifier
                System
             .
             identifier
              out
            .
            methodCall
             identifier
              println
             arguments
              (
              expressionList
               expression
                primary
                 identifier
                  header
              )
           ;
         blockStatement
          statement
           for
           (
           forControl
            enhancedForControl
             typeType
              primitiveType
               int
             variableDeclaratorId
              identifier
               num
             :
             expression
              primary
               identifier
                numbers
           )
           statement
            block
             {
             blockStatement
              statement
               expression
                expression
                 expression
                  primary
                   identifier
                    System
                 .
                 identifier
                  out
                .
                methodCall
                 identifier
                  println
                 arguments
                  (
                  expressionList
                   expression
                    primary
                     identifier
                      num
                  )
               ;
             }
         }
    }
 typeDeclaration
  classDeclaration
   class
   identifier
    Operation
   classBody
    {
    classBodyDeclaration
     modifier
      classOrInterfaceModifier
       public
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        typeType
         primitiveType
          int
       identifier
        doSomething
       formalParameters
        (
        )
       methodBody
        block
         {
         blockStatement
          statement
           return
           expression
            primary
             literal
              integerLiteral
               0
           ;
         }
    }
 typeDeclaration
  classDeclaration
   class
   identifier
    NewOperation
   extends
   typeType
    classOrInterfaceType
     typeIdentifier
      Operation
   classBody
    {
    classBodyDeclaration
     modifier
      classOrInterfaceModifier
       annotation
        @
        qualifiedName
         identifier
          Override
     modifier
      classOrInterfaceModifier
       public
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        typeType
         primitiveType
          int
       identifier
        doSomething
       formalParameters
        (
        )
       methodBody
        block
         {
         blockStatement
          statement
           return
           expression
            primary
             literal
              integerLiteral
               1
           ;
         }
    }
 typeDeclaration
  classOrInterfaceModifier
   public
  classDeclaration
   class
   identifier
    AbstractClass
   classBody
    {
    classBodyDeclaration
     modifier
      classOrInterfaceModifier
       private
     modifier
      classOrInterfaceModifier
       static
     modifier
      classOrInterfaceModifier
       final
     memberDeclaration
      fieldDeclaration
       typeType
        classOrInterfaceType
         typeIdentifier
          String
       variableDeclarators
        variableDeclarator
         variableDeclaratorId
          identifier
           hello
       ;
    classBodyDeclaration
     static
     block
      {
      blockStatement
       statement
        expression
         expression
          expression
           primary
            identifier
             System
          .
          identifier
           out
         .
         methodCall
          identifier
           println
          arguments
           (
           expressionList
            expression
             expression
              expression
               primary
                typeTypeOrVoid
                 typeType
                  classOrInterfaceType
                   typeIdentifier
                    AbstractClass
                .
                class
              .
              methodCall
               identifier
                getName
               arguments
                (
                )
             +
             expression
              primary
               literal
                ": static block runtime"
           )
        ;
      blockStatement
       statement
        expression
         expression
          primary
           identifier
            hello
         =
         expression
          expression
           primary
            literal
             "hello from "
          +
          expression
           expression
            primary
             typeTypeOrVoid
              typeType
               classOrInterfaceType
                typeIdentifier
                 AbstractClass
             .
             class
           .
           methodCall
            identifier
             getName
            arguments
             (
             )
        ;
      }
    classBodyDeclaration
     block
      {
      blockStatement
       statement
        expression
         expression
          expression
           primary
            identifier
             System
          .
          identifier
           out
         .
         methodCall
          identifier
           println
          arguments
           (
           expressionList
            expression
             expression
              expression
               primary
                typeTypeOrVoid
                 typeType
                  classOrInterfaceType
                   typeIdentifier
                    AbstractClass
                .
                class
              .
              methodCall
               identifier
                getName
               arguments
                (
                )
             +
             expression
              primary
               literal
                ": instance block runtime"
           )
        ;
      }
    classBodyDeclaration
     modifier
      classOrInterfaceModifier
       public
     memberDeclaration
      constructorDeclaration
       identifier
        AbstractClass
       formalParameters
        (
        )
       block
        {
        blockStatement
         statement
          expression
           expression
            expression
             primary
              identifier
               System
            .
            identifier
             out
           .
           methodCall
            identifier
             println
            arguments
             (
             expressionList
              expression
               expression
                expression
                 primary
                  typeTypeOrVoid
                   typeType
                    classOrInterfaceType
                     typeIdentifier
                      AbstractClass
                  .
                  class
                .
                methodCall
                 identifier
                  getName
                 arguments
                  (
                  )
               +
               expression
                primary
                 literal
                  ": constructor runtime"
             )
          ;
        }
    classBodyDeclaration
     modifier
      classOrInterfaceModifier
       public
     modifier
      classOrInterfaceModifier
       static
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        void
       identifier
        hello
       formalParameters
        (
        )
       methodBody
        block
         {
         blockStatement
          statement
           expression
            expression
             expression
              primary
               identifier
                System
             .
             identifier
              out
            .
            methodCall
             identifier
              println
             arguments
              (
              expressionList
               expression
                primary
                 identifier
                  hello
              )
           ;
         }
    }
 typeDeclaration
  classOrInterfaceModifier
   public
  classDeclaration
   class
   identifier
    CustomClass
   extends
   typeType
    classOrInterfaceType
     typeIdentifier
      AbstractClass
   classBody
    {
    classBodyDeclaration
     static
     block
      {
      blockStatement
       statement
        expression
         expression
          expression
           primary
            identifier
             System
          .
          identifier
           out
         .
         methodCall
          identifier
           println
          arguments
           (
           expressionList
            expression
             expression
              expression
               primary
                typeTypeOrVoid
                 typeType
                  classOrInterfaceType
                   typeIdentifier
                    CustomClass
                .
                class
              .
              methodCall
               identifier
                getName
               arguments
                (
                )
             +
             expression
              primary
               literal
                ": static block runtime"
           )
        ;
      }
    classBodyDeclaration
     block
      {
      blockStatement
       statement
        expression
         expression
          expression
           primary
            identifier
             System
          .
          identifier
           out
         .
         methodCall
          identifier
           println
          arguments
           (
           expressionList
            expression
             expression
              expression
               primary
                typeTypeOrVoid
                 typeType
                  classOrInterfaceType
                   typeIdentifier
                    CustomClass
                .
                class
              .
              methodCall
               identifier
                getName
               arguments
                (
                )
             +
             expression
              primary
               literal
                ": instance block runtime"
           )
        ;
      }
    classBodyDeclaration
     modifier
      classOrInterfaceModifier
       public
     memberDeclaration
      constructorDeclaration
       identifier
        CustomClass
       formalParameters
        (
        )
       block
        {
        blockStatement
         statement
          expression
           methodCall
            super
            arguments
             (
             )
          ;
        blockStatement
         statement
          expression
           expression
            expression
             primary
              identifier
               System
            .
            identifier
             out
           .
           methodCall
            identifier
             println
            arguments
             (
             expressionList
              expression
               expression
                expression
                 primary
                  typeTypeOrVoid
                   typeType
                    classOrInterfaceType
                     typeIdentifier
                      CustomClass
                  .
                  class
                .
                methodCall
                 identifier
                  getName
                 arguments
                  (
                  )
               +
               expression
                primary
                 literal
                  ": constructor runtime"
             )
          ;
        }
    classBodyDeclaration
     modifier
      classOrInterfaceModifier
       public
     modifier
      classOrInterfaceModifier
       static
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        void
       identifier
        main
       formalParameters
        (
        formalParameterList
         formalParameter
          typeType
           classOrInterfaceType
            typeIdentifier
             String
           [
           ]
          variableDeclaratorId
           identifier
            args
        )
       methodBody
        block
         {
         blockStatement
          localVariableDeclaration
           typeType
            classOrInterfaceType
             typeIdentifier
              CustomClass
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               nc
             =
             variableInitializer
              expression
               new
               creator
                createdName
                 identifier
                  CustomClass
                classCreatorRest
                 arguments
                  (
                  )
          ;
         blockStatement
          statement
           expression
            methodCall
             identifier
              hello
             arguments
              (
              )
           ;
         blockStatement
          statement
           expression
            expression
             primary
              identifier
               AbstractClass
            .
            methodCall
             identifier
              hello
             arguments
              (
              )
           ;
         }
    }
 typeDeclaration
  enumDeclaration
   enum
   identifier
    Season
   {
   enumConstants
    enumConstant
     identifier
      WINTER
    ,
    enumConstant
     identifier
      SPRING
    ,
    enumConstant
     identifier
      SUMMER
    ,
    enumConstant
     identifier
      AUTUMN
   }
 typeDeclaration
  classOrInterfaceModifier
   public
  enumDeclaration
   enum
   identifier
    Season
   {
   enumConstants
    enumConstant
     identifier
      WINTER
     arguments
      (
      expressionList
       expression
        primary
         literal
          "Cold"
      )
    ,
    enumConstant
     identifier
      SPRING
     arguments
      (
      expressionList
       expression
        primary
         literal
          "Warmer"
      )
    ,
    enumConstant
     identifier
      SUMMER
     arguments
      (
      expressionList
       expression
        primary
         literal
          "Hot"
      )
    ,
    enumConstant
     identifier
      AUTUMN
     arguments
      (
      expressionList
       expression
        primary
         literal
          "Cooler"
      )
   enumBodyDeclarations
    ;
    classBodyDeclaration
     memberDeclaration
      constructorDeclaration
       identifier
        Season
       formalParameters
        (
        formalParameterList
         formalParameter
          typeType
           classOrInterfaceType
            typeIdentifier
             String
          variableDeclaratorId
           identifier
            description
        )
       block
        {
        blockStatement
         statement
          expression
           expression
            expression
             primary
              this
            .
            identifier
             description
           =
           expression
            primary
             identifier
              description
          ;
        }
    classBodyDeclaration
     modifier
      classOrInterfaceModifier
       private
     modifier
      classOrInterfaceModifier
       final
     memberDeclaration
      fieldDeclaration
       typeType
        classOrInterfaceType
         typeIdentifier
          String
       variableDeclarators
        variableDeclarator
         variableDeclaratorId
          identifier
           description
       ;
    classBodyDeclaration
     modifier
      classOrInterfaceModifier
       public
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        typeType
         classOrInterfaceType
          typeIdentifier
           String
       identifier
        getDescription
       formalParameters
        (
        )
       methodBody
        block
         {
         blockStatement
          statement
           return
           expression
            primary
             identifier
              description
           ;
         }
   }
 typeDeclaration
  classOrInterfaceModifier
   public
  enumDeclaration
   enum
   identifier
    Season
   {
   enumConstants
    enumConstant
     identifier
      WINTER
     classBody
      {
      classBodyDeclaration
       memberDeclaration
        methodDeclaration
         typeTypeOrVoid
          typeType
           classOrInterfaceType
            typeIdentifier
             String
         identifier
          getDescription
         formalParameters
          (
          )
         methodBody
          block
           {
           blockStatement
            statement
             return
             expression
              primary
               literal
                "cold"
             ;
           }
      }
    ,
    enumConstant
     identifier
      SPRING
     classBody
      {
      classBodyDeclaration
       memberDeclaration
        methodDeclaration
         typeTypeOrVoid
          typeType
           classOrInterfaceType
            typeIdentifier
             String
         identifier
          getDescription
         formalParameters
          (
          )
         methodBody
          block
           {
           blockStatement
            statement
             return
             expression
              primary
               literal
                "warmer"
             ;
           }
      }
    ,
    enumConstant
     identifier
      SUMMER
     classBody
      {
      classBodyDeclaration
       memberDeclaration
        methodDeclaration
         typeTypeOrVoid
          typeType
           classOrInterfaceType
            typeIdentifier
             String
         identifier
          getDescription
         formalParameters
          (
          )
         methodBody
          block
           {
           blockStatement
            statement
             return
             expression
              primary
               literal
                "hot"
             ;
           }
      }
    ,
    enumConstant
     identifier
      FALL
     classBody
      {
      classBodyDeclaration
       memberDeclaration
        methodDeclaration
         typeTypeOrVoid
          typeType
           classOrInterfaceType
            typeIdentifier
             String
         identifier
          getDescription
         formalParameters
          (
          )
         methodBody
          block
           {
           blockStatement
            statement
             return
             expression
              primary
               literal
                "cooler"
             ;
           }
      }
   enumBodyDeclarations
    ;
   }
 typeDeclaration
  interfaceDeclaration
   interface
   identifier
    ActionListener
   interfaceBody
    {
    interfaceBodyDeclaration
     interfaceMemberDeclaration
      constDeclaration
       typeType
        primitiveType
         int
       constantDeclarator
        identifier
         ACTION_ADD
        =
        variableInitializer
         expression
          primary
           literal
            integerLiteral
             0
       ;
    interfaceBodyDeclaration
     interfaceMemberDeclaration
      constDeclaration
       typeType
        primitiveType
         int
       constantDeclarator
        identifier
         ACTION_REMOVE
        =
        variableInitializer
         expression
          primary
           literal
            integerLiteral
             1
       ;
    interfaceBodyDeclaration
     interfaceMemberDeclaration
      interfaceMethodDeclaration
       interfaceCommonBodyDeclaration
        typeTypeOrVoid
         void
        identifier
         actionSelected
        formalParameters
         (
         formalParameterList
          formalParameter
           typeType
            primitiveType
             int
           variableDeclaratorId
            identifier
             action
         )
        methodBody
         ;
    }
 typeDeclaration
  interfaceDeclaration
   interface
   identifier
    RequestListener
   interfaceBody
    {
    interfaceBodyDeclaration
     interfaceMemberDeclaration
      interfaceMethodDeclaration
       interfaceCommonBodyDeclaration
        typeTypeOrVoid
         typeType
          primitiveType
           int
        identifier
         requestReceived
        formalParameters
         (
         )
        methodBody
         ;
    }
 typeDeclaration
  classDeclaration
   class
   identifier
    ActionHandler
   implements
   typeList
    typeType
     classOrInterfaceType
      typeIdentifier
       ActionListener
    ,
    typeType
     classOrInterfaceType
      typeIdentifier
       RequestListener
   classBody
    {
    classBodyDeclaration
     modifier
      classOrInterfaceModifier
       public
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        void
       identifier
        actionSelected
       formalParameters
        (
        formalParameterList
         formalParameter
          typeType
           primitiveType
            int
          variableDeclaratorId
           identifier
            action
        )
       methodBody
        block
         {
         }
    classBodyDeclaration
     modifier
      classOrInterfaceModifier
       public
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        typeType
         primitiveType
          int
       identifier
        requestReceived
       formalParameters
        (
        )
       methodBody
        block
         {
         }
    }
 typeDeclaration
  classDeclaration
   class
   identifier
    Dummy
   classBody
    {
    classBodyDeclaration
     modifier
      classOrInterfaceModifier
       public
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        void
       identifier
        dummy
       formalParameters
        (
        )
       methodBody
        block
         {
         blockStatement
          localVariableDeclaration
           typeType
            classOrInterfaceType
             typeIdentifier
              RequestListener
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               listener
             =
             variableInitializer
              expression
               new
               creator
                createdName
                 identifier
                  ActionHandler
                classCreatorRest
                 arguments
                  (
                  )
          ;
         blockStatement
          statement
           expression
            expression
             primary
              identifier
               listener
            .
            methodCall
             identifier
              requestReceived
             arguments
              (
              )
           ;
         }
    }
 typeDeclaration
  classDeclaration
   class
   identifier
    Dummy
   classBody
    {
    classBodyDeclaration
     modifier
      classOrInterfaceModifier
       public
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        void
       identifier
        dummy
       formalParameters
        (
        )
       methodBody
        block
         {
         blockStatement
          localTypeDeclaration
           interfaceDeclaration
            interface
            identifier
             AnotherInterface
            extends
            typeList
             typeType
              classOrInterfaceType
               typeIdentifier
                Runnable
            interfaceBody
             {
             interfaceBodyDeclaration
              interfaceMemberDeclaration
               interfaceMethodDeclaration
                interfaceCommonBodyDeclaration
                 typeTypeOrVoid
                  void
                 identifier
                  work
                 formalParameters
                  (
                  )
                 methodBody
                  ;
             }
         }
    }
 typeDeclaration
  annotationTypeDeclaration
   @
   interface
   identifier
    BlockingOperations
   annotationTypeBody
    {
    }
 typeDeclaration
  annotationTypeDeclaration
   @
   interface
   identifier
    BlockingOperations
   annotationTypeBody
    {
    annotationTypeElementDeclaration
     annotationTypeElementRest
      typeType
       primitiveType
        boolean
      annotationMethodOrConstantRest
       annotationMethodRest
        identifier
         fileSystemOperations
        (
        )
      ;
    annotationTypeElementDeclaration
     annotationTypeElementRest
      typeType
       primitiveType
        boolean
      annotationMethodOrConstantRest
       annotationMethodRest
        identifier
         networkOperations
        (
        )
        defaultValue
         default
         elementValue
          expression
           primary
            literal
             false
      ;
    }
 typeDeclaration
  classDeclaration
   class
   identifier
    Dummy
   classBody
    {
    classBodyDeclaration
     modifier
      classOrInterfaceModifier
       annotation
        @
        qualifiedName
         identifier
          BlockingOperations
        (
        elementValuePairs
         elementValuePair
          identifier
           fileSystemOperations
          =
          elementValue
           expression
            primary
             literal
              true
         ,
         elementValuePair
          identifier
           networkOperations
          =
          elementValue
           expression
            primary
             literal
              true
        )
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        void
       identifier
        openOutputStream
       formalParameters
        (
        )
       methodBody
        block
         {
         }
    classBodyDeclaration
     modifier
      classOrInterfaceModifier
       annotation
        @
        qualifiedName
         identifier
          Unused
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        void
       identifier
        travelToJupiter
       formalParameters
        (
        )
       methodBody
        block
         {
         }
    }
 typeDeclaration
  classOrInterfaceModifier
   public
  classDeclaration
   class
   identifier
    Mapper
   typeParameters
    <
    typeParameter
     identifier
      T
     extends
     typeBound
      typeType
       classOrInterfaceType
        typeIdentifier
         ArrayList
      &
      typeType
       classOrInterfaceType
        typeIdentifier
         Formattable
    ,
    typeParameter
     identifier
      V
    >
   classBody
    {
    classBodyDeclaration
     modifier
      classOrInterfaceModifier
       public
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        void
       identifier
        add
       formalParameters
        (
        formalParameterList
         formalParameter
          typeType
           classOrInterfaceType
            typeIdentifier
             T
          variableDeclaratorId
           identifier
            array
         ,
         formalParameter
          typeType
           classOrInterfaceType
            typeIdentifier
             V
          variableDeclaratorId
           identifier
            item
        )
       methodBody
        block
         {
         blockStatement
          statement
           expression
            expression
             primary
              identifier
               array
            .
            methodCall
             identifier
              add
             arguments
              (
              expressionList
               expression
                primary
                 identifier
                  item
              )
           ;
         blockStatement
          localVariableDeclaration
           typeType
            classOrInterfaceType
             typeIdentifier
              Mapper
             typeArguments
              <
              typeArgument
               typeType
                classOrInterfaceType
                 typeIdentifier
                  CustomList
              ,
              typeArgument
               typeType
                classOrInterfaceType
                 typeIdentifier
                  Integer
              >
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               mapper
             =
             variableInitializer
              expression
               new
               creator
                createdName
                 identifier
                  Mapper
                 typeArgumentsOrDiamond
                  typeArguments
                   <
                   typeArgument
                    typeType
                     classOrInterfaceType
                      typeIdentifier
                       CustomList
                   ,
                   typeArgument
                    typeType
                     classOrInterfaceType
                      typeIdentifier
                       Integer
                   >
                classCreatorRest
                 arguments
                  (
                  )
          ;
         blockStatement
          localVariableDeclaration
           typeType
            classOrInterfaceType
             typeIdentifier
              Mapper
             typeArguments
              <
              typeArgument
               typeType
                classOrInterfaceType
                 typeIdentifier
                  CustomList
              ,
              typeArgument
               ?
              >
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               mapper
          ;
         blockStatement
          statement
           expression
            expression
             primary
              identifier
               mapper
            =
            expression
             new
             creator
              createdName
               identifier
                Mapper
               typeArgumentsOrDiamond
                typeArguments
                 <
                 typeArgument
                  typeType
                   classOrInterfaceType
                    typeIdentifier
                     CustomList
                 ,
                 typeArgument
                  typeType
                   classOrInterfaceType
                    typeIdentifier
                     Boolean
                 >
              classCreatorRest
               arguments
                (
                )
           ;
         blockStatement
          statement
           expression
            expression
             primary
              identifier
               mapper
            =
            expression
             new
             creator
              createdName
               identifier
                Mapper
               typeArgumentsOrDiamond
                typeArguments
                 <
                 typeArgument
                  typeType
                   classOrInterfaceType
                    typeIdentifier
                     CustomList
                 ,
                 typeArgument
                  typeType
                   classOrInterfaceType
                    typeIdentifier
                     Integer
                 >
              classCreatorRest
               arguments
                (
                )
           ;
         }
    }
 typeDeclaration
  classDeclaration
   class
   identifier
    Mapper
   classBody
    {
    classBodyDeclaration
     memberDeclaration
      genericConstructorDeclaration
       typeParameters
        <
        typeParameter
         identifier
          T
        ,
        typeParameter
         identifier
          V
        >
       constructorDeclaration
        identifier
         Mapper
        formalParameters
         (
         formalParameterList
          formalParameter
           typeType
            classOrInterfaceType
             typeIdentifier
              T
           variableDeclaratorId
            identifier
             array
          ,
          formalParameter
           typeType
            classOrInterfaceType
             typeIdentifier
              V
           variableDeclaratorId
            identifier
             item
         )
        block
         {
         }
    classBodyDeclaration
     modifier
      classOrInterfaceModifier
       static
     memberDeclaration
      genericMethodDeclaration
       typeParameters
        <
        typeParameter
         identifier
          T
        ,
        typeParameter
         identifier
          V
         extends
         typeBound
          typeType
           classOrInterfaceType
            typeIdentifier
             T
        >
       methodDeclaration
        typeTypeOrVoid
         typeType
          primitiveType
           boolean
        identifier
         contains
        formalParameters
         (
         formalParameterList
          formalParameter
           typeType
            classOrInterfaceType
             typeIdentifier
              T
           variableDeclaratorId
            identifier
             item
          ,
          formalParameter
           typeType
            classOrInterfaceType
             typeIdentifier
              V
            [
            ]
           variableDeclaratorId
            identifier
             arr
         )
        methodBody
         block
          {
          blockStatement
           statement
            for
            (
            forControl
             enhancedForControl
              typeType
               classOrInterfaceType
                typeIdentifier
                 T
              variableDeclaratorId
               identifier
                currentItem
              :
              expression
               primary
                identifier
                 arr
            )
            statement
             block
              {
              blockStatement
               statement
                if
                parExpression
                 (
                 expression
                  expression
                   primary
                    identifier
                     item
                  .
                  methodCall
                   identifier
                    equals
                   arguments
                    (
                    expressionList
                     expression
                      primary
                       identifier
                        currentItem
                    )
                 )
                statement
                 block
                  {
                  blockStatement
                   statement
                    return
                    expression
                     primary
                      literal
                       true
                    ;
                  }
              }
          blockStatement
           statement
            return
            expression
             primary
              literal
               false
            ;
          }
    }
 typeDeclaration
  interfaceDeclaration
   interface
   identifier
    Expandable
   typeParameters
    <
    typeParameter
     identifier
      T
     extends
     typeBound
      typeType
       classOrInterfaceType
        typeIdentifier
         Number
    >
   interfaceBody
    {
    interfaceBodyDeclaration
     interfaceMemberDeclaration
      interfaceMethodDeclaration
       interfaceCommonBodyDeclaration
        typeTypeOrVoid
         void
        identifier
         addItem
        formalParameters
         (
         formalParameterList
          formalParameter
           typeType
            classOrInterfaceType
             typeIdentifier
              T
           variableDeclaratorId
            identifier
             item
         )
        methodBody
         ;
    }
 typeDeclaration
  classDeclaration
   class
   identifier
    Array
   typeParameters
    <
    typeParameter
     identifier
      T
     extends
     typeBound
      typeType
       classOrInterfaceType
        typeIdentifier
         Number
    >
   implements
   typeList
    typeType
     classOrInterfaceType
      typeIdentifier
       Expandable
      typeArguments
       <
       typeArgument
        typeType
         classOrInterfaceType
          typeIdentifier
           T
       >
   classBody
    {
    classBodyDeclaration
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        void
       identifier
        addItem
       formalParameters
        (
        formalParameterList
         formalParameter
          typeType
           classOrInterfaceType
            typeIdentifier
             T
          variableDeclaratorId
           identifier
            item
        )
       methodBody
        block
         {
         }
    }
 typeDeclaration
  classDeclaration
   class
   identifier
    IntegerArray
   implements
   typeList
    typeType
     classOrInterfaceType
      typeIdentifier
       Expandable
      typeArguments
       <
       typeArgument
        typeType
         classOrInterfaceType
          typeIdentifier
           Integer
       >
   classBody
    {
    classBodyDeclaration
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        void
       identifier
        addItem
       formalParameters
        (
        formalParameterList
         formalParameter
          typeType
           classOrInterfaceType
            typeIdentifier
             Integer
          variableDeclaratorId
           identifier
            item
        )
       methodBody
        block
         {
         }
    }
 typeDeclaration
  classOrInterfaceModifier
   public
  annotationTypeDeclaration
   @
   interface
   identifier
    Bean
   annotationTypeBody
    {
    annotationTypeElementDeclaration
     modifier
      classOrInterfaceModifier
       public
     modifier
      classOrInterfaceModifier
       static
     modifier
      classOrInterfaceModifier
       final
     annotationTypeElementRest
      typeType
       classOrInterfaceType
        typeIdentifier
         String
      annotationMethodOrConstantRest
       annotationConstantRest
        variableDeclarators
         variableDeclarator
          variableDeclaratorId
           identifier
            ASDF
          =
          variableInitializer
           expression
            primary
             literal
              "ASDF"
      ;
    }
 typeDeclaration
  classDeclaration
   class
   identifier
    AnnoName
   typeParameters
    <
    typeParameter
     identifier
      T
    >
   classBody
    {
    classBodyDeclaration
     modifier
      classOrInterfaceModifier
       static
     memberDeclaration
      genericMethodDeclaration
       typeParameters
        <
        typeParameter
         identifier
          T
        >
       methodDeclaration
        typeTypeOrVoid
         typeType
          annotation
           altAnnotationQualifiedName
            identifier
             org
            .
            identifier
             host
            .
            identifier
             test
            .
            @
            identifier
             N
          classOrInterfaceType
           typeIdentifier
            Bar
           typeArguments
            <
            typeArgument
             typeType
              classOrInterfaceType
               typeIdentifier
                T
            >
        identifier
         fn1
        formalParameters
         (
         formalParameterList
          formalParameter
           variableModifier
            annotation
             altAnnotationQualifiedName
              identifier
               org
              .
              identifier
               host
              .
              identifier
               test
              .
              @
              identifier
               N
           typeType
            classOrInterfaceType
             typeIdentifier
              Bar
             typeArguments
              <
              typeArgument
               typeType
                classOrInterfaceType
                 typeIdentifier
                  T
              >
           variableDeclaratorId
            identifier
             p
         )
        methodBody
         block
          {
          blockStatement
           statement
            return
            expression
             primary
              literal
               null
            ;
          }
    classBodyDeclaration
     modifier
      classOrInterfaceModifier
       static
     memberDeclaration
      genericMethodDeclaration
       typeParameters
        <
        typeParameter
         identifier
          T
        >
       methodDeclaration
        typeTypeOrVoid
         typeType
          annotation
           altAnnotationQualifiedName
            identifier
             org
            .
            identifier
             test
            .
            @
            identifier
             N
          classOrInterfaceType
           typeIdentifier
            Bar
           typeArguments
            <
            typeArgument
             typeType
              classOrInterfaceType
               typeIdentifier
                T
            >
        identifier
         fn2
        formalParameters
         (
         formalParameterList
          formalParameter
           variableModifier
            annotation
             altAnnotationQualifiedName
              identifier
               org
              .
              identifier
               test
              .
              @
              identifier
               N
           typeType
            classOrInterfaceType
             typeIdentifier
              Bar
             typeArguments
              <
              typeArgument
               typeType
                classOrInterfaceType
                 typeIdentifier
                  T
              >
           variableDeclaratorId
            identifier
             p
         )
        methodBody
         block
          {
          blockStatement
           statement
            return
            expression
             primary
              literal
               null
            ;
          }
    classBodyDeclaration
     modifier
      classOrInterfaceModifier
       static
     memberDeclaration
      genericMethodDeclaration
       typeParameters
        <
        typeParameter
         identifier
          T
        >
       methodDeclaration
        typeTypeOrVoid
         typeType
          annotation
           altAnnotationQualifiedName
            identifier
             org
            .
            @
            identifier
             N
          classOrInterfaceType
           typeIdentifier
            Bar
           typeArguments
            <
            typeArgument
             typeType
              classOrInterfaceType
               typeIdentifier
                T
            >
        identifier
         fn3
        formalParameters
         (
         formalParameterList
          formalParameter
           variableModifier
            annotation
             altAnnotationQualifiedName
              identifier
               org
              .
              @
              identifier
               N
           typeType
            classOrInterfaceType
             typeIdentifier
              Bar
             typeArguments
              <
              typeArgument
               typeType
                classOrInterfaceType
                 typeIdentifier
                  T
              >
           variableDeclaratorId
            identifier
             p
         )
        methodBody
         block
          {
          blockStatement
           statement
            return
            expression
             primary
              literal
               null
            ;
          }
    }
 typeDeclaration
  classDeclaration
   class
   identifier
    InstanceOf
   classBody
    {
    classBodyDeclaration
     modifier
      classOrInterfaceModifier
       public
     modifier
      classOrInterfaceModifier
       static
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        void
       identifier
        main
       formalParameters
        (
        formalParameterList
         formalParameter
          typeType
           classOrInterfaceType
            typeIdentifier
             String
           [
           ]
          variableDeclaratorId
           identifier
            args
        )
       methodBody
        block
         {
         blockStatement
          statement
           if
           parExpression
            (
            expression
             expression
              primary
               identifier
                args
             instanceof
             typeType
              classOrInterfaceType
               typeIdentifier
                String
              [
              ]
            )
           statement
            block
             {
             }
         blockStatement
          statement
           if
           parExpression
            (
            expression
             expression
              primary
               identifier
                args
             instanceof
             typeType
              classOrInterfaceType
               identifier
                a
               .
               typeIdentifier
                String
              [
              ]
            )
           statement
            block
             {
             }
         }
    }
