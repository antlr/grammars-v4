compilationUnit
 packageDeclaration
  package
  qualifiedName
   identifier
    var
   .
   identifier
    var
  ;
 importDeclaration
  import
  qualifiedName
   identifier
    java
   .
   identifier
    lang
   .
   identifier
    annotation
  .
  *
  ;
 importDeclaration
  import
  qualifiedName
   identifier
    java
   .
   identifier
    util
   .
   identifier
    ArrayList
  ;
 importDeclaration
  import
  qualifiedName
   identifier
    java
   .
   identifier
    util
   .
   identifier
    List
  ;
 importDeclaration
  import
  qualifiedName
   identifier
    var
   .
   identifier
    var
   .
   identifier
    base
   .
   identifier
    T
  ;
 typeDeclaration
  classDeclaration
   class
   identifier
    Tests
   classBody
    {
    classBodyDeclaration
     memberDeclaration
      classDeclaration
       class
       identifier
        AC
       implements
       typeList
        typeType
         classOrInterfaceType
          typeIdentifier
           AutoCloseable
       classBody
        {
        classBodyDeclaration
         modifier
          classOrInterfaceModifier
           annotation
            @
            qualifiedName
             identifier
              Override
         modifier
          classOrInterfaceModifier
           public
         memberDeclaration
          methodDeclaration
           typeTypeOrVoid
            void
           identifier
            close
           formalParameters
            (
            )
           throws
           qualifiedNameList
            qualifiedName
             identifier
              Exception
           methodBody
            block
             {
             }
        }
    classBodyDeclaration
     memberDeclaration
      classDeclaration
       class
       identifier
        TT
       extends
       typeType
        classOrInterfaceType
         identifier
          var
         .
         identifier
          var
         .
         identifier
          base
         .
         typeIdentifier
          T
       implements
       typeList
        typeType
         classOrInterfaceType
          identifier
           var
          .
          identifier
           var
          .
          identifier
           base
          .
          typeIdentifier
           I
       classBody
        {
        classBodyDeclaration
         memberDeclaration
          genericMethodDeclaration
           typeParameters
            <
            typeParameter
             identifier
              T
             extends
             typeBound
              typeType
               classOrInterfaceType
                identifier
                 var
                .
                identifier
                 var
                .
                identifier
                 base
                .
                typeIdentifier
                 I
            >
           methodDeclaration
            typeTypeOrVoid
             void
            identifier
             f
            formalParameters
             (
             )
            methodBody
             block
              {
              }
        classBodyDeclaration
         modifier
          classOrInterfaceModifier
           annotation
            @
            qualifiedName
             identifier
              Override
         modifier
          classOrInterfaceModifier
           public
         memberDeclaration
          methodDeclaration
           typeTypeOrVoid
            void
           identifier
            f1
           formalParameters
            (
            )
           methodBody
            block
             {
             }
        classBodyDeclaration
         memberDeclaration
          methodDeclaration
           typeTypeOrVoid
            void
           identifier
            var
           formalParameters
            (
            )
           methodBody
            block
             {
             blockStatement
              statement
               identifier
                var
               :
               statement
                for
                (
                forControl
                 ;
                 ;
                )
                statement
                 block
                  {
                  blockStatement
                   statement
                    break
                    identifier
                     var
                    ;
                  }
             }
        }
    classBodyDeclaration
     memberDeclaration
      interfaceDeclaration
       interface
       identifier
        II
       interfaceBody
        {
        interfaceBodyDeclaration
         interfaceMemberDeclaration
          interfaceMethodDeclaration
           interfaceCommonBodyDeclaration
            typeTypeOrVoid
             void
            identifier
             var
            formalParameters
             (
             )
            methodBody
             ;
        }
    classBodyDeclaration
     memberDeclaration
      enumDeclaration
       enum
       identifier
        E1
       {
       enumConstants
        enumConstant
         identifier
          var
         arguments
          (
          expressionList
           expression
            primary
             literal
              integerLiteral
               1
          )
       enumBodyDeclarations
        ;
        classBodyDeclaration
         memberDeclaration
          constructorDeclaration
           identifier
            E1
           formalParameters
            (
            formalParameterList
             formalParameter
              typeType
               primitiveType
                int
              variableDeclaratorId
               identifier
                i
            )
           block
            {
            }
       }
    classBodyDeclaration
     modifier
      classOrInterfaceModifier
       annotation
        @
        qualifiedName
         identifier
          Documented
     modifier
      classOrInterfaceModifier
       annotation
        @
        qualifiedName
         identifier
          Retention
        (
        elementValue
         expression
          expression
           primary
            identifier
             RetentionPolicy
          .
          identifier
           RUNTIME
        )
     modifier
      classOrInterfaceModifier
       annotation
        @
        qualifiedName
         identifier
          Target
        (
        elementValue
         elementValueArrayInitializer
          {
          elementValue
           expression
            expression
             primary
              identifier
               ElementType
            .
            identifier
             TYPE_USE
          ,
          elementValue
           expression
            expression
             primary
              identifier
               ElementType
            .
            identifier
             METHOD
          }
        )
     modifier
      classOrInterfaceModifier
       public
     memberDeclaration
      annotationTypeDeclaration
       @
       interface
       identifier
        TM1
       annotationTypeBody
        {
        }
    classBodyDeclaration
     modifier
      classOrInterfaceModifier
       annotation
        @
        qualifiedName
         identifier
          Documented
     modifier
      classOrInterfaceModifier
       annotation
        @
        qualifiedName
         identifier
          Retention
        (
        elementValue
         expression
          expression
           primary
            identifier
             RetentionPolicy
          .
          identifier
           RUNTIME
        )
     modifier
      classOrInterfaceModifier
       annotation
        @
        qualifiedName
         identifier
          Target
        (
        elementValue
         elementValueArrayInitializer
          {
          elementValue
           expression
            expression
             primary
              identifier
               ElementType
            .
            identifier
             TYPE_USE
          ,
          elementValue
           expression
            expression
             primary
              identifier
               ElementType
            .
            identifier
             TYPE
          }
        )
     modifier
      classOrInterfaceModifier
       public
     memberDeclaration
      annotationTypeDeclaration
       @
       interface
       identifier
        TM2
       annotationTypeBody
        {
        }
    classBodyDeclaration
     modifier
      classOrInterfaceModifier
       annotation
        @
        qualifiedName
         identifier
          Documented
     modifier
      classOrInterfaceModifier
       annotation
        @
        qualifiedName
         identifier
          Retention
        (
        elementValue
         expression
          expression
           primary
            identifier
             RetentionPolicy
          .
          identifier
           RUNTIME
        )
     modifier
      classOrInterfaceModifier
       annotation
        @
        qualifiedName
         identifier
          Target
        (
        elementValue
         elementValueArrayInitializer
          {
          elementValue
           expression
            expression
             primary
              identifier
               ElementType
            .
            identifier
             MODULE
          ,
          elementValue
           expression
            expression
             primary
              identifier
               ElementType
            .
            identifier
             TYPE_USE
          }
        )
     modifier
      classOrInterfaceModifier
       public
     memberDeclaration
      annotationTypeDeclaration
       @
       interface
       identifier
        TM3
       annotationTypeBody
        {
        }
    classBodyDeclaration
     modifier
      classOrInterfaceModifier
       static
     memberDeclaration
      classDeclaration
       class
       identifier
        PF
       classBody
        {
        classBodyDeclaration
         modifier
          classOrInterfaceModifier
           protected
         memberDeclaration
          fieldDeclaration
           typeType
            primitiveType
             int
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               p
           ;
        classBodyDeclaration
         modifier
          classOrInterfaceModifier
           static
         memberDeclaration
          fieldDeclaration
           typeType
            primitiveType
             int
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               sp
           ;
        classBodyDeclaration
         modifier
          classOrInterfaceModifier
           static
         memberDeclaration
          fieldDeclaration
           typeType
            primitiveType
             int
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               var
           ;
        }
    classBodyDeclaration
     modifier
      classOrInterfaceModifier
       static
     memberDeclaration
      classDeclaration
       class
       identifier
        CCC
       classBody
        {
        classBodyDeclaration
         modifier
          classOrInterfaceModifier
           static
         memberDeclaration
          fieldDeclaration
           typeType
            primitiveType
             int
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               var
             =
             variableInitializer
              expression
               primary
                literal
                 integerLiteral
                  0
           ;
        classBodyDeclaration
         modifier
          classOrInterfaceModifier
           static
         memberDeclaration
          methodDeclaration
           typeTypeOrVoid
            typeType
             primitiveType
              int
           identifier
            var
           formalParameters
            (
            )
           methodBody
            block
             {
             blockStatement
              statement
               return
               expression
                primary
                 literal
                  integerLiteral
                   0
               ;
             }
        }
    classBodyDeclaration
     block
      {
      blockStatement
       localVariableDeclaration
        variableModifier
         final
        var
        identifier
         c
        =
        expression
         primary
          literal
           integerLiteral
            1
       ;
      blockStatement
       statement
        expression
         expression
          expression
           primary
            identifier
             PF
          .
          identifier
           sp
         =
         expression
          primary
           identifier
            c
        ;
      blockStatement
       localVariableDeclaration
        typeType
         classOrInterfaceType
          typeIdentifier
           T
        variableDeclarators
         variableDeclarator
          variableDeclaratorId
           identifier
            t
       ;
      blockStatement
       localVariableDeclaration
        var
        identifier
         var
        =
        expression
         primary
          literal
           integerLiteral
            1
       ;
      blockStatement
       statement
        expression
         expression
          primary
           identifier
            var
         =
         expression
          expression
           primary
            identifier
             var
          +
          expression
           primary
            identifier
             var
        ;
      blockStatement
       localVariableDeclaration
        var
        identifier
         b
        =
        expression
         (
         typeType
          primitiveType
           byte
         )
         expression
          primary
           identifier
            var
       ;
      blockStatement
       localVariableDeclaration
        var
        identifier
         r
        =
        expression
         methodCall
          identifier
           var
          arguments
           (
           )
       ;
      blockStatement
       localVariableDeclaration
        var
        identifier
         v
        =
        expression
         expression
          primary
           identifier
            CCC
         .
         identifier
          var
       ;
      blockStatement
       localVariableDeclaration
        var
        identifier
         n
        =
        expression
         expression
          expression
           primary
            identifier
             CCC
          .
          methodCall
           identifier
            var
           arguments
            (
            )
         +
         expression
          expression
           primary
            identifier
             CCC
          .
          identifier
           var
       ;
      blockStatement
       localVariableDeclaration
        typeType
         classOrInterfaceType
          typeIdentifier
           CI4
        variableDeclarators
         variableDeclarator
          variableDeclaratorId
           identifier
            ci4
          =
          variableInitializer
           expression
            new
            creator
             createdName
              identifier
               CI4
             classCreatorRest
              arguments
               (
               )
       ;
      blockStatement
       localVariableDeclaration
        typeType
         classOrInterfaceType
          typeIdentifier
           I4
        variableDeclarators
         variableDeclarator
          variableDeclaratorId
           identifier
            i4a
          =
          variableInitializer
           expression
            expression
             primary
              identifier
               ci4
            ::
            identifier
             var
       ;
      blockStatement
       localVariableDeclaration
        typeType
         classOrInterfaceType
          typeIdentifier
           E1
        variableDeclarators
         variableDeclarator
          variableDeclaratorId
           identifier
            e
          =
          variableInitializer
           expression
            expression
             primary
              identifier
               E1
            .
            identifier
             var
       ;
      blockStatement
       statement
        switch
        parExpression
         (
         expression
          primary
           identifier
            e
         )
        {
        switchBlockStatementGroup
         switchLabel
          case
          expression
           primary
            identifier
             var
          :
         blockStatement
          statement
           break
           ;
        }
      }
    classBodyDeclaration
     block
      {
      blockStatement
       localVariableDeclaration
        typeType
         primitiveType
          int
        variableDeclarators
         variableDeclarator
          variableDeclaratorId
           identifier
            var
         ,
         variableDeclarator
          variableDeclaratorId
           identifier
            i
          =
          variableInitializer
           expression
            primary
             literal
              integerLiteral
               1
       ;
      }
    classBodyDeclaration
     block
      {
      blockStatement
       localVariableDeclaration
        var
        identifier
         var
        =
        expression
         new
         creator
          createdName
           identifier
            PF
          classCreatorRest
           arguments
            (
            )
       ;
      blockStatement
       statement
        expression
         expression
          expression
           primary
            identifier
             var
          .
          identifier
           var
         =
         expression
          primary
           literal
            integerLiteral
             1
        ;
      }
    classBodyDeclaration
     modifier
      classOrInterfaceModifier
       private
     memberDeclaration
      fieldDeclaration
       typeType
        primitiveType
         int
       variableDeclarators
        variableDeclarator
         variableDeclaratorId
          identifier
           var
         =
         variableInitializer
          expression
           primary
            literal
             integerLiteral
              1
       ;
    classBodyDeclaration
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        typeType
         primitiveType
          int
       identifier
        var
       formalParameters
        (
        )
       methodBody
        block
         {
         blockStatement
          statement
           return
           expression
            primary
             literal
              integerLiteral
               0
           ;
         }
    classBodyDeclaration
     static
     block
      {
      blockStatement
       localVariableDeclaration
        variableModifier
         final
        var
        identifier
         c
        =
        expression
         primary
          literal
           integerLiteral
            1
       ;
      blockStatement
       statement
        expression
         expression
          expression
           primary
            identifier
             PF
          .
          identifier
           sp
         =
         expression
          primary
           identifier
            c
        ;
      }
    classBodyDeclaration
     block
      {
      blockStatement
       localVariableDeclaration
        var
        identifier
         var
        =
        expression
         primary
          literal
           "var"
       ;
      blockStatement
       localVariableDeclaration
        var
        identifier
         module
        =
        expression
         primary
          literal
           "module"
       ;
      blockStatement
       localVariableDeclaration
        var
        identifier
         open
        =
        expression
         primary
          literal
           "open"
       ;
      blockStatement
       localVariableDeclaration
        var
        identifier
         requires
        =
        expression
         primary
          literal
           "requires"
       ;
      blockStatement
       localVariableDeclaration
        var
        identifier
         exports
        =
        expression
         primary
          literal
           "exports"
       ;
      blockStatement
       localVariableDeclaration
        var
        identifier
         opens
        =
        expression
         primary
          literal
           "opens"
       ;
      blockStatement
       localVariableDeclaration
        var
        identifier
         to
        =
        expression
         primary
          literal
           "to"
       ;
      blockStatement
       localVariableDeclaration
        var
        identifier
         uses
        =
        expression
         primary
          literal
           "uses"
       ;
      blockStatement
       localVariableDeclaration
        var
        identifier
         provides
        =
        expression
         primary
          literal
           "provides"
       ;
      blockStatement
       localVariableDeclaration
        var
        identifier
         with
        =
        expression
         primary
          literal
           "with"
       ;
      blockStatement
       localVariableDeclaration
        var
        identifier
         transitive
        =
        expression
         primary
          literal
           "transitive"
       ;
      }
    classBodyDeclaration
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        void
       identifier
        foo
       formalParameters
        (
        )
       methodBody
        block
         {
         blockStatement
          localVariableDeclaration
           var
           identifier
            f
           =
           expression
            primary
             literal
              integerLiteral
               1
          ;
         }
    classBodyDeclaration
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        void
       identifier
        foo2
       formalParameters
        (
        )
       throws
       qualifiedNameList
        qualifiedName
         identifier
          Exception
       methodBody
        block
         {
         blockStatement
          statement
           try
           resourceSpecification
            (
            resources
             resource
              var
              identifier
               a
              =
              expression
               new
               creator
                createdName
                 identifier
                  AC
                classCreatorRest
                 arguments
                  (
                  )
            )
           block
            {
            blockStatement
             statement
              for
              (
              forControl
               forInit
                localVariableDeclaration
                 variableModifier
                  final
                 var
                 identifier
                  i
                 =
                 expression
                  primary
                   literal
                    integerLiteral
                     1
               ;
               ;
              )
              statement
               block
                {
                blockStatement
                 statement
                  break
                  ;
                }
            blockStatement
             statement
              for
              (
              forControl
               forInit
                localVariableDeclaration
                 variableModifier
                  final
                 var
                 identifier
                  var
                 =
                 expression
                  primary
                   literal
                    integerLiteral
                     1
               ;
               ;
              )
              statement
               block
                {
                blockStatement
                 statement
                  break
                  ;
                }
            blockStatement
             localVariableDeclaration
              typeType
               classOrInterfaceType
                typeIdentifier
                 List
                typeArguments
                 <
                 typeArgument
                  typeType
                   classOrInterfaceType
                    typeIdentifier
                     Integer
                 >
              variableDeclarators
               variableDeclarator
                variableDeclaratorId
                 identifier
                  lst
                =
                variableInitializer
                 expression
                  new
                  creator
                   createdName
                    identifier
                     ArrayList
                    typeArgumentsOrDiamond
                     <
                     >
                   classCreatorRest
                    arguments
                     (
                     )
             ;
            blockStatement
             statement
              for
              (
              forControl
               enhancedForControl
                variableModifier
                 final
                var
                variableDeclaratorId
                 identifier
                  item
                :
                expression
                 primary
                  identifier
                   lst
              )
              statement
               block
                {
                }
            blockStatement
             statement
              for
              (
              forControl
               enhancedForControl
                variableModifier
                 final
                var
                variableDeclaratorId
                 identifier
                  var
                :
                expression
                 primary
                  identifier
                   lst
              )
              statement
               block
                {
                }
            }
         }
    classBodyDeclaration
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        void
       identifier
        foo3
       formalParameters
        (
        )
       throws
       qualifiedNameList
        qualifiedName
         identifier
          Exception
       methodBody
        block
         {
         blockStatement
          localVariableDeclaration
           var
           identifier
            a
           =
           expression
            new
            creator
             createdName
              identifier
               AC
             classCreatorRest
              arguments
               (
               )
          ;
         blockStatement
          statement
           try
           resourceSpecification
            (
            resources
             resource
              qualifiedName
               identifier
                a
            )
           block
            {
            }
         }
    classBodyDeclaration
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        void
       identifier
        foo31
       formalParameters
        (
        )
       throws
       qualifiedNameList
        qualifiedName
         identifier
          Exception
       methodBody
        block
         {
         blockStatement
          localVariableDeclaration
           var
           identifier
            var
           =
           expression
            new
            creator
             createdName
              identifier
               AC
             classCreatorRest
              arguments
               (
               )
          ;
         blockStatement
          localVariableDeclaration
           var
           identifier
            a
           =
           expression
            new
            creator
             createdName
              identifier
               AC
             classCreatorRest
              arguments
               (
               )
          ;
         blockStatement
          statement
           try
           resourceSpecification
            (
            resources
             resource
              qualifiedName
               identifier
                a
             ;
             resource
              qualifiedName
               identifier
                var
            )
           block
            {
            }
         }
    classBodyDeclaration
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        void
       identifier
        foo4
       formalParameters
        (
        )
       methodBody
        block
         {
         blockStatement
          localVariableDeclaration
           typeType
            classOrInterfaceType
             typeIdentifier
              I1
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               i1a
             =
             variableInitializer
              expression
               lambdaExpression
                lambdaParameters
                 (
                 formalParameterList
                  formalParameter
                   typeType
                    primitiveType
                     int
                   variableDeclaratorId
                    identifier
                     i
                 )
                ->
                lambdaBody
                 expression
                  primary
                   literal
                    integerLiteral
                     1
          ;
         blockStatement
          localVariableDeclaration
           typeType
            classOrInterfaceType
             typeIdentifier
              I1
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               i1b
             =
             variableInitializer
              expression
               lambdaExpression
                lambdaParameters
                 (
                 lambdaLVTIList
                  lambdaLVTIParameter
                   var
                   identifier
                    var
                 )
                ->
                lambdaBody
                 expression
                  primary
                   literal
                    integerLiteral
                     1
          ;
         blockStatement
          localVariableDeclaration
           typeType
            classOrInterfaceType
             typeIdentifier
              I1
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               i1c
             =
             variableInitializer
              expression
               lambdaExpression
                lambdaParameters
                 identifier
                  var
                ->
                lambdaBody
                 expression
                  primary
                   literal
                    integerLiteral
                     1
          ;
         blockStatement
          localVariableDeclaration
           typeType
            classOrInterfaceType
             typeIdentifier
              I2
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               i2a
             =
             variableInitializer
              expression
               lambdaExpression
                lambdaParameters
                 (
                 formalParameterList
                  formalParameter
                   variableModifier
                    final
                   typeType
                    primitiveType
                     int
                   variableDeclaratorId
                    identifier
                     var
                  ,
                  formalParameter
                   typeType
                    primitiveType
                     int
                   variableDeclaratorId
                    identifier
                     var1
                 )
                ->
                lambdaBody
                 expression
                  primary
                   literal
                    integerLiteral
                     1
          ;
         blockStatement
          localVariableDeclaration
           typeType
            classOrInterfaceType
             typeIdentifier
              I2
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               i2b
             =
             variableInitializer
              expression
               lambdaExpression
                lambdaParameters
                 (
                 lambdaLVTIList
                  lambdaLVTIParameter
                   variableModifier
                    final
                   var
                   identifier
                    var
                  ,
                  lambdaLVTIParameter
                   var
                   identifier
                    j
                 )
                ->
                lambdaBody
                 expression
                  primary
                   literal
                    integerLiteral
                     1
          ;
         }
    classBodyDeclaration
     memberDeclaration
      interfaceDeclaration
       interface
       identifier
        I1
       interfaceBody
        {
        interfaceBodyDeclaration
         interfaceMemberDeclaration
          interfaceMethodDeclaration
           interfaceCommonBodyDeclaration
            typeTypeOrVoid
             typeType
              primitiveType
               int
            identifier
             m
            formalParameters
             (
             formalParameterList
              formalParameter
               typeType
                primitiveType
                 int
               variableDeclaratorId
                identifier
                 i
             )
            methodBody
             ;
        }
    classBodyDeclaration
     memberDeclaration
      interfaceDeclaration
       interface
       identifier
        I2
       interfaceBody
        {
        interfaceBodyDeclaration
         interfaceMemberDeclaration
          interfaceMethodDeclaration
           interfaceCommonBodyDeclaration
            typeTypeOrVoid
             typeType
              primitiveType
               int
            identifier
             m2
            formalParameters
             (
             formalParameterList
              formalParameter
               typeType
                primitiveType
                 int
               variableDeclaratorId
                identifier
                 i
              ,
              formalParameter
               typeType
                primitiveType
                 int
               variableDeclaratorId
                identifier
                 j
             )
            methodBody
             ;
        }
    classBodyDeclaration
     memberDeclaration
      interfaceDeclaration
       interface
       identifier
        I3
       interfaceBody
        {
        interfaceBodyDeclaration
         interfaceMemberDeclaration
          interfaceMethodDeclaration
           interfaceCommonBodyDeclaration
            typeTypeOrVoid
             void
            identifier
             m0
            formalParameters
             (
             )
            methodBody
             ;
        interfaceBodyDeclaration
         interfaceMemberDeclaration
          interfaceMethodDeclaration
           interfaceMethodModifier
            default
           interfaceCommonBodyDeclaration
            typeTypeOrVoid
             void
            identifier
             m1
            formalParameters
             (
             )
            methodBody
             block
              {
              }
        interfaceBodyDeclaration
         modifier
          classOrInterfaceModifier
           private
         interfaceMemberDeclaration
          interfaceMethodDeclaration
           interfaceCommonBodyDeclaration
            typeTypeOrVoid
             void
            identifier
             m2
            formalParameters
             (
             )
            methodBody
             block
              {
              }
        interfaceBodyDeclaration
         modifier
          classOrInterfaceModifier
           private
         interfaceMemberDeclaration
          genericInterfaceMethodDeclaration
           typeParameters
            <
            typeParameter
             identifier
              T
            >
           interfaceCommonBodyDeclaration
            typeTypeOrVoid
             void
            identifier
             gm2
            formalParameters
             (
             formalParameterList
              formalParameter
               typeType
                classOrInterfaceType
                 typeIdentifier
                  T
               variableDeclaratorId
                identifier
                 t
             )
            methodBody
             block
              {
              }
        interfaceBodyDeclaration
         modifier
          classOrInterfaceModifier
           private
         modifier
          classOrInterfaceModifier
           static
         interfaceMemberDeclaration
          interfaceMethodDeclaration
           interfaceCommonBodyDeclaration
            typeTypeOrVoid
             void
            identifier
             m3
            formalParameters
             (
             )
            methodBody
             block
              {
              }
        interfaceBodyDeclaration
         modifier
          classOrInterfaceModifier
           static
         interfaceMemberDeclaration
          interfaceMethodDeclaration
           interfaceCommonBodyDeclaration
            typeTypeOrVoid
             void
            identifier
             m4
            formalParameters
             (
             )
            methodBody
             block
              {
              }
        }
    classBodyDeclaration
     memberDeclaration
      interfaceDeclaration
       interface
       identifier
        I4
       interfaceBody
        {
        interfaceBodyDeclaration
         interfaceMemberDeclaration
          interfaceMethodDeclaration
           interfaceCommonBodyDeclaration
            typeTypeOrVoid
             typeType
              primitiveType
               int
            identifier
             var
            formalParameters
             (
             )
            methodBody
             ;
        }
    classBodyDeclaration
     memberDeclaration
      interfaceDeclaration
       interface
       identifier
        I6
       interfaceBody
        {
        interfaceBodyDeclaration
         interfaceMemberDeclaration
          genericInterfaceMethodDeclaration
           interfaceMethodModifier
            default
           typeParameters
            <
            typeParameter
             identifier
              TT
            ,
            typeParameter
             identifier
              UU
            >
           interfaceCommonBodyDeclaration
            typeTypeOrVoid
             void
            identifier
             var
            formalParameters
             (
             )
            methodBody
             block
              {
              }
        }
    classBodyDeclaration
     memberDeclaration
      classDeclaration
       class
       identifier
        CI4
       implements
       typeList
        typeType
         classOrInterfaceType
          typeIdentifier
           I4
       classBody
        {
        classBodyDeclaration
         modifier
          classOrInterfaceModifier
           annotation
            @
            qualifiedName
             identifier
              Override
         modifier
          classOrInterfaceModifier
           public
         memberDeclaration
          methodDeclaration
           typeTypeOrVoid
            typeType
             primitiveType
              int
           identifier
            var
           formalParameters
            (
            )
           methodBody
            block
             {
             blockStatement
              statement
               return
               expression
                primary
                 literal
                  integerLiteral
                   0
               ;
             }
        }
    classBodyDeclaration
     memberDeclaration
      classDeclaration
       class
       identifier
        CI6
       implements
       typeList
        typeType
         classOrInterfaceType
          typeIdentifier
           I6
       classBody
        {
        classBodyDeclaration
         modifier
          classOrInterfaceModifier
           public
         memberDeclaration
          methodDeclaration
           typeTypeOrVoid
            void
           identifier
            vartest
           formalParameters
            (
            )
           methodBody
            block
             {
             blockStatement
              statement
               expression
                expression
                 primary
                  identifier
                   I6
                .
                super
                superSuffix
                 .
                 identifier
                  var
                 arguments
                  (
                  )
               ;
             blockStatement
              statement
               expression
                expression
                 primary
                  identifier
                   I6
                .
                super
                superSuffix
                 .
                 typeArguments
                  <
                  typeArgument
                   typeType
                    classOrInterfaceType
                     typeIdentifier
                      Byte
                  ,
                  typeArgument
                   typeType
                    classOrInterfaceType
                     typeIdentifier
                      Long
                  >
                 identifier
                  var
                 arguments
                  (
                  )
               ;
             }
        }
    classBodyDeclaration
     memberDeclaration
      classDeclaration
       class
       identifier
        D
       extends
       typeType
        classOrInterfaceType
         typeIdentifier
          CI4
       classBody
        {
        classBodyDeclaration
         modifier
          classOrInterfaceModifier
           public
         memberDeclaration
          methodDeclaration
           typeTypeOrVoid
            typeType
             primitiveType
              int
           identifier
            var
           formalParameters
            (
            )
           methodBody
            block
             {
             blockStatement
              statement
               return
               expression
                expression
                 primary
                  super
                .
                methodCall
                 identifier
                  var
                 arguments
                  (
                  )
               ;
             }
        classBodyDeclaration
         memberDeclaration
          methodDeclaration
           typeTypeOrVoid
            void
           identifier
            f
           formalParameters
            (
            formalParameterList
             formalParameter
              typeType
               primitiveType
                int
              variableDeclaratorId
               identifier
                var
            )
           methodBody
            block
             {
             }
        }
    classBodyDeclaration
     modifier
      classOrInterfaceModifier
       static
     memberDeclaration
      classDeclaration
       class
       identifier
        Annos
       classBody
        {
        classBodyDeclaration
         memberDeclaration
          annotationTypeDeclaration
           @
           interface
           identifier
            InnerAnnotation
           annotationTypeBody
            {
            annotationTypeElementDeclaration
             annotationTypeElementRest
              typeType
               primitiveType
                int
              annotationMethodOrConstantRest
               annotationMethodRest
                identifier
                 var
                (
                )
                defaultValue
                 default
                 elementValue
                  expression
                   primary
                    literal
                     integerLiteral
                      0
              ;
            }
        classBodyDeclaration
         memberDeclaration
          annotationTypeDeclaration
           @
           interface
           identifier
            OuterAnnotation
           annotationTypeBody
            {
            annotationTypeElementDeclaration
             annotationTypeElementRest
              typeType
               classOrInterfaceType
                typeIdentifier
                 InnerAnnotation
              annotationMethodOrConstantRest
               annotationMethodRest
                identifier
                 var
                (
                )
                defaultValue
                 default
                 elementValue
                  annotation
                   @
                   qualifiedName
                    identifier
                     InnerAnnotation
                   (
                   elementValuePairs
                    elementValuePair
                     identifier
                      var
                     =
                     elementValue
                      expression
                       primary
                        literal
                         integerLiteral
                          1
                   )
              ;
            }
        }
    classBodyDeclaration
     modifier
      classOrInterfaceModifier
       static
     memberDeclaration
      classDeclaration
       class
       identifier
        TH
       classBody
        {
        classBodyDeclaration
         memberDeclaration
          methodDeclaration
           typeTypeOrVoid
            void
           identifier
            var
           formalParameters
            (
            )
           methodBody
            block
             {
             }
        classBodyDeclaration
         memberDeclaration
          fieldDeclaration
           typeType
            primitiveType
             int
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               var
             =
             variableInitializer
              expression
               primary
                literal
                 integerLiteral
                  1
           ;
        classBodyDeclaration
         memberDeclaration
          constructorDeclaration
           identifier
            TH
           formalParameters
            (
            )
           block
            {
            blockStatement
             statement
              expression
               expression
                primary
                 this
               .
               methodCall
                identifier
                 var
                arguments
                 (
                 )
              ;
            blockStatement
             statement
              expression
               expression
                expression
                 primary
                  this
                .
                identifier
                 var
               =
               expression
                primary
                 literal
                  integerLiteral
                   1
              ;
            blockStatement
             statement
              expression
               expression
                expression
                 primary
                  identifier
                   System
                .
                identifier
                 out
               .
               methodCall
                identifier
                 println
                arguments
                 (
                 expressionList
                  expression
                   primary
                    identifier
                     var
                 )
              ;
            }
        }
    }
