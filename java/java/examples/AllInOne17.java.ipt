compilationUnit
 packageDeclaration
  package
  qualifiedName
   identifier
    var
   .
   identifier
    var
   .
   identifier
    sealed
  ;
 importDeclaration
  import
  qualifiedName
   identifier
    java
   .
   identifier
    lang
   .
   identifier
    annotation
   .
   identifier
    ElementType
  ;
 importDeclaration
  import
  qualifiedName
   identifier
    java
   .
   identifier
    lang
   .
   identifier
    annotation
   .
   identifier
    Target
  ;
 importDeclaration
  import
  qualifiedName
   identifier
    java
   .
   identifier
    util
   .
   identifier
    function
   .
   identifier
    BiFunction
  ;
 importDeclaration
  import
  qualifiedName
   identifier
    java
   .
   identifier
    util
   .
   identifier
    function
   .
   identifier
    Consumer
  ;
 importDeclaration
  import
  qualifiedName
   identifier
    java
   .
   identifier
    util
   .
   identifier
    function
   .
   identifier
    Function
  ;
 typeDeclaration
  annotationTypeDeclaration
   @
   interface
   identifier
    Dummy
   annotationTypeBody
    {
    }
 typeDeclaration
  annotationTypeDeclaration
   @
   interface
   identifier
    Dummy2
   annotationTypeBody
    {
    }
 typeDeclaration
  classOrInterfaceModifier
   annotation
    @
    qualifiedName
     identifier
      Target
    (
    elementValue
     elementValueArrayInitializer
      {
      elementValue
       expression
        expression
         primary
          identifier
           ElementType
        .
        identifier
         TYPE
      ,
      elementValue
       expression
        expression
         primary
          identifier
           ElementType
        .
        identifier
         TYPE_USE
      }
    )
  annotationTypeDeclaration
   @
   interface
   identifier
    Dummy3
   annotationTypeBody
    {
    }
 typeDeclaration
  classDeclaration
   class
   identifier
    SwitchExpressions
   classBody
    {
    classBodyDeclaration
     modifier
      classOrInterfaceModifier
       final
     modifier
      classOrInterfaceModifier
       static
     modifier
      classOrInterfaceModifier
       private
     memberDeclaration
      fieldDeclaration
       typeType
        primitiveType
         int
       variableDeclarators
        variableDeclarator
         variableDeclaratorId
          identifier
           C
         =
         variableInitializer
          expression
           primary
            literal
             integerLiteral
              10
       ;
    classBodyDeclaration
     modifier
      classOrInterfaceModifier
       static
     memberDeclaration
      classDeclaration
       class
       identifier
        SC1
       classBody
        {
        classBodyDeclaration
         modifier
          classOrInterfaceModifier
           final
         modifier
          classOrInterfaceModifier
           static
         memberDeclaration
          fieldDeclaration
           typeType
            primitiveType
             int
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               C
             =
             variableInitializer
              expression
               primary
                literal
                 integerLiteral
                  100
           ;
        }
    classBodyDeclaration
     memberDeclaration
      enumDeclaration
       enum
       identifier
        E1
       {
       enumConstants
        enumConstant
         identifier
          ONE
       enumBodyDeclarations
        ;
       }
    classBodyDeclaration
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        typeType
         primitiveType
          int
       identifier
        fn1
       formalParameters
        (
        formalParameterList
         formalParameter
          typeType
           primitiveType
            int
          variableDeclaratorId
           identifier
            n
        )
       methodBody
        block
         {
         blockStatement
          localVariableDeclaration
           variableModifier
            final
           typeType
            primitiveType
             int
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               k
             =
             variableInitializer
              expression
               primary
                literal
                 integerLiteral
                  4
          ;
         blockStatement
          localVariableDeclaration
           var
           identifier
            r
           =
           expression
            switchExpression
             switch
             parExpression
              (
              expression
               primary
                identifier
                 n
              )
             {
             switchLabeledRule
              case
              expressionList
               expression
                primary
                 literal
                  integerLiteral
                   1
               ,
               expression
                primary
                 literal
                  integerLiteral
                   2
               ,
               expression
                expression
                 primary
                  literal
                   integerLiteral
                    3
                +
                expression
                 primary
                  literal
                   integerLiteral
                    3
               ,
               expression
                primary
                 identifier
                  k
               ,
               expression
                primary
                 identifier
                  C
               ,
               expression
                expression
                 primary
                  identifier
                   SC1
                .
                identifier
                 C
              ->
              switchRuleOutcome
               blockStatement
                statement
                 expression
                  expression
                   primary
                    literal
                     integerLiteral
                      3
                  +
                  expression
                   expression
                    primary
                     identifier
                      SC1
                   .
                   identifier
                    C
                 ;
             switchLabeledRule
              case
              expressionList
               expression
                primary
                 literal
                  integerLiteral
                   20
              ->
              switchRuleOutcome
               blockStatement
                statement
                 expression
                  expression
                   expression
                    expression
                     primary
                      literal
                       integerLiteral
                        3
                    +
                    expression
                     primary
                      literal
                       integerLiteral
                        4
                   +
                   expression
                    primary
                     identifier
                      C
                  -
                  expression
                   primary
                    identifier
                     k
                 ;
             switchLabeledRule
              case
              expressionList
               expression
                primary
                 literal
                  integerLiteral
                   21
              ->
              switchRuleOutcome
               block
                {
                blockStatement
                 localVariableDeclaration
                  typeType
                   primitiveType
                    int
                  variableDeclarators
                   variableDeclarator
                    variableDeclaratorId
                     identifier
                      ff
                    =
                    variableInitializer
                     expression
                      primary
                       literal
                        integerLiteral
                         222
                 ;
                blockStatement
                 statement
                  yield
                  expression
                   primary
                    identifier
                     ff
                  ;
                }
             switchLabeledRule
              case
              expressionList
               expression
                primary
                 literal
                  integerLiteral
                   22
              ->
              switchRuleOutcome
               block
                {
                blockStatement
                 statement
                  yield
                  expression
                   expression
                    primary
                     literal
                      integerLiteral
                       33
                   +
                   expression
                    primary
                     literal
                      integerLiteral
                       3
                  ;
                }
             switchLabeledRule
              case
              expressionList
               expression
                primary
                 literal
                  integerLiteral
                   99
              ->
              switchRuleOutcome
               block
                {
                blockStatement
                 statement
                  throw
                  expression
                   new
                   creator
                    createdName
                     identifier
                      RuntimeException
                    classCreatorRest
                     arguments
                      (
                      expressionList
                       expression
                        primary
                         literal
                          ""
                      )
                  ;
                }
             switchLabeledRule
              default
              ->
              switchRuleOutcome
               blockStatement
                statement
                 expression
                  primary
                   literal
                    integerLiteral
                     0
                 ;
             }
          ;
         blockStatement
          statement
           return
           expression
            primary
             identifier
              r
           ;
         }
    classBodyDeclaration
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        typeType
         classOrInterfaceType
          typeIdentifier
           String
       identifier
        fn2
       formalParameters
        (
        formalParameterList
         formalParameter
          typeType
           classOrInterfaceType
            typeIdentifier
             String
          variableDeclaratorId
           identifier
            s
        )
       methodBody
        block
         {
         blockStatement
          statement
           return
           expression
            switchExpression
             switch
             parExpression
              (
              expression
               primary
                identifier
                 s
              )
             {
             switchLabeledRule
              case
              expressionList
               expression
                primary
                 literal
                  "a"
              ->
              switchRuleOutcome
               blockStatement
                statement
                 expression
                  primary
                   literal
                    ""
                 ;
             switchLabeledRule
              case
              expressionList
               expression
                primary
                 literal
                  "b"
               ,
               expression
                primary
                 literal
                  "c"
              ->
              switchRuleOutcome
               blockStatement
                statement
                 expression
                  primary
                   literal
                    "a"
                 ;
             switchLabeledRule
              default
              ->
              switchRuleOutcome
               blockStatement
                statement
                 expression
                  primary
                   literal
                    "o"
                 ;
             }
           ;
         }
    classBodyDeclaration
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        typeType
         primitiveType
          int
       identifier
        fn3
       formalParameters
        (
        formalParameterList
         formalParameter
          variableModifier
           final
          typeType
           primitiveType
            int
          variableDeclaratorId
           identifier
            var
        )
       methodBody
        block
         {
         blockStatement
          statement
           return
           expression
            switchExpression
             switch
             parExpression
              (
              expression
               primary
                identifier
                 var
              )
             {
             switchLabeledRule
              case
              expressionList
               expression
                primary
                 literal
                  integerLiteral
                   1
              ->
              switchRuleOutcome
               blockStatement
                statement
                 expression
                  primary
                   literal
                    integerLiteral
                     2
                 ;
             switchLabeledRule
              default
              ->
              switchRuleOutcome
               blockStatement
                statement
                 expression
                  primary
                   identifier
                    var
                 ;
             }
           ;
         }
    classBodyDeclaration
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        void
       identifier
        fn4
       formalParameters
        (
        )
       methodBody
        block
         {
         blockStatement
          statement
           expression
            methodCall
             identifier
              fn1
             arguments
              (
              expressionList
               expression
                switchExpression
                 switch
                 parExpression
                  (
                  expression
                   primary
                    literal
                     integerLiteral
                      1
                  )
                 {
                 switchLabeledRule
                  case
                  expressionList
                   expression
                    primary
                     literal
                      integerLiteral
                       1
                  ->
                  switchRuleOutcome
                   blockStatement
                    statement
                     expression
                      primary
                       literal
                        integerLiteral
                         0
                     ;
                 switchLabeledRule
                  case
                  expressionList
                   expression
                    primary
                     literal
                      integerLiteral
                       2
                  ->
                  switchRuleOutcome
                   blockStatement
                    statement
                     expression
                      primary
                       literal
                        integerLiteral
                         2
                     ;
                 switchLabeledRule
                  default
                  ->
                  switchRuleOutcome
                   blockStatement
                    statement
                     expression
                      primary
                       literal
                        integerLiteral
                         1
                     ;
                 }
              )
           ;
         }
    classBodyDeclaration
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        typeType
         primitiveType
          int
       identifier
        fn5
       formalParameters
        (
        )
       methodBody
        block
         {
         blockStatement
          localVariableDeclaration
           typeType
            classOrInterfaceType
             typeIdentifier
              E1
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               e
             =
             variableInitializer
              expression
               expression
                primary
                 identifier
                  E1
               .
               identifier
                ONE
          ;
         blockStatement
          statement
           return
           expression
            switchExpression
             switch
             parExpression
              (
              expression
               primary
                identifier
                 e
              )
             {
             switchLabeledRule
              case
              expressionList
               expression
                primary
                 identifier
                  ONE
              ->
              switchRuleOutcome
               blockStatement
                statement
                 expression
                  primary
                   literal
                    integerLiteral
                     0
                 ;
             }
           ;
         }
    classBodyDeclaration
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        void
       identifier
        fn6
       formalParameters
        (
        )
       methodBody
        block
         {
         blockStatement
          statement
           switchExpression
            switch
            parExpression
             (
             expression
              primary
               literal
                integerLiteral
                 1
             )
            {
            switchLabeledRule
             case
             expressionList
              expression
               primary
                literal
                 integerLiteral
                  1
             ->
             switchRuleOutcome
              block
               {
               }
            }
         }
    classBodyDeclaration
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        void
       identifier
        fn7
       formalParameters
        (
        )
       methodBody
        block
         {
         blockStatement
          statement
           switchExpression
            switch
            parExpression
             (
             expression
              primary
               literal
                integerLiteral
                 1
             )
            {
            switchLabeledRule
             case
             expressionList
              expression
               primary
                literal
                 integerLiteral
                  1
             ->
             switchRuleOutcome
              block
               {
               }
            switchLabeledRule
             case
             expressionList
              expression
               primary
                literal
                 integerLiteral
                  2
             ->
             switchRuleOutcome
              block
               {
               }
            }
         }
    classBodyDeclaration
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        void
       identifier
        fn8
       formalParameters
        (
        )
       methodBody
        block
         {
         blockStatement
          localVariableDeclaration
           var
           identifier
            i
           =
           expression
            primary
             literal
              integerLiteral
               1
          ;
         blockStatement
          statement
           switch
           parExpression
            (
            expression
             primary
              literal
               integerLiteral
                1
            )
           {
           }
         blockStatement
          localVariableDeclaration
           var
           identifier
            f
           =
           expression
            primary
             literal
              integerLiteral
               2
          ;
         blockStatement
          statement
           switchExpression
            switch
            parExpression
             (
             expression
              primary
               literal
                integerLiteral
                 2
             )
            {
            switchLabeledRule
             case
             expressionList
              expression
               primary
                literal
                 integerLiteral
                  2
             ->
             switchRuleOutcome
              block
               {
               blockStatement
                statement
                 expression
                  expression
                   primary
                    identifier
                     f
                  =
                  expression
                   primary
                    literal
                     integerLiteral
                      3
                 ;
               }
            }
         }
    classBodyDeclaration
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        void
       identifier
        fn9
       formalParameters
        (
        formalParameterList
         formalParameter
          typeType
           classOrInterfaceType
            typeIdentifier
             String
          variableDeclaratorId
           identifier
            s
        )
       methodBody
        block
         {
         blockStatement
          statement
           switchExpression
            switch
            parExpression
             (
             expression
              primary
               identifier
                s
             )
            {
            switchLabeledRule
             case
             expressionList
              expression
               primary
                literal
                 ""
             ->
             switchRuleOutcome
              block
               {
               }
            switchLabeledRule
             default
             ->
             switchRuleOutcome
              block
               {
               }
            }
         }
    classBodyDeclaration
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        void
       identifier
        fn10
       formalParameters
        (
        )
       methodBody
        block
         {
         blockStatement
          localVariableDeclaration
           var
           identifier
            i
           =
           expression
            switchExpression
             switch
             parExpression
              (
              expression
               primary
                literal
                 integerLiteral
                  1
              )
             {
             switchLabeledRule
              case
              expressionList
               expression
                primary
                 literal
                  integerLiteral
                   1
              ->
              switchRuleOutcome
               blockStatement
                statement
                 expression
                  switchExpression
                   switch
                   parExpression
                    (
                    expression
                     primary
                      literal
                       integerLiteral
                        2
                    )
                   {
                   switchLabeledRule
                    case
                    expressionList
                     expression
                      primary
                       literal
                        integerLiteral
                         2
                    ->
                    switchRuleOutcome
                     blockStatement
                      statement
                       expression
                        primary
                         literal
                          integerLiteral
                           0
                       ;
                   switchLabeledRule
                    default
                    ->
                    switchRuleOutcome
                     blockStatement
                      statement
                       expression
                        primary
                         literal
                          integerLiteral
                           2
                       ;
                   }
                 ;
             switchLabeledRule
              default
              ->
              switchRuleOutcome
               blockStatement
                statement
                 expression
                  primary
                   literal
                    integerLiteral
                     2
                 ;
             }
          ;
         }
    classBodyDeclaration
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        void
       identifier
        fn11
       formalParameters
        (
        )
       methodBody
        block
         {
         blockStatement
          statement
           switchExpression
            switch
            parExpression
             (
             expression
              primary
               literal
                integerLiteral
                 1
             )
            {
            switchLabeledRule
             case
             expressionList
              expression
               primary
                literal
                 integerLiteral
                  1
             ->
             switchRuleOutcome
              blockStatement
               statement
                throw
                expression
                 new
                 creator
                  createdName
                   identifier
                    RuntimeException
                  classCreatorRest
                   arguments
                    (
                    expressionList
                     expression
                      primary
                       literal
                        ""
                    )
                ;
            }
         }
    classBodyDeclaration
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        typeType
         primitiveType
          int
       identifier
        fn12
       formalParameters
        (
        )
       methodBody
        block
         {
         blockStatement
          localVariableDeclaration
           var
           identifier
            v
           =
           expression
            primary
             literal
              integerLiteral
               1
          ;
         blockStatement
          localVariableDeclaration
           typeType
            primitiveType
             int
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               n
             =
             variableInitializer
              expression
               switchExpression
                switch
                parExpression
                 (
                 expression
                  primary
                   literal
                    integerLiteral
                     1
                 )
                {
                switchLabeledRule
                 case
                 expressionList
                  expression
                   primary
                    literal
                     integerLiteral
                      1
                 :
                 switchRuleOutcome
                  blockStatement
                   localVariableDeclaration
                    var
                    identifier
                     g
                    =
                    expression
                     primary
                      literal
                       integerLiteral
                        1
                   ;
                  blockStatement
                   statement
                    expression
                     expression
                      expression
                       primary
                        identifier
                         System
                      .
                      identifier
                       out
                     .
                     methodCall
                      identifier
                       println
                      arguments
                       (
                       )
                    ;
                  blockStatement
                   statement
                    yield
                    expression
                     primary
                      identifier
                       v
                    ;
                switchLabeledRule
                 default
                 :
                 switchRuleOutcome
                  blockStatement
                   statement
                    yield
                    expression
                     primary
                      literal
                       integerLiteral
                        3
                    ;
                }
          ;
         blockStatement
          statement
           return
           expression
            primary
             identifier
              n
           ;
         }
    classBodyDeclaration
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        void
       identifier
        fn13
       formalParameters
        (
        )
       methodBody
        block
         {
         blockStatement
          localVariableDeclaration
           typeType
            primitiveType
             int
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               n
          ;
         blockStatement
          statement
           switchExpression
            switch
            parExpression
             (
             expression
              primary
               literal
                integerLiteral
                 1
             )
            {
            switchLabeledRule
             case
             expressionList
              expression
               primary
                literal
                 integerLiteral
                  1
             ->
             switchRuleOutcome
              blockStatement
               statement
                expression
                 expression
                  primary
                   identifier
                    n
                 =
                 expression
                  primary
                   literal
                    integerLiteral
                     1
                ;
            }
         }
    classBodyDeclaration
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        void
       identifier
        fn14
       formalParameters
        (
        )
       methodBody
        block
         {
         blockStatement
          statement
           switchExpression
            switch
            parExpression
             (
             expression
              primary
               literal
                integerLiteral
                 1
             )
            {
            switchLabeledRule
             default
             ->
             switchRuleOutcome
              block
               {
               }
            }
         blockStatement
          localVariableDeclaration
           var
           identifier
            n
           =
           expression
            primary
             literal
              integerLiteral
               1
          ;
         blockStatement
          localVariableDeclaration
           var
           identifier
            m
           =
           expression
            switchExpression
             switch
             parExpression
              (
              expression
               primary
                identifier
                 n
              )
             {
             switchLabeledRule
              case
              expressionList
               expression
                primary
                 literal
                  integerLiteral
                   1
              ->
              switchRuleOutcome
               blockStatement
                statement
                 expression
                  primary
                   literal
                    integerLiteral
                     2
                 ;
             switchLabeledRule
              case
              expressionList
               expression
                primary
                 literal
                  integerLiteral
                   2
              ->
              switchRuleOutcome
               blockStatement
                statement
                 expression
                  primary
                   literal
                    integerLiteral
                     2
                 ;
             switchLabeledRule
              default
              ->
              switchRuleOutcome
               blockStatement
                statement
                 expression
                  primary
                   literal
                    integerLiteral
                     1
                 ;
             }
          ;
         blockStatement
          statement
           expression
            expression
             primary
              identifier
               m
            =
            expression
             switchExpression
              switch
              parExpression
               (
               expression
                primary
                 identifier
                  n
               )
              {
              switchLabeledRule
               case
               expressionList
                expression
                 primary
                  literal
                   integerLiteral
                    2
               :
               switchRuleOutcome
                blockStatement
                 statement
                  yield
                  expression
                   primary
                    literal
                     integerLiteral
                      2
                  ;
              switchLabeledRule
               default
               :
               switchRuleOutcome
                blockStatement
                 statement
                  yield
                  expression
                   primary
                    literal
                     integerLiteral
                      3
                  ;
              }
           ;
         }
    }
 typeDeclaration
  classDeclaration
   class
   identifier
    PatternMatching4instanceof
   classBody
    {
    classBodyDeclaration
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        void
       identifier
        fn1
       formalParameters
        (
        formalParameterList
         formalParameter
          typeType
           classOrInterfaceType
            typeIdentifier
             Number
          variableDeclaratorId
           identifier
            n
        )
       methodBody
        block
         {
         blockStatement
          statement
           if
           parExpression
            (
            expression
             expression
              primary
               identifier
                n
             instanceof
             pattern
              typeType
               classOrInterfaceType
                typeIdentifier
                 Long
              identifier
               var
            )
           statement
            block
             {
             blockStatement
              localVariableDeclaration
               var
               identifier
                v
               =
               expression
                primary
                 identifier
                  var
              ;
             }
           else
           statement
            if
            parExpression
             (
             expression
              expression
               primary
                identifier
                 n
              instanceof
              pattern
               typeType
                classOrInterfaceType
                 typeIdentifier
                  Integer
               identifier
                open
             )
            statement
             block
              {
              blockStatement
               localVariableDeclaration
                var
                identifier
                 v
                =
                expression
                 primary
                  identifier
                   open
               ;
              }
            else
            statement
             if
             parExpression
              (
              expression
               expression
                primary
                 identifier
                  n
               instanceof
               typeType
                classOrInterfaceType
                 typeIdentifier
                  Byte
              )
             statement
              block
               {
               }
             else
             statement
              block
               {
               blockStatement
                statement
                 throw
                 expression
                  new
                  creator
                   createdName
                    identifier
                     RuntimeException
                   classCreatorRest
                    arguments
                     (
                     expressionList
                      expression
                       primary
                        literal
                         ""
                     )
                 ;
               }
         blockStatement
          statement
           if
           parExpression
            (
            expression
             !
             expression
              primary
               (
               expression
                expression
                 primary
                  identifier
                   n
                instanceof
                pattern
                 typeType
                  classOrInterfaceType
                   typeIdentifier
                    Long
                 identifier
                  l
               )
            )
           statement
            ;
         blockStatement
          statement
           if
           parExpression
            (
            expression
             expression
              expression
               expression
                primary
                 identifier
                  n
               instanceof
               pattern
                variableModifier
                 final
                variableModifier
                 annotation
                  @
                  qualifiedName
                   identifier
                    Dummy
                variableModifier
                 annotation
                  @
                  qualifiedName
                   identifier
                    Dummy2
                typeType
                 classOrInterfaceType
                  typeIdentifier
                   Long
                identifier
                 l
              &&
              expression
               expression
                expression
                 primary
                  identifier
                   l
                .
                methodCall
                 identifier
                  byteValue
                 arguments
                  (
                  )
               ==
               expression
                primary
                 literal
                  integerLiteral
                   1
             ||
             expression
              expression
               expression
                primary
                 identifier
                  n
               instanceof
               pattern
                variableModifier
                 annotation
                  @
                  qualifiedName
                   identifier
                    Dummy
                variableModifier
                 annotation
                  @
                  qualifiedName
                   identifier
                    Dummy2
                variableModifier
                 final
                typeType
                 classOrInterfaceType
                  typeIdentifier
                   Byte
                identifier
                 b
              &&
              expression
               expression
                expression
                 primary
                  identifier
                   b
                .
                methodCall
                 identifier
                  intValue
                 arguments
                  (
                  )
               ==
               expression
                primary
                 literal
                  integerLiteral
                   1
            )
           statement
            ;
         blockStatement
          statement
           if
           parExpression
            (
            expression
             expression
              primary
               identifier
                n
             instanceof
             typeType
              classOrInterfaceType
               typeIdentifier
                Long
            )
           statement
            ;
         blockStatement
          statement
           if
           parExpression
            (
            expression
             expression
              primary
               identifier
                n
             instanceof
             pattern
              typeType
               classOrInterfaceType
                typeIdentifier
                 Long
              identifier
               var
            )
           statement
            ;
         blockStatement
          statement
           if
           parExpression
            (
            expression
             expression
              primary
               identifier
                n
             instanceof
             pattern
              typeType
               classOrInterfaceType
                typeIdentifier
                 Long
              identifier
               l
            )
           statement
            ;
         blockStatement
          statement
           if
           parExpression
            (
            expression
             expression
              primary
               identifier
                n
             instanceof
             pattern
              variableModifier
               final
              typeType
               classOrInterfaceType
                typeIdentifier
                 Long
              identifier
               l
            )
           statement
            ;
         blockStatement
          statement
           if
           parExpression
            (
            expression
             expression
              primary
               identifier
                n
             instanceof
             pattern
              variableModifier
               annotation
                @
                qualifiedName
                 identifier
                  Dummy
              typeType
               classOrInterfaceType
                typeIdentifier
                 Long
              identifier
               l
            )
           statement
            ;
         blockStatement
          statement
           if
           parExpression
            (
            expression
             expression
              primary
               identifier
                n
             instanceof
             pattern
              variableModifier
               annotation
                @
                qualifiedName
                 identifier
                  Dummy
              variableModifier
               annotation
                @
                qualifiedName
                 identifier
                  Dummy2
              typeType
               classOrInterfaceType
                typeIdentifier
                 Long
              identifier
               l
            )
           statement
            ;
         blockStatement
          statement
           if
           parExpression
            (
            expression
             expression
              primary
               identifier
                n
             instanceof
             pattern
              variableModifier
               final
              variableModifier
               annotation
                @
                qualifiedName
                 identifier
                  Dummy
              typeType
               classOrInterfaceType
                typeIdentifier
                 Long
              identifier
               l
            )
           statement
            ;
         blockStatement
          statement
           if
           parExpression
            (
            expression
             expression
              primary
               identifier
                n
             instanceof
             pattern
              variableModifier
               final
              variableModifier
               annotation
                @
                qualifiedName
                 identifier
                  Dummy
              variableModifier
               annotation
                @
                qualifiedName
                 identifier
                  Dummy2
              typeType
               classOrInterfaceType
                typeIdentifier
                 Long
              identifier
               l
            )
           statement
            ;
         blockStatement
          statement
           if
           parExpression
            (
            expression
             expression
              primary
               identifier
                n
             instanceof
             pattern
              variableModifier
               annotation
                @
                qualifiedName
                 identifier
                  Dummy
              variableModifier
               final
              typeType
               classOrInterfaceType
                typeIdentifier
                 Long
              identifier
               l
            )
           statement
            ;
         blockStatement
          statement
           if
           parExpression
            (
            expression
             expression
              primary
               identifier
                n
             instanceof
             pattern
              variableModifier
               annotation
                @
                qualifiedName
                 identifier
                  Dummy
              variableModifier
               annotation
                @
                qualifiedName
                 identifier
                  Dummy2
              variableModifier
               final
              typeType
               classOrInterfaceType
                typeIdentifier
                 Long
              identifier
               l
            )
           statement
            ;
         }
    }
 typeDeclaration
  classDeclaration
   class
   identifier
    PatternMatching4switchExp
   classBody
    {
    classBodyDeclaration
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        void
       identifier
        f
       formalParameters
        (
        formalParameterList
         formalParameter
          typeType
           primitiveType
            int
          variableDeclaratorId
           identifier
            i
        )
       methodBody
        block
         {
         }
    classBodyDeclaration
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        void
       identifier
        f1
       formalParameters
        (
        formalParameterList
         formalParameter
          typeType
           classOrInterfaceType
            typeIdentifier
             Object
          variableDeclaratorId
           identifier
            obj
        )
       methodBody
        block
         {
         blockStatement
          statement
           switchExpression
            switch
            parExpression
             (
             expression
              primary
               identifier
                obj
             )
            {
            switchLabeledRule
             case
             expressionList
              expression
               primary
                literal
                 null
             ->
             switchRuleOutcome
              blockStatement
               statement
                expression
                 methodCall
                  identifier
                   f
                  arguments
                   (
                   expressionList
                    expression
                     primary
                      literal
                       integerLiteral
                        0
                   )
                ;
            switchLabeledRule
             case
             guardedPattern
              typeType
               classOrInterfaceType
                typeIdentifier
                 String
              identifier
               s
             ->
             switchRuleOutcome
              blockStatement
               statement
                expression
                 methodCall
                  identifier
                   f
                  arguments
                   (
                   expressionList
                    expression
                     primary
                      literal
                       integerLiteral
                        1
                   )
                ;
            switchLabeledRule
             case
             guardedPattern
              typeType
               primitiveType
                int
               [
               ]
              identifier
               a
             ->
             switchRuleOutcome
              blockStatement
               statement
                expression
                 methodCall
                  identifier
                   f
                  arguments
                   (
                   expressionList
                    expression
                     primary
                      literal
                       integerLiteral
                        2
                   )
                ;
            switchLabeledRule
             default
             ->
             switchRuleOutcome
              blockStatement
               statement
                expression
                 methodCall
                  identifier
                   f
                  arguments
                   (
                   expressionList
                    expression
                     -
                     expression
                      primary
                       literal
                        integerLiteral
                         1
                   )
                ;
            }
         }
    classBodyDeclaration
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        void
       identifier
        f2
       formalParameters
        (
        formalParameterList
         formalParameter
          typeType
           classOrInterfaceType
            typeIdentifier
             Object
          variableDeclaratorId
           identifier
            obj
        )
       methodBody
        block
         {
         blockStatement
          statement
           switchExpression
            switch
            parExpression
             (
             expression
              primary
               identifier
                obj
             )
            {
            switchLabeledRule
             case
             expressionList
              expression
               primary
                literal
                 null
             ->
             switchRuleOutcome
              blockStatement
               statement
                expression
                 methodCall
                  identifier
                   f
                  arguments
                   (
                   expressionList
                    expression
                     primary
                      literal
                       integerLiteral
                        0
                   )
                ;
            switchLabeledRule
             case
             guardedPattern
              typeType
               classOrInterfaceType
                typeIdentifier
                 Long
              identifier
               l
             ->
             switchRuleOutcome
              blockStatement
               statement
                expression
                 methodCall
                  identifier
                   f
                  arguments
                   (
                   expressionList
                    expression
                     primary
                      literal
                       integerLiteral
                        1
                   )
                ;
            switchLabeledRule
             case
             guardedPattern
              typeType
               classOrInterfaceType
                typeIdentifier
                 Integer
              identifier
               i
             ->
             switchRuleOutcome
              blockStatement
               statement
                expression
                 methodCall
                  identifier
                   f
                  arguments
                   (
                   expressionList
                    expression
                     primary
                      literal
                       integerLiteral
                        1
                   )
                ;
            switchLabeledRule
             case
             guardedPattern
              typeType
               primitiveType
                int
               [
               ]
              identifier
               a
             ->
             switchRuleOutcome
              blockStatement
               statement
                expression
                 methodCall
                  identifier
                   f
                  arguments
                   (
                   expressionList
                    expression
                     primary
                      literal
                       integerLiteral
                        2
                   )
                ;
            switchLabeledRule
             default
             ->
             switchRuleOutcome
              blockStatement
               statement
                expression
                 methodCall
                  identifier
                   f
                  arguments
                   (
                   expressionList
                    expression
                     -
                     expression
                      primary
                       literal
                        integerLiteral
                         1
                   )
                ;
            }
         }
    classBodyDeclaration
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        void
       identifier
        f3
       formalParameters
        (
        formalParameterList
         formalParameter
          typeType
           classOrInterfaceType
            typeIdentifier
             Object
          variableDeclaratorId
           identifier
            o
        )
       methodBody
        block
         {
         blockStatement
          statement
           switch
           parExpression
            (
            expression
             primary
              identifier
               o
            )
           {
           switchBlockStatementGroup
            switchLabel
             case
             expression
              primary
               literal
                null
             :
            switchLabel
             case
             typeType
              classOrInterfaceType
               typeIdentifier
                Long
             identifier
              l
             :
            blockStatement
             statement
              expression
               methodCall
                identifier
                 f
                arguments
                 (
                 expressionList
                  expression
                   primary
                    literal
                     integerLiteral
                      0
                 )
              ;
            blockStatement
             statement
              break
              ;
           switchBlockStatementGroup
            switchLabel
             default
             :
            blockStatement
             statement
              break
              ;
           }
         }
    classBodyDeclaration
     memberDeclaration
      enumDeclaration
       enum
       identifier
        E1
       {
       enumConstants
        enumConstant
         identifier
          var
       enumBodyDeclarations
        ;
       }
    classBodyDeclaration
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        void
       identifier
        f4
       formalParameters
        (
        )
       methodBody
        block
         {
         blockStatement
          localVariableDeclaration
           var
           identifier
            var
           =
           expression
            expression
             primary
              identifier
               E1
            .
            identifier
             var
          ;
         blockStatement
          statement
           switch
           parExpression
            (
            expression
             primary
              identifier
               var
            )
           {
           switchBlockStatementGroup
            switchLabel
             case
             expression
              primary
               identifier
                var
             :
            blockStatement
             statement
              return
              ;
           switchBlockStatementGroup
            switchLabel
             default
             :
            blockStatement
             statement
              break
              ;
           }
         blockStatement
          statement
           switchExpression
            switch
            parExpression
             (
             expression
              primary
               identifier
                var
             )
            {
            switchLabeledRule
             case
             expressionList
              expression
               primary
                identifier
                 var
             ->
             switchRuleOutcome
              block
               {
               }
            switchLabeledRule
             default
             ->
             switchRuleOutcome
              block
               {
               }
            }
         }
    classBodyDeclaration
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        typeType
         primitiveType
          int
       identifier
        f5
       formalParameters
        (
        formalParameterList
         formalParameter
          typeType
           classOrInterfaceType
            typeIdentifier
             Number
          variableDeclaratorId
           identifier
            n
        )
       methodBody
        block
         {
         blockStatement
          statement
           return
           expression
            switchExpression
             switch
             parExpression
              (
              expression
               primary
                identifier
                 n
              )
             {
             switchLabeledRule
              case
              guardedPattern
               typeType
                classOrInterfaceType
                 typeIdentifier
                  Long
               identifier
                l
               &&
               expression
                expression
                 expression
                  expression
                   primary
                    identifier
                     l
                  .
                  methodCall
                   identifier
                    intValue
                   arguments
                    (
                    )
                 ==
                 expression
                  primary
                   literal
                    integerLiteral
                     1
                &&
                expression
                 expression
                  expression
                   primary
                    identifier
                     l
                  .
                  methodCall
                   identifier
                    byteValue
                   arguments
                    (
                    )
                 ==
                 expression
                  primary
                   literal
                    integerLiteral
                     1
              ->
              switchRuleOutcome
               blockStatement
                statement
                 expression
                  expression
                   primary
                    identifier
                     l
                  .
                  methodCall
                   identifier
                    byteValue
                   arguments
                    (
                    )
                 ;
             switchLabeledRule
              case
              guardedPattern
               typeType
                classOrInterfaceType
                 typeIdentifier
                  Long
               identifier
                var
              ->
              switchRuleOutcome
               blockStatement
                statement
                 expression
                  expression
                   primary
                    identifier
                     var
                  .
                  methodCall
                   identifier
                    byteValue
                   arguments
                    (
                    )
                 ;
             switchLabeledRule
              case
              guardedPattern
               typeType
                classOrInterfaceType
                 typeIdentifier
                  Integer
               identifier
                i
              ->
              switchRuleOutcome
               blockStatement
                statement
                 expression
                  expression
                   primary
                    identifier
                     i
                  .
                  methodCall
                   identifier
                    byteValue
                   arguments
                    (
                    )
                 ;
             switchLabeledRule
              default
              ->
              switchRuleOutcome
               blockStatement
                statement
                 throw
                 expression
                  new
                  creator
                   createdName
                    identifier
                     RuntimeException
                   classCreatorRest
                    arguments
                     (
                     expressionList
                      expression
                       primary
                        literal
                         ""
                     )
                 ;
             }
           ;
         }
    classBodyDeclaration
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        typeType
         classOrInterfaceType
          typeIdentifier
           Function
          typeArguments
           <
           typeArgument
            typeType
             classOrInterfaceType
              typeIdentifier
               Integer
           ,
           typeArgument
            typeType
             classOrInterfaceType
              typeIdentifier
               String
           >
       identifier
        f6
       formalParameters
        (
        formalParameterList
         formalParameter
          typeType
           classOrInterfaceType
            typeIdentifier
             Object
          variableDeclaratorId
           identifier
            obj
        )
       methodBody
        block
         {
         blockStatement
          localVariableDeclaration
           typeType
            primitiveType
             boolean
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               b
             =
             variableInitializer
              expression
               primary
                literal
                 true
          ;
         blockStatement
          statement
           return
           expression
            switchExpression
             switch
             parExpression
              (
              expression
               primary
                identifier
                 obj
              )
             {
             switchLabeledRule
              case
              guardedPattern
               typeType
                classOrInterfaceType
                 typeIdentifier
                  String
               identifier
                var
               &&
               expression
                primary
                 identifier
                  b
              ->
              switchRuleOutcome
               blockStatement
                statement
                 expression
                  lambdaExpression
                   lambdaParameters
                    identifier
                     t
                   ->
                   lambdaBody
                    expression
                     primary
                      identifier
                       var
                 ;
             switchLabeledRule
              default
              ->
              switchRuleOutcome
               blockStatement
                statement
                 expression
                  lambdaExpression
                   lambdaParameters
                    identifier
                     t
                   ->
                   lambdaBody
                    expression
                     primary
                      literal
                       "Default string"
                 ;
             }
           ;
         }
    classBodyDeclaration
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        typeType
         primitiveType
          int
       identifier
        dummy
       formalParameters
        (
        )
       methodBody
        block
         {
         blockStatement
          statement
           return
           expression
            primary
             literal
              integerLiteral
               0
           ;
         }
    classBodyDeclaration
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        typeType
         classOrInterfaceType
          typeIdentifier
           Function
          typeArguments
           <
           typeArgument
            typeType
             classOrInterfaceType
              typeIdentifier
               Integer
           ,
           typeArgument
            typeType
             classOrInterfaceType
              typeIdentifier
               String
           >
       identifier
        f7
       formalParameters
        (
        formalParameterList
         formalParameter
          typeType
           classOrInterfaceType
            typeIdentifier
             Object
          variableDeclaratorId
           identifier
            obj
        )
       methodBody
        block
         {
         blockStatement
          localVariableDeclaration
           typeType
            primitiveType
             boolean
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               b
             =
             variableInitializer
              expression
               primary
                literal
                 true
          ;
         blockStatement
          localVariableDeclaration
           typeType
            primitiveType
             boolean
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               b2
             =
             variableInitializer
              expression
               primary
                literal
                 true
          ;
         blockStatement
          localVariableDeclaration
           typeType
            primitiveType
             boolean
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               b3
             =
             variableInitializer
              expression
               primary
                literal
                 true
          ;
         blockStatement
          statement
           return
           expression
            switchExpression
             switch
             parExpression
              (
              expression
               primary
                identifier
                 obj
              )
             {
             switchLabeledRule
              case
              guardedPattern
               (
               guardedPattern
                guardedPattern
                 (
                 guardedPattern
                  guardedPattern
                   (
                   guardedPattern
                    typeType
                     classOrInterfaceType
                      typeIdentifier
                       String
                    identifier
                     s
                   )
                  &&
                  expression
                   primary
                    (
                    expression
                     expression
                      primary
                       identifier
                        b
                     &&
                     expression
                      primary
                       identifier
                        b2
                    )
                 )
                &&
                expression
                 expression
                  expression
                   expression
                    primary
                     identifier
                      s
                   .
                   methodCall
                    identifier
                     length
                    arguments
                     (
                     )
                  >
                  expression
                   primary
                    literal
                     integerLiteral
                      0
                 &&
                 expression
                  expression
                   methodCall
                    identifier
                     dummy
                    arguments
                     (
                     )
                  ==
                  expression
                   primary
                    literal
                     integerLiteral
                      1
               )
              ->
              switchRuleOutcome
               blockStatement
                statement
                 expression
                  lambdaExpression
                   lambdaParameters
                    identifier
                     t
                   ->
                   lambdaBody
                    expression
                     primary
                      identifier
                       s
                 ;
             switchLabeledRule
              case
              guardedPattern
               (
               guardedPattern
                guardedPattern
                 (
                 guardedPattern
                  guardedPattern
                   (
                   guardedPattern
                    typeType
                     classOrInterfaceType
                      typeIdentifier
                       Integer
                    identifier
                     i
                    &&
                    expression
                     expression
                      primary
                       identifier
                        b
                     &&
                     expression
                      primary
                       identifier
                        b2
                   )
                  &&
                  expression
                   primary
                    (
                    expression
                     expression
                      primary
                       identifier
                        b
                     &&
                     expression
                      primary
                       identifier
                        b2
                    )
                 )
                &&
                expression
                 expression
                  primary
                   identifier
                    b3
                 &&
                 expression
                  primary
                   (
                   expression
                    expression
                     primary
                      identifier
                       b
                    &&
                    expression
                     primary
                      identifier
                       b2
                   )
               )
              ->
              switchRuleOutcome
               blockStatement
                statement
                 expression
                  lambdaExpression
                   lambdaParameters
                    identifier
                     t
                   ->
                   lambdaBody
                    expression
                     primary
                      literal
                       ""
                 ;
             switchLabeledRule
              case
              guardedPattern
               (
               guardedPattern
                guardedPattern
                 (
                 guardedPattern
                  guardedPattern
                   (
                   guardedPattern
                    typeType
                     classOrInterfaceType
                      typeIdentifier
                       Integer
                    identifier
                     i
                    &&
                    expression
                     expression
                      primary
                       identifier
                        b
                     &&
                     expression
                      primary
                       identifier
                        b2
                   )
                  &&
                  expression
                   primary
                    (
                    expression
                     expression
                      primary
                       identifier
                        b
                     &&
                     expression
                      primary
                       identifier
                        b2
                    )
                 )
                &&
                expression
                 expression
                  primary
                   identifier
                    b3
                 &&
                 expression
                  primary
                   (
                   expression
                    expression
                     expression
                      primary
                       identifier
                        b
                     &&
                     expression
                      primary
                       identifier
                        b2
                    &&
                    expression
                     !
                     expression
                      primary
                       identifier
                        b3
                   )
               )
              ->
              switchRuleOutcome
               block
                {
                blockStatement
                 statement
                  yield
                  expression
                   lambdaExpression
                    lambdaParameters
                     identifier
                      t
                    ->
                    lambdaBody
                     expression
                      primary
                       literal
                        ""
                  ;
                }
             switchLabeledRule
              case
              guardedPattern
               variableModifier
                final
               typeType
                classOrInterfaceType
                 typeIdentifier
                  Long
               identifier
                l
               &&
               expression
                primary
                 (
                 expression
                  expression
                   primary
                    identifier
                     b
                  ?
                  expression
                   primary
                    identifier
                     b2
                  :
                  expression
                   primary
                    identifier
                     b3
                 )
              ->
              switchRuleOutcome
               block
                {
                blockStatement
                 statement
                  yield
                  expression
                   lambdaExpression
                    lambdaParameters
                     identifier
                      t
                    ->
                    lambdaBody
                     expression
                      primary
                       literal
                        ""
                  ;
                }
             switchLabeledRule
              default
              ->
              switchRuleOutcome
               blockStatement
                statement
                 expression
                  lambdaExpression
                   lambdaParameters
                    identifier
                     t
                   ->
                   lambdaBody
                    expression
                     primary
                      literal
                       "Default string"
                 ;
             }
           ;
         }
    classBodyDeclaration
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        void
       identifier
        f8
       formalParameters
        (
        formalParameterList
         formalParameter
          typeType
           classOrInterfaceType
            typeIdentifier
             Object
          variableDeclaratorId
           identifier
            o
         ,
         formalParameter
          typeType
           primitiveType
            int
          variableDeclaratorId
           identifier
            i
        )
       methodBody
        block
         {
         blockStatement
          statement
           switchExpression
            switch
            parExpression
             (
             expression
              primary
               identifier
                i
             )
            {
            switchLabeledRule
             case
             expressionList
              expression
               primary
                literal
                 integerLiteral
                  1
              ,
              expression
               primary
                literal
                 integerLiteral
                  2
             :
             switchRuleOutcome
            switchLabeledRule
             case
             expressionList
              expression
               primary
                literal
                 integerLiteral
                  3
              ,
              expression
               primary
                literal
                 integerLiteral
                  4
             :
             switchRuleOutcome
              block
               {
               }
            }
         blockStatement
          statement
           switch
           parExpression
            (
            expression
             primary
              identifier
               o
            )
           {
           switchBlockStatementGroup
            switchLabel
             case
             typeType
              classOrInterfaceType
               typeIdentifier
                Number
             identifier
              b
             :
            blockStatement
             statement
              block
               {
               }
           switchBlockStatementGroup
            switchLabel
             default
             :
            blockStatement
             statement
              block
               {
               }
           }
         blockStatement
          localVariableDeclaration
           var
           identifier
            f
           =
           expression
            switchExpression
             switch
             parExpression
              (
              expression
               primary
                identifier
                 o
              )
             {
             switchLabeledRule
              case
              guardedPattern
               variableModifier
                final
               typeType
                classOrInterfaceType
                 typeIdentifier
                  I2
               identifier
                l
              :
              switchRuleOutcome
               block
                {
                blockStatement
                 statement
                  yield
                  expression
                   switchExpression
                    switch
                    parExpression
                     (
                     expression
                      primary
                       identifier
                        o
                     )
                    {
                    switchLabeledRule
                     case
                     guardedPattern
                      typeType
                       classOrInterfaceType
                        typeIdentifier
                         Byte
                      identifier
                       b
                     ->
                     switchRuleOutcome
                      blockStatement
                       statement
                        expression
                         primary
                          literal
                           integerLiteral
                            1
                        ;
                    switchLabeledRule
                     default
                     ->
                     switchRuleOutcome
                      blockStatement
                       statement
                        expression
                         primary
                          literal
                           integerLiteral
                            0
                        ;
                    }
                  ;
                }
             switchLabeledRule
              default
              :
              switchRuleOutcome
               block
                {
                blockStatement
                 statement
                  yield
                  expression
                   primary
                    literal
                     integerLiteral
                      1
                  ;
                }
             }
          ;
         }
    }
 typeDeclaration
  classDeclaration
   class
   identifier
    Records
   classBody
    {
    classBodyDeclaration
     memberDeclaration
      interfaceDeclaration
       interface
       identifier
        I1
       interfaceBody
        {
        }
    classBodyDeclaration
     modifier
      classOrInterfaceModifier
       static
     memberDeclaration
      recordDeclaration
       record
       identifier
        R0
       recordHeader
        (
        recordComponentList
         recordComponent
          typeType
           primitiveType
            int
          identifier
           x
        )
       recordBody
        {
        compactConstructorDeclaration
         identifier
          R0
         block
          {
          blockStatement
           statement
            if
            parExpression
             (
             expression
              expression
               primary
                identifier
                 x
              >
              expression
               primary
                literal
                 integerLiteral
                  3
             )
            statement
             throw
             expression
              methodCall
               identifier
                Exception
               arguments
                (
                expressionList
                 expression
                  primary
                   literal
                    "new"
                 ,
                 expression
                  primary
                   literal
                    null
                )
             ;
          blockStatement
           statement
            expression
             expression
              primary
               identifier
                x
             *=
             expression
              primary
               literal
                integerLiteral
                 3
            ;
          }
        }
    classBodyDeclaration
     modifier
      classOrInterfaceModifier
       final
     memberDeclaration
      recordDeclaration
       record
       identifier
        R1
       recordHeader
        (
        recordComponentList
         recordComponent
          typeType
           annotation
            @
            qualifiedName
             identifier
              Dummy2
           annotation
            @
            qualifiedName
             identifier
              Dummy
           primitiveType
            int
          identifier
           x
        )
       recordBody
        {
        classBodyDeclaration
         memberDeclaration
          constructorDeclaration
           identifier
            R1
           formalParameters
            (
            formalParameterList
             formalParameter
              typeType
               primitiveType
                int
              variableDeclaratorId
               identifier
                x
            )
           block
            {
            blockStatement
             statement
              expression
               expression
                expression
                 primary
                  this
                .
                identifier
                 x
               =
               expression
                primary
                 identifier
                  x
              ;
            }
        classBodyDeclaration
         memberDeclaration
          enumDeclaration
           enum
           identifier
            E
           {
           enumConstants
            enumConstant
             identifier
              ONE
           enumBodyDeclarations
            ;
            classBodyDeclaration
             memberDeclaration
              recordDeclaration
               record
               identifier
                ER
               recordHeader
                (
                )
               recordBody
                {
                }
           }
        classBodyDeclaration
         memberDeclaration
          classDeclaration
           class
           identifier
            C
           classBody
            {
            classBodyDeclaration
             memberDeclaration
              recordDeclaration
               record
               identifier
                CR
               recordHeader
                (
                )
               recordBody
                {
                }
            }
        classBodyDeclaration
         memberDeclaration
          interfaceDeclaration
           interface
           identifier
            I
           interfaceBody
            {
            interfaceBodyDeclaration
             interfaceMemberDeclaration
              recordDeclaration
               record
               identifier
                IR
               recordHeader
                (
                )
               recordBody
                {
                }
            }
        classBodyDeclaration
         modifier
          classOrInterfaceModifier
           final
         modifier
          classOrInterfaceModifier
           static
         modifier
          classOrInterfaceModifier
           private
         memberDeclaration
          recordDeclaration
           record
           identifier
            R
           recordHeader
            (
            )
           implements
           typeList
            typeType
             classOrInterfaceType
              typeIdentifier
               I1
           recordBody
            {
            }
        classBodyDeclaration
         modifier
          classOrInterfaceModifier
           final
         modifier
          classOrInterfaceModifier
           static
         modifier
          classOrInterfaceModifier
           protected
         memberDeclaration
          recordDeclaration
           record
           identifier
            R2
           recordHeader
            (
            )
           implements
           typeList
            typeType
             classOrInterfaceType
              typeIdentifier
               I1
           recordBody
            {
            }
        classBodyDeclaration
         modifier
          classOrInterfaceModifier
           final
         modifier
          classOrInterfaceModifier
           static
         modifier
          classOrInterfaceModifier
           public
         memberDeclaration
          recordDeclaration
           record
           identifier
            R3
           recordHeader
            (
            )
           implements
           typeList
            typeType
             classOrInterfaceType
              typeIdentifier
               I1
           recordBody
            {
            }
        classBodyDeclaration
         modifier
          classOrInterfaceModifier
           final
         modifier
          classOrInterfaceModifier
           static
         memberDeclaration
          recordDeclaration
           record
           identifier
            R4
           recordHeader
            (
            )
           implements
           typeList
            typeType
             classOrInterfaceType
              typeIdentifier
               I1
           recordBody
            {
            }
        }
    classBodyDeclaration
     memberDeclaration
      recordDeclaration
       record
       identifier
        R2
       recordHeader
        (
        )
       recordBody
        {
        classBodyDeclaration
         modifier
          classOrInterfaceModifier
           public
         memberDeclaration
          annotationTypeDeclaration
           @
           interface
           identifier
            TM1
           annotationTypeBody
            {
            annotationTypeElementDeclaration
             annotationTypeElementRest
              recordDeclaration
               record
               identifier
                AR
               recordHeader
                (
                )
               recordBody
                {
                }
            }
        }
    classBodyDeclaration
     memberDeclaration
      recordDeclaration
       record
       identifier
        R3
       typeParameters
        <
        typeParameter
         identifier
          T
        >
       recordHeader
        (
        recordComponentList
         recordComponent
          typeType
           primitiveType
            int
          identifier
           x
         ,
         recordComponent
          typeType
           classOrInterfaceType
            typeIdentifier
             T
          identifier
           y
        )
       recordBody
        {
        }
    classBodyDeclaration
     memberDeclaration
      recordDeclaration
       record
       identifier
        R4
       typeParameters
        <
        typeParameter
         identifier
          T
        >
       recordHeader
        (
        recordComponentList
         recordComponent
          typeType
           primitiveType
            int
          identifier
           x
         ,
         recordComponent
          typeType
           classOrInterfaceType
            typeIdentifier
             T
          identifier
           y
        )
       implements
       typeList
        typeType
         classOrInterfaceType
          typeIdentifier
           I1
       recordBody
        {
        }
    classBodyDeclaration
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        void
       identifier
        fn1
       formalParameters
        (
        )
       methodBody
        block
         {
         blockStatement
          localTypeDeclaration
           classOrInterfaceModifier
            final
           recordDeclaration
            record
            identifier
             Pt
            typeParameters
             <
             typeParameter
              identifier
               T
             ,
             typeParameter
              identifier
               G
              extends
              typeBound
               typeType
                classOrInterfaceType
                 typeIdentifier
                  Number
             >
            recordHeader
             (
             recordComponentList
              recordComponent
               typeType
                primitiveType
                 int
               identifier
                x
              ,
              recordComponent
               typeType
                primitiveType
                 int
               identifier
                y
             )
            implements
            typeList
             typeType
              classOrInterfaceType
               typeIdentifier
                I1
             ,
             typeType
              classOrInterfaceType
               identifier
                R1
               .
               typeIdentifier
                I
            recordBody
             {
             classBodyDeclaration
              memberDeclaration
               methodDeclaration
                typeTypeOrVoid
                 void
                identifier
                 fn
                formalParameters
                 (
                 formalParameterList
                  formalParameter
                   typeType
                    classOrInterfaceType
                     typeIdentifier
                      T
                   variableDeclaratorId
                    identifier
                     t
                 )
                methodBody
                 block
                  {
                  }
             classBodyDeclaration
              memberDeclaration
               genericMethodDeclaration
                typeParameters
                 <
                 typeParameter
                  identifier
                   TT
                 >
                methodDeclaration
                 typeTypeOrVoid
                  void
                 identifier
                  f
                 formalParameters
                  (
                  )
                 methodBody
                  block
                   {
                   }
             classBodyDeclaration
              memberDeclaration
               constructorDeclaration
                identifier
                 Pt
                formalParameters
                 (
                 formalParameterList
                  formalParameter
                   typeType
                    primitiveType
                     int
                   variableDeclaratorId
                    identifier
                     x
                  ,
                  formalParameter
                   typeType
                    primitiveType
                     int
                   variableDeclaratorId
                    identifier
                     y
                 )
                block
                 {
                 blockStatement
                  statement
                   expression
                    expression
                     expression
                      primary
                       this
                     .
                     identifier
                      x
                    =
                    expression
                     primary
                      identifier
                       x
                   ;
                 blockStatement
                  statement
                   expression
                    expression
                     expression
                      primary
                       this
                     .
                     identifier
                      y
                    =
                    expression
                     primary
                      identifier
                       y
                   ;
                 }
             classBodyDeclaration
              modifier
               classOrInterfaceModifier
                private
              modifier
               classOrInterfaceModifier
                final
              modifier
               classOrInterfaceModifier
                static
              memberDeclaration
               fieldDeclaration
                typeType
                 primitiveType
                  int
                variableDeclarators
                 variableDeclarator
                  variableDeclaratorId
                   identifier
                    C
                  =
                  variableInitializer
                   expression
                    primary
                     literal
                      integerLiteral
                       1
                ;
             classBodyDeclaration
              modifier
               classOrInterfaceModifier
                static
              memberDeclaration
               classDeclaration
                class
                identifier
                 C
                classBody
                 {
                 }
             }
         blockStatement
          localVariableDeclaration
           typeType
            classOrInterfaceType
             typeIdentifier
              Pt
             typeArguments
              <
              typeArgument
               typeType
                classOrInterfaceType
                 typeIdentifier
                  Long
              ,
              typeArgument
               typeType
                classOrInterfaceType
                 typeIdentifier
                  Long
              >
           variableDeclarators
            variableDeclarator
             variableDeclaratorId
              identifier
               p
             =
             variableInitializer
              expression
               new
               creator
                createdName
                 identifier
                  Pt
                 typeArgumentsOrDiamond
                  <
                  >
                classCreatorRest
                 arguments
                  (
                  expressionList
                   expression
                    primary
                     literal
                      integerLiteral
                       1
                   ,
                   expression
                    primary
                     literal
                      integerLiteral
                       2
                  )
          ;
         blockStatement
          statement
           expression
            expression
             primary
              identifier
               p
            .
            methodCall
             identifier
              fn
             arguments
              (
              expressionList
               expression
                primary
                 literal
                  integerLiteral
                   1L
              )
           ;
         }
    }
 typeDeclaration
  classDeclaration
   class
   identifier
    TextBlocks
   classBody
    {
    classBodyDeclaration
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        void
       identifier
        f
       formalParameters
        (
        formalParameterList
         formalParameter
          typeType
           classOrInterfaceType
            typeIdentifier
             String
          variableDeclaratorId
           identifier
            s
        )
       methodBody
        block
         {
         }
    classBodyDeclaration
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        void
       identifier
        fn
       formalParameters
        (
        )
       methodBody
        block
         {
         blockStatement
          localVariableDeclaration
           var
           identifier
            s
           =
           expression
            primary
             literal
              """\n                a \t\n                \r"""
          ;
         blockStatement
          localVariableDeclaration
           var
           identifier
            s2
           =
           expression
            expression
             primary
              literal
               """\n                a"""
            +
            expression
             primary
              literal
               """\n                b"""
          ;
         blockStatement
          localVariableDeclaration
           var
           identifier
            s3
           =
           expression
            primary
             literal
              """\n                """
          ;
         blockStatement
          statement
           expression
            methodCall
             identifier
              f
             arguments
              (
              expressionList
               expression
                primary
                 literal
                  """\n                a"""
              )
           ;
         blockStatement
          statement
           expression
            methodCall
             identifier
              f
             arguments
              (
              expressionList
               expression
                primary
                 literal
                  """\n                """
              )
           ;
         }
    }
 typeDeclaration
  classDeclaration
   class
   identifier
    SealedClasses
   classBody
    {
    classBodyDeclaration
     memberDeclaration
      interfaceDeclaration
       interface
       identifier
        I1
       interfaceBody
        {
        }
    classBodyDeclaration
     memberDeclaration
      classDeclaration
       class
       identifier
        C0
       classBody
        {
        }
    classBodyDeclaration
     modifier
      classOrInterfaceModifier
       sealed
     memberDeclaration
      classDeclaration
       class
       identifier
        SC1
       extends
       typeType
        classOrInterfaceType
         typeIdentifier
          C0
       implements
       typeList
        typeType
         classOrInterfaceType
          typeIdentifier
           I1
       permits
       typeList
        typeType
         classOrInterfaceType
          typeIdentifier
           FC1
        ,
        typeType
         classOrInterfaceType
          typeIdentifier
           FC2
       classBody
        {
        }
    classBodyDeclaration
     modifier
      classOrInterfaceModifier
       sealed
     memberDeclaration
      classDeclaration
       class
       identifier
        SC2
       classBody
        {
        classBodyDeclaration
         memberDeclaration
          methodDeclaration
           typeTypeOrVoid
            void
           identifier
            f
           formalParameters
            (
            )
           methodBody
            block
             {
             blockStatement
              localVariableDeclaration
               var
               identifier
                non
               =
               expression
                primary
                 literal
                  integerLiteral
                   1
              ;
             blockStatement
              localVariableDeclaration
               var
               identifier
                sealed
               =
               expression
                primary
                 literal
                  integerLiteral
                   2
              ;
             blockStatement
              localVariableDeclaration
               var
               identifier
                ns
               =
               expression
                expression
                 primary
                  identifier
                   non
                -
                expression
                 primary
                  identifier
                   sealed
              ;
             blockStatement
              localVariableDeclaration
               var
               identifier
                permits
               =
               expression
                primary
                 literal
                  integerLiteral
                   1
              ;
             blockStatement
              localVariableDeclaration
               var
               identifier
                record
               =
               expression
                primary
                 literal
                  integerLiteral
                   1
              ;
             }
        }
    classBodyDeclaration
     modifier
      classOrInterfaceModifier
       final
     memberDeclaration
      classDeclaration
       class
       identifier
        FC1
       extends
       typeType
        classOrInterfaceType
         typeIdentifier
          SC1
       classBody
        {
        }
    classBodyDeclaration
     modifier
      classOrInterfaceModifier
       final
     memberDeclaration
      classDeclaration
       class
       identifier
        FC2
       extends
       typeType
        classOrInterfaceType
         typeIdentifier
          SC1
       classBody
        {
        }
    classBodyDeclaration
     modifier
      classOrInterfaceModifier
       non-sealed
     memberDeclaration
      classDeclaration
       class
       identifier
        NSC1
       extends
       typeType
        classOrInterfaceType
         typeIdentifier
          SC2
       classBody
        {
        }
    classBodyDeclaration
     memberDeclaration
      classDeclaration
       class
       identifier
        C1
       extends
       typeType
        classOrInterfaceType
         typeIdentifier
          NSC1
       classBody
        {
        }
    }
 typeDeclaration
  classDeclaration
   class
   identifier
    Ids
   classBody
    {
    classBodyDeclaration
     memberDeclaration
      classDeclaration
       class
       identifier
        oo
       classBody
        {
        classBodyDeclaration
         memberDeclaration
          classDeclaration
           class
           identifier
            opens
           typeParameters
            <
            typeParameter
             identifier
              T
            >
           classBody
            {
            classBodyDeclaration
             memberDeclaration
              enumDeclaration
               enum
               identifier
                E
               {
               enumConstants
                enumConstant
                 identifier
                  provides
               enumBodyDeclarations
                ;
               }
            classBodyDeclaration
             memberDeclaration
              classDeclaration
               class
               identifier
                provides
               typeParameters
                <
                typeParameter
                 identifier
                  S
                >
               classBody
                {
                classBodyDeclaration
                 memberDeclaration
                  methodDeclaration
                   typeTypeOrVoid
                    void
                   identifier
                    f
                   formalParameters
                    (
                    )
                   methodBody
                    block
                     {
                     blockStatement
                      localVariableDeclaration
                       typeType
                        classOrInterfaceType
                         identifier
                          opens
                         typeArguments
                          <
                          typeArgument
                           typeType
                            classOrInterfaceType
                             typeIdentifier
                              Byte
                          >
                         .
                         typeIdentifier
                          provides
                         typeArguments
                          <
                          typeArgument
                           typeType
                            classOrInterfaceType
                             typeIdentifier
                              Long
                          >
                       variableDeclarators
                        variableDeclarator
                         variableDeclaratorId
                          identifier
                           b1
                         =
                         variableInitializer
                          expression
                           expression
                            new
                            creator
                             createdName
                              identifier
                               opens
                              typeArgumentsOrDiamond
                               <
                               >
                             classCreatorRest
                              arguments
                               (
                               )
                           .
                           new
                           innerCreator
                            identifier
                             provides
                            nonWildcardTypeArgumentsOrDiamond
                             <
                             >
                            classCreatorRest
                             arguments
                              (
                              )
                             classBody
                              {
                              }
                      ;
                     blockStatement
                      localVariableDeclaration
                       typeType
                        classOrInterfaceType
                         identifier
                          opens
                         typeArguments
                          <
                          typeArgument
                           typeType
                            classOrInterfaceType
                             typeIdentifier
                              Byte
                          >
                         .
                         typeIdentifier
                          provides
                         typeArguments
                          <
                          typeArgument
                           typeType
                            classOrInterfaceType
                             typeIdentifier
                              Long
                          >
                       variableDeclarators
                        variableDeclarator
                         variableDeclaratorId
                          identifier
                           b2
                         =
                         variableInitializer
                          expression
                           expression
                            new
                            creator
                             createdName
                              identifier
                               opens
                             classCreatorRest
                              arguments
                               (
                               )
                           .
                           new
                           innerCreator
                            identifier
                             provides
                            classCreatorRest
                             arguments
                              (
                              )
                             classBody
                              {
                              }
                      ;
                     }
                classBodyDeclaration
                 memberDeclaration
                  methodDeclaration
                   typeTypeOrVoid
                    void
                   identifier
                    g
                   formalParameters
                    (
                    )
                   methodBody
                    block
                     {
                     blockStatement
                      localVariableDeclaration
                       typeType
                        classOrInterfaceType
                         typeIdentifier
                          E
                       variableDeclarators
                        variableDeclarator
                         variableDeclaratorId
                          identifier
                           e
                         =
                         variableInitializer
                          expression
                           expression
                            primary
                             identifier
                              E
                           .
                           identifier
                            provides
                      ;
                     blockStatement
                      statement
                       switch
                       parExpression
                        (
                        expression
                         primary
                          identifier
                           e
                        )
                       {
                       switchBlockStatementGroup
                        switchLabel
                         case
                         expression
                          primary
                           identifier
                            provides
                         :
                        blockStatement
                         statement
                          break
                          ;
                       }
                     }
                classBodyDeclaration
                 memberDeclaration
                  genericMethodDeclaration
                   typeParameters
                    <
                    typeParameter
                     identifier
                      T
                    >
                   methodDeclaration
                    typeTypeOrVoid
                     typeType
                      classOrInterfaceType
                       typeIdentifier
                        Object
                    identifier
                     var
                    formalParameters
                     (
                     )
                    methodBody
                     block
                      {
                      blockStatement
                       statement
                        return
                        expression
                         primary
                          literal
                           null
                        ;
                      }
                classBodyDeclaration
                 memberDeclaration
                  methodDeclaration
                   typeTypeOrVoid
                    typeType
                     classOrInterfaceType
                      typeIdentifier
                       provides
                      typeArguments
                       <
                       typeArgument
                        typeType
                         classOrInterfaceType
                          typeIdentifier
                           Long
                       >
                   identifier
                    get
                   formalParameters
                    (
                    )
                   methodBody
                    block
                     {
                     blockStatement
                      statement
                       return
                       expression
                        primary
                         literal
                          null
                       ;
                     }
                classBodyDeclaration
                 memberDeclaration
                  classDeclaration
                   class
                   identifier
                    with
                   typeParameters
                    <
                    typeParameter
                     identifier
                      S
                    >
                   classBody
                    {
                    }
                classBodyDeclaration
                 modifier
                  classOrInterfaceModifier
                   static
                 memberDeclaration
                  classDeclaration
                   class
                   identifier
                    SS
                   typeParameters
                    <
                    typeParameter
                     identifier
                      R
                    >
                   classBody
                    {
                    classBodyDeclaration
                     memberDeclaration
                      interfaceDeclaration
                       interface
                       identifier
                        Sup
                       typeParameters
                        <
                        typeParameter
                         identifier
                          T
                        >
                       interfaceBody
                        {
                        interfaceBodyDeclaration
                         interfaceMemberDeclaration
                          interfaceMethodDeclaration
                           interfaceCommonBodyDeclaration
                            typeTypeOrVoid
                             typeType
                              classOrInterfaceType
                               typeIdentifier
                                T
                            identifier
                             get
                            formalParameters
                             (
                             )
                            methodBody
                             ;
                        }
                    }
                classBodyDeclaration
                 memberDeclaration
                  methodDeclaration
                   typeTypeOrVoid
                    void
                   identifier
                    h
                   formalParameters
                    (
                    )
                   methodBody
                    block
                     {
                     blockStatement
                      localVariableDeclaration
                       var
                       identifier
                        o
                       =
                       expression
                        expression
                         methodCall
                          identifier
                           get
                          arguments
                           (
                           )
                        .
                        explicitGenericInvocation
                         nonWildcardTypeArguments
                          <
                          typeList
                           typeType
                            classOrInterfaceType
                             typeIdentifier
                              Long
                          >
                         explicitGenericInvocationSuffix
                          identifier
                           var
                          arguments
                           (
                           )
                      ;
                     blockStatement
                      localVariableDeclaration
                       typeType
                        classOrInterfaceType
                         identifier
                          SS
                         .
                         typeIdentifier
                          Sup
                         typeArguments
                          <
                          typeArgument
                           typeType
                            classOrInterfaceType
                             identifier
                              provides
                             typeArguments
                              <
                              typeArgument
                               typeType
                                classOrInterfaceType
                                 typeIdentifier
                                  Long
                              >
                             .
                             typeIdentifier
                              with
                             typeArguments
                              <
                              typeArgument
                               typeType
                                classOrInterfaceType
                                 typeIdentifier
                                  Long
                              >
                          >
                       variableDeclarators
                        variableDeclarator
                         variableDeclaratorId
                          identifier
                           s
                         =
                         variableInitializer
                          expression
                           typeType
                            annotation
                             @
                             qualifiedName
                              identifier
                               Issue1897
                              .
                              identifier
                               Dum1
                            classOrInterfaceType
                             identifier
                              provides
                             typeArguments
                              <
                              typeArgument
                               typeType
                                classOrInterfaceType
                                 typeIdentifier
                                  Long
                              >
                             .
                             typeIdentifier
                              with
                             typeArguments
                              <
                              typeArgument
                               typeType
                                classOrInterfaceType
                                 typeIdentifier
                                  Long
                              >
                           ::
                           new
                      ;
                     }
                classBodyDeclaration
                 memberDeclaration
                  classDeclaration
                   class
                   identifier
                    R
                   classBody
                    {
                    classBodyDeclaration
                     memberDeclaration
                      genericMethodDeclaration
                       typeParameters
                        <
                        typeParameter
                         identifier
                          to
                        >
                       methodDeclaration
                        typeTypeOrVoid
                         void
                        identifier
                         f
                        formalParameters
                         (
                         )
                        methodBody
                         block
                          {
                          }
                    }
                }
            }
        }
    classBodyDeclaration
     modifier
      classOrInterfaceModifier
       static
     memberDeclaration
      classDeclaration
       class
       identifier
        opens
       classBody
        {
        classBodyDeclaration
         memberDeclaration
          enumDeclaration
           enum
           identifier
            requires
           {
           enumConstants
            enumConstant
             identifier
              opens
           enumBodyDeclarations
            ;
           }
        classBodyDeclaration
         modifier
          classOrInterfaceModifier
           public
         modifier
          classOrInterfaceModifier
           static
         memberDeclaration
          genericMethodDeclaration
           typeParameters
            <
            typeParameter
             identifier
              T
            >
           methodDeclaration
            typeTypeOrVoid
             void
            identifier
             with
            formalParameters
             (
             formalParameterList
              formalParameter
               typeType
                classOrInterfaceType
                 typeIdentifier
                  String
               variableDeclaratorId
                identifier
                 s
             )
            methodBody
             block
              {
              }
        classBodyDeclaration
         memberDeclaration
          interfaceDeclaration
           interface
           identifier
            with
           interfaceBody
            {
            interfaceBodyDeclaration
             interfaceMemberDeclaration
              interfaceMethodDeclaration
               interfaceMethodModifier
                default
               interfaceCommonBodyDeclaration
                typeTypeOrVoid
                 void
                identifier
                 f
                formalParameters
                 (
                 )
                methodBody
                 block
                  {
                  }
            }
        classBodyDeclaration
         memberDeclaration
          classDeclaration
           class
           identifier
            exports
           implements
           typeList
            typeType
             classOrInterfaceType
              typeIdentifier
               with
           classBody
            {
            classBodyDeclaration
             memberDeclaration
              methodDeclaration
               typeTypeOrVoid
                void
               identifier
                g
               formalParameters
                (
                )
               methodBody
                block
                 {
                 blockStatement
                  statement
                   expression
                    expression
                     primary
                      identifier
                       with
                    .
                    super
                    superSuffix
                     .
                     identifier
                      f
                     arguments
                      (
                      )
                   ;
                 }
            }
        classBodyDeclaration
         memberDeclaration
          annotationTypeDeclaration
           @
           interface
           identifier
            to
           annotationTypeBody
            {
            }
        classBodyDeclaration
         memberDeclaration
          classDeclaration
           class
           identifier
            module
           classBody
            {
            classBodyDeclaration
             modifier
              classOrInterfaceModifier
               public
             modifier
              classOrInterfaceModifier
               static
             memberDeclaration
              genericMethodDeclaration
               typeParameters
                <
                typeParameter
                 identifier
                  T
                >
               methodDeclaration
                typeTypeOrVoid
                 void
                identifier
                 with
                formalParameters
                 (
                 formalParameterList
                  formalParameter
                   typeType
                    classOrInterfaceType
                     typeIdentifier
                      String
                   variableDeclaratorId
                    identifier
                     s
                 )
                methodBody
                 block
                  {
                  blockStatement
                   statement
                    try
                    block
                     {
                     }
                    catchClause
                     catch
                     (
                     catchType
                      qualifiedName
                       identifier
                        Exception
                     identifier
                      var
                     )
                     block
                      {
                      }
                  }
            }
        classBodyDeclaration
         memberDeclaration
          recordDeclaration
           record
           identifier
            provides
           recordHeader
            (
            recordComponentList
             recordComponent
              typeType
               primitiveType
                int
              identifier
               to
            )
           recordBody
            {
            classBodyDeclaration
             memberDeclaration
              methodDeclaration
               typeTypeOrVoid
                void
               identifier
                f
               formalParameters
                (
                )
               methodBody
                block
                 {
                 blockStatement
                  localVariableDeclaration
                   typeType
                    classOrInterfaceType
                     typeIdentifier
                      opens
                   variableDeclarators
                    variableDeclarator
                     variableDeclaratorId
                      identifier
                       o
                     =
                     variableInitializer
                      expression
                       new
                       creator
                        createdName
                         identifier
                          opens
                        classCreatorRest
                         arguments
                          (
                          )
                  ;
                 blockStatement
                  localVariableDeclaration
                   typeType
                    classOrInterfaceType
                     typeIdentifier
                      BiFunction
                     typeArguments
                      <
                      typeArgument
                       typeType
                        classOrInterfaceType
                         typeIdentifier
                          Long
                      ,
                      typeArgument
                       typeType
                        classOrInterfaceType
                         typeIdentifier
                          Long
                      ,
                      typeArgument
                       typeType
                        classOrInterfaceType
                         typeIdentifier
                          Long
                      >
                   variableDeclarators
                    variableDeclarator
                     variableDeclaratorId
                      identifier
                       b
                     =
                     variableInitializer
                      expression
                       lambdaExpression
                        lambdaParameters
                         (
                         identifier
                          opens
                         ,
                         identifier
                          with
                         )
                        ->
                        lambdaBody
                         expression
                          primary
                           literal
                            integerLiteral
                             1L
                  ;
                 blockStatement
                  localVariableDeclaration
                   typeType
                    classOrInterfaceType
                     typeIdentifier
                      Consumer
                     typeArguments
                      <
                      typeArgument
                       typeType
                        classOrInterfaceType
                         typeIdentifier
                          String
                      >
                   variableDeclarators
                    variableDeclarator
                     variableDeclaratorId
                      identifier
                       c
                     =
                     variableInitializer
                      expression
                       expression
                        expression
                         primary
                          identifier
                           opens
                        .
                        identifier
                         module
                       ::
                       typeArguments
                        <
                        typeArgument
                         typeType
                          classOrInterfaceType
                           typeIdentifier
                            Byte
                        >
                       identifier
                        with
                  ;
                 }
            }
        }
    }
 typeDeclaration
  classDeclaration
   class
   identifier
    Yield
   classBody
    {
    classBodyDeclaration
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        typeType
         primitiveType
          int
       identifier
        f
       formalParameters
        (
        formalParameterList
         formalParameter
          typeType
           classOrInterfaceType
            typeIdentifier
             Object
          variableDeclaratorId
           identifier
            o
        )
       methodBody
        block
         {
         blockStatement
          localVariableDeclaration
           variableModifier
            final
           var
           identifier
            yield
           =
           expression
            primary
             literal
              integerLiteral
               1
          ;
         blockStatement
          statement
           return
           expression
            switchExpression
             switch
             parExpression
              (
              expression
               primary
                identifier
                 o
              )
             {
             switchLabeledRule
              case
              guardedPattern
               typeType
                classOrInterfaceType
                 typeIdentifier
                  Long
               identifier
                l
              ->
              switchRuleOutcome
               block
                {
                blockStatement
                 statement
                  yield
                  expression
                   primary
                    identifier
                     yield
                  ;
                }
             switchLabeledRule
              default
              ->
              switchRuleOutcome
               block
                {
                blockStatement
                 statement
                  yield
                  expression
                   primary
                    identifier
                     yield
                  ;
                }
             }
           ;
         }
    classBodyDeclaration
     memberDeclaration
      methodDeclaration
       typeTypeOrVoid
        typeType
         primitiveType
          int
       identifier
        yield
       formalParameters
        (
        formalParameterList
         formalParameter
          typeType
           primitiveType
            int
          variableDeclaratorId
           identifier
            yield
        )
       methodBody
        block
         {
         blockStatement
          statement
           return
           expression
            primary
             identifier
              yield
           ;
         }
    }
 typeDeclaration
  classDeclaration
   class
   identifier
    IF_PERMITS
   classBody
    {
    classBodyDeclaration
     modifier
      classOrInterfaceModifier
       final
     memberDeclaration
      classDeclaration
       class
       identifier
        T1
       implements
       typeList
        typeType
         classOrInterfaceType
          typeIdentifier
           I1
       classBody
        {
        }
    classBodyDeclaration
     modifier
      classOrInterfaceModifier
       final
     memberDeclaration
      classDeclaration
       class
       identifier
        T2
       implements
       typeList
        typeType
         classOrInterfaceType
          typeIdentifier
           I1
       classBody
        {
        }
    classBodyDeclaration
     memberDeclaration
      interfaceDeclaration
       interface
       identifier
        I2
       interfaceBody
        {
        }
    classBodyDeclaration
     modifier
      classOrInterfaceModifier
       sealed
     memberDeclaration
      interfaceDeclaration
       interface
       identifier
        I1
       extends
       typeList
        typeType
         classOrInterfaceType
          typeIdentifier
           I2
       permits
       typeList
        typeType
         classOrInterfaceType
          typeIdentifier
           T1
        ,
        typeType
         classOrInterfaceType
          typeIdentifier
           T2
       interfaceBody
        {
        }
    }
