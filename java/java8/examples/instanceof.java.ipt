compilationUnit
 typeDeclaration
  classDeclaration
   normalClassDeclaration
    class
    InstanceOf
    classBody
     {
     classBodyDeclaration
      classMemberDeclaration
       methodDeclaration
        methodModifier
         public
        methodModifier
         static
        methodHeader
         result
          void
         methodDeclarator
          main
          (
          formalParameterList
           lastFormalParameter
            formalParameter
             unannType
              unannReferenceType
               unannArrayType
                unannClassOrInterfaceType
                 unannClassType_lfno_unannClassOrInterfaceType
                  String
                dims
                 [
                 ]
             variableDeclaratorId
              args
          )
        methodBody
         block
          {
          blockStatements
           blockStatement
            statement
             ifThenStatement
              if
              (
              expression
               assignmentExpression
                conditionalExpression
                 conditionalOrExpression
                  conditionalAndExpression
                   inclusiveOrExpression
                    exclusiveOrExpression
                     andExpression
                      equalityExpression
                       relationalExpression
                        relationalExpression
                         shiftExpression
                          additiveExpression
                           multiplicativeExpression
                            unaryExpression
                             unaryExpressionNotPlusMinus
                              postfixExpression
                               expressionName
                                args
                        instanceof
                        referenceType
                         arrayType
                          classOrInterfaceType
                           classType_lfno_classOrInterfaceType
                            String
                          dims
                           [
                           ]
              )
              statement
               statementWithoutTrailingSubstatement
                block
                 {
                 }
           blockStatement
            statement
             ifThenStatement
              if
              (
              expression
               assignmentExpression
                conditionalExpression
                 conditionalOrExpression
                  conditionalAndExpression
                   inclusiveOrExpression
                    exclusiveOrExpression
                     andExpression
                      equalityExpression
                       relationalExpression
                        relationalExpression
                         shiftExpression
                          additiveExpression
                           multiplicativeExpression
                            unaryExpression
                             unaryExpressionNotPlusMinus
                              postfixExpression
                               expressionName
                                args
                        instanceof
                        referenceType
                         arrayType
                          classOrInterfaceType
                           classType_lfno_classOrInterfaceType
                            a
                           classType_lf_classOrInterfaceType
                            .
                            String
                          dims
                           [
                           ]
              )
              statement
               statementWithoutTrailingSubstatement
                block
                 {
                 }
          }
     }
 <EOF>
