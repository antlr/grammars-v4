start_
 compilationUnit
  ordinaryCompilationUnit
   topLevelClassOrInterfaceDeclaration
    classDeclaration
     normalClassDeclaration
      classModifier
       public
      class
      typeIdentifier
       TryWithResourceDemo
      classImplements
       implements
       interfaceTypeList
        interfaceType
         classType
          typeIdentifier
           AutoCloseable
      classBody
       {
       classBodyDeclaration
        classMemberDeclaration
         methodDeclaration
          methodModifier
           public
          methodModifier
           static
          methodHeader
           result
            void
           methodDeclarator
            main
            (
            formalParameterList
             formalParameter
              unannType
               unannReferenceType
                unannArrayType
                 unannClassOrInterfaceType
                  typeIdentifier
                   String
                 dims
                  [
                  ]
              variableDeclaratorId
               args
            )
          methodBody
           block
            {
            blockStatements
             blockStatement
              localVariableDeclarationStatement
               localVariableDeclaration
                localVariableType
                 unannType
                  unannReferenceType
                   unannClassOrInterfaceType
                    typeIdentifier
                     TryWithResourceDemo
                variableDeclaratorList
                 variableDeclarator
                  variableDeclaratorId
                   demo
                  =
                  variableInitializer
                   expression
                    assignmentExpression
                     conditionalExpression
                      conditionalOrExpression
                       conditionalAndExpression
                        inclusiveOrExpression
                         exclusiveOrExpression
                          andExpression
                           equalityExpression
                            relationalExpression
                             shiftExpression
                              additiveExpression
                               multiplicativeExpression
                                unaryExpression
                                 unaryExpressionNotPlusMinus
                                  postfixExpression
                                   primary
                                    primaryNoNewArray
                                     unqualifiedClassInstanceCreationExpression
                                      new
                                      classOrInterfaceTypeToInstantiate
                                       TryWithResourceDemo
                                      (
                                      )
               ;
             blockStatement
              statement
               statementWithoutTrailingSubstatement
                tryStatement
                 tryWithResourcesStatement
                  try
                  resourceSpecification
                   (
                   resourceList
                    resource
                     localVariableDeclaration
                      localVariableType
                       unannType
                        unannReferenceType
                         unannClassOrInterfaceType
                          typeIdentifier
                           demo
                   )
                  block
                   {
                   blockStatements
                    blockStatement
                     statement
                      statementWithoutTrailingSubstatement
                       expressionStatement
                        statementExpression
                         methodInvocation
                          typeName
                           packageName
                            demo
                          .
                          doSomething
                          (
                          )
                        ;
                   }
            }
       classBodyDeclaration
        classMemberDeclaration
         methodDeclaration
          methodModifier
           public
          methodHeader
           result
            void
           methodDeclarator
            doSomething
            (
            )
          methodBody
           block
            {
            blockStatements
             blockStatement
              statement
               statementWithoutTrailingSubstatement
                expressionStatement
                 statementExpression
                  methodInvocation
                   typeName
                    packageName
                     System
                     .
                     packageName
                      out
                   .
                   println
                   (
                   argumentList
                    expression
                     assignmentExpression
                      conditionalExpression
                       conditionalOrExpression
                        conditionalAndExpression
                         inclusiveOrExpression
                          exclusiveOrExpression
                           andExpression
                            equalityExpression
                             relationalExpression
                              shiftExpression
                               additiveExpression
                                multiplicativeExpression
                                 unaryExpression
                                  unaryExpressionNotPlusMinus
                                   postfixExpression
                                    primary
                                     primaryNoNewArray
                                      literal
                                       "Hello world!"
                   )
                 ;
            }
       classBodyDeclaration
        classMemberDeclaration
         methodDeclaration
          methodModifier
           annotation
            markerAnnotation
             @
             typeName
              packageName
               Override
          methodModifier
           public
          methodHeader
           result
            void
           methodDeclarator
            close
            (
            )
          methodBody
           block
            {
            blockStatements
             blockStatement
              statement
               statementWithoutTrailingSubstatement
                expressionStatement
                 statementExpression
                  methodInvocation
                   typeName
                    packageName
                     System
                     .
                     packageName
                      out
                   .
                   println
                   (
                   argumentList
                    expression
                     assignmentExpression
                      conditionalExpression
                       conditionalOrExpression
                        conditionalAndExpression
                         inclusiveOrExpression
                          exclusiveOrExpression
                           andExpression
                            equalityExpression
                             relationalExpression
                              shiftExpression
                               additiveExpression
                                multiplicativeExpression
                                 unaryExpression
                                  unaryExpressionNotPlusMinus
                                   postfixExpression
                                    primary
                                     primaryNoNewArray
                                      literal
                                       "I am going to be closed"
                   )
                 ;
            }
       }
 <EOF>
