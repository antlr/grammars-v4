start_
 compilationUnit
  ordinaryCompilationUnit
   topLevelClassOrInterfaceDeclaration
    classDeclaration
     normalClassDeclaration
      classModifier
       public
      class
      typeIdentifier
       Lambdas
      classBody
       {
       classBodyDeclaration
        classMemberDeclaration
         methodDeclaration
          methodModifier
           public
          methodModifier
           static
          methodHeader
           result
            void
           methodDeclarator
            main
            (
            formalParameterList
             formalParameter
              unannType
               unannReferenceType
                unannArrayType
                 unannClassOrInterfaceType
                  typeIdentifier
                   String
                 dims
                  [
                  ]
              variableDeclaratorId
               args
            )
          methodBody
           block
            {
            blockStatements
             blockStatement
              localVariableDeclarationStatement
               localVariableDeclaration
                localVariableType
                 unannType
                  unannReferenceType
                   unannClassOrInterfaceType
                    typeIdentifier
                     List
                    typeArguments
                     <
                     typeArgumentList
                      typeArgument
                       referenceType
                        classOrInterfaceType
                         typeIdentifier
                          Name
                     >
                variableDeclaratorList
                 variableDeclarator
                  variableDeclaratorId
                   list
                  =
                  variableInitializer
                   expression
                    assignmentExpression
                     conditionalExpression
                      conditionalOrExpression
                       conditionalAndExpression
                        inclusiveOrExpression
                         exclusiveOrExpression
                          andExpression
                           equalityExpression
                            relationalExpression
                             shiftExpression
                              additiveExpression
                               multiplicativeExpression
                                unaryExpression
                                 unaryExpressionNotPlusMinus
                                  postfixExpression
                                   primary
                                    primaryNoNewArray
                                     unqualifiedClassInstanceCreationExpression
                                      new
                                      classOrInterfaceTypeToInstantiate
                                       ArrayList
                                       typeArgumentsOrDiamond
                                        <>
                                      (
                                      )
               ;
             blockStatement
              statement
               forStatement
                enhancedForStatement
                 for
                 (
                 localVariableDeclaration
                  localVariableType
                   unannType
                    unannReferenceType
                     unannClassOrInterfaceType
                      typeIdentifier
                       Name
                  variableDeclaratorList
                   variableDeclarator
                    variableDeclaratorId
                     name
                 :
                 expression
                  assignmentExpression
                   conditionalExpression
                    conditionalOrExpression
                     conditionalAndExpression
                      inclusiveOrExpression
                       exclusiveOrExpression
                        andExpression
                         equalityExpression
                          relationalExpression
                           shiftExpression
                            additiveExpression
                             multiplicativeExpression
                              unaryExpression
                               unaryExpressionNotPlusMinus
                                postfixExpression
                                 expressionName
                                  NAMES
                 )
                 statement
                  statementWithoutTrailingSubstatement
                   block
                    {
                    blockStatements
                     blockStatement
                      statement
                       statementWithoutTrailingSubstatement
                        expressionStatement
                         statementExpression
                          methodInvocation
                           typeName
                            packageName
                             list
                           .
                           add
                           (
                           argumentList
                            expression
                             assignmentExpression
                              conditionalExpression
                               conditionalOrExpression
                                conditionalAndExpression
                                 inclusiveOrExpression
                                  exclusiveOrExpression
                                   andExpression
                                    equalityExpression
                                     relationalExpression
                                      shiftExpression
                                       additiveExpression
                                        multiplicativeExpression
                                         unaryExpression
                                          unaryExpressionNotPlusMinus
                                           postfixExpression
                                            expressionName
                                             name
                           )
                         ;
                    }
             blockStatement
              localVariableDeclarationStatement
               localVariableDeclaration
                localVariableType
                 unannType
                  unannReferenceType
                   unannClassOrInterfaceType
                    typeIdentifier
                     Predicate
                    typeArguments
                     <
                     typeArgumentList
                      typeArgument
                       referenceType
                        classOrInterfaceType
                         typeIdentifier
                          Name
                     >
                variableDeclaratorList
                 variableDeclarator
                  variableDeclaratorId
                   pred1
                  =
                  variableInitializer
                   expression
                    lambdaExpression
                     lambdaParameters
                      name
                     ->
                     lambdaBody
                      expression
                       assignmentExpression
                        conditionalExpression
                         conditionalOrExpression
                          conditionalAndExpression
                           inclusiveOrExpression
                            exclusiveOrExpression
                             andExpression
                              equalityExpression
                               relationalExpression
                                shiftExpression
                                 additiveExpression
                                  multiplicativeExpression
                                   unaryExpression
                                    unaryExpressionNotPlusMinus
                                     postfixExpression
                                      primary
                                       primaryNoNewArray
                                        literal
                                         "Sally"
                                        pNNA
                                         .
                                         equals
                                         (
                                         argumentList
                                          expression
                                           assignmentExpression
                                            conditionalExpression
                                             conditionalOrExpression
                                              conditionalAndExpression
                                               inclusiveOrExpression
                                                exclusiveOrExpression
                                                 andExpression
                                                  equalityExpression
                                                   relationalExpression
                                                    shiftExpression
                                                     additiveExpression
                                                      multiplicativeExpression
                                                       unaryExpression
                                                        unaryExpressionNotPlusMinus
                                                         postfixExpression
                                                          expressionName
                                                           ambiguousName
                                                            name
                                                           .
                                                           firstName
                                         )
               ;
             blockStatement
              localVariableDeclarationStatement
               localVariableDeclaration
                localVariableType
                 unannType
                  unannReferenceType
                   unannClassOrInterfaceType
                    typeIdentifier
                     Predicate
                    typeArguments
                     <
                     typeArgumentList
                      typeArgument
                       referenceType
                        classOrInterfaceType
                         typeIdentifier
                          Name
                     >
                variableDeclaratorList
                 variableDeclarator
                  variableDeclaratorId
                   pred2
                  =
                  variableInitializer
                   expression
                    lambdaExpression
                     lambdaParameters
                      name
                     ->
                     lambdaBody
                      expression
                       assignmentExpression
                        conditionalExpression
                         conditionalOrExpression
                          conditionalAndExpression
                           inclusiveOrExpression
                            exclusiveOrExpression
                             andExpression
                              equalityExpression
                               relationalExpression
                                shiftExpression
                                 additiveExpression
                                  multiplicativeExpression
                                   unaryExpression
                                    unaryExpressionNotPlusMinus
                                     postfixExpression
                                      primary
                                       primaryNoNewArray
                                        literal
                                         "Queue"
                                        pNNA
                                         .
                                         equals
                                         (
                                         argumentList
                                          expression
                                           assignmentExpression
                                            conditionalExpression
                                             conditionalOrExpression
                                              conditionalAndExpression
                                               inclusiveOrExpression
                                                exclusiveOrExpression
                                                 andExpression
                                                  equalityExpression
                                                   relationalExpression
                                                    shiftExpression
                                                     additiveExpression
                                                      multiplicativeExpression
                                                       unaryExpression
                                                        unaryExpressionNotPlusMinus
                                                         postfixExpression
                                                          expressionName
                                                           ambiguousName
                                                            name
                                                           .
                                                           lastName
                                         )
               ;
             blockStatement
              statement
               statementWithoutTrailingSubstatement
                expressionStatement
                 statementExpression
                  methodInvocation
                   typeName
                    packageName
                     list
                   .
                   removeIf
                   (
                   argumentList
                    expression
                     assignmentExpression
                      conditionalExpression
                       conditionalOrExpression
                        conditionalAndExpression
                         inclusiveOrExpression
                          exclusiveOrExpression
                           andExpression
                            equalityExpression
                             relationalExpression
                              shiftExpression
                               additiveExpression
                                multiplicativeExpression
                                 unaryExpression
                                  unaryExpressionNotPlusMinus
                                   postfixExpression
                                    primary
                                     primaryNoNewArray
                                      typeName
                                       packageName
                                        pred1
                                      .
                                      or
                                      (
                                      argumentList
                                       expression
                                        assignmentExpression
                                         conditionalExpression
                                          conditionalOrExpression
                                           conditionalAndExpression
                                            inclusiveOrExpression
                                             exclusiveOrExpression
                                              andExpression
                                               equalityExpression
                                                relationalExpression
                                                 shiftExpression
                                                  additiveExpression
                                                   multiplicativeExpression
                                                    unaryExpression
                                                     unaryExpressionNotPlusMinus
                                                      postfixExpression
                                                       expressionName
                                                        pred2
                                      )
                   )
                 ;
             blockStatement
              statement
               statementWithoutTrailingSubstatement
                expressionStatement
                 statementExpression
                  methodInvocation
                   methodName
                    unqualifiedMethodIdentifier
                     printNames
                   (
                   argumentList
                    expression
                     assignmentExpression
                      conditionalExpression
                       conditionalOrExpression
                        conditionalAndExpression
                         inclusiveOrExpression
                          exclusiveOrExpression
                           andExpression
                            equalityExpression
                             relationalExpression
                              shiftExpression
                               additiveExpression
                                multiplicativeExpression
                                 unaryExpression
                                  unaryExpressionNotPlusMinus
                                   postfixExpression
                                    primary
                                     primaryNoNewArray
                                      literal
                                       "Names filtered by predicate:"
                    ,
                    expression
                     assignmentExpression
                      conditionalExpression
                       conditionalOrExpression
                        conditionalAndExpression
                         inclusiveOrExpression
                          exclusiveOrExpression
                           andExpression
                            equalityExpression
                             relationalExpression
                              shiftExpression
                               additiveExpression
                                multiplicativeExpression
                                 unaryExpression
                                  unaryExpressionNotPlusMinus
                                   postfixExpression
                                    primary
                                     primaryNoNewArray
                                      typeName
                                       packageName
                                        list
                                      .
                                      toArray
                                      (
                                      argumentList
                                       expression
                                        assignmentExpression
                                         conditionalExpression
                                          conditionalOrExpression
                                           conditionalAndExpression
                                            inclusiveOrExpression
                                             exclusiveOrExpression
                                              andExpression
                                               equalityExpression
                                                relationalExpression
                                                 shiftExpression
                                                  additiveExpression
                                                   multiplicativeExpression
                                                    unaryExpression
                                                     unaryExpressionNotPlusMinus
                                                      postfixExpression
                                                       primary
                                                        arrayCreationExpression
                                                         arrayCreationExpressionWithoutInitializer
                                                          new
                                                          classType
                                                           typeIdentifier
                                                            Name
                                                          dimExprs
                                                           dimExpr
                                                            [
                                                            expression
                                                             assignmentExpression
                                                              conditionalExpression
                                                               conditionalOrExpression
                                                                conditionalAndExpression
                                                                 inclusiveOrExpression
                                                                  exclusiveOrExpression
                                                                   andExpression
                                                                    equalityExpression
                                                                     relationalExpression
                                                                      shiftExpression
                                                                       additiveExpression
                                                                        multiplicativeExpression
                                                                         unaryExpression
                                                                          unaryExpressionNotPlusMinus
                                                                           postfixExpression
                                                                            primary
                                                                             primaryNoNewArray
                                                                              typeName
                                                                               packageName
                                                                                list
                                                                              .
                                                                              size
                                                                              (
                                                                              )
                                                            ]
                                      )
                   )
                 ;
             blockStatement
              localVariableDeclarationStatement
               localVariableDeclaration
                localVariableType
                 unannType
                  unannReferenceType
                   unannClassOrInterfaceType
                    typeIdentifier
                     Comparator
                    typeArguments
                     <
                     typeArgumentList
                      typeArgument
                       referenceType
                        classOrInterfaceType
                         typeIdentifier
                          Name
                     >
                variableDeclaratorList
                 variableDeclarator
                  variableDeclaratorId
                   com1
                  =
                  variableInitializer
                   expression
                    assignmentExpression
                     conditionalExpression
                      conditionalOrExpression
                       conditionalAndExpression
                        inclusiveOrExpression
                         exclusiveOrExpression
                          andExpression
                           equalityExpression
                            relationalExpression
                             shiftExpression
                              additiveExpression
                               multiplicativeExpression
                                unaryExpression
                                 unaryExpressionNotPlusMinus
                                  postfixExpression
                                   primary
                                    primaryNoNewArray
                                     typeName
                                      packageName
                                       Comparator
                                     .
                                     comparing
                                     (
                                     argumentList
                                      expression
                                       lambdaExpression
                                        lambdaParameters
                                         (
                                         lambdaParameterList
                                          lambdaParameter
                                           lambdaParameterType
                                            unannType
                                             unannReferenceType
                                              unannClassOrInterfaceType
                                               typeIdentifier
                                                Name
                                           variableDeclaratorId
                                            name1
                                         )
                                        ->
                                        lambdaBody
                                         expression
                                          assignmentExpression
                                           conditionalExpression
                                            conditionalOrExpression
                                             conditionalAndExpression
                                              inclusiveOrExpression
                                               exclusiveOrExpression
                                                andExpression
                                                 equalityExpression
                                                  relationalExpression
                                                   shiftExpression
                                                    additiveExpression
                                                     multiplicativeExpression
                                                      unaryExpression
                                                       unaryExpressionNotPlusMinus
                                                        postfixExpression
                                                         expressionName
                                                          ambiguousName
                                                           name1
                                                          .
                                                          lastName
                                     )
                                     pNNA
                                      .
                                      thenComparing
                                      (
                                      argumentList
                                       expression
                                        lambdaExpression
                                         lambdaParameters
                                          name2
                                         ->
                                         lambdaBody
                                          expression
                                           assignmentExpression
                                            conditionalExpression
                                             conditionalOrExpression
                                              conditionalAndExpression
                                               inclusiveOrExpression
                                                exclusiveOrExpression
                                                 andExpression
                                                  equalityExpression
                                                   relationalExpression
                                                    shiftExpression
                                                     additiveExpression
                                                      multiplicativeExpression
                                                       unaryExpression
                                                        unaryExpressionNotPlusMinus
                                                         postfixExpression
                                                          expressionName
                                                           ambiguousName
                                                            name2
                                                           .
                                                           firstName
                                      )
               ;
             blockStatement
              localVariableDeclarationStatement
               localVariableDeclaration
                localVariableType
                 unannType
                  unannReferenceType
                   unannClassOrInterfaceType
                    typeIdentifier
                     Comparator
                    typeArguments
                     <
                     typeArgumentList
                      typeArgument
                       referenceType
                        classOrInterfaceType
                         typeIdentifier
                          Name
                     >
                variableDeclaratorList
                 variableDeclarator
                  variableDeclaratorId
                   com2
                  =
                  variableInitializer
                   expression
                    assignmentExpression
                     conditionalExpression
                      conditionalOrExpression
                       conditionalAndExpression
                        inclusiveOrExpression
                         exclusiveOrExpression
                          andExpression
                           equalityExpression
                            relationalExpression
                             shiftExpression
                              additiveExpression
                               multiplicativeExpression
                                unaryExpression
                                 unaryExpressionNotPlusMinus
                                  postfixExpression
                                   primary
                                    primaryNoNewArray
                                     typeName
                                      packageName
                                       Comparator
                                     .
                                     typeArguments
                                      <
                                      typeArgumentList
                                       typeArgument
                                        referenceType
                                         classOrInterfaceType
                                          typeIdentifier
                                           Name
                                       ,
                                       typeArgument
                                        referenceType
                                         classOrInterfaceType
                                          typeIdentifier
                                           String
                                      >
                                     comparing
                                     (
                                     argumentList
                                      expression
                                       lambdaExpression
                                        lambdaParameters
                                         name1
                                        ->
                                        lambdaBody
                                         expression
                                          assignmentExpression
                                           conditionalExpression
                                            conditionalOrExpression
                                             conditionalAndExpression
                                              inclusiveOrExpression
                                               exclusiveOrExpression
                                                andExpression
                                                 equalityExpression
                                                  relationalExpression
                                                   shiftExpression
                                                    additiveExpression
                                                     multiplicativeExpression
                                                      unaryExpression
                                                       unaryExpressionNotPlusMinus
                                                        postfixExpression
                                                         expressionName
                                                          ambiguousName
                                                           name1
                                                          .
                                                          lastName
                                     )
                                     pNNA
                                      .
                                      thenComparing
                                      (
                                      argumentList
                                       expression
                                        lambdaExpression
                                         lambdaParameters
                                          name2
                                         ->
                                         lambdaBody
                                          expression
                                           assignmentExpression
                                            conditionalExpression
                                             conditionalOrExpression
                                              conditionalAndExpression
                                               inclusiveOrExpression
                                                exclusiveOrExpression
                                                 andExpression
                                                  equalityExpression
                                                   relationalExpression
                                                    shiftExpression
                                                     additiveExpression
                                                      multiplicativeExpression
                                                       unaryExpression
                                                        unaryExpressionNotPlusMinus
                                                         postfixExpression
                                                          expressionName
                                                           ambiguousName
                                                            name2
                                                           .
                                                           firstName
                                      )
               ;
             blockStatement
              statement
               statementWithoutTrailingSubstatement
                expressionStatement
                 statementExpression
                  assignment
                   leftHandSide
                    expressionName
                     copy
                   assignmentOperator
                    =
                   expression
                    assignmentExpression
                     conditionalExpression
                      conditionalOrExpression
                       conditionalAndExpression
                        inclusiveOrExpression
                         exclusiveOrExpression
                          andExpression
                           equalityExpression
                            relationalExpression
                             shiftExpression
                              additiveExpression
                               multiplicativeExpression
                                unaryExpression
                                 unaryExpressionNotPlusMinus
                                  postfixExpression
                                   primary
                                    primaryNoNewArray
                                     typeName
                                      packageName
                                       Arrays
                                     .
                                     copyOf
                                     (
                                     argumentList
                                      expression
                                       assignmentExpression
                                        conditionalExpression
                                         conditionalOrExpression
                                          conditionalAndExpression
                                           inclusiveOrExpression
                                            exclusiveOrExpression
                                             andExpression
                                              equalityExpression
                                               relationalExpression
                                                shiftExpression
                                                 additiveExpression
                                                  multiplicativeExpression
                                                   unaryExpression
                                                    unaryExpressionNotPlusMinus
                                                     postfixExpression
                                                      expressionName
                                                       NAMES
                                      ,
                                      expression
                                       assignmentExpression
                                        conditionalExpression
                                         conditionalOrExpression
                                          conditionalAndExpression
                                           inclusiveOrExpression
                                            exclusiveOrExpression
                                             andExpression
                                              equalityExpression
                                               relationalExpression
                                                shiftExpression
                                                 additiveExpression
                                                  multiplicativeExpression
                                                   unaryExpression
                                                    unaryExpressionNotPlusMinus
                                                     postfixExpression
                                                      expressionName
                                                       ambiguousName
                                                        NAMES
                                                       .
                                                       length
                                     )
                 ;
             blockStatement
              statement
               statementWithoutTrailingSubstatement
                expressionStatement
                 statementExpression
                  methodInvocation
                   typeName
                    packageName
                     Arrays
                   .
                   sort
                   (
                   argumentList
                    expression
                     assignmentExpression
                      conditionalExpression
                       conditionalOrExpression
                        conditionalAndExpression
                         inclusiveOrExpression
                          exclusiveOrExpression
                           andExpression
                            equalityExpression
                             relationalExpression
                              shiftExpression
                               additiveExpression
                                multiplicativeExpression
                                 unaryExpression
                                  unaryExpressionNotPlusMinus
                                   postfixExpression
                                    expressionName
                                     copy
                    ,
                    expression
                     lambdaExpression
                      lambdaParameters
                       (
                       lambdaParameterList
                        a
                        ,
                        b
                       )
                      ->
                      lambdaBody
                       expression
                        assignmentExpression
                         conditionalExpression
                          conditionalOrExpression
                           conditionalAndExpression
                            inclusiveOrExpression
                             exclusiveOrExpression
                              andExpression
                               equalityExpression
                                relationalExpression
                                 shiftExpression
                                  additiveExpression
                                   multiplicativeExpression
                                    unaryExpression
                                     unaryExpressionNotPlusMinus
                                      postfixExpression
                                       primary
                                        primaryNoNewArray
                                         typeName
                                          packageName
                                           a
                                         .
                                         compareTo
                                         (
                                         argumentList
                                          expression
                                           assignmentExpression
                                            conditionalExpression
                                             conditionalOrExpression
                                              conditionalAndExpression
                                               inclusiveOrExpression
                                                exclusiveOrExpression
                                                 andExpression
                                                  equalityExpression
                                                   relationalExpression
                                                    shiftExpression
                                                     additiveExpression
                                                      multiplicativeExpression
                                                       unaryExpression
                                                        unaryExpressionNotPlusMinus
                                                         postfixExpression
                                                          expressionName
                                                           b
                                         )
                   )
                 ;
             blockStatement
              statement
               statementWithoutTrailingSubstatement
                expressionStatement
                 statementExpression
                  methodInvocation
                   methodName
                    unqualifiedMethodIdentifier
                     printNames
                   (
                   argumentList
                    expression
                     assignmentExpression
                      conditionalExpression
                       conditionalOrExpression
                        conditionalAndExpression
                         inclusiveOrExpression
                          exclusiveOrExpression
                           andExpression
                            equalityExpression
                             relationalExpression
                              shiftExpression
                               additiveExpression
                                multiplicativeExpression
                                 unaryExpression
                                  unaryExpressionNotPlusMinus
                                   postfixExpression
                                    primary
                                     primaryNoNewArray
                                      literal
                                       "Names sorted with lambda expression:"
                    ,
                    expression
                     assignmentExpression
                      conditionalExpression
                       conditionalOrExpression
                        conditionalAndExpression
                         inclusiveOrExpression
                          exclusiveOrExpression
                           andExpression
                            equalityExpression
                             relationalExpression
                              shiftExpression
                               additiveExpression
                                multiplicativeExpression
                                 unaryExpression
                                  unaryExpressionNotPlusMinus
                                   postfixExpression
                                    expressionName
                                     copy
                   )
                 ;
            }
       }
   topLevelClassOrInterfaceDeclaration
    interfaceDeclaration
     normalInterfaceDeclaration
      interface
      typeIdentifier
       Formula
      interfaceBody
       {
       interfaceMemberDeclaration
        interfaceMethodDeclaration
         methodHeader
          result
           unannType
            unannPrimitiveType
             numericType
              floatingPointType
               double
          methodDeclarator
           calculate
           (
           formalParameterList
            formalParameter
             unannType
              unannPrimitiveType
               numericType
                integralType
                 int
             variableDeclaratorId
              a
           )
         methodBody
          ;
       interfaceMemberDeclaration
        interfaceMethodDeclaration
         interfaceMethodModifier
          default
         methodHeader
          result
           unannType
            unannPrimitiveType
             numericType
              floatingPointType
               double
          methodDeclarator
           sqrt
           (
           formalParameterList
            formalParameter
             unannType
              unannPrimitiveType
               numericType
                integralType
                 int
             variableDeclaratorId
              a
           )
         methodBody
          block
           {
           blockStatements
            blockStatement
             statement
              statementWithoutTrailingSubstatement
               returnStatement
                return
                expression
                 assignmentExpression
                  conditionalExpression
                   conditionalOrExpression
                    conditionalAndExpression
                     inclusiveOrExpression
                      exclusiveOrExpression
                       andExpression
                        equalityExpression
                         relationalExpression
                          shiftExpression
                           additiveExpression
                            multiplicativeExpression
                             unaryExpression
                              unaryExpressionNotPlusMinus
                               postfixExpression
                                primary
                                 primaryNoNewArray
                                  typeName
                                   packageName
                                    Math
                                  .
                                  sqrt
                                  (
                                  argumentList
                                   expression
                                    assignmentExpression
                                     conditionalExpression
                                      conditionalOrExpression
                                       conditionalAndExpression
                                        inclusiveOrExpression
                                         exclusiveOrExpression
                                          andExpression
                                           equalityExpression
                                            relationalExpression
                                             shiftExpression
                                              additiveExpression
                                               multiplicativeExpression
                                                unaryExpression
                                                 unaryExpressionNotPlusMinus
                                                  postfixExpression
                                                   expressionName
                                                    a
                                  )
                ;
           }
       }
   topLevelClassOrInterfaceDeclaration
    classDeclaration
     normalClassDeclaration
      classModifier
       public
      class
      typeIdentifier
       For
      classBody
       {
       classBodyDeclaration
        classMemberDeclaration
         methodDeclaration
          methodModifier
           public
          methodHeader
           result
            void
           methodDeclarator
            bar
            (
            )
          methodBody
           block
            {
            blockStatements
             blockStatement
              localVariableDeclarationStatement
               localVariableDeclaration
                localVariableType
                 unannType
                  unannReferenceType
                   unannClassOrInterfaceType
                    typeIdentifier
                     Function
                    typeArguments
                     <
                     typeArgumentList
                      typeArgument
                       referenceType
                        classOrInterfaceType
                         typeIdentifier
                          Computer
                      ,
                      typeArgument
                       referenceType
                        classOrInterfaceType
                         typeIdentifier
                          Integer
                     >
                variableDeclaratorList
                 variableDeclarator
                  variableDeclaratorId
                   getAge
                  =
                  variableInitializer
                   expression
                    assignmentExpression
                     conditionalExpression
                      conditionalOrExpression
                       conditionalAndExpression
                        inclusiveOrExpression
                         exclusiveOrExpression
                          andExpression
                           equalityExpression
                            relationalExpression
                             shiftExpression
                              additiveExpression
                               multiplicativeExpression
                                unaryExpression
                                 unaryExpressionNotPlusMinus
                                  postfixExpression
                                   primary
                                    primaryNoNewArray
                                     expressionName
                                      Computer
                                     ::
                                     getAge
               ;
             blockStatement
              localVariableDeclarationStatement
               localVariableDeclaration
                localVariableType
                 unannType
                  unannReferenceType
                   unannClassOrInterfaceType
                    typeIdentifier
                     Integer
                variableDeclaratorList
                 variableDeclarator
                  variableDeclaratorId
                   computerAge
                  =
                  variableInitializer
                   expression
                    assignmentExpression
                     conditionalExpression
                      conditionalOrExpression
                       conditionalAndExpression
                        inclusiveOrExpression
                         exclusiveOrExpression
                          andExpression
                           equalityExpression
                            relationalExpression
                             shiftExpression
                              additiveExpression
                               multiplicativeExpression
                                unaryExpression
                                 unaryExpressionNotPlusMinus
                                  postfixExpression
                                   primary
                                    primaryNoNewArray
                                     typeName
                                      packageName
                                       getAge
                                     .
                                     apply
                                     (
                                     argumentList
                                      expression
                                       assignmentExpression
                                        conditionalExpression
                                         conditionalOrExpression
                                          conditionalAndExpression
                                           inclusiveOrExpression
                                            exclusiveOrExpression
                                             andExpression
                                              equalityExpression
                                               relationalExpression
                                                shiftExpression
                                                 additiveExpression
                                                  multiplicativeExpression
                                                   unaryExpression
                                                    unaryExpressionNotPlusMinus
                                                     postfixExpression
                                                      expressionName
                                                       c1
                                     )
               ;
             blockStatement
              localVariableDeclarationStatement
               localVariableDeclaration
                localVariableType
                 unannType
                  unannReferenceType
                   unannClassOrInterfaceType
                    typeIdentifier
                     Function
                    typeArguments
                     <
                     typeArgumentList
                      typeArgument
                       referenceType
                        classOrInterfaceType
                         typeIdentifier
                          Computer
                      ,
                      typeArgument
                       referenceType
                        classOrInterfaceType
                         typeIdentifier
                          Integer
                     >
                variableDeclaratorList
                 variableDeclarator
                  variableDeclaratorId
                   getAgeAlt
                  =
                  variableInitializer
                   expression
                    assignmentExpression
                     conditionalExpression
                      conditionalOrExpression
                       conditionalAndExpression
                        inclusiveOrExpression
                         exclusiveOrExpression
                          andExpression
                           equalityExpression
                            relationalExpression
                             shiftExpression
                              additiveExpression
                               multiplicativeExpression
                                unaryExpression
                                 unaryExpressionNotPlusMinus
                                  postfixExpression
                                   primary
                                    primaryNoNewArray
                                     this
                                     pNNA
                                      ::
                                      getAge
               ;
             blockStatement
              localVariableDeclarationStatement
               localVariableDeclaration
                localVariableType
                 unannType
                  unannReferenceType
                   unannClassOrInterfaceType
                    typeIdentifier
                     Function
                    typeArguments
                     <
                     typeArgumentList
                      typeArgument
                       referenceType
                        classOrInterfaceType
                         typeIdentifier
                          Computer
                      ,
                      typeArgument
                       referenceType
                        classOrInterfaceType
                         typeIdentifier
                          Integer
                     >
                variableDeclaratorList
                 variableDeclarator
                  variableDeclaratorId
                   getAgeAlt2
                  =
                  variableInitializer
                   expression
                    assignmentExpression
                     conditionalExpression
                      conditionalOrExpression
                       conditionalAndExpression
                        inclusiveOrExpression
                         exclusiveOrExpression
                          andExpression
                           equalityExpression
                            relationalExpression
                             shiftExpression
                              additiveExpression
                               multiplicativeExpression
                                unaryExpression
                                 unaryExpressionNotPlusMinus
                                  postfixExpression
                                   primary
                                    primaryNoNewArray
                                     typeName
                                      packageName
                                       MyClass
                                     .
                                     this
                                     pNNA
                                      ::
                                      getAge
               ;
             blockStatement
              localVariableDeclarationStatement
               localVariableDeclaration
                localVariableType
                 unannType
                  unannReferenceType
                   unannClassOrInterfaceType
                    typeIdentifier
                     Function
                    typeArguments
                     <
                     typeArgumentList
                      typeArgument
                       referenceType
                        classOrInterfaceType
                         typeIdentifier
                          Computer
                      ,
                      typeArgument
                       referenceType
                        classOrInterfaceType
                         typeIdentifier
                          Integer
                     >
                variableDeclaratorList
                 variableDeclarator
                  variableDeclaratorId
                   getAgeAlt3
                  =
                  variableInitializer
                   expression
                    assignmentExpression
                     conditionalExpression
                      conditionalOrExpression
                       conditionalAndExpression
                        inclusiveOrExpression
                         exclusiveOrExpression
                          andExpression
                           equalityExpression
                            relationalExpression
                             shiftExpression
                              additiveExpression
                               multiplicativeExpression
                                unaryExpression
                                 unaryExpressionNotPlusMinus
                                  postfixExpression
                                   primary
                                    primaryNoNewArray
                                     methodName
                                      unqualifiedMethodIdentifier
                                       generate
                                     (
                                     )
                                     pNNA
                                      ::
                                      getAge
               ;
             blockStatement
              localVariableDeclarationStatement
               localVariableDeclaration
                localVariableType
                 unannType
                  unannReferenceType
                   unannClassOrInterfaceType
                    typeIdentifier
                     Function
                    typeArguments
                     <
                     typeArgumentList
                      typeArgument
                       referenceType
                        classOrInterfaceType
                         typeIdentifier
                          Computer
                      ,
                      typeArgument
                       referenceType
                        classOrInterfaceType
                         typeIdentifier
                          Integer
                     >
                variableDeclaratorList
                 variableDeclarator
                  variableDeclaratorId
                   getAgeAlt4
                  =
                  variableInitializer
                   expression
                    assignmentExpression
                     conditionalExpression
                      conditionalOrExpression
                       conditionalAndExpression
                        inclusiveOrExpression
                         exclusiveOrExpression
                          andExpression
                           equalityExpression
                            relationalExpression
                             shiftExpression
                              additiveExpression
                               multiplicativeExpression
                                unaryExpression
                                 unaryExpressionNotPlusMinus
                                  postfixExpression
                                   primary
                                    primaryNoNewArray
                                     typeName
                                      packageName
                                       MyClass
                                     .
                                     generate
                                     (
                                     )
                                     pNNA
                                      ::
                                      getAge
               ;
             blockStatement
              localVariableDeclarationStatement
               localVariableDeclaration
                localVariableType
                 unannType
                  unannReferenceType
                   unannClassOrInterfaceType
                    typeIdentifier
                     Function
                    typeArguments
                     <
                     typeArgumentList
                      typeArgument
                       referenceType
                        classOrInterfaceType
                         typeIdentifier
                          Computer
                      ,
                      typeArgument
                       referenceType
                        classOrInterfaceType
                         typeIdentifier
                          Integer
                     >
                variableDeclaratorList
                 variableDeclarator
                  variableDeclaratorId
                   getAgeAlt5
                  =
                  variableInitializer
                   expression
                    assignmentExpression
                     conditionalExpression
                      conditionalOrExpression
                       conditionalAndExpression
                        inclusiveOrExpression
                         exclusiveOrExpression
                          andExpression
                           equalityExpression
                            relationalExpression
                             shiftExpression
                              additiveExpression
                               multiplicativeExpression
                                unaryExpression
                                 unaryExpressionNotPlusMinus
                                  postfixExpression
                                   primary
                                    primaryNoNewArray
                                     typeName
                                      packageName
                                       MyClass
                                     .
                                     twice
                                     (
                                     )
                                     pNNA
                                      .
                                      nested
                                      (
                                      )
                                      pNNA
                                       ::
                                       getAge
               ;
             blockStatement
              localVariableDeclarationStatement
               localVariableDeclaration
                localVariableType
                 unannType
                  unannReferenceType
                   unannClassOrInterfaceType
                    typeIdentifier
                     Function
                    typeArguments
                     <
                     typeArgumentList
                      typeArgument
                       referenceType
                        classOrInterfaceType
                         typeIdentifier
                          Computer
                      ,
                      typeArgument
                       referenceType
                        classOrInterfaceType
                         typeIdentifier
                          Integer
                     >
                variableDeclaratorList
                 variableDeclarator
                  variableDeclaratorId
                   getAgeAlt6
                  =
                  variableInitializer
                   expression
                    assignmentExpression
                     conditionalExpression
                      conditionalOrExpression
                       conditionalAndExpression
                        inclusiveOrExpression
                         exclusiveOrExpression
                          andExpression
                           equalityExpression
                            relationalExpression
                             shiftExpression
                              additiveExpression
                               multiplicativeExpression
                                unaryExpression
                                 unaryExpressionNotPlusMinus
                                  postfixExpression
                                   primary
                                    primaryNoNewArray
                                     methodName
                                      unqualifiedMethodIdentifier
                                       twice
                                     (
                                     )
                                     pNNA
                                      .
                                      nested
                                      (
                                      )
                                      pNNA
                                       ::
                                       getAge
               ;
             blockStatement
              localVariableDeclarationStatement
               localVariableDeclaration
                localVariableType
                 unannType
                  unannReferenceType
                   unannClassOrInterfaceType
                    typeIdentifier
                     Function
                    typeArguments
                     <
                     typeArgumentList
                      typeArgument
                       referenceType
                        classOrInterfaceType
                         typeIdentifier
                          Computer
                      ,
                      typeArgument
                       referenceType
                        classOrInterfaceType
                         typeIdentifier
                          Integer
                     >
                variableDeclaratorList
                 variableDeclarator
                  variableDeclaratorId
                   getAgeAlt7
                  =
                  variableInitializer
                   expression
                    assignmentExpression
                     conditionalExpression
                      conditionalOrExpression
                       conditionalAndExpression
                        inclusiveOrExpression
                         exclusiveOrExpression
                          andExpression
                           equalityExpression
                            relationalExpression
                             shiftExpression
                              additiveExpression
                               multiplicativeExpression
                                unaryExpression
                                 unaryExpressionNotPlusMinus
                                  postfixExpression
                                   primary
                                    primaryNoNewArray
                                     this
                                     pNNA
                                      .
                                      singletonInstanceMethod
                                      pNNA
                                       ::
                                       get
               ;
             blockStatement
              statement
               statementWithoutTrailingSubstatement
                expressionStatement
                 statementExpression
                  methodInvocation
                   methodName
                    unqualifiedMethodIdentifier
                     autodetect
                   (
                   argumentList
                    expression
                     assignmentExpression
                      conditionalExpression
                       conditionalOrExpression
                        conditionalAndExpression
                         inclusiveOrExpression
                          exclusiveOrExpression
                           andExpression
                            equalityExpression
                             relationalExpression
                              shiftExpression
                               additiveExpression
                                multiplicativeExpression
                                 unaryExpression
                                  unaryExpressionNotPlusMinus
                                   postfixExpression
                                    primary
                                     primaryNoNewArray
                                      this
                                      pNNA
                                       .
                                       beans
                    ,
                    expression
                     assignmentExpression
                      conditionalExpression
                       conditionalOrExpression
                        conditionalAndExpression
                         inclusiveOrExpression
                          exclusiveOrExpression
                           andExpression
                            equalityExpression
                             relationalExpression
                              shiftExpression
                               additiveExpression
                                multiplicativeExpression
                                 unaryExpression
                                  unaryExpressionNotPlusMinus
                                   postfixExpression
                                    primary
                                     primaryNoNewArray
                                      (
                                      expression
                                       assignmentExpression
                                        conditionalExpression
                                         conditionalOrExpression
                                          conditionalAndExpression
                                           inclusiveOrExpression
                                            exclusiveOrExpression
                                             andExpression
                                              equalityExpression
                                               relationalExpression
                                                shiftExpression
                                                 additiveExpression
                                                  multiplicativeExpression
                                                   unaryExpression
                                                    unaryExpressionNotPlusMinus
                                                     castExpression
                                                      (
                                                      referenceType
                                                       classOrInterfaceType
                                                        typeIdentifier
                                                         AutodetectCapableMBeanInfoAssembler
                                                      )
                                                      unaryExpressionNotPlusMinus
                                                       postfixExpression
                                                        primary
                                                         primaryNoNewArray
                                                          this
                                                          pNNA
                                                           .
                                                           assembler
                                      )
                                      pNNA
                                       ::
                                       includeBean
                   )
                 ;
             blockStatement
              localVariableDeclarationStatement
               localVariableDeclaration
                localVariableType
                 unannType
                  unannReferenceType
                   unannClassOrInterfaceType
                    typeIdentifier
                     TriFunction
                    typeArguments
                     <
                     typeArgumentList
                      typeArgument
                       referenceType
                        classOrInterfaceType
                         typeIdentifier
                          Integer
                      ,
                      typeArgument
                       referenceType
                        classOrInterfaceType
                         typeIdentifier
                          String
                      ,
                      typeArgument
                       referenceType
                        classOrInterfaceType
                         typeIdentifier
                          Integer
                      ,
                      typeArgument
                       referenceType
                        classOrInterfaceType
                         typeIdentifier
                          Computer
                     >
                variableDeclaratorList
                 variableDeclarator
                  variableDeclaratorId
                   c6Function
                  =
                  variableInitializer
                   expression
                    assignmentExpression
                     conditionalExpression
                      conditionalOrExpression
                       conditionalAndExpression
                        inclusiveOrExpression
                         exclusiveOrExpression
                          andExpression
                           equalityExpression
                            relationalExpression
                             shiftExpression
                              additiveExpression
                               multiplicativeExpression
                                unaryExpression
                                 unaryExpressionNotPlusMinus
                                  postfixExpression
                                   primary
                                    primaryNoNewArray
                                     classType
                                      typeIdentifier
                                       Computer
                                     ::
                                     new
               ;
             blockStatement
              localVariableDeclarationStatement
               localVariableDeclaration
                localVariableType
                 unannType
                  unannReferenceType
                   unannClassOrInterfaceType
                    typeIdentifier
                     Computer
                variableDeclaratorList
                 variableDeclarator
                  variableDeclaratorId
                   c3
                  =
                  variableInitializer
                   expression
                    assignmentExpression
                     conditionalExpression
                      conditionalOrExpression
                       conditionalAndExpression
                        inclusiveOrExpression
                         exclusiveOrExpression
                          andExpression
                           equalityExpression
                            relationalExpression
                             shiftExpression
                              additiveExpression
                               multiplicativeExpression
                                unaryExpression
                                 unaryExpressionNotPlusMinus
                                  postfixExpression
                                   primary
                                    primaryNoNewArray
                                     typeName
                                      packageName
                                       c6Function
                                     .
                                     apply
                                     (
                                     argumentList
                                      expression
                                       assignmentExpression
                                        conditionalExpression
                                         conditionalOrExpression
                                          conditionalAndExpression
                                           inclusiveOrExpression
                                            exclusiveOrExpression
                                             andExpression
                                              equalityExpression
                                               relationalExpression
                                                shiftExpression
                                                 additiveExpression
                                                  multiplicativeExpression
                                                   unaryExpression
                                                    unaryExpressionNotPlusMinus
                                                     postfixExpression
                                                      primary
                                                       primaryNoNewArray
                                                        literal
                                                         2008
                                      ,
                                      expression
                                       assignmentExpression
                                        conditionalExpression
                                         conditionalOrExpression
                                          conditionalAndExpression
                                           inclusiveOrExpression
                                            exclusiveOrExpression
                                             andExpression
                                              equalityExpression
                                               relationalExpression
                                                shiftExpression
                                                 additiveExpression
                                                  multiplicativeExpression
                                                   unaryExpression
                                                    unaryExpressionNotPlusMinus
                                                     postfixExpression
                                                      primary
                                                       primaryNoNewArray
                                                        literal
                                                         "black"
                                      ,
                                      expression
                                       assignmentExpression
                                        conditionalExpression
                                         conditionalOrExpression
                                          conditionalAndExpression
                                           inclusiveOrExpression
                                            exclusiveOrExpression
                                             andExpression
                                              equalityExpression
                                               relationalExpression
                                                shiftExpression
                                                 additiveExpression
                                                  multiplicativeExpression
                                                   unaryExpression
                                                    unaryExpressionNotPlusMinus
                                                     postfixExpression
                                                      primary
                                                       primaryNoNewArray
                                                        literal
                                                         90
                                     )
               ;
             blockStatement
              localVariableDeclarationStatement
               localVariableDeclaration
                localVariableType
                 unannType
                  unannReferenceType
                   unannClassOrInterfaceType
                    typeIdentifier
                     Function
                    typeArguments
                     <
                     typeArgumentList
                      typeArgument
                       referenceType
                        classOrInterfaceType
                         typeIdentifier
                          Integer
                      ,
                      typeArgument
                       referenceType
                        arrayType
                         classType
                          typeIdentifier
                           Computer
                         dims
                          [
                          ]
                     >
                variableDeclaratorList
                 variableDeclarator
                  variableDeclaratorId
                   computerCreator
                  =
                  variableInitializer
                   expression
                    assignmentExpression
                     conditionalExpression
                      conditionalOrExpression
                       conditionalAndExpression
                        inclusiveOrExpression
                         exclusiveOrExpression
                          andExpression
                           equalityExpression
                            relationalExpression
                             shiftExpression
                              additiveExpression
                               multiplicativeExpression
                                unaryExpression
                                 unaryExpressionNotPlusMinus
                                  postfixExpression
                                   primary
                                    primaryNoNewArray
                                     arrayType
                                      classType
                                       typeIdentifier
                                        Computer
                                      dims
                                       [
                                       ]
                                     ::
                                     new
               ;
             blockStatement
              localVariableDeclarationStatement
               localVariableDeclaration
                localVariableType
                 unannType
                  unannReferenceType
                   unannArrayType
                    unannClassOrInterfaceType
                     typeIdentifier
                      Computer
                    dims
                     [
                     ]
                variableDeclaratorList
                 variableDeclarator
                  variableDeclaratorId
                   computerArray
                  =
                  variableInitializer
                   expression
                    assignmentExpression
                     conditionalExpression
                      conditionalOrExpression
                       conditionalAndExpression
                        inclusiveOrExpression
                         exclusiveOrExpression
                          andExpression
                           equalityExpression
                            relationalExpression
                             shiftExpression
                              additiveExpression
                               multiplicativeExpression
                                unaryExpression
                                 unaryExpressionNotPlusMinus
                                  postfixExpression
                                   primary
                                    primaryNoNewArray
                                     typeName
                                      packageName
                                       computerCreator
                                     .
                                     apply
                                     (
                                     argumentList
                                      expression
                                       assignmentExpression
                                        conditionalExpression
                                         conditionalOrExpression
                                          conditionalAndExpression
                                           inclusiveOrExpression
                                            exclusiveOrExpression
                                             andExpression
                                              equalityExpression
                                               relationalExpression
                                                shiftExpression
                                                 additiveExpression
                                                  multiplicativeExpression
                                                   unaryExpression
                                                    unaryExpressionNotPlusMinus
                                                     postfixExpression
                                                      primary
                                                       primaryNoNewArray
                                                        literal
                                                         5
                                     )
               ;
            }
       }
   topLevelClassOrInterfaceDeclaration
    classDeclaration
     normalClassDeclaration
      classModifier
       public
      class
      typeIdentifier
       Annotations
      classBody
       {
       classBodyDeclaration
        classMemberDeclaration
         fieldDeclaration
          fieldModifier
           annotation
            markerAnnotation
             @
             typeName
              packageName
               Valid
          fieldModifier
           private
          unannType
           unannReferenceType
            unannClassOrInterfaceType
             typeIdentifier
              List
             typeArguments
              <
              typeArgumentList
               typeArgument
                referenceType
                 classOrInterfaceType
                  annotation
                   markerAnnotation
                    @
                    typeName
                     packageName
                      NotNull
                  typeIdentifier
                   String
              >
          variableDeclaratorList
           variableDeclarator
            variableDeclaratorId
             property
          ;
       }
   topLevelClassOrInterfaceDeclaration
    interfaceDeclaration
     normalInterfaceDeclaration
      interfaceModifier
       public
      interface
      typeIdentifier
       CallableProcessingInterceptor
      interfaceBody
       {
       interfaceMemberDeclaration
        interfaceMethodDeclaration
         interfaceMethodModifier
          default
         methodHeader
          typeParameters
           <
           typeParameterList
            typeParameter
             typeIdentifier
              T
           >
          result
           void
          methodDeclarator
           beforeConcurrentHandling
           (
           formalParameterList
            formalParameter
             unannType
              unannReferenceType
               unannClassOrInterfaceType
                typeIdentifier
                 NativeWebRequest
             variableDeclaratorId
              request
            ,
            formalParameter
             unannType
              unannReferenceType
               unannClassOrInterfaceType
                typeIdentifier
                 Callable
                typeArguments
                 <
                 typeArgumentList
                  typeArgument
                   referenceType
                    classOrInterfaceType
                     typeIdentifier
                      T
                 >
             variableDeclaratorId
              task
           )
          throwsT
           throws
           exceptionTypeList
            exceptionType
             classType
              typeIdentifier
               Exception
         methodBody
          block
           {
           }
       }
   topLevelClassOrInterfaceDeclaration
    interfaceDeclaration
     normalInterfaceDeclaration
      interfaceModifier
       annotation
        markerAnnotation
         @
         typeName
          packageName
           FunctionalInterface
      interfaceModifier
       public
      interface
      typeIdentifier
       RouterFunction
      typeParameters
       <
       typeParameterList
        typeParameter
         typeIdentifier
          T
         typeBound
          extends
          typeVariable
           typeIdentifier
            ServerResponse
       >
      interfaceBody
       {
       interfaceMemberDeclaration
        interfaceMethodDeclaration
         interfaceMethodModifier
          default
         methodHeader
          typeParameters
           <
           typeParameterList
            typeParameter
             typeIdentifier
              S
             typeBound
              extends
              typeVariable
               typeIdentifier
                ServerResponse
           >
          result
           unannType
            unannReferenceType
             unannClassOrInterfaceType
              typeIdentifier
               RouterFunction
              typeArguments
               <
               typeArgumentList
                typeArgument
                 referenceType
                  classOrInterfaceType
                   typeIdentifier
                    S
               >
          methodDeclarator
           filter
           (
           formalParameterList
            formalParameter
             unannType
              unannReferenceType
               unannClassOrInterfaceType
                typeIdentifier
                 HandlerFilterFunction
                typeArguments
                 <
                 typeArgumentList
                  typeArgument
                   referenceType
                    classOrInterfaceType
                     typeIdentifier
                      T
                  ,
                  typeArgument
                   referenceType
                    classOrInterfaceType
                     typeIdentifier
                      S
                 >
             variableDeclaratorId
              filterFunction
           )
         methodBody
          block
           {
           blockStatements
            blockStatement
             statement
              statementWithoutTrailingSubstatement
               returnStatement
                return
                expression
                 assignmentExpression
                  conditionalExpression
                   conditionalOrExpression
                    conditionalAndExpression
                     inclusiveOrExpression
                      exclusiveOrExpression
                       andExpression
                        equalityExpression
                         relationalExpression
                          shiftExpression
                           additiveExpression
                            multiplicativeExpression
                             unaryExpression
                              unaryExpressionNotPlusMinus
                               postfixExpression
                                primary
                                 primaryNoNewArray
                                  unqualifiedClassInstanceCreationExpression
                                   new
                                   classOrInterfaceTypeToInstantiate
                                    RouterFunctions
                                    .
                                    FilteredRouterFunction
                                    typeArgumentsOrDiamond
                                     <>
                                   (
                                   argumentList
                                    expression
                                     assignmentExpression
                                      conditionalExpression
                                       conditionalOrExpression
                                        conditionalAndExpression
                                         inclusiveOrExpression
                                          exclusiveOrExpression
                                           andExpression
                                            equalityExpression
                                             relationalExpression
                                              shiftExpression
                                               additiveExpression
                                                multiplicativeExpression
                                                 unaryExpression
                                                  unaryExpressionNotPlusMinus
                                                   postfixExpression
                                                    primary
                                                     primaryNoNewArray
                                                      this
                                    ,
                                    expression
                                     assignmentExpression
                                      conditionalExpression
                                       conditionalOrExpression
                                        conditionalAndExpression
                                         inclusiveOrExpression
                                          exclusiveOrExpression
                                           andExpression
                                            equalityExpression
                                             relationalExpression
                                              shiftExpression
                                               additiveExpression
                                                multiplicativeExpression
                                                 unaryExpression
                                                  unaryExpressionNotPlusMinus
                                                   postfixExpression
                                                    expressionName
                                                     filterFunction
                                   )
                ;
           }
       }
   topLevelClassOrInterfaceDeclaration
    classDeclaration
     normalClassDeclaration
      class
      typeIdentifier
       Unicode
      classBody
       {
       classBodyDeclaration
        classMemberDeclaration
         methodDeclaration
          methodModifier
           public
          methodModifier
           static
          methodHeader
           result
            void
           methodDeclarator
            main
            (
            formalParameterList
             formalParameter
              unannType
               unannReferenceType
                unannArrayType
                 unannClassOrInterfaceType
                  typeIdentifier
                   String
                 dims
                  [
                  ]
              variableDeclaratorId
               args
            )
          methodBody
           block
            {
            blockStatements
             blockStatement
              statement
               statementWithoutTrailingSubstatement
                expressionStatement
                 statementExpression
                  methodInvocation
                   typeName
                    packageName
                     System
                     .
                     packageName
                      out
                   .
                   println
                   (
                   argumentList
                    expression
                     assignmentExpression
                      conditionalExpression
                       conditionalOrExpression
                        conditionalAndExpression
                         inclusiveOrExpression
                          exclusiveOrExpression
                           andExpression
                            equalityExpression
                             relationalExpression
                              shiftExpression
                               additiveExpression
                                multiplicativeExpression
                                 unaryExpression
                                  unaryExpressionNotPlusMinus
                                   postfixExpression
                                    primary
                                     primaryNoNewArray
                                      literal
                                       "A = \uuu0041"
                   )
                 ;
            }
       }
   topLevelClassOrInterfaceDeclaration
    classDeclaration
     normalClassDeclaration
      classModifier
       public
      class
      typeIdentifier
       Annos
      classBody
       {
       classBodyDeclaration
        classMemberDeclaration
         interfaceDeclaration
          annotationInterfaceDeclaration
           interfaceModifier
            public
           @
           interface
           typeIdentifier
            Dummy4
           annotationInterfaceBody
            {
            annotationInterfaceMemberDeclaration
             annotationInterfaceElementDeclaration
              unannType
               unannReferenceType
                unannArrayType
                 unannClassOrInterfaceType
                  typeIdentifier
                   String
                 dims
                  [
                  ]
              value
              (
              )
              ;
            }
       classBodyDeclaration
        classMemberDeclaration
         interfaceDeclaration
          annotationInterfaceDeclaration
           interfaceModifier
            annotation
             markerAnnotation
              @
              typeName
               packageName
                Documented
           interfaceModifier
            annotation
             singleElementAnnotation
              @
              typeName
               packageName
                Retention
              (
              elementValue
               conditionalExpression
                conditionalOrExpression
                 conditionalAndExpression
                  inclusiveOrExpression
                   exclusiveOrExpression
                    andExpression
                     equalityExpression
                      relationalExpression
                       shiftExpression
                        additiveExpression
                         multiplicativeExpression
                          unaryExpression
                           unaryExpressionNotPlusMinus
                            postfixExpression
                             expressionName
                              ambiguousName
                               RetentionPolicy
                              .
                              RUNTIME
              )
           interfaceModifier
            annotation
             singleElementAnnotation
              @
              typeName
               packageName
                Target
              (
              elementValue
               elementValueArrayInitializer
                {
                elementValueList
                 elementValue
                  conditionalExpression
                   conditionalOrExpression
                    conditionalAndExpression
                     inclusiveOrExpression
                      exclusiveOrExpression
                       andExpression
                        equalityExpression
                         relationalExpression
                          shiftExpression
                           additiveExpression
                            multiplicativeExpression
                             unaryExpression
                              unaryExpressionNotPlusMinus
                               postfixExpression
                                expressionName
                                 ambiguousName
                                  ElementType
                                 .
                                 TYPE_USE
                 ,
                 elementValue
                  conditionalExpression
                   conditionalOrExpression
                    conditionalAndExpression
                     inclusiveOrExpression
                      exclusiveOrExpression
                       andExpression
                        equalityExpression
                         relationalExpression
                          shiftExpression
                           additiveExpression
                            multiplicativeExpression
                             unaryExpression
                              unaryExpressionNotPlusMinus
                               postfixExpression
                                expressionName
                                 ambiguousName
                                  ElementType
                                 .
                                 TYPE_PARAMETER
                }
              )
           interfaceModifier
            public
           @
           interface
           typeIdentifier
            Dummy03
           annotationInterfaceBody
            {
            annotationInterfaceMemberDeclaration
             annotationInterfaceElementDeclaration
              unannType
               unannReferenceType
                unannArrayType
                 unannClassOrInterfaceType
                  typeIdentifier
                   Dummy3
                 dims
                  [
                  ]
              value
              (
              )
              ;
            }
       classBodyDeclaration
        classMemberDeclaration
         interfaceDeclaration
          annotationInterfaceDeclaration
           interfaceModifier
            annotation
             markerAnnotation
              @
              typeName
               packageName
                Documented
           interfaceModifier
            annotation
             singleElementAnnotation
              @
              typeName
               packageName
                Retention
              (
              elementValue
               conditionalExpression
                conditionalOrExpression
                 conditionalAndExpression
                  inclusiveOrExpression
                   exclusiveOrExpression
                    andExpression
                     equalityExpression
                      relationalExpression
                       shiftExpression
                        additiveExpression
                         multiplicativeExpression
                          unaryExpression
                           unaryExpressionNotPlusMinus
                            postfixExpression
                             expressionName
                              ambiguousName
                               RetentionPolicy
                              .
                              RUNTIME
              )
           interfaceModifier
            annotation
             singleElementAnnotation
              @
              typeName
               packageName
                Target
              (
              elementValue
               elementValueArrayInitializer
                {
                elementValueList
                 elementValue
                  conditionalExpression
                   conditionalOrExpression
                    conditionalAndExpression
                     inclusiveOrExpression
                      exclusiveOrExpression
                       andExpression
                        equalityExpression
                         relationalExpression
                          shiftExpression
                           additiveExpression
                            multiplicativeExpression
                             unaryExpression
                              unaryExpressionNotPlusMinus
                               postfixExpression
                                expressionName
                                 ambiguousName
                                  ElementType
                                 .
                                 TYPE_USE
                 ,
                 elementValue
                  conditionalExpression
                   conditionalOrExpression
                    conditionalAndExpression
                     inclusiveOrExpression
                      exclusiveOrExpression
                       andExpression
                        equalityExpression
                         relationalExpression
                          shiftExpression
                           additiveExpression
                            multiplicativeExpression
                             unaryExpression
                              unaryExpressionNotPlusMinus
                               postfixExpression
                                expressionName
                                 ambiguousName
                                  ElementType
                                 .
                                 TYPE_PARAMETER
                }
              )
           interfaceModifier
            public
           @
           interface
           typeIdentifier
            Dummy01
           annotationInterfaceBody
            {
            annotationInterfaceMemberDeclaration
             annotationInterfaceElementDeclaration
              unannType
               unannReferenceType
                unannArrayType
                 unannClassOrInterfaceType
                  typeIdentifier
                   Dummy1
                 dims
                  [
                  ]
              value
              (
              )
              ;
            }
       classBodyDeclaration
        classMemberDeclaration
         interfaceDeclaration
          annotationInterfaceDeclaration
           interfaceModifier
            annotation
             markerAnnotation
              @
              typeName
               packageName
                Documented
           interfaceModifier
            annotation
             singleElementAnnotation
              @
              typeName
               packageName
                Retention
              (
              elementValue
               conditionalExpression
                conditionalOrExpression
                 conditionalAndExpression
                  inclusiveOrExpression
                   exclusiveOrExpression
                    andExpression
                     equalityExpression
                      relationalExpression
                       shiftExpression
                        additiveExpression
                         multiplicativeExpression
                          unaryExpression
                           unaryExpressionNotPlusMinus
                            postfixExpression
                             expressionName
                              ambiguousName
                               RetentionPolicy
                              .
                              RUNTIME
              )
           interfaceModifier
            annotation
             singleElementAnnotation
              @
              typeName
               packageName
                Target
              (
              elementValue
               elementValueArrayInitializer
                {
                elementValueList
                 elementValue
                  conditionalExpression
                   conditionalOrExpression
                    conditionalAndExpression
                     inclusiveOrExpression
                      exclusiveOrExpression
                       andExpression
                        equalityExpression
                         relationalExpression
                          shiftExpression
                           additiveExpression
                            multiplicativeExpression
                             unaryExpression
                              unaryExpressionNotPlusMinus
                               postfixExpression
                                expressionName
                                 ambiguousName
                                  ElementType
                                 .
                                 TYPE_USE
                 ,
                 elementValue
                  conditionalExpression
                   conditionalOrExpression
                    conditionalAndExpression
                     inclusiveOrExpression
                      exclusiveOrExpression
                       andExpression
                        equalityExpression
                         relationalExpression
                          shiftExpression
                           additiveExpression
                            multiplicativeExpression
                             unaryExpression
                              unaryExpressionNotPlusMinus
                               postfixExpression
                                expressionName
                                 ambiguousName
                                  ElementType
                                 .
                                 TYPE_PARAMETER
                }
              )
           interfaceModifier
            annotation
             singleElementAnnotation
              @
              typeName
               packageName
                Repeatable
              (
              elementValue
               conditionalExpression
                conditionalOrExpression
                 conditionalAndExpression
                  inclusiveOrExpression
                   exclusiveOrExpression
                    andExpression
                     equalityExpression
                      relationalExpression
                       shiftExpression
                        additiveExpression
                         multiplicativeExpression
                          unaryExpression
                           unaryExpressionNotPlusMinus
                            postfixExpression
                             primary
                              primaryNoNewArray
                               classLiteral
                                typeName
                                 packageName
                                  Dummy01
                                .
                                class
              )
           interfaceModifier
            public
           @
           interface
           typeIdentifier
            Dummy1
           annotationInterfaceBody
            {
            }
       classBodyDeclaration
        classMemberDeclaration
         interfaceDeclaration
          annotationInterfaceDeclaration
           interfaceModifier
            annotation
             markerAnnotation
              @
              typeName
               packageName
                Documented
           interfaceModifier
            annotation
             singleElementAnnotation
              @
              typeName
               packageName
                Retention
              (
              elementValue
               conditionalExpression
                conditionalOrExpression
                 conditionalAndExpression
                  inclusiveOrExpression
                   exclusiveOrExpression
                    andExpression
                     equalityExpression
                      relationalExpression
                       shiftExpression
                        additiveExpression
                         multiplicativeExpression
                          unaryExpression
                           unaryExpressionNotPlusMinus
                            postfixExpression
                             expressionName
                              ambiguousName
                               RetentionPolicy
                              .
                              RUNTIME
              )
           interfaceModifier
            annotation
             singleElementAnnotation
              @
              typeName
               packageName
                Target
              (
              elementValue
               elementValueArrayInitializer
                {
                elementValueList
                 elementValue
                  conditionalExpression
                   conditionalOrExpression
                    conditionalAndExpression
                     inclusiveOrExpression
                      exclusiveOrExpression
                       andExpression
                        equalityExpression
                         relationalExpression
                          shiftExpression
                           additiveExpression
                            multiplicativeExpression
                             unaryExpression
                              unaryExpressionNotPlusMinus
                               postfixExpression
                                expressionName
                                 ambiguousName
                                  ElementType
                                 .
                                 TYPE_USE
                 ,
                 elementValue
                  conditionalExpression
                   conditionalOrExpression
                    conditionalAndExpression
                     inclusiveOrExpression
                      exclusiveOrExpression
                       andExpression
                        equalityExpression
                         relationalExpression
                          shiftExpression
                           additiveExpression
                            multiplicativeExpression
                             unaryExpression
                              unaryExpressionNotPlusMinus
                               postfixExpression
                                expressionName
                                 ambiguousName
                                  ElementType
                                 .
                                 TYPE_PARAMETER
                }
              )
           interfaceModifier
            public
           @
           interface
           typeIdentifier
            Dummy2
           annotationInterfaceBody
            {
            }
       classBodyDeclaration
        classMemberDeclaration
         interfaceDeclaration
          annotationInterfaceDeclaration
           interfaceModifier
            annotation
             markerAnnotation
              @
              typeName
               packageName
                Documented
           interfaceModifier
            annotation
             singleElementAnnotation
              @
              typeName
               packageName
                Retention
              (
              elementValue
               conditionalExpression
                conditionalOrExpression
                 conditionalAndExpression
                  inclusiveOrExpression
                   exclusiveOrExpression
                    andExpression
                     equalityExpression
                      relationalExpression
                       shiftExpression
                        additiveExpression
                         multiplicativeExpression
                          unaryExpression
                           unaryExpressionNotPlusMinus
                            postfixExpression
                             expressionName
                              ambiguousName
                               RetentionPolicy
                              .
                              RUNTIME
              )
           interfaceModifier
            annotation
             singleElementAnnotation
              @
              typeName
               packageName
                Target
              (
              elementValue
               elementValueArrayInitializer
                {
                elementValueList
                 elementValue
                  conditionalExpression
                   conditionalOrExpression
                    conditionalAndExpression
                     inclusiveOrExpression
                      exclusiveOrExpression
                       andExpression
                        equalityExpression
                         relationalExpression
                          shiftExpression
                           additiveExpression
                            multiplicativeExpression
                             unaryExpression
                              unaryExpressionNotPlusMinus
                               postfixExpression
                                expressionName
                                 ambiguousName
                                  ElementType
                                 .
                                 TYPE_USE
                 ,
                 elementValue
                  conditionalExpression
                   conditionalOrExpression
                    conditionalAndExpression
                     inclusiveOrExpression
                      exclusiveOrExpression
                       andExpression
                        equalityExpression
                         relationalExpression
                          shiftExpression
                           additiveExpression
                            multiplicativeExpression
                             unaryExpression
                              unaryExpressionNotPlusMinus
                               postfixExpression
                                expressionName
                                 ambiguousName
                                  ElementType
                                 .
                                 TYPE_PARAMETER
                }
              )
           interfaceModifier
            annotation
             singleElementAnnotation
              @
              typeName
               packageName
                Repeatable
              (
              elementValue
               conditionalExpression
                conditionalOrExpression
                 conditionalAndExpression
                  inclusiveOrExpression
                   exclusiveOrExpression
                    andExpression
                     equalityExpression
                      relationalExpression
                       shiftExpression
                        additiveExpression
                         multiplicativeExpression
                          unaryExpression
                           unaryExpressionNotPlusMinus
                            postfixExpression
                             primary
                              primaryNoNewArray
                               classLiteral
                                typeName
                                 packageName
                                  Dummy03
                                .
                                class
              )
           interfaceModifier
            public
           @
           interface
           typeIdentifier
            Dummy3
           annotationInterfaceBody
            {
            }
       classBodyDeclaration
        classMemberDeclaration
         methodDeclaration
          methodModifier
           public
          methodModifier
           static
          methodModifier
           annotation
            singleElementAnnotation
             @
             typeName
              packageName
               Dummy4
             (
             elementValue
              conditionalExpression
               conditionalOrExpression
                conditionalAndExpression
                 inclusiveOrExpression
                  exclusiveOrExpression
                   andExpression
                    equalityExpression
                     relationalExpression
                      shiftExpression
                       additiveExpression
                        multiplicativeExpression
                         unaryExpression
                          unaryExpressionNotPlusMinus
                           postfixExpression
                            primary
                             primaryNoNewArray
                              literal
                               "#1"
             )
          methodModifier
           annotation
            markerAnnotation
             @
             typeName
              packageName
               Dummy1
          methodModifier
           annotation
            markerAnnotation
             @
             typeName
              packageName
               Dummy3
          methodHeader
           typeParameters
            <
            typeParameterList
             typeParameter
              typeIdentifier
               T
              typeBound
               extends
               typeVariable
                annotation
                 markerAnnotation
                  @
                  typeName
                   packageName
                    Dummy2
                annotation
                 markerAnnotation
                  @
                  typeName
                   packageName
                    Dummy3
                typeIdentifier
                 Object
            >
           annotation
            markerAnnotation
             @
             typeName
              packageName
               Dummy1
           annotation
            markerAnnotation
             @
             typeName
              packageName
               Dummy3
           result
            unannType
             unannReferenceType
              unannArrayType
               unannClassOrInterfaceType
                typeIdentifier
                 T
               dims
                annotation
                 markerAnnotation
                  @
                  typeName
                   packageName
                    Dummy1
                annotation
                 markerAnnotation
                  @
                  typeName
                   packageName
                    Dummy3
                [
                ]
           methodDeclarator
            foo
            (
            formalParameterList
             formalParameter
              variableModifier
               annotation
                markerAnnotation
                 @
                 typeName
                  packageName
                   Dummy1
              unannType
               unannReferenceType
                unannArrayType
                 unannClassOrInterfaceType
                  typeIdentifier
                   T
                 dims
                  annotation
                   markerAnnotation
                    @
                    typeName
                     packageName
                      Dummy2
                  annotation
                   markerAnnotation
                    @
                    typeName
                     packageName
                      Dummy3
                  [
                  ]
              variableDeclaratorId
               arr
             ,
             formalParameter
              variableArityParameter
               variableModifier
                annotation
                 markerAnnotation
                  @
                  typeName
                   packageName
                    Dummy1
               variableModifier
                annotation
                 markerAnnotation
                  @
                  typeName
                   packageName
                    Dummy3
               unannType
                unannReferenceType
                 unannClassOrInterfaceType
                  typeIdentifier
                   T
               annotation
                markerAnnotation
                 @
                 typeName
                  packageName
                   Dummy1
               annotation
                markerAnnotation
                 @
                 typeName
                  packageName
                   Dummy3
               ...
               t
            )
          methodBody
           block
            {
            blockStatements
             blockStatement
              statement
               statementWithoutTrailingSubstatement
                returnStatement
                 return
                 expression
                  assignmentExpression
                   conditionalExpression
                    conditionalOrExpression
                     conditionalAndExpression
                      inclusiveOrExpression
                       exclusiveOrExpression
                        andExpression
                         equalityExpression
                          relationalExpression
                           shiftExpression
                            additiveExpression
                             multiplicativeExpression
                              unaryExpression
                               unaryExpressionNotPlusMinus
                                castExpression
                                 (
                                 referenceType
                                  arrayType
                                   classType
                                    annotation
                                     markerAnnotation
                                      @
                                      typeName
                                       packageName
                                        Dummy1
                                    annotation
                                     markerAnnotation
                                      @
                                      typeName
                                       packageName
                                        Dummy3
                                    typeIdentifier
                                     T
                                   dims
                                    [
                                    ]
                                 )
                                 unaryExpressionNotPlusMinus
                                  postfixExpression
                                   primary
                                    primaryNoNewArray
                                     literal
                                      null
                 ;
            }
       classBodyDeclaration
        classMemberDeclaration
         methodDeclaration
          methodModifier
           public
          methodModifier
           static
          methodModifier
           annotation
            singleElementAnnotation
             @
             typeName
              packageName
               Dummy4
             (
             elementValue
              conditionalExpression
               conditionalOrExpression
                conditionalAndExpression
                 inclusiveOrExpression
                  exclusiveOrExpression
                   andExpression
                    equalityExpression
                     relationalExpression
                      shiftExpression
                       additiveExpression
                        multiplicativeExpression
                         unaryExpression
                          unaryExpressionNotPlusMinus
                           postfixExpression
                            primary
                             primaryNoNewArray
                              literal
                               ""
             )
          methodHeader
           typeParameters
            <
            typeParameterList
             typeParameter
              typeParameterModifier
               annotation
                markerAnnotation
                 @
                 typeName
                  packageName
                   Dummy1
              typeParameterModifier
               annotation
                markerAnnotation
                 @
                 typeName
                  packageName
                   Dummy2
              typeIdentifier
               T
              typeBound
               extends
               typeVariable
                annotation
                 markerAnnotation
                  @
                  typeName
                   packageName
                    Dummy1
                annotation
                 markerAnnotation
                  @
                  typeName
                   packageName
                    Dummy3
                typeIdentifier
                 Object
            >
           annotation
            markerAnnotation
             @
             typeName
              packageName
               Dummy1
           annotation
            markerAnnotation
             @
             typeName
              packageName
               Dummy3
           result
            unannType
             unannReferenceType
              unannArrayType
               unannClassOrInterfaceType
                typeIdentifier
                 T
               dims
                annotation
                 markerAnnotation
                  @
                  typeName
                   packageName
                    Dummy1
                annotation
                 markerAnnotation
                  @
                  typeName
                   packageName
                    Dummy3
                [
                ]
                annotation
                 markerAnnotation
                  @
                  typeName
                   packageName
                    Dummy1
                annotation
                 markerAnnotation
                  @
                  typeName
                   packageName
                    Dummy2
                [
                ]
           methodDeclarator
            foo2
            (
            formalParameterList
             formalParameter
              variableModifier
               annotation
                markerAnnotation
                 @
                 typeName
                  packageName
                   Dummy1
              unannType
               unannReferenceType
                unannArrayType
                 unannClassOrInterfaceType
                  typeIdentifier
                   T
                 dims
                  annotation
                   markerAnnotation
                    @
                    typeName
                     packageName
                      Dummy2
                  annotation
                   markerAnnotation
                    @
                    typeName
                     packageName
                      Dummy3
                  [
                  ]
                  annotation
                   markerAnnotation
                    @
                    typeName
                     packageName
                      Dummy1
                  annotation
                   markerAnnotation
                    @
                    typeName
                     packageName
                      Dummy3
                  [
                  ]
              variableDeclaratorId
               arr
            )
          methodBody
           block
            {
            blockStatements
             blockStatement
              statement
               statementWithoutTrailingSubstatement
                returnStatement
                 return
                 expression
                  assignmentExpression
                   conditionalExpression
                    conditionalOrExpression
                     conditionalAndExpression
                      inclusiveOrExpression
                       exclusiveOrExpression
                        andExpression
                         equalityExpression
                          relationalExpression
                           shiftExpression
                            additiveExpression
                             multiplicativeExpression
                              unaryExpression
                               unaryExpressionNotPlusMinus
                                castExpression
                                 (
                                 referenceType
                                  arrayType
                                   classType
                                    annotation
                                     markerAnnotation
                                      @
                                      typeName
                                       packageName
                                        Dummy1
                                    annotation
                                     markerAnnotation
                                      @
                                      typeName
                                       packageName
                                        Dummy2
                                    typeIdentifier
                                     T
                                   dims
                                    [
                                    ]
                                    annotation
                                     markerAnnotation
                                      @
                                      typeName
                                       packageName
                                        Dummy1
                                    annotation
                                     markerAnnotation
                                      @
                                      typeName
                                       packageName
                                        Dummy2
                                    [
                                    ]
                                 )
                                 unaryExpressionNotPlusMinus
                                  postfixExpression
                                   primary
                                    primaryNoNewArray
                                     literal
                                      null
                 ;
            }
       classBodyDeclaration
        classMemberDeclaration
         classDeclaration
          normalClassDeclaration
           class
           typeIdentifier
            Gen
           typeParameters
            <
            typeParameterList
             typeParameter
              typeIdentifier
               T
            >
           classBody
            {
            }
       classBodyDeclaration
        classMemberDeclaration
         classDeclaration
          normalClassDeclaration
           class
           typeIdentifier
            A
           typeParameters
            <
            typeParameterList
             typeParameter
              typeParameterModifier
               annotation
                markerAnnotation
                 @
                 typeName
                  packageName
                   Dummy1
              typeIdentifier
               T
              typeBound
               extends
               classOrInterfaceType
                annotation
                 markerAnnotation
                  @
                  typeName
                   packageName
                    Dummy1
                typeIdentifier
                 Gen
                typeArguments
                 <
                 typeArgumentList
                  typeArgument
                   referenceType
                    classOrInterfaceType
                     annotation
                      markerAnnotation
                       @
                       typeName
                        packageName
                         Dummy1
                     typeIdentifier
                      T
                 >
            >
           classBody
            {
            }
       classBodyDeclaration
        classMemberDeclaration
         methodDeclaration
          methodModifier
           public
          methodModifier
           static
          methodHeader
           typeParameters
            <
            typeParameterList
             typeParameter
              typeParameterModifier
               annotation
                markerAnnotation
                 @
                 typeName
                  packageName
                   Dummy3
              typeIdentifier
               T
            >
           result
            void
           methodDeclarator
            foo3
            (
            formalParameterList
             formalParameter
              unannType
               unannReferenceType
                unannClassOrInterfaceType
                 typeIdentifier
                  T
              variableDeclaratorId
               t
             ,
             formalParameter
              unannType
               unannReferenceType
                unannClassOrInterfaceType
                 typeIdentifier
                  Gen
                 typeArguments
                  <
                  typeArgumentList
                   typeArgument
                    wildcard
                     annotation
                      markerAnnotation
                       @
                       typeName
                        packageName
                         Dummy1
                     annotation
                      markerAnnotation
                       @
                       typeName
                        packageName
                         Dummy3
                     ?
                     wildcardBounds
                      super
                      referenceType
                       classOrInterfaceType
                        annotation
                         markerAnnotation
                          @
                          typeName
                           packageName
                            Dummy1
                        annotation
                         markerAnnotation
                          @
                          typeName
                           packageName
                            Dummy3
                        typeIdentifier
                         T
                  >
              variableDeclaratorId
               c
            )
          methodBody
           block
            {
            }
       classBodyDeclaration
        classMemberDeclaration
         methodDeclaration
          methodModifier
           public
          methodModifier
           static
          methodHeader
           typeParameters
            <
            typeParameterList
             typeParameter
              typeParameterModifier
               annotation
                markerAnnotation
                 @
                 typeName
                  packageName
                   Dummy3
              typeIdentifier
               T
            >
           result
            void
           methodDeclarator
            foo33
            (
            formalParameterList
             formalParameter
              unannType
               unannReferenceType
                unannClassOrInterfaceType
                 typeIdentifier
                  T
              variableDeclaratorId
               t
             ,
             formalParameter
              unannType
               unannReferenceType
                unannClassOrInterfaceType
                 typeIdentifier
                  Gen
                 typeArguments
                  <
                  typeArgumentList
                   typeArgument
                    wildcard
                     annotation
                      markerAnnotation
                       @
                       typeName
                        packageName
                         Dummy1
                     annotation
                      markerAnnotation
                       @
                       typeName
                        packageName
                         Dummy3
                     ?
                  >
              variableDeclaratorId
               c
            )
          methodBody
           block
            {
            }
       classBodyDeclaration
        classMemberDeclaration
         methodDeclaration
          methodModifier
           public
          methodModifier
           static
          methodHeader
           typeParameters
            <
            typeParameterList
             typeParameter
              typeParameterModifier
               annotation
                markerAnnotation
                 @
                 typeName
                  packageName
                   Dummy3
              typeIdentifier
               T
             ,
             typeParameter
              typeParameterModifier
               annotation
                markerAnnotation
                 @
                 typeName
                  packageName
                   Dummy1
              typeIdentifier
               S
            >
           result
            void
           methodDeclarator
            foo333
            (
            formalParameterList
             formalParameter
              unannType
               unannReferenceType
                unannClassOrInterfaceType
                 typeIdentifier
                  T
              variableDeclaratorId
               t
             ,
             formalParameter
              unannType
               unannReferenceType
                unannClassOrInterfaceType
                 typeIdentifier
                  Gen
                 typeArguments
                  <
                  typeArgumentList
                   typeArgument
                    referenceType
                     arrayType
                      classType
                       annotation
                        markerAnnotation
                         @
                         typeName
                          packageName
                           Dummy1
                       annotation
                        markerAnnotation
                         @
                         typeName
                          packageName
                           Dummy3
                       typeIdentifier
                        T
                      dims
                       annotation
                        markerAnnotation
                         @
                         typeName
                          packageName
                           Dummy1
                       [
                       ]
                  >
              variableDeclaratorId
               c
            )
          methodBody
           block
            {
            }
       classBodyDeclaration
        classMemberDeclaration
         methodDeclaration
          methodModifier
           public
          methodModifier
           static
          methodModifier
           annotation
            markerAnnotation
             @
             typeName
              packageName
               Dummy3
          methodHeader
           typeParameters
            <
            typeParameterList
             typeParameter
              typeParameterModifier
               annotation
                markerAnnotation
                 @
                 typeName
                  packageName
                   Dummy3
              typeIdentifier
               T
              typeBound
               extends
               classOrInterfaceType
                annotation
                 markerAnnotation
                  @
                  typeName
                   packageName
                    Dummy3
                typeIdentifier
                 Gen
                typeArguments
                 <
                 typeArgumentList
                  typeArgument
                   wildcard
                    annotation
                     markerAnnotation
                      @
                      typeName
                       packageName
                        Dummy1
                    ?
                    wildcardBounds
                     super
                     referenceType
                      classOrInterfaceType
                       annotation
                        markerAnnotation
                         @
                         typeName
                          packageName
                           Dummy1
                       typeIdentifier
                        T
                 >
            >
           annotation
            markerAnnotation
             @
             typeName
              packageName
               Dummy3
           result
            unannType
             unannReferenceType
              unannArrayType
               unannClassOrInterfaceType
                typeIdentifier
                 T
               dims
                annotation
                 markerAnnotation
                  @
                  typeName
                   packageName
                    Dummy3
                [
                ]
           methodDeclarator
            f
            (
            formalParameterList
             formalParameter
              variableArityParameter
               variableModifier
                annotation
                 markerAnnotation
                  @
                  typeName
                   packageName
                    Dummy3
               unannType
                unannReferenceType
                 unannClassOrInterfaceType
                  typeIdentifier
                   T
               annotation
                markerAnnotation
                 @
                 typeName
                  packageName
                   Dummy3
               ...
               t
            )
          methodBody
           block
            {
            blockStatements
             blockStatement
              statement
               statementWithoutTrailingSubstatement
                returnStatement
                 return
                 expression
                  assignmentExpression
                   conditionalExpression
                    conditionalOrExpression
                     conditionalAndExpression
                      inclusiveOrExpression
                       exclusiveOrExpression
                        andExpression
                         equalityExpression
                          relationalExpression
                           shiftExpression
                            additiveExpression
                             multiplicativeExpression
                              unaryExpression
                               unaryExpressionNotPlusMinus
                                castExpression
                                 (
                                 referenceType
                                  arrayType
                                   classType
                                    annotation
                                     markerAnnotation
                                      @
                                      typeName
                                       packageName
                                        Dummy3
                                    typeIdentifier
                                     T
                                   dims
                                    annotation
                                     markerAnnotation
                                      @
                                      typeName
                                       packageName
                                        Dummy3
                                    [
                                    ]
                                 )
                                 unaryExpressionNotPlusMinus
                                  postfixExpression
                                   primary
                                    primaryNoNewArray
                                     literal
                                      null
                 ;
            }
       }
 <EOF>
