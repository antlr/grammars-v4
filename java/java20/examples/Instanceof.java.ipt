start_
 compilationUnit
  ordinaryCompilationUnit
   topLevelClassOrInterfaceDeclaration
    classDeclaration
     normalClassDeclaration
      class
      typeIdentifier
       InstanceOf
      classBody
       {
       classBodyDeclaration
        classMemberDeclaration
         methodDeclaration
          methodModifier
           public
          methodModifier
           static
          methodHeader
           result
            void
           methodDeclarator
            main
            (
            formalParameterList
             formalParameter
              unannType
               unannReferenceType
                unannArrayType
                 unannClassOrInterfaceType
                  typeIdentifier
                   String
                 dims
                  [
                  ]
              variableDeclaratorId
               args
            )
          methodBody
           block
            {
            blockStatements
             blockStatement
              statement
               ifThenStatement
                if
                (
                expression
                 assignmentExpression
                  conditionalExpression
                   conditionalOrExpression
                    conditionalAndExpression
                     inclusiveOrExpression
                      exclusiveOrExpression
                       andExpression
                        equalityExpression
                         relationalExpression
                          relationalExpression
                           shiftExpression
                            additiveExpression
                             multiplicativeExpression
                              unaryExpression
                               unaryExpressionNotPlusMinus
                                postfixExpression
                                 expressionName
                                  args
                          instanceof
                          referenceType
                           arrayType
                            classType
                             typeIdentifier
                              String
                            dims
                             [
                             ]
                )
                statement
                 statementWithoutTrailingSubstatement
                  block
                   {
                   }
             blockStatement
              statement
               ifThenStatement
                if
                (
                expression
                 assignmentExpression
                  conditionalExpression
                   conditionalOrExpression
                    conditionalAndExpression
                     inclusiveOrExpression
                      exclusiveOrExpression
                       andExpression
                        equalityExpression
                         relationalExpression
                          relationalExpression
                           shiftExpression
                            additiveExpression
                             multiplicativeExpression
                              unaryExpression
                               unaryExpressionNotPlusMinus
                                postfixExpression
                                 expressionName
                                  args
                          instanceof
                          referenceType
                           arrayType
                            classType
                             packageName
                              a
                             .
                             typeIdentifier
                              String
                            dims
                             [
                             ]
                )
                statement
                 statementWithoutTrailingSubstatement
                  block
                   {
                   }
            }
       }
 <EOF>
