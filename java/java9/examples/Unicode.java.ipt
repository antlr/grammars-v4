compilationUnit
 ordinaryCompilation
  typeDeclaration
   classDeclaration
    normalClassDeclaration
     class
     identifier
      Unicode
     classBody
      {
      classBodyDeclaration
       classMemberDeclaration
        methodDeclaration
         methodModifier
          public
         methodModifier
          static
         methodHeader
          result
           void
          methodDeclarator
           identifier
            main
           (
           formalParameterList
            lastFormalParameter
             formalParameter
              unannType
               unannReferenceType
                unannArrayType
                 unannClassOrInterfaceType
                  unannClassType_lfno_unannClassOrInterfaceType
                   identifier
                    String
                 dims
                  [
                  ]
              variableDeclaratorId
               identifier
                args
           )
         methodBody
          block
           {
           blockStatements
            blockStatement
             statement
              statementWithoutTrailingSubstatement
               expressionStatement
                statementExpression
                 methodInvocation
                  typeName
                   packageOrTypeName
                    identifier
                     System
                   .
                   identifier
                    out
                  .
                  identifier
                   println
                  (
                  argumentList
                   expression
                    assignmentExpression
                     conditionalExpression
                      conditionalOrExpression
                       conditionalAndExpression
                        inclusiveOrExpression
                         exclusiveOrExpression
                          andExpression
                           equalityExpression
                            relationalExpression
                             shiftExpression
                              additiveExpression
                               multiplicativeExpression
                                unaryExpression
                                 unaryExpressionNotPlusMinus
                                  postfixExpression
                                   primary
                                    primaryNoNewArray_lfno_primary
                                     literal
                                      "A = \uuu0041"
                  )
                ;
           }
      }
 <EOF>
