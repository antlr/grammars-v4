compilation_unit
 extern_alias_directives
  extern_alias_directive
   extern
   alias
   identifier
    Foo
   ;
 using_directives
  using_directive
   using
   namespace_or_type_name
    identifier
     System
   ;
  using_directive
   using
   namespace_or_type_name
    identifier
     System
    .
    identifier
     Collections
    .
    identifier
     Generic
   ;
  using_directive
   using
   namespace_or_type_name
    identifier
     System
    .
    identifier
     Linq
   ;
  using_directive
   using
   namespace_or_type_name
    identifier
     System
    .
    identifier
     Linq
    .
    identifier
     Expressions
   ;
  using_directive
   using
   namespace_or_type_name
    identifier
     System
    .
    identifier
     Text
   ;
  using_directive
   using
   identifier
    M
   =
   namespace_or_type_name
    identifier
     System
    .
    identifier
     Math
   ;
  using_directive
   using
   namespace_or_type_name
    identifier
     ConsoleApplication2
    .
    identifier
     Test
   ;
  using_directive
   using
   identifier
    X
   =
   namespace_or_type_name
    identifier
     int1
   ;
  using_directive
   using
   identifier
    Y
   =
   namespace_or_type_name
    identifier
     ABC
    .
    identifier
     X
    type_argument_list
     <
     type_
      base_type
       simple_type
        numeric_type
         integral_type
          int
     >
   ;
  using_directive
   using
   static
   namespace_or_type_name
    identifier
     System
    .
    identifier
     Math
   ;
  using_directive
   using
   static
   namespace_or_type_name
    identifier
     System
    .
    identifier
     DayOfWeek
   ;
  using_directive
   using
   static
   namespace_or_type_name
    identifier
     System
    .
    identifier
     Linq
    .
    identifier
     Enumerable
   ;
 global_attribute_section
  [
  global_attribute_target
   identifier
    assembly
  :
  attribute_list
   attribute
    namespace_or_type_name
     identifier
      System
     .
     identifier
      Copyright
    (
    attribute_argument
     expression
      non_assignment_expression
       conditional_expression
        null_coalescing_expression
         conditional_or_expression
          conditional_and_expression
           inclusive_or_expression
            exclusive_or_expression
             and_expression
              equality_expression
               relational_expression
                shift_expression
                 additive_expression
                  multiplicative_expression
                   switch_expression
                    range_expression
                     unary_expression
                      primary_expression
                       primary_expression_start
                        literal
                         string_literal
                          @"(C)"" \n\n2009"
    )
  ]
 global_attribute_section
  [
  global_attribute_target
   identifier
    module
  :
  attribute_list
   attribute
    namespace_or_type_name
     identifier
      System
     .
     identifier
      Copyright
    (
    attribute_argument
     expression
      non_assignment_expression
       conditional_expression
        null_coalescing_expression
         conditional_or_expression
          conditional_and_expression
           inclusive_or_expression
            exclusive_or_expression
             and_expression
              equality_expression
               relational_expression
                shift_expression
                 additive_expression
                  multiplicative_expression
                   switch_expression
                    range_expression
                     unary_expression
                      primary_expression
                       primary_expression_start
                        literal
                         string_literal
                          "\n\t\u0123(C) \"2009"
                  +
                  multiplicative_expression
                   switch_expression
                    range_expression
                     unary_expression
                      primary_expression
                       primary_expression_start
                        literal
                         string_literal
                          "\u0123"
    )
  ]
 namespace_member_declarations
  namespace_member_declaration
   type_declaration
    class_definition
     class
     identifier
      TopLevelType
     class_base
      :
      class_type
       namespace_or_type_name
        identifier
         IDisposable
     class_body
      {
      class_member_declarations
       class_member_declaration
        common_member_declaration
         void
         method_declaration
          method_member_name
           identifier
            IDisposable
           .
           identifier
            Dispose
          (
          )
          method_body
           block
            {
            }
      }
  namespace_member_declaration
   namespace_declaration
    namespace
    qualified_identifier
     identifier
      My
    namespace_body
     {
     using_directives
      using_directive
       using
       namespace_or_type_name
        identifier
         A
        .
        identifier
         B
       ;
     namespace_member_declarations
      namespace_member_declaration
       type_declaration
        interface_definition
         interface
         identifier
          CoContra
         variant_type_parameter_list
          <
          variant_type_parameter
           variance_annotation
            out
           identifier
            T
          ,
          variant_type_parameter
           variance_annotation
            in
           identifier
            K
          >
         class_body
          {
          }
      namespace_member_declaration
       type_declaration
        delegate_definition
         delegate
         return_type
          void
         identifier
          CoContra2
         variant_type_parameter_list
          <
          variant_type_parameter
           attributes
            attribute_section
             [
             attribute_list
              attribute
               namespace_or_type_name
                identifier
                 System
                .
                identifier
                 Obsolete
               (
               )
             ]
           variance_annotation
            out
           identifier
            T
          ,
          variant_type_parameter
           variance_annotation
            in
           identifier
            K
          >
         (
         )
         type_parameter_constraints_clauses
          type_parameter_constraints_clause
           where
           identifier
            T
           :
           type_parameter_constraints
            primary_constraint
             struct
         ;
      namespace_member_declaration
       type_declaration
        all_member_modifiers
         all_member_modifier
          public
         all_member_modifier
          unsafe
         all_member_modifier
          partial
        class_definition
         class
         identifier
          A
         class_base
          :
          class_type
           namespace_or_type_name
            identifier
             C
          ,
          namespace_or_type_name
           identifier
            I
         class_body
          {
          class_member_declarations
           class_member_declaration
            attributes
             attribute_section
              [
              attribute_list
               attribute
                namespace_or_type_name
                 identifier
                  DllImport
                (
                attribute_argument
                 expression
                  non_assignment_expression
                   conditional_expression
                    null_coalescing_expression
                     conditional_or_expression
                      conditional_and_expression
                       inclusive_or_expression
                        exclusive_or_expression
                         and_expression
                          equality_expression
                           relational_expression
                            shift_expression
                             additive_expression
                              multiplicative_expression
                               switch_expression
                                range_expression
                                 unary_expression
                                  primary_expression
                                   primary_expression_start
                                    literal
                                     string_literal
                                      "kernel32"
                ,
                attribute_argument
                 expression
                  assignment
                   unary_expression
                    primary_expression
                     primary_expression_start
                      identifier
                       SetLastError
                   assignment_operator
                    =
                   expression
                    non_assignment_expression
                     conditional_expression
                      null_coalescing_expression
                       conditional_or_expression
                        conditional_and_expression
                         inclusive_or_expression
                          exclusive_or_expression
                           and_expression
                            equality_expression
                             relational_expression
                              shift_expression
                               additive_expression
                                multiplicative_expression
                                 switch_expression
                                  range_expression
                                   unary_expression
                                    primary_expression
                                     primary_expression_start
                                      literal
                                       boolean_literal
                                        true
                )
              ]
            all_member_modifiers
             all_member_modifier
              static
             all_member_modifier
              extern
            common_member_declaration
             typed_member_declaration
              type_
               base_type
                simple_type
                 bool
              method_declaration
               method_member_name
                identifier
                 CreateDirectory
               (
               formal_parameter_list
                fixed_parameters
                 fixed_parameter
                  arg_declaration
                   type_
                    base_type
                     class_type
                      string
                   identifier
                    name
                 ,
                 fixed_parameter
                  arg_declaration
                   type_
                    base_type
                     class_type
                      namespace_or_type_name
                       identifier
                        SecurityAttribute
                   identifier
                    sa
               )
               method_body
                ;
           class_member_declaration
            all_member_modifiers
             all_member_modifier
              private
            common_member_declaration
             constant_declaration
              const
              type_
               base_type
                simple_type
                 numeric_type
                  integral_type
                   int
              constant_declarators
               constant_declarator
                identifier
                 global
                =
                expression
                 non_assignment_expression
                  conditional_expression
                   null_coalescing_expression
                    conditional_or_expression
                     conditional_and_expression
                      inclusive_or_expression
                       exclusive_or_expression
                        and_expression
                         equality_expression
                          relational_expression
                           shift_expression
                            additive_expression
                             multiplicative_expression
                              switch_expression
                               range_expression
                                unary_expression
                                 primary_expression
                                  primary_expression_start
                                   predefined_type
                                    int
                                  member_access
                                   .
                                   identifier
                                    MinValue
                             -
                             multiplicative_expression
                              switch_expression
                               range_expression
                                unary_expression
                                 primary_expression
                                  primary_expression_start
                                   literal
                                    1
              ;
           class_member_declaration
            all_member_modifiers
             all_member_modifier
              static
            common_member_declaration
             constructor_declaration
              identifier
               A
              (
              )
              body
               block
                {
                }
           class_member_declaration
            attributes
             attribute_section
              [
              attribute_target
               identifier
                method
              :
              attribute_list
               attribute
                namespace_or_type_name
                 identifier
                  Obsolete
              ]
            all_member_modifiers
             all_member_modifier
              public
            common_member_declaration
             constructor_declaration
              identifier
               A
              (
              formal_parameter_list
               fixed_parameters
                fixed_parameter
                 attributes
                  attribute_section
                   [
                   attribute_target
                    identifier
                     param
                   :
                   attribute_list
                    attribute
                     namespace_or_type_name
                      identifier
                       Obsolete
                   ]
                 arg_declaration
                  type_
                   base_type
                    simple_type
                     numeric_type
                      integral_type
                       int
                  identifier
                   foo
              )
              constructor_initializer
               :
               base
               (
               argument_list
                argument
                 expression
                  non_assignment_expression
                   conditional_expression
                    null_coalescing_expression
                     conditional_or_expression
                      conditional_and_expression
                       inclusive_or_expression
                        exclusive_or_expression
                         and_expression
                          equality_expression
                           relational_expression
                            shift_expression
                             additive_expression
                              multiplicative_expression
                               switch_expression
                                range_expression
                                 unary_expression
                                  primary_expression
                                   primary_expression_start
                                    literal
                                     1
               )
              body
               block
                {
                statement_list
                 statement
                  labeled_Statement
                   identifier
                    L
                   :
                   statement
                    embedded_statement
                     block
                      {
                      statement_list
                       statement
                        declarationStatement
                         local_variable_declaration
                          local_variable_type
                           type_
                            base_type
                             simple_type
                              numeric_type
                               integral_type
                                int
                          local_variable_declarator
                           identifier
                            i
                           =
                           local_variable_initializer
                            expression
                             non_assignment_expression
                              conditional_expression
                               null_coalescing_expression
                                conditional_or_expression
                                 conditional_and_expression
                                  inclusive_or_expression
                                   exclusive_or_expression
                                    and_expression
                                     equality_expression
                                      relational_expression
                                       shift_expression
                                        additive_expression
                                         multiplicative_expression
                                          switch_expression
                                           range_expression
                                            unary_expression
                                             primary_expression
                                              primary_expression_start
                                               sizeof
                                               (
                                               type_
                                                base_type
                                                 simple_type
                                                  numeric_type
                                                   integral_type
                                                    int
                                               )
                         ;
                       statement
                        embedded_statement
                         simple_embedded_statement
                          expression
                           non_assignment_expression
                            conditional_expression
                             null_coalescing_expression
                              conditional_or_expression
                               conditional_and_expression
                                inclusive_or_expression
                                 exclusive_or_expression
                                  and_expression
                                   equality_expression
                                    relational_expression
                                     shift_expression
                                      additive_expression
                                       multiplicative_expression
                                        switch_expression
                                         range_expression
                                          unary_expression
                                           ++
                                           unary_expression
                                            primary_expression
                                             primary_expression_start
                                              identifier
                                               i
                          ;
                       statement
                        declarationStatement
                         local_variable_declaration
                          local_variable_type
                           var
                          local_variable_declarator
                           identifier
                            s1
                           =
                           local_variable_initializer
                            expression
                             non_assignment_expression
                              conditional_expression
                               null_coalescing_expression
                                conditional_or_expression
                                 conditional_and_expression
                                  inclusive_or_expression
                                   exclusive_or_expression
                                    and_expression
                                     equality_expression
                                      relational_expression
                                       shift_expression
                                        additive_expression
                                         multiplicative_expression
                                          switch_expression
                                           range_expression
                                            unary_expression
                                             primary_expression
                                              primary_expression_start
                                               literal
                                                string_literal
                                                 interpolated_regular_string
                                                  $"
                                                  interpolated_regular_string_part
                                                   x 
                                                  interpolated_regular_string_part
                                                   interpolated_string_expression
                                                    expression
                                                     non_assignment_expression
                                                      conditional_expression
                                                       null_coalescing_expression
                                                        conditional_or_expression
                                                         conditional_and_expression
                                                          inclusive_or_expression
                                                           exclusive_or_expression
                                                            and_expression
                                                             equality_expression
                                                              relational_expression
                                                               shift_expression
                                                                additive_expression
                                                                 multiplicative_expression
                                                                  switch_expression
                                                                   range_expression
                                                                    unary_expression
                                                                     primary_expression
                                                                      primary_expression_start
                                                                       literal
                                                                        1
                                                    ,
                                                    expression
                                                     non_assignment_expression
                                                      conditional_expression
                                                       null_coalescing_expression
                                                        conditional_or_expression
                                                         conditional_and_expression
                                                          inclusive_or_expression
                                                           exclusive_or_expression
                                                            and_expression
                                                             equality_expression
                                                              relational_expression
                                                               shift_expression
                                                                additive_expression
                                                                 multiplicative_expression
                                                                  switch_expression
                                                                   range_expression
                                                                    unary_expression
                                                                     -
                                                                     unary_expression
                                                                      primary_expression
                                                                       primary_expression_start
                                                                        literal
                                                                         2
                                                    :
                                                    d
                                                  "
                         ;
                       statement
                        declarationStatement
                         local_variable_declaration
                          local_variable_type
                           var
                          local_variable_declarator
                           identifier
                            s2
                           =
                           local_variable_initializer
                            expression
                             non_assignment_expression
                              conditional_expression
                               null_coalescing_expression
                                conditional_or_expression
                                 conditional_and_expression
                                  inclusive_or_expression
                                   exclusive_or_expression
                                    and_expression
                                     equality_expression
                                      relational_expression
                                       shift_expression
                                        additive_expression
                                         multiplicative_expression
                                          switch_expression
                                           range_expression
                                            unary_expression
                                             primary_expression
                                              primary_expression_start
                                               literal
                                                string_literal
                                                 interpolated_verbatium_string
                                                  $@"
                                                  interpolated_verbatium_string_part
                                                   x 
                                                  interpolated_verbatium_string_part
                                                   interpolated_string_expression
                                                    expression
                                                     non_assignment_expression
                                                      conditional_expression
                                                       null_coalescing_expression
                                                        conditional_or_expression
                                                         conditional_and_expression
                                                          inclusive_or_expression
                                                           exclusive_or_expression
                                                            and_expression
                                                             equality_expression
                                                              relational_expression
                                                               shift_expression
                                                                additive_expression
                                                                 multiplicative_expression
                                                                  switch_expression
                                                                   range_expression
                                                                    unary_expression
                                                                     primary_expression
                                                                      primary_expression_start
                                                                       literal
                                                                        1
                                                    ,
                                                    expression
                                                     non_assignment_expression
                                                      conditional_expression
                                                       null_coalescing_expression
                                                        conditional_or_expression
                                                         conditional_and_expression
                                                          inclusive_or_expression
                                                           exclusive_or_expression
                                                            and_expression
                                                             equality_expression
                                                              relational_expression
                                                               shift_expression
                                                                additive_expression
                                                                 multiplicative_expression
                                                                  switch_expression
                                                                   range_expression
                                                                    unary_expression
                                                                     -
                                                                     unary_expression
                                                                      primary_expression
                                                                       primary_expression_start
                                                                        literal
                                                                         2
                                                    :
                                                    d
                                                  "
                         ;
                      }
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     non_assignment_expression
                      conditional_expression
                       null_coalescing_expression
                        conditional_or_expression
                         conditional_and_expression
                          inclusive_or_expression
                           exclusive_or_expression
                            and_expression
                             equality_expression
                              relational_expression
                               shift_expression
                                additive_expression
                                 multiplicative_expression
                                  switch_expression
                                   range_expression
                                    unary_expression
                                     primary_expression
                                      primary_expression_start
                                       identifier
                                        Console
                                      member_access
                                       .
                                       identifier
                                        WriteLine
                                      method_invocation
                                       (
                                       argument_list
                                        argument
                                         expression
                                          non_assignment_expression
                                           conditional_expression
                                            null_coalescing_expression
                                             conditional_or_expression
                                              conditional_and_expression
                                               inclusive_or_expression
                                                exclusive_or_expression
                                                 and_expression
                                                  equality_expression
                                                   relational_expression
                                                    shift_expression
                                                     additive_expression
                                                      multiplicative_expression
                                                       switch_expression
                                                        range_expression
                                                         unary_expression
                                                          primary_expression
                                                           primary_expression_start
                                                            identifier
                                                             export
                                                           member_access
                                                            .
                                                            identifier
                                                             iefSupplied
                                                           member_access
                                                            .
                                                            identifier
                                                             command
                                       )
                    ;
                 statement
                  declarationStatement
                   local_constant_declaration
                    const
                    type_
                     base_type
                      simple_type
                       numeric_type
                        integral_type
                         int
                     ?
                    constant_declarators
                     constant_declarator
                      identifier
                       local
                      =
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         predefined_type
                                          int
                                        member_access
                                         .
                                         identifier
                                          MaxValue
                   ;
                 statement
                  declarationStatement
                   local_constant_declaration
                    const
                    type_
                     base_type
                      class_type
                       namespace_or_type_name
                        identifier
                         Guid
                     ?
                    constant_declarators
                     constant_declarator
                      identifier
                       local0
                      =
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         new
                                         type_
                                          base_type
                                           class_type
                                            namespace_or_type_name
                                             identifier
                                              Guid
                                         object_creation_expression
                                          (
                                          argument_list
                                           argument
                                            expression
                                             non_assignment_expression
                                              conditional_expression
                                               null_coalescing_expression
                                                conditional_or_expression
                                                 conditional_and_expression
                                                  inclusive_or_expression
                                                   exclusive_or_expression
                                                    and_expression
                                                     equality_expression
                                                      relational_expression
                                                       shift_expression
                                                        additive_expression
                                                         multiplicative_expression
                                                          switch_expression
                                                           range_expression
                                                            unary_expression
                                                             primary_expression
                                                              primary_expression_start
                                                               identifier
                                                                r
                                                              member_access
                                                               .
                                                               identifier
                                                                ToString
                                                              method_invocation
                                                               (
                                                               )
                                          )
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      привет
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          local
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      мир
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          local
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       simple_type
                        numeric_type
                         integral_type
                          int
                    local_variable_declarator
                     identifier
                      local3
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          0
                    ,
                    local_variable_declarator
                     identifier
                      local4
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          1
                   ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     assignment
                      unary_expression
                       primary_expression
                        primary_expression_start
                         identifier
                          local3
                      assignment_operator
                       =
                      expression
                       assignment
                        unary_expression
                         primary_expression
                          primary_expression_start
                           identifier
                            local4
                        assignment_operator
                         =
                        expression
                         non_assignment_expression
                          conditional_expression
                           null_coalescing_expression
                            conditional_or_expression
                             conditional_and_expression
                              inclusive_or_expression
                               exclusive_or_expression
                                and_expression
                                 equality_expression
                                  relational_expression
                                   shift_expression
                                    additive_expression
                                     multiplicative_expression
                                      switch_expression
                                       range_expression
                                        unary_expression
                                         primary_expression
                                          primary_expression_start
                                           literal
                                            1
                    ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      local5
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          null
                                 as
                                 type_
                                  base_type
                                   class_type
                                    namespace_or_type_name
                                     identifier
                                      Action
                          ??
                          null_coalescing_expression
                           conditional_or_expression
                            conditional_and_expression
                             inclusive_or_expression
                              exclusive_or_expression
                               and_expression
                                equality_expression
                                 relational_expression
                                  shift_expression
                                   additive_expression
                                    multiplicative_expression
                                     switch_expression
                                      range_expression
                                       unary_expression
                                        primary_expression
                                         primary_expression_start
                                          literal
                                           null
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      local6
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          local5
                                 is
                                 isType
                                  base_type
                                   class_type
                                    namespace_or_type_name
                                     identifier
                                      Action
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      u
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          1u
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      U
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          1U
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       simple_type
                        numeric_type
                         integral_type
                          long
                    local_variable_declarator
                     identifier
                      hex
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          0xBADC0DE
                    ,
                    local_variable_declarator
                     identifier
                      Hex
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          0XDEADBEEF
                    ,
                    local_variable_declarator
                     identifier
                      l
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       -
                                       unary_expression
                                        primary_expression
                                         primary_expression_start
                                          literal
                                           1L
                    ,
                    local_variable_declarator
                     identifier
                      L
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          1L
                    ,
                    local_variable_declarator
                     identifier
                      l2
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          2l
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       simple_type
                        numeric_type
                         integral_type
                          ulong
                    local_variable_declarator
                     identifier
                      ul
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          1ul
                    ,
                    local_variable_declarator
                     identifier
                      Ul
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          1Ul
                    ,
                    local_variable_declarator
                     identifier
                      uL
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          1uL
                    ,
                    local_variable_declarator
                     identifier
                      UL
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          1UL
                    ,
                    local_variable_declarator
                     identifier
                      lu
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          1lu
                    ,
                    local_variable_declarator
                     identifier
                      Lu
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          1Lu
                    ,
                    local_variable_declarator
                     identifier
                      lU
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          1lU
                    ,
                    local_variable_declarator
                     identifier
                      LU
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          1LU
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       simple_type
                        numeric_type
                         integral_type
                          int
                    local_variable_declarator
                     identifier
                      minInt32Value
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       -
                                       unary_expression
                                        primary_expression
                                         primary_expression_start
                                          literal
                                           2147483648
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       simple_type
                        numeric_type
                         integral_type
                          int
                    local_variable_declarator
                     identifier
                      minInt64Value
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       -
                                       unary_expression
                                        primary_expression
                                         primary_expression_start
                                          literal
                                           9223372036854775808L
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       simple_type
                        bool
                    local_variable_declarator
                     identifier
                      @bool
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       simple_type
                        numeric_type
                         integral_type
                          byte
                    local_variable_declarator
                     identifier
                      @byte
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       simple_type
                        numeric_type
                         integral_type
                          char
                    local_variable_declarator
                     identifier
                      @char
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          'c'
                    ,
                    local_variable_declarator
                     identifier
                      \u0066
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          '\u0066'
                    ,
                    local_variable_declarator
                     identifier
                      hexchar
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          '\x0130'
                    ,
                    local_variable_declarator
                     identifier
                      hexchar2
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       cast_expression
                                        (
                                        type_
                                         base_type
                                          simple_type
                                           numeric_type
                                            integral_type
                                             char
                                        )
                                        unary_expression
                                         primary_expression
                                          primary_expression_start
                                           literal
                                            0xBAD
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       class_type
                        string
                    local_variable_declarator
                     identifier
                      \U00000065
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          string_literal
                                           "\U00000065"
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       simple_type
                        numeric_type
                         decimal
                    local_variable_declarator
                     identifier
                      @decimal
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          1.44M
                   ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     assignment
                      unary_expression
                       primary_expression
                        primary_expression_start
                         identifier
                          @decimal
                      assignment_operator
                       =
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          1.2m
                    ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       class_type
                        namespace_or_type_name
                         identifier
                          dynamic
                    local_variable_declarator
                     identifier
                      @dynamic
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       simple_type
                        numeric_type
                         floating_point_type
                          double
                    local_variable_declarator
                     identifier
                      @double
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          M
                                        member_access
                                         .
                                         identifier
                                          PI
                   ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     assignment
                      unary_expression
                       primary_expression
                        primary_expression_start
                         identifier
                          @double
                      assignment_operator
                       =
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          1d
                    ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     assignment
                      unary_expression
                       primary_expression
                        primary_expression_start
                         identifier
                          @double
                      assignment_operator
                       =
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          1D
                    ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     assignment
                      unary_expression
                       primary_expression
                        primary_expression_start
                         identifier
                          @double
                      assignment_operator
                       =
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       -
                                       unary_expression
                                        primary_expression
                                         primary_expression_start
                                          literal
                                           1.2e3
                    ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       simple_type
                        numeric_type
                         floating_point_type
                          float
                    local_variable_declarator
                     identifier
                      @float
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          1.2f
                   ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     assignment
                      unary_expression
                       primary_expression
                        primary_expression_start
                         identifier
                          @float
                      assignment_operator
                       =
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          1.44F
                    ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       simple_type
                        numeric_type
                         integral_type
                          int
                    local_variable_declarator
                     identifier
                      @int
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          local
                          ??
                          null_coalescing_expression
                           conditional_or_expression
                            conditional_and_expression
                             inclusive_or_expression
                              exclusive_or_expression
                               and_expression
                                equality_expression
                                 relational_expression
                                  shift_expression
                                   additive_expression
                                    multiplicative_expression
                                     switch_expression
                                      range_expression
                                       unary_expression
                                        -
                                        unary_expression
                                         primary_expression
                                          primary_expression_start
                                           literal
                                            1
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       simple_type
                        numeric_type
                         integral_type
                          long
                    local_variable_declarator
                     identifier
                      @long
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       class_type
                        object
                    local_variable_declarator
                     identifier
                      @object
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       simple_type
                        numeric_type
                         integral_type
                          sbyte
                    local_variable_declarator
                     identifier
                      @sbyte
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       simple_type
                        numeric_type
                         integral_type
                          short
                    local_variable_declarator
                     identifier
                      @short
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       class_type
                        string
                    local_variable_declarator
                     identifier
                      @string
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          string_literal
                                           @"""/*"
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       simple_type
                        numeric_type
                         integral_type
                          uint
                    local_variable_declarator
                     identifier
                      @uint
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       simple_type
                        numeric_type
                         integral_type
                          ulong
                    local_variable_declarator
                     identifier
                      @ulong
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       simple_type
                        numeric_type
                         integral_type
                          ushort
                    local_variable_declarator
                     identifier
                      @ushort
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       class_type
                        namespace_or_type_name
                         identifier
                          dynamic
                    local_variable_declarator
                     identifier
                      dynamic
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          local5
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      add
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          0
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      alias
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          0
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      arglist
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          0
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      ascending
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          0
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      async
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          0
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      await
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          0
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      by
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          0
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      descending
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          0
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      dynamic
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          0
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      equals
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          0
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      from
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          0
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      get
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          0
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      group
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          0
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      into
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          0
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      join
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          0
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      let
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          0
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      nameof
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          0
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      on
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          0
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      orderby
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          0
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      partial
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          0
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      remove
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          0
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      select
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          0
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      set
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          0
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      var
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          0
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      when
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          0
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      where
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          0
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      yield
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          0
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      __
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          0
                   ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     assignment
                      unary_expression
                       primary_expression
                        primary_expression_start
                         identifier
                          where
                      assignment_operator
                       =
                      expression
                       assignment
                        unary_expression
                         primary_expression
                          primary_expression_start
                           identifier
                            yield
                        assignment_operator
                         =
                        expression
                         non_assignment_expression
                          conditional_expression
                           null_coalescing_expression
                            conditional_or_expression
                             conditional_and_expression
                              inclusive_or_expression
                               exclusive_or_expression
                                and_expression
                                 equality_expression
                                  relational_expression
                                   shift_expression
                                    additive_expression
                                     multiplicative_expression
                                      switch_expression
                                       range_expression
                                        unary_expression
                                         primary_expression
                                          primary_expression_start
                                           literal
                                            0
                    ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    if
                    (
                    expression
                     non_assignment_expression
                      conditional_expression
                       null_coalescing_expression
                        conditional_or_expression
                         conditional_and_expression
                          inclusive_or_expression
                           exclusive_or_expression
                            and_expression
                             equality_expression
                              relational_expression
                               shift_expression
                                additive_expression
                                 multiplicative_expression
                                  switch_expression
                                   range_expression
                                    unary_expression
                                     primary_expression
                                      primary_expression_start
                                       identifier
                                        i
                               >
                               shift_expression
                                additive_expression
                                 multiplicative_expression
                                  switch_expression
                                   range_expression
                                    unary_expression
                                     primary_expression
                                      primary_expression_start
                                       literal
                                        0
                    )
                    if_body
                     block
                      {
                      statement_list
                       statement
                        embedded_statement
                         simple_embedded_statement
                          return
                          ;
                      }
                    else
                    if_body
                     simple_embedded_statement
                      if
                      (
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          i
                                ==
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          0
                      )
                      if_body
                       block
                        {
                        statement_list
                         statement
                          embedded_statement
                           simple_embedded_statement
                            throw
                            expression
                             non_assignment_expression
                              conditional_expression
                               null_coalescing_expression
                                conditional_or_expression
                                 conditional_and_expression
                                  inclusive_or_expression
                                   exclusive_or_expression
                                    and_expression
                                     equality_expression
                                      relational_expression
                                       shift_expression
                                        additive_expression
                                         multiplicative_expression
                                          switch_expression
                                           range_expression
                                            unary_expression
                                             primary_expression
                                              primary_expression_start
                                               new
                                               type_
                                                base_type
                                                 class_type
                                                  namespace_or_type_name
                                                   identifier
                                                    Exception
                                               object_creation_expression
                                                (
                                                )
                            ;
                        }
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      o1
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         new
                                         type_
                                          base_type
                                           class_type
                                            namespace_or_type_name
                                             identifier
                                              MyObject
                                         object_creation_expression
                                          (
                                          )
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      o2
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         new
                                         type_
                                          base_type
                                           class_type
                                            namespace_or_type_name
                                             identifier
                                              MyObject
                                         object_creation_expression
                                          (
                                          argument_list
                                           argument
                                            expression
                                             non_assignment_expression
                                              conditional_expression
                                               null_coalescing_expression
                                                conditional_or_expression
                                                 conditional_and_expression
                                                  inclusive_or_expression
                                                   exclusive_or_expression
                                                    and_expression
                                                     equality_expression
                                                      relational_expression
                                                       shift_expression
                                                        additive_expression
                                                         multiplicative_expression
                                                          switch_expression
                                                           range_expression
                                                            unary_expression
                                                             primary_expression
                                                              primary_expression_start
                                                               identifier
                                                                var
                                          )
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      o3
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         new
                                         type_
                                          base_type
                                           class_type
                                            namespace_or_type_name
                                             identifier
                                              MyObject
                                         object_or_collection_initializer
                                          object_initializer
                                           {
                                           member_initializer_list
                                            member_initializer
                                             identifier
                                              A
                                             =
                                             initializer_value
                                              expression
                                               non_assignment_expression
                                                conditional_expression
                                                 null_coalescing_expression
                                                  conditional_or_expression
                                                   conditional_and_expression
                                                    inclusive_or_expression
                                                     exclusive_or_expression
                                                      and_expression
                                                       equality_expression
                                                        relational_expression
                                                         shift_expression
                                                          additive_expression
                                                           multiplicative_expression
                                                            switch_expression
                                                             range_expression
                                                              unary_expression
                                                               primary_expression
                                                                primary_expression_start
                                                                 identifier
                                                                  i
                                           }
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      o4
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         new
                                         type_
                                          base_type
                                           class_type
                                            namespace_or_type_name
                                             identifier
                                              MyObject
                                         object_creation_expression
                                          (
                                          argument_list
                                           argument
                                            expression
                                             non_assignment_expression
                                              conditional_expression
                                               null_coalescing_expression
                                                conditional_or_expression
                                                 conditional_and_expression
                                                  inclusive_or_expression
                                                   exclusive_or_expression
                                                    and_expression
                                                     equality_expression
                                                      relational_expression
                                                       shift_expression
                                                        additive_expression
                                                         multiplicative_expression
                                                          switch_expression
                                                           range_expression
                                                            unary_expression
                                                             primary_expression
                                                              primary_expression_start
                                                               identifier
                                                                @dynamic
                                          )
                                          object_or_collection_initializer
                                           object_initializer
                                            {
                                            member_initializer_list
                                             member_initializer
                                              identifier
                                               A
                                              =
                                              initializer_value
                                               expression
                                                non_assignment_expression
                                                 conditional_expression
                                                  null_coalescing_expression
                                                   conditional_or_expression
                                                    conditional_and_expression
                                                     inclusive_or_expression
                                                      exclusive_or_expression
                                                       and_expression
                                                        equality_expression
                                                         relational_expression
                                                          shift_expression
                                                           additive_expression
                                                            multiplicative_expression
                                                             switch_expression
                                                              range_expression
                                                               unary_expression
                                                                primary_expression
                                                                 primary_expression_start
                                                                  literal
                                                                   0
                                             ,
                                             member_initializer
                                              identifier
                                               B
                                              =
                                              initializer_value
                                               expression
                                                non_assignment_expression
                                                 conditional_expression
                                                  null_coalescing_expression
                                                   conditional_or_expression
                                                    conditional_and_expression
                                                     inclusive_or_expression
                                                      exclusive_or_expression
                                                       and_expression
                                                        equality_expression
                                                         relational_expression
                                                          shift_expression
                                                           additive_expression
                                                            multiplicative_expression
                                                             switch_expression
                                                              range_expression
                                                               unary_expression
                                                                primary_expression
                                                                 primary_expression_start
                                                                  literal
                                                                   0
                                             ,
                                             member_initializer
                                              identifier
                                               C
                                              =
                                              initializer_value
                                               expression
                                                non_assignment_expression
                                                 conditional_expression
                                                  null_coalescing_expression
                                                   conditional_or_expression
                                                    conditional_and_expression
                                                     inclusive_or_expression
                                                      exclusive_or_expression
                                                       and_expression
                                                        equality_expression
                                                         relational_expression
                                                          shift_expression
                                                           additive_expression
                                                            multiplicative_expression
                                                             switch_expression
                                                              range_expression
                                                               unary_expression
                                                                primary_expression
                                                                 primary_expression_start
                                                                  literal
                                                                   0
                                            }
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      o5
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         new
                                         anonymous_object_initializer
                                          {
                                          member_declarator_list
                                           member_declarator
                                            identifier
                                             A
                                            =
                                            expression
                                             non_assignment_expression
                                              conditional_expression
                                               null_coalescing_expression
                                                conditional_or_expression
                                                 conditional_and_expression
                                                  inclusive_or_expression
                                                   exclusive_or_expression
                                                    and_expression
                                                     equality_expression
                                                      relational_expression
                                                       shift_expression
                                                        additive_expression
                                                         multiplicative_expression
                                                          switch_expression
                                                           range_expression
                                                            unary_expression
                                                             primary_expression
                                                              primary_expression_start
                                                               literal
                                                                0
                                          }
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      dictionaryInitializer
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         new
                                         type_
                                          base_type
                                           class_type
                                            namespace_or_type_name
                                             identifier
                                              Dictionary
                                             type_argument_list
                                              <
                                              type_
                                               base_type
                                                simple_type
                                                 numeric_type
                                                  integral_type
                                                   int
                                              ,
                                              type_
                                               base_type
                                                class_type
                                                 string
                                              >
                                         object_or_collection_initializer
                                          collection_initializer
                                           {
                                           element_initializer
                                            {
                                            expression_list
                                             expression
                                              non_assignment_expression
                                               conditional_expression
                                                null_coalescing_expression
                                                 conditional_or_expression
                                                  conditional_and_expression
                                                   inclusive_or_expression
                                                    exclusive_or_expression
                                                     and_expression
                                                      equality_expression
                                                       relational_expression
                                                        shift_expression
                                                         additive_expression
                                                          multiplicative_expression
                                                           switch_expression
                                                            range_expression
                                                             unary_expression
                                                              primary_expression
                                                               primary_expression_start
                                                                literal
                                                                 1
                                             ,
                                             expression
                                              non_assignment_expression
                                               conditional_expression
                                                null_coalescing_expression
                                                 conditional_or_expression
                                                  conditional_and_expression
                                                   inclusive_or_expression
                                                    exclusive_or_expression
                                                     and_expression
                                                      equality_expression
                                                       relational_expression
                                                        shift_expression
                                                         additive_expression
                                                          multiplicative_expression
                                                           switch_expression
                                                            range_expression
                                                             unary_expression
                                                              primary_expression
                                                               primary_expression_start
                                                                literal
                                                                 string_literal
                                                                  ""
                                            }
                                           ,
                                           element_initializer
                                            {
                                            expression_list
                                             expression
                                              non_assignment_expression
                                               conditional_expression
                                                null_coalescing_expression
                                                 conditional_or_expression
                                                  conditional_and_expression
                                                   inclusive_or_expression
                                                    exclusive_or_expression
                                                     and_expression
                                                      equality_expression
                                                       relational_expression
                                                        shift_expression
                                                         additive_expression
                                                          multiplicative_expression
                                                           switch_expression
                                                            range_expression
                                                             unary_expression
                                                              primary_expression
                                                               primary_expression_start
                                                                literal
                                                                 2
                                             ,
                                             expression
                                              non_assignment_expression
                                               conditional_expression
                                                null_coalescing_expression
                                                 conditional_or_expression
                                                  conditional_and_expression
                                                   inclusive_or_expression
                                                    exclusive_or_expression
                                                     and_expression
                                                      equality_expression
                                                       relational_expression
                                                        shift_expression
                                                         additive_expression
                                                          multiplicative_expression
                                                           switch_expression
                                                            range_expression
                                                             unary_expression
                                                              primary_expression
                                                               primary_expression_start
                                                                literal
                                                                 string_literal
                                                                  "a"
                                            }
                                           }
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       simple_type
                        numeric_type
                         floating_point_type
                          float
                      rank_specifier
                       [
                       ]
                    local_variable_declarator
                     identifier
                      a
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         new
                                         type_
                                          base_type
                                           simple_type
                                            numeric_type
                                             floating_point_type
                                              float
                                          rank_specifier
                                           [
                                           ]
                                         object_or_collection_initializer
                                          collection_initializer
                                           {
                                           element_initializer
                                            non_assignment_expression
                                             conditional_expression
                                              null_coalescing_expression
                                               conditional_or_expression
                                                conditional_and_expression
                                                 inclusive_or_expression
                                                  exclusive_or_expression
                                                   and_expression
                                                    equality_expression
                                                     relational_expression
                                                      shift_expression
                                                       additive_expression
                                                        multiplicative_expression
                                                         switch_expression
                                                          range_expression
                                                           unary_expression
                                                            primary_expression
                                                             primary_expression_start
                                                              literal
                                                               0f
                                           ,
                                           element_initializer
                                            non_assignment_expression
                                             conditional_expression
                                              null_coalescing_expression
                                               conditional_or_expression
                                                conditional_and_expression
                                                 inclusive_or_expression
                                                  exclusive_or_expression
                                                   and_expression
                                                    equality_expression
                                                     relational_expression
                                                      shift_expression
                                                       additive_expression
                                                        multiplicative_expression
                                                         switch_expression
                                                          range_expression
                                                           unary_expression
                                                            primary_expression
                                                             primary_expression_start
                                                              literal
                                                               1.1f
                                           }
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       simple_type
                        numeric_type
                         integral_type
                          int
                      rank_specifier
                       [
                       ,
                       ,
                       ]
                    local_variable_declarator
                     identifier
                      cube
                     =
                     local_variable_initializer
                      array_initializer
                       {
                       variable_initializer
                        array_initializer
                         {
                         variable_initializer
                          array_initializer
                           {
                           variable_initializer
                            expression
                             non_assignment_expression
                              conditional_expression
                               null_coalescing_expression
                                conditional_or_expression
                                 conditional_and_expression
                                  inclusive_or_expression
                                   exclusive_or_expression
                                    and_expression
                                     equality_expression
                                      relational_expression
                                       shift_expression
                                        additive_expression
                                         multiplicative_expression
                                          switch_expression
                                           range_expression
                                            unary_expression
                                             primary_expression
                                              primary_expression_start
                                               literal
                                                111
                           ,
                           variable_initializer
                            expression
                             non_assignment_expression
                              conditional_expression
                               null_coalescing_expression
                                conditional_or_expression
                                 conditional_and_expression
                                  inclusive_or_expression
                                   exclusive_or_expression
                                    and_expression
                                     equality_expression
                                      relational_expression
                                       shift_expression
                                        additive_expression
                                         multiplicative_expression
                                          switch_expression
                                           range_expression
                                            unary_expression
                                             primary_expression
                                              primary_expression_start
                                               literal
                                                112
                           ,
                           }
                         ,
                         variable_initializer
                          array_initializer
                           {
                           variable_initializer
                            expression
                             non_assignment_expression
                              conditional_expression
                               null_coalescing_expression
                                conditional_or_expression
                                 conditional_and_expression
                                  inclusive_or_expression
                                   exclusive_or_expression
                                    and_expression
                                     equality_expression
                                      relational_expression
                                       shift_expression
                                        additive_expression
                                         multiplicative_expression
                                          switch_expression
                                           range_expression
                                            unary_expression
                                             primary_expression
                                              primary_expression_start
                                               literal
                                                121
                           ,
                           variable_initializer
                            expression
                             non_assignment_expression
                              conditional_expression
                               null_coalescing_expression
                                conditional_or_expression
                                 conditional_and_expression
                                  inclusive_or_expression
                                   exclusive_or_expression
                                    and_expression
                                     equality_expression
                                      relational_expression
                                       shift_expression
                                        additive_expression
                                         multiplicative_expression
                                          switch_expression
                                           range_expression
                                            unary_expression
                                             primary_expression
                                              primary_expression_start
                                               literal
                                                122
                           }
                         }
                       ,
                       variable_initializer
                        array_initializer
                         {
                         variable_initializer
                          array_initializer
                           {
                           variable_initializer
                            expression
                             non_assignment_expression
                              conditional_expression
                               null_coalescing_expression
                                conditional_or_expression
                                 conditional_and_expression
                                  inclusive_or_expression
                                   exclusive_or_expression
                                    and_expression
                                     equality_expression
                                      relational_expression
                                       shift_expression
                                        additive_expression
                                         multiplicative_expression
                                          switch_expression
                                           range_expression
                                            unary_expression
                                             primary_expression
                                              primary_expression_start
                                               literal
                                                211
                           ,
                           variable_initializer
                            expression
                             non_assignment_expression
                              conditional_expression
                               null_coalescing_expression
                                conditional_or_expression
                                 conditional_and_expression
                                  inclusive_or_expression
                                   exclusive_or_expression
                                    and_expression
                                     equality_expression
                                      relational_expression
                                       shift_expression
                                        additive_expression
                                         multiplicative_expression
                                          switch_expression
                                           range_expression
                                            unary_expression
                                             primary_expression
                                              primary_expression_start
                                               literal
                                                212
                           }
                         ,
                         variable_initializer
                          array_initializer
                           {
                           variable_initializer
                            expression
                             non_assignment_expression
                              conditional_expression
                               null_coalescing_expression
                                conditional_or_expression
                                 conditional_and_expression
                                  inclusive_or_expression
                                   exclusive_or_expression
                                    and_expression
                                     equality_expression
                                      relational_expression
                                       shift_expression
                                        additive_expression
                                         multiplicative_expression
                                          switch_expression
                                           range_expression
                                            unary_expression
                                             primary_expression
                                              primary_expression_start
                                               literal
                                                221
                           ,
                           variable_initializer
                            expression
                             non_assignment_expression
                              conditional_expression
                               null_coalescing_expression
                                conditional_or_expression
                                 conditional_and_expression
                                  inclusive_or_expression
                                   exclusive_or_expression
                                    and_expression
                                     equality_expression
                                      relational_expression
                                       shift_expression
                                        additive_expression
                                         multiplicative_expression
                                          switch_expression
                                           range_expression
                                            unary_expression
                                             primary_expression
                                              primary_expression_start
                                               literal
                                                222
                           }
                         }
                       }
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       simple_type
                        numeric_type
                         integral_type
                          int
                      rank_specifier
                       [
                       ]
                      rank_specifier
                       [
                       ]
                    local_variable_declarator
                     identifier
                      jagged
                     =
                     local_variable_initializer
                      array_initializer
                       {
                       variable_initializer
                        array_initializer
                         {
                         variable_initializer
                          expression
                           non_assignment_expression
                            conditional_expression
                             null_coalescing_expression
                              conditional_or_expression
                               conditional_and_expression
                                inclusive_or_expression
                                 exclusive_or_expression
                                  and_expression
                                   equality_expression
                                    relational_expression
                                     shift_expression
                                      additive_expression
                                       multiplicative_expression
                                        switch_expression
                                         range_expression
                                          unary_expression
                                           primary_expression
                                            primary_expression_start
                                             literal
                                              111
                         }
                       ,
                       variable_initializer
                        array_initializer
                         {
                         variable_initializer
                          expression
                           non_assignment_expression
                            conditional_expression
                             null_coalescing_expression
                              conditional_or_expression
                               conditional_and_expression
                                inclusive_or_expression
                                 exclusive_or_expression
                                  and_expression
                                   equality_expression
                                    relational_expression
                                     shift_expression
                                      additive_expression
                                       multiplicative_expression
                                        switch_expression
                                         range_expression
                                          unary_expression
                                           primary_expression
                                            primary_expression_start
                                             literal
                                              121
                         ,
                         variable_initializer
                          expression
                           non_assignment_expression
                            conditional_expression
                             null_coalescing_expression
                              conditional_or_expression
                               conditional_and_expression
                                inclusive_or_expression
                                 exclusive_or_expression
                                  and_expression
                                   equality_expression
                                    relational_expression
                                     shift_expression
                                      additive_expression
                                       multiplicative_expression
                                        switch_expression
                                         range_expression
                                          unary_expression
                                           primary_expression
                                            primary_expression_start
                                             literal
                                              122
                         }
                       }
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       simple_type
                        numeric_type
                         integral_type
                          int
                      rank_specifier
                       [
                       ]
                      rank_specifier
                       [
                       ,
                       ]
                    local_variable_declarator
                     identifier
                      arr
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         new
                                         type_
                                          base_type
                                           simple_type
                                            numeric_type
                                             integral_type
                                              int
                                         [
                                         expression_list
                                          expression
                                           non_assignment_expression
                                            conditional_expression
                                             null_coalescing_expression
                                              conditional_or_expression
                                               conditional_and_expression
                                                inclusive_or_expression
                                                 exclusive_or_expression
                                                  and_expression
                                                   equality_expression
                                                    relational_expression
                                                     shift_expression
                                                      additive_expression
                                                       multiplicative_expression
                                                        switch_expression
                                                         range_expression
                                                          unary_expression
                                                           primary_expression
                                                            primary_expression_start
                                                             literal
                                                              5
                                         ]
                                         rank_specifier
                                          [
                                          ,
                                          ]
                   ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     assignment
                      unary_expression
                       primary_expression
                        primary_expression_start
                         identifier
                          arr
                        bracket_expression
                         [
                         indexer_argument
                          expression
                           non_assignment_expression
                            conditional_expression
                             null_coalescing_expression
                              conditional_or_expression
                               conditional_and_expression
                                inclusive_or_expression
                                 exclusive_or_expression
                                  and_expression
                                   equality_expression
                                    relational_expression
                                     shift_expression
                                      additive_expression
                                       multiplicative_expression
                                        switch_expression
                                         range_expression
                                          unary_expression
                                           primary_expression
                                            primary_expression_start
                                             literal
                                              0
                         ]
                      assignment_operator
                       =
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         new
                                         type_
                                          base_type
                                           simple_type
                                            numeric_type
                                             integral_type
                                              int
                                         [
                                         expression_list
                                          expression
                                           non_assignment_expression
                                            conditional_expression
                                             null_coalescing_expression
                                              conditional_or_expression
                                               conditional_and_expression
                                                inclusive_or_expression
                                                 exclusive_or_expression
                                                  and_expression
                                                   equality_expression
                                                    relational_expression
                                                     shift_expression
                                                      additive_expression
                                                       multiplicative_expression
                                                        switch_expression
                                                         range_expression
                                                          unary_expression
                                                           primary_expression
                                                            primary_expression_start
                                                             literal
                                                              5
                                          ,
                                          expression
                                           non_assignment_expression
                                            conditional_expression
                                             null_coalescing_expression
                                              conditional_or_expression
                                               conditional_and_expression
                                                inclusive_or_expression
                                                 exclusive_or_expression
                                                  and_expression
                                                   equality_expression
                                                    relational_expression
                                                     shift_expression
                                                      additive_expression
                                                       multiplicative_expression
                                                        switch_expression
                                                         range_expression
                                                          unary_expression
                                                           primary_expression
                                                            primary_expression_start
                                                             literal
                                                              5
                                         ]
                    ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     assignment
                      unary_expression
                       primary_expression
                        primary_expression_start
                         identifier
                          arr
                        bracket_expression
                         [
                         indexer_argument
                          expression
                           non_assignment_expression
                            conditional_expression
                             null_coalescing_expression
                              conditional_or_expression
                               conditional_and_expression
                                inclusive_or_expression
                                 exclusive_or_expression
                                  and_expression
                                   equality_expression
                                    relational_expression
                                     shift_expression
                                      additive_expression
                                       multiplicative_expression
                                        switch_expression
                                         range_expression
                                          unary_expression
                                           primary_expression
                                            primary_expression_start
                                             literal
                                              0
                         ]
                        bracket_expression
                         [
                         indexer_argument
                          expression
                           non_assignment_expression
                            conditional_expression
                             null_coalescing_expression
                              conditional_or_expression
                               conditional_and_expression
                                inclusive_or_expression
                                 exclusive_or_expression
                                  and_expression
                                   equality_expression
                                    relational_expression
                                     shift_expression
                                      additive_expression
                                       multiplicative_expression
                                        switch_expression
                                         range_expression
                                          unary_expression
                                           primary_expression
                                            primary_expression_start
                                             literal
                                              0
                         ,
                         indexer_argument
                          expression
                           non_assignment_expression
                            conditional_expression
                             null_coalescing_expression
                              conditional_or_expression
                               conditional_and_expression
                                inclusive_or_expression
                                 exclusive_or_expression
                                  and_expression
                                   equality_expression
                                    relational_expression
                                     shift_expression
                                      additive_expression
                                       multiplicative_expression
                                        switch_expression
                                         range_expression
                                          unary_expression
                                           primary_expression
                                            primary_expression_start
                                             literal
                                              0
                         ]
                      assignment_operator
                       =
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          47
                    ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       simple_type
                        numeric_type
                         integral_type
                          int
                      rank_specifier
                       [
                       ]
                    local_variable_declarator
                     identifier
                      arrayTypeInference
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         new
                                         rank_specifier
                                          [
                                          ]
                                         array_initializer
                                          {
                                          variable_initializer
                                           expression
                                            non_assignment_expression
                                             conditional_expression
                                              null_coalescing_expression
                                               conditional_or_expression
                                                conditional_and_expression
                                                 inclusive_or_expression
                                                  exclusive_or_expression
                                                   and_expression
                                                    equality_expression
                                                     relational_expression
                                                      shift_expression
                                                       additive_expression
                                                        multiplicative_expression
                                                         switch_expression
                                                          range_expression
                                                           unary_expression
                                                            primary_expression
                                                             primary_expression_start
                                                              literal
                                                               0
                                          ,
                                          variable_initializer
                                           expression
                                            non_assignment_expression
                                             conditional_expression
                                              null_coalescing_expression
                                               conditional_or_expression
                                                conditional_and_expression
                                                 inclusive_or_expression
                                                  exclusive_or_expression
                                                   and_expression
                                                    equality_expression
                                                     relational_expression
                                                      shift_expression
                                                       additive_expression
                                                        multiplicative_expression
                                                         switch_expression
                                                          range_expression
                                                           unary_expression
                                                            primary_expression
                                                             primary_expression_start
                                                              literal
                                                               1
                                          ,
                                          }
                   ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    switch
                    (
                    expression
                     non_assignment_expression
                      conditional_expression
                       null_coalescing_expression
                        conditional_or_expression
                         conditional_and_expression
                          inclusive_or_expression
                           exclusive_or_expression
                            and_expression
                             equality_expression
                              relational_expression
                               shift_expression
                                additive_expression
                                 multiplicative_expression
                                  switch_expression
                                   range_expression
                                    unary_expression
                                     primary_expression
                                      primary_expression_start
                                       literal
                                        3
                    )
                    {
                    }
                 statement
                  embedded_statement
                   simple_embedded_statement
                    switch
                    (
                    expression
                     non_assignment_expression
                      conditional_expression
                       null_coalescing_expression
                        conditional_or_expression
                         conditional_and_expression
                          inclusive_or_expression
                           exclusive_or_expression
                            and_expression
                             equality_expression
                              relational_expression
                               shift_expression
                                additive_expression
                                 multiplicative_expression
                                  switch_expression
                                   range_expression
                                    unary_expression
                                     primary_expression
                                      primary_expression_start
                                       identifier
                                        i
                    )
                    {
                    switch_section
                     switch_label
                      case
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          0
                      :
                     switch_label
                      case
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          1
                      :
                     statement_list
                      statement
                       embedded_statement
                        block
                         {
                         statement_list
                          statement
                           embedded_statement
                            simple_embedded_statement
                             goto
                             case
                             expression
                              non_assignment_expression
                               conditional_expression
                                null_coalescing_expression
                                 conditional_or_expression
                                  conditional_and_expression
                                   inclusive_or_expression
                                    exclusive_or_expression
                                     and_expression
                                      equality_expression
                                       relational_expression
                                        shift_expression
                                         additive_expression
                                          multiplicative_expression
                                           switch_expression
                                            range_expression
                                             unary_expression
                                              primary_expression
                                               primary_expression_start
                                                literal
                                                 2
                             ;
                         }
                    switch_section
                     switch_label
                      case
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          2
                                   +
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          3
                      :
                     statement_list
                      statement
                       embedded_statement
                        block
                         {
                         statement_list
                          statement
                           embedded_statement
                            simple_embedded_statement
                             goto
                             default
                             ;
                          statement
                           embedded_statement
                            simple_embedded_statement
                             break
                             ;
                         }
                    switch_section
                     switch_label
                      default
                      :
                     statement_list
                      statement
                       embedded_statement
                        block
                         {
                         statement_list
                          statement
                           embedded_statement
                            simple_embedded_statement
                             return
                             ;
                         }
                    }
                 statement
                  embedded_statement
                   simple_embedded_statement
                    while
                    (
                    expression
                     non_assignment_expression
                      conditional_expression
                       null_coalescing_expression
                        conditional_or_expression
                         conditional_and_expression
                          inclusive_or_expression
                           exclusive_or_expression
                            and_expression
                             equality_expression
                              relational_expression
                               shift_expression
                                additive_expression
                                 multiplicative_expression
                                  switch_expression
                                   range_expression
                                    unary_expression
                                     primary_expression
                                      primary_expression_start
                                       identifier
                                        i
                               <
                               shift_expression
                                additive_expression
                                 multiplicative_expression
                                  switch_expression
                                   range_expression
                                    unary_expression
                                     primary_expression
                                      primary_expression_start
                                       literal
                                        10
                    )
                    embedded_statement
                     block
                      {
                      statement_list
                       statement
                        embedded_statement
                         simple_embedded_statement
                          expression
                           non_assignment_expression
                            conditional_expression
                             null_coalescing_expression
                              conditional_or_expression
                               conditional_and_expression
                                inclusive_or_expression
                                 exclusive_or_expression
                                  and_expression
                                   equality_expression
                                    relational_expression
                                     shift_expression
                                      additive_expression
                                       multiplicative_expression
                                        switch_expression
                                         range_expression
                                          unary_expression
                                           ++
                                           unary_expression
                                            primary_expression
                                             primary_expression_start
                                              identifier
                                               i
                          ;
                       statement
                        embedded_statement
                         simple_embedded_statement
                          if
                          (
                          expression
                           non_assignment_expression
                            conditional_expression
                             null_coalescing_expression
                              conditional_or_expression
                               conditional_and_expression
                                inclusive_or_expression
                                 exclusive_or_expression
                                  and_expression
                                   equality_expression
                                    relational_expression
                                     shift_expression
                                      additive_expression
                                       multiplicative_expression
                                        switch_expression
                                         range_expression
                                          unary_expression
                                           primary_expression
                                            primary_expression_start
                                             literal
                                              boolean_literal
                                               true
                          )
                          if_body
                           simple_embedded_statement
                            continue
                            ;
                       statement
                        embedded_statement
                         simple_embedded_statement
                          break
                          ;
                      }
                 statement
                  embedded_statement
                   simple_embedded_statement
                    do
                    embedded_statement
                     block
                      {
                      statement_list
                       statement
                        embedded_statement
                         simple_embedded_statement
                          expression
                           non_assignment_expression
                            conditional_expression
                             null_coalescing_expression
                              conditional_or_expression
                               conditional_and_expression
                                inclusive_or_expression
                                 exclusive_or_expression
                                  and_expression
                                   equality_expression
                                    relational_expression
                                     shift_expression
                                      additive_expression
                                       multiplicative_expression
                                        switch_expression
                                         range_expression
                                          unary_expression
                                           ++
                                           unary_expression
                                            primary_expression
                                             primary_expression_start
                                              identifier
                                               i
                          ;
                       statement
                        embedded_statement
                         simple_embedded_statement
                          if
                          (
                          expression
                           non_assignment_expression
                            conditional_expression
                             null_coalescing_expression
                              conditional_or_expression
                               conditional_and_expression
                                inclusive_or_expression
                                 exclusive_or_expression
                                  and_expression
                                   equality_expression
                                    relational_expression
                                     shift_expression
                                      additive_expression
                                       multiplicative_expression
                                        switch_expression
                                         range_expression
                                          unary_expression
                                           primary_expression
                                            primary_expression_start
                                             literal
                                              boolean_literal
                                               true
                          )
                          if_body
                           simple_embedded_statement
                            continue
                            ;
                       statement
                        embedded_statement
                         simple_embedded_statement
                          break
                          ;
                      }
                    while
                    (
                    expression
                     non_assignment_expression
                      conditional_expression
                       null_coalescing_expression
                        conditional_or_expression
                         conditional_and_expression
                          inclusive_or_expression
                           exclusive_or_expression
                            and_expression
                             equality_expression
                              relational_expression
                               shift_expression
                                additive_expression
                                 multiplicative_expression
                                  switch_expression
                                   range_expression
                                    unary_expression
                                     primary_expression
                                      primary_expression_start
                                       identifier
                                        i
                               <
                               shift_expression
                                additive_expression
                                 multiplicative_expression
                                  switch_expression
                                   range_expression
                                    unary_expression
                                     primary_expression
                                      primary_expression_start
                                       literal
                                        10
                    )
                    ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    for
                    (
                    for_initializer
                     local_variable_declaration
                      local_variable_type
                       type_
                        base_type
                         simple_type
                          numeric_type
                           integral_type
                            int
                      local_variable_declarator
                       identifier
                        j
                       =
                       local_variable_initializer
                        expression
                         non_assignment_expression
                          conditional_expression
                           null_coalescing_expression
                            conditional_or_expression
                             conditional_and_expression
                              inclusive_or_expression
                               exclusive_or_expression
                                and_expression
                                 equality_expression
                                  relational_expression
                                   shift_expression
                                    additive_expression
                                     multiplicative_expression
                                      switch_expression
                                       range_expression
                                        unary_expression
                                         primary_expression
                                          primary_expression_start
                                           literal
                                            0
                    ;
                    expression
                     non_assignment_expression
                      conditional_expression
                       null_coalescing_expression
                        conditional_or_expression
                         conditional_and_expression
                          inclusive_or_expression
                           exclusive_or_expression
                            and_expression
                             equality_expression
                              relational_expression
                               shift_expression
                                additive_expression
                                 multiplicative_expression
                                  switch_expression
                                   range_expression
                                    unary_expression
                                     primary_expression
                                      primary_expression_start
                                       identifier
                                        j
                               <
                               shift_expression
                                additive_expression
                                 multiplicative_expression
                                  switch_expression
                                   range_expression
                                    unary_expression
                                     primary_expression
                                      primary_expression_start
                                       literal
                                        100
                    ;
                    for_iterator
                     expression
                      non_assignment_expression
                       conditional_expression
                        null_coalescing_expression
                         conditional_or_expression
                          conditional_and_expression
                           inclusive_or_expression
                            exclusive_or_expression
                             and_expression
                              equality_expression
                               relational_expression
                                shift_expression
                                 additive_expression
                                  multiplicative_expression
                                   switch_expression
                                    range_expression
                                     unary_expression
                                      ++
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          j
                    )
                    embedded_statement
                     block
                      {
                      statement_list
                       statement
                        embedded_statement
                         simple_embedded_statement
                          for
                          (
                          ;
                          ;
                          )
                          embedded_statement
                           block
                            {
                            statement_list
                             statement
                              embedded_statement
                               simple_embedded_statement
                                for
                                (
                                for_initializer
                                 local_variable_declaration
                                  local_variable_type
                                   type_
                                    base_type
                                     simple_type
                                      numeric_type
                                       integral_type
                                        int
                                  local_variable_declarator
                                   identifier
                                    i
                                   =
                                   local_variable_initializer
                                    expression
                                     non_assignment_expression
                                      conditional_expression
                                       null_coalescing_expression
                                        conditional_or_expression
                                         conditional_and_expression
                                          inclusive_or_expression
                                           exclusive_or_expression
                                            and_expression
                                             equality_expression
                                              relational_expression
                                               shift_expression
                                                additive_expression
                                                 multiplicative_expression
                                                  switch_expression
                                                   range_expression
                                                    unary_expression
                                                     primary_expression
                                                      primary_expression_start
                                                       literal
                                                        0
                                  ,
                                  local_variable_declarator
                                   identifier
                                    j
                                   =
                                   local_variable_initializer
                                    expression
                                     non_assignment_expression
                                      conditional_expression
                                       null_coalescing_expression
                                        conditional_or_expression
                                         conditional_and_expression
                                          inclusive_or_expression
                                           exclusive_or_expression
                                            and_expression
                                             equality_expression
                                              relational_expression
                                               shift_expression
                                                additive_expression
                                                 multiplicative_expression
                                                  switch_expression
                                                   range_expression
                                                    unary_expression
                                                     primary_expression
                                                      primary_expression_start
                                                       literal
                                                        0
                                ;
                                expression
                                 non_assignment_expression
                                  conditional_expression
                                   null_coalescing_expression
                                    conditional_or_expression
                                     conditional_and_expression
                                      inclusive_or_expression
                                       exclusive_or_expression
                                        and_expression
                                         equality_expression
                                          relational_expression
                                           shift_expression
                                            additive_expression
                                             multiplicative_expression
                                              switch_expression
                                               range_expression
                                                unary_expression
                                                 primary_expression
                                                  primary_expression_start
                                                   identifier
                                                    i
                                           <
                                           shift_expression
                                            additive_expression
                                             multiplicative_expression
                                              switch_expression
                                               range_expression
                                                unary_expression
                                                 primary_expression
                                                  primary_expression_start
                                                   identifier
                                                    length
                                ;
                                for_iterator
                                 expression
                                  non_assignment_expression
                                   conditional_expression
                                    null_coalescing_expression
                                     conditional_or_expression
                                      conditional_and_expression
                                       inclusive_or_expression
                                        exclusive_or_expression
                                         and_expression
                                          equality_expression
                                           relational_expression
                                            shift_expression
                                             additive_expression
                                              multiplicative_expression
                                               switch_expression
                                                range_expression
                                                 unary_expression
                                                  primary_expression
                                                   primary_expression_start
                                                    identifier
                                                     i
                                                   ++
                                 ,
                                 expression
                                  non_assignment_expression
                                   conditional_expression
                                    null_coalescing_expression
                                     conditional_or_expression
                                      conditional_and_expression
                                       inclusive_or_expression
                                        exclusive_or_expression
                                         and_expression
                                          equality_expression
                                           relational_expression
                                            shift_expression
                                             additive_expression
                                              multiplicative_expression
                                               switch_expression
                                                range_expression
                                                 unary_expression
                                                  primary_expression
                                                   primary_expression_start
                                                    identifier
                                                     j
                                                   ++
                                )
                                embedded_statement
                                 block
                                  {
                                  }
                             statement
                              embedded_statement
                               simple_embedded_statement
                                if
                                (
                                expression
                                 non_assignment_expression
                                  conditional_expression
                                   null_coalescing_expression
                                    conditional_or_expression
                                     conditional_and_expression
                                      inclusive_or_expression
                                       exclusive_or_expression
                                        and_expression
                                         equality_expression
                                          relational_expression
                                           shift_expression
                                            additive_expression
                                             multiplicative_expression
                                              switch_expression
                                               range_expression
                                                unary_expression
                                                 primary_expression
                                                  primary_expression_start
                                                   literal
                                                    boolean_literal
                                                     true
                                )
                                if_body
                                 simple_embedded_statement
                                  continue
                                  ;
                             statement
                              embedded_statement
                               simple_embedded_statement
                                break
                                ;
                            }
                      }
                 statement
                  labeled_Statement
                   identifier
                    label
                   :
                   statement
                    embedded_statement
                     simple_embedded_statement
                      goto
                      identifier
                       label
                      ;
                 statement
                  labeled_Statement
                   identifier
                    label2
                   :
                   statement
                    embedded_statement
                     simple_embedded_statement
                      ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    foreach
                    (
                    local_variable_type
                     var
                    identifier
                     i
                    in
                    expression
                     non_assignment_expression
                      conditional_expression
                       null_coalescing_expression
                        conditional_or_expression
                         conditional_and_expression
                          inclusive_or_expression
                           exclusive_or_expression
                            and_expression
                             equality_expression
                              relational_expression
                               shift_expression
                                additive_expression
                                 multiplicative_expression
                                  switch_expression
                                   range_expression
                                    unary_expression
                                     primary_expression
                                      primary_expression_start
                                       identifier
                                        Items
                                      method_invocation
                                       (
                                       )
                    )
                    embedded_statement
                     block
                      {
                      statement_list
                       statement
                        embedded_statement
                         simple_embedded_statement
                          if
                          (
                          expression
                           non_assignment_expression
                            conditional_expression
                             null_coalescing_expression
                              conditional_or_expression
                               conditional_and_expression
                                inclusive_or_expression
                                 exclusive_or_expression
                                  and_expression
                                   equality_expression
                                    relational_expression
                                     shift_expression
                                      additive_expression
                                       multiplicative_expression
                                        switch_expression
                                         range_expression
                                          unary_expression
                                           primary_expression
                                            primary_expression_start
                                             identifier
                                              i
                                    ==
                                    relational_expression
                                     shift_expression
                                      additive_expression
                                       multiplicative_expression
                                        switch_expression
                                         range_expression
                                          unary_expression
                                           primary_expression
                                            primary_expression_start
                                             literal
                                              7
                          )
                          if_body
                           simple_embedded_statement
                            return
                            ;
                          else
                          if_body
                           simple_embedded_statement
                            continue
                            ;
                      }
                 statement
                  embedded_statement
                   simple_embedded_statement
                    checked
                    block
                     {
                     statement_list
                      statement
                       embedded_statement
                        simple_embedded_statement
                         expression
                          non_assignment_expression
                           conditional_expression
                            null_coalescing_expression
                             conditional_or_expression
                              conditional_and_expression
                               inclusive_or_expression
                                exclusive_or_expression
                                 and_expression
                                  equality_expression
                                   relational_expression
                                    shift_expression
                                     additive_expression
                                      multiplicative_expression
                                       switch_expression
                                        range_expression
                                         unary_expression
                                          primary_expression
                                           primary_expression_start
                                            checked
                                            (
                                            expression
                                             non_assignment_expression
                                              conditional_expression
                                               null_coalescing_expression
                                                conditional_or_expression
                                                 conditional_and_expression
                                                  inclusive_or_expression
                                                   exclusive_or_expression
                                                    and_expression
                                                     equality_expression
                                                      relational_expression
                                                       shift_expression
                                                        additive_expression
                                                         multiplicative_expression
                                                          switch_expression
                                                           range_expression
                                                            unary_expression
                                                             ++
                                                             unary_expression
                                                              primary_expression
                                                               primary_expression_start
                                                                identifier
                                                                 i
                                            )
                         ;
                     }
                 statement
                  embedded_statement
                   simple_embedded_statement
                    unchecked
                    block
                     {
                     statement_list
                      statement
                       embedded_statement
                        simple_embedded_statement
                         expression
                          non_assignment_expression
                           conditional_expression
                            null_coalescing_expression
                             conditional_or_expression
                              conditional_and_expression
                               inclusive_or_expression
                                exclusive_or_expression
                                 and_expression
                                  equality_expression
                                   relational_expression
                                    shift_expression
                                     additive_expression
                                      multiplicative_expression
                                       switch_expression
                                        range_expression
                                         unary_expression
                                          primary_expression
                                           primary_expression_start
                                            unchecked
                                            (
                                            expression
                                             non_assignment_expression
                                              conditional_expression
                                               null_coalescing_expression
                                                conditional_or_expression
                                                 conditional_and_expression
                                                  inclusive_or_expression
                                                   exclusive_or_expression
                                                    and_expression
                                                     equality_expression
                                                      relational_expression
                                                       shift_expression
                                                        additive_expression
                                                         multiplicative_expression
                                                          switch_expression
                                                           range_expression
                                                            unary_expression
                                                             ++
                                                             unary_expression
                                                              primary_expression
                                                               primary_expression_start
                                                                identifier
                                                                 i
                                            )
                         ;
                     }
                 statement
                  embedded_statement
                   simple_embedded_statement
                    lock
                    (
                    expression
                     non_assignment_expression
                      conditional_expression
                       null_coalescing_expression
                        conditional_or_expression
                         conditional_and_expression
                          inclusive_or_expression
                           exclusive_or_expression
                            and_expression
                             equality_expression
                              relational_expression
                               shift_expression
                                additive_expression
                                 multiplicative_expression
                                  switch_expression
                                   range_expression
                                    unary_expression
                                     primary_expression
                                      primary_expression_start
                                       identifier
                                        sync
                    )
                    embedded_statement
                     simple_embedded_statement
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          process
                                        method_invocation
                                         (
                                         )
                      ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    using
                    (
                    resource_acquisition
                     local_variable_declaration
                      local_variable_type
                       var
                      local_variable_declarator
                       identifier
                        v
                       =
                       local_variable_initializer
                        expression
                         non_assignment_expression
                          conditional_expression
                           null_coalescing_expression
                            conditional_or_expression
                             conditional_and_expression
                              inclusive_or_expression
                               exclusive_or_expression
                                and_expression
                                 equality_expression
                                  relational_expression
                                   shift_expression
                                    additive_expression
                                     multiplicative_expression
                                      switch_expression
                                       range_expression
                                        unary_expression
                                         primary_expression
                                          primary_expression_start
                                           identifier
                                            BeginScope
                                          method_invocation
                                           (
                                           )
                    )
                    embedded_statement
                     simple_embedded_statement
                      using
                      (
                      resource_acquisition
                       local_variable_declaration
                        local_variable_type
                         type_
                          base_type
                           class_type
                            namespace_or_type_name
                             identifier
                              A
                        local_variable_declarator
                         identifier
                          a
                         =
                         local_variable_initializer
                          expression
                           non_assignment_expression
                            conditional_expression
                             null_coalescing_expression
                              conditional_or_expression
                               conditional_and_expression
                                inclusive_or_expression
                                 exclusive_or_expression
                                  and_expression
                                   equality_expression
                                    relational_expression
                                     shift_expression
                                      additive_expression
                                       multiplicative_expression
                                        switch_expression
                                         range_expression
                                          unary_expression
                                           primary_expression
                                            primary_expression_start
                                             new
                                             type_
                                              base_type
                                               class_type
                                                namespace_or_type_name
                                                 identifier
                                                  A
                                             object_creation_expression
                                              (
                                              )
                      )
                      embedded_statement
                       simple_embedded_statement
                        using
                        (
                        resource_acquisition
                         local_variable_declaration
                          local_variable_type
                           type_
                            base_type
                             class_type
                              namespace_or_type_name
                               identifier
                                A
                          local_variable_declarator
                           identifier
                            a
                           =
                           local_variable_initializer
                            expression
                             non_assignment_expression
                              conditional_expression
                               null_coalescing_expression
                                conditional_or_expression
                                 conditional_and_expression
                                  inclusive_or_expression
                                   exclusive_or_expression
                                    and_expression
                                     equality_expression
                                      relational_expression
                                       shift_expression
                                        additive_expression
                                         multiplicative_expression
                                          switch_expression
                                           range_expression
                                            unary_expression
                                             primary_expression
                                              primary_expression_start
                                               new
                                               type_
                                                base_type
                                                 class_type
                                                  namespace_or_type_name
                                                   identifier
                                                    A
                                               object_creation_expression
                                                (
                                                )
                          ,
                          local_variable_declarator
                           identifier
                            b
                           =
                           local_variable_initializer
                            expression
                             non_assignment_expression
                              conditional_expression
                               null_coalescing_expression
                                conditional_or_expression
                                 conditional_and_expression
                                  inclusive_or_expression
                                   exclusive_or_expression
                                    and_expression
                                     equality_expression
                                      relational_expression
                                       shift_expression
                                        additive_expression
                                         multiplicative_expression
                                          switch_expression
                                           range_expression
                                            unary_expression
                                             primary_expression
                                              primary_expression_start
                                               new
                                               type_
                                                base_type
                                                 class_type
                                                  namespace_or_type_name
                                                   identifier
                                                    A
                                               object_creation_expression
                                                (
                                                )
                        )
                        embedded_statement
                         simple_embedded_statement
                          using
                          (
                          resource_acquisition
                           expression
                            non_assignment_expression
                             conditional_expression
                              null_coalescing_expression
                               conditional_or_expression
                                conditional_and_expression
                                 inclusive_or_expression
                                  exclusive_or_expression
                                   and_expression
                                    equality_expression
                                     relational_expression
                                      shift_expression
                                       additive_expression
                                        multiplicative_expression
                                         switch_expression
                                          range_expression
                                           unary_expression
                                            primary_expression
                                             primary_expression_start
                                              identifier
                                               BeginScope
                                             method_invocation
                                              (
                                              )
                          )
                          embedded_statement
                           simple_embedded_statement
                            return
                            ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    yield
                    return
                    expression
                     non_assignment_expression
                      conditional_expression
                       null_coalescing_expression
                        conditional_or_expression
                         conditional_and_expression
                          inclusive_or_expression
                           exclusive_or_expression
                            and_expression
                             equality_expression
                              relational_expression
                               shift_expression
                                additive_expression
                                 multiplicative_expression
                                  switch_expression
                                   range_expression
                                    unary_expression
                                     primary_expression
                                      primary_expression_start
                                       this
                                      member_access
                                       .
                                       identifier
                                        items
                                      bracket_expression
                                       [
                                       indexer_argument
                                        expression
                                         non_assignment_expression
                                          conditional_expression
                                           null_coalescing_expression
                                            conditional_or_expression
                                             conditional_and_expression
                                              inclusive_or_expression
                                               exclusive_or_expression
                                                and_expression
                                                 equality_expression
                                                  relational_expression
                                                   shift_expression
                                                    additive_expression
                                                     multiplicative_expression
                                                      switch_expression
                                                       range_expression
                                                        unary_expression
                                                         primary_expression
                                                          primary_expression_start
                                                           literal
                                                            3
                                       ]
                    ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    yield
                    break
                    ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    fixed
                    (
                    pointer_type
                     simple_type
                      numeric_type
                       integral_type
                        int
                     *
                    fixed_pointer_declarators
                     fixed_pointer_declarator
                      identifier
                       p
                      =
                      fixed_pointer_initializer
                       stackalloc_initializer
                        stackalloc
                        type_
                         base_type
                          simple_type
                           numeric_type
                            integral_type
                             int
                        [
                        expression
                         non_assignment_expression
                          conditional_expression
                           null_coalescing_expression
                            conditional_or_expression
                             conditional_and_expression
                              inclusive_or_expression
                               exclusive_or_expression
                                and_expression
                                 equality_expression
                                  relational_expression
                                   shift_expression
                                    additive_expression
                                     multiplicative_expression
                                      switch_expression
                                       range_expression
                                        unary_expression
                                         primary_expression
                                          primary_expression_start
                                           literal
                                            100
                        ]
                     ,
                     fixed_pointer_declarator
                      identifier
                       q
                      =
                      fixed_pointer_initializer
                       &
                       expression
                        non_assignment_expression
                         conditional_expression
                          null_coalescing_expression
                           conditional_or_expression
                            conditional_and_expression
                             inclusive_or_expression
                              exclusive_or_expression
                               and_expression
                                equality_expression
                                 relational_expression
                                  shift_expression
                                   additive_expression
                                    multiplicative_expression
                                     switch_expression
                                      range_expression
                                       unary_expression
                                        primary_expression
                                         primary_expression_start
                                          identifier
                                           y
                    )
                    embedded_statement
                     block
                      {
                      statement_list
                       statement
                        embedded_statement
                         simple_embedded_statement
                          expression
                           assignment
                            unary_expression
                             *
                             unary_expression
                              primary_expression
                               primary_expression_start
                                identifier
                                 intref
                            assignment_operator
                             =
                            expression
                             non_assignment_expression
                              conditional_expression
                               null_coalescing_expression
                                conditional_or_expression
                                 conditional_and_expression
                                  inclusive_or_expression
                                   exclusive_or_expression
                                    and_expression
                                     equality_expression
                                      relational_expression
                                       shift_expression
                                        additive_expression
                                         multiplicative_expression
                                          switch_expression
                                           range_expression
                                            unary_expression
                                             primary_expression
                                              primary_expression_start
                                               literal
                                                1
                          ;
                      }
                 statement
                  embedded_statement
                   simple_embedded_statement
                    fixed
                    (
                    pointer_type
                     simple_type
                      numeric_type
                       integral_type
                        int
                     *
                    fixed_pointer_declarators
                     fixed_pointer_declarator
                      identifier
                       p
                      =
                      fixed_pointer_initializer
                       stackalloc_initializer
                        stackalloc
                        type_
                         base_type
                          simple_type
                           numeric_type
                            integral_type
                             int
                        [
                        expression
                         non_assignment_expression
                          conditional_expression
                           null_coalescing_expression
                            conditional_or_expression
                             conditional_and_expression
                              inclusive_or_expression
                               exclusive_or_expression
                                and_expression
                                 equality_expression
                                  relational_expression
                                   shift_expression
                                    additive_expression
                                     multiplicative_expression
                                      switch_expression
                                       range_expression
                                        unary_expression
                                         primary_expression
                                          primary_expression_start
                                           literal
                                            100
                        ]
                    )
                    embedded_statement
                     block
                      {
                      statement_list
                       statement
                        embedded_statement
                         simple_embedded_statement
                          expression
                           assignment
                            unary_expression
                             *
                             unary_expression
                              primary_expression
                               primary_expression_start
                                identifier
                                 intref
                            assignment_operator
                             =
                            expression
                             non_assignment_expression
                              conditional_expression
                               null_coalescing_expression
                                conditional_or_expression
                                 conditional_and_expression
                                  inclusive_or_expression
                                   exclusive_or_expression
                                    and_expression
                                     equality_expression
                                      relational_expression
                                       shift_expression
                                        additive_expression
                                         multiplicative_expression
                                          switch_expression
                                           range_expression
                                            unary_expression
                                             primary_expression
                                              primary_expression_start
                                               literal
                                                1
                          ;
                      }
                 statement
                  embedded_statement
                   simple_embedded_statement
                    unsafe
                    block
                     {
                     statement_list
                      statement
                       declarationStatement
                        local_variable_declaration
                         local_variable_type
                          type_
                           base_type
                            simple_type
                             numeric_type
                              integral_type
                               int
                           *
                         local_variable_declarator
                          identifier
                           p
                          =
                          local_variable_initializer
                           expression
                            non_assignment_expression
                             conditional_expression
                              null_coalescing_expression
                               conditional_or_expression
                                conditional_and_expression
                                 inclusive_or_expression
                                  exclusive_or_expression
                                   and_expression
                                    equality_expression
                                     relational_expression
                                      shift_expression
                                       additive_expression
                                        multiplicative_expression
                                         switch_expression
                                          range_expression
                                           unary_expression
                                            primary_expression
                                             primary_expression_start
                                              literal
                                               null
                        ;
                     }
                 statement
                  embedded_statement
                   simple_embedded_statement
                    try
                    block
                     {
                     statement_list
                      statement
                       embedded_statement
                        simple_embedded_statement
                         throw
                         expression
                          non_assignment_expression
                           conditional_expression
                            null_coalescing_expression
                             conditional_or_expression
                              conditional_and_expression
                               inclusive_or_expression
                                exclusive_or_expression
                                 and_expression
                                  equality_expression
                                   relational_expression
                                    shift_expression
                                     additive_expression
                                      multiplicative_expression
                                       switch_expression
                                        range_expression
                                         unary_expression
                                          primary_expression
                                           primary_expression_start
                                            literal
                                             null
                         ;
                     }
                    catch_clauses
                     specific_catch_clause
                      catch
                      (
                      class_type
                       namespace_or_type_name
                        identifier
                         System
                        .
                        identifier
                         AccessViolationException
                      identifier
                       av
                      )
                      block
                       {
                       statement_list
                        statement
                         embedded_statement
                          simple_embedded_statement
                           throw
                           expression
                            non_assignment_expression
                             conditional_expression
                              null_coalescing_expression
                               conditional_or_expression
                                conditional_and_expression
                                 inclusive_or_expression
                                  exclusive_or_expression
                                   and_expression
                                    equality_expression
                                     relational_expression
                                      shift_expression
                                       additive_expression
                                        multiplicative_expression
                                         switch_expression
                                          range_expression
                                           unary_expression
                                            primary_expression
                                             primary_expression_start
                                              identifier
                                               av
                           ;
                       }
                     specific_catch_clause
                      catch
                      (
                      class_type
                       namespace_or_type_name
                        identifier
                         Exception
                      )
                      block
                       {
                       statement_list
                        statement
                         embedded_statement
                          simple_embedded_statement
                           throw
                           ;
                       }
                    finally_clause
                     finally
                     block
                      {
                      statement_list
                       statement
                        embedded_statement
                         simple_embedded_statement
                          try
                          block
                           {
                           }
                          catch_clauses
                           general_catch_clause
                            catch
                            block
                             {
                             }
                      }
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      anonymous
                     =
                     local_variable_initializer
                      array_initializer
                       {
                       variable_initializer
                        expression
                         assignment
                          unary_expression
                           primary_expression
                            primary_expression_start
                             identifier
                              A
                          assignment_operator
                           =
                          expression
                           non_assignment_expression
                            conditional_expression
                             null_coalescing_expression
                              conditional_or_expression
                               conditional_and_expression
                                inclusive_or_expression
                                 exclusive_or_expression
                                  and_expression
                                   equality_expression
                                    relational_expression
                                     shift_expression
                                      additive_expression
                                       multiplicative_expression
                                        switch_expression
                                         range_expression
                                          unary_expression
                                           primary_expression
                                            primary_expression_start
                                             literal
                                              1
                       ,
                       variable_initializer
                        expression
                         assignment
                          unary_expression
                           primary_expression
                            primary_expression_start
                             identifier
                              B
                          assignment_operator
                           =
                          expression
                           non_assignment_expression
                            conditional_expression
                             null_coalescing_expression
                              conditional_or_expression
                               conditional_and_expression
                                inclusive_or_expression
                                 exclusive_or_expression
                                  and_expression
                                   equality_expression
                                    relational_expression
                                     shift_expression
                                      additive_expression
                                       multiplicative_expression
                                        switch_expression
                                         range_expression
                                          unary_expression
                                           primary_expression
                                            primary_expression_start
                                             literal
                                              2
                       ,
                       variable_initializer
                        expression
                         assignment
                          unary_expression
                           primary_expression
                            primary_expression_start
                             identifier
                              C
                          assignment_operator
                           =
                          expression
                           non_assignment_expression
                            conditional_expression
                             null_coalescing_expression
                              conditional_or_expression
                               conditional_and_expression
                                inclusive_or_expression
                                 exclusive_or_expression
                                  and_expression
                                   equality_expression
                                    relational_expression
                                     shift_expression
                                      additive_expression
                                       multiplicative_expression
                                        switch_expression
                                         range_expression
                                          unary_expression
                                           primary_expression
                                            primary_expression_start
                                             literal
                                              3
                       ,
                       }
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      query
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        query_expression
                         from_clause
                          from
                          identifier
                           c
                          in
                          expression
                           non_assignment_expression
                            conditional_expression
                             null_coalescing_expression
                              conditional_or_expression
                               conditional_and_expression
                                inclusive_or_expression
                                 exclusive_or_expression
                                  and_expression
                                   equality_expression
                                    relational_expression
                                     shift_expression
                                      additive_expression
                                       multiplicative_expression
                                        switch_expression
                                         range_expression
                                          unary_expression
                                           primary_expression
                                            primary_expression_start
                                             identifier
                                              customers
                         query_body
                          query_body_clause
                           let_clause
                            let
                            identifier
                             d
                            =
                            expression
                             non_assignment_expression
                              conditional_expression
                               null_coalescing_expression
                                conditional_or_expression
                                 conditional_and_expression
                                  inclusive_or_expression
                                   exclusive_or_expression
                                    and_expression
                                     equality_expression
                                      relational_expression
                                       shift_expression
                                        additive_expression
                                         multiplicative_expression
                                          switch_expression
                                           range_expression
                                            unary_expression
                                             primary_expression
                                              primary_expression_start
                                               identifier
                                                c
                          query_body_clause
                           where_clause
                            where
                            expression
                             non_assignment_expression
                              conditional_expression
                               null_coalescing_expression
                                conditional_or_expression
                                 conditional_and_expression
                                  inclusive_or_expression
                                   exclusive_or_expression
                                    and_expression
                                     equality_expression
                                      relational_expression
                                       shift_expression
                                        additive_expression
                                         multiplicative_expression
                                          switch_expression
                                           range_expression
                                            unary_expression
                                             primary_expression
                                              primary_expression_start
                                               identifier
                                                d
                                      !=
                                      relational_expression
                                       shift_expression
                                        additive_expression
                                         multiplicative_expression
                                          switch_expression
                                           range_expression
                                            unary_expression
                                             primary_expression
                                              primary_expression_start
                                               literal
                                                null
                          query_body_clause
                           combined_join_clause
                            join
                            identifier
                             c1
                            in
                            expression
                             non_assignment_expression
                              conditional_expression
                               null_coalescing_expression
                                conditional_or_expression
                                 conditional_and_expression
                                  inclusive_or_expression
                                   exclusive_or_expression
                                    and_expression
                                     equality_expression
                                      relational_expression
                                       shift_expression
                                        additive_expression
                                         multiplicative_expression
                                          switch_expression
                                           range_expression
                                            unary_expression
                                             primary_expression
                                              primary_expression_start
                                               identifier
                                                customers
                            on
                            expression
                             non_assignment_expression
                              conditional_expression
                               null_coalescing_expression
                                conditional_or_expression
                                 conditional_and_expression
                                  inclusive_or_expression
                                   exclusive_or_expression
                                    and_expression
                                     equality_expression
                                      relational_expression
                                       shift_expression
                                        additive_expression
                                         multiplicative_expression
                                          switch_expression
                                           range_expression
                                            unary_expression
                                             primary_expression
                                              primary_expression_start
                                               identifier
                                                c1
                                              member_access
                                               .
                                               identifier
                                                GetHashCode
                                              method_invocation
                                               (
                                               )
                            equals
                            expression
                             non_assignment_expression
                              conditional_expression
                               null_coalescing_expression
                                conditional_or_expression
                                 conditional_and_expression
                                  inclusive_or_expression
                                   exclusive_or_expression
                                    and_expression
                                     equality_expression
                                      relational_expression
                                       shift_expression
                                        additive_expression
                                         multiplicative_expression
                                          switch_expression
                                           range_expression
                                            unary_expression
                                             primary_expression
                                              primary_expression_start
                                               identifier
                                                c
                                              member_access
                                               .
                                               identifier
                                                GetHashCode
                                              method_invocation
                                               (
                                               )
                          query_body_clause
                           combined_join_clause
                            join
                            identifier
                             c1
                            in
                            expression
                             non_assignment_expression
                              conditional_expression
                               null_coalescing_expression
                                conditional_or_expression
                                 conditional_and_expression
                                  inclusive_or_expression
                                   exclusive_or_expression
                                    and_expression
                                     equality_expression
                                      relational_expression
                                       shift_expression
                                        additive_expression
                                         multiplicative_expression
                                          switch_expression
                                           range_expression
                                            unary_expression
                                             primary_expression
                                              primary_expression_start
                                               identifier
                                                customers
                            on
                            expression
                             non_assignment_expression
                              conditional_expression
                               null_coalescing_expression
                                conditional_or_expression
                                 conditional_and_expression
                                  inclusive_or_expression
                                   exclusive_or_expression
                                    and_expression
                                     equality_expression
                                      relational_expression
                                       shift_expression
                                        additive_expression
                                         multiplicative_expression
                                          switch_expression
                                           range_expression
                                            unary_expression
                                             primary_expression
                                              primary_expression_start
                                               identifier
                                                c1
                                              member_access
                                               .
                                               identifier
                                                GetHashCode
                                              method_invocation
                                               (
                                               )
                            equals
                            expression
                             non_assignment_expression
                              conditional_expression
                               null_coalescing_expression
                                conditional_or_expression
                                 conditional_and_expression
                                  inclusive_or_expression
                                   exclusive_or_expression
                                    and_expression
                                     equality_expression
                                      relational_expression
                                       shift_expression
                                        additive_expression
                                         multiplicative_expression
                                          switch_expression
                                           range_expression
                                            unary_expression
                                             primary_expression
                                              primary_expression_start
                                               identifier
                                                c
                                              member_access
                                               .
                                               identifier
                                                GetHashCode
                                              method_invocation
                                               (
                                               )
                            into
                            identifier
                             e
                          select_or_group_clause
                           group
                           expression
                            non_assignment_expression
                             conditional_expression
                              null_coalescing_expression
                               conditional_or_expression
                                conditional_and_expression
                                 inclusive_or_expression
                                  exclusive_or_expression
                                   and_expression
                                    equality_expression
                                     relational_expression
                                      shift_expression
                                       additive_expression
                                        multiplicative_expression
                                         switch_expression
                                          range_expression
                                           unary_expression
                                            primary_expression
                                             primary_expression_start
                                              identifier
                                               c
                           by
                           expression
                            non_assignment_expression
                             conditional_expression
                              null_coalescing_expression
                               conditional_or_expression
                                conditional_and_expression
                                 inclusive_or_expression
                                  exclusive_or_expression
                                   and_expression
                                    equality_expression
                                     relational_expression
                                      shift_expression
                                       additive_expression
                                        multiplicative_expression
                                         switch_expression
                                          range_expression
                                           unary_expression
                                            primary_expression
                                             primary_expression_start
                                              identifier
                                               c
                                             member_access
                                              .
                                              identifier
                                               Country
                          query_continuation
                           into
                           identifier
                            g
                           query_body
                            query_body_clause
                             orderby_clause
                              orderby
                              ordering
                               expression
                                non_assignment_expression
                                 conditional_expression
                                  null_coalescing_expression
                                   conditional_or_expression
                                    conditional_and_expression
                                     inclusive_or_expression
                                      exclusive_or_expression
                                       and_expression
                                        equality_expression
                                         relational_expression
                                          shift_expression
                                           additive_expression
                                            multiplicative_expression
                                             switch_expression
                                              range_expression
                                               unary_expression
                                                primary_expression
                                                 primary_expression_start
                                                  identifier
                                                   g
                                                 member_access
                                                  .
                                                  identifier
                                                   Count
                                                 method_invocation
                                                  (
                                                  )
                               ascending
                            query_body_clause
                             orderby_clause
                              orderby
                              ordering
                               expression
                                non_assignment_expression
                                 conditional_expression
                                  null_coalescing_expression
                                   conditional_or_expression
                                    conditional_and_expression
                                     inclusive_or_expression
                                      exclusive_or_expression
                                       and_expression
                                        equality_expression
                                         relational_expression
                                          shift_expression
                                           additive_expression
                                            multiplicative_expression
                                             switch_expression
                                              range_expression
                                               unary_expression
                                                primary_expression
                                                 primary_expression_start
                                                  identifier
                                                   g
                                                 member_access
                                                  .
                                                  identifier
                                                   Key
                               descending
                            select_or_group_clause
                             select
                             expression
                              non_assignment_expression
                               conditional_expression
                                null_coalescing_expression
                                 conditional_or_expression
                                  conditional_and_expression
                                   inclusive_or_expression
                                    exclusive_or_expression
                                     and_expression
                                      equality_expression
                                       relational_expression
                                        shift_expression
                                         additive_expression
                                          multiplicative_expression
                                           switch_expression
                                            range_expression
                                             unary_expression
                                              primary_expression
                                               primary_expression_start
                                                new
                                                anonymous_object_initializer
                                                 {
                                                 member_declarator_list
                                                  member_declarator
                                                   identifier
                                                    Country
                                                   =
                                                   expression
                                                    non_assignment_expression
                                                     conditional_expression
                                                      null_coalescing_expression
                                                       conditional_or_expression
                                                        conditional_and_expression
                                                         inclusive_or_expression
                                                          exclusive_or_expression
                                                           and_expression
                                                            equality_expression
                                                             relational_expression
                                                              shift_expression
                                                               additive_expression
                                                                multiplicative_expression
                                                                 switch_expression
                                                                  range_expression
                                                                   unary_expression
                                                                    primary_expression
                                                                     primary_expression_start
                                                                      identifier
                                                                       g
                                                                     member_access
                                                                      .
                                                                      identifier
                                                                       Key
                                                  ,
                                                  member_declarator
                                                   identifier
                                                    CustCount
                                                   =
                                                   expression
                                                    non_assignment_expression
                                                     conditional_expression
                                                      null_coalescing_expression
                                                       conditional_or_expression
                                                        conditional_and_expression
                                                         inclusive_or_expression
                                                          exclusive_or_expression
                                                           and_expression
                                                            equality_expression
                                                             relational_expression
                                                              shift_expression
                                                               additive_expression
                                                                multiplicative_expression
                                                                 switch_expression
                                                                  range_expression
                                                                   unary_expression
                                                                    primary_expression
                                                                     primary_expression_start
                                                                      identifier
                                                                       g
                                                                     member_access
                                                                      .
                                                                      identifier
                                                                       Count
                                                                     method_invocation
                                                                      (
                                                                      )
                                                 }
                   ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     assignment
                      unary_expression
                       primary_expression
                        primary_expression_start
                         identifier
                          query
                      assignment_operator
                       =
                      expression
                       non_assignment_expression
                        query_expression
                         from_clause
                          from
                          identifier
                           c
                          in
                          expression
                           non_assignment_expression
                            conditional_expression
                             null_coalescing_expression
                              conditional_or_expression
                               conditional_and_expression
                                inclusive_or_expression
                                 exclusive_or_expression
                                  and_expression
                                   equality_expression
                                    relational_expression
                                     shift_expression
                                      additive_expression
                                       multiplicative_expression
                                        switch_expression
                                         range_expression
                                          unary_expression
                                           primary_expression
                                            primary_expression_start
                                             identifier
                                              customers
                         query_body
                          select_or_group_clause
                           select
                           expression
                            non_assignment_expression
                             conditional_expression
                              null_coalescing_expression
                               conditional_or_expression
                                conditional_and_expression
                                 inclusive_or_expression
                                  exclusive_or_expression
                                   and_expression
                                    equality_expression
                                     relational_expression
                                      shift_expression
                                       additive_expression
                                        multiplicative_expression
                                         switch_expression
                                          range_expression
                                           unary_expression
                                            primary_expression
                                             primary_expression_start
                                              identifier
                                               c
                          query_continuation
                           into
                           identifier
                            d
                           query_body
                            select_or_group_clause
                             select
                             expression
                              non_assignment_expression
                               conditional_expression
                                null_coalescing_expression
                                 conditional_or_expression
                                  conditional_and_expression
                                   inclusive_or_expression
                                    exclusive_or_expression
                                     and_expression
                                      equality_expression
                                       relational_expression
                                        shift_expression
                                         additive_expression
                                          multiplicative_expression
                                           switch_expression
                                            range_expression
                                             unary_expression
                                              primary_expression
                                               primary_expression_start
                                                identifier
                                                 d
                    ;
                }
           class_member_declaration
            destructor_definition
             ~
             identifier
              A
             (
             )
             body
              block
               {
               }
           class_member_declaration
            all_member_modifiers
             all_member_modifier
              private
             all_member_modifier
              readonly
            common_member_declaration
             typed_member_declaration
              type_
               base_type
                simple_type
                 numeric_type
                  integral_type
                   int
              field_declaration
               variable_declarators
                variable_declarator
                 identifier
                  f1
               ;
           class_member_declaration
            attributes
             attribute_section
              [
              attribute_list
               attribute
                namespace_or_type_name
                 identifier
                  Obsolete
              ]
             attribute_section
              [
              attribute_list
               attribute
                namespace_or_type_name
                 identifier
                  NonExisting
              ]
             attribute_section
              [
              attribute_list
               attribute
                namespace_or_type_name
                 qualified_alias_member
                  identifier
                   Foo
                  ::
                  identifier
                   NonExisting
                (
                attribute_argument
                 expression
                  non_assignment_expression
                   conditional_expression
                    null_coalescing_expression
                     conditional_or_expression
                      conditional_and_expression
                       inclusive_or_expression
                        exclusive_or_expression
                         and_expression
                          equality_expression
                           relational_expression
                            shift_expression
                             additive_expression
                              multiplicative_expression
                               switch_expression
                                range_expression
                                 unary_expression
                                  primary_expression
                                   primary_expression_start
                                    identifier
                                     var
                ,
                attribute_argument
                 expression
                  non_assignment_expression
                   conditional_expression
                    null_coalescing_expression
                     conditional_or_expression
                      conditional_and_expression
                       inclusive_or_expression
                        exclusive_or_expression
                         and_expression
                          equality_expression
                           relational_expression
                            shift_expression
                             additive_expression
                              multiplicative_expression
                               switch_expression
                                range_expression
                                 unary_expression
                                  primary_expression
                                   primary_expression_start
                                    literal
                                     5
                )
              ]
             attribute_section
              [
              attribute_list
               attribute
                namespace_or_type_name
                 identifier
                  CLSCompliant
                (
                attribute_argument
                 expression
                  non_assignment_expression
                   conditional_expression
                    null_coalescing_expression
                     conditional_or_expression
                      conditional_and_expression
                       inclusive_or_expression
                        exclusive_or_expression
                         and_expression
                          equality_expression
                           relational_expression
                            shift_expression
                             additive_expression
                              multiplicative_expression
                               switch_expression
                                range_expression
                                 unary_expression
                                  primary_expression
                                   primary_expression_start
                                    literal
                                     boolean_literal
                                      false
                )
              ]
             attribute_section
              [
              attribute_list
               attribute
                namespace_or_type_name
                 identifier
                  Obsolete
               ,
               attribute
                namespace_or_type_name
                 identifier
                  System
                 .
                 identifier
                  NonSerialized
               ,
               attribute
                namespace_or_type_name
                 identifier
                  NonSerialized
               ,
               attribute
                namespace_or_type_name
                 identifier
                  CLSCompliant
                (
                attribute_argument
                 expression
                  non_assignment_expression
                   conditional_expression
                    null_coalescing_expression
                     conditional_or_expression
                      conditional_and_expression
                       inclusive_or_expression
                        exclusive_or_expression
                         and_expression
                          equality_expression
                           relational_expression
                            shift_expression
                             additive_expression
                              multiplicative_expression
                               switch_expression
                                range_expression
                                 unary_expression
                                  primary_expression
                                   primary_expression_start
                                    literal
                                     boolean_literal
                                      true
                      ||
                      conditional_and_expression
                       inclusive_or_expression
                        exclusive_or_expression
                         and_expression
                          equality_expression
                           relational_expression
                            shift_expression
                             additive_expression
                              multiplicative_expression
                               switch_expression
                                range_expression
                                 unary_expression
                                  primary_expression
                                   primary_expression_start
                                    literal
                                     boolean_literal
                                      false
                          &
                          equality_expression
                           relational_expression
                            shift_expression
                             additive_expression
                              multiplicative_expression
                               switch_expression
                                range_expression
                                 unary_expression
                                  primary_expression
                                   primary_expression_start
                                    literal
                                     boolean_literal
                                      true
                )
              ]
            all_member_modifiers
             all_member_modifier
              private
             all_member_modifier
              volatile
            common_member_declaration
             typed_member_declaration
              type_
               base_type
                simple_type
                 numeric_type
                  integral_type
                   int
              field_declaration
               variable_declarators
                variable_declarator
                 identifier
                  f2
               ;
           class_member_declaration
            attributes
             attribute_section
              [
              attribute_target
               keyword
                return
              :
              attribute_list
               attribute
                namespace_or_type_name
                 identifier
                  Obsolete
              ]
             attribute_section
              [
              attribute_target
               identifier
                method
              :
              attribute_list
               attribute
                namespace_or_type_name
                 identifier
                  Obsolete
              ]
            all_member_modifiers
             all_member_modifier
              public
            common_member_declaration
             void
             method_declaration
              method_member_name
               identifier
                Handler
              (
              formal_parameter_list
               fixed_parameters
                fixed_parameter
                 arg_declaration
                  type_
                   base_type
                    class_type
                     object
                  identifier
                   value
              )
              method_body
               block
                {
                }
           class_member_declaration
            all_member_modifiers
             all_member_modifier
              public
            common_member_declaration
             typed_member_declaration
              type_
               base_type
                simple_type
                 numeric_type
                  integral_type
                   int
              method_declaration
               method_member_name
                identifier
                 m
               type_parameter_list
                <
                type_parameter
                 identifier
                  T
                >
               (
               formal_parameter_list
                fixed_parameters
                 fixed_parameter
                  arg_declaration
                   type_
                    base_type
                     class_type
                      namespace_or_type_name
                       identifier
                        T
                   identifier
                    t
               )
               type_parameter_constraints_clauses
                type_parameter_constraints_clause
                 where
                 identifier
                  T
                 :
                 type_parameter_constraints
                  primary_constraint
                   class
                  ,
                  constructor_constraint
                   new
                   (
                   )
               method_body
                block
                 {
                 statement_list
                  statement
                   embedded_statement
                    simple_embedded_statement
                     expression
                      non_assignment_expression
                       conditional_expression
                        null_coalescing_expression
                         conditional_or_expression
                          conditional_and_expression
                           inclusive_or_expression
                            exclusive_or_expression
                             and_expression
                              equality_expression
                               relational_expression
                                shift_expression
                                 additive_expression
                                  multiplicative_expression
                                   switch_expression
                                    range_expression
                                     unary_expression
                                      primary_expression
                                       primary_expression_start
                                        base
                                        .
                                        identifier
                                         m
                                       method_invocation
                                        (
                                        argument_list
                                         argument
                                          expression
                                           non_assignment_expression
                                            conditional_expression
                                             null_coalescing_expression
                                              conditional_or_expression
                                               conditional_and_expression
                                                inclusive_or_expression
                                                 exclusive_or_expression
                                                  and_expression
                                                   equality_expression
                                                    relational_expression
                                                     shift_expression
                                                      additive_expression
                                                       multiplicative_expression
                                                        switch_expression
                                                         range_expression
                                                          unary_expression
                                                           primary_expression
                                                            primary_expression_start
                                                             identifier
                                                              t
                                        )
                     ;
                  statement
                   embedded_statement
                    simple_embedded_statement
                     return
                     expression
                      non_assignment_expression
                       conditional_expression
                        null_coalescing_expression
                         conditional_or_expression
                          conditional_and_expression
                           inclusive_or_expression
                            exclusive_or_expression
                             and_expression
                              equality_expression
                               relational_expression
                                shift_expression
                                 additive_expression
                                  multiplicative_expression
                                   switch_expression
                                    range_expression
                                     unary_expression
                                      primary_expression
                                       primary_expression_start
                                        literal
                                         1
                     ;
                 }
           class_member_declaration
            all_member_modifiers
             all_member_modifier
              public
            common_member_declaration
             typed_member_declaration
              type_
               base_type
                class_type
                 string
              property_declaration
               member_name
                namespace_or_type_name
                 identifier
                  P
               {
               accessor_declarations
                get
                accessor_body
                 block
                  {
                  statement_list
                   statement
                    embedded_statement
                     simple_embedded_statement
                      return
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          string_literal
                                           "A"
                      ;
                  }
                set_accessor_declaration
                 set
                 accessor_body
                  ;
               }
           class_member_declaration
            all_member_modifiers
             all_member_modifier
              public
             all_member_modifier
              abstract
            common_member_declaration
             typed_member_declaration
              type_
               base_type
                class_type
                 string
              property_declaration
               member_name
                namespace_or_type_name
                 identifier
                  P
               {
               accessor_declarations
                get
                accessor_body
                 ;
               }
           class_member_declaration
            all_member_modifiers
             all_member_modifier
              public
             all_member_modifier
              abstract
            common_member_declaration
             typed_member_declaration
              type_
               base_type
                simple_type
                 numeric_type
                  integral_type
                   int
              indexer_declaration
               this
               [
               formal_parameter_list
                fixed_parameters
                 fixed_parameter
                  arg_declaration
                   type_
                    base_type
                     simple_type
                      numeric_type
                       integral_type
                        int
                   identifier
                    index
               ]
               {
               accessor_declarations
                accessor_modifier
                 protected
                 internal
                get
                accessor_body
                 ;
                set_accessor_declaration
                 accessor_modifier
                  internal
                  protected
                 set
                 accessor_body
                  ;
               }
           class_member_declaration
            attributes
             attribute_section
              [
              attribute_target
               identifier
                method
              :
              attribute_list
               attribute
                namespace_or_type_name
                 identifier
                  Obsolete
              ]
             attribute_section
              [
              attribute_target
               identifier
                field
              :
              attribute_list
               attribute
                namespace_or_type_name
                 identifier
                  Obsolete
              ]
             attribute_section
              [
              attribute_target
               keyword
                event
              :
              attribute_list
               attribute
                namespace_or_type_name
                 identifier
                  Obsolete
              ]
            all_member_modifiers
             all_member_modifier
              public
             all_member_modifier
              readonly
            common_member_declaration
             event_declaration
              event
              type_
               base_type
                class_type
                 namespace_or_type_name
                  identifier
                   Event
              variable_declarators
               variable_declarator
                identifier
                 E
              ;
           class_member_declaration
            attributes
             attribute_section
              [
              attribute_target
               keyword
                event
              :
              attribute_list
               attribute
                namespace_or_type_name
                 identifier
                  Test
              ]
            all_member_modifiers
             all_member_modifier
              public
            common_member_declaration
             event_declaration
              event
              type_
               base_type
                class_type
                 namespace_or_type_name
                  identifier
                   Action
              member_name
               namespace_or_type_name
                identifier
                 E1
              {
              event_accessor_declarations
               attributes
                attribute_section
                 [
                 attribute_list
                  attribute
                   namespace_or_type_name
                    identifier
                     Obsolete
                 ]
               add
               block
                {
                statement_list
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     assignment
                      unary_expression
                       primary_expression
                        primary_expression_start
                         identifier
                          value
                      assignment_operator
                       =
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          value
                    ;
                }
               remove_accessor_declaration
                attributes
                 attribute_section
                  [
                  attribute_list
                   attribute
                    namespace_or_type_name
                     identifier
                      Obsolete
                  ]
                 attribute_section
                  [
                  attribute_target
                   keyword
                    return
                  :
                  attribute_list
                   attribute
                    namespace_or_type_name
                     identifier
                      Obsolete
                  ]
                remove
                block
                 {
                 statement_list
                  statement
                   embedded_statement
                    simple_embedded_statement
                     expression
                      assignment
                       unary_expression
                        primary_expression
                         primary_expression_start
                          identifier
                           E
                       assignment_operator
                        +=
                       expression
                        non_assignment_expression
                         conditional_expression
                          null_coalescing_expression
                           conditional_or_expression
                            conditional_and_expression
                             inclusive_or_expression
                              exclusive_or_expression
                               and_expression
                                equality_expression
                                 relational_expression
                                  shift_expression
                                   additive_expression
                                    multiplicative_expression
                                     switch_expression
                                      range_expression
                                       unary_expression
                                        primary_expression
                                         primary_expression_start
                                          identifier
                                           Handler
                     ;
                  statement
                   embedded_statement
                    simple_embedded_statement
                     expression
                      assignment
                       unary_expression
                        primary_expression
                         primary_expression_start
                          identifier
                           E
                       assignment_operator
                        -=
                       expression
                        non_assignment_expression
                         conditional_expression
                          null_coalescing_expression
                           conditional_or_expression
                            conditional_and_expression
                             inclusive_or_expression
                              exclusive_or_expression
                               and_expression
                                equality_expression
                                 relational_expression
                                  shift_expression
                                   additive_expression
                                    multiplicative_expression
                                     switch_expression
                                      range_expression
                                       unary_expression
                                        primary_expression
                                         primary_expression_start
                                          identifier
                                           Handler
                     ;
                 }
              }
           class_member_declaration
            all_member_modifiers
             all_member_modifier
              public
             all_member_modifier
              static
            common_member_declaration
             typed_member_declaration
              type_
               base_type
                class_type
                 namespace_or_type_name
                  identifier
                   A
              operator_declaration
               operator
               overloadable_operator
                +
               (
               arg_declaration
                type_
                 base_type
                  class_type
                   namespace_or_type_name
                    identifier
                     A
                identifier
                 first
               ,
               arg_declaration
                type_
                 base_type
                  class_type
                   namespace_or_type_name
                    identifier
                     A
                identifier
                 second
               )
               body
                block
                 {
                 statement_list
                  statement
                   declarationStatement
                    local_variable_declaration
                     local_variable_type
                      type_
                       base_type
                        class_type
                         namespace_or_type_name
                          identifier
                           Delegate
                     local_variable_declarator
                      identifier
                       handler
                      =
                      local_variable_initializer
                       expression
                        non_assignment_expression
                         conditional_expression
                          null_coalescing_expression
                           conditional_or_expression
                            conditional_and_expression
                             inclusive_or_expression
                              exclusive_or_expression
                               and_expression
                                equality_expression
                                 relational_expression
                                  shift_expression
                                   additive_expression
                                    multiplicative_expression
                                     switch_expression
                                      range_expression
                                       unary_expression
                                        primary_expression
                                         primary_expression_start
                                          new
                                          type_
                                           base_type
                                            class_type
                                             namespace_or_type_name
                                              identifier
                                               Delegate
                                          object_creation_expression
                                           (
                                           argument_list
                                            argument
                                             expression
                                              non_assignment_expression
                                               conditional_expression
                                                null_coalescing_expression
                                                 conditional_or_expression
                                                  conditional_and_expression
                                                   inclusive_or_expression
                                                    exclusive_or_expression
                                                     and_expression
                                                      equality_expression
                                                       relational_expression
                                                        shift_expression
                                                         additive_expression
                                                          multiplicative_expression
                                                           switch_expression
                                                            range_expression
                                                             unary_expression
                                                              primary_expression
                                                               primary_expression_start
                                                                identifier
                                                                 Handler
                                           )
                    ;
                  statement
                   embedded_statement
                    simple_embedded_statement
                     return
                     expression
                      non_assignment_expression
                       conditional_expression
                        null_coalescing_expression
                         conditional_or_expression
                          conditional_and_expression
                           inclusive_or_expression
                            exclusive_or_expression
                             and_expression
                              equality_expression
                               relational_expression
                                shift_expression
                                 additive_expression
                                  multiplicative_expression
                                   switch_expression
                                    range_expression
                                     unary_expression
                                      primary_expression
                                       primary_expression_start
                                        identifier
                                         first
                                       member_access
                                        .
                                        identifier
                                         Add
                                       method_invocation
                                        (
                                        argument_list
                                         argument
                                          expression
                                           non_assignment_expression
                                            conditional_expression
                                             null_coalescing_expression
                                              conditional_or_expression
                                               conditional_and_expression
                                                inclusive_or_expression
                                                 exclusive_or_expression
                                                  and_expression
                                                   equality_expression
                                                    relational_expression
                                                     shift_expression
                                                      additive_expression
                                                       multiplicative_expression
                                                        switch_expression
                                                         range_expression
                                                          unary_expression
                                                           primary_expression
                                                            primary_expression_start
                                                             identifier
                                                              second
                                        )
                     ;
                 }
           class_member_declaration
            attributes
             attribute_section
              [
              attribute_target
               identifier
                method
              :
              attribute_list
               attribute
                namespace_or_type_name
                 identifier
                  Obsolete
              ]
             attribute_section
              [
              attribute_target
               keyword
                return
              :
              attribute_list
               attribute
                namespace_or_type_name
                 identifier
                  Obsolete
              ]
            all_member_modifiers
             all_member_modifier
              public
             all_member_modifier
              static
            common_member_declaration
             typed_member_declaration
              type_
               base_type
                simple_type
                 bool
              operator_declaration
               operator
               overloadable_operator
                true
               (
               arg_declaration
                type_
                 base_type
                  class_type
                   namespace_or_type_name
                    identifier
                     A
                identifier
                 a
               )
               body
                block
                 {
                 statement_list
                  statement
                   embedded_statement
                    simple_embedded_statement
                     return
                     expression
                      non_assignment_expression
                       conditional_expression
                        null_coalescing_expression
                         conditional_or_expression
                          conditional_and_expression
                           inclusive_or_expression
                            exclusive_or_expression
                             and_expression
                              equality_expression
                               relational_expression
                                shift_expression
                                 additive_expression
                                  multiplicative_expression
                                   switch_expression
                                    range_expression
                                     unary_expression
                                      primary_expression
                                       primary_expression_start
                                        literal
                                         boolean_literal
                                          true
                     ;
                 }
           class_member_declaration
            all_member_modifiers
             all_member_modifier
              public
             all_member_modifier
              static
            common_member_declaration
             typed_member_declaration
              type_
               base_type
                simple_type
                 bool
              operator_declaration
               operator
               overloadable_operator
                false
               (
               arg_declaration
                type_
                 base_type
                  class_type
                   namespace_or_type_name
                    identifier
                     A
                identifier
                 a
               )
               body
                block
                 {
                 statement_list
                  statement
                   embedded_statement
                    simple_embedded_statement
                     return
                     expression
                      non_assignment_expression
                       conditional_expression
                        null_coalescing_expression
                         conditional_or_expression
                          conditional_and_expression
                           inclusive_or_expression
                            exclusive_or_expression
                             and_expression
                              equality_expression
                               relational_expression
                                shift_expression
                                 additive_expression
                                  multiplicative_expression
                                   switch_expression
                                    range_expression
                                     unary_expression
                                      primary_expression
                                       primary_expression_start
                                        literal
                                         boolean_literal
                                          false
                     ;
                 }
           class_member_declaration
            common_member_declaration
             class_definition
              class
              identifier
               C
              class_body
               {
               }
          }
      namespace_member_declaration
       type_declaration
        all_member_modifiers
         all_member_modifier
          public
        struct_definition
         struct
         identifier
          S
         struct_interfaces
          :
          interface_type_list
           namespace_or_type_name
            identifier
             I
         struct_body
          {
          struct_member_declaration
           all_member_modifiers
            all_member_modifier
             public
           common_member_declaration
            constructor_declaration
             identifier
              S
             (
             )
             body
              block
               {
               }
          struct_member_declaration
           all_member_modifiers
            all_member_modifier
             private
           common_member_declaration
            typed_member_declaration
             type_
              base_type
               simple_type
                numeric_type
                 integral_type
                  int
             field_declaration
              variable_declarators
               variable_declarator
                identifier
                 f1
              ;
          struct_member_declaration
           attributes
            attribute_section
             [
             attribute_list
              attribute
               namespace_or_type_name
                identifier
                 Obsolete
               (
               attribute_argument
                expression
                 non_assignment_expression
                  conditional_expression
                   null_coalescing_expression
                    conditional_or_expression
                     conditional_and_expression
                      inclusive_or_expression
                       exclusive_or_expression
                        and_expression
                         equality_expression
                          relational_expression
                           shift_expression
                            additive_expression
                             multiplicative_expression
                              switch_expression
                               range_expression
                                unary_expression
                                 primary_expression
                                  primary_expression_start
                                   literal
                                    string_literal
                                     "Use Script instead"
               ,
               attribute_argument
                identifier
                 error
                :
                expression
                 non_assignment_expression
                  conditional_expression
                   null_coalescing_expression
                    conditional_or_expression
                     conditional_and_expression
                      inclusive_or_expression
                       exclusive_or_expression
                        and_expression
                         equality_expression
                          relational_expression
                           shift_expression
                            additive_expression
                             multiplicative_expression
                              switch_expression
                               range_expression
                                unary_expression
                                 primary_expression
                                  primary_expression_start
                                   literal
                                    boolean_literal
                                     false
               )
             ]
           all_member_modifiers
            all_member_modifier
             private
            all_member_modifier
             volatile
           common_member_declaration
            typed_member_declaration
             type_
              base_type
               simple_type
                numeric_type
                 integral_type
                  int
             field_declaration
              variable_declarators
               variable_declarator
                identifier
                 f2
              ;
          struct_member_declaration
           all_member_modifiers
            all_member_modifier
             public
            all_member_modifier
             abstract
           common_member_declaration
            typed_member_declaration
             type_
              base_type
               simple_type
                numeric_type
                 integral_type
                  int
             method_declaration
              method_member_name
               identifier
                m
              type_parameter_list
               <
               type_parameter
                identifier
                 T
               >
              (
              formal_parameter_list
               fixed_parameters
                fixed_parameter
                 arg_declaration
                  type_
                   base_type
                    class_type
                     namespace_or_type_name
                      identifier
                       T
                  identifier
                   t
              )
              type_parameter_constraints_clauses
               type_parameter_constraints_clause
                where
                identifier
                 T
                :
                type_parameter_constraints
                 primary_constraint
                  struct
              method_body
               block
                {
                statement_list
                 statement
                  embedded_statement
                   simple_embedded_statement
                    return
                    expression
                     non_assignment_expression
                      conditional_expression
                       null_coalescing_expression
                        conditional_or_expression
                         conditional_and_expression
                          inclusive_or_expression
                           exclusive_or_expression
                            and_expression
                             equality_expression
                              relational_expression
                               shift_expression
                                additive_expression
                                 multiplicative_expression
                                  switch_expression
                                   range_expression
                                    unary_expression
                                     primary_expression
                                      primary_expression_start
                                       literal
                                        1
                    ;
                }
          struct_member_declaration
           all_member_modifiers
            all_member_modifier
             public
           common_member_declaration
            typed_member_declaration
             type_
              base_type
               class_type
                string
             property_declaration
              member_name
               namespace_or_type_name
                identifier
                 P
              {
              accessor_declarations
               get
               accessor_body
                block
                 {
                 statement_list
                  statement
                   declarationStatement
                    local_variable_declaration
                     local_variable_type
                      type_
                       base_type
                        simple_type
                         numeric_type
                          integral_type
                           int
                     local_variable_declarator
                      identifier
                       value
                      =
                      local_variable_initializer
                       expression
                        non_assignment_expression
                         conditional_expression
                          null_coalescing_expression
                           conditional_or_expression
                            conditional_and_expression
                             inclusive_or_expression
                              exclusive_or_expression
                               and_expression
                                equality_expression
                                 relational_expression
                                  shift_expression
                                   additive_expression
                                    multiplicative_expression
                                     switch_expression
                                      range_expression
                                       unary_expression
                                        primary_expression
                                         primary_expression_start
                                          literal
                                           0
                    ;
                  statement
                   embedded_statement
                    simple_embedded_statement
                     return
                     expression
                      non_assignment_expression
                       conditional_expression
                        null_coalescing_expression
                         conditional_or_expression
                          conditional_and_expression
                           inclusive_or_expression
                            exclusive_or_expression
                             and_expression
                              equality_expression
                               relational_expression
                                shift_expression
                                 additive_expression
                                  multiplicative_expression
                                   switch_expression
                                    range_expression
                                     unary_expression
                                      primary_expression
                                       primary_expression_start
                                        literal
                                         string_literal
                                          "A"
                     ;
                 }
               set_accessor_declaration
                set
                accessor_body
                 ;
              }
          struct_member_declaration
           all_member_modifiers
            all_member_modifier
             public
            all_member_modifier
             abstract
           common_member_declaration
            typed_member_declaration
             type_
              base_type
               class_type
                string
             property_declaration
              member_name
               namespace_or_type_name
                identifier
                 P
              {
              accessor_declarations
               get
               accessor_body
                ;
              }
          struct_member_declaration
           all_member_modifiers
            all_member_modifier
             public
            all_member_modifier
             abstract
           common_member_declaration
            typed_member_declaration
             type_
              base_type
               simple_type
                numeric_type
                 integral_type
                  int
             indexer_declaration
              this
              [
              formal_parameter_list
               fixed_parameters
                fixed_parameter
                 arg_declaration
                  type_
                   base_type
                    simple_type
                     numeric_type
                      integral_type
                       int
                  identifier
                   index
              ]
              {
              accessor_declarations
               get
               accessor_body
                ;
               set_accessor_declaration
                accessor_modifier
                 internal
                 protected
                set
                accessor_body
                 ;
              }
          struct_member_declaration
           all_member_modifiers
            all_member_modifier
             public
           common_member_declaration
            event_declaration
             event
             type_
              base_type
               class_type
                namespace_or_type_name
                 identifier
                  Event
             variable_declarators
              variable_declarator
               identifier
                E
             ;
          struct_member_declaration
           all_member_modifiers
            all_member_modifier
             public
            all_member_modifier
             static
           common_member_declaration
            typed_member_declaration
             type_
              base_type
               class_type
                namespace_or_type_name
                 identifier
                  A
             operator_declaration
              operator
              overloadable_operator
               +
              (
              arg_declaration
               type_
                base_type
                 class_type
                  namespace_or_type_name
                   identifier
                    A
               identifier
                first
              ,
              arg_declaration
               type_
                base_type
                 class_type
                  namespace_or_type_name
                   identifier
                    A
               identifier
                second
              )
              body
               block
                {
                statement_list
                 statement
                  embedded_statement
                   simple_embedded_statement
                    return
                    expression
                     non_assignment_expression
                      conditional_expression
                       null_coalescing_expression
                        conditional_or_expression
                         conditional_and_expression
                          inclusive_or_expression
                           exclusive_or_expression
                            and_expression
                             equality_expression
                              relational_expression
                               shift_expression
                                additive_expression
                                 multiplicative_expression
                                  switch_expression
                                   range_expression
                                    unary_expression
                                     primary_expression
                                      primary_expression_start
                                       identifier
                                        first
                                      member_access
                                       .
                                       identifier
                                        Add
                                      method_invocation
                                       (
                                       argument_list
                                        argument
                                         expression
                                          non_assignment_expression
                                           conditional_expression
                                            null_coalescing_expression
                                             conditional_or_expression
                                              conditional_and_expression
                                               inclusive_or_expression
                                                exclusive_or_expression
                                                 and_expression
                                                  equality_expression
                                                   relational_expression
                                                    shift_expression
                                                     additive_expression
                                                      multiplicative_expression
                                                       switch_expression
                                                        range_expression
                                                         unary_expression
                                                          primary_expression
                                                           primary_expression_start
                                                            identifier
                                                             second
                                       )
                    ;
                }
          struct_member_declaration
           fixed
           type_
            base_type
             simple_type
              numeric_type
               integral_type
                int
           fixed_size_buffer_declarator
            identifier
             field
            [
            expression
             non_assignment_expression
              conditional_expression
               null_coalescing_expression
                conditional_or_expression
                 conditional_and_expression
                  inclusive_or_expression
                   exclusive_or_expression
                    and_expression
                     equality_expression
                      relational_expression
                       shift_expression
                        additive_expression
                         multiplicative_expression
                          switch_expression
                           range_expression
                            unary_expression
                             primary_expression
                              primary_expression_start
                               literal
                                10
            ]
           ;
          struct_member_declaration
           common_member_declaration
            class_definition
             class
             identifier
              C
             class_body
              {
              }
          }
      namespace_member_declaration
       type_declaration
        all_member_modifiers
         all_member_modifier
          public
        interface_definition
         interface
         identifier
          I
         class_body
          {
          class_member_declarations
           class_member_declaration
            common_member_declaration
             void
             method_declaration
              method_member_name
               identifier
                A
              (
              formal_parameter_list
               fixed_parameters
                fixed_parameter
                 arg_declaration
                  type_
                   base_type
                    simple_type
                     numeric_type
                      integral_type
                       int
                  identifier
                   value
              )
              method_body
               ;
           class_member_declaration
            common_member_declaration
             typed_member_declaration
              type_
               base_type
                class_type
                 string
              property_declaration
               member_name
                namespace_or_type_name
                 identifier
                  Value
               {
               accessor_declarations
                get
                accessor_body
                 ;
                set_accessor_declaration
                 set
                 accessor_body
                  ;
               }
           class_member_declaration
            all_member_modifiers
             all_member_modifier
              unsafe
            common_member_declaration
             void
             method_declaration
              method_member_name
               identifier
                UpdateSignatureByHashingContent
              (
              formal_parameter_list
               fixed_parameters
                fixed_parameter
                 attributes
                  attribute_section
                   [
                   attribute_list
                    attribute
                     namespace_or_type_name
                      identifier
                       In
                   ]
                 arg_declaration
                  type_
                   base_type
                    simple_type
                     numeric_type
                      integral_type
                       byte
                   *
                  identifier
                   buffer
                ,
                fixed_parameter
                 arg_declaration
                  type_
                   base_type
                    simple_type
                     numeric_type
                      integral_type
                       int
                  identifier
                   size
              )
              method_body
               ;
          }
      namespace_member_declaration
       type_declaration
        attributes
         attribute_section
          [
          attribute_target
           identifier
            type
          :
          attribute_list
           attribute
            namespace_or_type_name
             identifier
              Flags
          ]
        all_member_modifiers
         all_member_modifier
          public
        enum_definition
         enum
         identifier
          E
         enum_body
          {
          enum_member_declaration
           identifier
            A
          ,
          enum_member_declaration
           identifier
            B
           =
           expression
            non_assignment_expression
             conditional_expression
              null_coalescing_expression
               conditional_or_expression
                conditional_and_expression
                 inclusive_or_expression
                  exclusive_or_expression
                   and_expression
                    equality_expression
                     relational_expression
                      shift_expression
                       additive_expression
                        multiplicative_expression
                         switch_expression
                          range_expression
                           unary_expression
                            primary_expression
                             primary_expression_start
                              identifier
                               A
          ,
          enum_member_declaration
           identifier
            C
           =
           expression
            non_assignment_expression
             conditional_expression
              null_coalescing_expression
               conditional_or_expression
                conditional_and_expression
                 inclusive_or_expression
                  exclusive_or_expression
                   and_expression
                    equality_expression
                     relational_expression
                      shift_expression
                       additive_expression
                        multiplicative_expression
                         switch_expression
                          range_expression
                           unary_expression
                            primary_expression
                             primary_expression_start
                              literal
                               2
                        +
                        multiplicative_expression
                         switch_expression
                          range_expression
                           unary_expression
                            primary_expression
                             primary_expression_start
                              identifier
                               A
          ,
          enum_member_declaration
           identifier
            D
          ,
          }
      namespace_member_declaration
       type_declaration
        all_member_modifiers
         all_member_modifier
          public
        delegate_definition
         delegate
         return_type
          void
         identifier
          Delegate
         (
         formal_parameter_list
          fixed_parameters
           fixed_parameter
            arg_declaration
             type_
              base_type
               class_type
                object
             identifier
              P
         )
         ;
      namespace_member_declaration
       namespace_declaration
        namespace
        qualified_identifier
         identifier
          Test
        namespace_body
         {
         using_directives
          using_directive
           using
           namespace_or_type_name
            identifier
             System
           ;
          using_directive
           using
           namespace_or_type_name
            identifier
             System
            .
            identifier
             Collections
           ;
         namespace_member_declarations
          namespace_member_declaration
           type_declaration
            all_member_modifiers
             all_member_modifier
              public
            class_definition
             class
             identifier
              Список
             class_body
              {
              class_member_declarations
               class_member_declaration
                all_member_modifiers
                 all_member_modifier
                  public
                 all_member_modifier
                  static
                common_member_declaration
                 typed_member_declaration
                  type_
                   base_type
                    class_type
                     namespace_or_type_name
                      identifier
                       IEnumerable
                  method_declaration
                   method_member_name
                    identifier
                     Power
                   (
                   formal_parameter_list
                    fixed_parameters
                     fixed_parameter
                      arg_declaration
                       type_
                        base_type
                         simple_type
                          numeric_type
                           integral_type
                            int
                       identifier
                        number
                     ,
                     fixed_parameter
                      arg_declaration
                       type_
                        base_type
                         simple_type
                          numeric_type
                           integral_type
                            int
                       identifier
                        exponent
                   )
                   method_body
                    block
                     {
                     statement_list
                      statement
                       declarationStatement
                        local_variable_declaration
                         local_variable_type
                          type_
                           base_type
                            class_type
                             namespace_or_type_name
                              identifier
                               Список
                         local_variable_declarator
                          identifier
                           Список
                          =
                          local_variable_initializer
                           expression
                            non_assignment_expression
                             conditional_expression
                              null_coalescing_expression
                               conditional_or_expression
                                conditional_and_expression
                                 inclusive_or_expression
                                  exclusive_or_expression
                                   and_expression
                                    equality_expression
                                     relational_expression
                                      shift_expression
                                       additive_expression
                                        multiplicative_expression
                                         switch_expression
                                          range_expression
                                           unary_expression
                                            primary_expression
                                             primary_expression_start
                                              new
                                              type_
                                               base_type
                                                class_type
                                                 namespace_or_type_name
                                                  identifier
                                                   Список
                                              object_creation_expression
                                               (
                                               )
                        ;
                      statement
                       embedded_statement
                        simple_embedded_statement
                         expression
                          non_assignment_expression
                           conditional_expression
                            null_coalescing_expression
                             conditional_or_expression
                              conditional_and_expression
                               inclusive_or_expression
                                exclusive_or_expression
                                 and_expression
                                  equality_expression
                                   relational_expression
                                    shift_expression
                                     additive_expression
                                      multiplicative_expression
                                       switch_expression
                                        range_expression
                                         unary_expression
                                          primary_expression
                                           primary_expression_start
                                            identifier
                                             Список
                                           member_access
                                            .
                                            identifier
                                             Main
                                           method_invocation
                                            (
                                            )
                         ;
                      statement
                       declarationStatement
                        local_variable_declaration
                         local_variable_type
                          type_
                           base_type
                            simple_type
                             numeric_type
                              integral_type
                               int
                         local_variable_declarator
                          identifier
                           counter
                          =
                          local_variable_initializer
                           expression
                            non_assignment_expression
                             conditional_expression
                              null_coalescing_expression
                               conditional_or_expression
                                conditional_and_expression
                                 inclusive_or_expression
                                  exclusive_or_expression
                                   and_expression
                                    equality_expression
                                     relational_expression
                                      shift_expression
                                       additive_expression
                                        multiplicative_expression
                                         switch_expression
                                          range_expression
                                           unary_expression
                                            primary_expression
                                             primary_expression_start
                                              (
                                              expression
                                               non_assignment_expression
                                                conditional_expression
                                                 null_coalescing_expression
                                                  conditional_or_expression
                                                   conditional_and_expression
                                                    inclusive_or_expression
                                                     exclusive_or_expression
                                                      and_expression
                                                       equality_expression
                                                        relational_expression
                                                         shift_expression
                                                          additive_expression
                                                           multiplicative_expression
                                                            switch_expression
                                                             range_expression
                                                              unary_expression
                                                               primary_expression
                                                                primary_expression_start
                                                                 literal
                                                                  0
                                                           +
                                                           multiplicative_expression
                                                            switch_expression
                                                             range_expression
                                                              unary_expression
                                                               primary_expression
                                                                primary_expression_start
                                                                 literal
                                                                  0
                                              )
                        ;
                      statement
                       declarationStatement
                        local_variable_declaration
                         local_variable_type
                          type_
                           base_type
                            simple_type
                             numeric_type
                              integral_type
                               int
                         local_variable_declarator
                          identifier
                           אתר
                          =
                          local_variable_initializer
                           expression
                            non_assignment_expression
                             conditional_expression
                              null_coalescing_expression
                               conditional_or_expression
                                conditional_and_expression
                                 inclusive_or_expression
                                  exclusive_or_expression
                                   and_expression
                                    equality_expression
                                     relational_expression
                                      shift_expression
                                       additive_expression
                                        multiplicative_expression
                                         switch_expression
                                          range_expression
                                           unary_expression
                                            primary_expression
                                             primary_expression_start
                                              literal
                                               0
                        ;
                      statement
                       embedded_statement
                        simple_embedded_statement
                         while
                         (
                         expression
                          non_assignment_expression
                           conditional_expression
                            null_coalescing_expression
                             conditional_or_expression
                              conditional_and_expression
                               inclusive_or_expression
                                exclusive_or_expression
                                 and_expression
                                  equality_expression
                                   relational_expression
                                    shift_expression
                                     additive_expression
                                      multiplicative_expression
                                       switch_expression
                                        range_expression
                                         unary_expression
                                          ++
                                          unary_expression
                                           primary_expression
                                            primary_expression_start
                                             identifier
                                              counter
                                            ++
                                    <
                                    shift_expression
                                     additive_expression
                                      multiplicative_expression
                                       switch_expression
                                        range_expression
                                         unary_expression
                                          --
                                          unary_expression
                                           primary_expression
                                            primary_expression_start
                                             identifier
                                              exponent
                                            --
                         )
                         embedded_statement
                          block
                           {
                           statement_list
                            statement
                             embedded_statement
                              simple_embedded_statement
                               expression
                                assignment
                                 unary_expression
                                  primary_expression
                                   primary_expression_start
                                    identifier
                                     result
                                 assignment_operator
                                  =
                                 expression
                                  non_assignment_expression
                                   conditional_expression
                                    null_coalescing_expression
                                     conditional_or_expression
                                      conditional_and_expression
                                       inclusive_or_expression
                                        exclusive_or_expression
                                         and_expression
                                          equality_expression
                                           relational_expression
                                            shift_expression
                                             additive_expression
                                              multiplicative_expression
                                               switch_expression
                                                range_expression
                                                 unary_expression
                                                  primary_expression
                                                   primary_expression_start
                                                    identifier
                                                     result
                                               *
                                               switch_expression
                                                range_expression
                                                 unary_expression
                                                  primary_expression
                                                   primary_expression_start
                                                    identifier
                                                     number
                                              +
                                              multiplicative_expression
                                               switch_expression
                                                range_expression
                                                 unary_expression
                                                  +
                                                  unary_expression
                                                   primary_expression
                                                    primary_expression_start
                                                     identifier
                                                      number
                                                    ++
                                                    ++
                                              +
                                              multiplicative_expression
                                               switch_expression
                                                range_expression
                                                 unary_expression
                                                  primary_expression
                                                   primary_expression_start
                                                    identifier
                                                     number
                               ;
                            statement
                             embedded_statement
                              simple_embedded_statement
                               yield
                               return
                               expression
                                non_assignment_expression
                                 conditional_expression
                                  null_coalescing_expression
                                   conditional_or_expression
                                    conditional_and_expression
                                     inclusive_or_expression
                                      exclusive_or_expression
                                       and_expression
                                        equality_expression
                                         relational_expression
                                          shift_expression
                                           additive_expression
                                            multiplicative_expression
                                             switch_expression
                                              range_expression
                                               unary_expression
                                                primary_expression
                                                 primary_expression_start
                                                  identifier
                                                   result
                               ;
                           }
                     }
               class_member_declaration
                all_member_modifiers
                 all_member_modifier
                  static
                common_member_declaration
                 void
                 method_declaration
                  method_member_name
                   identifier
                    Main
                  (
                  )
                  method_body
                   block
                    {
                    statement_list
                     statement
                      embedded_statement
                       simple_embedded_statement
                        foreach
                        (
                        local_variable_type
                         type_
                          base_type
                           simple_type
                            numeric_type
                             integral_type
                              int
                        identifier
                         i
                        in
                        expression
                         non_assignment_expression
                          conditional_expression
                           null_coalescing_expression
                            conditional_or_expression
                             conditional_and_expression
                              inclusive_or_expression
                               exclusive_or_expression
                                and_expression
                                 equality_expression
                                  relational_expression
                                   shift_expression
                                    additive_expression
                                     multiplicative_expression
                                      switch_expression
                                       range_expression
                                        unary_expression
                                         primary_expression
                                          primary_expression_start
                                           identifier
                                            Power
                                          method_invocation
                                           (
                                           argument_list
                                            argument
                                             expression
                                              non_assignment_expression
                                               conditional_expression
                                                null_coalescing_expression
                                                 conditional_or_expression
                                                  conditional_and_expression
                                                   inclusive_or_expression
                                                    exclusive_or_expression
                                                     and_expression
                                                      equality_expression
                                                       relational_expression
                                                        shift_expression
                                                         additive_expression
                                                          multiplicative_expression
                                                           switch_expression
                                                            range_expression
                                                             unary_expression
                                                              primary_expression
                                                               primary_expression_start
                                                                literal
                                                                 2
                                            ,
                                            argument
                                             expression
                                              non_assignment_expression
                                               conditional_expression
                                                null_coalescing_expression
                                                 conditional_or_expression
                                                  conditional_and_expression
                                                   inclusive_or_expression
                                                    exclusive_or_expression
                                                     and_expression
                                                      equality_expression
                                                       relational_expression
                                                        shift_expression
                                                         additive_expression
                                                          multiplicative_expression
                                                           switch_expression
                                                            range_expression
                                                             unary_expression
                                                              primary_expression
                                                               primary_expression_start
                                                                literal
                                                                 8
                                           )
                        )
                        embedded_statement
                         block
                          {
                          statement_list
                           statement
                            embedded_statement
                             simple_embedded_statement
                              expression
                               non_assignment_expression
                                conditional_expression
                                 null_coalescing_expression
                                  conditional_or_expression
                                   conditional_and_expression
                                    inclusive_or_expression
                                     exclusive_or_expression
                                      and_expression
                                       equality_expression
                                        relational_expression
                                         shift_expression
                                          additive_expression
                                           multiplicative_expression
                                            switch_expression
                                             range_expression
                                              unary_expression
                                               primary_expression
                                                primary_expression_start
                                                 identifier
                                                  Console
                                                member_access
                                                 .
                                                 identifier
                                                  Write
                                                method_invocation
                                                 (
                                                 argument_list
                                                  argument
                                                   expression
                                                    non_assignment_expression
                                                     conditional_expression
                                                      null_coalescing_expression
                                                       conditional_or_expression
                                                        conditional_and_expression
                                                         inclusive_or_expression
                                                          exclusive_or_expression
                                                           and_expression
                                                            equality_expression
                                                             relational_expression
                                                              shift_expression
                                                               additive_expression
                                                                multiplicative_expression
                                                                 switch_expression
                                                                  range_expression
                                                                   unary_expression
                                                                    primary_expression
                                                                     primary_expression_start
                                                                      literal
                                                                       string_literal
                                                                        "{0} "
                                                  ,
                                                  argument
                                                   expression
                                                    non_assignment_expression
                                                     conditional_expression
                                                      null_coalescing_expression
                                                       conditional_or_expression
                                                        conditional_and_expression
                                                         inclusive_or_expression
                                                          exclusive_or_expression
                                                           and_expression
                                                            equality_expression
                                                             relational_expression
                                                              shift_expression
                                                               additive_expression
                                                                multiplicative_expression
                                                                 switch_expression
                                                                  range_expression
                                                                   unary_expression
                                                                    primary_expression
                                                                     primary_expression_start
                                                                      identifier
                                                                       i
                                                 )
                              ;
                          }
                    }
               class_member_declaration
                all_member_modifiers
                 all_member_modifier
                  async
                common_member_declaration
                 void
                 method_declaration
                  method_member_name
                   identifier
                    Wait
                  (
                  )
                  method_body
                   block
                    {
                    statement_list
                     statement
                      embedded_statement
                       simple_embedded_statement
                        expression
                         non_assignment_expression
                          conditional_expression
                           null_coalescing_expression
                            conditional_or_expression
                             conditional_and_expression
                              inclusive_or_expression
                               exclusive_or_expression
                                and_expression
                                 equality_expression
                                  relational_expression
                                   shift_expression
                                    additive_expression
                                     multiplicative_expression
                                      switch_expression
                                       range_expression
                                        unary_expression
                                         await
                                         unary_expression
                                          primary_expression
                                           primary_expression_start
                                            identifier
                                             System
                                           member_access
                                            .
                                            identifier
                                             Threading
                                           member_access
                                            .
                                            identifier
                                             Tasks
                                           member_access
                                            .
                                            identifier
                                             Task
                                           member_access
                                            .
                                            identifier
                                             Delay
                                           method_invocation
                                            (
                                            argument_list
                                             argument
                                              expression
                                               non_assignment_expression
                                                conditional_expression
                                                 null_coalescing_expression
                                                  conditional_or_expression
                                                   conditional_and_expression
                                                    inclusive_or_expression
                                                     exclusive_or_expression
                                                      and_expression
                                                       equality_expression
                                                        relational_expression
                                                         shift_expression
                                                          additive_expression
                                                           multiplicative_expression
                                                            switch_expression
                                                             range_expression
                                                              unary_expression
                                                               primary_expression
                                                                primary_expression_start
                                                                 literal
                                                                  0
                                            )
                        ;
                    }
               class_member_declaration
                common_member_declaration
                 void
                 method_declaration
                  method_member_name
                   identifier
                    AsyncAnonymous
                  (
                  )
                  method_body
                   block
                    {
                    statement_list
                     statement
                      declarationStatement
                       local_variable_declaration
                        local_variable_type
                         var
                        local_variable_declarator
                         identifier
                          task
                         =
                         local_variable_initializer
                          expression
                           non_assignment_expression
                            conditional_expression
                             null_coalescing_expression
                              conditional_or_expression
                               conditional_and_expression
                                inclusive_or_expression
                                 exclusive_or_expression
                                  and_expression
                                   equality_expression
                                    relational_expression
                                     shift_expression
                                      additive_expression
                                       multiplicative_expression
                                        switch_expression
                                         range_expression
                                          unary_expression
                                           primary_expression
                                            primary_expression_start
                                             identifier
                                              Task
                                            member_access
                                             .
                                             identifier
                                              Factory
                                            member_access
                                             .
                                             identifier
                                              StartNew
                                            method_invocation
                                             (
                                             argument_list
                                              argument
                                               expression
                                                non_assignment_expression
                                                 lambda_expression
                                                  async
                                                  anonymous_function_signature
                                                   (
                                                   )
                                                  right_arrow
                                                   =
                                                   >
                                                  anonymous_function_body
                                                   block
                                                    {
                                                    statement_list
                                                     statement
                                                      embedded_statement
                                                       simple_embedded_statement
                                                        return
                                                        expression
                                                         non_assignment_expression
                                                          conditional_expression
                                                           null_coalescing_expression
                                                            conditional_or_expression
                                                             conditional_and_expression
                                                              inclusive_or_expression
                                                               exclusive_or_expression
                                                                and_expression
                                                                 equality_expression
                                                                  relational_expression
                                                                   shift_expression
                                                                    additive_expression
                                                                     multiplicative_expression
                                                                      switch_expression
                                                                       range_expression
                                                                        unary_expression
                                                                         await
                                                                         unary_expression
                                                                          primary_expression
                                                                           primary_expression_start
                                                                            new
                                                                            type_
                                                                             base_type
                                                                              class_type
                                                                               namespace_or_type_name
                                                                                identifier
                                                                                 WebClient
                                                                            object_creation_expression
                                                                             (
                                                                             )
                                                                           member_access
                                                                            .
                                                                            identifier
                                                                             DownloadStringTaskAsync
                                                                           method_invocation
                                                                            (
                                                                            argument_list
                                                                             argument
                                                                              expression
                                                                               non_assignment_expression
                                                                                conditional_expression
                                                                                 null_coalescing_expression
                                                                                  conditional_or_expression
                                                                                   conditional_and_expression
                                                                                    inclusive_or_expression
                                                                                     exclusive_or_expression
                                                                                      and_expression
                                                                                       equality_expression
                                                                                        relational_expression
                                                                                         shift_expression
                                                                                          additive_expression
                                                                                           multiplicative_expression
                                                                                            switch_expression
                                                                                             range_expression
                                                                                              unary_expression
                                                                                               primary_expression
                                                                                                primary_expression_start
                                                                                                 literal
                                                                                                  string_literal
                                                                                                   "http://example.com"
                                                                            )
                                                        ;
                                                    }
                                             )
                       ;
                    }
              }
         }
     }
  namespace_member_declaration
   namespace_declaration
    namespace
    qualified_identifier
     identifier
      ConsoleApplication1
    namespace_body
     {
     namespace_member_declarations
      namespace_member_declaration
       namespace_declaration
        namespace
        qualified_identifier
         identifier
          RecursiveGenericBaseType
        namespace_body
         {
         namespace_member_declarations
          namespace_member_declaration
           type_declaration
            class_definition
             class
             identifier
              A
             type_parameter_list
              <
              type_parameter
               identifier
                T
              >
             class_base
              :
              class_type
               namespace_or_type_name
                identifier
                 B
                type_argument_list
                 <
                 type_
                  base_type
                   class_type
                    namespace_or_type_name
                     identifier
                      A
                     type_argument_list
                      <
                      type_
                       base_type
                        class_type
                         namespace_or_type_name
                          identifier
                           T
                      >
                 ,
                 type_
                  base_type
                   class_type
                    namespace_or_type_name
                     identifier
                      A
                     type_argument_list
                      <
                      type_
                       base_type
                        class_type
                         namespace_or_type_name
                          identifier
                           T
                      >
                 >
             type_parameter_constraints_clauses
              type_parameter_constraints_clause
               where
               identifier
                T
               :
               type_parameter_constraints
                primary_constraint
                 class_type
                  namespace_or_type_name
                   identifier
                    A
                   type_argument_list
                    <
                    type_
                     base_type
                      class_type
                       namespace_or_type_name
                        identifier
                         T
                    >
             class_body
              {
              class_member_declarations
               class_member_declaration
                all_member_modifiers
                 all_member_modifier
                  protected
                 all_member_modifier
                  virtual
                common_member_declaration
                 typed_member_declaration
                  type_
                   base_type
                    class_type
                     namespace_or_type_name
                      identifier
                       A
                      type_argument_list
                       <
                       type_
                        base_type
                         class_type
                          namespace_or_type_name
                           identifier
                            T
                       >
                  method_declaration
                   method_member_name
                    identifier
                     M
                   (
                   )
                   method_body
                    block
                     {
                     }
               class_member_declaration
                all_member_modifiers
                 all_member_modifier
                  protected
                 all_member_modifier
                  abstract
                common_member_declaration
                 typed_member_declaration
                  type_
                   base_type
                    class_type
                     namespace_or_type_name
                      identifier
                       B
                      type_argument_list
                       <
                       type_
                        base_type
                         class_type
                          namespace_or_type_name
                           identifier
                            A
                           type_argument_list
                            <
                            type_
                             base_type
                              class_type
                               namespace_or_type_name
                                identifier
                                 T
                            >
                       ,
                       type_
                        base_type
                         class_type
                          namespace_or_type_name
                           identifier
                            A
                           type_argument_list
                            <
                            type_
                             base_type
                              class_type
                               namespace_or_type_name
                                identifier
                                 T
                            >
                       >
                  method_declaration
                   method_member_name
                    identifier
                     N
                   (
                   )
                   method_body
                    block
                     {
                     }
               class_member_declaration
                all_member_modifiers
                 all_member_modifier
                  static
                common_member_declaration
                 typed_member_declaration
                  type_
                   base_type
                    class_type
                     namespace_or_type_name
                      identifier
                       B
                      type_argument_list
                       <
                       type_
                        base_type
                         class_type
                          namespace_or_type_name
                           identifier
                            A
                           type_argument_list
                            <
                            type_
                             base_type
                              class_type
                               namespace_or_type_name
                                identifier
                                 T
                            >
                       ,
                       type_
                        base_type
                         class_type
                          namespace_or_type_name
                           identifier
                            A
                           type_argument_list
                            <
                            type_
                             base_type
                              class_type
                               namespace_or_type_name
                                identifier
                                 T
                            >
                       >
                  method_declaration
                   method_member_name
                    identifier
                     O
                   (
                   )
                   method_body
                    block
                     {
                     }
              }
          namespace_member_declaration
           type_declaration
            all_member_modifiers
             all_member_modifier
              sealed
            class_definition
             class
             identifier
              B
             type_parameter_list
              <
              type_parameter
               identifier
                T1
              ,
              type_parameter
               identifier
                T2
              >
             class_base
              :
              class_type
               namespace_or_type_name
                identifier
                 A
                type_argument_list
                 <
                 type_
                  base_type
                   class_type
                    namespace_or_type_name
                     identifier
                      B
                     type_argument_list
                      <
                      type_
                       base_type
                        class_type
                         namespace_or_type_name
                          identifier
                           T1
                      ,
                      type_
                       base_type
                        class_type
                         namespace_or_type_name
                          identifier
                           T2
                      >
                 >
             class_body
              {
              class_member_declarations
               class_member_declaration
                all_member_modifiers
                 all_member_modifier
                  protected
                 all_member_modifier
                  override
                common_member_declaration
                 typed_member_declaration
                  type_
                   base_type
                    class_type
                     namespace_or_type_name
                      identifier
                       A
                      type_argument_list
                       <
                       type_
                        base_type
                         class_type
                          namespace_or_type_name
                           identifier
                            T
                       >
                  method_declaration
                   method_member_name
                    identifier
                     M
                   (
                   )
                   method_body
                    block
                     {
                     }
               class_member_declaration
                all_member_modifiers
                 all_member_modifier
                  protected
                 all_member_modifier
                  sealed
                 all_member_modifier
                  override
                common_member_declaration
                 typed_member_declaration
                  type_
                   base_type
                    class_type
                     namespace_or_type_name
                      identifier
                       B
                      type_argument_list
                       <
                       type_
                        base_type
                         class_type
                          namespace_or_type_name
                           identifier
                            A
                           type_argument_list
                            <
                            type_
                             base_type
                              class_type
                               namespace_or_type_name
                                identifier
                                 T
                            >
                       ,
                       type_
                        base_type
                         class_type
                          namespace_or_type_name
                           identifier
                            A
                           type_argument_list
                            <
                            type_
                             base_type
                              class_type
                               namespace_or_type_name
                                identifier
                                 T
                            >
                       >
                  method_declaration
                   method_member_name
                    identifier
                     N
                   (
                   )
                   method_body
                    block
                     {
                     }
               class_member_declaration
                all_member_modifiers
                 all_member_modifier
                  new
                 all_member_modifier
                  static
                common_member_declaration
                 typed_member_declaration
                  type_
                   base_type
                    class_type
                     namespace_or_type_name
                      identifier
                       A
                      type_argument_list
                       <
                       type_
                        base_type
                         class_type
                          namespace_or_type_name
                           identifier
                            T
                       >
                  method_declaration
                   method_member_name
                    identifier
                     O
                   (
                   )
                   method_body
                    block
                     {
                     }
              }
         }
      namespace_member_declaration
       namespace_declaration
        namespace
        qualified_identifier
         identifier
          Boo
        namespace_body
         {
         namespace_member_declarations
          namespace_member_declaration
           type_declaration
            all_member_modifiers
             all_member_modifier
              public
            class_definition
             class
             identifier
              Bar
             type_parameter_list
              <
              type_parameter
               identifier
                T
              >
             type_parameter_constraints_clauses
              type_parameter_constraints_clause
               where
               identifier
                T
               :
               type_parameter_constraints
                primary_constraint
                 class_type
                  namespace_or_type_name
                   identifier
                    IComparable
             class_body
              {
              class_member_declarations
               class_member_declaration
                all_member_modifiers
                 all_member_modifier
                  public
                common_member_declaration
                 typed_member_declaration
                  type_
                   base_type
                    class_type
                     namespace_or_type_name
                      identifier
                       T
                  field_declaration
                   variable_declarators
                    variable_declarator
                     identifier
                      f
                   ;
               class_member_declaration
                all_member_modifiers
                 all_member_modifier
                  public
                common_member_declaration
                 class_definition
                  class
                  identifier
                   Foo
                  type_parameter_list
                   <
                   type_parameter
                    identifier
                     U
                   >
                  class_base
                   :
                   class_type
                    namespace_or_type_name
                     identifier
                      IEnumerable
                     type_argument_list
                      <
                      type_
                       base_type
                        class_type
                         namespace_or_type_name
                          identifier
                           T
                      >
                  class_body
                   {
                   class_member_declarations
                    class_member_declaration
                     all_member_modifiers
                      all_member_modifier
                       public
                     common_member_declaration
                      void
                      method_declaration
                       method_member_name
                        identifier
                         Method
                       type_parameter_list
                        <
                        type_parameter
                         identifier
                          K
                        ,
                        type_parameter
                         identifier
                          V
                        >
                       (
                       formal_parameter_list
                        fixed_parameters
                         fixed_parameter
                          arg_declaration
                           type_
                            base_type
                             class_type
                              namespace_or_type_name
                               identifier
                                K
                           identifier
                            k
                         ,
                         fixed_parameter
                          arg_declaration
                           type_
                            base_type
                             class_type
                              namespace_or_type_name
                               identifier
                                T
                           identifier
                            t
                         ,
                         fixed_parameter
                          arg_declaration
                           type_
                            base_type
                             class_type
                              namespace_or_type_name
                               identifier
                                U
                           identifier
                            u
                       )
                       type_parameter_constraints_clauses
                        type_parameter_constraints_clause
                         where
                         identifier
                          K
                         :
                         type_parameter_constraints
                          primary_constraint
                           class_type
                            namespace_or_type_name
                             identifier
                              IList
                             type_argument_list
                              <
                              type_
                               base_type
                                class_type
                                 namespace_or_type_name
                                  identifier
                                   V
                              >
                          ,
                          secondary_constraints
                           namespace_or_type_name
                            identifier
                             IList
                            type_argument_list
                             <
                             type_
                              base_type
                               class_type
                                namespace_or_type_name
                                 identifier
                                  T
                             >
                           ,
                           namespace_or_type_name
                            identifier
                             IList
                            type_argument_list
                             <
                             type_
                              base_type
                               class_type
                                namespace_or_type_name
                                 identifier
                                  U
                             >
                        type_parameter_constraints_clause
                         where
                         identifier
                          V
                         :
                         type_parameter_constraints
                          primary_constraint
                           class_type
                            namespace_or_type_name
                             identifier
                              IList
                             type_argument_list
                              <
                              type_
                               base_type
                                class_type
                                 namespace_or_type_name
                                  identifier
                                   K
                              >
                       method_body
                        block
                         {
                         statement_list
                          statement
                           declarationStatement
                            local_variable_declaration
                             local_variable_type
                              type_
                               base_type
                                class_type
                                 namespace_or_type_name
                                  identifier
                                   A
                                  type_argument_list
                                   <
                                   type_
                                    base_type
                                     simple_type
                                      numeric_type
                                       integral_type
                                        int
                                   >
                             local_variable_declarator
                              identifier
                               a
                            ;
                          statement
                           embedded_statement
                            simple_embedded_statement
                             expression
                              non_assignment_expression
                               conditional_expression
                                null_coalescing_expression
                                 conditional_or_expression
                                  conditional_and_expression
                                   inclusive_or_expression
                                    exclusive_or_expression
                                     and_expression
                                      equality_expression
                                       relational_expression
                                        shift_expression
                                         additive_expression
                                          multiplicative_expression
                                           switch_expression
                                            range_expression
                                             unary_expression
                                              primary_expression
                                               primary_expression_start
                                                identifier
                                                 M
                                               method_invocation
                                                (
                                                argument_list
                                                 argument
                                                  expression
                                                   non_assignment_expression
                                                    conditional_expression
                                                     null_coalescing_expression
                                                      conditional_or_expression
                                                       conditional_and_expression
                                                        inclusive_or_expression
                                                         exclusive_or_expression
                                                          and_expression
                                                           equality_expression
                                                            relational_expression
                                                             shift_expression
                                                              additive_expression
                                                               multiplicative_expression
                                                                switch_expression
                                                                 range_expression
                                                                  unary_expression
                                                                   primary_expression
                                                                    primary_expression_start
                                                                     identifier
                                                                      A
                                                                     type_argument_list
                                                                      <
                                                                      type_
                                                                       base_type
                                                                        class_type
                                                                         namespace_or_type_name
                                                                          identifier
                                                                           B
                                                                      ,
                                                                      type_
                                                                       base_type
                                                                        class_type
                                                                         namespace_or_type_name
                                                                          identifier
                                                                           C
                                                                      >
                                                                    method_invocation
                                                                     (
                                                                     argument_list
                                                                      argument
                                                                       expression
                                                                        non_assignment_expression
                                                                         conditional_expression
                                                                          null_coalescing_expression
                                                                           conditional_or_expression
                                                                            conditional_and_expression
                                                                             inclusive_or_expression
                                                                              exclusive_or_expression
                                                                               and_expression
                                                                                equality_expression
                                                                                 relational_expression
                                                                                  shift_expression
                                                                                   additive_expression
                                                                                    multiplicative_expression
                                                                                     switch_expression
                                                                                      range_expression
                                                                                       unary_expression
                                                                                        primary_expression
                                                                                         primary_expression_start
                                                                                          literal
                                                                                           5
                                                                     )
                                                )
                             ;
                         }
                   }
                  ;
              }
             ;
         }
        ;
      namespace_member_declaration
       type_declaration
        class_definition
         class
         identifier
          Test
         class_body
          {
          class_member_declarations
           class_member_declaration
            common_member_declaration
             void
             method_declaration
              method_member_name
               identifier
                Bar3
              (
              )
              method_body
               block
                {
                statement_list
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      x
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         new
                                         type_
                                          base_type
                                           class_type
                                            namespace_or_type_name
                                             identifier
                                              Boo
                                             .
                                             identifier
                                              Bar
                                             type_argument_list
                                              <
                                              type_
                                               base_type
                                                simple_type
                                                 numeric_type
                                                  integral_type
                                                   int
                                              >
                                             .
                                             identifier
                                              Foo
                                             type_argument_list
                                              <
                                              type_
                                               base_type
                                                class_type
                                                 object
                                              >
                                         object_creation_expression
                                          (
                                          )
                   ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     non_assignment_expression
                      conditional_expression
                       null_coalescing_expression
                        conditional_or_expression
                         conditional_and_expression
                          inclusive_or_expression
                           exclusive_or_expression
                            and_expression
                             equality_expression
                              relational_expression
                               shift_expression
                                additive_expression
                                 multiplicative_expression
                                  switch_expression
                                   range_expression
                                    unary_expression
                                     primary_expression
                                      primary_expression_start
                                       identifier
                                        x
                                      member_access
                                       .
                                       identifier
                                        Method
                                       type_argument_list
                                        <
                                        type_
                                         base_type
                                          class_type
                                           string
                                        ,
                                        type_
                                         base_type
                                          class_type
                                           string
                                        >
                                      method_invocation
                                       (
                                       argument_list
                                        argument
                                         expression
                                          non_assignment_expression
                                           conditional_expression
                                            null_coalescing_expression
                                             conditional_or_expression
                                              conditional_and_expression
                                               inclusive_or_expression
                                                exclusive_or_expression
                                                 and_expression
                                                  equality_expression
                                                   relational_expression
                                                    shift_expression
                                                     additive_expression
                                                      multiplicative_expression
                                                       switch_expression
                                                        range_expression
                                                         unary_expression
                                                          primary_expression
                                                           primary_expression_start
                                                            literal
                                                             string_literal
                                                              " "
                                        ,
                                        argument
                                         expression
                                          non_assignment_expression
                                           conditional_expression
                                            null_coalescing_expression
                                             conditional_or_expression
                                              conditional_and_expression
                                               inclusive_or_expression
                                                exclusive_or_expression
                                                 and_expression
                                                  equality_expression
                                                   relational_expression
                                                    shift_expression
                                                     additive_expression
                                                      multiplicative_expression
                                                       switch_expression
                                                        range_expression
                                                         unary_expression
                                                          primary_expression
                                                           primary_expression_start
                                                            literal
                                                             5
                                        ,
                                        argument
                                         expression
                                          non_assignment_expression
                                           conditional_expression
                                            null_coalescing_expression
                                             conditional_or_expression
                                              conditional_and_expression
                                               inclusive_or_expression
                                                exclusive_or_expression
                                                 and_expression
                                                  equality_expression
                                                   relational_expression
                                                    shift_expression
                                                     additive_expression
                                                      multiplicative_expression
                                                       switch_expression
                                                        range_expression
                                                         unary_expression
                                                          primary_expression
                                                           primary_expression_start
                                                            new
                                                            type_
                                                             base_type
                                                              class_type
                                                               object
                                                            object_creation_expression
                                                             (
                                                             )
                                       )
                    ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      q
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        query_expression
                         from_clause
                          from
                          identifier
                           i
                          in
                          expression
                           non_assignment_expression
                            conditional_expression
                             null_coalescing_expression
                              conditional_or_expression
                               conditional_and_expression
                                inclusive_or_expression
                                 exclusive_or_expression
                                  and_expression
                                   equality_expression
                                    relational_expression
                                     shift_expression
                                      additive_expression
                                       multiplicative_expression
                                        switch_expression
                                         range_expression
                                          unary_expression
                                           primary_expression
                                            primary_expression_start
                                             new
                                             type_
                                              base_type
                                               simple_type
                                                numeric_type
                                                 integral_type
                                                  int
                                              rank_specifier
                                               [
                                               ]
                                             object_or_collection_initializer
                                              collection_initializer
                                               {
                                               element_initializer
                                                non_assignment_expression
                                                 conditional_expression
                                                  null_coalescing_expression
                                                   conditional_or_expression
                                                    conditional_and_expression
                                                     inclusive_or_expression
                                                      exclusive_or_expression
                                                       and_expression
                                                        equality_expression
                                                         relational_expression
                                                          shift_expression
                                                           additive_expression
                                                            multiplicative_expression
                                                             switch_expression
                                                              range_expression
                                                               unary_expression
                                                                primary_expression
                                                                 primary_expression_start
                                                                  literal
                                                                   1
                                               ,
                                               element_initializer
                                                non_assignment_expression
                                                 conditional_expression
                                                  null_coalescing_expression
                                                   conditional_or_expression
                                                    conditional_and_expression
                                                     inclusive_or_expression
                                                      exclusive_or_expression
                                                       and_expression
                                                        equality_expression
                                                         relational_expression
                                                          shift_expression
                                                           additive_expression
                                                            multiplicative_expression
                                                             switch_expression
                                                              range_expression
                                                               unary_expression
                                                                primary_expression
                                                                 primary_expression_start
                                                                  literal
                                                                   2
                                               ,
                                               element_initializer
                                                non_assignment_expression
                                                 conditional_expression
                                                  null_coalescing_expression
                                                   conditional_or_expression
                                                    conditional_and_expression
                                                     inclusive_or_expression
                                                      exclusive_or_expression
                                                       and_expression
                                                        equality_expression
                                                         relational_expression
                                                          shift_expression
                                                           additive_expression
                                                            multiplicative_expression
                                                             switch_expression
                                                              range_expression
                                                               unary_expression
                                                                primary_expression
                                                                 primary_expression_start
                                                                  literal
                                                                   3
                                               ,
                                               element_initializer
                                                non_assignment_expression
                                                 conditional_expression
                                                  null_coalescing_expression
                                                   conditional_or_expression
                                                    conditional_and_expression
                                                     inclusive_or_expression
                                                      exclusive_or_expression
                                                       and_expression
                                                        equality_expression
                                                         relational_expression
                                                          shift_expression
                                                           additive_expression
                                                            multiplicative_expression
                                                             switch_expression
                                                              range_expression
                                                               unary_expression
                                                                primary_expression
                                                                 primary_expression_start
                                                                  literal
                                                                   4
                                               }
                         query_body
                          query_body_clause
                           where_clause
                            where
                            expression
                             non_assignment_expression
                              conditional_expression
                               null_coalescing_expression
                                conditional_or_expression
                                 conditional_and_expression
                                  inclusive_or_expression
                                   exclusive_or_expression
                                    and_expression
                                     equality_expression
                                      relational_expression
                                       shift_expression
                                        additive_expression
                                         multiplicative_expression
                                          switch_expression
                                           range_expression
                                            unary_expression
                                             primary_expression
                                              primary_expression_start
                                               identifier
                                                i
                                       >
                                       shift_expression
                                        additive_expression
                                         multiplicative_expression
                                          switch_expression
                                           range_expression
                                            unary_expression
                                             primary_expression
                                              primary_expression_start
                                               literal
                                                5
                          select_or_group_clause
                           select
                           expression
                            non_assignment_expression
                             conditional_expression
                              null_coalescing_expression
                               conditional_or_expression
                                conditional_and_expression
                                 inclusive_or_expression
                                  exclusive_or_expression
                                   and_expression
                                    equality_expression
                                     relational_expression
                                      shift_expression
                                       additive_expression
                                        multiplicative_expression
                                         switch_expression
                                          range_expression
                                           unary_expression
                                            primary_expression
                                             primary_expression_start
                                              identifier
                                               i
                   ;
                }
           class_member_declaration
            all_member_modifiers
             all_member_modifier
              public
             all_member_modifier
              static
            common_member_declaration
             conversion_operator_declarator
              implicit
              operator
              type_
               base_type
                class_type
                 namespace_or_type_name
                  identifier
                   Test
              (
              arg_declaration
               type_
                base_type
                 class_type
                  string
               identifier
                s
              )
             body
              block
               {
               statement_list
                statement
                 embedded_statement
                  simple_embedded_statement
                   return
                   expression
                    non_assignment_expression
                     conditional_expression
                      null_coalescing_expression
                       conditional_or_expression
                        conditional_and_expression
                         inclusive_or_expression
                          exclusive_or_expression
                           and_expression
                            equality_expression
                             relational_expression
                              shift_expression
                               additive_expression
                                multiplicative_expression
                                 switch_expression
                                  range_expression
                                   unary_expression
                                    primary_expression
                                     primary_expression_start
                                      new
                                      type_
                                       base_type
                                        class_type
                                         namespace_or_type_name
                                          identifier
                                           ConsoleApplication1
                                          .
                                          identifier
                                           Test
                                      object_creation_expression
                                       (
                                       )
                   ;
               }
           class_member_declaration
            all_member_modifiers
             all_member_modifier
              public
             all_member_modifier
              static
            common_member_declaration
             conversion_operator_declarator
              explicit
              operator
              type_
               base_type
                class_type
                 namespace_or_type_name
                  identifier
                   Test
              (
              arg_declaration
               type_
                base_type
                 class_type
                  string
               identifier
                s
               =
               expression
                non_assignment_expression
                 conditional_expression
                  null_coalescing_expression
                   conditional_or_expression
                    conditional_and_expression
                     inclusive_or_expression
                      exclusive_or_expression
                       and_expression
                        equality_expression
                         relational_expression
                          shift_expression
                           additive_expression
                            multiplicative_expression
                             switch_expression
                              range_expression
                               unary_expression
                                primary_expression
                                 primary_expression_start
                                  literal
                                   string_literal
                                    ""
              )
             body
              block
               {
               statement_list
                statement
                 embedded_statement
                  simple_embedded_statement
                   return
                   expression
                    non_assignment_expression
                     conditional_expression
                      null_coalescing_expression
                       conditional_or_expression
                        conditional_and_expression
                         inclusive_or_expression
                          exclusive_or_expression
                           and_expression
                            equality_expression
                             relational_expression
                              shift_expression
                               additive_expression
                                multiplicative_expression
                                 switch_expression
                                  range_expression
                                   unary_expression
                                    primary_expression
                                     primary_expression_start
                                      new
                                      type_
                                       base_type
                                        class_type
                                         namespace_or_type_name
                                          identifier
                                           Test
                                      object_creation_expression
                                       (
                                       )
                   ;
               }
           class_member_declaration
            all_member_modifiers
             all_member_modifier
              public
            common_member_declaration
             typed_member_declaration
              type_
               base_type
                simple_type
                 numeric_type
                  integral_type
                   int
              field_declaration
               variable_declarators
                variable_declarator
                 identifier
                  foo
                 =
                 variable_initializer
                  expression
                   non_assignment_expression
                    conditional_expression
                     null_coalescing_expression
                      conditional_or_expression
                       conditional_and_expression
                        inclusive_or_expression
                         exclusive_or_expression
                          and_expression
                           equality_expression
                            relational_expression
                             shift_expression
                              additive_expression
                               multiplicative_expression
                                switch_expression
                                 range_expression
                                  unary_expression
                                   primary_expression
                                    primary_expression_start
                                     literal
                                      5
               ;
           class_member_declaration
            common_member_declaration
             void
             method_declaration
              method_member_name
               identifier
                Bar2
              (
              )
              method_body
               block
                {
                statement_list
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     assignment
                      unary_expression
                       primary_expression
                        primary_expression_start
                         identifier
                          foo
                      assignment_operator
                       =
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          6
                    ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     assignment
                      unary_expression
                       primary_expression
                        primary_expression_start
                         this
                        member_access
                         .
                         identifier
                          Foo
                      assignment_operator
                       =
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         5.GetType
                                        method_invocation
                                         (
                                         )
                    ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       class_type
                        namespace_or_type_name
                         identifier
                          Test
                    local_variable_declarator
                     identifier
                      t
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          string_literal
                                           "sss"
                   ;
                }
           class_member_declaration
            all_member_modifiers
             all_member_modifier
              public
            common_member_declaration
             event_declaration
              event
              type_
               base_type
                class_type
                 namespace_or_type_name
                  identifier
                   EventHandler
              variable_declarators
               variable_declarator
                identifier
                 MyEvent
                =
                variable_initializer
                 expression
                  non_assignment_expression
                   conditional_expression
                    null_coalescing_expression
                     conditional_or_expression
                      conditional_and_expression
                       inclusive_or_expression
                        exclusive_or_expression
                         and_expression
                          equality_expression
                           relational_expression
                            shift_expression
                             additive_expression
                              multiplicative_expression
                               switch_expression
                                range_expression
                                 unary_expression
                                  primary_expression
                                   primary_expression_start
                                    delegate
                                    block
                                     {
                                     }
              ;
           class_member_declaration
            common_member_declaration
             void
             method_declaration
              method_member_name
               identifier
                Blah
              (
              )
              method_body
               block
                {
                statement_list
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       simple_type
                        numeric_type
                         integral_type
                          int
                    local_variable_declarator
                     identifier
                      i
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          5
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       simple_type
                        numeric_type
                         integral_type
                          int
                      ?
                    local_variable_declarator
                     identifier
                      j
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          6
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       class_type
                        namespace_or_type_name
                         identifier
                          Expression
                         type_argument_list
                          <
                          type_
                           base_type
                            class_type
                             namespace_or_type_name
                              identifier
                               Func
                              type_argument_list
                               <
                               type_
                                base_type
                                 simple_type
                                  numeric_type
                                   integral_type
                                    int
                               >
                          >
                    local_variable_declarator
                     identifier
                      e
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        lambda_expression
                         anonymous_function_signature
                          (
                          )
                         right_arrow
                          =
                          >
                         anonymous_function_body
                          throwable_expression
                           expression
                            non_assignment_expression
                             conditional_expression
                              null_coalescing_expression
                               conditional_or_expression
                                conditional_and_expression
                                 inclusive_or_expression
                                  exclusive_or_expression
                                   and_expression
                                    equality_expression
                                     relational_expression
                                      shift_expression
                                       additive_expression
                                        multiplicative_expression
                                         switch_expression
                                          range_expression
                                           unary_expression
                                            primary_expression
                                             primary_expression_start
                                              identifier
                                               i
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       class_type
                        namespace_or_type_name
                         identifier
                          Expression
                         type_argument_list
                          <
                          type_
                           base_type
                            class_type
                             namespace_or_type_name
                              identifier
                               Func
                              type_argument_list
                               <
                               type_
                                base_type
                                 simple_type
                                  bool
                               ,
                               type_
                                base_type
                                 class_type
                                  namespace_or_type_name
                                   identifier
                                    Action
                               >
                          >
                    local_variable_declarator
                     identifier
                      e2
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        lambda_expression
                         anonymous_function_signature
                          identifier
                           b
                         right_arrow
                          =
                          >
                         anonymous_function_body
                          throwable_expression
                           expression
                            non_assignment_expression
                             lambda_expression
                              anonymous_function_signature
                               (
                               )
                              right_arrow
                               =
                               >
                              anonymous_function_body
                               block
                                {
                                statement_list
                                 statement
                                  embedded_statement
                                   simple_embedded_statement
                                    return
                                    ;
                                }
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       class_type
                        namespace_or_type_name
                         identifier
                          Func
                         type_argument_list
                          <
                          type_
                           base_type
                            simple_type
                             bool
                          ,
                          type_
                           base_type
                            simple_type
                             bool
                          >
                    local_variable_declarator
                     identifier
                      f
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         async
                                         delegate
                                         (
                                         explicit_anonymous_function_parameter_list
                                          explicit_anonymous_function_parameter
                                           type_
                                            base_type
                                             simple_type
                                              bool
                                           identifier
                                            a
                                         )
                                         block
                                          {
                                          statement_list
                                           statement
                                            embedded_statement
                                             simple_embedded_statement
                                              return
                                              expression
                                               non_assignment_expression
                                                conditional_expression
                                                 null_coalescing_expression
                                                  conditional_or_expression
                                                   conditional_and_expression
                                                    inclusive_or_expression
                                                     exclusive_or_expression
                                                      and_expression
                                                       equality_expression
                                                        relational_expression
                                                         shift_expression
                                                          additive_expression
                                                           multiplicative_expression
                                                            switch_expression
                                                             range_expression
                                                              unary_expression
                                                               await
                                                               unary_expression
                                                                !
                                                                unary_expression
                                                                 primary_expression
                                                                  primary_expression_start
                                                                   identifier
                                                                    a
                                              ;
                                          }
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       class_type
                        namespace_or_type_name
                         identifier
                          Func
                         type_argument_list
                          <
                          type_
                           base_type
                            simple_type
                             numeric_type
                              integral_type
                               int
                          ,
                          type_
                           base_type
                            simple_type
                             numeric_type
                              integral_type
                               int
                          ,
                          type_
                           base_type
                            simple_type
                             numeric_type
                              integral_type
                               int
                          >
                    local_variable_declarator
                     identifier
                      f2
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        lambda_expression
                         anonymous_function_signature
                          (
                          implicit_anonymous_function_parameter_list
                           identifier
                            a
                           ,
                           identifier
                            b
                          )
                         right_arrow
                          =
                          >
                         anonymous_function_body
                          throwable_expression
                           expression
                            non_assignment_expression
                             conditional_expression
                              null_coalescing_expression
                               conditional_or_expression
                                conditional_and_expression
                                 inclusive_or_expression
                                  exclusive_or_expression
                                   and_expression
                                    equality_expression
                                     relational_expression
                                      shift_expression
                                       additive_expression
                                        multiplicative_expression
                                         switch_expression
                                          range_expression
                                           unary_expression
                                            primary_expression
                                             primary_expression_start
                                              literal
                                               0
                   ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     assignment
                      unary_expression
                       primary_expression
                        primary_expression_start
                         identifier
                          f2
                      assignment_operator
                       =
                      expression
                       non_assignment_expression
                        lambda_expression
                         anonymous_function_signature
                          (
                          explicit_anonymous_function_parameter_list
                           explicit_anonymous_function_parameter
                            type_
                             base_type
                              simple_type
                               numeric_type
                                integral_type
                                 int
                            identifier
                             a
                           ,
                           explicit_anonymous_function_parameter
                            type_
                             base_type
                              simple_type
                               numeric_type
                                integral_type
                                 int
                            identifier
                             b
                          )
                         right_arrow
                          =
                          >
                         anonymous_function_body
                          throwable_expression
                           expression
                            non_assignment_expression
                             conditional_expression
                              null_coalescing_expression
                               conditional_or_expression
                                conditional_and_expression
                                 inclusive_or_expression
                                  exclusive_or_expression
                                   and_expression
                                    equality_expression
                                     relational_expression
                                      shift_expression
                                       additive_expression
                                        multiplicative_expression
                                         switch_expression
                                          range_expression
                                           unary_expression
                                            primary_expression
                                             primary_expression_start
                                              literal
                                               1
                    ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       class_type
                        namespace_or_type_name
                         identifier
                          Action
                    local_variable_declarator
                     identifier
                      a
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          Blah
                   ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     assignment
                      unary_expression
                       primary_expression
                        primary_expression_start
                         identifier
                          f2
                      assignment_operator
                       =
                      expression
                       non_assignment_expression
                        lambda_expression
                         anonymous_function_signature
                          (
                          )
                         right_arrow
                          =
                          >
                         anonymous_function_body
                          block
                           {
                           }
                    ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     assignment
                      unary_expression
                       primary_expression
                        primary_expression_start
                         identifier
                          f2
                      assignment_operator
                       =
                      expression
                       non_assignment_expression
                        lambda_expression
                         anonymous_function_signature
                          (
                          )
                         right_arrow
                          =
                          >
                         anonymous_function_body
                          block
                           {
                           statement_list
                            statement
                             embedded_statement
                              simple_embedded_statement
                               ;
                           }
                    ;
                }
           class_member_declaration
            common_member_declaration
             delegate_definition
              delegate
              return_type
               type_
                base_type
                 class_type
                  namespace_or_type_name
                   identifier
                    Recursive
              identifier
               Recursive
              (
              formal_parameter_list
               fixed_parameters
                fixed_parameter
                 arg_declaration
                  type_
                   base_type
                    class_type
                     namespace_or_type_name
                      identifier
                       Recursive
                  identifier
                   r
              )
              ;
           class_member_declaration
            common_member_declaration
             delegate_definition
              delegate
              return_type
               type_
                base_type
                 class_type
                  namespace_or_type_name
                   identifier
                    Recursive
              identifier
               Recursive
              variant_type_parameter_list
               <
               variant_type_parameter
                identifier
                 A
               ,
               variant_type_parameter
                identifier
                 R
               >
              (
              formal_parameter_list
               fixed_parameters
                fixed_parameter
                 arg_declaration
                  type_
                   base_type
                    class_type
                     namespace_or_type_name
                      identifier
                       Recursive
                      type_argument_list
                       <
                       type_
                        base_type
                         class_type
                          namespace_or_type_name
                           identifier
                            A
                       ,
                       type_
                        base_type
                         class_type
                          namespace_or_type_name
                           identifier
                            R
                       >
                  identifier
                   r
              )
              ;
           class_member_declaration
            all_member_modifiers
             all_member_modifier
              public
            common_member_declaration
             typed_member_declaration
              type_
               base_type
                class_type
                 namespace_or_type_name
                  identifier
                   Type
              property_declaration
               member_name
                namespace_or_type_name
                 identifier
                  Foo
               {
               accessor_declarations
                attributes
                 attribute_section
                  [
                  attribute_list
                   attribute
                    namespace_or_type_name
                     identifier
                      Obsolete
                    (
                    attribute_argument
                     expression
                      non_assignment_expression
                       conditional_expression
                        null_coalescing_expression
                         conditional_or_expression
                          conditional_and_expression
                           inclusive_or_expression
                            exclusive_or_expression
                             and_expression
                              equality_expression
                               relational_expression
                                shift_expression
                                 additive_expression
                                  multiplicative_expression
                                   switch_expression
                                    range_expression
                                     unary_expression
                                      primary_expression
                                       primary_expression_start
                                        literal
                                         string_literal
                                          "Name"
                    ,
                    attribute_argument
                     expression
                      assignment
                       unary_expression
                        primary_expression
                         primary_expression_start
                          identifier
                           error
                       assignment_operator
                        =
                       expression
                        non_assignment_expression
                         conditional_expression
                          null_coalescing_expression
                           conditional_or_expression
                            conditional_and_expression
                             inclusive_or_expression
                              exclusive_or_expression
                               and_expression
                                equality_expression
                                 relational_expression
                                  shift_expression
                                   additive_expression
                                    multiplicative_expression
                                     switch_expression
                                      range_expression
                                       unary_expression
                                        primary_expression
                                         primary_expression_start
                                          literal
                                           boolean_literal
                                            false
                    )
                  ]
                get
                accessor_body
                 block
                  {
                  statement_list
                   statement
                    declarationStatement
                     local_variable_declaration
                      local_variable_type
                       var
                      local_variable_declarator
                       identifier
                        result
                       =
                       local_variable_initializer
                        expression
                         non_assignment_expression
                          conditional_expression
                           null_coalescing_expression
                            conditional_or_expression
                             conditional_and_expression
                              inclusive_or_expression
                               exclusive_or_expression
                                and_expression
                                 equality_expression
                                  relational_expression
                                   shift_expression
                                    additive_expression
                                     multiplicative_expression
                                      switch_expression
                                       range_expression
                                        unary_expression
                                         primary_expression
                                          primary_expression_start
                                           typeof
                                           (
                                           type_
                                            base_type
                                             class_type
                                              namespace_or_type_name
                                               identifier
                                                IEnumerable
                                               type_argument_list
                                                <
                                                type_
                                                 base_type
                                                  simple_type
                                                   numeric_type
                                                    integral_type
                                                     int
                                                >
                                           )
                     ;
                   statement
                    declarationStatement
                     local_variable_declaration
                      local_variable_type
                       var
                      local_variable_declarator
                       identifier
                        t
                       =
                       local_variable_initializer
                        expression
                         non_assignment_expression
                          conditional_expression
                           null_coalescing_expression
                            conditional_or_expression
                             conditional_and_expression
                              inclusive_or_expression
                               exclusive_or_expression
                                and_expression
                                 equality_expression
                                  relational_expression
                                   shift_expression
                                    additive_expression
                                     multiplicative_expression
                                      switch_expression
                                       range_expression
                                        unary_expression
                                         primary_expression
                                          primary_expression_start
                                           typeof
                                           (
                                           type_
                                            base_type
                                             simple_type
                                              numeric_type
                                               integral_type
                                                int
                                            ?
                                           )
                                  ==
                                  relational_expression
                                   shift_expression
                                    additive_expression
                                     multiplicative_expression
                                      switch_expression
                                       range_expression
                                        unary_expression
                                         primary_expression
                                          primary_expression_start
                                           typeof
                                           (
                                           type_
                                            base_type
                                             class_type
                                              namespace_or_type_name
                                               identifier
                                                Nullable
                                               type_argument_list
                                                <
                                                type_
                                                 base_type
                                                  simple_type
                                                   numeric_type
                                                    integral_type
                                                     int
                                                >
                                           )
                     ;
                   statement
                    embedded_statement
                     simple_embedded_statement
                      expression
                       assignment
                        unary_expression
                         primary_expression
                          primary_expression_start
                           identifier
                            t
                        assignment_operator
                         =
                        expression
                         non_assignment_expression
                          conditional_expression
                           null_coalescing_expression
                            conditional_or_expression
                             conditional_and_expression
                              inclusive_or_expression
                               exclusive_or_expression
                                and_expression
                                 equality_expression
                                  relational_expression
                                   shift_expression
                                    additive_expression
                                     multiplicative_expression
                                      switch_expression
                                       range_expression
                                        unary_expression
                                         primary_expression
                                          primary_expression_start
                                           typeof
                                           (
                                           type_
                                            base_type
                                             class_type
                                              namespace_or_type_name
                                               identifier
                                                IEnumerable
                                               type_argument_list
                                                <
                                                type_
                                                 base_type
                                                  simple_type
                                                   numeric_type
                                                    integral_type
                                                     int
                                                 ?
                                                 rank_specifier
                                                  [
                                                  ]
                                                 rank_specifier
                                                  [
                                                  ]
                                                 rank_specifier
                                                  [
                                                  ]
                                                >
                                           )
                      ;
                   statement
                    embedded_statement
                     simple_embedded_statement
                      return
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         typeof
                                         (
                                         unbound_type_name
                                          identifier
                                           IEnumerable
                                          generic_dimension_specifier
                                           <
                                           >
                                         )
                      ;
                  }
                set_accessor_declaration
                 set
                 accessor_body
                  block
                   {
                   statement_list
                    statement
                     declarationStatement
                      local_variable_declaration
                       local_variable_type
                        var
                       local_variable_declarator
                        identifier
                         t
                        =
                        local_variable_initializer
                         expression
                          non_assignment_expression
                           conditional_expression
                            null_coalescing_expression
                             conditional_or_expression
                              conditional_and_expression
                               inclusive_or_expression
                                exclusive_or_expression
                                 and_expression
                                  equality_expression
                                   relational_expression
                                    shift_expression
                                     additive_expression
                                      multiplicative_expression
                                       switch_expression
                                        range_expression
                                         unary_expression
                                          primary_expression
                                           primary_expression_start
                                            typeof
                                            (
                                            unbound_type_name
                                             identifier
                                              System
                                             .
                                             identifier
                                              Int32
                                            )
                      ;
                    statement
                     embedded_statement
                      simple_embedded_statement
                       expression
                        non_assignment_expression
                         conditional_expression
                          null_coalescing_expression
                           conditional_or_expression
                            conditional_and_expression
                             inclusive_or_expression
                              exclusive_or_expression
                               and_expression
                                equality_expression
                                 relational_expression
                                  shift_expression
                                   additive_expression
                                    multiplicative_expression
                                     switch_expression
                                      range_expression
                                       unary_expression
                                        primary_expression
                                         primary_expression_start
                                          identifier
                                           t
                                         member_access
                                          .
                                          identifier
                                           ToString
                                         method_invocation
                                          (
                                          )
                       ;
                    statement
                     embedded_statement
                      simple_embedded_statement
                       expression
                        assignment
                         unary_expression
                          primary_expression
                           primary_expression_start
                            identifier
                             t
                         assignment_operator
                          =
                         expression
                          non_assignment_expression
                           conditional_expression
                            null_coalescing_expression
                             conditional_or_expression
                              conditional_and_expression
                               inclusive_or_expression
                                exclusive_or_expression
                                 and_expression
                                  equality_expression
                                   relational_expression
                                    shift_expression
                                     additive_expression
                                      multiplicative_expression
                                       switch_expression
                                        range_expression
                                         unary_expression
                                          primary_expression
                                           primary_expression_start
                                            identifier
                                             value
                       ;
                   }
               }
           class_member_declaration
            all_member_modifiers
             all_member_modifier
              public
            common_member_declaration
             void
             method_declaration
              method_member_name
               identifier
                Constants
              (
              )
              method_body
               block
                {
                statement_list
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       simple_type
                        numeric_type
                         integral_type
                          int
                    local_variable_declarator
                     identifier
                      i
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          1
                                   +
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          2
                                   +
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          3
                                   +
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          5
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       class_type
                        namespace_or_type_name
                         qualified_alias_member
                          identifier
                           global
                          ::
                          identifier
                           System
                         .
                         identifier
                          String
                    local_variable_declarator
                     identifier
                      s
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          string_literal
                                           "a"
                                   +
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       cast_expression
                                        (
                                        type_
                                         base_type
                                          class_type
                                           namespace_or_type_name
                                            identifier
                                             System
                                            .
                                            identifier
                                             String
                                        )
                                        unary_expression
                                         primary_expression
                                          primary_expression_start
                                           literal
                                            string_literal
                                             "a"
                                   +
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          string_literal
                                           "a"
                                   +
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          string_literal
                                           "a"
                                   +
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          string_literal
                                           "a"
                                   +
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          string_literal
                                           "A"
                   ;
                }
           class_member_declaration
            all_member_modifiers
             all_member_modifier
              public
            common_member_declaration
             void
             method_declaration
              method_member_name
               identifier
                ConstructedType
              (
              )
              method_body
               block
                {
                statement_list
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       class_type
                        namespace_or_type_name
                         identifier
                          List
                         type_argument_list
                          <
                          type_
                           base_type
                            simple_type
                             numeric_type
                              integral_type
                               int
                          >
                    local_variable_declarator
                     identifier
                      i
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          null
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       simple_type
                        numeric_type
                         integral_type
                          int
                    local_variable_declarator
                     identifier
                      c
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          i
                                        member_access
                                         .
                                         identifier
                                          Count
                   ;
                }
          }
     }
  namespace_member_declaration
   namespace_declaration
    namespace
    qualified_identifier
     identifier
      Comments
     .
     identifier
      XmlComments
     .
     identifier
      UndocumentedKeywords
    namespace_body
     {
     namespace_member_declarations
      namespace_member_declaration
       type_declaration
        class_definition
         class
         identifier
          C
         type_parameter_list
          <
          type_parameter
           identifier
            T
          >
         class_body
          {
          class_member_declarations
           class_member_declaration
            common_member_declaration
             void
             method_declaration
              method_member_name
               identifier
                M
              type_parameter_list
               <
               type_parameter
                identifier
                 U
               >
              (
              formal_parameter_list
               fixed_parameters
                fixed_parameter
                 arg_declaration
                  type_
                   base_type
                    class_type
                     namespace_or_type_name
                      identifier
                       T
                  identifier
                   t
                ,
                fixed_parameter
                 arg_declaration
                  type_
                   base_type
                    class_type
                     namespace_or_type_name
                      identifier
                       U
                  identifier
                   u
              )
              method_body
               block
                {
                statement_list
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       simple_type
                        numeric_type
                         integral_type
                          int
                    local_variable_declarator
                     identifier
                      intValue
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          0
                   ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     assignment
                      unary_expression
                       primary_expression
                        primary_expression_start
                         identifier
                          intValue
                      assignment_operator
                       =
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          intValue
                                   +
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          1
                    ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       class_type
                        string
                    local_variable_declarator
                     identifier
                      strValue
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          string_literal
                                           "hello"
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       class_type
                        namespace_or_type_name
                         identifier
                          MyClass
                    local_variable_declarator
                     identifier
                      c
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         new
                                         type_
                                          base_type
                                           class_type
                                            namespace_or_type_name
                                             identifier
                                              MyClass
                                         object_creation_expression
                                          (
                                          )
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       class_type
                        string
                    local_variable_declarator
                     identifier
                      verbatimStr
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          string_literal
                                           @"\\\\"
                   ;
                }
          }
      namespace_member_declaration
       type_declaration
        class_definition
         class
         identifier
          TestClass
         class_body
          {
          }
      namespace_member_declaration
       type_declaration
        class_definition
         class
         identifier
          TestClass
         class_body
          {
          }
      namespace_member_declaration
       type_declaration
        class_definition
         class
         identifier
          yield
         class_body
          {
          class_member_declarations
           class_member_declaration
            common_member_declaration
             void
             method_declaration
              method_member_name
               identifier
                Foo
              type_parameter_list
               <
               type_parameter
                identifier
                 U
               >
              (
              formal_parameter_list
               fixed_parameters
                fixed_parameter
                 __arglist
              )
              method_body
               block
                {
                statement_list
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       class_type
                        namespace_or_type_name
                         identifier
                          C
                         type_argument_list
                          <
                          type_
                           base_type
                            class_type
                             namespace_or_type_name
                              identifier
                               U
                          >
                    local_variable_declarator
                     identifier
                      c
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          null
                   ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     non_assignment_expression
                      conditional_expression
                       null_coalescing_expression
                        conditional_or_expression
                         conditional_and_expression
                          inclusive_or_expression
                           exclusive_or_expression
                            and_expression
                             equality_expression
                              relational_expression
                               shift_expression
                                additive_expression
                                 multiplicative_expression
                                  switch_expression
                                   range_expression
                                    unary_expression
                                     primary_expression
                                      primary_expression_start
                                       identifier
                                        c
                                      member_access
                                       .
                                       identifier
                                        M
                                       type_argument_list
                                        <
                                        type_
                                         base_type
                                          simple_type
                                           numeric_type
                                            integral_type
                                             int
                                        >
                                      method_invocation
                                       (
                                       argument_list
                                        argument
                                         expression
                                          non_assignment_expression
                                           conditional_expression
                                            null_coalescing_expression
                                             conditional_or_expression
                                              conditional_and_expression
                                               inclusive_or_expression
                                                exclusive_or_expression
                                                 and_expression
                                                  equality_expression
                                                   relational_expression
                                                    shift_expression
                                                     additive_expression
                                                      multiplicative_expression
                                                       switch_expression
                                                        range_expression
                                                         unary_expression
                                                          primary_expression
                                                           primary_expression_start
                                                            literal
                                                             5
                                        ,
                                        argument
                                         expression
                                          non_assignment_expression
                                           conditional_expression
                                            null_coalescing_expression
                                             conditional_or_expression
                                              conditional_and_expression
                                               inclusive_or_expression
                                                exclusive_or_expression
                                                 and_expression
                                                  equality_expression
                                                   relational_expression
                                                    shift_expression
                                                     additive_expression
                                                      multiplicative_expression
                                                       switch_expression
                                                        range_expression
                                                         unary_expression
                                                          primary_expression
                                                           primary_expression_start
                                                            default
                                                            (
                                                            type_
                                                             base_type
                                                              class_type
                                                               namespace_or_type_name
                                                                identifier
                                                                 U
                                                            )
                                       )
                    ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       class_type
                        namespace_or_type_name
                         identifier
                          TypedReference
                    local_variable_declarator
                     identifier
                      tr
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          __makeref
                                        method_invocation
                                         (
                                         argument_list
                                          argument
                                           expression
                                            non_assignment_expression
                                             conditional_expression
                                              null_coalescing_expression
                                               conditional_or_expression
                                                conditional_and_expression
                                                 inclusive_or_expression
                                                  exclusive_or_expression
                                                   and_expression
                                                    equality_expression
                                                     relational_expression
                                                      shift_expression
                                                       additive_expression
                                                        multiplicative_expression
                                                         switch_expression
                                                          range_expression
                                                           unary_expression
                                                            primary_expression
                                                             primary_expression_start
                                                              identifier
                                                               c
                                         )
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       class_type
                        namespace_or_type_name
                         identifier
                          Type
                    local_variable_declarator
                     identifier
                      t
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          __reftype
                                        method_invocation
                                         (
                                         argument_list
                                          argument
                                           expression
                                            non_assignment_expression
                                             conditional_expression
                                              null_coalescing_expression
                                               conditional_or_expression
                                                conditional_and_expression
                                                 inclusive_or_expression
                                                  exclusive_or_expression
                                                   and_expression
                                                    equality_expression
                                                     relational_expression
                                                      shift_expression
                                                       additive_expression
                                                        multiplicative_expression
                                                         switch_expression
                                                          range_expression
                                                           unary_expression
                                                            primary_expression
                                                             primary_expression_start
                                                              identifier
                                                               tr
                                         )
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       simple_type
                        numeric_type
                         integral_type
                          int
                    local_variable_declarator
                     identifier
                      j
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          __refvalue
                                        method_invocation
                                         (
                                         argument_list
                                          argument
                                           expression
                                            non_assignment_expression
                                             conditional_expression
                                              null_coalescing_expression
                                               conditional_or_expression
                                                conditional_and_expression
                                                 inclusive_or_expression
                                                  exclusive_or_expression
                                                   and_expression
                                                    equality_expression
                                                     relational_expression
                                                      shift_expression
                                                       additive_expression
                                                        multiplicative_expression
                                                         switch_expression
                                                          range_expression
                                                           unary_expression
                                                            primary_expression
                                                             primary_expression_start
                                                              identifier
                                                               tr
                                          ,
                                          argument
                                           expression
                                            non_assignment_expression
                                             conditional_expression
                                              null_coalescing_expression
                                               conditional_or_expression
                                                conditional_and_expression
                                                 inclusive_or_expression
                                                  exclusive_or_expression
                                                   and_expression
                                                    equality_expression
                                                     relational_expression
                                                      shift_expression
                                                       additive_expression
                                                        multiplicative_expression
                                                         switch_expression
                                                          range_expression
                                                           unary_expression
                                                            primary_expression
                                                             primary_expression_start
                                                              predefined_type
                                                               int
                                         )
                   ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     non_assignment_expression
                      conditional_expression
                       null_coalescing_expression
                        conditional_or_expression
                         conditional_and_expression
                          inclusive_or_expression
                           exclusive_or_expression
                            and_expression
                             equality_expression
                              relational_expression
                               shift_expression
                                additive_expression
                                 multiplicative_expression
                                  switch_expression
                                   range_expression
                                    unary_expression
                                     primary_expression
                                      primary_expression_start
                                       identifier
                                        Params
                                      method_invocation
                                       (
                                       argument_list
                                        argument
                                         identifier
                                          a
                                         :
                                         expression
                                          non_assignment_expression
                                           conditional_expression
                                            null_coalescing_expression
                                             conditional_or_expression
                                              conditional_and_expression
                                               inclusive_or_expression
                                                exclusive_or_expression
                                                 and_expression
                                                  equality_expression
                                                   relational_expression
                                                    shift_expression
                                                     additive_expression
                                                      multiplicative_expression
                                                       switch_expression
                                                        range_expression
                                                         unary_expression
                                                          primary_expression
                                                           primary_expression_start
                                                            identifier
                                                             t
                                        ,
                                        argument
                                         identifier
                                          b
                                         :
                                         expression
                                          non_assignment_expression
                                           conditional_expression
                                            null_coalescing_expression
                                             conditional_or_expression
                                              conditional_and_expression
                                               inclusive_or_expression
                                                exclusive_or_expression
                                                 and_expression
                                                  equality_expression
                                                   relational_expression
                                                    shift_expression
                                                     additive_expression
                                                      multiplicative_expression
                                                       switch_expression
                                                        range_expression
                                                         unary_expression
                                                          primary_expression
                                                           primary_expression_start
                                                            identifier
                                                             t
                                       )
                    ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     non_assignment_expression
                      conditional_expression
                       null_coalescing_expression
                        conditional_or_expression
                         conditional_and_expression
                          inclusive_or_expression
                           exclusive_or_expression
                            and_expression
                             equality_expression
                              relational_expression
                               shift_expression
                                additive_expression
                                 multiplicative_expression
                                  switch_expression
                                   range_expression
                                    unary_expression
                                     primary_expression
                                      primary_expression_start
                                       identifier
                                        Params
                                      method_invocation
                                       (
                                       argument_list
                                        argument
                                         ref
                                         expression
                                          non_assignment_expression
                                           conditional_expression
                                            null_coalescing_expression
                                             conditional_or_expression
                                              conditional_and_expression
                                               inclusive_or_expression
                                                exclusive_or_expression
                                                 and_expression
                                                  equality_expression
                                                   relational_expression
                                                    shift_expression
                                                     additive_expression
                                                      multiplicative_expression
                                                       switch_expression
                                                        range_expression
                                                         unary_expression
                                                          primary_expression
                                                           primary_expression_start
                                                            identifier
                                                             c
                                        ,
                                        argument
                                         out
                                         expression
                                          non_assignment_expression
                                           conditional_expression
                                            null_coalescing_expression
                                             conditional_or_expression
                                              conditional_and_expression
                                               inclusive_or_expression
                                                exclusive_or_expression
                                                 and_expression
                                                  equality_expression
                                                   relational_expression
                                                    shift_expression
                                                     additive_expression
                                                      multiplicative_expression
                                                       switch_expression
                                                        range_expression
                                                         unary_expression
                                                          primary_expression
                                                           primary_expression_start
                                                            identifier
                                                             c
                                       )
                    ;
                }
           class_member_declaration
            common_member_declaration
             void
             method_declaration
              method_member_name
               identifier
                Params
              (
              formal_parameter_list
               fixed_parameters
                fixed_parameter
                 parameter_modifier
                  ref
                 arg_declaration
                  type_
                   base_type
                    class_type
                     namespace_or_type_name
                      identifier
                       dynamic
                  identifier
                   a
                ,
                fixed_parameter
                 parameter_modifier
                  out
                 arg_declaration
                  type_
                   base_type
                    class_type
                     namespace_or_type_name
                      identifier
                       dynamic
                  identifier
                   b
               ,
               parameter_array
                params
                array_type
                 base_type
                  class_type
                   namespace_or_type_name
                    identifier
                     dynamic
                 rank_specifier
                  [
                  ]
                identifier
                 c
              )
              method_body
               block
                {
                }
           class_member_declaration
            common_member_declaration
             void
             method_declaration
              method_member_name
               identifier
                Params
              (
              formal_parameter_list
               fixed_parameters
                fixed_parameter
                 parameter_modifier
                  out
                 arg_declaration
                  type_
                   base_type
                    class_type
                     namespace_or_type_name
                      identifier
                       dynamic
                  identifier
                   a
                  =
                  expression
                   non_assignment_expression
                    conditional_expression
                     null_coalescing_expression
                      conditional_or_expression
                       conditional_and_expression
                        inclusive_or_expression
                         exclusive_or_expression
                          and_expression
                           equality_expression
                            relational_expression
                             shift_expression
                              additive_expression
                               multiplicative_expression
                                switch_expression
                                 range_expression
                                  unary_expression
                                   primary_expression
                                    primary_expression_start
                                     literal
                                      2
                ,
                fixed_parameter
                 parameter_modifier
                  ref
                 arg_declaration
                  type_
                   base_type
                    class_type
                     namespace_or_type_name
                      identifier
                       dynamic
                  identifier
                   c
                  =
                  expression
                   non_assignment_expression
                    conditional_expression
                     null_coalescing_expression
                      conditional_or_expression
                       conditional_and_expression
                        inclusive_or_expression
                         exclusive_or_expression
                          and_expression
                           equality_expression
                            relational_expression
                             shift_expression
                              additive_expression
                               multiplicative_expression
                                switch_expression
                                 range_expression
                                  unary_expression
                                   primary_expression
                                    primary_expression_start
                                     default
                                     (
                                     type_
                                      base_type
                                       class_type
                                        namespace_or_type_name
                                         identifier
                                          dynamic
                                     )
               ,
               parameter_array
                params
                array_type
                 base_type
                  class_type
                   namespace_or_type_name
                    identifier
                     dynamic
                 rank_specifier
                  [
                  ]
                 rank_specifier
                  [
                  ]
                identifier
                 c
              )
              method_body
               block
                {
                }
           class_member_declaration
            all_member_modifiers
             all_member_modifier
              public
             all_member_modifier
              override
            common_member_declaration
             typed_member_declaration
              type_
               base_type
                class_type
                 string
              method_declaration
               method_member_name
                identifier
                 ToString
               (
               )
               method_body
                block
                 {
                 statement_list
                  statement
                   embedded_statement
                    simple_embedded_statement
                     return
                     expression
                      non_assignment_expression
                       conditional_expression
                        null_coalescing_expression
                         conditional_or_expression
                          conditional_and_expression
                           inclusive_or_expression
                            exclusive_or_expression
                             and_expression
                              equality_expression
                               relational_expression
                                shift_expression
                                 additive_expression
                                  multiplicative_expression
                                   switch_expression
                                    range_expression
                                     unary_expression
                                      primary_expression
                                       primary_expression_start
                                        base
                                        .
                                        identifier
                                         ToString
                                       method_invocation
                                        (
                                        )
                     ;
                 }
           class_member_declaration
            all_member_modifiers
             all_member_modifier
              public
             all_member_modifier
              partial
            common_member_declaration
             void
             method_declaration
              method_member_name
               identifier
                OnError
              (
              )
              method_body
               ;
           class_member_declaration
            all_member_modifiers
             all_member_modifier
              public
             all_member_modifier
              partial
            common_member_declaration
             void
             method_declaration
              method_member_name
               identifier
                method
              (
              )
              method_body
               block
                {
                statement_list
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       simple_type
                        numeric_type
                         integral_type
                          int
                      ?
                      rank_specifier
                       [
                       ]
                    local_variable_declarator
                     identifier
                      a
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         new
                                         type_
                                          base_type
                                           simple_type
                                            numeric_type
                                             integral_type
                                              int
                                          ?
                                         [
                                         expression_list
                                          expression
                                           non_assignment_expression
                                            conditional_expression
                                             null_coalescing_expression
                                              conditional_or_expression
                                               conditional_and_expression
                                                inclusive_or_expression
                                                 exclusive_or_expression
                                                  and_expression
                                                   equality_expression
                                                    relational_expression
                                                     shift_expression
                                                      additive_expression
                                                       multiplicative_expression
                                                        switch_expression
                                                         range_expression
                                                          unary_expression
                                                           primary_expression
                                                            primary_expression_start
                                                             literal
                                                              5
                                         ]
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       simple_type
                        numeric_type
                         integral_type
                          int
                      rank_specifier
                       [
                       ]
                    local_variable_declarator
                     identifier
                      var
                     =
                     local_variable_initializer
                      array_initializer
                       {
                       variable_initializer
                        expression
                         non_assignment_expression
                          conditional_expression
                           null_coalescing_expression
                            conditional_or_expression
                             conditional_and_expression
                              inclusive_or_expression
                               exclusive_or_expression
                                and_expression
                                 equality_expression
                                  relational_expression
                                   shift_expression
                                    additive_expression
                                     multiplicative_expression
                                      switch_expression
                                       range_expression
                                        unary_expression
                                         primary_expression
                                          primary_expression_start
                                           literal
                                            1
                       ,
                       variable_initializer
                        expression
                         non_assignment_expression
                          conditional_expression
                           null_coalescing_expression
                            conditional_or_expression
                             conditional_and_expression
                              inclusive_or_expression
                               exclusive_or_expression
                                and_expression
                                 equality_expression
                                  relational_expression
                                   shift_expression
                                    additive_expression
                                     multiplicative_expression
                                      switch_expression
                                       range_expression
                                        unary_expression
                                         primary_expression
                                          primary_expression_start
                                           literal
                                            2
                       ,
                       variable_initializer
                        expression
                         non_assignment_expression
                          conditional_expression
                           null_coalescing_expression
                            conditional_or_expression
                             conditional_and_expression
                              inclusive_or_expression
                               exclusive_or_expression
                                and_expression
                                 equality_expression
                                  relational_expression
                                   shift_expression
                                    additive_expression
                                     multiplicative_expression
                                      switch_expression
                                       range_expression
                                        unary_expression
                                         primary_expression
                                          primary_expression_start
                                           literal
                                            3
                       ,
                       variable_initializer
                        expression
                         non_assignment_expression
                          conditional_expression
                           null_coalescing_expression
                            conditional_or_expression
                             conditional_and_expression
                              inclusive_or_expression
                               exclusive_or_expression
                                and_expression
                                 equality_expression
                                  relational_expression
                                   shift_expression
                                    additive_expression
                                     multiplicative_expression
                                      switch_expression
                                       range_expression
                                        unary_expression
                                         primary_expression
                                          primary_expression_start
                                           literal
                                            4
                       ,
                       variable_initializer
                        expression
                         non_assignment_expression
                          conditional_expression
                           null_coalescing_expression
                            conditional_or_expression
                             conditional_and_expression
                              inclusive_or_expression
                               exclusive_or_expression
                                and_expression
                                 equality_expression
                                  relational_expression
                                   shift_expression
                                    additive_expression
                                     multiplicative_expression
                                      switch_expression
                                       range_expression
                                        unary_expression
                                         primary_expression
                                          primary_expression_start
                                           literal
                                            5
                       }
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       simple_type
                        numeric_type
                         integral_type
                          int
                    local_variable_declarator
                     identifier
                      i
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          a
                                        bracket_expression
                                         [
                                         indexer_argument
                                          expression
                                           non_assignment_expression
                                            conditional_expression
                                             null_coalescing_expression
                                              conditional_or_expression
                                               conditional_and_expression
                                                inclusive_or_expression
                                                 exclusive_or_expression
                                                  and_expression
                                                   equality_expression
                                                    relational_expression
                                                     shift_expression
                                                      additive_expression
                                                       multiplicative_expression
                                                        switch_expression
                                                         range_expression
                                                          unary_expression
                                                           primary_expression
                                                            primary_expression_start
                                                             identifier
                                                              i
                                         ]
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       class_type
                        namespace_or_type_name
                         identifier
                          Foo
                         type_argument_list
                          <
                          type_
                           base_type
                            class_type
                             namespace_or_type_name
                              identifier
                               T
                          >
                    local_variable_declarator
                     identifier
                      f
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         new
                                         type_
                                          base_type
                                           class_type
                                            namespace_or_type_name
                                             identifier
                                              Foo
                                             type_argument_list
                                              <
                                              type_
                                               base_type
                                                simple_type
                                                 numeric_type
                                                  integral_type
                                                   int
                                              >
                                         object_creation_expression
                                          (
                                          )
                   ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     non_assignment_expression
                      conditional_expression
                       null_coalescing_expression
                        conditional_or_expression
                         conditional_and_expression
                          inclusive_or_expression
                           exclusive_or_expression
                            and_expression
                             equality_expression
                              relational_expression
                               shift_expression
                                additive_expression
                                 multiplicative_expression
                                  switch_expression
                                   range_expression
                                    unary_expression
                                     primary_expression
                                      primary_expression_start
                                       identifier
                                        f
                                      member_access
                                       .
                                       identifier
                                        method
                                      method_invocation
                                       (
                                       )
                    ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     assignment
                      unary_expression
                       primary_expression
                        primary_expression_start
                         identifier
                          i
                      assignment_operator
                       =
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          i
                                   +
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          i
                                   -
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          i
                                    *
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          i
                                    /
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          i
                                    %
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          i
                               &
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          i
                             |
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          i
                              ^
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          i
                    ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       simple_type
                        bool
                    local_variable_declarator
                     identifier
                      b
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          boolean_literal
                                           true
                               &
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          boolean_literal
                                           false
                             |
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          boolean_literal
                                           true
                              ^
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          boolean_literal
                                           false
                   ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     assignment
                      unary_expression
                       primary_expression
                        primary_expression_start
                         identifier
                          b
                      assignment_operator
                       =
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       !
                                       unary_expression
                                        primary_expression
                                         primary_expression_start
                                          identifier
                                           b
                    ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     assignment
                      unary_expression
                       primary_expression
                        primary_expression_start
                         identifier
                          i
                      assignment_operator
                       =
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       ~
                                       unary_expression
                                        primary_expression
                                         primary_expression_start
                                          identifier
                                           i
                    ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     assignment
                      unary_expression
                       primary_expression
                        primary_expression_start
                         identifier
                          b
                      assignment_operator
                       =
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          i
                                 <
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          i
                            &&
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          i
                                 >
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          i
                    ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       simple_type
                        numeric_type
                         integral_type
                          int
                      ?
                    local_variable_declarator
                     identifier
                      ii
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          5
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       simple_type
                        numeric_type
                         integral_type
                          int
                    local_variable_declarator
                     identifier
                      f
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          boolean_literal
                                           true
                         ?
                         throwable_expression
                          expression
                           non_assignment_expression
                            conditional_expression
                             null_coalescing_expression
                              conditional_or_expression
                               conditional_and_expression
                                inclusive_or_expression
                                 exclusive_or_expression
                                  and_expression
                                   equality_expression
                                    relational_expression
                                     shift_expression
                                      additive_expression
                                       multiplicative_expression
                                        switch_expression
                                         range_expression
                                          unary_expression
                                           primary_expression
                                            primary_expression_start
                                             literal
                                              1
                         :
                         throwable_expression
                          expression
                           non_assignment_expression
                            conditional_expression
                             null_coalescing_expression
                              conditional_or_expression
                               conditional_and_expression
                                inclusive_or_expression
                                 exclusive_or_expression
                                  and_expression
                                   equality_expression
                                    relational_expression
                                     shift_expression
                                      additive_expression
                                       multiplicative_expression
                                        switch_expression
                                         range_expression
                                          unary_expression
                                           primary_expression
                                            primary_expression_start
                                             literal
                                              0
                   ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     non_assignment_expression
                      conditional_expression
                       null_coalescing_expression
                        conditional_or_expression
                         conditional_and_expression
                          inclusive_or_expression
                           exclusive_or_expression
                            and_expression
                             equality_expression
                              relational_expression
                               shift_expression
                                additive_expression
                                 multiplicative_expression
                                  switch_expression
                                   range_expression
                                    unary_expression
                                     primary_expression
                                      primary_expression_start
                                       identifier
                                        i
                                      ++
                    ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     non_assignment_expression
                      conditional_expression
                       null_coalescing_expression
                        conditional_or_expression
                         conditional_and_expression
                          inclusive_or_expression
                           exclusive_or_expression
                            and_expression
                             equality_expression
                              relational_expression
                               shift_expression
                                additive_expression
                                 multiplicative_expression
                                  switch_expression
                                   range_expression
                                    unary_expression
                                     primary_expression
                                      primary_expression_start
                                       identifier
                                        i
                                      --
                    ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     assignment
                      unary_expression
                       primary_expression
                        primary_expression_start
                         identifier
                          b
                      assignment_operator
                       =
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          boolean_literal
                                           true
                            &&
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          boolean_literal
                                           false
                           ||
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          boolean_literal
                                           true
                    ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     non_assignment_expression
                      conditional_expression
                       null_coalescing_expression
                        conditional_or_expression
                         conditional_and_expression
                          inclusive_or_expression
                           exclusive_or_expression
                            and_expression
                             equality_expression
                              relational_expression
                               shift_expression
                                additive_expression
                                 multiplicative_expression
                                  switch_expression
                                   range_expression
                                    unary_expression
                                     primary_expression
                                      primary_expression_start
                                       identifier
                                        i
                                <<
                                additive_expression
                                 multiplicative_expression
                                  switch_expression
                                   range_expression
                                    unary_expression
                                     primary_expression
                                      primary_expression_start
                                       literal
                                        5
                    ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     non_assignment_expression
                      conditional_expression
                       null_coalescing_expression
                        conditional_or_expression
                         conditional_and_expression
                          inclusive_or_expression
                           exclusive_or_expression
                            and_expression
                             equality_expression
                              relational_expression
                               shift_expression
                                additive_expression
                                 multiplicative_expression
                                  switch_expression
                                   range_expression
                                    unary_expression
                                     primary_expression
                                      primary_expression_start
                                       identifier
                                        i
                                right_shift
                                 >
                                 >
                                additive_expression
                                 multiplicative_expression
                                  switch_expression
                                   range_expression
                                    unary_expression
                                     primary_expression
                                      primary_expression_start
                                       literal
                                        5
                    ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     assignment
                      unary_expression
                       primary_expression
                        primary_expression_start
                         identifier
                          b
                      assignment_operator
                       =
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          i
                                ==
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          i
                            &&
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          i
                                !=
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          i
                            &&
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          i
                                 <=
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          i
                            &&
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          i
                                 >=
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          i
                    ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     assignment
                      unary_expression
                       primary_expression
                        primary_expression_start
                         identifier
                          i
                      assignment_operator
                       +=
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          5.0
                    ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     assignment
                      unary_expression
                       primary_expression
                        primary_expression_start
                         identifier
                          i
                      assignment_operator
                       -=
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          i
                    ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     assignment
                      unary_expression
                       primary_expression
                        primary_expression_start
                         identifier
                          i
                      assignment_operator
                       *=
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          i
                    ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     assignment
                      unary_expression
                       primary_expression
                        primary_expression_start
                         identifier
                          i
                      assignment_operator
                       /=
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          i
                    ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     assignment
                      unary_expression
                       primary_expression
                        primary_expression_start
                         identifier
                          i
                      assignment_operator
                       %=
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          i
                    ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     assignment
                      unary_expression
                       primary_expression
                        primary_expression_start
                         identifier
                          i
                      assignment_operator
                       &=
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          i
                    ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     assignment
                      unary_expression
                       primary_expression
                        primary_expression_start
                         identifier
                          i
                      assignment_operator
                       |=
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          i
                    ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     assignment
                      unary_expression
                       primary_expression
                        primary_expression_start
                         identifier
                          i
                      assignment_operator
                       ^=
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          i
                    ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     assignment
                      unary_expression
                       primary_expression
                        primary_expression_start
                         identifier
                          i
                      assignment_operator
                       <<=
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          i
                    ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     assignment
                      unary_expression
                       primary_expression
                        primary_expression_start
                         identifier
                          i
                      assignment_operator
                       right_shift_assignment
                        >
                        >=
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          i
                    ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       class_type
                        object
                    local_variable_declarator
                     identifier
                      s
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        lambda_expression
                         anonymous_function_signature
                          identifier
                           x
                         right_arrow
                          =
                          >
                         anonymous_function_body
                          throwable_expression
                           expression
                            non_assignment_expression
                             conditional_expression
                              null_coalescing_expression
                               conditional_or_expression
                                conditional_and_expression
                                 inclusive_or_expression
                                  exclusive_or_expression
                                   and_expression
                                    equality_expression
                                     relational_expression
                                      shift_expression
                                       additive_expression
                                        multiplicative_expression
                                         switch_expression
                                          range_expression
                                           unary_expression
                                            primary_expression
                                             primary_expression_start
                                              identifier
                                               x
                                        +
                                        multiplicative_expression
                                         switch_expression
                                          range_expression
                                           unary_expression
                                            primary_expression
                                             primary_expression_start
                                              literal
                                               1
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       simple_type
                        numeric_type
                         floating_point_type
                          double
                    local_variable_declarator
                     identifier
                      d
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          .3
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       class_type
                        namespace_or_type_name
                         identifier
                          Point
                    local_variable_declarator
                     identifier
                      point
                   ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    unsafe
                    block
                     {
                     statement_list
                      statement
                       declarationStatement
                        local_variable_declaration
                         local_variable_type
                          type_
                           base_type
                            class_type
                             namespace_or_type_name
                              identifier
                               Point
                           *
                         local_variable_declarator
                          identifier
                           p
                          =
                          local_variable_initializer
                           expression
                            non_assignment_expression
                             conditional_expression
                              null_coalescing_expression
                               conditional_or_expression
                                conditional_and_expression
                                 inclusive_or_expression
                                  exclusive_or_expression
                                   and_expression
                                    equality_expression
                                     relational_expression
                                      shift_expression
                                       additive_expression
                                        multiplicative_expression
                                         switch_expression
                                          range_expression
                                           unary_expression
                                            &
                                            unary_expression
                                             primary_expression
                                              primary_expression_start
                                               identifier
                                                point
                        ;
                      statement
                       embedded_statement
                        simple_embedded_statement
                         expression
                          assignment
                           unary_expression
                            primary_expression
                             primary_expression_start
                              identifier
                               p
                             ->
                             identifier
                              x
                           assignment_operator
                            =
                           expression
                            non_assignment_expression
                             conditional_expression
                              null_coalescing_expression
                               conditional_or_expression
                                conditional_and_expression
                                 inclusive_or_expression
                                  exclusive_or_expression
                                   and_expression
                                    equality_expression
                                     relational_expression
                                      shift_expression
                                       additive_expression
                                        multiplicative_expression
                                         switch_expression
                                          range_expression
                                           unary_expression
                                            primary_expression
                                             primary_expression_start
                                              literal
                                               10
                         ;
                     }
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       class_type
                        namespace_or_type_name
                         qualified_alias_member
                          identifier
                           IO
                          ::
                          identifier
                           BinaryReader
                    local_variable_declarator
                     identifier
                      br
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          null
                   ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     assignment
                      unary_expression
                       primary_expression
                        primary_expression_start
                         identifier
                          x
                        bracket_expression
                         [
                         indexer_argument
                          identifier
                           i
                          :
                          expression
                           non_assignment_expression
                            conditional_expression
                             null_coalescing_expression
                              conditional_or_expression
                               conditional_and_expression
                                inclusive_or_expression
                                 exclusive_or_expression
                                  and_expression
                                   equality_expression
                                    relational_expression
                                     shift_expression
                                      additive_expression
                                       multiplicative_expression
                                        switch_expression
                                         range_expression
                                          unary_expression
                                           primary_expression
                                            primary_expression_start
                                             literal
                                              1
                         ]
                      assignment_operator
                       =
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          3
                    ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     assignment
                      unary_expression
                       primary_expression
                        primary_expression_start
                         identifier
                          x
                        bracket_expression
                         [
                         indexer_argument
                          identifier
                           i
                          :
                          expression
                           non_assignment_expression
                            conditional_expression
                             null_coalescing_expression
                              conditional_or_expression
                               conditional_and_expression
                                inclusive_or_expression
                                 exclusive_or_expression
                                  and_expression
                                   equality_expression
                                    relational_expression
                                     shift_expression
                                      additive_expression
                                       multiplicative_expression
                                        switch_expression
                                         range_expression
                                          unary_expression
                                           primary_expression
                                            primary_expression_start
                                             literal
                                              1
                         ,
                         indexer_argument
                          identifier
                           j
                          :
                          expression
                           non_assignment_expression
                            conditional_expression
                             null_coalescing_expression
                              conditional_or_expression
                               conditional_and_expression
                                inclusive_or_expression
                                 exclusive_or_expression
                                  and_expression
                                   equality_expression
                                    relational_expression
                                     shift_expression
                                      additive_expression
                                       multiplicative_expression
                                        switch_expression
                                         range_expression
                                          unary_expression
                                           primary_expression
                                            primary_expression_start
                                             literal
                                              5
                         ]
                      assignment_operator
                       =
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          string_literal
                                           "str"
                    ;
                }
           class_member_declaration
            common_member_declaration
             struct_definition
              struct
              identifier
               Point
              struct_body
               {
               struct_member_declaration
                all_member_modifiers
                 all_member_modifier
                  public
                common_member_declaration
                 typed_member_declaration
                  type_
                   base_type
                    simple_type
                     numeric_type
                      integral_type
                       int
                  field_declaration
                   variable_declarators
                    variable_declarator
                     identifier
                      X
                   ;
               struct_member_declaration
                all_member_modifiers
                 all_member_modifier
                  public
                common_member_declaration
                 typed_member_declaration
                  type_
                   base_type
                    simple_type
                     numeric_type
                      integral_type
                       int
                  field_declaration
                   variable_declarators
                    variable_declarator
                     identifier
                      Y
                   ;
               struct_member_declaration
                all_member_modifiers
                 all_member_modifier
                  public
                common_member_declaration
                 void
                 method_declaration
                  method_member_name
                   identifier
                    ThisAccess
                  (
                  )
                  method_body
                   block
                    {
                    statement_list
                     statement
                      embedded_statement
                       simple_embedded_statement
                        expression
                         assignment
                          unary_expression
                           primary_expression
                            primary_expression_start
                             this
                          assignment_operator
                           =
                          expression
                           non_assignment_expression
                            conditional_expression
                             null_coalescing_expression
                              conditional_or_expression
                               conditional_and_expression
                                inclusive_or_expression
                                 exclusive_or_expression
                                  and_expression
                                   equality_expression
                                    relational_expression
                                     shift_expression
                                      additive_expression
                                       multiplicative_expression
                                        switch_expression
                                         range_expression
                                          unary_expression
                                           primary_expression
                                            primary_expression_start
                                             this
                        ;
                    }
               }
          }
      namespace_member_declaration
       type_declaration
        class_definition
         class
         identifier
          CSharp6Features
         class_body
          {
          class_member_declarations
           class_member_declaration
            all_member_modifiers
             all_member_modifier
              public
            common_member_declaration
             typed_member_declaration
              type_
               base_type
                class_type
                 string
              property_declaration
               member_name
                namespace_or_type_name
                 identifier
                  First
               {
               accessor_declarations
                get
                accessor_body
                 ;
                set_accessor_declaration
                 set
                 accessor_body
                  ;
               }
               =
               variable_initializer
                expression
                 non_assignment_expression
                  conditional_expression
                   null_coalescing_expression
                    conditional_or_expression
                     conditional_and_expression
                      inclusive_or_expression
                       exclusive_or_expression
                        and_expression
                         equality_expression
                          relational_expression
                           shift_expression
                            additive_expression
                             multiplicative_expression
                              switch_expression
                               range_expression
                                unary_expression
                                 primary_expression
                                  primary_expression_start
                                   literal
                                    string_literal
                                     "Jane"
               ;
           class_member_declaration
            all_member_modifiers
             all_member_modifier
              public
            common_member_declaration
             typed_member_declaration
              type_
               base_type
                class_type
                 string
              property_declaration
               member_name
                namespace_or_type_name
                 identifier
                  Last
               {
               accessor_declarations
                get
                accessor_body
                 ;
                set_accessor_declaration
                 set
                 accessor_body
                  ;
               }
               =
               variable_initializer
                expression
                 non_assignment_expression
                  conditional_expression
                   null_coalescing_expression
                    conditional_or_expression
                     conditional_and_expression
                      inclusive_or_expression
                       exclusive_or_expression
                        and_expression
                         equality_expression
                          relational_expression
                           shift_expression
                            additive_expression
                             multiplicative_expression
                              switch_expression
                               range_expression
                                unary_expression
                                 primary_expression
                                  primary_expression_start
                                   literal
                                    string_literal
                                     "Doe"
               ;
           class_member_declaration
            all_member_modifiers
             all_member_modifier
              public
            common_member_declaration
             typed_member_declaration
              type_
               base_type
                class_type
                 string
              property_declaration
               member_name
                namespace_or_type_name
                 identifier
                  Third
               {
               accessor_declarations
                get
                accessor_body
                 ;
               }
               =
               variable_initializer
                expression
                 non_assignment_expression
                  conditional_expression
                   null_coalescing_expression
                    conditional_or_expression
                     conditional_and_expression
                      inclusive_or_expression
                       exclusive_or_expression
                        and_expression
                         equality_expression
                          relational_expression
                           shift_expression
                            additive_expression
                             multiplicative_expression
                              switch_expression
                               range_expression
                                unary_expression
                                 primary_expression
                                  primary_expression_start
                                   literal
                                    string_literal
                                     "Jane"
               ;
           class_member_declaration
            all_member_modifiers
             all_member_modifier
              public
            common_member_declaration
             typed_member_declaration
              type_
               base_type
                class_type
                 string
              property_declaration
               member_name
                namespace_or_type_name
                 identifier
                  Fourth
               {
               accessor_declarations
                get
                accessor_body
                 ;
               }
               =
               variable_initializer
                expression
                 non_assignment_expression
                  conditional_expression
                   null_coalescing_expression
                    conditional_or_expression
                     conditional_and_expression
                      inclusive_or_expression
                       exclusive_or_expression
                        and_expression
                         equality_expression
                          relational_expression
                           shift_expression
                            additive_expression
                             multiplicative_expression
                              switch_expression
                               range_expression
                                unary_expression
                                 primary_expression
                                  primary_expression_start
                                   literal
                                    string_literal
                                     "Doe"
               ;
           class_member_declaration
            all_member_modifiers
             all_member_modifier
              public
            common_member_declaration
             typed_member_declaration
              type_
               base_type
                class_type
                 namespace_or_type_name
                  identifier
                   Point
              method_declaration
               method_member_name
                identifier
                 Move
               (
               formal_parameter_list
                fixed_parameters
                 fixed_parameter
                  arg_declaration
                   type_
                    base_type
                     simple_type
                      numeric_type
                       integral_type
                        int
                   identifier
                    dx
                 ,
                 fixed_parameter
                  arg_declaration
                   type_
                    base_type
                     simple_type
                      numeric_type
                       integral_type
                        int
                   identifier
                    dy
               )
               right_arrow
                =
                >
               throwable_expression
                expression
                 non_assignment_expression
                  conditional_expression
                   null_coalescing_expression
                    conditional_or_expression
                     conditional_and_expression
                      inclusive_or_expression
                       exclusive_or_expression
                        and_expression
                         equality_expression
                          relational_expression
                           shift_expression
                            additive_expression
                             multiplicative_expression
                              switch_expression
                               range_expression
                                unary_expression
                                 primary_expression
                                  primary_expression_start
                                   new
                                   type_
                                    base_type
                                     class_type
                                      namespace_or_type_name
                                       identifier
                                        Point
                                   object_creation_expression
                                    (
                                    argument_list
                                     argument
                                      expression
                                       non_assignment_expression
                                        conditional_expression
                                         null_coalescing_expression
                                          conditional_or_expression
                                           conditional_and_expression
                                            inclusive_or_expression
                                             exclusive_or_expression
                                              and_expression
                                               equality_expression
                                                relational_expression
                                                 shift_expression
                                                  additive_expression
                                                   multiplicative_expression
                                                    switch_expression
                                                     range_expression
                                                      unary_expression
                                                       primary_expression
                                                        primary_expression_start
                                                         identifier
                                                          x
                                                   +
                                                   multiplicative_expression
                                                    switch_expression
                                                     range_expression
                                                      unary_expression
                                                       primary_expression
                                                        primary_expression_start
                                                         identifier
                                                          dx
                                     ,
                                     argument
                                      expression
                                       non_assignment_expression
                                        conditional_expression
                                         null_coalescing_expression
                                          conditional_or_expression
                                           conditional_and_expression
                                            inclusive_or_expression
                                             exclusive_or_expression
                                              and_expression
                                               equality_expression
                                                relational_expression
                                                 shift_expression
                                                  additive_expression
                                                   multiplicative_expression
                                                    switch_expression
                                                     range_expression
                                                      unary_expression
                                                       primary_expression
                                                        primary_expression_start
                                                         identifier
                                                          y
                                                   +
                                                   multiplicative_expression
                                                    switch_expression
                                                     range_expression
                                                      unary_expression
                                                       primary_expression
                                                        primary_expression_start
                                                         identifier
                                                          dy
                                    )
               ;
           class_member_declaration
            all_member_modifiers
             all_member_modifier
              public
             all_member_modifier
              static
            common_member_declaration
             typed_member_declaration
              type_
               base_type
                class_type
                 namespace_or_type_name
                  identifier
                   Complex
              operator_declaration
               operator
               overloadable_operator
                +
               (
               arg_declaration
                type_
                 base_type
                  class_type
                   namespace_or_type_name
                    identifier
                     Complex
                identifier
                 a
               ,
               arg_declaration
                type_
                 base_type
                  class_type
                   namespace_or_type_name
                    identifier
                     Complex
                identifier
                 b
               )
               right_arrow
                =
                >
               throwable_expression
                expression
                 non_assignment_expression
                  conditional_expression
                   null_coalescing_expression
                    conditional_or_expression
                     conditional_and_expression
                      inclusive_or_expression
                       exclusive_or_expression
                        and_expression
                         equality_expression
                          relational_expression
                           shift_expression
                            additive_expression
                             multiplicative_expression
                              switch_expression
                               range_expression
                                unary_expression
                                 primary_expression
                                  primary_expression_start
                                   identifier
                                    a
                                  member_access
                                   .
                                   identifier
                                    Add
                                  method_invocation
                                   (
                                   argument_list
                                    argument
                                     expression
                                      non_assignment_expression
                                       conditional_expression
                                        null_coalescing_expression
                                         conditional_or_expression
                                          conditional_and_expression
                                           inclusive_or_expression
                                            exclusive_or_expression
                                             and_expression
                                              equality_expression
                                               relational_expression
                                                shift_expression
                                                 additive_expression
                                                  multiplicative_expression
                                                   switch_expression
                                                    range_expression
                                                     unary_expression
                                                      primary_expression
                                                       primary_expression_start
                                                        identifier
                                                         b
                                   )
               ;
           class_member_declaration
            all_member_modifiers
             all_member_modifier
              public
             all_member_modifier
              static
            common_member_declaration
             conversion_operator_declarator
              implicit
              operator
              type_
               base_type
                class_type
                 string
              (
              arg_declaration
               type_
                base_type
                 class_type
                  namespace_or_type_name
                   identifier
                    Person
               identifier
                p
              )
             right_arrow
              =
              >
             throwable_expression
              expression
               non_assignment_expression
                conditional_expression
                 null_coalescing_expression
                  conditional_or_expression
                   conditional_and_expression
                    inclusive_or_expression
                     exclusive_or_expression
                      and_expression
                       equality_expression
                        relational_expression
                         shift_expression
                          additive_expression
                           multiplicative_expression
                            switch_expression
                             range_expression
                              unary_expression
                               primary_expression
                                primary_expression_start
                                 identifier
                                  p
                                member_access
                                 .
                                 identifier
                                  First
                           +
                           multiplicative_expression
                            switch_expression
                             range_expression
                              unary_expression
                               primary_expression
                                primary_expression_start
                                 literal
                                  string_literal
                                   " "
                           +
                           multiplicative_expression
                            switch_expression
                             range_expression
                              unary_expression
                               primary_expression
                                primary_expression_start
                                 identifier
                                  p
                                member_access
                                 .
                                 identifier
                                  Last
             ;
           class_member_declaration
            all_member_modifiers
             all_member_modifier
              public
            common_member_declaration
             void
             method_declaration
              method_member_name
               identifier
                Print
              (
              )
              right_arrow
               =
               >
              throwable_expression
               expression
                non_assignment_expression
                 conditional_expression
                  null_coalescing_expression
                   conditional_or_expression
                    conditional_and_expression
                     inclusive_or_expression
                      exclusive_or_expression
                       and_expression
                        equality_expression
                         relational_expression
                          shift_expression
                           additive_expression
                            multiplicative_expression
                             switch_expression
                              range_expression
                               unary_expression
                                primary_expression
                                 primary_expression_start
                                  identifier
                                   Console
                                 member_access
                                  .
                                  identifier
                                   WriteLine
                                 method_invocation
                                  (
                                  argument_list
                                   argument
                                    expression
                                     non_assignment_expression
                                      conditional_expression
                                       null_coalescing_expression
                                        conditional_or_expression
                                         conditional_and_expression
                                          inclusive_or_expression
                                           exclusive_or_expression
                                            and_expression
                                             equality_expression
                                              relational_expression
                                               shift_expression
                                                additive_expression
                                                 multiplicative_expression
                                                  switch_expression
                                                   range_expression
                                                    unary_expression
                                                     primary_expression
                                                      primary_expression_start
                                                       identifier
                                                        First
                                                 +
                                                 multiplicative_expression
                                                  switch_expression
                                                   range_expression
                                                    unary_expression
                                                     primary_expression
                                                      primary_expression_start
                                                       literal
                                                        string_literal
                                                         " "
                                                 +
                                                 multiplicative_expression
                                                  switch_expression
                                                   range_expression
                                                    unary_expression
                                                     primary_expression
                                                      primary_expression_start
                                                       identifier
                                                        Last
                                  )
              ;
           class_member_declaration
            all_member_modifiers
             all_member_modifier
              public
            common_member_declaration
             typed_member_declaration
              type_
               base_type
                class_type
                 string
              property_declaration
               member_name
                namespace_or_type_name
                 identifier
                  Name
               right_arrow
                =
                >
               throwable_expression
                expression
                 non_assignment_expression
                  conditional_expression
                   null_coalescing_expression
                    conditional_or_expression
                     conditional_and_expression
                      inclusive_or_expression
                       exclusive_or_expression
                        and_expression
                         equality_expression
                          relational_expression
                           shift_expression
                            additive_expression
                             multiplicative_expression
                              switch_expression
                               range_expression
                                unary_expression
                                 primary_expression
                                  primary_expression_start
                                   identifier
                                    First
                             +
                             multiplicative_expression
                              switch_expression
                               range_expression
                                unary_expression
                                 primary_expression
                                  primary_expression_start
                                   literal
                                    string_literal
                                     " "
                             +
                             multiplicative_expression
                              switch_expression
                               range_expression
                                unary_expression
                                 primary_expression
                                  primary_expression_start
                                   identifier
                                    Last
               ;
           class_member_declaration
            all_member_modifiers
             all_member_modifier
              public
            common_member_declaration
             typed_member_declaration
              type_
               base_type
                simple_type
                 numeric_type
                  integral_type
                   int
              indexer_declaration
               this
               [
               formal_parameter_list
                fixed_parameters
                 fixed_parameter
                  arg_declaration
                   type_
                    base_type
                     simple_type
                      numeric_type
                       integral_type
                        long
                   identifier
                    id
               ]
               right_arrow
                =
                >
               throwable_expression
                expression
                 non_assignment_expression
                  conditional_expression
                   null_coalescing_expression
                    conditional_or_expression
                     conditional_and_expression
                      inclusive_or_expression
                       exclusive_or_expression
                        and_expression
                         equality_expression
                          relational_expression
                           shift_expression
                            additive_expression
                             multiplicative_expression
                              switch_expression
                               range_expression
                                unary_expression
                                 primary_expression
                                  primary_expression_start
                                   identifier
                                    id
               ;
           class_member_declaration
            all_member_modifiers
             all_member_modifier
              async
            common_member_declaration
             void
             method_declaration
              method_member_name
               identifier
                Test
              (
              )
              method_body
               block
                {
                statement_list
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     non_assignment_expression
                      conditional_expression
                       null_coalescing_expression
                        conditional_or_expression
                         conditional_and_expression
                          inclusive_or_expression
                           exclusive_or_expression
                            and_expression
                             equality_expression
                              relational_expression
                               shift_expression
                                additive_expression
                                 multiplicative_expression
                                  switch_expression
                                   range_expression
                                    unary_expression
                                     primary_expression
                                      primary_expression_start
                                       identifier
                                        WriteLine
                                      method_invocation
                                       (
                                       argument_list
                                        argument
                                         expression
                                          non_assignment_expression
                                           conditional_expression
                                            null_coalescing_expression
                                             conditional_or_expression
                                              conditional_and_expression
                                               inclusive_or_expression
                                                exclusive_or_expression
                                                 and_expression
                                                  equality_expression
                                                   relational_expression
                                                    shift_expression
                                                     additive_expression
                                                      multiplicative_expression
                                                       switch_expression
                                                        range_expression
                                                         unary_expression
                                                          primary_expression
                                                           primary_expression_start
                                                            identifier
                                                             Sqrt
                                                           method_invocation
                                                            (
                                                            argument_list
                                                             argument
                                                              expression
                                                               non_assignment_expression
                                                                conditional_expression
                                                                 null_coalescing_expression
                                                                  conditional_or_expression
                                                                   conditional_and_expression
                                                                    inclusive_or_expression
                                                                     exclusive_or_expression
                                                                      and_expression
                                                                       equality_expression
                                                                        relational_expression
                                                                         shift_expression
                                                                          additive_expression
                                                                           multiplicative_expression
                                                                            switch_expression
                                                                             range_expression
                                                                              unary_expression
                                                                               primary_expression
                                                                                primary_expression_start
                                                                                 literal
                                                                                  3
                                                                            *
                                                                            switch_expression
                                                                             range_expression
                                                                              unary_expression
                                                                               primary_expression
                                                                                primary_expression_start
                                                                                 literal
                                                                                  3
                                                                           +
                                                                           multiplicative_expression
                                                                            switch_expression
                                                                             range_expression
                                                                              unary_expression
                                                                               primary_expression
                                                                                primary_expression_start
                                                                                 literal
                                                                                  4
                                                                            *
                                                                            switch_expression
                                                                             range_expression
                                                                              unary_expression
                                                                               primary_expression
                                                                                primary_expression_start
                                                                                 literal
                                                                                  4
                                                            )
                                       )
                    ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     non_assignment_expression
                      conditional_expression
                       null_coalescing_expression
                        conditional_or_expression
                         conditional_and_expression
                          inclusive_or_expression
                           exclusive_or_expression
                            and_expression
                             equality_expression
                              relational_expression
                               shift_expression
                                additive_expression
                                 multiplicative_expression
                                  switch_expression
                                   range_expression
                                    unary_expression
                                     primary_expression
                                      primary_expression_start
                                       identifier
                                        WriteLine
                                      method_invocation
                                       (
                                       argument_list
                                        argument
                                         expression
                                          non_assignment_expression
                                           conditional_expression
                                            null_coalescing_expression
                                             conditional_or_expression
                                              conditional_and_expression
                                               inclusive_or_expression
                                                exclusive_or_expression
                                                 and_expression
                                                  equality_expression
                                                   relational_expression
                                                    shift_expression
                                                     additive_expression
                                                      multiplicative_expression
                                                       switch_expression
                                                        range_expression
                                                         unary_expression
                                                          primary_expression
                                                           primary_expression_start
                                                            identifier
                                                             Friday
                                                      -
                                                      multiplicative_expression
                                                       switch_expression
                                                        range_expression
                                                         unary_expression
                                                          primary_expression
                                                           primary_expression_start
                                                            identifier
                                                             Monday
                                       )
                    ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      range
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          Range
                                        method_invocation
                                         (
                                         argument_list
                                          argument
                                           expression
                                            non_assignment_expression
                                             conditional_expression
                                              null_coalescing_expression
                                               conditional_or_expression
                                                conditional_and_expression
                                                 inclusive_or_expression
                                                  exclusive_or_expression
                                                   and_expression
                                                    equality_expression
                                                     relational_expression
                                                      shift_expression
                                                       additive_expression
                                                        multiplicative_expression
                                                         switch_expression
                                                          range_expression
                                                           unary_expression
                                                            primary_expression
                                                             primary_expression_start
                                                              literal
                                                               5
                                          ,
                                          argument
                                           expression
                                            non_assignment_expression
                                             conditional_expression
                                              null_coalescing_expression
                                               conditional_or_expression
                                                conditional_and_expression
                                                 inclusive_or_expression
                                                  exclusive_or_expression
                                                   and_expression
                                                    equality_expression
                                                     relational_expression
                                                      shift_expression
                                                       additive_expression
                                                        multiplicative_expression
                                                         switch_expression
                                                          range_expression
                                                           unary_expression
                                                            primary_expression
                                                             primary_expression_start
                                                              literal
                                                               17
                                         )
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      even
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          range
                                        member_access
                                         .
                                         identifier
                                          Where
                                        method_invocation
                                         (
                                         argument_list
                                          argument
                                           expression
                                            non_assignment_expression
                                             lambda_expression
                                              anonymous_function_signature
                                               identifier
                                                i
                                              right_arrow
                                               =
                                               >
                                              anonymous_function_body
                                               throwable_expression
                                                expression
                                                 non_assignment_expression
                                                  conditional_expression
                                                   null_coalescing_expression
                                                    conditional_or_expression
                                                     conditional_and_expression
                                                      inclusive_or_expression
                                                       exclusive_or_expression
                                                        and_expression
                                                         equality_expression
                                                          relational_expression
                                                           shift_expression
                                                            additive_expression
                                                             multiplicative_expression
                                                              switch_expression
                                                               range_expression
                                                                unary_expression
                                                                 primary_expression
                                                                  primary_expression_start
                                                                   identifier
                                                                    i
                                                              %
                                                              switch_expression
                                                               range_expression
                                                                unary_expression
                                                                 primary_expression
                                                                  primary_expression_start
                                                                   literal
                                                                    2
                                                          ==
                                                          relational_expression
                                                           shift_expression
                                                            additive_expression
                                                             multiplicative_expression
                                                              switch_expression
                                                               range_expression
                                                                unary_expression
                                                                 primary_expression
                                                                  primary_expression_start
                                                                   literal
                                                                    0
                                         )
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       simple_type
                        numeric_type
                         integral_type
                          int
                      ?
                    local_variable_declarator
                     identifier
                      length
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          customers
                                        member_access
                                         ?
                                         .
                                         identifier
                                          Length
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       class_type
                        namespace_or_type_name
                         identifier
                          Customer
                    local_variable_declarator
                     identifier
                      first
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          customers
                                        bracket_expression
                                         ?
                                         [
                                         indexer_argument
                                          expression
                                           non_assignment_expression
                                            conditional_expression
                                             null_coalescing_expression
                                              conditional_or_expression
                                               conditional_and_expression
                                                inclusive_or_expression
                                                 exclusive_or_expression
                                                  and_expression
                                                   equality_expression
                                                    relational_expression
                                                     shift_expression
                                                      additive_expression
                                                       multiplicative_expression
                                                        switch_expression
                                                         range_expression
                                                          unary_expression
                                                           primary_expression
                                                            primary_expression_start
                                                             literal
                                                              0
                                         ]
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       simple_type
                        numeric_type
                         integral_type
                          int
                    local_variable_declarator
                     identifier
                      length
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          customers
                                        member_access
                                         ?
                                         .
                                         identifier
                                          Length
                          ??
                          null_coalescing_expression
                           conditional_or_expression
                            conditional_and_expression
                             inclusive_or_expression
                              exclusive_or_expression
                               and_expression
                                equality_expression
                                 relational_expression
                                  shift_expression
                                   additive_expression
                                    multiplicative_expression
                                     switch_expression
                                      range_expression
                                       unary_expression
                                        primary_expression
                                         primary_expression_start
                                          literal
                                           0
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       simple_type
                        numeric_type
                         integral_type
                          int
                      ?
                    local_variable_declarator
                     identifier
                      first
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          customers
                                        bracket_expression
                                         ?
                                         [
                                         indexer_argument
                                          expression
                                           non_assignment_expression
                                            conditional_expression
                                             null_coalescing_expression
                                              conditional_or_expression
                                               conditional_and_expression
                                                inclusive_or_expression
                                                 exclusive_or_expression
                                                  and_expression
                                                   equality_expression
                                                    relational_expression
                                                     shift_expression
                                                      additive_expression
                                                       multiplicative_expression
                                                        switch_expression
                                                         range_expression
                                                          unary_expression
                                                           primary_expression
                                                            primary_expression_start
                                                             literal
                                                              0
                                         ]
                                        member_access
                                         ?
                                         .
                                         identifier
                                          Orders
                                        member_access
                                         ?
                                         .
                                         identifier
                                          Count
                                        method_invocation
                                         (
                                         )
                   ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     non_assignment_expression
                      conditional_expression
                       null_coalescing_expression
                        conditional_or_expression
                         conditional_and_expression
                          inclusive_or_expression
                           exclusive_or_expression
                            and_expression
                             equality_expression
                              relational_expression
                               shift_expression
                                additive_expression
                                 multiplicative_expression
                                  switch_expression
                                   range_expression
                                    unary_expression
                                     primary_expression
                                      primary_expression_start
                                       identifier
                                        PropertyChanged
                                      member_access
                                       ?
                                       .
                                       identifier
                                        Invoke
                                      method_invocation
                                       (
                                       argument_list
                                        argument
                                         expression
                                          non_assignment_expression
                                           conditional_expression
                                            null_coalescing_expression
                                             conditional_or_expression
                                              conditional_and_expression
                                               inclusive_or_expression
                                                exclusive_or_expression
                                                 and_expression
                                                  equality_expression
                                                   relational_expression
                                                    shift_expression
                                                     additive_expression
                                                      multiplicative_expression
                                                       switch_expression
                                                        range_expression
                                                         unary_expression
                                                          primary_expression
                                                           primary_expression_start
                                                            this
                                        ,
                                        argument
                                         expression
                                          non_assignment_expression
                                           conditional_expression
                                            null_coalescing_expression
                                             conditional_or_expression
                                              conditional_and_expression
                                               inclusive_or_expression
                                                exclusive_or_expression
                                                 and_expression
                                                  equality_expression
                                                   relational_expression
                                                    shift_expression
                                                     additive_expression
                                                      multiplicative_expression
                                                       switch_expression
                                                        range_expression
                                                         unary_expression
                                                          primary_expression
                                                           primary_expression_start
                                                            identifier
                                                             args
                                       )
                    ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       class_type
                        string
                    local_variable_declarator
                     identifier
                      s
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          string_literal
                                           interpolated_regular_string
                                            $"
                                            interpolated_regular_string_part
                                             interpolated_string_expression
                                              expression
                                               non_assignment_expression
                                                conditional_expression
                                                 null_coalescing_expression
                                                  conditional_or_expression
                                                   conditional_and_expression
                                                    inclusive_or_expression
                                                     exclusive_or_expression
                                                      and_expression
                                                       equality_expression
                                                        relational_expression
                                                         shift_expression
                                                          additive_expression
                                                           multiplicative_expression
                                                            switch_expression
                                                             range_expression
                                                              unary_expression
                                                               primary_expression
                                                                primary_expression_start
                                                                 identifier
                                                                  p
                                                                member_access
                                                                 .
                                                                 identifier
                                                                  Name
                                              ,
                                              expression
                                               non_assignment_expression
                                                conditional_expression
                                                 null_coalescing_expression
                                                  conditional_or_expression
                                                   conditional_and_expression
                                                    inclusive_or_expression
                                                     exclusive_or_expression
                                                      and_expression
                                                       equality_expression
                                                        relational_expression
                                                         shift_expression
                                                          additive_expression
                                                           multiplicative_expression
                                                            switch_expression
                                                             range_expression
                                                              unary_expression
                                                               primary_expression
                                                                primary_expression_start
                                                                 literal
                                                                  20
                                            interpolated_regular_string_part
                                              is 
                                            interpolated_regular_string_part
                                             interpolated_string_expression
                                              expression
                                               non_assignment_expression
                                                conditional_expression
                                                 null_coalescing_expression
                                                  conditional_or_expression
                                                   conditional_and_expression
                                                    inclusive_or_expression
                                                     exclusive_or_expression
                                                      and_expression
                                                       equality_expression
                                                        relational_expression
                                                         shift_expression
                                                          additive_expression
                                                           multiplicative_expression
                                                            switch_expression
                                                             range_expression
                                                              unary_expression
                                                               primary_expression
                                                                primary_expression_start
                                                                 identifier
                                                                  p
                                                                member_access
                                                                 .
                                                                 identifier
                                                                  Age
                                              :
                                              D3
                                            interpolated_regular_string_part
                                              year
                                            interpolated_regular_string_part
                                             {{
                                            interpolated_regular_string_part
                                             s}} old #
                                            "
                   ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     assignment
                      unary_expression
                       primary_expression
                        primary_expression_start
                         identifier
                          s
                      assignment_operator
                       =
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          string_literal
                                           interpolated_regular_string
                                            $"
                                            interpolated_regular_string_part
                                             interpolated_string_expression
                                              expression
                                               non_assignment_expression
                                                conditional_expression
                                                 null_coalescing_expression
                                                  conditional_or_expression
                                                   conditional_and_expression
                                                    inclusive_or_expression
                                                     exclusive_or_expression
                                                      and_expression
                                                       equality_expression
                                                        relational_expression
                                                         shift_expression
                                                          additive_expression
                                                           multiplicative_expression
                                                            switch_expression
                                                             range_expression
                                                              unary_expression
                                                               primary_expression
                                                                primary_expression_start
                                                                 identifier
                                                                  p
                                                                member_access
                                                                 .
                                                                 identifier
                                                                  Name
                                            interpolated_regular_string_part
                                              is 
                                            interpolated_regular_string_part
                                             \"
                                            interpolated_regular_string_part
                                             interpolated_string_expression
                                              expression
                                               non_assignment_expression
                                                conditional_expression
                                                 null_coalescing_expression
                                                  conditional_or_expression
                                                   conditional_and_expression
                                                    inclusive_or_expression
                                                     exclusive_or_expression
                                                      and_expression
                                                       equality_expression
                                                        relational_expression
                                                         shift_expression
                                                          additive_expression
                                                           multiplicative_expression
                                                            switch_expression
                                                             range_expression
                                                              unary_expression
                                                               primary_expression
                                                                primary_expression_start
                                                                 identifier
                                                                  p
                                                                member_access
                                                                 .
                                                                 identifier
                                                                  Age
                                            interpolated_regular_string_part
                                              year
                                            interpolated_regular_string_part
                                             interpolated_string_expression
                                              expression
                                               non_assignment_expression
                                                conditional_expression
                                                 null_coalescing_expression
                                                  conditional_or_expression
                                                   conditional_and_expression
                                                    inclusive_or_expression
                                                     exclusive_or_expression
                                                      and_expression
                                                       equality_expression
                                                        relational_expression
                                                         shift_expression
                                                          additive_expression
                                                           multiplicative_expression
                                                            switch_expression
                                                             range_expression
                                                              unary_expression
                                                               primary_expression
                                                                primary_expression_start
                                                                 (
                                                                 expression
                                                                  non_assignment_expression
                                                                   conditional_expression
                                                                    null_coalescing_expression
                                                                     conditional_or_expression
                                                                      conditional_and_expression
                                                                       inclusive_or_expression
                                                                        exclusive_or_expression
                                                                         and_expression
                                                                          equality_expression
                                                                           relational_expression
                                                                            shift_expression
                                                                             additive_expression
                                                                              multiplicative_expression
                                                                               switch_expression
                                                                                range_expression
                                                                                 unary_expression
                                                                                  primary_expression
                                                                                   primary_expression_start
                                                                                    identifier
                                                                                     p
                                                                                   member_access
                                                                                    .
                                                                                    identifier
                                                                                     Age
                                                                           ==
                                                                           relational_expression
                                                                            shift_expression
                                                                             additive_expression
                                                                              multiplicative_expression
                                                                               switch_expression
                                                                                range_expression
                                                                                 unary_expression
                                                                                  primary_expression
                                                                                   primary_expression_start
                                                                                    literal
                                                                                     1
                                                                    ?
                                                                    throwable_expression
                                                                     expression
                                                                      non_assignment_expression
                                                                       conditional_expression
                                                                        null_coalescing_expression
                                                                         conditional_or_expression
                                                                          conditional_and_expression
                                                                           inclusive_or_expression
                                                                            exclusive_or_expression
                                                                             and_expression
                                                                              equality_expression
                                                                               relational_expression
                                                                                shift_expression
                                                                                 additive_expression
                                                                                  multiplicative_expression
                                                                                   switch_expression
                                                                                    range_expression
                                                                                     unary_expression
                                                                                      primary_expression
                                                                                       primary_expression_start
                                                                                        literal
                                                                                         string_literal
                                                                                          ""
                                                                    :
                                                                    throwable_expression
                                                                     expression
                                                                      non_assignment_expression
                                                                       conditional_expression
                                                                        null_coalescing_expression
                                                                         conditional_or_expression
                                                                          conditional_and_expression
                                                                           inclusive_or_expression
                                                                            exclusive_or_expression
                                                                             and_expression
                                                                              equality_expression
                                                                               relational_expression
                                                                                shift_expression
                                                                                 additive_expression
                                                                                  multiplicative_expression
                                                                                   switch_expression
                                                                                    range_expression
                                                                                     unary_expression
                                                                                      primary_expression
                                                                                       primary_expression_start
                                                                                        literal
                                                                                         string_literal
                                                                                          "s"
                                                                 )
                                            interpolated_regular_string_part
                                              old
                                            "
                    ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     assignment
                      unary_expression
                       primary_expression
                        primary_expression_start
                         identifier
                          s
                      assignment_operator
                       =
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          string_literal
                                           interpolated_regular_string
                                            $"
                                            interpolated_regular_string_part
                                             interpolated_string_expression
                                              expression
                                               non_assignment_expression
                                                conditional_expression
                                                 null_coalescing_expression
                                                  conditional_or_expression
                                                   conditional_and_expression
                                                    inclusive_or_expression
                                                     exclusive_or_expression
                                                      and_expression
                                                       equality_expression
                                                        relational_expression
                                                         shift_expression
                                                          additive_expression
                                                           multiplicative_expression
                                                            switch_expression
                                                             range_expression
                                                              unary_expression
                                                               primary_expression
                                                                primary_expression_start
                                                                 (
                                                                 expression
                                                                  non_assignment_expression
                                                                   conditional_expression
                                                                    null_coalescing_expression
                                                                     conditional_or_expression
                                                                      conditional_and_expression
                                                                       inclusive_or_expression
                                                                        exclusive_or_expression
                                                                         and_expression
                                                                          equality_expression
                                                                           relational_expression
                                                                            shift_expression
                                                                             additive_expression
                                                                              multiplicative_expression
                                                                               switch_expression
                                                                                range_expression
                                                                                 unary_expression
                                                                                  primary_expression
                                                                                   primary_expression_start
                                                                                    identifier
                                                                                     p
                                                                                   member_access
                                                                                    .
                                                                                    identifier
                                                                                     Age
                                                                           ==
                                                                           relational_expression
                                                                            shift_expression
                                                                             additive_expression
                                                                              multiplicative_expression
                                                                               switch_expression
                                                                                range_expression
                                                                                 unary_expression
                                                                                  primary_expression
                                                                                   primary_expression_start
                                                                                    literal
                                                                                     2
                                                                    ?
                                                                    throwable_expression
                                                                     expression
                                                                      non_assignment_expression
                                                                       conditional_expression
                                                                        null_coalescing_expression
                                                                         conditional_or_expression
                                                                          conditional_and_expression
                                                                           inclusive_or_expression
                                                                            exclusive_or_expression
                                                                             and_expression
                                                                              equality_expression
                                                                               relational_expression
                                                                                shift_expression
                                                                                 additive_expression
                                                                                  multiplicative_expression
                                                                                   switch_expression
                                                                                    range_expression
                                                                                     unary_expression
                                                                                      primary_expression
                                                                                       primary_expression_start
                                                                                        literal
                                                                                         string_literal
                                                                                          interpolated_regular_string
                                                                                           $"
                                                                                           interpolated_regular_string_part
                                                                                            interpolated_string_expression
                                                                                             expression
                                                                                              non_assignment_expression
                                                                                               conditional_expression
                                                                                                null_coalescing_expression
                                                                                                 conditional_or_expression
                                                                                                  conditional_and_expression
                                                                                                   inclusive_or_expression
                                                                                                    exclusive_or_expression
                                                                                                     and_expression
                                                                                                      equality_expression
                                                                                                       relational_expression
                                                                                                        shift_expression
                                                                                                         additive_expression
                                                                                                          multiplicative_expression
                                                                                                           switch_expression
                                                                                                            range_expression
                                                                                                             unary_expression
                                                                                                              primary_expression
                                                                                                               primary_expression_start
                                                                                                                new
                                                                                                                type_
                                                                                                                 base_type
                                                                                                                  class_type
                                                                                                                   namespace_or_type_name
                                                                                                                    identifier
                                                                                                                     Person
                                                                                                                object_or_collection_initializer
                                                                                                                 object_initializer
                                                                                                                  {
                                                                                                                  }
                                                                                           "
                                                                    :
                                                                    throwable_expression
                                                                     expression
                                                                      non_assignment_expression
                                                                       conditional_expression
                                                                        null_coalescing_expression
                                                                         conditional_or_expression
                                                                          conditional_and_expression
                                                                           inclusive_or_expression
                                                                            exclusive_or_expression
                                                                             and_expression
                                                                              equality_expression
                                                                               relational_expression
                                                                                shift_expression
                                                                                 additive_expression
                                                                                  multiplicative_expression
                                                                                   switch_expression
                                                                                    range_expression
                                                                                     unary_expression
                                                                                      primary_expression
                                                                                       primary_expression_start
                                                                                        literal
                                                                                         string_literal
                                                                                          ""
                                                                 )
                                            "
                    ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     assignment
                      unary_expression
                       primary_expression
                        primary_expression_start
                         identifier
                          s
                      assignment_operator
                       =
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          string_literal
                                           interpolated_verbatium_string
                                            $@"
                                            interpolated_verbatium_string_part
                                             \
                                            interpolated_verbatium_string_part
                                             interpolated_string_expression
                                              expression
                                               non_assignment_expression
                                                conditional_expression
                                                 null_coalescing_expression
                                                  conditional_or_expression
                                                   conditional_and_expression
                                                    inclusive_or_expression
                                                     exclusive_or_expression
                                                      and_expression
                                                       equality_expression
                                                        relational_expression
                                                         shift_expression
                                                          additive_expression
                                                           multiplicative_expression
                                                            switch_expression
                                                             range_expression
                                                              unary_expression
                                                               primary_expression
                                                                primary_expression_start
                                                                 identifier
                                                                  p
                                                                member_access
                                                                 .
                                                                 identifier
                                                                  Name
                                            interpolated_verbatium_string_part
                                             \n                                   
                                            interpolated_verbatium_string_part
                                             ""
                                            interpolated_verbatium_string_part
                                             \
                                            "
                    ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     assignment
                      unary_expression
                       primary_expression
                        primary_expression_start
                         identifier
                          s
                      assignment_operator
                       =
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          string_literal
                                           interpolated_regular_string
                                            $"
                                            interpolated_regular_string_part
                                             Color [ R=
                                            interpolated_regular_string_part
                                             interpolated_string_expression
                                              expression
                                               non_assignment_expression
                                                conditional_expression
                                                 null_coalescing_expression
                                                  conditional_or_expression
                                                   conditional_and_expression
                                                    inclusive_or_expression
                                                     exclusive_or_expression
                                                      and_expression
                                                       equality_expression
                                                        relational_expression
                                                         shift_expression
                                                          additive_expression
                                                           multiplicative_expression
                                                            switch_expression
                                                             range_expression
                                                              unary_expression
                                                               primary_expression
                                                                primary_expression_start
                                                                 identifier
                                                                  func
                                                                method_invocation
                                                                 (
                                                                 argument_list
                                                                  argument
                                                                   identifier
                                                                    b
                                                                   :
                                                                   expression
                                                                    non_assignment_expression
                                                                     conditional_expression
                                                                      null_coalescing_expression
                                                                       conditional_or_expression
                                                                        conditional_and_expression
                                                                         inclusive_or_expression
                                                                          exclusive_or_expression
                                                                           and_expression
                                                                            equality_expression
                                                                             relational_expression
                                                                              shift_expression
                                                                               additive_expression
                                                                                multiplicative_expression
                                                                                 switch_expression
                                                                                  range_expression
                                                                                   unary_expression
                                                                                    primary_expression
                                                                                     primary_expression_start
                                                                                      literal
                                                                                       3
                                                                 )
                                              :
                                              #0.##
                                            interpolated_regular_string_part
                                             , G=
                                            interpolated_regular_string_part
                                             interpolated_string_expression
                                              expression
                                               non_assignment_expression
                                                conditional_expression
                                                 null_coalescing_expression
                                                  conditional_or_expression
                                                   conditional_and_expression
                                                    inclusive_or_expression
                                                     exclusive_or_expression
                                                      and_expression
                                                       equality_expression
                                                        relational_expression
                                                         shift_expression
                                                          additive_expression
                                                           multiplicative_expression
                                                            switch_expression
                                                             range_expression
                                                              unary_expression
                                                               primary_expression
                                                                primary_expression_start
                                                                 identifier
                                                                  G
                                              :
                                              #0.##
                                            interpolated_regular_string_part
                                             , B=
                                            interpolated_regular_string_part
                                             interpolated_string_expression
                                              expression
                                               non_assignment_expression
                                                conditional_expression
                                                 null_coalescing_expression
                                                  conditional_or_expression
                                                   conditional_and_expression
                                                    inclusive_or_expression
                                                     exclusive_or_expression
                                                      and_expression
                                                       equality_expression
                                                        relational_expression
                                                         shift_expression
                                                          additive_expression
                                                           multiplicative_expression
                                                            switch_expression
                                                             range_expression
                                                              unary_expression
                                                               primary_expression
                                                                primary_expression_start
                                                                 identifier
                                                                  B
                                              :
                                              #0.##
                                            interpolated_regular_string_part
                                             , A=
                                            interpolated_regular_string_part
                                             interpolated_string_expression
                                              expression
                                               non_assignment_expression
                                                conditional_expression
                                                 null_coalescing_expression
                                                  conditional_or_expression
                                                   conditional_and_expression
                                                    inclusive_or_expression
                                                     exclusive_or_expression
                                                      and_expression
                                                       equality_expression
                                                        relational_expression
                                                         shift_expression
                                                          additive_expression
                                                           multiplicative_expression
                                                            switch_expression
                                                             range_expression
                                                              unary_expression
                                                               primary_expression
                                                                primary_expression_start
                                                                 identifier
                                                                  A
                                              :
                                              #0.##
                                            interpolated_regular_string_part
                                              ]
                                            "
                    ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    if
                    (
                    expression
                     non_assignment_expression
                      conditional_expression
                       null_coalescing_expression
                        conditional_or_expression
                         conditional_and_expression
                          inclusive_or_expression
                           exclusive_or_expression
                            and_expression
                             equality_expression
                              relational_expression
                               shift_expression
                                additive_expression
                                 multiplicative_expression
                                  switch_expression
                                   range_expression
                                    unary_expression
                                     primary_expression
                                      primary_expression_start
                                       identifier
                                        x
                              ==
                              relational_expression
                               shift_expression
                                additive_expression
                                 multiplicative_expression
                                  switch_expression
                                   range_expression
                                    unary_expression
                                     primary_expression
                                      primary_expression_start
                                       literal
                                        null
                    )
                    if_body
                     simple_embedded_statement
                      throw
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         new
                                         type_
                                          base_type
                                           class_type
                                            namespace_or_type_name
                                             identifier
                                              ArgumentNullException
                                         object_creation_expression
                                          (
                                          argument_list
                                           argument
                                            expression
                                             non_assignment_expression
                                              conditional_expression
                                               null_coalescing_expression
                                                conditional_or_expression
                                                 conditional_and_expression
                                                  inclusive_or_expression
                                                   exclusive_or_expression
                                                    and_expression
                                                     equality_expression
                                                      relational_expression
                                                       shift_expression
                                                        additive_expression
                                                         multiplicative_expression
                                                          switch_expression
                                                           range_expression
                                                            unary_expression
                                                             primary_expression
                                                              primary_expression_start
                                                               identifier
                                                                nameof
                                                              method_invocation
                                                               (
                                                               argument_list
                                                                argument
                                                                 expression
                                                                  non_assignment_expression
                                                                   conditional_expression
                                                                    null_coalescing_expression
                                                                     conditional_or_expression
                                                                      conditional_and_expression
                                                                       inclusive_or_expression
                                                                        exclusive_or_expression
                                                                         and_expression
                                                                          equality_expression
                                                                           relational_expression
                                                                            shift_expression
                                                                             additive_expression
                                                                              multiplicative_expression
                                                                               switch_expression
                                                                                range_expression
                                                                                 unary_expression
                                                                                  primary_expression
                                                                                   primary_expression_start
                                                                                    identifier
                                                                                     x
                                                               )
                                          )
                      ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     non_assignment_expression
                      conditional_expression
                       null_coalescing_expression
                        conditional_or_expression
                         conditional_and_expression
                          inclusive_or_expression
                           exclusive_or_expression
                            and_expression
                             equality_expression
                              relational_expression
                               shift_expression
                                additive_expression
                                 multiplicative_expression
                                  switch_expression
                                   range_expression
                                    unary_expression
                                     primary_expression
                                      primary_expression_start
                                       identifier
                                        WriteLine
                                      method_invocation
                                       (
                                       argument_list
                                        argument
                                         expression
                                          non_assignment_expression
                                           conditional_expression
                                            null_coalescing_expression
                                             conditional_or_expression
                                              conditional_and_expression
                                               inclusive_or_expression
                                                exclusive_or_expression
                                                 and_expression
                                                  equality_expression
                                                   relational_expression
                                                    shift_expression
                                                     additive_expression
                                                      multiplicative_expression
                                                       switch_expression
                                                        range_expression
                                                         unary_expression
                                                          primary_expression
                                                           primary_expression_start
                                                            identifier
                                                             nameof
                                                           method_invocation
                                                            (
                                                            argument_list
                                                             argument
                                                              expression
                                                               non_assignment_expression
                                                                conditional_expression
                                                                 null_coalescing_expression
                                                                  conditional_or_expression
                                                                   conditional_and_expression
                                                                    inclusive_or_expression
                                                                     exclusive_or_expression
                                                                      and_expression
                                                                       equality_expression
                                                                        relational_expression
                                                                         shift_expression
                                                                          additive_expression
                                                                           multiplicative_expression
                                                                            switch_expression
                                                                             range_expression
                                                                              unary_expression
                                                                               primary_expression
                                                                                primary_expression_start
                                                                                 identifier
                                                                                  person
                                                                                member_access
                                                                                 .
                                                                                 identifier
                                                                                  Address
                                                                                member_access
                                                                                 .
                                                                                 identifier
                                                                                  ZipCode
                                                            )
                                       )
                    ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      numbers
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         new
                                         type_
                                          base_type
                                           class_type
                                            namespace_or_type_name
                                             identifier
                                              Dictionary
                                             type_argument_list
                                              <
                                              type_
                                               base_type
                                                simple_type
                                                 numeric_type
                                                  integral_type
                                                   int
                                              ,
                                              type_
                                               base_type
                                                class_type
                                                 string
                                              >
                                         object_or_collection_initializer
                                          object_initializer
                                           {
                                           member_initializer_list
                                            member_initializer
                                             [
                                             expression
                                              non_assignment_expression
                                               conditional_expression
                                                null_coalescing_expression
                                                 conditional_or_expression
                                                  conditional_and_expression
                                                   inclusive_or_expression
                                                    exclusive_or_expression
                                                     and_expression
                                                      equality_expression
                                                       relational_expression
                                                        shift_expression
                                                         additive_expression
                                                          multiplicative_expression
                                                           switch_expression
                                                            range_expression
                                                             unary_expression
                                                              primary_expression
                                                               primary_expression_start
                                                                literal
                                                                 7
                                             ]
                                             =
                                             initializer_value
                                              expression
                                               non_assignment_expression
                                                conditional_expression
                                                 null_coalescing_expression
                                                  conditional_or_expression
                                                   conditional_and_expression
                                                    inclusive_or_expression
                                                     exclusive_or_expression
                                                      and_expression
                                                       equality_expression
                                                        relational_expression
                                                         shift_expression
                                                          additive_expression
                                                           multiplicative_expression
                                                            switch_expression
                                                             range_expression
                                                              unary_expression
                                                               primary_expression
                                                                primary_expression_start
                                                                 literal
                                                                  string_literal
                                                                   "seven"
                                            ,
                                            member_initializer
                                             [
                                             expression
                                              non_assignment_expression
                                               conditional_expression
                                                null_coalescing_expression
                                                 conditional_or_expression
                                                  conditional_and_expression
                                                   inclusive_or_expression
                                                    exclusive_or_expression
                                                     and_expression
                                                      equality_expression
                                                       relational_expression
                                                        shift_expression
                                                         additive_expression
                                                          multiplicative_expression
                                                           switch_expression
                                                            range_expression
                                                             unary_expression
                                                              primary_expression
                                                               primary_expression_start
                                                                literal
                                                                 9
                                             ]
                                             =
                                             initializer_value
                                              expression
                                               non_assignment_expression
                                                conditional_expression
                                                 null_coalescing_expression
                                                  conditional_or_expression
                                                   conditional_and_expression
                                                    inclusive_or_expression
                                                     exclusive_or_expression
                                                      and_expression
                                                       equality_expression
                                                        relational_expression
                                                         shift_expression
                                                          additive_expression
                                                           multiplicative_expression
                                                            switch_expression
                                                             range_expression
                                                              unary_expression
                                                               primary_expression
                                                                primary_expression_start
                                                                 literal
                                                                  string_literal
                                                                   "nine"
                                            ,
                                            member_initializer
                                             [
                                             expression
                                              non_assignment_expression
                                               conditional_expression
                                                null_coalescing_expression
                                                 conditional_or_expression
                                                  conditional_and_expression
                                                   inclusive_or_expression
                                                    exclusive_or_expression
                                                     and_expression
                                                      equality_expression
                                                       relational_expression
                                                        shift_expression
                                                         additive_expression
                                                          multiplicative_expression
                                                           switch_expression
                                                            range_expression
                                                             unary_expression
                                                              primary_expression
                                                               primary_expression_start
                                                                literal
                                                                 13
                                             ]
                                             =
                                             initializer_value
                                              expression
                                               non_assignment_expression
                                                conditional_expression
                                                 null_coalescing_expression
                                                  conditional_or_expression
                                                   conditional_and_expression
                                                    inclusive_or_expression
                                                     exclusive_or_expression
                                                      and_expression
                                                       equality_expression
                                                        relational_expression
                                                         shift_expression
                                                          additive_expression
                                                           multiplicative_expression
                                                            switch_expression
                                                             range_expression
                                                              unary_expression
                                                               primary_expression
                                                                primary_expression_start
                                                                 literal
                                                                  string_literal
                                                                   "thirteen"
                                           }
                   ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    try
                    block
                     {
                     }
                    catch_clauses
                     specific_catch_clause
                      catch
                      (
                      class_type
                       namespace_or_type_name
                        identifier
                         MyException
                      identifier
                       e
                      )
                      exception_filter
                       when
                       (
                       expression
                        non_assignment_expression
                         conditional_expression
                          null_coalescing_expression
                           conditional_or_expression
                            conditional_and_expression
                             inclusive_or_expression
                              exclusive_or_expression
                               and_expression
                                equality_expression
                                 relational_expression
                                  shift_expression
                                   additive_expression
                                    multiplicative_expression
                                     switch_expression
                                      range_expression
                                       unary_expression
                                        primary_expression
                                         primary_expression_start
                                          identifier
                                           myfilter
                                         method_invocation
                                          (
                                          argument_list
                                           argument
                                            expression
                                             non_assignment_expression
                                              conditional_expression
                                               null_coalescing_expression
                                                conditional_or_expression
                                                 conditional_and_expression
                                                  inclusive_or_expression
                                                   exclusive_or_expression
                                                    and_expression
                                                     equality_expression
                                                      relational_expression
                                                       shift_expression
                                                        additive_expression
                                                         multiplicative_expression
                                                          switch_expression
                                                           range_expression
                                                            unary_expression
                                                             primary_expression
                                                              primary_expression_start
                                                               identifier
                                                                e
                                          )
                       )
                      block
                       {
                       }
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       class_type
                        namespace_or_type_name
                         identifier
                          Resource
                    local_variable_declarator
                     identifier
                      res
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          null
                   ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    try
                    block
                     {
                     statement_list
                      statement
                       embedded_statement
                        simple_embedded_statement
                         expression
                          assignment
                           unary_expression
                            primary_expression
                             primary_expression_start
                              identifier
                               res
                           assignment_operator
                            =
                           expression
                            non_assignment_expression
                             conditional_expression
                              null_coalescing_expression
                               conditional_or_expression
                                conditional_and_expression
                                 inclusive_or_expression
                                  exclusive_or_expression
                                   and_expression
                                    equality_expression
                                     relational_expression
                                      shift_expression
                                       additive_expression
                                        multiplicative_expression
                                         switch_expression
                                          range_expression
                                           unary_expression
                                            await
                                            unary_expression
                                             primary_expression
                                              primary_expression_start
                                               identifier
                                                Resource
                                              member_access
                                               .
                                               identifier
                                                OpenAsync
                                              method_invocation
                                               (
                                               )
                         ;
                     }
                    catch_clauses
                     specific_catch_clause
                      catch
                      (
                      class_type
                       namespace_or_type_name
                        identifier
                         ResourceException
                      identifier
                       e
                      )
                      block
                       {
                       statement_list
                        statement
                         embedded_statement
                          simple_embedded_statement
                           expression
                            non_assignment_expression
                             conditional_expression
                              null_coalescing_expression
                               conditional_or_expression
                                conditional_and_expression
                                 inclusive_or_expression
                                  exclusive_or_expression
                                   and_expression
                                    equality_expression
                                     relational_expression
                                      shift_expression
                                       additive_expression
                                        multiplicative_expression
                                         switch_expression
                                          range_expression
                                           unary_expression
                                            await
                                            unary_expression
                                             primary_expression
                                              primary_expression_start
                                               identifier
                                                Resource
                                              member_access
                                               .
                                               identifier
                                                LogAsync
                                              method_invocation
                                               (
                                               argument_list
                                                argument
                                                 expression
                                                  non_assignment_expression
                                                   conditional_expression
                                                    null_coalescing_expression
                                                     conditional_or_expression
                                                      conditional_and_expression
                                                       inclusive_or_expression
                                                        exclusive_or_expression
                                                         and_expression
                                                          equality_expression
                                                           relational_expression
                                                            shift_expression
                                                             additive_expression
                                                              multiplicative_expression
                                                               switch_expression
                                                                range_expression
                                                                 unary_expression
                                                                  primary_expression
                                                                   primary_expression_start
                                                                    identifier
                                                                     res
                                                ,
                                                argument
                                                 expression
                                                  non_assignment_expression
                                                   conditional_expression
                                                    null_coalescing_expression
                                                     conditional_or_expression
                                                      conditional_and_expression
                                                       inclusive_or_expression
                                                        exclusive_or_expression
                                                         and_expression
                                                          equality_expression
                                                           relational_expression
                                                            shift_expression
                                                             additive_expression
                                                              multiplicative_expression
                                                               switch_expression
                                                                range_expression
                                                                 unary_expression
                                                                  primary_expression
                                                                   primary_expression_start
                                                                    identifier
                                                                     e
                                               )
                           ;
                       }
                    finally_clause
                     finally
                     block
                      {
                      statement_list
                       statement
                        embedded_statement
                         simple_embedded_statement
                          if
                          (
                          expression
                           non_assignment_expression
                            conditional_expression
                             null_coalescing_expression
                              conditional_or_expression
                               conditional_and_expression
                                inclusive_or_expression
                                 exclusive_or_expression
                                  and_expression
                                   equality_expression
                                    relational_expression
                                     shift_expression
                                      additive_expression
                                       multiplicative_expression
                                        switch_expression
                                         range_expression
                                          unary_expression
                                           primary_expression
                                            primary_expression_start
                                             identifier
                                              res
                                    !=
                                    relational_expression
                                     shift_expression
                                      additive_expression
                                       multiplicative_expression
                                        switch_expression
                                         range_expression
                                          unary_expression
                                           primary_expression
                                            primary_expression_start
                                             literal
                                              null
                          )
                          if_body
                           simple_embedded_statement
                            expression
                             non_assignment_expression
                              conditional_expression
                               null_coalescing_expression
                                conditional_or_expression
                                 conditional_and_expression
                                  inclusive_or_expression
                                   exclusive_or_expression
                                    and_expression
                                     equality_expression
                                      relational_expression
                                       shift_expression
                                        additive_expression
                                         multiplicative_expression
                                          switch_expression
                                           range_expression
                                            unary_expression
                                             await
                                             unary_expression
                                              primary_expression
                                               primary_expression_start
                                                identifier
                                                 res
                                               member_access
                                                .
                                                identifier
                                                 CloseAsync
                                               method_invocation
                                                (
                                                )
                            ;
                      }
                }
          }
     }
  namespace_member_declaration
   type_declaration
    class_definition
     class
     identifier
      CSharp70
     class_body
      {
      class_member_declarations
       class_member_declaration
        common_member_declaration
         void
         method_declaration
          method_member_name
           identifier
            PatternMatching
          (
          formal_parameter_list
           fixed_parameters
            fixed_parameter
             arg_declaration
              type_
               base_type
                class_type
                 string
              identifier
               arg
            ,
            fixed_parameter
             arg_declaration
              type_
               base_type
                simple_type
                 numeric_type
                  integral_type
                   int
              identifier
               b
          )
          method_body
           block
            {
            statement_list
             statement
              embedded_statement
               simple_embedded_statement
                switch
                (
                expression
                 non_assignment_expression
                  conditional_expression
                   null_coalescing_expression
                    conditional_or_expression
                     conditional_and_expression
                      inclusive_or_expression
                       exclusive_or_expression
                        and_expression
                         equality_expression
                          relational_expression
                           shift_expression
                            additive_expression
                             multiplicative_expression
                              switch_expression
                               range_expression
                                unary_expression
                                 primary_expression
                                  primary_expression_start
                                   identifier
                                    arg
                )
                {
                switch_section
                 switch_label
                  case
                  expression
                   non_assignment_expression
                    conditional_expression
                     null_coalescing_expression
                      conditional_or_expression
                       conditional_and_expression
                        inclusive_or_expression
                         exclusive_or_expression
                          and_expression
                           equality_expression
                            relational_expression
                             shift_expression
                              additive_expression
                               multiplicative_expression
                                switch_expression
                                 range_expression
                                  unary_expression
                                   primary_expression
                                    primary_expression_start
                                     literal
                                      string_literal
                                       "A"
                  case_guard
                   when
                   expression
                    non_assignment_expression
                     conditional_expression
                      null_coalescing_expression
                       conditional_or_expression
                        conditional_and_expression
                         inclusive_or_expression
                          exclusive_or_expression
                           and_expression
                            equality_expression
                             relational_expression
                              shift_expression
                               additive_expression
                                multiplicative_expression
                                 switch_expression
                                  range_expression
                                   unary_expression
                                    primary_expression
                                     primary_expression_start
                                      identifier
                                       b
                              >
                              shift_expression
                               additive_expression
                                multiplicative_expression
                                 switch_expression
                                  range_expression
                                   unary_expression
                                    primary_expression
                                     primary_expression_start
                                      literal
                                       50
                  :
                 switch_label
                  case
                  expression
                   non_assignment_expression
                    conditional_expression
                     null_coalescing_expression
                      conditional_or_expression
                       conditional_and_expression
                        inclusive_or_expression
                         exclusive_or_expression
                          and_expression
                           equality_expression
                            relational_expression
                             shift_expression
                              additive_expression
                               multiplicative_expression
                                switch_expression
                                 range_expression
                                  unary_expression
                                   primary_expression
                                    primary_expression_start
                                     literal
                                      string_literal
                                       "B"
                  case_guard
                   when
                   expression
                    non_assignment_expression
                     conditional_expression
                      null_coalescing_expression
                       conditional_or_expression
                        conditional_and_expression
                         inclusive_or_expression
                          exclusive_or_expression
                           and_expression
                            equality_expression
                             relational_expression
                              shift_expression
                               additive_expression
                                multiplicative_expression
                                 switch_expression
                                  range_expression
                                   unary_expression
                                    primary_expression
                                     primary_expression_start
                                      identifier
                                       b
                              <
                              shift_expression
                               additive_expression
                                multiplicative_expression
                                 switch_expression
                                  range_expression
                                   unary_expression
                                    primary_expression
                                     primary_expression_start
                                      literal
                                       50
                  :
                 switch_label
                  default
                  :
                 statement_list
                  statement
                   embedded_statement
                    simple_embedded_statement
                     break
                     ;
                }
             statement
              embedded_statement
               simple_embedded_statement
                expression
                 assignment
                  unary_expression
                   primary_expression
                    primary_expression_start
                     (
                     argument
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          A
                                 <
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          B
                     ,
                     argument
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          C
                                 >
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          D
                     ,
                     argument
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          E
                                 <
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          F
                     ,
                     argument
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          G
                                 >
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          H
                     )
                  assignment_operator
                   =
                  expression
                   non_assignment_expression
                    conditional_expression
                     null_coalescing_expression
                      conditional_or_expression
                       conditional_and_expression
                        inclusive_or_expression
                         exclusive_or_expression
                          and_expression
                           equality_expression
                            relational_expression
                             shift_expression
                              additive_expression
                               multiplicative_expression
                                switch_expression
                                 range_expression
                                  unary_expression
                                   primary_expression
                                    primary_expression_start
                                     identifier
                                      e
                ;
             statement
              embedded_statement
               simple_embedded_statement
                if
                (
                expression
                 non_assignment_expression
                  conditional_expression
                   null_coalescing_expression
                    conditional_or_expression
                     conditional_and_expression
                      inclusive_or_expression
                       exclusive_or_expression
                        and_expression
                         equality_expression
                          relational_expression
                           shift_expression
                            additive_expression
                             multiplicative_expression
                              switch_expression
                               range_expression
                                unary_expression
                                 primary_expression
                                  primary_expression_start
                                   identifier
                                    x
                                  member_access
                                   ?
                                   .
                                   identifier
                                    y
                                  member_access
                                   ?
                                   .
                                   identifier
                                    z
                           is
                           isType
                            base_type
                             class_type
                              namespace_or_type_name
                               identifier
                                Type
                            identifier
                             value2
                )
                if_body
                 block
                  {
                  }
             statement
              embedded_statement
               simple_embedded_statement
                if
                (
                expression
                 non_assignment_expression
                  conditional_expression
                   null_coalescing_expression
                    conditional_or_expression
                     conditional_and_expression
                      inclusive_or_expression
                       exclusive_or_expression
                        and_expression
                         equality_expression
                          relational_expression
                           shift_expression
                            additive_expression
                             multiplicative_expression
                              switch_expression
                               range_expression
                                unary_expression
                                 primary_expression
                                  primary_expression_start
                                   identifier
                                    expr
                           is
                           isType
                            base_type
                             class_type
                              namespace_or_type_name
                               identifier
                                Type
                            identifier
                             v
                )
                if_body
                 block
                  {
                  statement_list
                   statement
                    embedded_statement
                     simple_embedded_statement
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          Hello
                                        method_invocation
                                         (
                                         )
                      ;
                  }
            }
       class_member_declaration
        all_member_modifiers
         all_member_modifier
          public
         all_member_modifier
          static
         all_member_modifier
          async
        common_member_declaration
         typed_member_declaration
          type_
           base_type
            class_type
             namespace_or_type_name
              identifier
               Task
          method_declaration
           method_member_name
            identifier
             LocalFunctions
           (
           formal_parameter_list
            fixed_parameters
             fixed_parameter
              arg_declaration
               type_
                base_type
                 class_type
                  string
                rank_specifier
                 [
                 ]
               identifier
                args
           )
           method_body
            block
             {
             statement_list
              statement
               declarationStatement
                local_function_declaration
                 local_function_header
                  return_type
                   type_
                    base_type
                     class_type
                      string
                  identifier
                   Hello2
                  (
                  formal_parameter_list
                   fixed_parameters
                    fixed_parameter
                     arg_declaration
                      type_
                       base_type
                        simple_type
                         numeric_type
                          integral_type
                           int
                      identifier
                       i
                  )
                 local_function_body
                  block
                   {
                   statement_list
                    statement
                     embedded_statement
                      simple_embedded_statement
                       return
                       expression
                        non_assignment_expression
                         conditional_expression
                          null_coalescing_expression
                           conditional_or_expression
                            conditional_and_expression
                             inclusive_or_expression
                              exclusive_or_expression
                               and_expression
                                equality_expression
                                 relational_expression
                                  shift_expression
                                   additive_expression
                                    multiplicative_expression
                                     switch_expression
                                      range_expression
                                       unary_expression
                                        primary_expression
                                         primary_expression_start
                                          identifier
                                           args
                                         bracket_expression
                                          [
                                          indexer_argument
                                           expression
                                            non_assignment_expression
                                             conditional_expression
                                              null_coalescing_expression
                                               conditional_or_expression
                                                conditional_and_expression
                                                 inclusive_or_expression
                                                  exclusive_or_expression
                                                   and_expression
                                                    equality_expression
                                                     relational_expression
                                                      shift_expression
                                                       additive_expression
                                                        multiplicative_expression
                                                         switch_expression
                                                          range_expression
                                                           unary_expression
                                                            primary_expression
                                                             primary_expression_start
                                                              identifier
                                                               i
                                          ]
                       ;
                   }
              statement
               declarationStatement
                local_function_declaration
                 local_function_header
                  local_function_modifiers
                   async
                  return_type
                   type_
                    base_type
                     class_type
                      namespace_or_type_name
                       identifier
                        Task
                       type_argument_list
                        <
                        type_
                         base_type
                          class_type
                           string
                        >
                  identifier
                   Hello
                  type_parameter_list
                   <
                   type_parameter
                    identifier
                     T
                   >
                  (
                  formal_parameter_list
                   fixed_parameters
                    fixed_parameter
                     arg_declaration
                      type_
                       base_type
                        class_type
                         namespace_or_type_name
                          identifier
                           T
                      identifier
                       i
                  )
                 local_function_body
                  right_arrow
                   =
                   >
                  throwable_expression
                   expression
                    non_assignment_expression
                     conditional_expression
                      null_coalescing_expression
                       conditional_or_expression
                        conditional_and_expression
                         inclusive_or_expression
                          exclusive_or_expression
                           and_expression
                            equality_expression
                             relational_expression
                              shift_expression
                               additive_expression
                                multiplicative_expression
                                 switch_expression
                                  range_expression
                                   unary_expression
                                    await
                                    unary_expression
                                     primary_expression
                                      primary_expression_start
                                       identifier
                                        Task
                                      member_access
                                       .
                                       identifier
                                        FromResult
                                      method_invocation
                                       (
                                       argument_list
                                        argument
                                         expression
                                          non_assignment_expression
                                           conditional_expression
                                            null_coalescing_expression
                                             conditional_or_expression
                                              conditional_and_expression
                                               inclusive_or_expression
                                                exclusive_or_expression
                                                 and_expression
                                                  equality_expression
                                                   relational_expression
                                                    shift_expression
                                                     additive_expression
                                                      multiplicative_expression
                                                       switch_expression
                                                        range_expression
                                                         unary_expression
                                                          primary_expression
                                                           primary_expression_start
                                                            identifier
                                                             args
                                                           bracket_expression
                                                            [
                                                            indexer_argument
                                                             expression
                                                              non_assignment_expression
                                                               conditional_expression
                                                                null_coalescing_expression
                                                                 conditional_or_expression
                                                                  conditional_and_expression
                                                                   inclusive_or_expression
                                                                    exclusive_or_expression
                                                                     and_expression
                                                                      equality_expression
                                                                       relational_expression
                                                                        shift_expression
                                                                         additive_expression
                                                                          multiplicative_expression
                                                                           switch_expression
                                                                            range_expression
                                                                             unary_expression
                                                                              primary_expression
                                                                               primary_expression_start
                                                                                identifier
                                                                                 i
                                                            ]
                                       )
                  ;
              statement
               embedded_statement
                simple_embedded_statement
                 expression
                  non_assignment_expression
                   conditional_expression
                    null_coalescing_expression
                     conditional_or_expression
                      conditional_and_expression
                       inclusive_or_expression
                        exclusive_or_expression
                         and_expression
                          equality_expression
                           relational_expression
                            shift_expression
                             additive_expression
                              multiplicative_expression
                               switch_expression
                                range_expression
                                 unary_expression
                                  await
                                  unary_expression
                                   primary_expression
                                    primary_expression_start
                                     identifier
                                      Hello
                                    method_invocation
                                     (
                                     argument_list
                                      argument
                                       expression
                                        non_assignment_expression
                                         conditional_expression
                                          null_coalescing_expression
                                           conditional_or_expression
                                            conditional_and_expression
                                             inclusive_or_expression
                                              exclusive_or_expression
                                               and_expression
                                                equality_expression
                                                 relational_expression
                                                  shift_expression
                                                   additive_expression
                                                    multiplicative_expression
                                                     switch_expression
                                                      range_expression
                                                       unary_expression
                                                        primary_expression
                                                         primary_expression_start
                                                          literal
                                                           1
                                     )
                 ;
             }
       class_member_declaration
        all_member_modifiers
         all_member_modifier
          public
         all_member_modifier
          static
        common_member_declaration
         void
         method_declaration
          method_member_name
           identifier
            OutVar
          (
          formal_parameter_list
           fixed_parameters
            fixed_parameter
             arg_declaration
              type_
               base_type
                class_type
                 string
               rank_specifier
                [
                ]
              identifier
               args
          )
          method_body
           block
            {
            statement_list
             statement
              embedded_statement
               simple_embedded_statement
                expression
                 non_assignment_expression
                  conditional_expression
                   null_coalescing_expression
                    conditional_or_expression
                     conditional_and_expression
                      inclusive_or_expression
                       exclusive_or_expression
                        and_expression
                         equality_expression
                          relational_expression
                           shift_expression
                            additive_expression
                             multiplicative_expression
                              switch_expression
                               range_expression
                                unary_expression
                                 primary_expression
                                  primary_expression_start
                                   predefined_type
                                    int
                                  member_access
                                   .
                                   identifier
                                    TryParse
                                  method_invocation
                                   (
                                   argument_list
                                    argument
                                     expression
                                      non_assignment_expression
                                       conditional_expression
                                        null_coalescing_expression
                                         conditional_or_expression
                                          conditional_and_expression
                                           inclusive_or_expression
                                            exclusive_or_expression
                                             and_expression
                                              equality_expression
                                               relational_expression
                                                shift_expression
                                                 additive_expression
                                                  multiplicative_expression
                                                   switch_expression
                                                    range_expression
                                                     unary_expression
                                                      primary_expression
                                                       primary_expression_start
                                                        identifier
                                                         Hello
                                                       method_invocation
                                                        (
                                                        argument_list
                                                         argument
                                                          expression
                                                           non_assignment_expression
                                                            conditional_expression
                                                             null_coalescing_expression
                                                              conditional_or_expression
                                                               conditional_and_expression
                                                                inclusive_or_expression
                                                                 exclusive_or_expression
                                                                  and_expression
                                                                   equality_expression
                                                                    relational_expression
                                                                     shift_expression
                                                                      additive_expression
                                                                       multiplicative_expression
                                                                        switch_expression
                                                                         range_expression
                                                                          unary_expression
                                                                           primary_expression
                                                                            primary_expression_start
                                                                             literal
                                                                              1
                                                        )
                                    ,
                                    argument
                                     out
                                     var
                                     expression
                                      non_assignment_expression
                                       conditional_expression
                                        null_coalescing_expression
                                         conditional_or_expression
                                          conditional_and_expression
                                           inclusive_or_expression
                                            exclusive_or_expression
                                             and_expression
                                              equality_expression
                                               relational_expression
                                                shift_expression
                                                 additive_expression
                                                  multiplicative_expression
                                                   switch_expression
                                                    range_expression
                                                     unary_expression
                                                      primary_expression
                                                       primary_expression_start
                                                        identifier
                                                         item
                                   )
                ;
             statement
              embedded_statement
               simple_embedded_statement
                expression
                 non_assignment_expression
                  conditional_expression
                   null_coalescing_expression
                    conditional_or_expression
                     conditional_and_expression
                      inclusive_or_expression
                       exclusive_or_expression
                        and_expression
                         equality_expression
                          relational_expression
                           shift_expression
                            additive_expression
                             multiplicative_expression
                              switch_expression
                               range_expression
                                unary_expression
                                 primary_expression
                                  primary_expression_start
                                   predefined_type
                                    int
                                  member_access
                                   .
                                   identifier
                                    TryParse
                                  method_invocation
                                   (
                                   argument_list
                                    argument
                                     expression
                                      non_assignment_expression
                                       conditional_expression
                                        null_coalescing_expression
                                         conditional_or_expression
                                          conditional_and_expression
                                           inclusive_or_expression
                                            exclusive_or_expression
                                             and_expression
                                              equality_expression
                                               relational_expression
                                                shift_expression
                                                 additive_expression
                                                  multiplicative_expression
                                                   switch_expression
                                                    range_expression
                                                     unary_expression
                                                      primary_expression
                                                       primary_expression_start
                                                        identifier
                                                         Hello
                                                       method_invocation
                                                        (
                                                        argument_list
                                                         argument
                                                          expression
                                                           non_assignment_expression
                                                            conditional_expression
                                                             null_coalescing_expression
                                                              conditional_or_expression
                                                               conditional_and_expression
                                                                inclusive_or_expression
                                                                 exclusive_or_expression
                                                                  and_expression
                                                                   equality_expression
                                                                    relational_expression
                                                                     shift_expression
                                                                      additive_expression
                                                                       multiplicative_expression
                                                                        switch_expression
                                                                         range_expression
                                                                          unary_expression
                                                                           primary_expression
                                                                            primary_expression_start
                                                                             literal
                                                                              1
                                                        )
                                    ,
                                    argument
                                     out
                                     type_
                                      base_type
                                       simple_type
                                        numeric_type
                                         integral_type
                                          int
                                     expression
                                      non_assignment_expression
                                       conditional_expression
                                        null_coalescing_expression
                                         conditional_or_expression
                                          conditional_and_expression
                                           inclusive_or_expression
                                            exclusive_or_expression
                                             and_expression
                                              equality_expression
                                               relational_expression
                                                shift_expression
                                                 additive_expression
                                                  multiplicative_expression
                                                   switch_expression
                                                    range_expression
                                                     unary_expression
                                                      primary_expression
                                                       primary_expression_start
                                                        identifier
                                                         item
                                   )
                ;
            }
       class_member_declaration
        all_member_modifiers
         all_member_modifier
          public
        common_member_declaration
         void
         method_declaration
          method_member_name
           identifier
            ThrowExpression
          (
          )
          method_body
           block
            {
            statement_list
             statement
              declarationStatement
               local_variable_declaration
                local_variable_type
                 var
                local_variable_declarator
                 identifier
                  result
                 =
                 local_variable_initializer
                  expression
                   non_assignment_expression
                    conditional_expression
                     null_coalescing_expression
                      conditional_or_expression
                       conditional_and_expression
                        inclusive_or_expression
                         exclusive_or_expression
                          and_expression
                           equality_expression
                            relational_expression
                             shift_expression
                              additive_expression
                               multiplicative_expression
                                switch_expression
                                 range_expression
                                  unary_expression
                                   primary_expression
                                    primary_expression_start
                                     identifier
                                      nullableResult
                      ??
                      throw_expression
                       throw
                       expression
                        non_assignment_expression
                         conditional_expression
                          null_coalescing_expression
                           conditional_or_expression
                            conditional_and_expression
                             inclusive_or_expression
                              exclusive_or_expression
                               and_expression
                                equality_expression
                                 relational_expression
                                  shift_expression
                                   additive_expression
                                    multiplicative_expression
                                     switch_expression
                                      range_expression
                                       unary_expression
                                        primary_expression
                                         primary_expression_start
                                          new
                                          type_
                                           base_type
                                            class_type
                                             namespace_or_type_name
                                              identifier
                                               NullReferenceException
                                          object_creation_expression
                                           (
                                           )
               ;
            }
       class_member_declaration
        all_member_modifiers
         all_member_modifier
          public
        common_member_declaration
         void
         method_declaration
          method_member_name
           identifier
            BinaryLiterals
          (
          )
          method_body
           block
            {
            statement_list
             statement
              declarationStatement
               local_variable_declaration
                local_variable_type
                 type_
                  base_type
                   simple_type
                    numeric_type
                     integral_type
                      int
                local_variable_declarator
                 identifier
                  nineteen
                 =
                 local_variable_initializer
                  expression
                   non_assignment_expression
                    conditional_expression
                     null_coalescing_expression
                      conditional_or_expression
                       conditional_and_expression
                        inclusive_or_expression
                         exclusive_or_expression
                          and_expression
                           equality_expression
                            relational_expression
                             shift_expression
                              additive_expression
                               multiplicative_expression
                                switch_expression
                                 range_expression
                                  unary_expression
                                   primary_expression
                                    primary_expression_start
                                     literal
                                      0b10011
               ;
            }
       class_member_declaration
        all_member_modifiers
         all_member_modifier
          public
        common_member_declaration
         void
         method_declaration
          method_member_name
           identifier
            DigitSeparators
          (
          )
          method_body
           block
            {
            statement_list
             statement
              declarationStatement
               local_variable_declaration
                local_variable_type
                 type_
                  base_type
                   simple_type
                    numeric_type
                     integral_type
                      int
                local_variable_declarator
                 identifier
                  bin
                 =
                 local_variable_initializer
                  expression
                   non_assignment_expression
                    conditional_expression
                     null_coalescing_expression
                      conditional_or_expression
                       conditional_and_expression
                        inclusive_or_expression
                         exclusive_or_expression
                          and_expression
                           equality_expression
                            relational_expression
                             shift_expression
                              additive_expression
                               multiplicative_expression
                                switch_expression
                                 range_expression
                                  unary_expression
                                   primary_expression
                                    primary_expression_start
                                     literal
                                      0b1001_1010_0001_0100
               ;
             statement
              declarationStatement
               local_variable_declaration
                local_variable_type
                 type_
                  base_type
                   simple_type
                    numeric_type
                     integral_type
                      int
                local_variable_declarator
                 identifier
                  hex
                 =
                 local_variable_initializer
                  expression
                   non_assignment_expression
                    conditional_expression
                     null_coalescing_expression
                      conditional_or_expression
                       conditional_and_expression
                        inclusive_or_expression
                         exclusive_or_expression
                          and_expression
                           equality_expression
                            relational_expression
                             shift_expression
                              additive_expression
                               multiplicative_expression
                                switch_expression
                                 range_expression
                                  unary_expression
                                   primary_expression
                                    primary_expression_start
                                     literal
                                      0x1b_a0_44_fe
               ;
             statement
              declarationStatement
               local_variable_declaration
                local_variable_type
                 type_
                  base_type
                   simple_type
                    numeric_type
                     integral_type
                      int
                local_variable_declarator
                 identifier
                  dec
                 =
                 local_variable_initializer
                  expression
                   non_assignment_expression
                    conditional_expression
                     null_coalescing_expression
                      conditional_or_expression
                       conditional_and_expression
                        inclusive_or_expression
                         exclusive_or_expression
                          and_expression
                           equality_expression
                            relational_expression
                             shift_expression
                              additive_expression
                               multiplicative_expression
                                switch_expression
                                 range_expression
                                  unary_expression
                                   primary_expression
                                    primary_expression_start
                                     literal
                                      33_554_432
               ;
             statement
              declarationStatement
               local_variable_declaration
                local_variable_type
                 type_
                  base_type
                   simple_type
                    numeric_type
                     integral_type
                      int
                local_variable_declarator
                 identifier
                  weird
                 =
                 local_variable_initializer
                  expression
                   non_assignment_expression
                    conditional_expression
                     null_coalescing_expression
                      conditional_or_expression
                       conditional_and_expression
                        inclusive_or_expression
                         exclusive_or_expression
                          and_expression
                           equality_expression
                            relational_expression
                             shift_expression
                              additive_expression
                               multiplicative_expression
                                switch_expression
                                 range_expression
                                  unary_expression
                                   primary_expression
                                    primary_expression_start
                                     literal
                                      1_2__3___4____5_____6______7_______8________9
               ;
             statement
              declarationStatement
               local_variable_declaration
                local_variable_type
                 type_
                  base_type
                   simple_type
                    numeric_type
                     floating_point_type
                      double
                local_variable_declarator
                 identifier
                  real
                 =
                 local_variable_initializer
                  expression
                   non_assignment_expression
                    conditional_expression
                     null_coalescing_expression
                      conditional_or_expression
                       conditional_and_expression
                        inclusive_or_expression
                         exclusive_or_expression
                          and_expression
                           equality_expression
                            relational_expression
                             shift_expression
                              additive_expression
                               multiplicative_expression
                                switch_expression
                                 range_expression
                                  unary_expression
                                   primary_expression
                                    primary_expression_start
                                     literal
                                      1_000.111_1e-1_000
               ;
            }
      }
  namespace_member_declaration
   type_declaration
    class_definition
     class
     identifier
      CSharp71
     class_body
      {
      class_member_declarations
       class_member_declaration
        common_member_declaration
         void
         method_declaration
          method_member_name
           identifier
            DefaultWithoutTypeName
          (
          formal_parameter_list
           fixed_parameters
            fixed_parameter
             arg_declaration
              type_
               base_type
                class_type
                 string
              identifier
               content
              =
              expression
               non_assignment_expression
                conditional_expression
                 null_coalescing_expression
                  conditional_or_expression
                   conditional_and_expression
                    inclusive_or_expression
                     exclusive_or_expression
                      and_expression
                       equality_expression
                        relational_expression
                         shift_expression
                          additive_expression
                           multiplicative_expression
                            switch_expression
                             range_expression
                              unary_expression
                               primary_expression
                                primary_expression_start
                                 default
          )
          method_body
           block
            {
            statement_list
             statement
              embedded_statement
               simple_embedded_statement
                expression
                 non_assignment_expression
                  conditional_expression
                   null_coalescing_expression
                    conditional_or_expression
                     conditional_and_expression
                      inclusive_or_expression
                       exclusive_or_expression
                        and_expression
                         equality_expression
                          relational_expression
                           shift_expression
                            additive_expression
                             multiplicative_expression
                              switch_expression
                               range_expression
                                unary_expression
                                 primary_expression
                                  primary_expression_start
                                   identifier
                                    DefaultWithoutTypeName
                                  method_invocation
                                   (
                                   argument_list
                                    argument
                                     expression
                                      non_assignment_expression
                                       conditional_expression
                                        null_coalescing_expression
                                         conditional_or_expression
                                          conditional_and_expression
                                           inclusive_or_expression
                                            exclusive_or_expression
                                             and_expression
                                              equality_expression
                                               relational_expression
                                                shift_expression
                                                 additive_expression
                                                  multiplicative_expression
                                                   switch_expression
                                                    range_expression
                                                     unary_expression
                                                      primary_expression
                                                       primary_expression_start
                                                        default
                                   )
                ;
            }
       class_member_declaration
        common_member_declaration
         void
         method_declaration
          method_member_name
           identifier
            TupleRecognize
          (
          formal_parameter_list
           fixed_parameters
            fixed_parameter
             arg_declaration
              type_
               base_type
                simple_type
                 numeric_type
                  integral_type
                   int
              identifier
               a
            ,
            fixed_parameter
             arg_declaration
              type_
               base_type
                tuple_type
                 (
                 tuple_element
                  type_
                   base_type
                    simple_type
                     numeric_type
                      integral_type
                       int
                 ,
                 tuple_element
                  type_
                   base_type
                    simple_type
                     numeric_type
                      integral_type
                       int
                 )
              identifier
               b
            ,
            fixed_parameter
             arg_declaration
              type_
               base_type
                tuple_type
                 (
                 tuple_element
                  type_
                   base_type
                    simple_type
                     numeric_type
                      integral_type
                       int
                 ,
                 tuple_element
                  type_
                   base_type
                    simple_type
                     numeric_type
                      integral_type
                       int
                 ,
                 tuple_element
                  type_
                   base_type
                    simple_type
                     numeric_type
                      integral_type
                       int
                 )
               ?
              identifier
               c
          )
          method_body
           block
            {
            statement_list
             statement
              declarationStatement
               local_variable_declaration
                local_variable_type
                 var
                local_variable_declarator
                 identifier
                  result
                 =
                 local_variable_initializer
                  expression
                   non_assignment_expression
                    conditional_expression
                     null_coalescing_expression
                      conditional_or_expression
                       conditional_and_expression
                        inclusive_or_expression
                         exclusive_or_expression
                          and_expression
                           equality_expression
                            relational_expression
                             shift_expression
                              additive_expression
                               multiplicative_expression
                                switch_expression
                                 range_expression
                                  unary_expression
                                   primary_expression
                                    primary_expression_start
                                     identifier
                                      list
                                    member_access
                                     .
                                     identifier
                                      Select
                                    method_invocation
                                     (
                                     argument_list
                                      argument
                                       expression
                                        non_assignment_expression
                                         lambda_expression
                                          anonymous_function_signature
                                           identifier
                                            c
                                          right_arrow
                                           =
                                           >
                                          anonymous_function_body
                                           throwable_expression
                                            expression
                                             non_assignment_expression
                                              conditional_expression
                                               null_coalescing_expression
                                                conditional_or_expression
                                                 conditional_and_expression
                                                  inclusive_or_expression
                                                   exclusive_or_expression
                                                    and_expression
                                                     equality_expression
                                                      relational_expression
                                                       shift_expression
                                                        additive_expression
                                                         multiplicative_expression
                                                          switch_expression
                                                           range_expression
                                                            unary_expression
                                                             primary_expression
                                                              primary_expression_start
                                                               (
                                                               argument
                                                                expression
                                                                 non_assignment_expression
                                                                  conditional_expression
                                                                   null_coalescing_expression
                                                                    conditional_or_expression
                                                                     conditional_and_expression
                                                                      inclusive_or_expression
                                                                       exclusive_or_expression
                                                                        and_expression
                                                                         equality_expression
                                                                          relational_expression
                                                                           shift_expression
                                                                            additive_expression
                                                                             multiplicative_expression
                                                                              switch_expression
                                                                               range_expression
                                                                                unary_expression
                                                                                 primary_expression
                                                                                  primary_expression_start
                                                                                   identifier
                                                                                    c
                                                                                  member_access
                                                                                   .
                                                                                   identifier
                                                                                    f1
                                                               ,
                                                               argument
                                                                identifier
                                                                 f3
                                                                :
                                                                expression
                                                                 non_assignment_expression
                                                                  conditional_expression
                                                                   null_coalescing_expression
                                                                    conditional_or_expression
                                                                     conditional_and_expression
                                                                      inclusive_or_expression
                                                                       exclusive_or_expression
                                                                        and_expression
                                                                         equality_expression
                                                                          relational_expression
                                                                           shift_expression
                                                                            additive_expression
                                                                             multiplicative_expression
                                                                              switch_expression
                                                                               range_expression
                                                                                unary_expression
                                                                                 primary_expression
                                                                                  primary_expression_start
                                                                                   identifier
                                                                                    c
                                                                                  member_access
                                                                                   .
                                                                                   identifier
                                                                                    f2
                                                               )
                                     )
                                    member_access
                                     .
                                     identifier
                                      Where
                                    method_invocation
                                     (
                                     argument_list
                                      argument
                                       expression
                                        non_assignment_expression
                                         lambda_expression
                                          anonymous_function_signature
                                           identifier
                                            t
                                          right_arrow
                                           =
                                           >
                                          anonymous_function_body
                                           throwable_expression
                                            expression
                                             non_assignment_expression
                                              conditional_expression
                                               null_coalescing_expression
                                                conditional_or_expression
                                                 conditional_and_expression
                                                  inclusive_or_expression
                                                   exclusive_or_expression
                                                    and_expression
                                                     equality_expression
                                                      relational_expression
                                                       shift_expression
                                                        additive_expression
                                                         multiplicative_expression
                                                          switch_expression
                                                           range_expression
                                                            unary_expression
                                                             primary_expression
                                                              primary_expression_start
                                                               identifier
                                                                t
                                                              member_access
                                                               .
                                                               identifier
                                                                f2
                                                      ==
                                                      relational_expression
                                                       shift_expression
                                                        additive_expression
                                                         multiplicative_expression
                                                          switch_expression
                                                           range_expression
                                                            unary_expression
                                                             primary_expression
                                                              primary_expression_start
                                                               literal
                                                                1
                                     )
               ;
            }
      }
  namespace_member_declaration
   type_declaration
    class_definition
     class
     identifier
      CSharp72
     class_body
      {
      class_member_declarations
       class_member_declaration
        all_member_modifiers
         all_member_modifier
          readonly
        common_member_declaration
         struct_definition
          struct
          identifier
           ReadonlyRef1
          struct_body
           {
           struct_member_declaration
            common_member_declaration
             typed_member_declaration
              type_
               base_type
                class_type
                 namespace_or_type_name
                  identifier
                   Func
                  type_argument_list
                   <
                   type_
                    base_type
                     simple_type
                      numeric_type
                       integral_type
                        int
                   ,
                   type_
                    base_type
                     simple_type
                      numeric_type
                       integral_type
                        int
                   >
              field_declaration
               variable_declarators
                variable_declarator
                 identifier
                  s
                 =
                 variable_initializer
                  expression
                   non_assignment_expression
                    lambda_expression
                     anonymous_function_signature
                      (
                      explicit_anonymous_function_parameter_list
                       explicit_anonymous_function_parameter
                        in
                        type_
                         base_type
                          simple_type
                           numeric_type
                            integral_type
                             int
                        identifier
                         x
                      )
                     right_arrow
                      =
                      >
                     anonymous_function_body
                      throwable_expression
                       expression
                        non_assignment_expression
                         conditional_expression
                          null_coalescing_expression
                           conditional_or_expression
                            conditional_and_expression
                             inclusive_or_expression
                              exclusive_or_expression
                               and_expression
                                equality_expression
                                 relational_expression
                                  shift_expression
                                   additive_expression
                                    multiplicative_expression
                                     switch_expression
                                      range_expression
                                       unary_expression
                                        primary_expression
                                         primary_expression_start
                                          identifier
                                           x
               ;
           struct_member_declaration
            common_member_declaration
             typed_member_declaration
              ref
              type_
               base_type
                class_type
                 namespace_or_type_name
                  identifier
                   TValue
              indexer_declaration
               this
               [
               formal_parameter_list
                fixed_parameters
                 fixed_parameter
                  parameter_modifier
                   in
                  arg_declaration
                   type_
                    base_type
                     class_type
                      namespace_or_type_name
                       identifier
                        TKey
                   identifier
                    index
               ]
               right_arrow
                =
                >
               throwable_expression
                expression
                 non_assignment_expression
                  conditional_expression
                   null_coalescing_expression
                    conditional_or_expression
                     conditional_and_expression
                      inclusive_or_expression
                       exclusive_or_expression
                        and_expression
                         equality_expression
                          relational_expression
                           shift_expression
                            additive_expression
                             multiplicative_expression
                              switch_expression
                               range_expression
                                unary_expression
                                 primary_expression
                                  primary_expression_start
                                   literal
                                    null
               ;
           struct_member_declaration
            all_member_modifiers
             all_member_modifier
              public
             all_member_modifier
              static
            common_member_declaration
             typed_member_declaration
              type_
               base_type
                class_type
                 namespace_or_type_name
                  identifier
                   Vector3
              operator_declaration
               operator
               overloadable_operator
                +
               (
               in
               arg_declaration
                type_
                 base_type
                  class_type
                   namespace_or_type_name
                    identifier
                     Vector3
                identifier
                 x
               ,
               in
               arg_declaration
                type_
                 base_type
                  class_type
                   namespace_or_type_name
                    identifier
                     Vector3
                identifier
                 y
               )
               right_arrow
                =
                >
               throwable_expression
                expression
                 non_assignment_expression
                  conditional_expression
                   null_coalescing_expression
                    conditional_or_expression
                     conditional_and_expression
                      inclusive_or_expression
                       exclusive_or_expression
                        and_expression
                         equality_expression
                          relational_expression
                           shift_expression
                            additive_expression
                             multiplicative_expression
                              switch_expression
                               range_expression
                                unary_expression
                                 primary_expression
                                  primary_expression_start
                                   literal
                                    null
               ;
           struct_member_declaration
            all_member_modifiers
             all_member_modifier
              static
             all_member_modifier
              readonly
            common_member_declaration
             typed_member_declaration
              ref
              type_
               base_type
                class_type
                 namespace_or_type_name
                  identifier
                   Vector3
              method_declaration
               method_member_name
                identifier
                 M1_Trace
               (
               )
               method_body
                block
                 {
                 statement_list
                  statement
                   declarationStatement
                    local_variable_declaration
                     ref
                     readonly
                     local_variable_type
                      var
                     local_variable_declarator
                      identifier
                       r1
                      =
                      ref
                      local_variable_initializer
                       expression
                        non_assignment_expression
                         conditional_expression
                          null_coalescing_expression
                           conditional_or_expression
                            conditional_and_expression
                             inclusive_or_expression
                              exclusive_or_expression
                               and_expression
                                equality_expression
                                 relational_expression
                                  shift_expression
                                   additive_expression
                                    multiplicative_expression
                                     switch_expression
                                      range_expression
                                       unary_expression
                                        primary_expression
                                         primary_expression_start
                                          identifier
                                           M1
                                         method_invocation
                                          (
                                          )
                    ;
                  statement
                   declarationStatement
                    local_variable_declaration
                     ref
                     readonly
                     local_variable_type
                      type_
                       base_type
                        class_type
                         namespace_or_type_name
                          identifier
                           Vector3
                     local_variable_declarator
                      identifier
                       r2
                      =
                      ref
                      local_variable_initializer
                       expression
                        non_assignment_expression
                         conditional_expression
                          null_coalescing_expression
                           conditional_or_expression
                            conditional_and_expression
                             inclusive_or_expression
                              exclusive_or_expression
                               and_expression
                                equality_expression
                                 relational_expression
                                  shift_expression
                                   additive_expression
                                    multiplicative_expression
                                     switch_expression
                                      range_expression
                                       unary_expression
                                        primary_expression
                                         primary_expression_start
                                          default
                                          (
                                          type_
                                           base_type
                                            class_type
                                             namespace_or_type_name
                                              identifier
                                               Vector3
                                          )
                    ;
                  statement
                   embedded_statement
                    simple_embedded_statement
                     expression
                      non_assignment_expression
                       conditional_expression
                        null_coalescing_expression
                         conditional_or_expression
                          conditional_and_expression
                           inclusive_or_expression
                            exclusive_or_expression
                             and_expression
                              equality_expression
                               relational_expression
                                shift_expression
                                 additive_expression
                                  multiplicative_expression
                                   switch_expression
                                    range_expression
                                     unary_expression
                                      primary_expression
                                       primary_expression_start
                                        identifier
                                         Mutate
                                       method_invocation
                                        (
                                        argument_list
                                         argument
                                          ref
                                          expression
                                           non_assignment_expression
                                            conditional_expression
                                             null_coalescing_expression
                                              conditional_or_expression
                                               conditional_and_expression
                                                inclusive_or_expression
                                                 exclusive_or_expression
                                                  and_expression
                                                   equality_expression
                                                    relational_expression
                                                     shift_expression
                                                      additive_expression
                                                       multiplicative_expression
                                                        switch_expression
                                                         range_expression
                                                          unary_expression
                                                           primary_expression
                                                            primary_expression_start
                                                             identifier
                                                              r1
                                        )
                     ;
                  statement
                   embedded_statement
                    simple_embedded_statement
                     expression
                      non_assignment_expression
                       conditional_expression
                        null_coalescing_expression
                         conditional_or_expression
                          conditional_and_expression
                           inclusive_or_expression
                            exclusive_or_expression
                             and_expression
                              equality_expression
                               relational_expression
                                shift_expression
                                 additive_expression
                                  multiplicative_expression
                                   switch_expression
                                    range_expression
                                     unary_expression
                                      primary_expression
                                       primary_expression_start
                                        identifier
                                         Print
                                       method_invocation
                                        (
                                        argument_list
                                         argument
                                          in
                                          expression
                                           non_assignment_expression
                                            conditional_expression
                                             null_coalescing_expression
                                              conditional_or_expression
                                               conditional_and_expression
                                                inclusive_or_expression
                                                 exclusive_or_expression
                                                  and_expression
                                                   equality_expression
                                                    relational_expression
                                                     shift_expression
                                                      additive_expression
                                                       multiplicative_expression
                                                        switch_expression
                                                         range_expression
                                                          unary_expression
                                                           primary_expression
                                                            primary_expression_start
                                                             identifier
                                                              r1
                                        )
                     ;
                  statement
                   embedded_statement
                    simple_embedded_statement
                     return
                     expression
                      ref
                      non_assignment_expression
                       conditional_expression
                        null_coalescing_expression
                         conditional_or_expression
                          conditional_and_expression
                           inclusive_or_expression
                            exclusive_or_expression
                             and_expression
                              equality_expression
                               relational_expression
                                shift_expression
                                 additive_expression
                                  multiplicative_expression
                                   switch_expression
                                    range_expression
                                     unary_expression
                                      primary_expression
                                       primary_expression_start
                                        identifier
                                         r1
                     ;
                 }
           }
       class_member_declaration
        common_member_declaration
         struct_definition
          ref
          struct
          identifier
           ReadonlyRef2
          struct_body
           {
           struct_member_declaration
            common_member_declaration
             typed_member_declaration
              ref
              readonly
              type_
               base_type
                class_type
                 namespace_or_type_name
                  identifier
                   Guid
              method_declaration
               method_member_name
                identifier
                 Test
               (
               formal_parameter_list
                fixed_parameters
                 fixed_parameter
                  parameter_modifier
                   in
                  arg_declaration
                   type_
                    base_type
                     class_type
                      namespace_or_type_name
                       identifier
                        Vector3
                   identifier
                    v1
                 ,
                 fixed_parameter
                  parameter_modifier
                   in
                  arg_declaration
                   type_
                    base_type
                     class_type
                      namespace_or_type_name
                       identifier
                        Vector3
                   identifier
                    v2
               )
               method_body
                block
                 {
                 statement_list
                  statement
                   embedded_statement
                    simple_embedded_statement
                     expression
                      assignment
                       unary_expression
                        primary_expression
                         primary_expression_start
                          identifier
                           v1
                       assignment_operator
                        =
                       expression
                        non_assignment_expression
                         conditional_expression
                          null_coalescing_expression
                           conditional_or_expression
                            conditional_and_expression
                             inclusive_or_expression
                              exclusive_or_expression
                               and_expression
                                equality_expression
                                 relational_expression
                                  shift_expression
                                   additive_expression
                                    multiplicative_expression
                                     switch_expression
                                      range_expression
                                       unary_expression
                                        primary_expression
                                         primary_expression_start
                                          default
                                          (
                                          type_
                                           base_type
                                            class_type
                                             namespace_or_type_name
                                              identifier
                                               Vector3
                                          )
                     ;
                  statement
                   embedded_statement
                    simple_embedded_statement
                     expression
                      assignment
                       unary_expression
                        primary_expression
                         primary_expression_start
                          identifier
                           v1
                         member_access
                          .
                          identifier
                           X
                       assignment_operator
                        =
                       expression
                        non_assignment_expression
                         conditional_expression
                          null_coalescing_expression
                           conditional_or_expression
                            conditional_and_expression
                             inclusive_or_expression
                              exclusive_or_expression
                               and_expression
                                equality_expression
                                 relational_expression
                                  shift_expression
                                   additive_expression
                                    multiplicative_expression
                                     switch_expression
                                      range_expression
                                       unary_expression
                                        primary_expression
                                         primary_expression_start
                                          literal
                                           0
                     ;
                  statement
                   embedded_statement
                    simple_embedded_statement
                     expression
                      non_assignment_expression
                       conditional_expression
                        null_coalescing_expression
                         conditional_or_expression
                          conditional_and_expression
                           inclusive_or_expression
                            exclusive_or_expression
                             and_expression
                              equality_expression
                               relational_expression
                                shift_expression
                                 additive_expression
                                  multiplicative_expression
                                   switch_expression
                                    range_expression
                                     unary_expression
                                      primary_expression
                                       primary_expression_start
                                        identifier
                                         foo
                                       method_invocation
                                        (
                                        argument_list
                                         argument
                                          ref
                                          expression
                                           non_assignment_expression
                                            conditional_expression
                                             null_coalescing_expression
                                              conditional_or_expression
                                               conditional_and_expression
                                                inclusive_or_expression
                                                 exclusive_or_expression
                                                  and_expression
                                                   equality_expression
                                                    relational_expression
                                                     shift_expression
                                                      additive_expression
                                                       multiplicative_expression
                                                        switch_expression
                                                         range_expression
                                                          unary_expression
                                                           primary_expression
                                                            primary_expression_start
                                                             identifier
                                                              v1
                                                            member_access
                                                             .
                                                             identifier
                                                              X
                                        )
                     ;
                  statement
                   embedded_statement
                    simple_embedded_statement
                     return
                     expression
                      ref
                      non_assignment_expression
                       conditional_expression
                        null_coalescing_expression
                         conditional_or_expression
                          conditional_and_expression
                           inclusive_or_expression
                            exclusive_or_expression
                             and_expression
                              equality_expression
                               relational_expression
                                shift_expression
                                 additive_expression
                                  multiplicative_expression
                                   switch_expression
                                    range_expression
                                     unary_expression
                                      primary_expression
                                       primary_expression_start
                                        (
                                        expression
                                         non_assignment_expression
                                          conditional_expression
                                           null_coalescing_expression
                                            conditional_or_expression
                                             conditional_and_expression
                                              inclusive_or_expression
                                               exclusive_or_expression
                                                and_expression
                                                 equality_expression
                                                  relational_expression
                                                   shift_expression
                                                    additive_expression
                                                     multiplicative_expression
                                                      switch_expression
                                                       range_expression
                                                        unary_expression
                                                         primary_expression
                                                          primary_expression_start
                                                           identifier
                                                            arr
                                                  !=
                                                  relational_expression
                                                   shift_expression
                                                    additive_expression
                                                     multiplicative_expression
                                                      switch_expression
                                                       range_expression
                                                        unary_expression
                                                         primary_expression
                                                          primary_expression_start
                                                           literal
                                                            null
                                           ?
                                           throwable_expression
                                            expression
                                             ref
                                             non_assignment_expression
                                              conditional_expression
                                               null_coalescing_expression
                                                conditional_or_expression
                                                 conditional_and_expression
                                                  inclusive_or_expression
                                                   exclusive_or_expression
                                                    and_expression
                                                     equality_expression
                                                      relational_expression
                                                       shift_expression
                                                        additive_expression
                                                         multiplicative_expression
                                                          switch_expression
                                                           range_expression
                                                            unary_expression
                                                             primary_expression
                                                              primary_expression_start
                                                               identifier
                                                                arr
                                                              bracket_expression
                                                               [
                                                               indexer_argument
                                                                expression
                                                                 non_assignment_expression
                                                                  conditional_expression
                                                                   null_coalescing_expression
                                                                    conditional_or_expression
                                                                     conditional_and_expression
                                                                      inclusive_or_expression
                                                                       exclusive_or_expression
                                                                        and_expression
                                                                         equality_expression
                                                                          relational_expression
                                                                           shift_expression
                                                                            additive_expression
                                                                             multiplicative_expression
                                                                              switch_expression
                                                                               range_expression
                                                                                unary_expression
                                                                                 primary_expression
                                                                                  primary_expression_start
                                                                                   literal
                                                                                    0
                                                               ]
                                           :
                                           throwable_expression
                                            expression
                                             ref
                                             non_assignment_expression
                                              conditional_expression
                                               null_coalescing_expression
                                                conditional_or_expression
                                                 conditional_and_expression
                                                  inclusive_or_expression
                                                   exclusive_or_expression
                                                    and_expression
                                                     equality_expression
                                                      relational_expression
                                                       shift_expression
                                                        additive_expression
                                                         multiplicative_expression
                                                          switch_expression
                                                           range_expression
                                                            unary_expression
                                                             primary_expression
                                                              primary_expression_start
                                                               identifier
                                                                otherArr
                                                              bracket_expression
                                                               [
                                                               indexer_argument
                                                                expression
                                                                 non_assignment_expression
                                                                  conditional_expression
                                                                   null_coalescing_expression
                                                                    conditional_or_expression
                                                                     conditional_and_expression
                                                                      inclusive_or_expression
                                                                       exclusive_or_expression
                                                                        and_expression
                                                                         equality_expression
                                                                          relational_expression
                                                                           shift_expression
                                                                            additive_expression
                                                                             multiplicative_expression
                                                                              switch_expression
                                                                               range_expression
                                                                                unary_expression
                                                                                 primary_expression
                                                                                  primary_expression_start
                                                                                   literal
                                                                                    0
                                                               ]
                                        )
                     ;
                  statement
                   declarationStatement
                    local_variable_declaration
                     local_variable_type
                      type_
                       base_type
                        class_type
                         namespace_or_type_name
                          identifier
                           Span
                          type_argument_list
                           <
                           type_
                            base_type
                             simple_type
                              numeric_type
                               integral_type
                                int
                           >
                     local_variable_declarator
                      identifier
                       span
                      =
                      local_variable_initializer
                       stackalloc_initializer
                        stackalloc
                        type_
                         base_type
                          simple_type
                           numeric_type
                            integral_type
                             int
                        [
                        expression
                         non_assignment_expression
                          conditional_expression
                           null_coalescing_expression
                            conditional_or_expression
                             conditional_and_expression
                              inclusive_or_expression
                               exclusive_or_expression
                                and_expression
                                 equality_expression
                                  relational_expression
                                   shift_expression
                                    additive_expression
                                     multiplicative_expression
                                      switch_expression
                                       range_expression
                                        unary_expression
                                         primary_expression
                                          primary_expression_start
                                           literal
                                            1
                        ]
                    ;
                  statement
                   embedded_statement
                    simple_embedded_statement
                     return
                     expression
                      non_assignment_expression
                       conditional_expression
                        null_coalescing_expression
                         conditional_or_expression
                          conditional_and_expression
                           inclusive_or_expression
                            exclusive_or_expression
                             and_expression
                              equality_expression
                               relational_expression
                                shift_expression
                                 additive_expression
                                  multiplicative_expression
                                   switch_expression
                                    range_expression
                                     unary_expression
                                      primary_expression
                                       primary_expression_start
                                        new
                                        type_
                                         base_type
                                          class_type
                                           namespace_or_type_name
                                            identifier
                                             Vector3
                                        object_creation_expression
                                         (
                                         argument_list
                                          argument
                                           expression
                                            non_assignment_expression
                                             conditional_expression
                                              null_coalescing_expression
                                               conditional_or_expression
                                                conditional_and_expression
                                                 inclusive_or_expression
                                                  exclusive_or_expression
                                                   and_expression
                                                    equality_expression
                                                     relational_expression
                                                      shift_expression
                                                       additive_expression
                                                        multiplicative_expression
                                                         switch_expression
                                                          range_expression
                                                           unary_expression
                                                            primary_expression
                                                             primary_expression_start
                                                              identifier
                                                               v1
                                                             member_access
                                                              .
                                                              identifier
                                                               X
                                                        +
                                                        multiplicative_expression
                                                         switch_expression
                                                          range_expression
                                                           unary_expression
                                                            primary_expression
                                                             primary_expression_start
                                                              identifier
                                                               v2
                                                             member_access
                                                              .
                                                              identifier
                                                               X
                                          ,
                                          argument
                                           expression
                                            non_assignment_expression
                                             conditional_expression
                                              null_coalescing_expression
                                               conditional_or_expression
                                                conditional_and_expression
                                                 inclusive_or_expression
                                                  exclusive_or_expression
                                                   and_expression
                                                    equality_expression
                                                     relational_expression
                                                      shift_expression
                                                       additive_expression
                                                        multiplicative_expression
                                                         switch_expression
                                                          range_expression
                                                           unary_expression
                                                            primary_expression
                                                             primary_expression_start
                                                              identifier
                                                               v1
                                                             member_access
                                                              .
                                                              identifier
                                                               Y
                                                        +
                                                        multiplicative_expression
                                                         switch_expression
                                                          range_expression
                                                           unary_expression
                                                            primary_expression
                                                             primary_expression_start
                                                              identifier
                                                               v2
                                                             member_access
                                                              .
                                                              identifier
                                                               Y
                                          ,
                                          argument
                                           expression
                                            non_assignment_expression
                                             conditional_expression
                                              null_coalescing_expression
                                               conditional_or_expression
                                                conditional_and_expression
                                                 inclusive_or_expression
                                                  exclusive_or_expression
                                                   and_expression
                                                    equality_expression
                                                     relational_expression
                                                      shift_expression
                                                       additive_expression
                                                        multiplicative_expression
                                                         switch_expression
                                                          range_expression
                                                           unary_expression
                                                            primary_expression
                                                             primary_expression_start
                                                              identifier
                                                               v1
                                                             member_access
                                                              .
                                                              identifier
                                                               Z
                                                        +
                                                        multiplicative_expression
                                                         switch_expression
                                                          range_expression
                                                           unary_expression
                                                            primary_expression
                                                             primary_expression_start
                                                              identifier
                                                               v2
                                                             member_access
                                                              .
                                                              identifier
                                                               Z
                                         )
                     ;
                 }
           struct_member_declaration
            common_member_declaration
             typed_member_declaration
              ref
              type_
               base_type
                class_type
                 namespace_or_type_name
                  identifier
                   T
              method_declaration
               method_member_name
                identifier
                 Choice
               (
               formal_parameter_list
                fixed_parameters
                 fixed_parameter
                  arg_declaration
                   type_
                    base_type
                     simple_type
                      bool
                   identifier
                    condition
                 ,
                 fixed_parameter
                  parameter_modifier
                   ref
                  arg_declaration
                   type_
                    base_type
                     class_type
                      namespace_or_type_name
                       identifier
                        T
                   identifier
                    consequence
                 ,
                 fixed_parameter
                  parameter_modifier
                   ref
                  arg_declaration
                   type_
                    base_type
                     class_type
                      namespace_or_type_name
                       identifier
                        T
                   identifier
                    alternative
               )
               method_body
                block
                 {
                 statement_list
                  statement
                   embedded_statement
                    simple_embedded_statement
                     if
                     (
                     expression
                      non_assignment_expression
                       conditional_expression
                        null_coalescing_expression
                         conditional_or_expression
                          conditional_and_expression
                           inclusive_or_expression
                            exclusive_or_expression
                             and_expression
                              equality_expression
                               relational_expression
                                shift_expression
                                 additive_expression
                                  multiplicative_expression
                                   switch_expression
                                    range_expression
                                     unary_expression
                                      primary_expression
                                       primary_expression_start
                                        identifier
                                         condition
                     )
                     if_body
                      block
                       {
                       statement_list
                        statement
                         embedded_statement
                          simple_embedded_statement
                           return
                           expression
                            ref
                            non_assignment_expression
                             conditional_expression
                              null_coalescing_expression
                               conditional_or_expression
                                conditional_and_expression
                                 inclusive_or_expression
                                  exclusive_or_expression
                                   and_expression
                                    equality_expression
                                     relational_expression
                                      shift_expression
                                       additive_expression
                                        multiplicative_expression
                                         switch_expression
                                          range_expression
                                           unary_expression
                                            primary_expression
                                             primary_expression_start
                                              identifier
                                               consequence
                           ;
                       }
                     else
                     if_body
                      block
                       {
                       statement_list
                        statement
                         embedded_statement
                          simple_embedded_statement
                           return
                           expression
                            ref
                            non_assignment_expression
                             conditional_expression
                              null_coalescing_expression
                               conditional_or_expression
                                conditional_and_expression
                                 inclusive_or_expression
                                  exclusive_or_expression
                                   and_expression
                                    equality_expression
                                     relational_expression
                                      shift_expression
                                       additive_expression
                                        multiplicative_expression
                                         switch_expression
                                          range_expression
                                           unary_expression
                                            primary_expression
                                             primary_expression_start
                                              identifier
                                               alternative
                           ;
                       }
                 }
           }
       class_member_declaration
        all_member_modifiers
         all_member_modifier
          public
        common_member_declaration
         void
         method_declaration
          method_member_name
           identifier
            DoSomething
          (
          formal_parameter_list
           fixed_parameters
            fixed_parameter
             arg_declaration
              type_
               base_type
                simple_type
                 bool
              identifier
               isEmployed
            ,
            fixed_parameter
             arg_declaration
              type_
               base_type
                class_type
                 string
              identifier
               personName
            ,
            fixed_parameter
             arg_declaration
              type_
               base_type
                simple_type
                 numeric_type
                  integral_type
                   int
              identifier
               personAge
          )
          method_body
           block
            {
            }
       class_member_declaration
        all_member_modifiers
         all_member_modifier
          public
        common_member_declaration
         void
         method_declaration
          method_member_name
           identifier
            NonTrailingNamedArguments
          (
          )
          method_body
           block
            {
            statement_list
             statement
              embedded_statement
               simple_embedded_statement
                expression
                 non_assignment_expression
                  conditional_expression
                   null_coalescing_expression
                    conditional_or_expression
                     conditional_and_expression
                      inclusive_or_expression
                       exclusive_or_expression
                        and_expression
                         equality_expression
                          relational_expression
                           shift_expression
                            additive_expression
                             multiplicative_expression
                              switch_expression
                               range_expression
                                unary_expression
                                 primary_expression
                                  primary_expression_start
                                   identifier
                                    DoSomething
                                  method_invocation
                                   (
                                   argument_list
                                    argument
                                     identifier
                                      isEmployed
                                     :
                                     expression
                                      non_assignment_expression
                                       conditional_expression
                                        null_coalescing_expression
                                         conditional_or_expression
                                          conditional_and_expression
                                           inclusive_or_expression
                                            exclusive_or_expression
                                             and_expression
                                              equality_expression
                                               relational_expression
                                                shift_expression
                                                 additive_expression
                                                  multiplicative_expression
                                                   switch_expression
                                                    range_expression
                                                     unary_expression
                                                      primary_expression
                                                       primary_expression_start
                                                        literal
                                                         boolean_literal
                                                          true
                                    ,
                                    argument
                                     expression
                                      non_assignment_expression
                                       conditional_expression
                                        null_coalescing_expression
                                         conditional_or_expression
                                          conditional_and_expression
                                           inclusive_or_expression
                                            exclusive_or_expression
                                             and_expression
                                              equality_expression
                                               relational_expression
                                                shift_expression
                                                 additive_expression
                                                  multiplicative_expression
                                                   switch_expression
                                                    range_expression
                                                     unary_expression
                                                      primary_expression
                                                       primary_expression_start
                                                        identifier
                                                         name
                                    ,
                                    argument
                                     expression
                                      non_assignment_expression
                                       conditional_expression
                                        null_coalescing_expression
                                         conditional_or_expression
                                          conditional_and_expression
                                           inclusive_or_expression
                                            exclusive_or_expression
                                             and_expression
                                              equality_expression
                                               relational_expression
                                                shift_expression
                                                 additive_expression
                                                  multiplicative_expression
                                                   switch_expression
                                                    range_expression
                                                     unary_expression
                                                      primary_expression
                                                       primary_expression_start
                                                        identifier
                                                         age
                                   )
                ;
             statement
              embedded_statement
               simple_embedded_statement
                expression
                 non_assignment_expression
                  conditional_expression
                   null_coalescing_expression
                    conditional_or_expression
                     conditional_and_expression
                      inclusive_or_expression
                       exclusive_or_expression
                        and_expression
                         equality_expression
                          relational_expression
                           shift_expression
                            additive_expression
                             multiplicative_expression
                              switch_expression
                               range_expression
                                unary_expression
                                 primary_expression
                                  primary_expression_start
                                   identifier
                                    DoSomething
                                  method_invocation
                                   (
                                   argument_list
                                    argument
                                     expression
                                      non_assignment_expression
                                       conditional_expression
                                        null_coalescing_expression
                                         conditional_or_expression
                                          conditional_and_expression
                                           inclusive_or_expression
                                            exclusive_or_expression
                                             and_expression
                                              equality_expression
                                               relational_expression
                                                shift_expression
                                                 additive_expression
                                                  multiplicative_expression
                                                   switch_expression
                                                    range_expression
                                                     unary_expression
                                                      primary_expression
                                                       primary_expression_start
                                                        literal
                                                         boolean_literal
                                                          true
                                    ,
                                    argument
                                     identifier
                                      personName
                                     :
                                     expression
                                      non_assignment_expression
                                       conditional_expression
                                        null_coalescing_expression
                                         conditional_or_expression
                                          conditional_and_expression
                                           inclusive_or_expression
                                            exclusive_or_expression
                                             and_expression
                                              equality_expression
                                               relational_expression
                                                shift_expression
                                                 additive_expression
                                                  multiplicative_expression
                                                   switch_expression
                                                    range_expression
                                                     unary_expression
                                                      primary_expression
                                                       primary_expression_start
                                                        identifier
                                                         name
                                    ,
                                    argument
                                     expression
                                      non_assignment_expression
                                       conditional_expression
                                        null_coalescing_expression
                                         conditional_or_expression
                                          conditional_and_expression
                                           inclusive_or_expression
                                            exclusive_or_expression
                                             and_expression
                                              equality_expression
                                               relational_expression
                                                shift_expression
                                                 additive_expression
                                                  multiplicative_expression
                                                   switch_expression
                                                    range_expression
                                                     unary_expression
                                                      primary_expression
                                                       primary_expression_start
                                                        identifier
                                                         age
                                   )
                ;
             statement
              embedded_statement
               simple_embedded_statement
                expression
                 non_assignment_expression
                  conditional_expression
                   null_coalescing_expression
                    conditional_or_expression
                     conditional_and_expression
                      inclusive_or_expression
                       exclusive_or_expression
                        and_expression
                         equality_expression
                          relational_expression
                           shift_expression
                            additive_expression
                             multiplicative_expression
                              switch_expression
                               range_expression
                                unary_expression
                                 primary_expression
                                  primary_expression_start
                                   identifier
                                    DoSomething
                                  method_invocation
                                   (
                                   argument_list
                                    argument
                                     expression
                                      non_assignment_expression
                                       conditional_expression
                                        null_coalescing_expression
                                         conditional_or_expression
                                          conditional_and_expression
                                           inclusive_or_expression
                                            exclusive_or_expression
                                             and_expression
                                              equality_expression
                                               relational_expression
                                                shift_expression
                                                 additive_expression
                                                  multiplicative_expression
                                                   switch_expression
                                                    range_expression
                                                     unary_expression
                                                      primary_expression
                                                       primary_expression_start
                                                        identifier
                                                         name
                                    ,
                                    argument
                                     identifier
                                      isEmployed
                                     :
                                     expression
                                      non_assignment_expression
                                       conditional_expression
                                        null_coalescing_expression
                                         conditional_or_expression
                                          conditional_and_expression
                                           inclusive_or_expression
                                            exclusive_or_expression
                                             and_expression
                                              equality_expression
                                               relational_expression
                                                shift_expression
                                                 additive_expression
                                                  multiplicative_expression
                                                   switch_expression
                                                    range_expression
                                                     unary_expression
                                                      primary_expression
                                                       primary_expression_start
                                                        literal
                                                         boolean_literal
                                                          true
                                    ,
                                    argument
                                     expression
                                      non_assignment_expression
                                       conditional_expression
                                        null_coalescing_expression
                                         conditional_or_expression
                                          conditional_and_expression
                                           inclusive_or_expression
                                            exclusive_or_expression
                                             and_expression
                                              equality_expression
                                               relational_expression
                                                shift_expression
                                                 additive_expression
                                                  multiplicative_expression
                                                   switch_expression
                                                    range_expression
                                                     unary_expression
                                                      primary_expression
                                                       primary_expression_start
                                                        identifier
                                                         age
                                   )
                ;
             statement
              embedded_statement
               simple_embedded_statement
                expression
                 non_assignment_expression
                  conditional_expression
                   null_coalescing_expression
                    conditional_or_expression
                     conditional_and_expression
                      inclusive_or_expression
                       exclusive_or_expression
                        and_expression
                         equality_expression
                          relational_expression
                           shift_expression
                            additive_expression
                             multiplicative_expression
                              switch_expression
                               range_expression
                                unary_expression
                                 primary_expression
                                  primary_expression_start
                                   identifier
                                    DoSomething
                                  method_invocation
                                   (
                                   argument_list
                                    argument
                                     expression
                                      non_assignment_expression
                                       conditional_expression
                                        null_coalescing_expression
                                         conditional_or_expression
                                          conditional_and_expression
                                           inclusive_or_expression
                                            exclusive_or_expression
                                             and_expression
                                              equality_expression
                                               relational_expression
                                                shift_expression
                                                 additive_expression
                                                  multiplicative_expression
                                                   switch_expression
                                                    range_expression
                                                     unary_expression
                                                      primary_expression
                                                       primary_expression_start
                                                        identifier
                                                         name
                                    ,
                                    argument
                                     expression
                                      non_assignment_expression
                                       conditional_expression
                                        null_coalescing_expression
                                         conditional_or_expression
                                          conditional_and_expression
                                           inclusive_or_expression
                                            exclusive_or_expression
                                             and_expression
                                              equality_expression
                                               relational_expression
                                                shift_expression
                                                 additive_expression
                                                  multiplicative_expression
                                                   switch_expression
                                                    range_expression
                                                     unary_expression
                                                      primary_expression
                                                       primary_expression_start
                                                        identifier
                                                         age
                                    ,
                                    argument
                                     identifier
                                      isEmployed
                                     :
                                     expression
                                      non_assignment_expression
                                       conditional_expression
                                        null_coalescing_expression
                                         conditional_or_expression
                                          conditional_and_expression
                                           inclusive_or_expression
                                            exclusive_or_expression
                                             and_expression
                                              equality_expression
                                               relational_expression
                                                shift_expression
                                                 additive_expression
                                                  multiplicative_expression
                                                   switch_expression
                                                    range_expression
                                                     unary_expression
                                                      primary_expression
                                                       primary_expression_start
                                                        literal
                                                         boolean_literal
                                                          true
                                   )
                ;
             statement
              embedded_statement
               simple_embedded_statement
                expression
                 non_assignment_expression
                  conditional_expression
                   null_coalescing_expression
                    conditional_or_expression
                     conditional_and_expression
                      inclusive_or_expression
                       exclusive_or_expression
                        and_expression
                         equality_expression
                          relational_expression
                           shift_expression
                            additive_expression
                             multiplicative_expression
                              switch_expression
                               range_expression
                                unary_expression
                                 primary_expression
                                  primary_expression_start
                                   identifier
                                    DoSomething
                                  method_invocation
                                   (
                                   argument_list
                                    argument
                                     expression
                                      non_assignment_expression
                                       conditional_expression
                                        null_coalescing_expression
                                         conditional_or_expression
                                          conditional_and_expression
                                           inclusive_or_expression
                                            exclusive_or_expression
                                             and_expression
                                              equality_expression
                                               relational_expression
                                                shift_expression
                                                 additive_expression
                                                  multiplicative_expression
                                                   switch_expression
                                                    range_expression
                                                     unary_expression
                                                      primary_expression
                                                       primary_expression_start
                                                        literal
                                                         boolean_literal
                                                          true
                                    ,
                                    argument
                                     identifier
                                      personAge
                                     :
                                     expression
                                      non_assignment_expression
                                       conditional_expression
                                        null_coalescing_expression
                                         conditional_or_expression
                                          conditional_and_expression
                                           inclusive_or_expression
                                            exclusive_or_expression
                                             and_expression
                                              equality_expression
                                               relational_expression
                                                shift_expression
                                                 additive_expression
                                                  multiplicative_expression
                                                   switch_expression
                                                    range_expression
                                                     unary_expression
                                                      primary_expression
                                                       primary_expression_start
                                                        identifier
                                                         age
                                    ,
                                    argument
                                     identifier
                                      personName
                                     :
                                     expression
                                      non_assignment_expression
                                       conditional_expression
                                        null_coalescing_expression
                                         conditional_or_expression
                                          conditional_and_expression
                                           inclusive_or_expression
                                            exclusive_or_expression
                                             and_expression
                                              equality_expression
                                               relational_expression
                                                shift_expression
                                                 additive_expression
                                                  multiplicative_expression
                                                   switch_expression
                                                    range_expression
                                                     unary_expression
                                                      primary_expression
                                                       primary_expression_start
                                                        identifier
                                                         name
                                   )
                ;
            }
       class_member_declaration
        all_member_modifiers
         all_member_modifier
          public
        common_member_declaration
         void
         method_declaration
          method_member_name
           identifier
            ConditionalRef
          (
          )
          method_body
           block
            {
            statement_list
             statement
              declarationStatement
               local_variable_declaration
                ref
                local_variable_type
                 var
                local_variable_declarator
                 identifier
                  r
                 =
                 ref
                 local_variable_initializer
                  expression
                   non_assignment_expression
                    conditional_expression
                     null_coalescing_expression
                      conditional_or_expression
                       conditional_and_expression
                        inclusive_or_expression
                         exclusive_or_expression
                          and_expression
                           equality_expression
                            relational_expression
                             shift_expression
                              additive_expression
                               multiplicative_expression
                                switch_expression
                                 range_expression
                                  unary_expression
                                   primary_expression
                                    primary_expression_start
                                     (
                                     expression
                                      non_assignment_expression
                                       conditional_expression
                                        null_coalescing_expression
                                         conditional_or_expression
                                          conditional_and_expression
                                           inclusive_or_expression
                                            exclusive_or_expression
                                             and_expression
                                              equality_expression
                                               relational_expression
                                                shift_expression
                                                 additive_expression
                                                  multiplicative_expression
                                                   switch_expression
                                                    range_expression
                                                     unary_expression
                                                      primary_expression
                                                       primary_expression_start
                                                        identifier
                                                         arr
                                               !=
                                               relational_expression
                                                shift_expression
                                                 additive_expression
                                                  multiplicative_expression
                                                   switch_expression
                                                    range_expression
                                                     unary_expression
                                                      primary_expression
                                                       primary_expression_start
                                                        literal
                                                         null
                                        ?
                                        throwable_expression
                                         expression
                                          ref
                                          non_assignment_expression
                                           conditional_expression
                                            null_coalescing_expression
                                             conditional_or_expression
                                              conditional_and_expression
                                               inclusive_or_expression
                                                exclusive_or_expression
                                                 and_expression
                                                  equality_expression
                                                   relational_expression
                                                    shift_expression
                                                     additive_expression
                                                      multiplicative_expression
                                                       switch_expression
                                                        range_expression
                                                         unary_expression
                                                          primary_expression
                                                           primary_expression_start
                                                            identifier
                                                             arr
                                                           bracket_expression
                                                            [
                                                            indexer_argument
                                                             expression
                                                              non_assignment_expression
                                                               conditional_expression
                                                                null_coalescing_expression
                                                                 conditional_or_expression
                                                                  conditional_and_expression
                                                                   inclusive_or_expression
                                                                    exclusive_or_expression
                                                                     and_expression
                                                                      equality_expression
                                                                       relational_expression
                                                                        shift_expression
                                                                         additive_expression
                                                                          multiplicative_expression
                                                                           switch_expression
                                                                            range_expression
                                                                             unary_expression
                                                                              primary_expression
                                                                               primary_expression_start
                                                                                literal
                                                                                 0
                                                            ]
                                        :
                                        throwable_expression
                                         expression
                                          ref
                                          non_assignment_expression
                                           conditional_expression
                                            null_coalescing_expression
                                             conditional_or_expression
                                              conditional_and_expression
                                               inclusive_or_expression
                                                exclusive_or_expression
                                                 and_expression
                                                  equality_expression
                                                   relational_expression
                                                    shift_expression
                                                     additive_expression
                                                      multiplicative_expression
                                                       switch_expression
                                                        range_expression
                                                         unary_expression
                                                          primary_expression
                                                           primary_expression_start
                                                            identifier
                                                             otherArr
                                                           bracket_expression
                                                            [
                                                            indexer_argument
                                                             expression
                                                              non_assignment_expression
                                                               conditional_expression
                                                                null_coalescing_expression
                                                                 conditional_or_expression
                                                                  conditional_and_expression
                                                                   inclusive_or_expression
                                                                    exclusive_or_expression
                                                                     and_expression
                                                                      equality_expression
                                                                       relational_expression
                                                                        shift_expression
                                                                         additive_expression
                                                                          multiplicative_expression
                                                                           switch_expression
                                                                            range_expression
                                                                             unary_expression
                                                                              primary_expression
                                                                               primary_expression_start
                                                                                literal
                                                                                 0
                                                            ]
                                     )
               ;
            }
       class_member_declaration
        all_member_modifiers
         all_member_modifier
          public
        common_member_declaration
         void
         method_declaration
          method_member_name
           identifier
            LeadingSeparator
          (
          )
          method_body
           block
            {
            statement_list
             statement
              declarationStatement
               local_variable_declaration
                local_variable_type
                 var
                local_variable_declarator
                 identifier
                  res
                 =
                 local_variable_initializer
                  expression
                   non_assignment_expression
                    conditional_expression
                     null_coalescing_expression
                      conditional_or_expression
                       conditional_and_expression
                        inclusive_or_expression
                         exclusive_or_expression
                          and_expression
                           equality_expression
                            relational_expression
                             shift_expression
                              additive_expression
                               multiplicative_expression
                                switch_expression
                                 range_expression
                                  unary_expression
                                   primary_expression
                                    primary_expression_start
                                     literal
                                      0
                               +
                               multiplicative_expression
                                switch_expression
                                 range_expression
                                  unary_expression
                                   primary_expression
                                    primary_expression_start
                                     literal
                                      123
                               +
                               multiplicative_expression
                                switch_expression
                                 range_expression
                                  unary_expression
                                   primary_expression
                                    primary_expression_start
                                     literal
                                      1_2_3
                               +
                               multiplicative_expression
                                switch_expression
                                 range_expression
                                  unary_expression
                                   primary_expression
                                    primary_expression_start
                                     literal
                                      0x1_2_3
                               +
                               multiplicative_expression
                                switch_expression
                                 range_expression
                                  unary_expression
                                   primary_expression
                                    primary_expression_start
                                     literal
                                      0b101
                               +
                               multiplicative_expression
                                switch_expression
                                 range_expression
                                  unary_expression
                                   primary_expression
                                    primary_expression_start
                                     literal
                                      0b1_0_1
                               +
                               multiplicative_expression
                                switch_expression
                                 range_expression
                                  unary_expression
                                   primary_expression
                                    primary_expression_start
                                     literal
                                      0x_1_2
                               +
                               multiplicative_expression
                                switch_expression
                                 range_expression
                                  unary_expression
                                   primary_expression
                                    primary_expression_start
                                     literal
                                      0b_1_0_1
               ;
            }
      }
  namespace_member_declaration
   type_declaration
    class_definition
     class
     identifier
      CSharp73
     class_body
      {
      class_member_declarations
       class_member_declaration
        common_member_declaration
         void
         method_declaration
          method_member_name
           identifier
            Blittable
          type_parameter_list
           <
           type_parameter
            identifier
             T
           >
          (
          formal_parameter_list
           fixed_parameters
            fixed_parameter
             arg_declaration
              type_
               base_type
                class_type
                 namespace_or_type_name
                  identifier
                   T
              identifier
               value
          )
          type_parameter_constraints_clauses
           type_parameter_constraints_clause
            where
            identifier
             T
            :
            type_parameter_constraints
             primary_constraint
              class_type
               namespace_or_type_name
                identifier
                 unmanaged
          method_body
           block
            {
            statement_list
             statement
              declarationStatement
               local_variable_declaration
                local_variable_type
                 var
                local_variable_declarator
                 identifier
                  unmanaged
                 =
                 local_variable_initializer
                  expression
                   non_assignment_expression
                    conditional_expression
                     null_coalescing_expression
                      conditional_or_expression
                       conditional_and_expression
                        inclusive_or_expression
                         exclusive_or_expression
                          and_expression
                           equality_expression
                            relational_expression
                             shift_expression
                              additive_expression
                               multiplicative_expression
                                switch_expression
                                 range_expression
                                  unary_expression
                                   primary_expression
                                    primary_expression_start
                                     literal
                                      666
               ;
            }
       class_member_declaration
        all_member_modifiers
         all_member_modifier
          unsafe
        common_member_declaration
         struct_definition
          struct
          identifier
           IndexingMovableFixed
          struct_body
           {
           struct_member_declaration
            all_member_modifiers
             all_member_modifier
              public
            fixed
            type_
             base_type
              simple_type
               numeric_type
                integral_type
                 int
            fixed_size_buffer_declarator
             identifier
              myFixedField
             [
             expression
              non_assignment_expression
               conditional_expression
                null_coalescing_expression
                 conditional_or_expression
                  conditional_and_expression
                   inclusive_or_expression
                    exclusive_or_expression
                     and_expression
                      equality_expression
                       relational_expression
                        shift_expression
                         additive_expression
                          multiplicative_expression
                           switch_expression
                            range_expression
                             unary_expression
                              primary_expression
                               primary_expression_start
                                literal
                                 10
             ]
            ;
           }
       class_member_declaration
        all_member_modifiers
         all_member_modifier
          static
        common_member_declaration
         typed_member_declaration
          type_
           base_type
            class_type
             namespace_or_type_name
              identifier
               IndexingMovableFixed
          field_declaration
           variable_declarators
            variable_declarator
             identifier
              s
           ;
       class_member_declaration
        all_member_modifiers
         all_member_modifier
          public
         all_member_modifier
          unsafe
        common_member_declaration
         void
         method_declaration
          method_member_name
           identifier
            IndexingMovableFixedFields
          (
          )
          method_body
           block
            {
            statement_list
             statement
              declarationStatement
               local_variable_declaration
                local_variable_type
                 type_
                  base_type
                   simple_type
                    numeric_type
                     integral_type
                      int
                  *
                local_variable_declarator
                 identifier
                  ptr
                 =
                 local_variable_initializer
                  expression
                   non_assignment_expression
                    conditional_expression
                     null_coalescing_expression
                      conditional_or_expression
                       conditional_and_expression
                        inclusive_or_expression
                         exclusive_or_expression
                          and_expression
                           equality_expression
                            relational_expression
                             shift_expression
                              additive_expression
                               multiplicative_expression
                                switch_expression
                                 range_expression
                                  unary_expression
                                   primary_expression
                                    primary_expression_start
                                     identifier
                                      s
                                    member_access
                                     .
                                     identifier
                                      myFixedField
               ;
             statement
              declarationStatement
               local_variable_declaration
                local_variable_type
                 type_
                  base_type
                   simple_type
                    numeric_type
                     integral_type
                      int
                local_variable_declarator
                 identifier
                  t
                 =
                 local_variable_initializer
                  expression
                   non_assignment_expression
                    conditional_expression
                     null_coalescing_expression
                      conditional_or_expression
                       conditional_and_expression
                        inclusive_or_expression
                         exclusive_or_expression
                          and_expression
                           equality_expression
                            relational_expression
                             shift_expression
                              additive_expression
                               multiplicative_expression
                                switch_expression
                                 range_expression
                                  unary_expression
                                   primary_expression
                                    primary_expression_start
                                     identifier
                                      s
                                    member_access
                                     .
                                     identifier
                                      myFixedField
                                    bracket_expression
                                     [
                                     indexer_argument
                                      expression
                                       non_assignment_expression
                                        conditional_expression
                                         null_coalescing_expression
                                          conditional_or_expression
                                           conditional_and_expression
                                            inclusive_or_expression
                                             exclusive_or_expression
                                              and_expression
                                               equality_expression
                                                relational_expression
                                                 shift_expression
                                                  additive_expression
                                                   multiplicative_expression
                                                    switch_expression
                                                     range_expression
                                                      unary_expression
                                                       primary_expression
                                                        primary_expression_start
                                                         literal
                                                          5
                                     ]
               ;
            }
       class_member_declaration
        all_member_modifiers
         all_member_modifier
          public
        common_member_declaration
         void
         method_declaration
          method_member_name
           identifier
            PatternBasedFixed
          (
          )
          method_body
           block
            {
            statement_list
             statement
              embedded_statement
               simple_embedded_statement
                fixed
                (
                pointer_type
                 simple_type
                  numeric_type
                   integral_type
                    byte
                 *
                fixed_pointer_declarators
                 fixed_pointer_declarator
                  identifier
                   ptr
                  =
                  fixed_pointer_initializer
                   expression
                    non_assignment_expression
                     conditional_expression
                      null_coalescing_expression
                       conditional_or_expression
                        conditional_and_expression
                         inclusive_or_expression
                          exclusive_or_expression
                           and_expression
                            equality_expression
                             relational_expression
                              shift_expression
                               additive_expression
                                multiplicative_expression
                                 switch_expression
                                  range_expression
                                   unary_expression
                                    primary_expression
                                     primary_expression_start
                                      identifier
                                       byteArray
                )
                embedded_statement
                 block
                  {
                  }
            }
       class_member_declaration
        all_member_modifiers
         all_member_modifier
          public
        common_member_declaration
         void
         method_declaration
          method_member_name
           identifier
            StackallocArrayInitializer
          (
          )
          method_body
           block
            {
            statement_list
             statement
              declarationStatement
               local_variable_declaration
                local_variable_type
                 type_
                  base_type
                   class_type
                    namespace_or_type_name
                     identifier
                      Span
                     type_argument_list
                      <
                      type_
                       base_type
                        simple_type
                         numeric_type
                          integral_type
                           int
                      >
                local_variable_declarator
                 identifier
                  a
                 =
                 local_variable_initializer
                  stackalloc_initializer
                   stackalloc
                   type_
                    base_type
                     simple_type
                      numeric_type
                       integral_type
                        int
                   [
                   expression
                    non_assignment_expression
                     conditional_expression
                      null_coalescing_expression
                       conditional_or_expression
                        conditional_and_expression
                         inclusive_or_expression
                          exclusive_or_expression
                           and_expression
                            equality_expression
                             relational_expression
                              shift_expression
                               additive_expression
                                multiplicative_expression
                                 switch_expression
                                  range_expression
                                   unary_expression
                                    primary_expression
                                     primary_expression_start
                                      literal
                                       3
                   ]
               ;
             statement
              declarationStatement
               local_variable_declaration
                local_variable_type
                 type_
                  base_type
                   class_type
                    namespace_or_type_name
                     identifier
                      Span
                     type_argument_list
                      <
                      type_
                       base_type
                        simple_type
                         numeric_type
                          integral_type
                           int
                      >
                local_variable_declarator
                 identifier
                  a
                 =
                 local_variable_initializer
                  stackalloc_initializer
                   stackalloc
                   type_
                    base_type
                     simple_type
                      numeric_type
                       integral_type
                        int
                   [
                   expression
                    non_assignment_expression
                     conditional_expression
                      null_coalescing_expression
                       conditional_or_expression
                        conditional_and_expression
                         inclusive_or_expression
                          exclusive_or_expression
                           and_expression
                            equality_expression
                             relational_expression
                              shift_expression
                               additive_expression
                                multiplicative_expression
                                 switch_expression
                                  range_expression
                                   unary_expression
                                    primary_expression
                                     primary_expression_start
                                      literal
                                       3
                   ]
                   {
                   expression
                    non_assignment_expression
                     conditional_expression
                      null_coalescing_expression
                       conditional_or_expression
                        conditional_and_expression
                         inclusive_or_expression
                          exclusive_or_expression
                           and_expression
                            equality_expression
                             relational_expression
                              shift_expression
                               additive_expression
                                multiplicative_expression
                                 switch_expression
                                  range_expression
                                   unary_expression
                                    primary_expression
                                     primary_expression_start
                                      literal
                                       1
                   ,
                   expression
                    non_assignment_expression
                     conditional_expression
                      null_coalescing_expression
                       conditional_or_expression
                        conditional_and_expression
                         inclusive_or_expression
                          exclusive_or_expression
                           and_expression
                            equality_expression
                             relational_expression
                              shift_expression
                               additive_expression
                                multiplicative_expression
                                 switch_expression
                                  range_expression
                                   unary_expression
                                    primary_expression
                                     primary_expression_start
                                      literal
                                       2
                   ,
                   expression
                    non_assignment_expression
                     conditional_expression
                      null_coalescing_expression
                       conditional_or_expression
                        conditional_and_expression
                         inclusive_or_expression
                          exclusive_or_expression
                           and_expression
                            equality_expression
                             relational_expression
                              shift_expression
                               additive_expression
                                multiplicative_expression
                                 switch_expression
                                  range_expression
                                   unary_expression
                                    primary_expression
                                     primary_expression_start
                                      literal
                                       3
                   }
               ;
             statement
              declarationStatement
               local_variable_declaration
                local_variable_type
                 type_
                  base_type
                   class_type
                    namespace_or_type_name
                     identifier
                      Span
                     type_argument_list
                      <
                      type_
                       base_type
                        simple_type
                         numeric_type
                          integral_type
                           int
                      >
                local_variable_declarator
                 identifier
                  a
                 =
                 local_variable_initializer
                  stackalloc_initializer
                   stackalloc
                   type_
                    base_type
                     simple_type
                      numeric_type
                       integral_type
                        int
                   [
                   ]
                   {
                   expression
                    non_assignment_expression
                     conditional_expression
                      null_coalescing_expression
                       conditional_or_expression
                        conditional_and_expression
                         inclusive_or_expression
                          exclusive_or_expression
                           and_expression
                            equality_expression
                             relational_expression
                              shift_expression
                               additive_expression
                                multiplicative_expression
                                 switch_expression
                                  range_expression
                                   unary_expression
                                    primary_expression
                                     primary_expression_start
                                      literal
                                       1
                   ,
                   expression
                    non_assignment_expression
                     conditional_expression
                      null_coalescing_expression
                       conditional_or_expression
                        conditional_and_expression
                         inclusive_or_expression
                          exclusive_or_expression
                           and_expression
                            equality_expression
                             relational_expression
                              shift_expression
                               additive_expression
                                multiplicative_expression
                                 switch_expression
                                  range_expression
                                   unary_expression
                                    primary_expression
                                     primary_expression_start
                                      literal
                                       2
                   ,
                   expression
                    non_assignment_expression
                     conditional_expression
                      null_coalescing_expression
                       conditional_or_expression
                        conditional_and_expression
                         inclusive_or_expression
                          exclusive_or_expression
                           and_expression
                            equality_expression
                             relational_expression
                              shift_expression
                               additive_expression
                                multiplicative_expression
                                 switch_expression
                                  range_expression
                                   unary_expression
                                    primary_expression
                                     primary_expression_start
                                      literal
                                       3
                   }
               ;
             statement
              declarationStatement
               local_variable_declaration
                local_variable_type
                 type_
                  base_type
                   class_type
                    namespace_or_type_name
                     identifier
                      Span
                     type_argument_list
                      <
                      type_
                       base_type
                        simple_type
                         numeric_type
                          integral_type
                           int
                      >
                local_variable_declarator
                 identifier
                  a
                 =
                 local_variable_initializer
                  stackalloc_initializer
                   stackalloc
                   [
                   ]
                   {
                   expression
                    non_assignment_expression
                     conditional_expression
                      null_coalescing_expression
                       conditional_or_expression
                        conditional_and_expression
                         inclusive_or_expression
                          exclusive_or_expression
                           and_expression
                            equality_expression
                             relational_expression
                              shift_expression
                               additive_expression
                                multiplicative_expression
                                 switch_expression
                                  range_expression
                                   unary_expression
                                    primary_expression
                                     primary_expression_start
                                      literal
                                       1
                   ,
                   expression
                    non_assignment_expression
                     conditional_expression
                      null_coalescing_expression
                       conditional_or_expression
                        conditional_and_expression
                         inclusive_or_expression
                          exclusive_or_expression
                           and_expression
                            equality_expression
                             relational_expression
                              shift_expression
                               additive_expression
                                multiplicative_expression
                                 switch_expression
                                  range_expression
                                   unary_expression
                                    primary_expression
                                     primary_expression_start
                                      literal
                                       2
                   ,
                   expression
                    non_assignment_expression
                     conditional_expression
                      null_coalescing_expression
                       conditional_or_expression
                        conditional_and_expression
                         inclusive_or_expression
                          exclusive_or_expression
                           and_expression
                            equality_expression
                             relational_expression
                              shift_expression
                               additive_expression
                                multiplicative_expression
                                 switch_expression
                                  range_expression
                                   unary_expression
                                    primary_expression
                                     primary_expression_start
                                      literal
                                       3
                   }
               ;
            }
       class_member_declaration
        all_member_modifiers
         all_member_modifier
          public
        common_member_declaration
         void
         method_declaration
          method_member_name
           identifier
            TupleEquality
          (
          )
          method_body
           block
            {
            statement_list
             statement
              declarationStatement
               local_variable_declaration
                local_variable_type
                 type_
                  base_type
                   tuple_type
                    (
                    tuple_element
                     type_
                      base_type
                       simple_type
                        numeric_type
                         integral_type
                          int
                    ,
                    tuple_element
                     type_
                      base_type
                       tuple_type
                        (
                        tuple_element
                         type_
                          base_type
                           simple_type
                            numeric_type
                             integral_type
                              int
                        ,
                        tuple_element
                         type_
                          base_type
                           simple_type
                            numeric_type
                             integral_type
                              int
                        )
                    )
                local_variable_declarator
                 identifier
                  t1
                ,
                local_variable_declarator
                 identifier
                  t2
               ;
             statement
              declarationStatement
               local_variable_declaration
                local_variable_type
                 var
                local_variable_declarator
                 identifier
                  res
                 =
                 local_variable_initializer
                  expression
                   non_assignment_expression
                    conditional_expression
                     null_coalescing_expression
                      conditional_or_expression
                       conditional_and_expression
                        inclusive_or_expression
                         exclusive_or_expression
                          and_expression
                           equality_expression
                            relational_expression
                             shift_expression
                              additive_expression
                               multiplicative_expression
                                switch_expression
                                 range_expression
                                  unary_expression
                                   primary_expression
                                    primary_expression_start
                                     identifier
                                      t1
                            ==
                            relational_expression
                             shift_expression
                              additive_expression
                               multiplicative_expression
                                switch_expression
                                 range_expression
                                  unary_expression
                                   primary_expression
                                    primary_expression_start
                                     (
                                     argument
                                      expression
                                       non_assignment_expression
                                        conditional_expression
                                         null_coalescing_expression
                                          conditional_or_expression
                                           conditional_and_expression
                                            inclusive_or_expression
                                             exclusive_or_expression
                                              and_expression
                                               equality_expression
                                                relational_expression
                                                 shift_expression
                                                  additive_expression
                                                   multiplicative_expression
                                                    switch_expression
                                                     range_expression
                                                      unary_expression
                                                       primary_expression
                                                        primary_expression_start
                                                         literal
                                                          1
                                     ,
                                     argument
                                      expression
                                       non_assignment_expression
                                        conditional_expression
                                         null_coalescing_expression
                                          conditional_or_expression
                                           conditional_and_expression
                                            inclusive_or_expression
                                             exclusive_or_expression
                                              and_expression
                                               equality_expression
                                                relational_expression
                                                 shift_expression
                                                  additive_expression
                                                   multiplicative_expression
                                                    switch_expression
                                                     range_expression
                                                      unary_expression
                                                       primary_expression
                                                        primary_expression_start
                                                         (
                                                         argument
                                                          expression
                                                           non_assignment_expression
                                                            conditional_expression
                                                             null_coalescing_expression
                                                              conditional_or_expression
                                                               conditional_and_expression
                                                                inclusive_or_expression
                                                                 exclusive_or_expression
                                                                  and_expression
                                                                   equality_expression
                                                                    relational_expression
                                                                     shift_expression
                                                                      additive_expression
                                                                       multiplicative_expression
                                                                        switch_expression
                                                                         range_expression
                                                                          unary_expression
                                                                           primary_expression
                                                                            primary_expression_start
                                                                             literal
                                                                              2
                                                         ,
                                                         argument
                                                          expression
                                                           non_assignment_expression
                                                            conditional_expression
                                                             null_coalescing_expression
                                                              conditional_or_expression
                                                               conditional_and_expression
                                                                inclusive_or_expression
                                                                 exclusive_or_expression
                                                                  and_expression
                                                                   equality_expression
                                                                    relational_expression
                                                                     shift_expression
                                                                      additive_expression
                                                                       multiplicative_expression
                                                                        switch_expression
                                                                         range_expression
                                                                          unary_expression
                                                                           primary_expression
                                                                            primary_expression_start
                                                                             literal
                                                                              3
                                                         )
                                     )
               ;
            }
      }
  namespace_member_declaration
   namespace_declaration
    namespace
    qualified_identifier
     identifier
      CSharp80
    namespace_body
     {
     namespace_member_declarations
      namespace_member_declaration
       type_declaration
        class_definition
         class
         identifier
          CSharp80ExceptInterfaceDefaultImplement
         class_body
          {
          class_member_declarations
           class_member_declaration
            common_member_declaration
             void
             method_declaration
              method_member_name
               identifier
                ReferenceNullable
              (
              )
              method_body
               block
                {
                statement_list
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       class_type
                        namespace_or_type_name
                         identifier
                          var
                      ?
                    local_variable_declarator
                     identifier
                      x
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          E
                   ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     non_assignment_expression
                      conditional_expression
                       null_coalescing_expression
                        conditional_or_expression
                         conditional_and_expression
                          inclusive_or_expression
                           exclusive_or_expression
                            and_expression
                             equality_expression
                              relational_expression
                               shift_expression
                                additive_expression
                                 multiplicative_expression
                                  switch_expression
                                   range_expression
                                    unary_expression
                                     primary_expression
                                      primary_expression_start
                                       identifier
                                        x
                                      !
                                      member_access
                                       .
                                       identifier
                                        ToString
                                      method_invocation
                                       (
                                       )
                    ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       class_type
                        string
                      ?
                    local_variable_declarator
                     identifier
                      wtf
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         literal
                                          null
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     type_
                      base_type
                       simple_type
                        numeric_type
                         integral_type
                          int
                      ?
                      rank_specifier
                       [
                       ]
                      ?
                    local_variable_declarator
                     identifier
                      hello
                   ;
                }
           class_member_declaration
            common_member_declaration
             void
             method_declaration
              method_member_name
               identifier
                Patterns
              (
              )
              method_body
               block
                {
                statement_list
                 statement
                  embedded_statement
                   simple_embedded_statement
                    if
                    (
                    expression
                     non_assignment_expression
                      conditional_expression
                       null_coalescing_expression
                        conditional_or_expression
                         conditional_and_expression
                          inclusive_or_expression
                           exclusive_or_expression
                            and_expression
                             equality_expression
                              relational_expression
                               shift_expression
                                additive_expression
                                 multiplicative_expression
                                  switch_expression
                                   range_expression
                                    unary_expression
                                     primary_expression
                                      primary_expression_start
                                       identifier
                                        o
                               is
                               isType
                                base_type
                                 class_type
                                  string
                                isTypePatternArms
                                 {
                                 isTypePatternArm
                                  identifier
                                   Length
                                  :
                                  expression
                                   non_assignment_expression
                                    conditional_expression
                                     null_coalescing_expression
                                      conditional_or_expression
                                       conditional_and_expression
                                        inclusive_or_expression
                                         exclusive_or_expression
                                          and_expression
                                           equality_expression
                                            relational_expression
                                             shift_expression
                                              additive_expression
                                               multiplicative_expression
                                                switch_expression
                                                 range_expression
                                                  unary_expression
                                                   primary_expression
                                                    primary_expression_start
                                                     literal
                                                      5
                                 }
                                identifier
                                 s
                    )
                    if_body
                     simple_embedded_statement
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          Do
                                        method_invocation
                                         (
                                         )
                      ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    return
                    expression
                     non_assignment_expression
                      conditional_expression
                       null_coalescing_expression
                        conditional_or_expression
                         conditional_and_expression
                          inclusive_or_expression
                           exclusive_or_expression
                            and_expression
                             equality_expression
                              relational_expression
                               shift_expression
                                additive_expression
                                 multiplicative_expression
                                  switch_expression
                                   range_expression
                                    unary_expression
                                     primary_expression
                                      primary_expression_start
                                       identifier
                                        lang
                                      member_access
                                       .
                                       identifier
                                        CountOfTokens
                                   switch
                                   {
                                   switch_expression_arms
                                    switch_expression_arm
                                     expression
                                      non_assignment_expression
                                       conditional_expression
                                        null_coalescing_expression
                                         conditional_or_expression
                                          conditional_and_expression
                                           inclusive_or_expression
                                            exclusive_or_expression
                                             and_expression
                                              equality_expression
                                               relational_expression
                                                shift_expression
                                                 additive_expression
                                                  multiplicative_expression
                                                   switch_expression
                                                    range_expression
                                                     unary_expression
                                                      primary_expression
                                                       primary_expression_start
                                                        literal
                                                         1
                                     right_arrow
                                      =
                                      >
                                     throwable_expression
                                      expression
                                       non_assignment_expression
                                        conditional_expression
                                         null_coalescing_expression
                                          conditional_or_expression
                                           conditional_and_expression
                                            inclusive_or_expression
                                             exclusive_or_expression
                                              and_expression
                                               equality_expression
                                                relational_expression
                                                 shift_expression
                                                  additive_expression
                                                   multiplicative_expression
                                                    switch_expression
                                                     range_expression
                                                      unary_expression
                                                       primary_expression
                                                        primary_expression_start
                                                         literal
                                                          100
                                    ,
                                    switch_expression_arm
                                     expression
                                      non_assignment_expression
                                       conditional_expression
                                        null_coalescing_expression
                                         conditional_or_expression
                                          conditional_and_expression
                                           inclusive_or_expression
                                            exclusive_or_expression
                                             and_expression
                                              equality_expression
                                               relational_expression
                                                shift_expression
                                                 additive_expression
                                                  multiplicative_expression
                                                   switch_expression
                                                    range_expression
                                                     unary_expression
                                                      primary_expression
                                                       primary_expression_start
                                                        literal
                                                         2
                                     right_arrow
                                      =
                                      >
                                     throwable_expression
                                      expression
                                       non_assignment_expression
                                        conditional_expression
                                         null_coalescing_expression
                                          conditional_or_expression
                                           conditional_and_expression
                                            inclusive_or_expression
                                             exclusive_or_expression
                                              and_expression
                                               equality_expression
                                                relational_expression
                                                 shift_expression
                                                  additive_expression
                                                   multiplicative_expression
                                                    switch_expression
                                                     range_expression
                                                      unary_expression
                                                       primary_expression
                                                        primary_expression_start
                                                         literal
                                                          200
                                    ,
                                    switch_expression_arm
                                     expression
                                      non_assignment_expression
                                       conditional_expression
                                        null_coalescing_expression
                                         conditional_or_expression
                                          conditional_and_expression
                                           inclusive_or_expression
                                            exclusive_or_expression
                                             and_expression
                                              equality_expression
                                               relational_expression
                                                shift_expression
                                                 additive_expression
                                                  multiplicative_expression
                                                   switch_expression
                                                    range_expression
                                                     unary_expression
                                                      primary_expression
                                                       primary_expression_start
                                                        identifier
                                                         _
                                     right_arrow
                                      =
                                      >
                                     throwable_expression
                                      throw_expression
                                       throw
                                       expression
                                        non_assignment_expression
                                         conditional_expression
                                          null_coalescing_expression
                                           conditional_or_expression
                                            conditional_and_expression
                                             inclusive_or_expression
                                              exclusive_or_expression
                                               and_expression
                                                equality_expression
                                                 relational_expression
                                                  shift_expression
                                                   additive_expression
                                                    multiplicative_expression
                                                     switch_expression
                                                      range_expression
                                                       unary_expression
                                                        primary_expression
                                                         primary_expression_start
                                                          new
                                                          type_
                                                           base_type
                                                            class_type
                                                             namespace_or_type_name
                                                              qualified_alias_member
                                                               identifier
                                                                global
                                                               ::
                                                               identifier
                                                                System
                                                              .
                                                              identifier
                                                               Exception
                                                          object_creation_expression
                                                           (
                                                           )
                                   }
                    ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      newState
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         (
                                         argument
                                          expression
                                           non_assignment_expression
                                            conditional_expression
                                             null_coalescing_expression
                                              conditional_or_expression
                                               conditional_and_expression
                                                inclusive_or_expression
                                                 exclusive_or_expression
                                                  and_expression
                                                   equality_expression
                                                    relational_expression
                                                     shift_expression
                                                      additive_expression
                                                       multiplicative_expression
                                                        switch_expression
                                                         range_expression
                                                          unary_expression
                                                           primary_expression
                                                            primary_expression_start
                                                             identifier
                                                              GetState
                                                            method_invocation
                                                             (
                                                             )
                                         ,
                                         argument
                                          expression
                                           non_assignment_expression
                                            conditional_expression
                                             null_coalescing_expression
                                              conditional_or_expression
                                               conditional_and_expression
                                                inclusive_or_expression
                                                 exclusive_or_expression
                                                  and_expression
                                                   equality_expression
                                                    relational_expression
                                                     shift_expression
                                                      additive_expression
                                                       multiplicative_expression
                                                        switch_expression
                                                         range_expression
                                                          unary_expression
                                                           primary_expression
                                                            primary_expression_start
                                                             identifier
                                                              action
                                         ,
                                         argument
                                          expression
                                           non_assignment_expression
                                            conditional_expression
                                             null_coalescing_expression
                                              conditional_or_expression
                                               conditional_and_expression
                                                inclusive_or_expression
                                                 exclusive_or_expression
                                                  and_expression
                                                   equality_expression
                                                    relational_expression
                                                     shift_expression
                                                      additive_expression
                                                       multiplicative_expression
                                                        switch_expression
                                                         range_expression
                                                          unary_expression
                                                           primary_expression
                                                            primary_expression_start
                                                             identifier
                                                              hasKey
                                         )
                                     switch
                                     {
                                     switch_expression_arms
                                      switch_expression_arm
                                       expression
                                        non_assignment_expression
                                         conditional_expression
                                          null_coalescing_expression
                                           conditional_or_expression
                                            conditional_and_expression
                                             inclusive_or_expression
                                              exclusive_or_expression
                                               and_expression
                                                equality_expression
                                                 relational_expression
                                                  shift_expression
                                                   additive_expression
                                                    multiplicative_expression
                                                     switch_expression
                                                      range_expression
                                                       unary_expression
                                                        primary_expression
                                                         primary_expression_start
                                                          (
                                                          argument
                                                           expression
                                                            non_assignment_expression
                                                             conditional_expression
                                                              null_coalescing_expression
                                                               conditional_or_expression
                                                                conditional_and_expression
                                                                 inclusive_or_expression
                                                                  exclusive_or_expression
                                                                   and_expression
                                                                    equality_expression
                                                                     relational_expression
                                                                      shift_expression
                                                                       additive_expression
                                                                        multiplicative_expression
                                                                         switch_expression
                                                                          range_expression
                                                                           unary_expression
                                                                            primary_expression
                                                                             primary_expression_start
                                                                              identifier
                                                                               DoorState
                                                                             member_access
                                                                              .
                                                                              identifier
                                                                               Closed
                                                          ,
                                                          argument
                                                           expression
                                                            non_assignment_expression
                                                             conditional_expression
                                                              null_coalescing_expression
                                                               conditional_or_expression
                                                                conditional_and_expression
                                                                 inclusive_or_expression
                                                                  exclusive_or_expression
                                                                   and_expression
                                                                    equality_expression
                                                                     relational_expression
                                                                      shift_expression
                                                                       additive_expression
                                                                        multiplicative_expression
                                                                         switch_expression
                                                                          range_expression
                                                                           unary_expression
                                                                            primary_expression
                                                                             primary_expression_start
                                                                              identifier
                                                                               Action
                                                                             member_access
                                                                              .
                                                                              identifier
                                                                               Open
                                                          ,
                                                          argument
                                                           expression
                                                            non_assignment_expression
                                                             conditional_expression
                                                              null_coalescing_expression
                                                               conditional_or_expression
                                                                conditional_and_expression
                                                                 inclusive_or_expression
                                                                  exclusive_or_expression
                                                                   and_expression
                                                                    equality_expression
                                                                     relational_expression
                                                                      shift_expression
                                                                       additive_expression
                                                                        multiplicative_expression
                                                                         switch_expression
                                                                          range_expression
                                                                           unary_expression
                                                                            primary_expression
                                                                             primary_expression_start
                                                                              identifier
                                                                               _
                                                          )
                                       right_arrow
                                        =
                                        >
                                       throwable_expression
                                        expression
                                         non_assignment_expression
                                          conditional_expression
                                           null_coalescing_expression
                                            conditional_or_expression
                                             conditional_and_expression
                                              inclusive_or_expression
                                               exclusive_or_expression
                                                and_expression
                                                 equality_expression
                                                  relational_expression
                                                   shift_expression
                                                    additive_expression
                                                     multiplicative_expression
                                                      switch_expression
                                                       range_expression
                                                        unary_expression
                                                         primary_expression
                                                          primary_expression_start
                                                           identifier
                                                            DoorState
                                                          member_access
                                                           .
                                                           identifier
                                                            Opened
                                      ,
                                      switch_expression_arm
                                       expression
                                        non_assignment_expression
                                         conditional_expression
                                          null_coalescing_expression
                                           conditional_or_expression
                                            conditional_and_expression
                                             inclusive_or_expression
                                              exclusive_or_expression
                                               and_expression
                                                equality_expression
                                                 relational_expression
                                                  shift_expression
                                                   additive_expression
                                                    multiplicative_expression
                                                     switch_expression
                                                      range_expression
                                                       unary_expression
                                                        primary_expression
                                                         primary_expression_start
                                                          (
                                                          argument
                                                           expression
                                                            non_assignment_expression
                                                             conditional_expression
                                                              null_coalescing_expression
                                                               conditional_or_expression
                                                                conditional_and_expression
                                                                 inclusive_or_expression
                                                                  exclusive_or_expression
                                                                   and_expression
                                                                    equality_expression
                                                                     relational_expression
                                                                      shift_expression
                                                                       additive_expression
                                                                        multiplicative_expression
                                                                         switch_expression
                                                                          range_expression
                                                                           unary_expression
                                                                            primary_expression
                                                                             primary_expression_start
                                                                              identifier
                                                                               DoorState
                                                                             member_access
                                                                              .
                                                                              identifier
                                                                               Opened
                                                          ,
                                                          argument
                                                           expression
                                                            non_assignment_expression
                                                             conditional_expression
                                                              null_coalescing_expression
                                                               conditional_or_expression
                                                                conditional_and_expression
                                                                 inclusive_or_expression
                                                                  exclusive_or_expression
                                                                   and_expression
                                                                    equality_expression
                                                                     relational_expression
                                                                      shift_expression
                                                                       additive_expression
                                                                        multiplicative_expression
                                                                         switch_expression
                                                                          range_expression
                                                                           unary_expression
                                                                            primary_expression
                                                                             primary_expression_start
                                                                              identifier
                                                                               Action
                                                                             member_access
                                                                              .
                                                                              identifier
                                                                               Close
                                                          ,
                                                          argument
                                                           expression
                                                            non_assignment_expression
                                                             conditional_expression
                                                              null_coalescing_expression
                                                               conditional_or_expression
                                                                conditional_and_expression
                                                                 inclusive_or_expression
                                                                  exclusive_or_expression
                                                                   and_expression
                                                                    equality_expression
                                                                     relational_expression
                                                                      shift_expression
                                                                       additive_expression
                                                                        multiplicative_expression
                                                                         switch_expression
                                                                          range_expression
                                                                           unary_expression
                                                                            primary_expression
                                                                             primary_expression_start
                                                                              identifier
                                                                               _
                                                          )
                                       right_arrow
                                        =
                                        >
                                       throwable_expression
                                        expression
                                         non_assignment_expression
                                          conditional_expression
                                           null_coalescing_expression
                                            conditional_or_expression
                                             conditional_and_expression
                                              inclusive_or_expression
                                               exclusive_or_expression
                                                and_expression
                                                 equality_expression
                                                  relational_expression
                                                   shift_expression
                                                    additive_expression
                                                     multiplicative_expression
                                                      switch_expression
                                                       range_expression
                                                        unary_expression
                                                         primary_expression
                                                          primary_expression_start
                                                           identifier
                                                            DoorState
                                                          member_access
                                                           .
                                                           identifier
                                                            Closed
                                      ,
                                      switch_expression_arm
                                       expression
                                        non_assignment_expression
                                         conditional_expression
                                          null_coalescing_expression
                                           conditional_or_expression
                                            conditional_and_expression
                                             inclusive_or_expression
                                              exclusive_or_expression
                                               and_expression
                                                equality_expression
                                                 relational_expression
                                                  shift_expression
                                                   additive_expression
                                                    multiplicative_expression
                                                     switch_expression
                                                      range_expression
                                                       unary_expression
                                                        primary_expression
                                                         primary_expression_start
                                                          (
                                                          argument
                                                           expression
                                                            non_assignment_expression
                                                             conditional_expression
                                                              null_coalescing_expression
                                                               conditional_or_expression
                                                                conditional_and_expression
                                                                 inclusive_or_expression
                                                                  exclusive_or_expression
                                                                   and_expression
                                                                    equality_expression
                                                                     relational_expression
                                                                      shift_expression
                                                                       additive_expression
                                                                        multiplicative_expression
                                                                         switch_expression
                                                                          range_expression
                                                                           unary_expression
                                                                            primary_expression
                                                                             primary_expression_start
                                                                              identifier
                                                                               DoorState
                                                                             member_access
                                                                              .
                                                                              identifier
                                                                               Closed
                                                          ,
                                                          argument
                                                           expression
                                                            non_assignment_expression
                                                             conditional_expression
                                                              null_coalescing_expression
                                                               conditional_or_expression
                                                                conditional_and_expression
                                                                 inclusive_or_expression
                                                                  exclusive_or_expression
                                                                   and_expression
                                                                    equality_expression
                                                                     relational_expression
                                                                      shift_expression
                                                                       additive_expression
                                                                        multiplicative_expression
                                                                         switch_expression
                                                                          range_expression
                                                                           unary_expression
                                                                            primary_expression
                                                                             primary_expression_start
                                                                              identifier
                                                                               Action
                                                                             member_access
                                                                              .
                                                                              identifier
                                                                               Lock
                                                          ,
                                                          argument
                                                           expression
                                                            non_assignment_expression
                                                             conditional_expression
                                                              null_coalescing_expression
                                                               conditional_or_expression
                                                                conditional_and_expression
                                                                 inclusive_or_expression
                                                                  exclusive_or_expression
                                                                   and_expression
                                                                    equality_expression
                                                                     relational_expression
                                                                      shift_expression
                                                                       additive_expression
                                                                        multiplicative_expression
                                                                         switch_expression
                                                                          range_expression
                                                                           unary_expression
                                                                            primary_expression
                                                                             primary_expression_start
                                                                              literal
                                                                               boolean_literal
                                                                                true
                                                          )
                                       right_arrow
                                        =
                                        >
                                       throwable_expression
                                        expression
                                         non_assignment_expression
                                          conditional_expression
                                           null_coalescing_expression
                                            conditional_or_expression
                                             conditional_and_expression
                                              inclusive_or_expression
                                               exclusive_or_expression
                                                and_expression
                                                 equality_expression
                                                  relational_expression
                                                   shift_expression
                                                    additive_expression
                                                     multiplicative_expression
                                                      switch_expression
                                                       range_expression
                                                        unary_expression
                                                         primary_expression
                                                          primary_expression_start
                                                           identifier
                                                            DoorState
                                                          member_access
                                                           .
                                                           identifier
                                                            Locked
                                      ,
                                      switch_expression_arm
                                       expression
                                        non_assignment_expression
                                         conditional_expression
                                          null_coalescing_expression
                                           conditional_or_expression
                                            conditional_and_expression
                                             inclusive_or_expression
                                              exclusive_or_expression
                                               and_expression
                                                equality_expression
                                                 relational_expression
                                                  shift_expression
                                                   additive_expression
                                                    multiplicative_expression
                                                     switch_expression
                                                      range_expression
                                                       unary_expression
                                                        primary_expression
                                                         primary_expression_start
                                                          (
                                                          argument
                                                           expression
                                                            non_assignment_expression
                                                             conditional_expression
                                                              null_coalescing_expression
                                                               conditional_or_expression
                                                                conditional_and_expression
                                                                 inclusive_or_expression
                                                                  exclusive_or_expression
                                                                   and_expression
                                                                    equality_expression
                                                                     relational_expression
                                                                      shift_expression
                                                                       additive_expression
                                                                        multiplicative_expression
                                                                         switch_expression
                                                                          range_expression
                                                                           unary_expression
                                                                            primary_expression
                                                                             primary_expression_start
                                                                              identifier
                                                                               DoorState
                                                                             member_access
                                                                              .
                                                                              identifier
                                                                               Locked
                                                          ,
                                                          argument
                                                           expression
                                                            non_assignment_expression
                                                             conditional_expression
                                                              null_coalescing_expression
                                                               conditional_or_expression
                                                                conditional_and_expression
                                                                 inclusive_or_expression
                                                                  exclusive_or_expression
                                                                   and_expression
                                                                    equality_expression
                                                                     relational_expression
                                                                      shift_expression
                                                                       additive_expression
                                                                        multiplicative_expression
                                                                         switch_expression
                                                                          range_expression
                                                                           unary_expression
                                                                            primary_expression
                                                                             primary_expression_start
                                                                              identifier
                                                                               Action
                                                                             member_access
                                                                              .
                                                                              identifier
                                                                               Unlock
                                                          ,
                                                          argument
                                                           expression
                                                            non_assignment_expression
                                                             conditional_expression
                                                              null_coalescing_expression
                                                               conditional_or_expression
                                                                conditional_and_expression
                                                                 inclusive_or_expression
                                                                  exclusive_or_expression
                                                                   and_expression
                                                                    equality_expression
                                                                     relational_expression
                                                                      shift_expression
                                                                       additive_expression
                                                                        multiplicative_expression
                                                                         switch_expression
                                                                          range_expression
                                                                           unary_expression
                                                                            primary_expression
                                                                             primary_expression_start
                                                                              literal
                                                                               boolean_literal
                                                                                true
                                                          )
                                       right_arrow
                                        =
                                        >
                                       throwable_expression
                                        expression
                                         non_assignment_expression
                                          conditional_expression
                                           null_coalescing_expression
                                            conditional_or_expression
                                             conditional_and_expression
                                              inclusive_or_expression
                                               exclusive_or_expression
                                                and_expression
                                                 equality_expression
                                                  relational_expression
                                                   shift_expression
                                                    additive_expression
                                                     multiplicative_expression
                                                      switch_expression
                                                       range_expression
                                                        unary_expression
                                                         primary_expression
                                                          primary_expression_start
                                                           identifier
                                                            DoorState
                                                          member_access
                                                           .
                                                           identifier
                                                            Closed
                                      ,
                                      switch_expression_arm
                                       expression
                                        non_assignment_expression
                                         conditional_expression
                                          null_coalescing_expression
                                           conditional_or_expression
                                            conditional_and_expression
                                             inclusive_or_expression
                                              exclusive_or_expression
                                               and_expression
                                                equality_expression
                                                 relational_expression
                                                  shift_expression
                                                   additive_expression
                                                    multiplicative_expression
                                                     switch_expression
                                                      range_expression
                                                       unary_expression
                                                        primary_expression
                                                         primary_expression_start
                                                          (
                                                          argument
                                                           var
                                                           expression
                                                            non_assignment_expression
                                                             conditional_expression
                                                              null_coalescing_expression
                                                               conditional_or_expression
                                                                conditional_and_expression
                                                                 inclusive_or_expression
                                                                  exclusive_or_expression
                                                                   and_expression
                                                                    equality_expression
                                                                     relational_expression
                                                                      shift_expression
                                                                       additive_expression
                                                                        multiplicative_expression
                                                                         switch_expression
                                                                          range_expression
                                                                           unary_expression
                                                                            primary_expression
                                                                             primary_expression_start
                                                                              identifier
                                                                               state
                                                          ,
                                                          argument
                                                           expression
                                                            non_assignment_expression
                                                             conditional_expression
                                                              null_coalescing_expression
                                                               conditional_or_expression
                                                                conditional_and_expression
                                                                 inclusive_or_expression
                                                                  exclusive_or_expression
                                                                   and_expression
                                                                    equality_expression
                                                                     relational_expression
                                                                      shift_expression
                                                                       additive_expression
                                                                        multiplicative_expression
                                                                         switch_expression
                                                                          range_expression
                                                                           unary_expression
                                                                            primary_expression
                                                                             primary_expression_start
                                                                              identifier
                                                                               _
                                                          ,
                                                          argument
                                                           expression
                                                            non_assignment_expression
                                                             conditional_expression
                                                              null_coalescing_expression
                                                               conditional_or_expression
                                                                conditional_and_expression
                                                                 inclusive_or_expression
                                                                  exclusive_or_expression
                                                                   and_expression
                                                                    equality_expression
                                                                     relational_expression
                                                                      shift_expression
                                                                       additive_expression
                                                                        multiplicative_expression
                                                                         switch_expression
                                                                          range_expression
                                                                           unary_expression
                                                                            primary_expression
                                                                             primary_expression_start
                                                                              identifier
                                                                               _
                                                          )
                                       right_arrow
                                        =
                                        >
                                       throwable_expression
                                        expression
                                         non_assignment_expression
                                          conditional_expression
                                           null_coalescing_expression
                                            conditional_or_expression
                                             conditional_and_expression
                                              inclusive_or_expression
                                               exclusive_or_expression
                                                and_expression
                                                 equality_expression
                                                  relational_expression
                                                   shift_expression
                                                    additive_expression
                                                     multiplicative_expression
                                                      switch_expression
                                                       range_expression
                                                        unary_expression
                                                         primary_expression
                                                          primary_expression_start
                                                           identifier
                                                            state
                                     }
                   ;
                }
           class_member_declaration
            all_member_modifiers
             all_member_modifier
              async
            common_member_declaration
             typed_member_declaration
              type_
               base_type
                class_type
                 namespace_or_type_name
                  identifier
                   Task
              method_declaration
               method_member_name
                identifier
                 AsyncStreams
               (
               )
               method_body
                block
                 {
                 statement_list
                  statement
                   embedded_statement
                    simple_embedded_statement
                     await
                     foreach
                     (
                     local_variable_type
                      var
                     identifier
                      item
                     in
                     expression
                      non_assignment_expression
                       conditional_expression
                        null_coalescing_expression
                         conditional_or_expression
                          conditional_and_expression
                           inclusive_or_expression
                            exclusive_or_expression
                             and_expression
                              equality_expression
                               relational_expression
                                shift_expression
                                 additive_expression
                                  multiplicative_expression
                                   switch_expression
                                    range_expression
                                     unary_expression
                                      primary_expression
                                       primary_expression_start
                                        identifier
                                         asyncEnumerables
                     )
                     embedded_statement
                      block
                       {
                       }
                 }
           class_member_declaration
            common_member_declaration
             void
             method_declaration
              method_member_name
               identifier
                Ranges
              (
              )
              method_body
               block
                {
                statement_list
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      thirdItem
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          list
                                        bracket_expression
                                         [
                                         indexer_argument
                                          expression
                                           non_assignment_expression
                                            conditional_expression
                                             null_coalescing_expression
                                              conditional_or_expression
                                               conditional_and_expression
                                                inclusive_or_expression
                                                 exclusive_or_expression
                                                  and_expression
                                                   equality_expression
                                                    relational_expression
                                                     shift_expression
                                                      additive_expression
                                                       multiplicative_expression
                                                        switch_expression
                                                         range_expression
                                                          unary_expression
                                                           primary_expression
                                                            primary_expression_start
                                                             literal
                                                              2
                                         ]
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      lastItem
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          list
                                        bracket_expression
                                         [
                                         indexer_argument
                                          expression
                                           non_assignment_expression
                                            conditional_expression
                                             null_coalescing_expression
                                              conditional_or_expression
                                               conditional_and_expression
                                                inclusive_or_expression
                                                 exclusive_or_expression
                                                  and_expression
                                                   equality_expression
                                                    relational_expression
                                                     shift_expression
                                                      additive_expression
                                                       multiplicative_expression
                                                        switch_expression
                                                         range_expression
                                                          unary_expression
                                                           ^
                                                           unary_expression
                                                            primary_expression
                                                             primary_expression_start
                                                              literal
                                                               1
                                         ]
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      multiDimensional
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          list
                                        bracket_expression
                                         [
                                         indexer_argument
                                          expression
                                           non_assignment_expression
                                            conditional_expression
                                             null_coalescing_expression
                                              conditional_or_expression
                                               conditional_and_expression
                                                inclusive_or_expression
                                                 exclusive_or_expression
                                                  and_expression
                                                   equality_expression
                                                    relational_expression
                                                     shift_expression
                                                      additive_expression
                                                       multiplicative_expression
                                                        switch_expression
                                                         range_expression
                                                          unary_expression
                                                           primary_expression
                                                            primary_expression_start
                                                             literal
                                                              3
                                         ,
                                         indexer_argument
                                          expression
                                           non_assignment_expression
                                            conditional_expression
                                             null_coalescing_expression
                                              conditional_or_expression
                                               conditional_and_expression
                                                inclusive_or_expression
                                                 exclusive_or_expression
                                                  and_expression
                                                   equality_expression
                                                    relational_expression
                                                     shift_expression
                                                      additive_expression
                                                       multiplicative_expression
                                                        switch_expression
                                                         range_expression
                                                          unary_expression
                                                           ^
                                                           unary_expression
                                                            primary_expression
                                                             primary_expression_start
                                                              literal
                                                               2
                                         ]
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      slice1
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          list
                                        bracket_expression
                                         [
                                         indexer_argument
                                          expression
                                           non_assignment_expression
                                            conditional_expression
                                             null_coalescing_expression
                                              conditional_or_expression
                                               conditional_and_expression
                                                inclusive_or_expression
                                                 exclusive_or_expression
                                                  and_expression
                                                   equality_expression
                                                    relational_expression
                                                     shift_expression
                                                      additive_expression
                                                       multiplicative_expression
                                                        switch_expression
                                                         range_expression
                                                          unary_expression
                                                           primary_expression
                                                            primary_expression_start
                                                             literal
                                                              2
                                                          ..
                                                          unary_expression
                                                           ^
                                                           unary_expression
                                                            primary_expression
                                                             primary_expression_start
                                                              literal
                                                               3
                                         ]
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      slice2
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          list
                                        bracket_expression
                                         [
                                         indexer_argument
                                          expression
                                           non_assignment_expression
                                            conditional_expression
                                             null_coalescing_expression
                                              conditional_or_expression
                                               conditional_and_expression
                                                inclusive_or_expression
                                                 exclusive_or_expression
                                                  and_expression
                                                   equality_expression
                                                    relational_expression
                                                     shift_expression
                                                      additive_expression
                                                       multiplicative_expression
                                                        switch_expression
                                                         range_expression
                                                          ..
                                                          unary_expression
                                                           ^
                                                           unary_expression
                                                            primary_expression
                                                             primary_expression_start
                                                              literal
                                                               3
                                         ]
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      slice3
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          list
                                        bracket_expression
                                         [
                                         indexer_argument
                                          expression
                                           non_assignment_expression
                                            conditional_expression
                                             null_coalescing_expression
                                              conditional_or_expression
                                               conditional_and_expression
                                                inclusive_or_expression
                                                 exclusive_or_expression
                                                  and_expression
                                                   equality_expression
                                                    relational_expression
                                                     shift_expression
                                                      additive_expression
                                                       multiplicative_expression
                                                        switch_expression
                                                         range_expression
                                                          unary_expression
                                                           primary_expression
                                                            primary_expression_start
                                                             literal
                                                              2
                                                          ..
                                         ]
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      slice4
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          list
                                        bracket_expression
                                         [
                                         indexer_argument
                                          expression
                                           non_assignment_expression
                                            conditional_expression
                                             null_coalescing_expression
                                              conditional_or_expression
                                               conditional_and_expression
                                                inclusive_or_expression
                                                 exclusive_or_expression
                                                  and_expression
                                                   equality_expression
                                                    relational_expression
                                                     shift_expression
                                                      additive_expression
                                                       multiplicative_expression
                                                        switch_expression
                                                         range_expression
                                                          ..
                                         ]
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      multiDimensional
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         identifier
                                          list
                                        bracket_expression
                                         [
                                         indexer_argument
                                          expression
                                           non_assignment_expression
                                            conditional_expression
                                             null_coalescing_expression
                                              conditional_or_expression
                                               conditional_and_expression
                                                inclusive_or_expression
                                                 exclusive_or_expression
                                                  and_expression
                                                   equality_expression
                                                    relational_expression
                                                     shift_expression
                                                      additive_expression
                                                       multiplicative_expression
                                                        switch_expression
                                                         range_expression
                                                          unary_expression
                                                           primary_expression
                                                            primary_expression_start
                                                             literal
                                                              1
                                                          ..
                                                          unary_expression
                                                           primary_expression
                                                            primary_expression_start
                                                             literal
                                                              2
                                         ,
                                         indexer_argument
                                          expression
                                           non_assignment_expression
                                            conditional_expression
                                             null_coalescing_expression
                                              conditional_or_expression
                                               conditional_and_expression
                                                inclusive_or_expression
                                                 exclusive_or_expression
                                                  and_expression
                                                   equality_expression
                                                    relational_expression
                                                     shift_expression
                                                      additive_expression
                                                       multiplicative_expression
                                                        switch_expression
                                                         range_expression
                                                          ..
                                         ]
                   ;
                }
           class_member_declaration
            common_member_declaration
             void
             method_declaration
              method_member_name
               identifier
                UsingDeclarators
              (
              )
              method_body
               block
                {
                statement_list
                 statement
                  declarationStatement
                   local_variable_declaration
                    using
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      item
                     =
                     local_variable_initializer
                      expression
                       non_assignment_expression
                        conditional_expression
                         null_coalescing_expression
                          conditional_or_expression
                           conditional_and_expression
                            inclusive_or_expression
                             exclusive_or_expression
                              and_expression
                               equality_expression
                                relational_expression
                                 shift_expression
                                  additive_expression
                                   multiplicative_expression
                                    switch_expression
                                     range_expression
                                      unary_expression
                                       primary_expression
                                        primary_expression_start
                                         new
                                         type_
                                          base_type
                                           class_type
                                            namespace_or_type_name
                                             identifier
                                              FileStream
                                         object_creation_expression
                                          (
                                          argument_list
                                           argument
                                            expression
                                             non_assignment_expression
                                              conditional_expression
                                               null_coalescing_expression
                                                conditional_or_expression
                                                 conditional_and_expression
                                                  inclusive_or_expression
                                                   exclusive_or_expression
                                                    and_expression
                                                     equality_expression
                                                      relational_expression
                                                       shift_expression
                                                        additive_expression
                                                         multiplicative_expression
                                                          switch_expression
                                                           range_expression
                                                            unary_expression
                                                             primary_expression
                                                              primary_expression_start
                                                               literal
                                                                string_literal
                                                                 "./.f"
                                          )
                   ;
                 statement
                  declarationStatement
                   local_variable_declaration
                    fixed
                    pointer_type
                     simple_type
                      numeric_type
                       integral_type
                        char
                     *
                    fixed_pointer_declarators
                     fixed_pointer_declarator
                      identifier
                       ch
                      =
                      fixed_pointer_initializer
                       expression
                        non_assignment_expression
                         conditional_expression
                          null_coalescing_expression
                           conditional_or_expression
                            conditional_and_expression
                             inclusive_or_expression
                              exclusive_or_expression
                               and_expression
                                equality_expression
                                 relational_expression
                                  shift_expression
                                   additive_expression
                                    multiplicative_expression
                                     switch_expression
                                      range_expression
                                       unary_expression
                                        primary_expression
                                         primary_expression_start
                                          literal
                                           string_literal
                                            "hell"
                   ;
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     non_assignment_expression
                      conditional_expression
                       null_coalescing_expression
                        conditional_or_expression
                         conditional_and_expression
                          inclusive_or_expression
                           exclusive_or_expression
                            and_expression
                             equality_expression
                              relational_expression
                               shift_expression
                                additive_expression
                                 multiplicative_expression
                                  switch_expression
                                   range_expression
                                    unary_expression
                                     primary_expression
                                      primary_expression_start
                                       identifier
                                        item
                                      member_access
                                       .
                                       identifier
                                        Dispose
                                      method_invocation
                                       (
                                       )
                    ;
                }
           class_member_declaration
            common_member_declaration
             void
             method_declaration
              method_member_name
               identifier
                StaticLocalFunction
              (
              )
              method_body
               block
                {
                statement_list
                 statement
                  declarationStatement
                   local_function_declaration
                    local_function_header
                     local_function_modifiers
                      static
                      unsafe
                     return_type
                      void
                     identifier
                      Func1
                     (
                     )
                    local_function_body
                     block
                      {
                      }
                 statement
                  declarationStatement
                   local_function_declaration
                    local_function_header
                     local_function_modifiers
                      static
                      unsafe
                     return_type
                      void
                     identifier
                      Func1
                     (
                     )
                    local_function_body
                     block
                      {
                      }
                 statement
                  declarationStatement
                   local_function_declaration
                    local_function_header
                     local_function_modifiers
                      async
                      static
                     return_type
                      void
                     identifier
                      Func2
                     (
                     )
                    local_function_body
                     block
                      {
                      }
                 statement
                  declarationStatement
                   local_function_declaration
                    local_function_header
                     local_function_modifiers
                      static
                      async
                     return_type
                      void
                     identifier
                      Func2
                     (
                     )
                    local_function_body
                     block
                      {
                      }
                }
           class_member_declaration
            common_member_declaration
             void
             method_declaration
              method_member_name
               identifier
                NullCoalescingAssignment
              (
              )
              method_body
               block
                {
                statement_list
                 statement
                  declarationStatement
                   local_variable_declaration
                    local_variable_type
                     var
                    local_variable_declarator
                     identifier
                      item
                     =
                     local_variable_initializer
                      expression
                       assignment
                        unary_expression
                         primary_expression
                          primary_expression_start
                           identifier
                            a
                        ??=
                        throwable_expression
                         expression
                          assignment
                           unary_expression
                            primary_expression
                             primary_expression_start
                              identifier
                               b
                           ??=
                           throwable_expression
                            expression
                             assignment
                              unary_expression
                               primary_expression
                                primary_expression_start
                                 identifier
                                  c
                              ??=
                              throwable_expression
                               expression
                                assignment
                                 unary_expression
                                  primary_expression
                                   primary_expression_start
                                    identifier
                                     d
                                 ??=
                                 throwable_expression
                                  throw_expression
                                   throw
                                   expression
                                    non_assignment_expression
                                     conditional_expression
                                      null_coalescing_expression
                                       conditional_or_expression
                                        conditional_and_expression
                                         inclusive_or_expression
                                          exclusive_or_expression
                                           and_expression
                                            equality_expression
                                             relational_expression
                                              shift_expression
                                               additive_expression
                                                multiplicative_expression
                                                 switch_expression
                                                  range_expression
                                                   unary_expression
                                                    primary_expression
                                                     primary_expression_start
                                                      new
                                                      type_
                                                       base_type
                                                        class_type
                                                         namespace_or_type_name
                                                          identifier
                                                           Exception
                                                      object_creation_expression
                                                       (
                                                       )
                   ;
                }
           class_member_declaration
            all_member_modifiers
             all_member_modifier
              public
             all_member_modifier
              readonly
            common_member_declaration
             typed_member_declaration
              type_
               base_type
                simple_type
                 numeric_type
                  floating_point_type
                   float
              method_declaration
               method_member_name
                identifier
                 Hello
               (
               )
               method_body
                block
                 {
                 statement_list
                  statement
                   embedded_statement
                    simple_embedded_statement
                     return
                     expression
                      non_assignment_expression
                       conditional_expression
                        null_coalescing_expression
                         conditional_or_expression
                          conditional_and_expression
                           inclusive_or_expression
                            exclusive_or_expression
                             and_expression
                              equality_expression
                               relational_expression
                                shift_expression
                                 additive_expression
                                  multiplicative_expression
                                   switch_expression
                                    range_expression
                                     unary_expression
                                      primary_expression
                                       primary_expression_start
                                        literal
                                         0.1f
                     ;
                 }
          }
      namespace_member_declaration
       type_declaration
        interface_definition
         interface
         identifier
          IA
         class_body
          {
          class_member_declarations
           class_member_declaration
            common_member_declaration
             void
             method_declaration
              method_member_name
               identifier
                M
              (
              )
              method_body
               block
                {
                statement_list
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     non_assignment_expression
                      conditional_expression
                       null_coalescing_expression
                        conditional_or_expression
                         conditional_and_expression
                          inclusive_or_expression
                           exclusive_or_expression
                            and_expression
                             equality_expression
                              relational_expression
                               shift_expression
                                additive_expression
                                 multiplicative_expression
                                  switch_expression
                                   range_expression
                                    unary_expression
                                     primary_expression
                                      primary_expression_start
                                       identifier
                                        WriteLine
                                      method_invocation
                                       (
                                       argument_list
                                        argument
                                         expression
                                          non_assignment_expression
                                           conditional_expression
                                            null_coalescing_expression
                                             conditional_or_expression
                                              conditional_and_expression
                                               inclusive_or_expression
                                                exclusive_or_expression
                                                 and_expression
                                                  equality_expression
                                                   relational_expression
                                                    shift_expression
                                                     additive_expression
                                                      multiplicative_expression
                                                       switch_expression
                                                        range_expression
                                                         unary_expression
                                                          primary_expression
                                                           primary_expression_start
                                                            literal
                                                             string_literal
                                                              "IA.M"
                                       )
                    ;
                }
          }
      namespace_member_declaration
       type_declaration
        interface_definition
         interface
         identifier
          IA
         class_body
          {
          class_member_declarations
           class_member_declaration
            common_member_declaration
             void
             method_declaration
              method_member_name
               identifier
                M
              (
              )
              method_body
               block
                {
                statement_list
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     non_assignment_expression
                      conditional_expression
                       null_coalescing_expression
                        conditional_or_expression
                         conditional_and_expression
                          inclusive_or_expression
                           exclusive_or_expression
                            and_expression
                             equality_expression
                              relational_expression
                               shift_expression
                                additive_expression
                                 multiplicative_expression
                                  switch_expression
                                   range_expression
                                    unary_expression
                                     primary_expression
                                      primary_expression_start
                                       identifier
                                        WriteLine
                                      method_invocation
                                       (
                                       argument_list
                                        argument
                                         expression
                                          non_assignment_expression
                                           conditional_expression
                                            null_coalescing_expression
                                             conditional_or_expression
                                              conditional_and_expression
                                               inclusive_or_expression
                                                exclusive_or_expression
                                                 and_expression
                                                  equality_expression
                                                   relational_expression
                                                    shift_expression
                                                     additive_expression
                                                      multiplicative_expression
                                                       switch_expression
                                                        range_expression
                                                         unary_expression
                                                          primary_expression
                                                           primary_expression_start
                                                            literal
                                                             string_literal
                                                              "IA.M"
                                       )
                    ;
                }
          }
      namespace_member_declaration
       type_declaration
        interface_definition
         interface
         identifier
          IB
         interface_base
          :
          interface_type_list
           namespace_or_type_name
            identifier
             IA
         class_body
          {
          class_member_declarations
           class_member_declaration
            all_member_modifiers
             all_member_modifier
              override
            common_member_declaration
             void
             method_declaration
              method_member_name
               identifier
                IA
               .
               identifier
                M
              (
              )
              method_body
               block
                {
                statement_list
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     non_assignment_expression
                      conditional_expression
                       null_coalescing_expression
                        conditional_or_expression
                         conditional_and_expression
                          inclusive_or_expression
                           exclusive_or_expression
                            and_expression
                             equality_expression
                              relational_expression
                               shift_expression
                                additive_expression
                                 multiplicative_expression
                                  switch_expression
                                   range_expression
                                    unary_expression
                                     primary_expression
                                      primary_expression_start
                                       identifier
                                        WriteLine
                                      method_invocation
                                       (
                                       argument_list
                                        argument
                                         expression
                                          non_assignment_expression
                                           conditional_expression
                                            null_coalescing_expression
                                             conditional_or_expression
                                              conditional_and_expression
                                               inclusive_or_expression
                                                exclusive_or_expression
                                                 and_expression
                                                  equality_expression
                                                   relational_expression
                                                    shift_expression
                                                     additive_expression
                                                      multiplicative_expression
                                                       switch_expression
                                                        range_expression
                                                         unary_expression
                                                          primary_expression
                                                           primary_expression_start
                                                            literal
                                                             string_literal
                                                              "IB.M"
                                       )
                    ;
                }
          }
      namespace_member_declaration
       type_declaration
        interface_definition
         interface
         identifier
          IC
         interface_base
          :
          interface_type_list
           namespace_or_type_name
            identifier
             IA
         class_body
          {
          class_member_declarations
           class_member_declaration
            all_member_modifiers
             all_member_modifier
              override
            common_member_declaration
             void
             method_declaration
              method_member_name
               identifier
                M
              (
              )
              method_body
               block
                {
                statement_list
                 statement
                  embedded_statement
                   simple_embedded_statement
                    expression
                     non_assignment_expression
                      conditional_expression
                       null_coalescing_expression
                        conditional_or_expression
                         conditional_and_expression
                          inclusive_or_expression
                           exclusive_or_expression
                            and_expression
                             equality_expression
                              relational_expression
                               shift_expression
                                additive_expression
                                 multiplicative_expression
                                  switch_expression
                                   range_expression
                                    unary_expression
                                     primary_expression
                                      primary_expression_start
                                       identifier
                                        WriteLine
                                      method_invocation
                                       (
                                       argument_list
                                        argument
                                         expression
                                          non_assignment_expression
                                           conditional_expression
                                            null_coalescing_expression
                                             conditional_or_expression
                                              conditional_and_expression
                                               inclusive_or_expression
                                                exclusive_or_expression
                                                 and_expression
                                                  equality_expression
                                                   relational_expression
                                                    shift_expression
                                                     additive_expression
                                                      multiplicative_expression
                                                       switch_expression
                                                        range_expression
                                                         unary_expression
                                                          primary_expression
                                                           primary_expression_start
                                                            literal
                                                             string_literal
                                                              "IC.M"
                                       )
                    ;
                }
          }
     }
 <EOF>
