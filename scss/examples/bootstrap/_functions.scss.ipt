stylesheet
 statement
  mixinDeclaration
   @mixin
   identifier
    _assert-ascending
   (
   parameters
    parameter
     value
      variableName
       $
       identifier
        map
    ,
    parameter
     value
      variableName
       $
       identifier
        map-name
   )
   block
    {
    statement
     variableDeclaration
      variableName
       $
       identifier
        prev-key
      :
      variableValue
       value
        identifier
         null
      ;
    statement
     variableDeclaration
      variableName
       $
       identifier
        prev-num
      :
      variableValue
       value
        identifier
         null
      ;
    statement
     eachDeclaration
      @each
      variableName
       $
       identifier
        key
      ,
      variableName
       $
       identifier
        num
      in
      eachValueList
       listDeclaration
        listCommaSeparated
         listElement
          value
           variableName
            $
            identifier
             map
      block
       {
       statement
        ifDeclaration
         @if
         expression
          expressionPart
           variableName
            $
            identifier
             prev-num
          operator_
           =
           =
          expressionPart
           identifier
            null
          operator_
           or
          expressionPart
           functionCall
            identifier
             unit
            (
            parameters
             parameter
              value
               variableName
                $
                identifier
                 num
            )
          operator_
           =
           =
          expressionPart
           "%"
          operator_
           or
          expressionPart
           functionCall
            identifier
             unit
            (
            parameters
             parameter
              value
               variableName
                $
                identifier
                 prev-num
            )
          operator_
           =
           =
          expressionPart
           "%"
         block
          {
          }
         elseIfStatement
          @else
          if
          expression
           not
           expressionPart
            functionCall
             identifier
              comparable
             (
             parameters
              parameter
               value
                variableName
                 $
                 identifier
                  prev-num
              ,
              parameter
               value
                variableName
                 $
                 identifier
                  num
             )
          block
           {
           statement
            warndingDeclaration
             @warn
             "Potentially invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} whose unit makes it incomparable to #{$prev-num}, the value of the previous key '#{$prev-key}' !"
             ;
           }
         elseIfStatement
          @else
          if
          expression
           expressionPart
            variableName
             $
             identifier
              prev-num
           operator_
            >
            =
           expressionPart
            variableName
             $
             identifier
              num
          block
           {
           statement
            warndingDeclaration
             @warn
             "Invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} which isn't greater than #{$prev-num}, the value of the previous key '#{$prev-key}' !"
             ;
           }
       statement
        variableDeclaration
         variableName
          $
          identifier
           prev-key
         :
         variableValue
          value
           variableName
            $
            identifier
             key
         ;
       statement
        variableDeclaration
         variableName
          $
          identifier
           prev-num
         :
         variableValue
          value
           variableName
            $
            identifier
             num
         ;
       }
    }
 statement
  mixinDeclaration
   @mixin
   identifier
    _assert-starts-at-zero
   (
   parameters
    parameter
     value
      variableName
       $
       identifier
        map
    ,
    parameter
     variableDeclaration
      variableName
       $
       identifier
        map-name
      :
      variableValue
       value
        "$grid-breakpoints"
   )
   block
    {
    statement
     ifDeclaration
      @if
      expression
       expressionPart
        functionCall
         identifier
          length
         (
         parameters
          parameter
           value
            variableName
             $
             identifier
              map
         )
       operator_
        >
       expressionPart
        number
         0
      block
       {
       statement
        variableDeclaration
         variableName
          $
          identifier
           values
         :
         variableValue
          value
           functionCall
            identifier
             map-values
            (
            parameters
             parameter
              value
               variableName
                $
                identifier
                 map
            )
         ;
       statement
        variableDeclaration
         variableName
          $
          identifier
           first-value
         :
         variableValue
          value
           functionCall
            identifier
             nth
            (
            parameters
             parameter
              value
               variableName
                $
                identifier
                 values
             ,
             parameter
              value
               number
                1
            )
         ;
       statement
        ifDeclaration
         @if
         expression
          expressionPart
           variableName
            $
            identifier
             first-value
          operator_
           !=
          expressionPart
           number
            0
         block
          {
          statement
           warndingDeclaration
            @warn
            "First breakpoint in #{$map-name} must start at 0, but starts at #{$first-value}."
            ;
          }
       }
    }
 statement
  functionDeclaration
   @function
   identifier
    to-rgb
   (
   parameters
    parameter
     value
      variableName
       $
       identifier
        value
   )
   {
   functionBody
    functionReturn
     @return
     expression
      expressionPart
       functionCall
        identifier
         red
        (
        parameters
         parameter
          value
           variableName
            $
            identifier
             value
        )
     ,
     expression
      expressionPart
       functionCall
        identifier
         green
        (
        parameters
         parameter
          value
           variableName
            $
            identifier
             value
        )
     ,
     expression
      expressionPart
       functionCall
        identifier
         blue
        (
        parameters
         parameter
          value
           variableName
            $
            identifier
             value
        )
     ;
   }
 statement
  functionDeclaration
   @function
   identifier
    rgba-css-var
   (
   parameters
    parameter
     value
      variableName
       $
       identifier
        identifier
    ,
    parameter
     value
      variableName
       $
       identifier
        target
   )
   {
   functionBody
    functionStatement
     statement
      ifDeclaration
       @if
       expression
        expressionPart
         variableName
          $
          identifier
           identifier
        operator_
         =
         =
        expressionPart
         "body"
        operator_
         and
        expressionPart
         variableName
          $
          identifier
           target
        operator_
         =
         =
        expressionPart
         "bg"
       block
        {
        functionReturn
         @return
         expression
          expressionPart
           rgba
            rgba(
            value
             var_
              var(
              --#{$prefix}#{$identifier}-bg-rgb
              )
            ,
            value
             var_
              var(
              --#{$prefix}#{$target}-opacity
              )
            )
         ;
        }
    functionStatement
     statement
      ifDeclaration
       @if
       expression
        expressionPart
         variableName
          $
          identifier
           identifier
        operator_
         =
         =
        expressionPart
         "body"
        operator_
         and
        expressionPart
         variableName
          $
          identifier
           target
        operator_
         =
         =
        expressionPart
         "text"
       block
        {
        functionReturn
         @return
         expression
          expressionPart
           rgba
            rgba(
            value
             var_
              var(
              --#{$prefix}#{$identifier}-color-rgb
              )
            ,
            value
             var_
              var(
              --#{$prefix}#{$target}-opacity
              )
            )
         ;
        }
       elseStatement
        @else
        block
         {
         functionReturn
          @return
          expression
           expressionPart
            rgba
             rgba(
             value
              var_
               var(
               --#{$prefix}#{$identifier}-rgb
               )
             ,
             value
              var_
               var(
               --#{$prefix}#{$target}-opacity
               )
             )
          ;
         }
   }
 statement
  functionDeclaration
   @function
   identifier
    map-loop
   (
   parameters
    parameter
     value
      variableName
       $
       identifier
        map
    ,
    parameter
     value
      variableName
       $
       identifier
        func
    ,
    parameter
     value
      variableName
       $
       identifier
        args
     arglist
      .
      .
      .
   )
   {
   functionBody
    functionStatement
     statement
      variableDeclaration
       variableName
        $
        identifier
         _map
       :
       variableValue
        value
         expression
          expressionPart
           (
           )
       ;
    functionStatement
     statement
      eachDeclaration
       @each
       variableName
        $
        identifier
         key
       ,
       variableName
        $
        identifier
         value
       in
       eachValueList
        listDeclaration
         listCommaSeparated
          listElement
           value
            variableName
             $
             identifier
              map
       block
        {
        statement
         variableDeclaration
          variableName
           $
           identifier
            _args
          :
          variableValue
           value
            expression
             expressionPart
              (
              )
          ;
        statement
         eachDeclaration
          @each
          variableName
           $
           identifier
            arg
          in
          eachValueList
           listDeclaration
            listCommaSeparated
             listElement
              value
               variableName
                $
                identifier
                 args
          block
           {
           statement
            variableDeclaration
             variableName
              $
              identifier
               _args
             :
             variableValue
              value
               functionCall
                identifier
                 append
                (
                parameters
                 parameter
                  value
                   variableName
                    $
                    identifier
                     _args
                 ,
                 parameter
                  value
                   expression
                    expressionPart
                     ifExpression
                      if
                      (
                      expression
                       expressionPart
                        variableName
                         $
                         identifier
                          arg
                       operator_
                        =
                        =
                       expressionPart
                        "$key"
                      ,
                      value
                       variableName
                        $
                        identifier
                         key
                      ,
                      value
                       expression
                        expressionPart
                         ifExpression
                          if
                          (
                          expression
                           expressionPart
                            variableName
                             $
                             identifier
                              arg
                           operator_
                            =
                            =
                           expressionPart
                            "$value"
                          ,
                          value
                           variableName
                            $
                            identifier
                             value
                          ,
                          value
                           variableName
                            $
                            identifier
                             arg
                          )
                      )
                )
             ;
           }
        statement
         variableDeclaration
          variableName
           $
           identifier
            _map
          :
          variableValue
           value
            functionCall
             identifier
              map-merge
             (
             parameters
              parameter
               value
                variableName
                 $
                 identifier
                  _map
              ,
              parameter
               mapDeclaration
                (
                mapEntries
                 mapEntry
                  mapKey
                   value
                    variableName
                     $
                     identifier
                      key
                  :
                  mapValue
                   value
                    functionCall
                     identifier
                      call
                     (
                     parameters
                      parameter
                       value
                        functionCall
                         identifier
                          get-function
                         (
                         parameters
                          parameter
                           value
                            variableName
                             $
                             identifier
                              func
                         )
                      ,
                      parameter
                       value
                        variableName
                         $
                         identifier
                          _args
                       arglist
                        .
                        .
                        .
                     )
                )
             )
          ;
        }
    functionReturn
     @return
     expression
      expressionPart
       variableName
        $
        identifier
         _map
     ;
   }
 statement
  functionDeclaration
   @function
   identifier
    varify
   (
   parameters
    parameter
     value
      variableName
       $
       identifier
        list
   )
   {
   functionBody
    functionStatement
     statement
      variableDeclaration
       variableName
        $
        identifier
         result
       :
       variableValue
        value
         identifier
          null
       ;
    functionStatement
     statement
      eachDeclaration
       @each
       variableName
        $
        identifier
         entry
       in
       eachValueList
        listDeclaration
         listCommaSeparated
          listElement
           value
            variableName
             $
             identifier
              list
       block
        {
        statement
         variableDeclaration
          variableName
           $
           identifier
            result
          :
          variableValue
           value
            functionCall
             identifier
              append
             (
             parameters
              parameter
               value
                variableName
                 $
                 identifier
                  result
              ,
              parameter
               value
                var_
                 var(
                 --#{$prefix}#{$entry}
                 )
              ,
              parameter
               value
                identifier
                 space
             )
          ;
        }
    functionReturn
     @return
     expression
      expressionPart
       variableName
        $
        identifier
         result
     ;
   }
 statement
  functionDeclaration
   @function
   identifier
    negativify-map
   (
   parameters
    parameter
     value
      variableName
       $
       identifier
        map
   )
   {
   functionBody
    functionStatement
     statement
      variableDeclaration
       variableName
        $
        identifier
         result
       :
       variableValue
        value
         expression
          expressionPart
           (
           )
       ;
    functionStatement
     statement
      eachDeclaration
       @each
       variableName
        $
        identifier
         key
       ,
       variableName
        $
        identifier
         value
       in
       eachValueList
        listDeclaration
         listCommaSeparated
          listElement
           value
            variableName
             $
             identifier
              map
       block
        {
        statement
         ifDeclaration
          @if
          expression
           expressionPart
            variableName
             $
             identifier
              key
           operator_
            !=
           expressionPart
            number
             0
          block
           {
           statement
            variableDeclaration
             variableName
              $
              identifier
               result
             :
             variableValue
              value
               functionCall
                identifier
                 map-merge
                (
                parameters
                 parameter
                  value
                   variableName
                    $
                    identifier
                     result
                 ,
                 parameter
                  mapDeclaration
                   (
                   mapEntries
                    mapEntry
                     mapKey
                      value
                       expression
                        expressionPart
                         "n"
                        operator_
                         +
                        expressionPart
                         variableName
                          $
                          identifier
                           key
                     :
                     mapValue
                      value
                       expression
                        expressionPart
                         (
                         expression
                          expressionPart
                           variableName
                            plusMinus
                             -
                            $
                            identifier
                             value
                         )
                   )
                )
             ;
           }
        }
    functionReturn
     @return
     expression
      expressionPart
       variableName
        $
        identifier
         result
     ;
   }
 statement
  functionDeclaration
   @function
   identifier
    map-get-multiple
   (
   parameters
    parameter
     value
      variableName
       $
       identifier
        map
    ,
    parameter
     value
      variableName
       $
       identifier
        values
   )
   {
   functionBody
    functionStatement
     statement
      variableDeclaration
       variableName
        $
        identifier
         result
       :
       variableValue
        value
         expression
          expressionPart
           (
           )
       ;
    functionStatement
     statement
      eachDeclaration
       @each
       variableName
        $
        identifier
         key
       ,
       variableName
        $
        identifier
         value
       in
       eachValueList
        listDeclaration
         listCommaSeparated
          listElement
           value
            variableName
             $
             identifier
              map
       block
        {
        statement
         ifDeclaration
          @if
          expression
           expressionPart
            (
            expression
             expressionPart
              functionCall
               identifier
                index
               (
               parameters
                parameter
                 value
                  variableName
                   $
                   identifier
                    values
                ,
                parameter
                 value
                  variableName
                   $
                   identifier
                    key
               )
             operator_
              !=
             expressionPart
              identifier
               null
            )
          block
           {
           statement
            variableDeclaration
             variableName
              $
              identifier
               result
             :
             variableValue
              value
               functionCall
                identifier
                 map-merge
                (
                parameters
                 parameter
                  value
                   variableName
                    $
                    identifier
                     result
                 ,
                 parameter
                  mapDeclaration
                   (
                   mapEntries
                    mapEntry
                     mapKey
                      value
                       variableName
                        $
                        identifier
                         key
                     :
                     mapValue
                      value
                       variableName
                        $
                        identifier
                         value
                   )
                )
             ;
           }
        }
    functionReturn
     @return
     expression
      expressionPart
       variableName
        $
        identifier
         result
     ;
   }
 statement
  functionDeclaration
   @function
   identifier
    map-merge-multiple
   (
   parameters
    parameter
     value
      variableName
       $
       identifier
        maps
     arglist
      .
      .
      .
   )
   {
   functionBody
    functionStatement
     statement
      variableDeclaration
       variableName
        $
        identifier
         merged-maps
       :
       variableValue
        value
         expression
          expressionPart
           (
           )
       ;
    functionStatement
     statement
      eachDeclaration
       @each
       variableName
        $
        identifier
         map
       in
       eachValueList
        listDeclaration
         listCommaSeparated
          listElement
           value
            variableName
             $
             identifier
              maps
       block
        {
        statement
         variableDeclaration
          variableName
           $
           identifier
            merged-maps
          :
          variableValue
           value
            functionCall
             identifier
              map-merge
             (
             parameters
              parameter
               value
                variableName
                 $
                 identifier
                  merged-maps
              ,
              parameter
               value
                variableName
                 $
                 identifier
                  map
             )
          ;
        }
    functionReturn
     @return
     expression
      expressionPart
       variableName
        $
        identifier
         merged-maps
     ;
   }
 statement
  functionDeclaration
   @function
   identifier
    str-replace
   (
   parameters
    parameter
     value
      variableName
       $
       identifier
        string
    ,
    parameter
     value
      variableName
       $
       identifier
        search
    ,
    parameter
     variableDeclaration
      variableName
       $
       identifier
        replace
      :
      variableValue
       value
        ""
   )
   {
   functionBody
    functionStatement
     statement
      variableDeclaration
       variableName
        $
        identifier
         index
       :
       variableValue
        value
         functionCall
          identifier
           str-index
          (
          parameters
           parameter
            value
             variableName
              $
              identifier
               string
           ,
           parameter
            value
             variableName
              $
              identifier
               search
          )
       ;
    functionStatement
     statement
      ifDeclaration
       @if
       expression
        expressionPart
         variableName
          $
          identifier
           index
       block
        {
        functionReturn
         @return
         expression
          expressionPart
           functionCall
            identifier
             str-slice
            (
            parameters
             parameter
              value
               variableName
                $
                identifier
                 string
             ,
             parameter
              value
               number
                1
             ,
             parameter
              value
               expression
                expressionPart
                 variableName
                  $
                  identifier
                   index
                operator_
                 -
                expressionPart
                 number
                  1
            )
          operator_
           +
          expressionPart
           variableName
            $
            identifier
             replace
          operator_
           +
          expressionPart
           functionCall
            identifier
             str-replace
            (
            parameters
             parameter
              value
               functionCall
                identifier
                 str-slice
                (
                parameters
                 parameter
                  value
                   variableName
                    $
                    identifier
                     string
                 ,
                 parameter
                  value
                   expression
                    expressionPart
                     variableName
                      $
                      identifier
                       index
                    operator_
                     +
                    expressionPart
                     functionCall
                      identifier
                       str-length
                      (
                      parameters
                       parameter
                        value
                         variableName
                          $
                          identifier
                           search
                      )
                )
             ,
             parameter
              value
               variableName
                $
                identifier
                 search
             ,
             parameter
              value
               variableName
                $
                identifier
                 replace
            )
         ;
        }
    functionReturn
     @return
     expression
      expressionPart
       variableName
        $
        identifier
         string
     ;
   }
 statement
  functionDeclaration
   @function
   identifier
    escape-svg
   (
   parameters
    parameter
     value
      variableName
       $
       identifier
        string
   )
   {
   functionBody
    functionStatement
     statement
      ifDeclaration
       @if
       expression
        expressionPart
         functionCall
          identifier
           str-index
          (
          parameters
           parameter
            value
             variableName
              $
              identifier
               string
           ,
           parameter
            value
             "data:image/svg+xml"
          )
       block
        {
        statement
         eachDeclaration
          @each
          variableName
           $
           identifier
            char
          ,
          variableName
           $
           identifier
            encoded
          in
          eachValueList
           listDeclaration
            listCommaSeparated
             listElement
              value
               variableName
                $
                identifier
                 escaped-characters
          block
           {
           statement
            ifDeclaration
             @if
             expression
              expressionPart
               functionCall
                identifier
                 str-index
                (
                parameters
                 parameter
                  value
                   variableName
                    $
                    identifier
                     string
                 ,
                 parameter
                  value
                   "url("
                )
              operator_
               =
               =
              expressionPart
               number
                1
             block
              {
              statement
               variableDeclaration
                variableName
                 $
                 identifier
                  string
                :
                variableValue
                 value
                  uri
                   url("#{str-replace(str-slice($string, 6, -3), $char, $encoded)}")
                ;
              }
             elseStatement
              @else
              block
               {
               statement
                variableDeclaration
                 variableName
                  $
                  identifier
                   string
                 :
                 variableValue
                  value
                   functionCall
                    identifier
                     str-replace
                    (
                    parameters
                     parameter
                      value
                       variableName
                        $
                        identifier
                         string
                     ,
                     parameter
                      value
                       variableName
                        $
                        identifier
                         char
                     ,
                     parameter
                      value
                       variableName
                        $
                        identifier
                         encoded
                    )
                 ;
               }
           }
        }
    functionReturn
     @return
     expression
      expressionPart
       variableName
        $
        identifier
         string
     ;
   }
 statement
  variableDeclaration
   variableName
    $
    identifier
     _luminance-list
   :
   variableValue
    listDeclaration
     listCommaSeparated
      listElement
       value
        number
         .0008
       value
        number
         .001
       value
        number
         .0011
       value
        number
         .0013
       value
        number
         .0015
       value
        number
         .0017
       value
        number
         .002
       value
        number
         .0022
       value
        number
         .0025
       value
        number
         .0027
       value
        number
         .003
       value
        number
         .0033
       value
        number
         .0037
       value
        number
         .004
       value
        number
         .0044
       value
        number
         .0048
       value
        number
         .0052
       value
        number
         .0056
       value
        number
         .006
       value
        number
         .0065
       value
        number
         .007
       value
        number
         .0075
       value
        number
         .008
       value
        number
         .0086
       value
        number
         .0091
       value
        number
         .0097
       value
        number
         .0103
       value
        number
         .011
       value
        number
         .0116
       value
        number
         .0123
       value
        number
         .013
       value
        number
         .0137
       value
        number
         .0144
       value
        number
         .0152
       value
        number
         .016
       value
        number
         .0168
       value
        number
         .0176
       value
        number
         .0185
       value
        number
         .0194
       value
        number
         .0203
       value
        number
         .0212
       value
        number
         .0222
       value
        number
         .0232
       value
        number
         .0242
       value
        number
         .0252
       value
        number
         .0262
       value
        number
         .0273
       value
        number
         .0284
       value
        number
         .0296
       value
        number
         .0307
       value
        number
         .0319
       value
        number
         .0331
       value
        number
         .0343
       value
        number
         .0356
       value
        number
         .0369
       value
        number
         .0382
       value
        number
         .0395
       value
        number
         .0409
       value
        number
         .0423
       value
        number
         .0437
       value
        number
         .0452
       value
        number
         .0467
       value
        number
         .0482
       value
        number
         .0497
       value
        number
         .0513
       value
        number
         .0529
       value
        number
         .0545
       value
        number
         .0561
       value
        number
         .0578
       value
        number
         .0595
       value
        number
         .0612
       value
        number
         .063
       value
        number
         .0648
       value
        number
         .0666
       value
        number
         .0685
       value
        number
         .0704
       value
        number
         .0723
       value
        number
         .0742
       value
        number
         .0762
       value
        number
         .0782
       value
        number
         .0802
       value
        number
         .0823
       value
        number
         .0844
       value
        number
         .0865
       value
        number
         .0887
       value
        number
         .0908
       value
        number
         .0931
       value
        number
         .0953
       value
        number
         .0976
       value
        number
         .0999
       value
        number
         .1022
       value
        number
         .1046
       value
        number
         .107
       value
        number
         .1095
       value
        number
         .1119
       value
        number
         .1144
       value
        number
         .117
       value
        number
         .1195
       value
        number
         .1221
       value
        number
         .1248
       value
        number
         .1274
       value
        number
         .1301
       value
        number
         .1329
       value
        number
         .1356
       value
        number
         .1384
       value
        number
         .1413
       value
        number
         .1441
       value
        number
         .147
       value
        number
         .15
       value
        number
         .1529
       value
        number
         .1559
       value
        number
         .159
       value
        number
         .162
       value
        number
         .1651
       value
        number
         .1683
       value
        number
         .1714
       value
        number
         .1746
       value
        number
         .1779
       value
        number
         .1812
       value
        number
         .1845
       value
        number
         .1878
       value
        number
         .1912
       value
        number
         .1946
       value
        number
         .1981
       value
        number
         .2016
       value
        number
         .2051
       value
        number
         .2086
       value
        number
         .2122
       value
        number
         .2159
       value
        number
         .2195
       value
        number
         .2232
       value
        number
         .227
       value
        number
         .2307
       value
        number
         .2346
       value
        number
         .2384
       value
        number
         .2423
       value
        number
         .2462
       value
        number
         .2502
       value
        number
         .2542
       value
        number
         .2582
       value
        number
         .2623
       value
        number
         .2664
       value
        number
         .2705
       value
        number
         .2747
       value
        number
         .2789
       value
        number
         .2831
       value
        number
         .2874
       value
        number
         .2918
       value
        number
         .2961
       value
        number
         .3005
       value
        number
         .305
       value
        number
         .3095
       value
        number
         .314
       value
        number
         .3185
       value
        number
         .3231
       value
        number
         .3278
       value
        number
         .3325
       value
        number
         .3372
       value
        number
         .3419
       value
        number
         .3467
       value
        number
         .3515
       value
        number
         .3564
       value
        number
         .3613
       value
        number
         .3663
       value
        number
         .3712
       value
        number
         .3763
       value
        number
         .3813
       value
        number
         .3864
       value
        number
         .3916
       value
        number
         .3968
       value
        number
         .402
       value
        number
         .4072
       value
        number
         .4125
       value
        number
         .4179
       value
        number
         .4233
       value
        number
         .4287
       value
        number
         .4342
       value
        number
         .4397
       value
        number
         .4452
       value
        number
         .4508
       value
        number
         .4564
       value
        number
         .4621
       value
        number
         .4678
       value
        number
         .4735
       value
        number
         .4793
       value
        number
         .4851
       value
        number
         .491
       value
        number
         .4969
       value
        number
         .5029
       value
        number
         .5089
       value
        number
         .5149
       value
        number
         .521
       value
        number
         .5271
       value
        number
         .5333
       value
        number
         .5395
       value
        number
         .5457
       value
        number
         .552
       value
        number
         .5583
       value
        number
         .5647
       value
        number
         .5711
       value
        number
         .5776
       value
        number
         .5841
       value
        number
         .5906
       value
        number
         .5972
       value
        number
         .6038
       value
        number
         .6105
       value
        number
         .6172
       value
        number
         .624
       value
        number
         .6308
       value
        number
         .6376
       value
        number
         .6445
       value
        number
         .6514
       value
        number
         .6584
       value
        number
         .6654
       value
        number
         .6724
       value
        number
         .6795
       value
        number
         .6867
       value
        number
         .6939
       value
        number
         .7011
       value
        number
         .7084
       value
        number
         .7157
       value
        number
         .7231
       value
        number
         .7305
       value
        number
         .7379
       value
        number
         .7454
       value
        number
         .7529
       value
        number
         .7605
       value
        number
         .7682
       value
        number
         .7758
       value
        number
         .7835
       value
        number
         .7913
       value
        number
         .7991
       value
        number
         .807
       value
        number
         .8148
       value
        number
         .8228
       value
        number
         .8308
       value
        number
         .8388
       value
        number
         .8469
       value
        number
         .855
       value
        number
         .8632
       value
        number
         .8714
       value
        number
         .8796
       value
        number
         .8879
       value
        number
         .8963
       value
        number
         .9047
       value
        number
         .9131
       value
        number
         .9216
       value
        number
         .9301
       value
        number
         .9387
       value
        number
         .9473
       value
        number
         .956
       value
        number
         .9647
       value
        number
         .9734
       value
        number
         .9823
       value
        number
         .9911
       value
        number
         1
   ;
 statement
  functionDeclaration
   @function
   identifier
    color-contrast
   (
   parameters
    parameter
     value
      variableName
       $
       identifier
        background
    ,
    parameter
     variableDeclaration
      variableName
       $
       identifier
        color-contrast-dark
      :
      variableValue
       value
        variableName
         $
         identifier
          color-contrast-dark
    ,
    parameter
     variableDeclaration
      variableName
       $
       identifier
        color-contrast-light
      :
      variableValue
       value
        variableName
         $
         identifier
          color-contrast-light
    ,
    parameter
     variableDeclaration
      variableName
       $
       identifier
        min-contrast-ratio
      :
      variableValue
       value
        variableName
         $
         identifier
          min-contrast-ratio
   )
   {
   functionBody
    functionStatement
     statement
      variableDeclaration
       variableName
        $
        identifier
         foregrounds
       :
       variableValue
        listDeclaration
         listCommaSeparated
          listElement
           value
            variableName
             $
             identifier
              color-contrast-light
           ,
           value
            variableName
             $
             identifier
              color-contrast-dark
           ,
           value
            variableName
             $
             identifier
              white
           ,
           value
            variableName
             $
             identifier
              black
       ;
    functionStatement
     statement
      variableDeclaration
       variableName
        $
        identifier
         max-ratio
       :
       variableValue
        value
         number
          0
       ;
    functionStatement
     statement
      variableDeclaration
       variableName
        $
        identifier
         max-ratio-color
       :
       variableValue
        value
         identifier
          null
       ;
    functionStatement
     statement
      eachDeclaration
       @each
       variableName
        $
        identifier
         color
       in
       eachValueList
        listDeclaration
         listCommaSeparated
          listElement
           value
            variableName
             $
             identifier
              foregrounds
       block
        {
        statement
         variableDeclaration
          variableName
           $
           identifier
            contrast-ratio
          :
          variableValue
           value
            functionCall
             identifier
              contrast-ratio
             (
             parameters
              parameter
               value
                variableName
                 $
                 identifier
                  background
              ,
              parameter
               value
                variableName
                 $
                 identifier
                  color
             )
          ;
        statement
         ifDeclaration
          @if
          expression
           expressionPart
            variableName
             $
             identifier
              contrast-ratio
           operator_
            >
           expressionPart
            variableName
             $
             identifier
              min-contrast-ratio
          block
           {
           functionReturn
            @return
            expression
             expressionPart
              variableName
               $
               identifier
                color
            ;
           }
          elseIfStatement
           @else
           if
           expression
            expressionPart
             variableName
              $
              identifier
               contrast-ratio
            operator_
             >
            expressionPart
             variableName
              $
              identifier
               max-ratio
           block
            {
            statement
             variableDeclaration
              variableName
               $
               identifier
                max-ratio
              :
              variableValue
               value
                variableName
                 $
                 identifier
                  contrast-ratio
              ;
            statement
             variableDeclaration
              variableName
               $
               identifier
                max-ratio-color
              :
              variableValue
               value
                variableName
                 $
                 identifier
                  color
              ;
            }
        }
    functionStatement
     statement
      warndingDeclaration
       @warn
       "Found no color leading to #{$min-contrast-ratio}:1 contrast ratio against #{$background}..."
       ;
    functionReturn
     @return
     expression
      expressionPart
       variableName
        $
        identifier
         max-ratio-color
     ;
   }
 statement
  functionDeclaration
   @function
   identifier
    contrast-ratio
   (
   parameters
    parameter
     value
      variableName
       $
       identifier
        background
    ,
    parameter
     variableDeclaration
      variableName
       $
       identifier
        foreground
      :
      variableValue
       value
        variableName
         $
         identifier
          color-contrast-light
   )
   {
   functionBody
    functionStatement
     statement
      variableDeclaration
       variableName
        $
        identifier
         l1
       :
       variableValue
        value
         functionCall
          identifier
           luminance
          (
          parameters
           parameter
            value
             variableName
              $
              identifier
               background
          )
       ;
    functionStatement
     statement
      variableDeclaration
       variableName
        $
        identifier
         l2
       :
       variableValue
        value
         functionCall
          identifier
           luminance
          (
          parameters
           parameter
            value
             functionCall
              identifier
               opaque
              (
              parameters
               parameter
                value
                 variableName
                  $
                  identifier
                   background
               ,
               parameter
                value
                 variableName
                  $
                  identifier
                   foreground
              )
          )
       ;
    functionReturn
     @return
     expression
      expressionPart
       ifExpression
        if
        (
        expression
         expressionPart
          variableName
           $
           identifier
            l1
         operator_
          >
         expressionPart
          variableName
           $
           identifier
            l2
        ,
        value
         functionCall
          identifier
           divide
          (
          parameters
           parameter
            value
             expression
              expressionPart
               variableName
                $
                identifier
                 l1
              operator_
               +
              expressionPart
               number
                .05
           ,
           parameter
            value
             expression
              expressionPart
               variableName
                $
                identifier
                 l2
              operator_
               +
              expressionPart
               number
                .05
          )
        ,
        value
         functionCall
          identifier
           divide
          (
          parameters
           parameter
            value
             expression
              expressionPart
               variableName
                $
                identifier
                 l2
              operator_
               +
              expressionPart
               number
                .05
           ,
           parameter
            value
             expression
              expressionPart
               variableName
                $
                identifier
                 l1
              operator_
               +
              expressionPart
               number
                .05
          )
        )
     ;
   }
 statement
  functionDeclaration
   @function
   identifier
    luminance
   (
   parameters
    parameter
     value
      variableName
       $
       identifier
        color
   )
   {
   functionBody
    functionStatement
     statement
      variableDeclaration
       variableName
        $
        identifier
         rgb
       :
       variableValue
        mapDeclaration
         (
         mapEntries
          mapEntry
           mapKey
            value
             "r"
           :
           mapValue
            value
             functionCall
              identifier
               red
              (
              parameters
               parameter
                value
                 variableName
                  $
                  identifier
                   color
              )
          ,
          mapEntry
           mapKey
            value
             "g"
           :
           mapValue
            value
             functionCall
              identifier
               green
              (
              parameters
               parameter
                value
                 variableName
                  $
                  identifier
                   color
              )
          ,
          mapEntry
           mapKey
            value
             "b"
           :
           mapValue
            value
             functionCall
              identifier
               blue
              (
              parameters
               parameter
                value
                 variableName
                  $
                  identifier
                   color
              )
         )
       ;
    functionStatement
     statement
      eachDeclaration
       @each
       variableName
        $
        identifier
         name
       ,
       variableName
        $
        identifier
         value
       in
       eachValueList
        listDeclaration
         listCommaSeparated
          listElement
           value
            variableName
             $
             identifier
              rgb
       block
        {
        statement
         variableDeclaration
          variableName
           $
           identifier
            value
          :
          variableValue
           value
            expression
             expressionPart
              ifExpression
               if
               (
               expression
                expressionPart
                 functionCall
                  identifier
                   divide
                  (
                  parameters
                   parameter
                    value
                     variableName
                      $
                      identifier
                       value
                   ,
                   parameter
                    value
                     number
                      255
                  )
                operator_
                 <
                expressionPart
                 number
                  .03928
               ,
               value
                functionCall
                 identifier
                  divide
                 (
                 parameters
                  parameter
                   value
                    functionCall
                     identifier
                      divide
                     (
                     parameters
                      parameter
                       value
                        variableName
                         $
                         identifier
                          value
                      ,
                      parameter
                       value
                        number
                         255
                     )
                  ,
                  parameter
                   value
                    number
                     12.92
                 )
               ,
               value
                functionCall
                 identifier
                  nth
                 (
                 parameters
                  parameter
                   value
                    variableName
                     $
                     identifier
                      _luminance-list
                  ,
                  parameter
                   value
                    expression
                     expressionPart
                      variableName
                       $
                       identifier
                        value
                     operator_
                      +
                     expressionPart
                      number
                       1
                 )
               )
          ;
        statement
         variableDeclaration
          variableName
           $
           identifier
            rgb
          :
          variableValue
           value
            functionCall
             identifier
              map-merge
             (
             parameters
              parameter
               value
                variableName
                 $
                 identifier
                  rgb
              ,
              parameter
               mapDeclaration
                (
                mapEntries
                 mapEntry
                  mapKey
                   value
                    variableName
                     $
                     identifier
                      name
                  :
                  mapValue
                   value
                    variableName
                     $
                     identifier
                      value
                )
             )
          ;
        }
    functionReturn
     @return
     expression
      expressionPart
       (
       expression
        expressionPart
         functionCall
          identifier
           map-get
          (
          parameters
           parameter
            value
             variableName
              $
              identifier
               rgb
           ,
           parameter
            value
             "r"
          )
        operator_
         *
        expressionPart
         number
          .2126
       )
      operator_
       +
      expressionPart
       (
       expression
        expressionPart
         functionCall
          identifier
           map-get
          (
          parameters
           parameter
            value
             variableName
              $
              identifier
               rgb
           ,
           parameter
            value
             "g"
          )
        operator_
         *
        expressionPart
         number
          .7152
       )
      operator_
       +
      expressionPart
       (
       expression
        expressionPart
         functionCall
          identifier
           map-get
          (
          parameters
           parameter
            value
             variableName
              $
              identifier
               rgb
           ,
           parameter
            value
             "b"
          )
        operator_
         *
        expressionPart
         number
          .0722
       )
     ;
   }
 statement
  functionDeclaration
   @function
   identifier
    opaque
   (
   parameters
    parameter
     value
      variableName
       $
       identifier
        background
    ,
    parameter
     value
      variableName
       $
       identifier
        foreground
   )
   {
   functionBody
    functionReturn
     @return
     expression
      expressionPart
       functionCall
        identifier
         mix
        (
        parameters
         parameter
          value
           rgba
            rgba(
            value
             variableName
              $
              identifier
               foreground
            ,
            value
             number
              1
            )
         ,
         parameter
          value
           variableName
            $
            identifier
             background
         ,
         parameter
          value
           expression
            expressionPart
             functionCall
              identifier
               opacity
              (
              parameters
               parameter
                value
                 variableName
                  $
                  identifier
                   foreground
              )
            operator_
             *
            expressionPart
             number
              100
        )
     ;
   }
 statement
  functionDeclaration
   @function
   identifier
    tint-color
   (
   parameters
    parameter
     value
      variableName
       $
       identifier
        color
    ,
    parameter
     value
      variableName
       $
       identifier
        weight
   )
   {
   functionBody
    functionReturn
     @return
     expression
      expressionPart
       functionCall
        identifier
         mix
        (
        parameters
         parameter
          value
           identifier
            white
         ,
         parameter
          value
           variableName
            $
            identifier
             color
         ,
         parameter
          value
           variableName
            $
            identifier
             weight
        )
     ;
   }
 statement
  functionDeclaration
   @function
   identifier
    shade-color
   (
   parameters
    parameter
     value
      variableName
       $
       identifier
        color
    ,
    parameter
     value
      variableName
       $
       identifier
        weight
   )
   {
   functionBody
    functionReturn
     @return
     expression
      expressionPart
       functionCall
        identifier
         mix
        (
        parameters
         parameter
          value
           identifier
            black
         ,
         parameter
          value
           variableName
            $
            identifier
             color
         ,
         parameter
          value
           variableName
            $
            identifier
             weight
        )
     ;
   }
 statement
  functionDeclaration
   @function
   identifier
    shift-color
   (
   parameters
    parameter
     value
      variableName
       $
       identifier
        color
    ,
    parameter
     value
      variableName
       $
       identifier
        weight
   )
   {
   functionBody
    functionReturn
     @return
     expression
      expressionPart
       ifExpression
        if
        (
        expression
         expressionPart
          variableName
           $
           identifier
            weight
         operator_
          >
         expressionPart
          number
           0
        ,
        value
         functionCall
          identifier
           shade-color
          (
          parameters
           parameter
            value
             variableName
              $
              identifier
               color
           ,
           parameter
            value
             variableName
              $
              identifier
               weight
          )
        ,
        value
         functionCall
          identifier
           tint-color
          (
          parameters
           parameter
            value
             variableName
              $
              identifier
               color
           ,
           parameter
            value
             variableName
              plusMinus
               -
              $
              identifier
               weight
          )
        )
     ;
   }
 statement
  functionDeclaration
   @function
   identifier
    add
   (
   parameters
    parameter
     value
      variableName
       $
       identifier
        value1
    ,
    parameter
     value
      variableName
       $
       identifier
        value2
    ,
    parameter
     variableDeclaration
      variableName
       $
       identifier
        return-calc
      :
      variableValue
       value
        boolean
         true
   )
   {
   functionBody
    functionStatement
     statement
      ifDeclaration
       @if
       expression
        expressionPart
         variableName
          $
          identifier
           value1
        operator_
         =
         =
        expressionPart
         identifier
          null
       block
        {
        functionReturn
         @return
         expression
          expressionPart
           variableName
            $
            identifier
             value2
         ;
        }
    functionStatement
     statement
      ifDeclaration
       @if
       expression
        expressionPart
         variableName
          $
          identifier
           value2
        operator_
         =
         =
        expressionPart
         identifier
          null
       block
        {
        functionReturn
         @return
         expression
          expressionPart
           variableName
            $
            identifier
             value1
         ;
        }
    functionStatement
     statement
      ifDeclaration
       @if
       expression
        expressionPart
         functionCall
          identifier
           type-of
          (
          parameters
           parameter
            value
             variableName
              $
              identifier
               value1
          )
        operator_
         =
         =
        expressionPart
         identifier
          number
        operator_
         and
        expressionPart
         functionCall
          identifier
           type-of
          (
          parameters
           parameter
            value
             variableName
              $
              identifier
               value2
          )
        operator_
         =
         =
        expressionPart
         identifier
          number
        operator_
         and
        expressionPart
         functionCall
          identifier
           comparable
          (
          parameters
           parameter
            value
             variableName
              $
              identifier
               value1
           ,
           parameter
            value
             variableName
              $
              identifier
               value2
          )
       block
        {
        functionReturn
         @return
         expression
          expressionPart
           variableName
            $
            identifier
             value1
          operator_
           +
          expressionPart
           variableName
            $
            identifier
             value2
         ;
        }
    functionReturn
     @return
     expression
      expressionPart
       ifExpression
        if
        (
        expression
         expressionPart
          variableName
           $
           identifier
            return-calc
         operator_
          =
          =
         expressionPart
          boolean
           true
        ,
        value
         calc
          calc(
          expression
           expressionPart
            interpolation
             #
             {
             value
              variableName
               $
               identifier
                value1
             }
           operator_
            +
           expressionPart
            interpolation
             #
             {
             value
              variableName
               $
               identifier
                value2
             }
          )
        ,
        value
         expression
          expressionPart
           variableName
            $
            identifier
             value1
          operator_
           +
          expressionPart
           functionCall
            identifier
             unquote
            (
            parameters
             parameter
              value
               " + "
            )
          operator_
           +
          expressionPart
           variableName
            $
            identifier
             value2
        )
     ;
   }
 statement
  functionDeclaration
   @function
   identifier
    subtract
   (
   parameters
    parameter
     value
      variableName
       $
       identifier
        value1
    ,
    parameter
     value
      variableName
       $
       identifier
        value2
    ,
    parameter
     variableDeclaration
      variableName
       $
       identifier
        return-calc
      :
      variableValue
       value
        boolean
         true
   )
   {
   functionBody
    functionStatement
     statement
      ifDeclaration
       @if
       expression
        expressionPart
         variableName
          $
          identifier
           value1
        operator_
         =
         =
        expressionPart
         identifier
          null
        operator_
         and
        expressionPart
         variableName
          $
          identifier
           value2
        operator_
         =
         =
        expressionPart
         identifier
          null
       block
        {
        functionReturn
         @return
         expression
          expressionPart
           identifier
            null
         ;
        }
    functionStatement
     statement
      ifDeclaration
       @if
       expression
        expressionPart
         variableName
          $
          identifier
           value1
        operator_
         =
         =
        expressionPart
         identifier
          null
       block
        {
        functionReturn
         @return
         expression
          expressionPart
           variableName
            plusMinus
             -
            $
            identifier
             value2
         ;
        }
    functionStatement
     statement
      ifDeclaration
       @if
       expression
        expressionPart
         variableName
          $
          identifier
           value2
        operator_
         =
         =
        expressionPart
         identifier
          null
       block
        {
        functionReturn
         @return
         expression
          expressionPart
           variableName
            $
            identifier
             value1
         ;
        }
    functionStatement
     statement
      ifDeclaration
       @if
       expression
        expressionPart
         functionCall
          identifier
           type-of
          (
          parameters
           parameter
            value
             variableName
              $
              identifier
               value1
          )
        operator_
         =
         =
        expressionPart
         identifier
          number
        operator_
         and
        expressionPart
         functionCall
          identifier
           type-of
          (
          parameters
           parameter
            value
             variableName
              $
              identifier
               value2
          )
        operator_
         =
         =
        expressionPart
         identifier
          number
        operator_
         and
        expressionPart
         functionCall
          identifier
           comparable
          (
          parameters
           parameter
            value
             variableName
              $
              identifier
               value1
           ,
           parameter
            value
             variableName
              $
              identifier
               value2
          )
       block
        {
        functionReturn
         @return
         expression
          expressionPart
           variableName
            $
            identifier
             value1
          operator_
           -
          expressionPart
           variableName
            $
            identifier
             value2
         ;
        }
    functionStatement
     statement
      ifDeclaration
       @if
       expression
        expressionPart
         functionCall
          identifier
           type-of
          (
          parameters
           parameter
            value
             variableName
              $
              identifier
               value2
          )
        operator_
         !=
        expressionPart
         identifier
          number
       block
        {
        statement
         variableDeclaration
          variableName
           $
           identifier
            value2
          :
          variableValue
           value
            functionCall
             identifier
              unquote
             (
             parameters
              parameter
               listSpaceSeparated
                listElement
                 value
                  "("
                 )
                listElement
                 value
                  expression
                   expressionPart
                    variableName
                     plusMinus
                      +
                     $
                     identifier
                      value2
                   operator_
                    +
                   expressionPart
                    identifier
                     unquote
                listElement
                 (
                 value
                  ")"
             )
          ;
        }
    functionReturn
     @return
     expression
      expressionPart
       ifExpression
        if
        (
        expression
         expressionPart
          variableName
           $
           identifier
            return-calc
         operator_
          =
          =
         expressionPart
          boolean
           true
        ,
        value
         calc
          calc(
          expression
           expressionPart
            interpolation
             #
             {
             value
              variableName
               $
               identifier
                value1
             }
           operator_
            -
           expressionPart
            interpolation
             #
             {
             value
              variableName
               $
               identifier
                value2
             }
          )
        ,
        value
         expression
          expressionPart
           variableName
            $
            identifier
             value1
          operator_
           +
          expressionPart
           functionCall
            identifier
             unquote
            (
            parameters
             parameter
              value
               " - "
            )
          operator_
           +
          expressionPart
           variableName
            $
            identifier
             value2
        )
     ;
   }
 statement
  functionDeclaration
   @function
   identifier
    divide
   (
   parameters
    parameter
     value
      variableName
       $
       identifier
        dividend
    ,
    parameter
     value
      variableName
       $
       identifier
        divisor
    ,
    parameter
     variableDeclaration
      variableName
       $
       identifier
        precision
      :
      variableValue
       value
        number
         10
   )
   {
   functionBody
    functionStatement
     statement
      variableDeclaration
       variableName
        $
        identifier
         sign
       :
       variableValue
        value
         expression
          expressionPart
           ifExpression
            if
            (
            expression
             expressionPart
              variableName
               $
               identifier
                dividend
             operator_
              >
             expressionPart
              number
               0
             operator_
              and
             expressionPart
              variableName
               $
               identifier
                divisor
             operator_
              >
             expressionPart
              number
               0
             operator_
              or
             expressionPart
              variableName
               $
               identifier
                dividend
             operator_
              <
             expressionPart
              number
               0
             operator_
              and
             expressionPart
              variableName
               $
               identifier
                divisor
             operator_
              <
             expressionPart
              number
               0
            ,
            value
             number
              1
            ,
            value
             number
              plusMinus
               -
              1
            )
       ;
    functionStatement
     statement
      variableDeclaration
       variableName
        $
        identifier
         dividend
       :
       variableValue
        value
         functionCall
          identifier
           abs
          (
          parameters
           parameter
            value
             variableName
              $
              identifier
               dividend
          )
       ;
    functionStatement
     statement
      variableDeclaration
       variableName
        $
        identifier
         divisor
       :
       variableValue
        value
         functionCall
          identifier
           abs
          (
          parameters
           parameter
            value
             variableName
              $
              identifier
               divisor
          )
       ;
    functionStatement
     statement
      ifDeclaration
       @if
       expression
        expressionPart
         variableName
          $
          identifier
           dividend
        operator_
         =
         =
        expressionPart
         number
          0
       block
        {
        functionReturn
         @return
         expression
          expressionPart
           number
            0
         ;
        }
    functionStatement
     statement
      ifDeclaration
       @if
       expression
        expressionPart
         variableName
          $
          identifier
           divisor
        operator_
         =
         =
        expressionPart
         number
          0
       block
        {
        statement
         errorDeclaration
          @error
          "Cannot divide by 0"
          ;
        }
    functionStatement
     statement
      variableDeclaration
       variableName
        $
        identifier
         remainder
       :
       variableValue
        value
         variableName
          $
          identifier
           dividend
       ;
    functionStatement
     statement
      variableDeclaration
       variableName
        $
        identifier
         result
       :
       variableValue
        value
         number
          0
       ;
    functionStatement
     statement
      variableDeclaration
       variableName
        $
        identifier
         factor
       :
       variableValue
        value
         number
          10
       ;
    functionStatement
     statement
      whileDeclaration
       @while
       expression
        expressionPart
         (
         expression
          expressionPart
           variableName
            $
            identifier
             remainder
          operator_
           >
          expressionPart
           number
            0
          operator_
           and
          expressionPart
           variableName
            $
            identifier
             precision
          operator_
           >
           =
          expressionPart
           number
            0
         )
       block
        {
        statement
         variableDeclaration
          variableName
           $
           identifier
            quotient
          :
          variableValue
           value
            number
             0
          ;
        statement
         whileDeclaration
          @while
          expression
           expressionPart
            (
            expression
             expressionPart
              variableName
               $
               identifier
                remainder
             operator_
              >
              =
             expressionPart
              variableName
               $
               identifier
                divisor
            )
          block
           {
           statement
            variableDeclaration
             variableName
              $
              identifier
               remainder
             :
             variableValue
              value
               expression
                expressionPart
                 variableName
                  $
                  identifier
                   remainder
                operator_
                 -
                expressionPart
                 variableName
                  $
                  identifier
                   divisor
             ;
           statement
            variableDeclaration
             variableName
              $
              identifier
               quotient
             :
             variableValue
              value
               expression
                expressionPart
                 variableName
                  $
                  identifier
                   quotient
                operator_
                 +
                expressionPart
                 number
                  1
             ;
           }
        statement
         variableDeclaration
          variableName
           $
           identifier
            result
          :
          variableValue
           value
            expression
             expressionPart
              variableName
               $
               identifier
                result
             operator_
              *
             expressionPart
              number
               10
             operator_
              +
             expressionPart
              variableName
               $
               identifier
                quotient
          ;
        statement
         variableDeclaration
          variableName
           $
           identifier
            factor
          :
          variableValue
           value
            expression
             expressionPart
              variableName
               $
               identifier
                factor
             operator_
              *
             expressionPart
              number
               .1
          ;
        statement
         variableDeclaration
          variableName
           $
           identifier
            remainder
          :
          variableValue
           value
            expression
             expressionPart
              variableName
               $
               identifier
                remainder
             operator_
              *
             expressionPart
              number
               10
          ;
        statement
         variableDeclaration
          variableName
           $
           identifier
            precision
          :
          variableValue
           value
            expression
             expressionPart
              variableName
               $
               identifier
                precision
             operator_
              -
             expressionPart
              number
               1
          ;
        statement
         ifDeclaration
          @if
          expression
           expressionPart
            (
            expression
             expressionPart
              variableName
               $
               identifier
                precision
             operator_
              <
             expressionPart
              number
               0
             operator_
              and
             expressionPart
              variableName
               $
               identifier
                remainder
             operator_
              >
              =
             expressionPart
              variableName
               $
               identifier
                divisor
             operator_
              *
             expressionPart
              number
               5
            )
          block
           {
           statement
            variableDeclaration
             variableName
              $
              identifier
               result
             :
             variableValue
              value
               expression
                expressionPart
                 variableName
                  $
                  identifier
                   result
                operator_
                 +
                expressionPart
                 number
                  1
             ;
           }
        }
    functionStatement
     statement
      variableDeclaration
       variableName
        $
        identifier
         result
       :
       variableValue
        value
         expression
          expressionPart
           variableName
            $
            identifier
             result
          operator_
           *
          expressionPart
           variableName
            $
            identifier
             factor
          operator_
           *
          expressionPart
           variableName
            $
            identifier
             sign
       ;
    functionStatement
     statement
      variableDeclaration
       variableName
        $
        identifier
         dividend-unit
       :
       variableValue
        value
         functionCall
          identifier
           unit
          (
          parameters
           parameter
            value
             variableName
              $
              identifier
               dividend
          )
       ;
    functionStatement
     statement
      variableDeclaration
       variableName
        $
        identifier
         divisor-unit
       :
       variableValue
        value
         functionCall
          identifier
           unit
          (
          parameters
           parameter
            value
             variableName
              $
              identifier
               divisor
          )
       ;
    functionStatement
     statement
      variableDeclaration
       variableName
        $
        identifier
         unit-map
       :
       variableValue
        mapDeclaration
         (
         mapEntries
          mapEntry
           mapKey
            value
             "px"
           :
           mapValue
            value
             unit
              length
               1
               px
          ,
          mapEntry
           mapKey
            value
             "rem"
           :
           mapValue
            value
             unit
              length
               1
               rem
          ,
          mapEntry
           mapKey
            value
             "em"
           :
           mapValue
            value
             unit
              length
               1
               em
          ,
          mapEntry
           mapKey
            value
             "%"
           :
           mapValue
            value
             unit
              percentage
               1
               %
         )
       ;
    functionStatement
     statement
      ifDeclaration
       @if
       expression
        expressionPart
         (
         expression
          expressionPart
           variableName
            $
            identifier
             dividend-unit
          operator_
           !=
          expressionPart
           variableName
            $
            identifier
             divisor-unit
          operator_
           and
          expressionPart
           functionCall
            identifier
             map-has-key
            (
            parameters
             parameter
              value
               variableName
                $
                identifier
                 unit-map
             ,
             parameter
              value
               variableName
                $
                identifier
                 dividend-unit
            )
         )
       block
        {
        statement
         variableDeclaration
          variableName
           $
           identifier
            result
          :
          variableValue
           value
            expression
             expressionPart
              variableName
               $
               identifier
                result
             operator_
              *
             expressionPart
              functionCall
               identifier
                map-get
               (
               parameters
                parameter
                 value
                  variableName
                   $
                   identifier
                    unit-map
                ,
                parameter
                 value
                  variableName
                   $
                   identifier
                    dividend-unit
               )
          ;
        }
    functionReturn
     @return
     expression
      expressionPart
       variableName
        $
        identifier
         result
     ;
   }
 <EOF>
