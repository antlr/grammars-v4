{\rtf1\ansi\ansicpg1252\cocoartf1347\cocoasubrtf570
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 LucidaGrande;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww23740\viewh23620\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs30 \cf0 Some notes on issues am finding with the official grammar as I developed the executable grammar.\
\
# ambiguities\
\
primary-expression 
\f1 \uc0\u8594 
\f0  implicit-member-expression\'ad\
implicit-member-expression 
\f1 \uc0\u8594 
\f0  .\'ad identifier\'ad\
\
but postfix_expression can match as explicit member too.\
\
pattern 
\f1 \uc0\u8594 
\f0  wildcard-pattern\'adtype-annotation\'adopt\'ad\
pattern 
\f1 \uc0\u8594 
\f0  identifier-pattern\'adtype-annotation\'adopt\'ad <- should be not optional as expr case handles\
pattern 
\f1 \uc0\u8594 
\f0  value-binding-pattern\'ad\
pattern 
\f1 \uc0\u8594 
\f0  tuple-pattern\'adtype-annotation\'adopt\'ad\
pattern 
\f1 \uc0\u8594 
\f0  enum-case-pattern\'ad\
pattern 
\f1 \uc0\u8594 
\f0  type-casting-pattern\'ad\
pattern 
\f1 \uc0\u8594 
\f0  expression-pattern\'ad\
\
5/29/15: trying now with ambig tree viewer in 1.7 plugin beta.\
\
Couldn't figure out why 2.0 after '<' was an error token:\
\
class T \{\
	func foo() \{\
		for var i:CGFloat = 0; i < 2.0 + self.frame.size.width / ( groundTexture.size().width * 2.0 ); ++i \{\
			var sprite = SKSpriteNode(texture: groundTexture)\
		\}\
	\}\
\}\
\
parse tree shows primary_expression:1 \
\
primary_expression\
 : identifier generic_argument_clause?\
\
that ain't right. \
\
wait. the < has no type in popup.  Ah. that means < should be &lt; bug in tool. hang on.\
\
Now it's clear that < should be Operator.\
\
ok, now for ambiguity upon "= i class" in above snippet. ambig for ()* decision.\
\
expression : prefix_expression binary_expression* ;\
\
hard to handle since it falls off end of expr. it's ambig to match just b to prefix_expression and fall out or match all of b=i.\
 Two big trees appear but diff shows just a few nodes!\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\fs24 \cf0 {{\NeXTGraphic Pasted Graphic 1.tiff \width9920 \height8060
}¬}\
\
versus\

\fs26 \

\fs24 {{\NeXTGraphic Pasted Graphic 2.tiff \width8600 \height7600
}¬}\
\
first interp (chosen) says b = i is an assignment expr.\
\
Another ambig shows I should reorder\
\
self_expression\
 : 'self'\
 | 'self' '.' identifier\
 | 'self' '[' expression ']'\
 | 'self' '.' 'init'\
 ;\
\
so 'self' is last, matching as much as we can here.\
\
{{\NeXTGraphic Pasted Graphic 3.tiff \width15540 \height8860
}¬}\
\
next, (texture: groundTexture) can match two interps.\
\
{{\NeXTGraphic Pasted Graphic 4.tiff \width29500 \height19580
}¬}\
\
it chooses postfix_expr:function_call_expression over postfix_expr:function_call_expression:primary, which is good as the (...) shouldn't be interpreted as another statement. the precedence makes it seem first alt, primary, should be taken but it's not just precedence taken into consideration. it's that f(...) matches the rule by taking the postfix_expr:function_call_expression option.}