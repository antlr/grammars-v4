document
 header
  namespace_
   namespace
   c_glib
   TTest
 definition
  enum_rule
   enum
   MyEnum1
   {
   enum_field
    ME1_0
    =
    integer
     0
    list_separator
     ,
   enum_field
    ME1_1
    =
    integer
     1
    list_separator
     ,
   enum_field
    ME1_2
    list_separator
     ,
   enum_field
    ME1_3
    list_separator
     ,
   enum_field
    ME1_5
    =
    integer
     5
    list_separator
     ,
   enum_field
    ME1_6
    list_separator
     ,
   }
 definition
  enum_rule
   enum
   MyEnum2
   {
   enum_field
    ME2_0
    list_separator
     ,
   enum_field
    ME2_1
    list_separator
     ,
   enum_field
    ME2_2
    list_separator
     ,
   }
 definition
  enum_rule
   enum
   MyEnum2_again
   {
   enum_field
    ME0_1
    list_separator
     ,
   enum_field
    ME1_1
    list_separator
     ,
   enum_field
    ME2_1
    list_separator
     ,
   enum_field
    ME3_1
    list_separator
     ,
   }
 definition
  enum_rule
   enum
   MyEnum3
   {
   enum_field
    ME3_0
    list_separator
     ,
   enum_field
    ME3_1
    list_separator
     ,
   enum_field
    ME3_N2
    =
    integer
     -2
    list_separator
     ,
   enum_field
    ME3_N1
    list_separator
     ,
   enum_field
    ME3_D0
    list_separator
     ,
   enum_field
    ME3_D1
    list_separator
     ,
   enum_field
    ME3_9
    =
    integer
     9
    list_separator
     ,
   enum_field
    ME3_10
    list_separator
     ,
   }
 definition
  enum_rule
   enum
   MyEnum4
   {
   enum_field
    ME4_A
    =
    integer
     0x7ffffffd
   enum_field
    ME4_B
   enum_field
    ME4_C
   }
 definition
  enum_rule
   enum
   MyEnum5
   {
   enum_field
    e1
   enum_field
    e2
    =
    integer
     42
   }
 definition
  enum_rule
   enum
   MyEnumWithCustomOstream
   {
   enum_field
    custom1
    =
    integer
     1
    list_separator
     ,
   enum_field
    CustoM2
   }
   type_annotations
    (
    type_annotation
     cpp.customostream
    )
 definition
  struct_
   struct
   MyStruct
   {
   field
    field_id
     integer
      1
     :
    field_type
     MyEnum2
    me2_2
    =
    const_value
     MyEnum1.ME2_2
   field
    field_id
     integer
      2
     :
    field_type
     MyEnum3
    me3_n2
    =
    const_value
     MyEnum3.ME3_N2
   field
    field_id
     integer
      3
     :
    field_type
     MyEnum3
    me3_d1
    =
    const_value
     MyEnum3.ME3_D1
   }
 definition
  struct_
   struct
   EnumTestStruct
   {
   field
    field_id
     integer
      1
     :
    field_type
     MyEnum3
    a_enum
    list_separator
     ;
   field
    field_id
     integer
      2
     :
    field_type
     container_type
      list_type
       list
       <
       field_type
        MyEnum3
       >
    enum_list
    list_separator
     ;
   field
    field_id
     integer
      3
     :
    field_type
     container_type
      set_type
       set
       <
       field_type
        MyEnum3
       >
    enum_set
    list_separator
     ;
   field
    field_id
     integer
      4
     :
    field_type
     container_type
      map_type
       map
       <
       field_type
        MyEnum3
       ,
       field_type
        MyEnum3
       >
    enum_enum_map
    list_separator
     ;
   field
    field_id
     integer
      44
     :
    field_type
     container_type
      map_type
       map
       <
       field_type
        container_type
         list_type
          list
          <
          field_type
           MyEnum3
          >
         type_annotations
          (
          type_annotation
           python.immutable
           =
           annotation_value
            ""
          )
       ,
       field_type
        MyEnum3
       >
    list_enum_map
    list_separator
     ;
   field
    field_id
     integer
      45
     :
    field_type
     container_type
      map_type
       map
       <
       field_type
        container_type
         set_type
          set
          <
          field_type
           MyEnum3
          >
         type_annotations
          (
          type_annotation
           python.immutable
           =
           annotation_value
            ""
          )
       ,
       field_type
        MyEnum3
       >
    set_enum_map
    list_separator
     ;
   field
    field_id
     integer
      46
     :
    field_type
     container_type
      map_type
       map
       <
       field_type
        container_type
         map_type
          map
          <
          field_type
           MyEnum3
          ,
          field_type
           MyEnum3
          >
         type_annotations
          (
          type_annotation
           python.immutable
           =
           annotation_value
            ""
          )
       ,
       field_type
        MyEnum3
       >
    map_enum_map
    list_separator
     ;
   field
    field_id
     integer
      47
     :
    field_type
     container_type
      map_type
       map
       <
       field_type
        MyEnum3
       ,
       field_type
        container_type
         map_type
          map
          <
          field_type
           MyEnum3
          ,
          field_type
           MyEnum3
          >
       >
    enum_map_map
    list_separator
     ;
   field
    field_id
     integer
      48
     :
    field_type
     container_type
      map_type
       map
       <
       field_type
        MyEnum3
       ,
       field_type
        container_type
         set_type
          set
          <
          field_type
           MyEnum3
          >
       >
    enum_set_map
    list_separator
     ;
   field
    field_id
     integer
      49
     :
    field_type
     container_type
      map_type
       map
       <
       field_type
        MyEnum3
       ,
       field_type
        container_type
         list_type
          list
          <
          field_type
           MyEnum3
          >
       >
    enum_list_map
    list_separator
     ;
   }
 definition
  const_rule
   const
   field_type
    EnumTestStruct
   ENUM_TEST
   =
   const_value
    const_map
     {
     const_map_entry
      const_value
       'a_enum'
      :
      const_value
       MyEnum3.ME3_D1
      list_separator
       ,
     const_map_entry
      const_value
       'enum_list'
      :
      const_value
       const_list
        [
        const_value
         MyEnum3.ME3_D1
        list_separator
         ,
        const_value
         MyEnum3.ME3_0
        list_separator
         ,
        const_value
         MyEnum3.ME3_N2
        ]
      list_separator
       ,
     const_map_entry
      const_value
       'enum_set'
      :
      const_value
       const_list
        [
        const_value
         MyEnum3.ME3_D1
        list_separator
         ,
        const_value
         MyEnum3.ME3_N1
        ]
      list_separator
       ,
     const_map_entry
      const_value
       'enum_enum_map'
      :
      const_value
       const_map
        {
        const_map_entry
         const_value
          MyEnum3.ME3_D1
         :
         const_value
          MyEnum3.ME3_0
         list_separator
          ,
        const_map_entry
         const_value
          MyEnum3.ME3_0
         :
         const_value
          MyEnum3.ME3_D1
        }
      list_separator
       ,
     const_map_entry
      const_value
       'list_enum_map'
      :
      const_value
       const_map
        {
        const_map_entry
         const_value
          const_list
           [
           const_value
            MyEnum3.ME3_D1
           list_separator
            ,
           const_value
            MyEnum3.ME3_0
           ]
         :
         const_value
          MyEnum3.ME3_0
         list_separator
          ,
        const_map_entry
         const_value
          const_list
           [
           const_value
            MyEnum3.ME3_D1
           ]
         :
         const_value
          MyEnum3.ME3_0
         list_separator
          ,
        const_map_entry
         const_value
          const_list
           [
           const_value
            MyEnum3.ME3_0
           ]
         :
         const_value
          MyEnum3.ME3_D1
        }
      list_separator
       ,
     const_map_entry
      const_value
       'set_enum_map'
      :
      const_value
       const_map
        {
        const_map_entry
         const_value
          const_list
           [
           const_value
            MyEnum3.ME3_D1
           list_separator
            ,
           const_value
            MyEnum3.ME3_0
           ]
         :
         const_value
          MyEnum3.ME3_0
         list_separator
          ,
        const_map_entry
         const_value
          const_list
           [
           const_value
            MyEnum3.ME3_D1
           ]
         :
         const_value
          MyEnum3.ME3_0
        }
      list_separator
       ,
     const_map_entry
      const_value
       'map_enum_map'
      :
      const_value
       const_map
        {
        const_map_entry
         const_value
          const_map
           {
           const_map_entry
            const_value
             MyEnum3.ME3_N1
            :
            const_value
             MyEnum3.ME3_10
           }
         :
         const_value
          MyEnum3.ME3_1
        }
      list_separator
       ,
     const_map_entry
      const_value
       'enum_map_map'
      :
      const_value
       const_map
        {
        const_map_entry
         const_value
          MyEnum3.ME3_N1
         :
         const_value
          const_map
           {
           const_map_entry
            const_value
             MyEnum3.ME3_D1
            :
            const_value
             MyEnum3.ME3_D1
           }
        }
      list_separator
       ,
     const_map_entry
      const_value
       'enum_set_map'
      :
      const_value
       const_map
        {
        const_map_entry
         const_value
          MyEnum3.ME3_N2
         :
         const_value
          const_list
           [
           const_value
            MyEnum3.ME3_D1
           list_separator
            ,
           const_value
            MyEnum3.ME3_N1
           ]
         list_separator
          ,
        const_map_entry
         const_value
          MyEnum3.ME3_10
         :
         const_value
          const_list
           [
           const_value
            MyEnum3.ME3_D1
           list_separator
            ,
           const_value
            MyEnum3.ME3_N1
           ]
        }
      list_separator
       ,
     const_map_entry
      const_value
       'enum_list_map'
      :
      const_value
       const_map
        {
        const_map_entry
         const_value
          MyEnum3.ME3_D1
         :
         const_value
          const_list
           [
           const_value
            MyEnum3.ME3_10
           ]
         list_separator
          ,
        const_map_entry
         const_value
          MyEnum3.ME3_0
         :
         const_value
          const_list
           [
           const_value
            MyEnum3.ME3_9
           list_separator
            ,
           const_value
            MyEnum3.ME3_10
           ]
        }
      list_separator
       ,
     }
 definition
  service
   service
   EnumTestService
   {
   function_
    function_type
     field_type
      MyEnum3
    testEnum
    (
    field
     field_id
      integer
       1
      :
     field_type
      MyEnum3
     enum1
    )
    list_separator
     ,
   function_
    function_type
     field_type
      container_type
       list_type
        list
        <
        field_type
         MyEnum3
        >
    testEnumList
    (
    field
     field_id
      integer
       1
      :
     field_type
      container_type
       list_type
        list
        <
        field_type
         MyEnum3
        >
     enum1
    )
    list_separator
     ,
   function_
    function_type
     field_type
      container_type
       set_type
        set
        <
        field_type
         MyEnum3
        >
    testEnumSet
    (
    field
     field_id
      integer
       1
      :
     field_type
      container_type
       set_type
        set
        <
        field_type
         MyEnum3
        >
     enum1
    )
    list_separator
     ,
   function_
    function_type
     field_type
      container_type
       map_type
        map
        <
        field_type
         MyEnum3
        ,
        field_type
         MyEnum3
        >
    testEnumMap
    (
    field
     field_id
      integer
       1
      :
     field_type
      container_type
       map_type
        map
        <
        field_type
         MyEnum3
        ,
        field_type
         MyEnum3
        >
     enum1
    )
    list_separator
     ,
   function_
    function_type
     field_type
      EnumTestStruct
    testEnumStruct
    (
    field
     field_id
      integer
       1
      :
     field_type
      EnumTestStruct
     enum1
    )
    list_separator
     ,
   }
 <EOF>
