document
 header
  namespace_
   namespace
   c_glib
   TTest
 header
  namespace_
   namespace
   cpp
   thrift.test.debug
 header
  namespace_
   namespace
   java
   thrift.test
 header
  namespace_
   namespace
   rb
   thrift.test
 definition
  struct_
   struct
   Doubles
   {
   field
    field_id
     integer
      1
     :
    field_type
     base_type
      real_base_type
       double
    nan
    list_separator
     ,
   field
    field_id
     integer
      2
     :
    field_type
     base_type
      real_base_type
       double
    inf
    list_separator
     ,
   field
    field_id
     integer
      3
     :
    field_type
     base_type
      real_base_type
       double
    neginf
    list_separator
     ,
   field
    field_id
     integer
      4
     :
    field_type
     base_type
      real_base_type
       double
    repeating
    list_separator
     ,
   field
    field_id
     integer
      5
     :
    field_type
     base_type
      real_base_type
       double
    big
    list_separator
     ,
   field
    field_id
     integer
      6
     :
    field_type
     base_type
      real_base_type
       double
    tiny
    list_separator
     ,
   field
    field_id
     integer
      7
     :
    field_type
     base_type
      real_base_type
       double
    zero
    list_separator
     ,
   field
    field_id
     integer
      8
     :
    field_type
     base_type
      real_base_type
       double
    negzero
    list_separator
     ,
   }
 definition
  struct_
   struct
   OneOfEach
   {
   field
    field_id
     integer
      1
     :
    field_type
     base_type
      real_base_type
       bool
    im_true
    list_separator
     ,
   field
    field_id
     integer
      2
     :
    field_type
     base_type
      real_base_type
       bool
    im_false
    list_separator
     ,
   field
    field_id
     integer
      3
     :
    field_type
     i8
    a_bite
    =
    const_value
     integer
      0x7f
    list_separator
     ,
   field
    field_id
     integer
      4
     :
    field_type
     base_type
      real_base_type
       i16
    integer16
    =
    const_value
     integer
      0x7fff
    list_separator
     ,
   field
    field_id
     integer
      5
     :
    field_type
     base_type
      real_base_type
       i32
    integer32
    list_separator
     ,
   field
    field_id
     integer
      6
     :
    field_type
     base_type
      real_base_type
       i64
    integer64
    =
    const_value
     integer
      10000000000
    list_separator
     ,
   field
    field_id
     integer
      7
     :
    field_type
     base_type
      real_base_type
       double
    double_precision
    list_separator
     ,
   field
    field_id
     integer
      8
     :
    field_type
     base_type
      real_base_type
       string
    some_characters
    list_separator
     ,
   field
    field_id
     integer
      9
     :
    field_type
     base_type
      real_base_type
       string
    zomg_unicode
    list_separator
     ,
   field
    field_id
     integer
      10
     :
    field_type
     base_type
      real_base_type
       bool
    what_who
    list_separator
     ,
   field
    field_id
     integer
      11
     :
    field_type
     base_type
      real_base_type
       binary
    base64
    list_separator
     ,
   field
    field_id
     integer
      12
     :
    field_type
     container_type
      list_type
       list
       <
       field_type
        i8
       >
    byte_list
    =
    const_value
     const_list
      [
      const_value
       integer
        1
      list_separator
       ,
      const_value
       integer
        2
      list_separator
       ,
      const_value
       integer
        3
      ]
    list_separator
     ,
   field
    field_id
     integer
      13
     :
    field_type
     container_type
      list_type
       list
       <
       field_type
        base_type
         real_base_type
          i16
       >
    i16_list
    =
    const_value
     const_list
      [
      const_value
       integer
        1
      list_separator
       ,
      const_value
       integer
        2
      list_separator
       ,
      const_value
       integer
        3
      ]
    list_separator
     ,
   field
    field_id
     integer
      14
     :
    field_type
     container_type
      list_type
       list
       <
       field_type
        base_type
         real_base_type
          i64
       >
    i64_list
    =
    const_value
     const_list
      [
      const_value
       integer
        1
      list_separator
       ,
      const_value
       integer
        2
      list_separator
       ,
      const_value
       integer
        3
      ]
   }
 definition
  struct_
   struct
   Bonk
   {
   field
    field_id
     integer
      1
     :
    field_type
     base_type
      real_base_type
       i32
    type
    list_separator
     ,
   field
    field_id
     integer
      2
     :
    field_type
     base_type
      real_base_type
       string
    message
    list_separator
     ,
   }
 definition
  struct_
   struct
   Nesting
   {
   field
    field_id
     integer
      1
     :
    field_type
     Bonk
    my_bonk
    list_separator
     ,
   field
    field_id
     integer
      2
     :
    field_type
     OneOfEach
    my_ooe
    list_separator
     ,
   }
 definition
  struct_
   struct
   HolyMoley
   {
   field
    field_id
     integer
      1
     :
    field_type
     container_type
      list_type
       list
       <
       field_type
        OneOfEach
       >
    big
    list_separator
     ,
   field
    field_id
     integer
      2
     :
    field_type
     container_type
      set_type
       set
       <
       field_type
        container_type
         list_type
          list
          <
          field_type
           base_type
            real_base_type
             string
          >
         type_annotations
          (
          type_annotation
           python.immutable
           =
           annotation_value
            ""
          )
       >
    contain
    list_separator
     ,
   field
    field_id
     integer
      3
     :
    field_type
     container_type
      map_type
       map
       <
       field_type
        base_type
         real_base_type
          string
       ,
       field_type
        container_type
         list_type
          list
          <
          field_type
           Bonk
          >
       >
    bonks
    list_separator
     ,
   }
 definition
  struct_
   struct
   Backwards
   {
   field
    field_id
     integer
      2
     :
    field_type
     base_type
      real_base_type
       i32
    first_tag2
    list_separator
     ,
   field
    field_id
     integer
      1
     :
    field_type
     base_type
      real_base_type
       i32
    second_tag1
    list_separator
     ,
   }
 definition
  struct_
   struct
   Empty
   {
   }
   type_annotations
    (
    type_annotation
     python.immutable
     =
     annotation_value
      ""
     list_separator
      ,
    )
 definition
  struct_
   struct
   Wrapper
   {
   field
    field_id
     integer
      1
     :
    field_type
     Empty
    foo
   }
   type_annotations
    (
    type_annotation
     python.immutable
     =
     annotation_value
      ""
     list_separator
      ,
    )
 definition
  struct_
   struct
   RandomStuff
   {
   field
    field_id
     integer
      1
     :
    field_type
     base_type
      real_base_type
       i32
    a
    list_separator
     ,
   field
    field_id
     integer
      2
     :
    field_type
     base_type
      real_base_type
       i32
    b
    list_separator
     ,
   field
    field_id
     integer
      3
     :
    field_type
     base_type
      real_base_type
       i32
    c
    list_separator
     ,
   field
    field_id
     integer
      4
     :
    field_type
     base_type
      real_base_type
       i32
    d
    list_separator
     ,
   field
    field_id
     integer
      5
     :
    field_type
     container_type
      list_type
       list
       <
       field_type
        base_type
         real_base_type
          i32
       >
    myintlist
    list_separator
     ,
   field
    field_id
     integer
      6
     :
    field_type
     container_type
      map_type
       map
       <
       field_type
        base_type
         real_base_type
          i32
       ,
       field_type
        Wrapper
       >
    maps
    list_separator
     ,
   field
    field_id
     integer
      7
     :
    field_type
     base_type
      real_base_type
       i64
    bigint
    list_separator
     ,
   field
    field_id
     integer
      8
     :
    field_type
     base_type
      real_base_type
       double
    triple
    list_separator
     ,
   }
 definition
  struct_
   struct
   Base64
   {
   field
    field_id
     integer
      1
     :
    field_type
     base_type
      real_base_type
       i32
    a
    list_separator
     ,
   field
    field_id
     integer
      2
     :
    field_type
     base_type
      real_base_type
       binary
    b1
    list_separator
     ,
   field
    field_id
     integer
      3
     :
    field_type
     base_type
      real_base_type
       binary
    b2
    list_separator
     ,
   field
    field_id
     integer
      4
     :
    field_type
     base_type
      real_base_type
       binary
    b3
    list_separator
     ,
   field
    field_id
     integer
      5
     :
    field_type
     base_type
      real_base_type
       binary
    b4
    list_separator
     ,
   field
    field_id
     integer
      6
     :
    field_type
     base_type
      real_base_type
       binary
    b5
    list_separator
     ,
   field
    field_id
     integer
      7
     :
    field_type
     base_type
      real_base_type
       binary
    b6
    list_separator
     ,
   }
 definition
  struct_
   struct
   CompactProtoTestStruct
   {
   field
    field_id
     integer
      1
     :
    field_type
     i8
    a_byte
    list_separator
     ;
   field
    field_id
     integer
      2
     :
    field_type
     base_type
      real_base_type
       i16
    a_i16
    list_separator
     ;
   field
    field_id
     integer
      3
     :
    field_type
     base_type
      real_base_type
       i32
    a_i32
    list_separator
     ;
   field
    field_id
     integer
      4
     :
    field_type
     base_type
      real_base_type
       i64
    a_i64
    list_separator
     ;
   field
    field_id
     integer
      5
     :
    field_type
     base_type
      real_base_type
       double
    a_double
    list_separator
     ;
   field
    field_id
     integer
      6
     :
    field_type
     base_type
      real_base_type
       string
    a_string
    list_separator
     ;
   field
    field_id
     integer
      7
     :
    field_type
     base_type
      real_base_type
       binary
    a_binary
    list_separator
     ;
   field
    field_id
     integer
      8
     :
    field_type
     base_type
      real_base_type
       bool
    true_field
    list_separator
     ;
   field
    field_id
     integer
      9
     :
    field_type
     base_type
      real_base_type
       bool
    false_field
    list_separator
     ;
   field
    field_id
     integer
      10
     :
    field_type
     Empty
    empty_struct_field
    list_separator
     ;
   field
    field_id
     integer
      11
     :
    field_type
     container_type
      list_type
       list
       <
       field_type
        i8
       >
    byte_list
    list_separator
     ;
   field
    field_id
     integer
      12
     :
    field_type
     container_type
      list_type
       list
       <
       field_type
        base_type
         real_base_type
          i16
       >
    i16_list
    list_separator
     ;
   field
    field_id
     integer
      13
     :
    field_type
     container_type
      list_type
       list
       <
       field_type
        base_type
         real_base_type
          i32
       >
    i32_list
    list_separator
     ;
   field
    field_id
     integer
      14
     :
    field_type
     container_type
      list_type
       list
       <
       field_type
        base_type
         real_base_type
          i64
       >
    i64_list
    list_separator
     ;
   field
    field_id
     integer
      15
     :
    field_type
     container_type
      list_type
       list
       <
       field_type
        base_type
         real_base_type
          double
       >
    double_list
    list_separator
     ;
   field
    field_id
     integer
      16
     :
    field_type
     container_type
      list_type
       list
       <
       field_type
        base_type
         real_base_type
          string
       >
    string_list
    list_separator
     ;
   field
    field_id
     integer
      17
     :
    field_type
     container_type
      list_type
       list
       <
       field_type
        base_type
         real_base_type
          binary
       >
    binary_list
    list_separator
     ;
   field
    field_id
     integer
      18
     :
    field_type
     container_type
      list_type
       list
       <
       field_type
        base_type
         real_base_type
          bool
       >
    boolean_list
    list_separator
     ;
   field
    field_id
     integer
      19
     :
    field_type
     container_type
      list_type
       list
       <
       field_type
        Empty
       >
    struct_list
    list_separator
     ;
   field
    field_id
     integer
      20
     :
    field_type
     container_type
      set_type
       set
       <
       field_type
        i8
       >
    byte_set
    list_separator
     ;
   field
    field_id
     integer
      21
     :
    field_type
     container_type
      set_type
       set
       <
       field_type
        base_type
         real_base_type
          i16
       >
    i16_set
    list_separator
     ;
   field
    field_id
     integer
      22
     :
    field_type
     container_type
      set_type
       set
       <
       field_type
        base_type
         real_base_type
          i32
       >
    i32_set
    list_separator
     ;
   field
    field_id
     integer
      23
     :
    field_type
     container_type
      set_type
       set
       <
       field_type
        base_type
         real_base_type
          i64
       >
    i64_set
    list_separator
     ;
   field
    field_id
     integer
      24
     :
    field_type
     container_type
      set_type
       set
       <
       field_type
        base_type
         real_base_type
          double
       >
    double_set
    list_separator
     ;
   field
    field_id
     integer
      25
     :
    field_type
     container_type
      set_type
       set
       <
       field_type
        base_type
         real_base_type
          string
       >
    string_set
    list_separator
     ;
   field
    field_id
     integer
      26
     :
    field_type
     container_type
      set_type
       set
       <
       field_type
        base_type
         real_base_type
          binary
       >
    binary_set
    list_separator
     ;
   field
    field_id
     integer
      27
     :
    field_type
     container_type
      set_type
       set
       <
       field_type
        base_type
         real_base_type
          bool
       >
    boolean_set
    list_separator
     ;
   field
    field_id
     integer
      28
     :
    field_type
     container_type
      set_type
       set
       <
       field_type
        Empty
       >
    struct_set
    list_separator
     ;
   field
    field_id
     integer
      29
     :
    field_type
     container_type
      map_type
       map
       <
       field_type
        i8
       ,
       field_type
        i8
       >
    byte_byte_map
    list_separator
     ;
   field
    field_id
     integer
      30
     :
    field_type
     container_type
      map_type
       map
       <
       field_type
        base_type
         real_base_type
          i16
       ,
       field_type
        i8
       >
    i16_byte_map
    list_separator
     ;
   field
    field_id
     integer
      31
     :
    field_type
     container_type
      map_type
       map
       <
       field_type
        base_type
         real_base_type
          i32
       ,
       field_type
        i8
       >
    i32_byte_map
    list_separator
     ;
   field
    field_id
     integer
      32
     :
    field_type
     container_type
      map_type
       map
       <
       field_type
        base_type
         real_base_type
          i64
       ,
       field_type
        i8
       >
    i64_byte_map
    list_separator
     ;
   field
    field_id
     integer
      33
     :
    field_type
     container_type
      map_type
       map
       <
       field_type
        base_type
         real_base_type
          double
       ,
       field_type
        i8
       >
    double_byte_map
    list_separator
     ;
   field
    field_id
     integer
      34
     :
    field_type
     container_type
      map_type
       map
       <
       field_type
        base_type
         real_base_type
          string
       ,
       field_type
        i8
       >
    string_byte_map
    list_separator
     ;
   field
    field_id
     integer
      35
     :
    field_type
     container_type
      map_type
       map
       <
       field_type
        base_type
         real_base_type
          binary
       ,
       field_type
        i8
       >
    binary_byte_map
    list_separator
     ;
   field
    field_id
     integer
      36
     :
    field_type
     container_type
      map_type
       map
       <
       field_type
        base_type
         real_base_type
          bool
       ,
       field_type
        i8
       >
    boolean_byte_map
    list_separator
     ;
   field
    field_id
     integer
      37
     :
    field_type
     container_type
      map_type
       map
       <
       field_type
        i8
       ,
       field_type
        base_type
         real_base_type
          i16
       >
    byte_i16_map
    list_separator
     ;
   field
    field_id
     integer
      38
     :
    field_type
     container_type
      map_type
       map
       <
       field_type
        i8
       ,
       field_type
        base_type
         real_base_type
          i32
       >
    byte_i32_map
    list_separator
     ;
   field
    field_id
     integer
      39
     :
    field_type
     container_type
      map_type
       map
       <
       field_type
        i8
       ,
       field_type
        base_type
         real_base_type
          i64
       >
    byte_i64_map
    list_separator
     ;
   field
    field_id
     integer
      40
     :
    field_type
     container_type
      map_type
       map
       <
       field_type
        i8
       ,
       field_type
        base_type
         real_base_type
          double
       >
    byte_double_map
    list_separator
     ;
   field
    field_id
     integer
      41
     :
    field_type
     container_type
      map_type
       map
       <
       field_type
        i8
       ,
       field_type
        base_type
         real_base_type
          string
       >
    byte_string_map
    list_separator
     ;
   field
    field_id
     integer
      42
     :
    field_type
     container_type
      map_type
       map
       <
       field_type
        i8
       ,
       field_type
        base_type
         real_base_type
          binary
       >
    byte_binary_map
    list_separator
     ;
   field
    field_id
     integer
      43
     :
    field_type
     container_type
      map_type
       map
       <
       field_type
        i8
       ,
       field_type
        base_type
         real_base_type
          bool
       >
    byte_boolean_map
    list_separator
     ;
   field
    field_id
     integer
      44
     :
    field_type
     container_type
      map_type
       map
       <
       field_type
        container_type
         list_type
          list
          <
          field_type
           i8
          >
         type_annotations
          (
          type_annotation
           python.immutable
           =
           annotation_value
            ""
          )
       ,
       field_type
        i8
       >
    list_byte_map
    list_separator
     ;
   field
    field_id
     integer
      45
     :
    field_type
     container_type
      map_type
       map
       <
       field_type
        container_type
         set_type
          set
          <
          field_type
           i8
          >
         type_annotations
          (
          type_annotation
           python.immutable
           =
           annotation_value
            ""
          )
       ,
       field_type
        i8
       >
    set_byte_map
    list_separator
     ;
   field
    field_id
     integer
      46
     :
    field_type
     container_type
      map_type
       map
       <
       field_type
        container_type
         map_type
          map
          <
          field_type
           i8
          ,
          field_type
           i8
          >
         type_annotations
          (
          type_annotation
           python.immutable
           =
           annotation_value
            ""
          )
       ,
       field_type
        i8
       >
    map_byte_map
    list_separator
     ;
   field
    field_id
     integer
      47
     :
    field_type
     container_type
      map_type
       map
       <
       field_type
        i8
       ,
       field_type
        container_type
         map_type
          map
          <
          field_type
           i8
          ,
          field_type
           i8
          >
       >
    byte_map_map
    list_separator
     ;
   field
    field_id
     integer
      48
     :
    field_type
     container_type
      map_type
       map
       <
       field_type
        i8
       ,
       field_type
        container_type
         set_type
          set
          <
          field_type
           i8
          >
       >
    byte_set_map
    list_separator
     ;
   field
    field_id
     integer
      49
     :
    field_type
     container_type
      map_type
       map
       <
       field_type
        i8
       ,
       field_type
        container_type
         list_type
          list
          <
          field_type
           i8
          >
       >
    byte_list_map
    list_separator
     ;
   }
 definition
  struct_
   struct
   SingleMapTestStruct
   {
   field
    field_id
     integer
      1
     :
    field_req
     required
    field_type
     container_type
      map_type
       map
       <
       field_type
        base_type
         real_base_type
          i32
       ,
       field_type
        base_type
         real_base_type
          i32
       >
    i32_map
    list_separator
     ;
   }
 definition
  const_rule
   const
   field_type
    CompactProtoTestStruct
   COMPACT_TEST
   =
   const_value
    const_map
     {
     const_map_entry
      const_value
       'a_byte'
      :
      const_value
       integer
        127
      list_separator
       ,
     const_map_entry
      const_value
       'a_i16'
      :
      const_value
       integer
        32000
      list_separator
       ,
     const_map_entry
      const_value
       'a_i32'
      :
      const_value
       integer
        1000000000
      list_separator
       ,
     const_map_entry
      const_value
       'a_i64'
      :
      const_value
       integer
        0xffffffffff
      list_separator
       ,
     const_map_entry
      const_value
       'a_double'
      :
      const_value
       5.6789
      list_separator
       ,
     const_map_entry
      const_value
       'a_string'
      :
      const_value
       "my string"
      list_separator
       ,
     const_map_entry
      const_value
       'true_field'
      :
      const_value
       integer
        1
      list_separator
       ,
     const_map_entry
      const_value
       'false_field'
      :
      const_value
       integer
        0
      list_separator
       ,
     const_map_entry
      const_value
       'empty_struct_field'
      :
      const_value
       const_map
        {
        }
      list_separator
       ,
     const_map_entry
      const_value
       'byte_list'
      :
      const_value
       const_list
        [
        const_value
         integer
          -127
        list_separator
         ,
        const_value
         integer
          -1
        list_separator
         ,
        const_value
         integer
          0
        list_separator
         ,
        const_value
         integer
          1
        list_separator
         ,
        const_value
         integer
          127
        ]
      list_separator
       ,
     const_map_entry
      const_value
       'i16_list'
      :
      const_value
       const_list
        [
        const_value
         integer
          -1
        list_separator
         ,
        const_value
         integer
          0
        list_separator
         ,
        const_value
         integer
          1
        list_separator
         ,
        const_value
         integer
          0x7fff
        ]
      list_separator
       ,
     const_map_entry
      const_value
       'i32_list'
      :
      const_value
       const_list
        [
        const_value
         integer
          -1
        list_separator
         ,
        const_value
         integer
          0
        list_separator
         ,
        const_value
         integer
          0xff
        list_separator
         ,
        const_value
         integer
          0xffff
        list_separator
         ,
        const_value
         integer
          0xffffff
        list_separator
         ,
        const_value
         integer
          0x7fffffff
        ]
      list_separator
       ,
     const_map_entry
      const_value
       'i64_list'
      :
      const_value
       const_list
        [
        const_value
         integer
          -1
        list_separator
         ,
        const_value
         integer
          0
        list_separator
         ,
        const_value
         integer
          0xff
        list_separator
         ,
        const_value
         integer
          0xffff
        list_separator
         ,
        const_value
         integer
          0xffffff
        list_separator
         ,
        const_value
         integer
          0xffffffff
        list_separator
         ,
        const_value
         integer
          0xffffffffff
        list_separator
         ,
        const_value
         integer
          0xffffffffffff
        list_separator
         ,
        const_value
         integer
          0xffffffffffffff
        list_separator
         ,
        const_value
         integer
          0x7fffffffffffffff
        ]
      list_separator
       ,
     const_map_entry
      const_value
       'double_list'
      :
      const_value
       const_list
        [
        const_value
         0.1
        list_separator
         ,
        const_value
         0.2
        list_separator
         ,
        const_value
         0.3
        ]
      list_separator
       ,
     const_map_entry
      const_value
       'string_list'
      :
      const_value
       const_list
        [
        const_value
         "first"
        list_separator
         ,
        const_value
         "second"
        list_separator
         ,
        const_value
         "third"
        ]
      list_separator
       ,
     const_map_entry
      const_value
       'boolean_list'
      :
      const_value
       const_list
        [
        const_value
         integer
          1
        list_separator
         ,
        const_value
         integer
          1
        list_separator
         ,
        const_value
         integer
          1
        list_separator
         ,
        const_value
         integer
          0
        list_separator
         ,
        const_value
         integer
          0
        list_separator
         ,
        const_value
         integer
          0
        ]
      list_separator
       ,
     const_map_entry
      const_value
       'struct_list'
      :
      const_value
       const_list
        [
        const_value
         const_map
          {
          }
        list_separator
         ,
        const_value
         const_map
          {
          }
        ]
      list_separator
       ,
     const_map_entry
      const_value
       'byte_set'
      :
      const_value
       const_list
        [
        const_value
         integer
          -127
        list_separator
         ,
        const_value
         integer
          -1
        list_separator
         ,
        const_value
         integer
          0
        list_separator
         ,
        const_value
         integer
          1
        list_separator
         ,
        const_value
         integer
          127
        ]
      list_separator
       ,
     const_map_entry
      const_value
       'i16_set'
      :
      const_value
       const_list
        [
        const_value
         integer
          -1
        list_separator
         ,
        const_value
         integer
          0
        list_separator
         ,
        const_value
         integer
          1
        list_separator
         ,
        const_value
         integer
          0x7fff
        ]
      list_separator
       ,
     const_map_entry
      const_value
       'i32_set'
      :
      const_value
       const_list
        [
        const_value
         integer
          1
        list_separator
         ,
        const_value
         integer
          2
        list_separator
         ,
        const_value
         integer
          3
        ]
      list_separator
       ,
     const_map_entry
      const_value
       'i64_set'
      :
      const_value
       const_list
        [
        const_value
         integer
          -1
        list_separator
         ,
        const_value
         integer
          0
        list_separator
         ,
        const_value
         integer
          0xff
        list_separator
         ,
        const_value
         integer
          0xffff
        list_separator
         ,
        const_value
         integer
          0xffffff
        list_separator
         ,
        const_value
         integer
          0xffffffff
        list_separator
         ,
        const_value
         integer
          0xffffffffff
        list_separator
         ,
        const_value
         integer
          0xffffffffffff
        list_separator
         ,
        const_value
         integer
          0xffffffffffffff
        list_separator
         ,
        const_value
         integer
          0x7fffffffffffffff
        ]
      list_separator
       ,
     const_map_entry
      const_value
       'double_set'
      :
      const_value
       const_list
        [
        const_value
         0.1
        list_separator
         ,
        const_value
         0.2
        list_separator
         ,
        const_value
         0.3
        ]
      list_separator
       ,
     const_map_entry
      const_value
       'string_set'
      :
      const_value
       const_list
        [
        const_value
         "first"
        list_separator
         ,
        const_value
         "second"
        list_separator
         ,
        const_value
         "third"
        ]
      list_separator
       ,
     const_map_entry
      const_value
       'boolean_set'
      :
      const_value
       const_list
        [
        const_value
         integer
          1
        list_separator
         ,
        const_value
         integer
          0
        ]
      list_separator
       ,
     const_map_entry
      const_value
       'struct_set'
      :
      const_value
       const_list
        [
        const_value
         const_map
          {
          }
        ]
      list_separator
       ,
     const_map_entry
      const_value
       'byte_byte_map'
      :
      const_value
       const_map
        {
        const_map_entry
         const_value
          integer
           1
         :
         const_value
          integer
           2
        }
      list_separator
       ,
     const_map_entry
      const_value
       'i16_byte_map'
      :
      const_value
       const_map
        {
        const_map_entry
         const_value
          integer
           1
         :
         const_value
          integer
           1
         list_separator
          ,
        const_map_entry
         const_value
          integer
           -1
         :
         const_value
          integer
           1
         list_separator
          ,
        const_map_entry
         const_value
          integer
           0x7fff
         :
         const_value
          integer
           1
        }
      list_separator
       ,
     const_map_entry
      const_value
       'i32_byte_map'
      :
      const_value
       const_map
        {
        const_map_entry
         const_value
          integer
           1
         :
         const_value
          integer
           1
         list_separator
          ,
        const_map_entry
         const_value
          integer
           -1
         :
         const_value
          integer
           1
         list_separator
          ,
        const_map_entry
         const_value
          integer
           0x7fffffff
         :
         const_value
          integer
           1
        }
      list_separator
       ,
     const_map_entry
      const_value
       'i64_byte_map'
      :
      const_value
       const_map
        {
        const_map_entry
         const_value
          integer
           0
         :
         const_value
          integer
           1
         list_separator
          ,
        const_map_entry
         const_value
          integer
           1
         :
         const_value
          integer
           1
         list_separator
          ,
        const_map_entry
         const_value
          integer
           -1
         :
         const_value
          integer
           1
         list_separator
          ,
        const_map_entry
         const_value
          integer
           0x7fffffffffffffff
         :
         const_value
          integer
           1
        }
      list_separator
       ,
     const_map_entry
      const_value
       'double_byte_map'
      :
      const_value
       const_map
        {
        const_map_entry
         const_value
          -1.1
         :
         const_value
          integer
           1
         list_separator
          ,
        const_map_entry
         const_value
          1.1
         :
         const_value
          integer
           1
        }
      list_separator
       ,
     const_map_entry
      const_value
       'string_byte_map'
      :
      const_value
       const_map
        {
        const_map_entry
         const_value
          "first"
         :
         const_value
          integer
           1
         list_separator
          ,
        const_map_entry
         const_value
          "second"
         :
         const_value
          integer
           2
         list_separator
          ,
        const_map_entry
         const_value
          "third"
         :
         const_value
          integer
           3
         list_separator
          ,
        const_map_entry
         const_value
          ""
         :
         const_value
          integer
           0
        }
      list_separator
       ,
     const_map_entry
      const_value
       'boolean_byte_map'
      :
      const_value
       const_map
        {
        const_map_entry
         const_value
          integer
           1
         :
         const_value
          integer
           1
         list_separator
          ,
        const_map_entry
         const_value
          integer
           0
         :
         const_value
          integer
           0
        }
      list_separator
       ,
     const_map_entry
      const_value
       'byte_i16_map'
      :
      const_value
       const_map
        {
        const_map_entry
         const_value
          integer
           1
         :
         const_value
          integer
           1
         list_separator
          ,
        const_map_entry
         const_value
          integer
           2
         :
         const_value
          integer
           -1
         list_separator
          ,
        const_map_entry
         const_value
          integer
           3
         :
         const_value
          integer
           0x7fff
        }
      list_separator
       ,
     const_map_entry
      const_value
       'byte_i32_map'
      :
      const_value
       const_map
        {
        const_map_entry
         const_value
          integer
           1
         :
         const_value
          integer
           1
         list_separator
          ,
        const_map_entry
         const_value
          integer
           2
         :
         const_value
          integer
           -1
         list_separator
          ,
        const_map_entry
         const_value
          integer
           3
         :
         const_value
          integer
           0x7fffffff
        }
      list_separator
       ,
     const_map_entry
      const_value
       'byte_i64_map'
      :
      const_value
       const_map
        {
        const_map_entry
         const_value
          integer
           1
         :
         const_value
          integer
           1
         list_separator
          ,
        const_map_entry
         const_value
          integer
           2
         :
         const_value
          integer
           -1
         list_separator
          ,
        const_map_entry
         const_value
          integer
           3
         :
         const_value
          integer
           0x7fffffffffffffff
        }
      list_separator
       ,
     const_map_entry
      const_value
       'byte_double_map'
      :
      const_value
       const_map
        {
        const_map_entry
         const_value
          integer
           1
         :
         const_value
          0.1
         list_separator
          ,
        const_map_entry
         const_value
          integer
           2
         :
         const_value
          -0.1
         list_separator
          ,
        const_map_entry
         const_value
          integer
           3
         :
         const_value
          1000000.1
        }
      list_separator
       ,
     const_map_entry
      const_value
       'byte_string_map'
      :
      const_value
       const_map
        {
        const_map_entry
         const_value
          integer
           1
         :
         const_value
          ""
         list_separator
          ,
        const_map_entry
         const_value
          integer
           2
         :
         const_value
          "blah"
         list_separator
          ,
        const_map_entry
         const_value
          integer
           3
         :
         const_value
          "loooooooooooooong string"
        }
      list_separator
       ,
     const_map_entry
      const_value
       'byte_boolean_map'
      :
      const_value
       const_map
        {
        const_map_entry
         const_value
          integer
           1
         :
         const_value
          integer
           1
         list_separator
          ,
        const_map_entry
         const_value
          integer
           2
         :
         const_value
          integer
           0
        }
      list_separator
       ,
     const_map_entry
      const_value
       'list_byte_map'
      :
      const_value
       const_map
        {
        const_map_entry
         const_value
          const_list
           [
           const_value
            integer
             1
           list_separator
            ,
           const_value
            integer
             2
           list_separator
            ,
           const_value
            integer
             3
           ]
         :
         const_value
          integer
           1
         list_separator
          ,
        const_map_entry
         const_value
          const_list
           [
           const_value
            integer
             0
           list_separator
            ,
           const_value
            integer
             1
           ]
         :
         const_value
          integer
           2
         list_separator
          ,
        const_map_entry
         const_value
          const_list
           [
           ]
         :
         const_value
          integer
           0
        }
      list_separator
       ,
     const_map_entry
      const_value
       'set_byte_map'
      :
      const_value
       const_map
        {
        const_map_entry
         const_value
          const_list
           [
           const_value
            integer
             1
           list_separator
            ,
           const_value
            integer
             2
           list_separator
            ,
           const_value
            integer
             3
           ]
         :
         const_value
          integer
           1
         list_separator
          ,
        const_map_entry
         const_value
          const_list
           [
           const_value
            integer
             0
           list_separator
            ,
           const_value
            integer
             1
           ]
         :
         const_value
          integer
           2
         list_separator
          ,
        const_map_entry
         const_value
          const_list
           [
           ]
         :
         const_value
          integer
           0
        }
      list_separator
       ,
     const_map_entry
      const_value
       'map_byte_map'
      :
      const_value
       const_map
        {
        const_map_entry
         const_value
          const_map
           {
           const_map_entry
            const_value
             integer
              1
            :
            const_value
             integer
              1
           }
         :
         const_value
          integer
           1
         list_separator
          ,
        const_map_entry
         const_value
          const_map
           {
           const_map_entry
            const_value
             integer
              2
            :
            const_value
             integer
              2
           }
         :
         const_value
          integer
           2
         list_separator
          ,
        const_map_entry
         const_value
          const_map
           {
           }
         :
         const_value
          integer
           0
        }
      list_separator
       ,
     const_map_entry
      const_value
       'byte_map_map'
      :
      const_value
       const_map
        {
        const_map_entry
         const_value
          integer
           0
         :
         const_value
          const_map
           {
           }
         list_separator
          ,
        const_map_entry
         const_value
          integer
           1
         :
         const_value
          const_map
           {
           const_map_entry
            const_value
             integer
              1
            :
            const_value
             integer
              1
           }
         list_separator
          ,
        const_map_entry
         const_value
          integer
           2
         :
         const_value
          const_map
           {
           const_map_entry
            const_value
             integer
              1
            :
            const_value
             integer
              1
            list_separator
             ,
           const_map_entry
            const_value
             integer
              2
            :
            const_value
             integer
              2
           }
        }
      list_separator
       ,
     const_map_entry
      const_value
       'byte_set_map'
      :
      const_value
       const_map
        {
        const_map_entry
         const_value
          integer
           0
         :
         const_value
          const_list
           [
           ]
         list_separator
          ,
        const_map_entry
         const_value
          integer
           1
         :
         const_value
          const_list
           [
           const_value
            integer
             1
           ]
         list_separator
          ,
        const_map_entry
         const_value
          integer
           2
         :
         const_value
          const_list
           [
           const_value
            integer
             1
           list_separator
            ,
           const_value
            integer
             2
           ]
        }
      list_separator
       ,
     const_map_entry
      const_value
       'byte_list_map'
      :
      const_value
       const_map
        {
        const_map_entry
         const_value
          integer
           0
         :
         const_value
          const_list
           [
           ]
         list_separator
          ,
        const_map_entry
         const_value
          integer
           1
         :
         const_value
          const_list
           [
           const_value
            integer
             1
           ]
         list_separator
          ,
        const_map_entry
         const_value
          integer
           2
         :
         const_value
          const_list
           [
           const_value
            integer
             1
           list_separator
            ,
           const_value
            integer
             2
           ]
        }
      list_separator
       ,
     }
 definition
  const_rule
   const
   field_type
    base_type
     real_base_type
      i32
   MYCONST
   =
   const_value
    integer
     2
 definition
  exception
   exception
   ExceptionWithAMap
   {
   field
    field_id
     integer
      1
     :
    field_type
     base_type
      real_base_type
       string
    blah
    list_separator
     ;
   field
    field_id
     integer
      2
     :
    field_type
     container_type
      map_type
       map
       <
       field_type
        base_type
         real_base_type
          string
       ,
       field_type
        base_type
         real_base_type
          string
       >
    map_field
    list_separator
     ;
   }
 definition
  service
   service
   ServiceForExceptionWithAMap
   {
   function_
    function_type
     void
    methodThatThrowsAnException
    (
    )
    throws_list
     throws
     (
     field
      field_id
       integer
        1
       :
      field_type
       ExceptionWithAMap
      xwamap
     )
    list_separator
     ;
   }
 definition
  service
   service
   Srv
   {
   function_
    function_type
     field_type
      base_type
       real_base_type
        i32
    Janky
    (
    field
     field_id
      integer
       1
      :
     field_type
      base_type
       real_base_type
        i32
     arg
    )
    list_separator
     ;
   function_
    function_type
     void
    voidMethod
    (
    )
    list_separator
     ;
   function_
    function_type
     field_type
      base_type
       real_base_type
        i32
    primitiveMethod
    (
    )
    list_separator
     ;
   function_
    function_type
     field_type
      CompactProtoTestStruct
    structMethod
    (
    )
    list_separator
     ;
   function_
    function_type
     void
    methodWithDefaultArgs
    (
    field
     field_id
      integer
       1
      :
     field_type
      base_type
       real_base_type
        i32
     something
     =
     const_value
      MYCONST
    )
    list_separator
     ;
   function_
    oneway
     oneway
    function_type
     void
    onewayMethod
    (
    )
    list_separator
     ;
   function_
    function_type
     field_type
      base_type
       real_base_type
        bool
    declaredExceptionMethod
    (
    field
     field_id
      integer
       1
      :
     field_type
      base_type
       real_base_type
        bool
     shouldThrow
    )
    throws_list
     throws
     (
     field
      field_id
       integer
        1
       :
      field_type
       ExceptionWithAMap
      xwamap
     )
    list_separator
     ;
   }
 definition
  service
   service
   Inherited
   extends
   Srv
   {
   function_
    function_type
     field_type
      base_type
       real_base_type
        i32
    identity
    (
    field
     field_id
      integer
       1
      :
     field_type
      base_type
       real_base_type
        i32
     arg
    )
   }
 definition
  service
   service
   EmptyService
   {
   }
 definition
  struct_
   struct
   BlowUp
   {
   field
    field_id
     integer
      1
     :
    field_type
     container_type
      map_type
       map
       <
       field_type
        container_type
         list_type
          list
          <
          field_type
           base_type
            real_base_type
             i32
          >
         type_annotations
          (
          type_annotation
           python.immutable
           =
           annotation_value
            ""
          )
       ,
       field_type
        container_type
         set_type
          set
          <
          field_type
           container_type
            map_type
             map
             <
             field_type
              base_type
               real_base_type
                i32
             ,
             field_type
              base_type
               real_base_type
                string
             >
            type_annotations
             (
             type_annotation
              python.immutable
              =
              annotation_value
               ""
             )
          >
       >
    b1
    list_separator
     ;
   field
    field_id
     integer
      2
     :
    field_type
     container_type
      map_type
       map
       <
       field_type
        container_type
         list_type
          list
          <
          field_type
           base_type
            real_base_type
             i32
          >
         type_annotations
          (
          type_annotation
           python.immutable
           =
           annotation_value
            ""
          )
       ,
       field_type
        container_type
         set_type
          set
          <
          field_type
           container_type
            map_type
             map
             <
             field_type
              base_type
               real_base_type
                i32
             ,
             field_type
              base_type
               real_base_type
                string
             >
            type_annotations
             (
             type_annotation
              python.immutable
              =
              annotation_value
               ""
             )
          >
       >
    b2
    list_separator
     ;
   field
    field_id
     integer
      3
     :
    field_type
     container_type
      map_type
       map
       <
       field_type
        container_type
         list_type
          list
          <
          field_type
           base_type
            real_base_type
             i32
          >
         type_annotations
          (
          type_annotation
           python.immutable
           =
           annotation_value
            ""
          )
       ,
       field_type
        container_type
         set_type
          set
          <
          field_type
           container_type
            map_type
             map
             <
             field_type
              base_type
               real_base_type
                i32
             ,
             field_type
              base_type
               real_base_type
                string
             >
            type_annotations
             (
             type_annotation
              python.immutable
              =
              annotation_value
               ""
             )
          >
       >
    b3
    list_separator
     ;
   field
    field_id
     integer
      4
     :
    field_type
     container_type
      map_type
       map
       <
       field_type
        container_type
         list_type
          list
          <
          field_type
           base_type
            real_base_type
             i32
          >
         type_annotations
          (
          type_annotation
           python.immutable
           =
           annotation_value
            ""
          )
       ,
       field_type
        container_type
         set_type
          set
          <
          field_type
           container_type
            map_type
             map
             <
             field_type
              base_type
               real_base_type
                i32
             ,
             field_type
              base_type
               real_base_type
                string
             >
            type_annotations
             (
             type_annotation
              python.immutable
              =
              annotation_value
               ""
             )
          >
       >
    b4
    list_separator
     ;
   }
 definition
  struct_
   struct
   ReverseOrderStruct
   {
   field
    field_id
     integer
      4
     :
    field_type
     base_type
      real_base_type
       string
    first
    list_separator
     ;
   field
    field_id
     integer
      3
     :
    field_type
     base_type
      real_base_type
       i16
    second
    list_separator
     ;
   field
    field_id
     integer
      2
     :
    field_type
     base_type
      real_base_type
       i32
    third
    list_separator
     ;
   field
    field_id
     integer
      1
     :
    field_type
     base_type
      real_base_type
       i64
    fourth
    list_separator
     ;
   }
 definition
  service
   service
   ReverseOrderService
   {
   function_
    function_type
     void
    myMethod
    (
    field
     field_id
      integer
       4
      :
     field_type
      base_type
       real_base_type
        string
     first
     list_separator
      ,
    field
     field_id
      integer
       3
      :
     field_type
      base_type
       real_base_type
        i16
     second
     list_separator
      ,
    field
     field_id
      integer
       2
      :
     field_type
      base_type
       real_base_type
        i32
     third
     list_separator
      ,
    field
     field_id
      integer
       1
      :
     field_type
      base_type
       real_base_type
        i64
     fourth
    )
    list_separator
     ;
   }
 definition
  enum_rule
   enum
   SomeEnum
   {
   enum_field
    ONE
    =
    integer
     1
   enum_field
    TWO
    =
    integer
     2
   }
 definition
  const_rule
   const
   field_type
    SomeEnum
   MY_SOME_ENUM
   =
   const_value
    SomeEnum.ONE
 definition
  const_rule
   const
   field_type
    SomeEnum
   MY_SOME_ENUM_1
   =
   const_value
    integer
     1
 definition
  const_rule
   const
   field_type
    container_type
     map_type
      map
      <
      field_type
       SomeEnum
      ,
      field_type
       SomeEnum
      >
   MY_ENUM_MAP
   =
   const_value
    const_map
     {
     const_map_entry
      const_value
       SomeEnum.ONE
      :
      const_value
       SomeEnum.TWO
     }
 definition
  struct_
   struct
   StructWithSomeEnum
   {
   field
    field_id
     integer
      1
     :
    field_type
     SomeEnum
    blah
    list_separator
     ;
   }
 definition
  const_rule
   const
   field_type
    container_type
     map_type
      map
      <
      field_type
       SomeEnum
      ,
      field_type
       StructWithSomeEnum
      >
   EXTRA_CRAZY_MAP
   =
   const_value
    const_map
     {
     const_map_entry
      const_value
       SomeEnum.ONE
      :
      const_value
       const_map
        {
        const_map_entry
         const_value
          "blah"
         :
         const_value
          SomeEnum.TWO
        }
     }
 definition
  union_
   union
   TestUnion
   {
   field
    field_id
     integer
      1
     :
    field_type
     base_type
      real_base_type
       string
    string_field
    list_separator
     ;
   field
    field_id
     integer
      2
     :
    field_type
     base_type
      real_base_type
       i32
    i32_field
    list_separator
     ;
   field
    field_id
     integer
      3
     :
    field_type
     OneOfEach
    struct_field
    list_separator
     ;
   field
    field_id
     integer
      4
     :
    field_type
     container_type
      list_type
       list
       <
       field_type
        RandomStuff
       >
    struct_list
    list_separator
     ;
   field
    field_id
     integer
      5
     :
    field_type
     base_type
      real_base_type
       i32
    other_i32_field
    list_separator
     ;
   field
    field_id
     integer
      6
     :
    field_type
     SomeEnum
    enum_field
    list_separator
     ;
   field
    field_id
     integer
      7
     :
    field_type
     container_type
      set_type
       set
       <
       field_type
        base_type
         real_base_type
          i32
       >
    i32_set
    list_separator
     ;
   field
    field_id
     integer
      8
     :
    field_type
     container_type
      map_type
       map
       <
       field_type
        base_type
         real_base_type
          i32
       ,
       field_type
        base_type
         real_base_type
          i32
       >
    i32_map
    list_separator
     ;
   }
 definition
  union_
   union
   TestUnionMinusStringField
   {
   field
    field_id
     integer
      2
     :
    field_type
     base_type
      real_base_type
       i32
    i32_field
    list_separator
     ;
   field
    field_id
     integer
      3
     :
    field_type
     OneOfEach
    struct_field
    list_separator
     ;
   field
    field_id
     integer
      4
     :
    field_type
     container_type
      list_type
       list
       <
       field_type
        RandomStuff
       >
    struct_list
    list_separator
     ;
   field
    field_id
     integer
      5
     :
    field_type
     base_type
      real_base_type
       i32
    other_i32_field
    list_separator
     ;
   field
    field_id
     integer
      6
     :
    field_type
     SomeEnum
    enum_field
    list_separator
     ;
   field
    field_id
     integer
      7
     :
    field_type
     container_type
      set_type
       set
       <
       field_type
        base_type
         real_base_type
          i32
       >
    i32_set
    list_separator
     ;
   field
    field_id
     integer
      8
     :
    field_type
     container_type
      map_type
       map
       <
       field_type
        base_type
         real_base_type
          i32
       ,
       field_type
        base_type
         real_base_type
          i32
       >
    i32_map
    list_separator
     ;
   }
 definition
  union_
   union
   ComparableUnion
   {
   field
    field_id
     integer
      1
     :
    field_type
     base_type
      real_base_type
       string
    string_field
    list_separator
     ;
   field
    field_id
     integer
      2
     :
    field_type
     base_type
      real_base_type
       binary
    binary_field
    list_separator
     ;
   }
 definition
  struct_
   struct
   StructWithAUnion
   {
   field
    field_id
     integer
      1
     :
    field_type
     TestUnion
    test_union
    list_separator
     ;
   }
 definition
  struct_
   struct
   PrimitiveThenStruct
   {
   field
    field_id
     integer
      1
     :
    field_type
     base_type
      real_base_type
       i32
    blah
    list_separator
     ;
   field
    field_id
     integer
      2
     :
    field_type
     base_type
      real_base_type
       i32
    blah2
    list_separator
     ;
   field
    field_id
     integer
      3
     :
    field_type
     Backwards
    bw
    list_separator
     ;
   }
 definition
  typedef_
   typedef
   field_type
    container_type
     map_type
      map
      <
      field_type
       base_type
        real_base_type
         i32
      ,
      field_type
       base_type
        real_base_type
         i32
      >
   SomeMap
 definition
  struct_
   struct
   StructWithASomemap
   {
   field
    field_id
     integer
      1
     :
    field_req
     required
    field_type
     SomeMap
    somemap_field
    list_separator
     ;
   }
 definition
  struct_
   struct
   BigFieldIdStruct
   {
   field
    field_id
     integer
      1
     :
    field_type
     base_type
      real_base_type
       string
    field1
    list_separator
     ;
   field
    field_id
     integer
      45
     :
    field_type
     base_type
      real_base_type
       string
    field2
    list_separator
     ;
   }
 definition
  struct_
   struct
   BreaksRubyCompactProtocol
   {
   field
    field_id
     integer
      1
     :
    field_type
     base_type
      real_base_type
       string
    field1
    list_separator
     ;
   field
    field_id
     integer
      2
     :
    field_type
     BigFieldIdStruct
    field2
    list_separator
     ;
   field
    field_id
     integer
      3
     :
    field_type
     base_type
      real_base_type
       i32
    field3
    list_separator
     ;
   }
 definition
  struct_
   struct
   TupleProtocolTestStruct
   {
   field
    field_req
     optional
    field_type
     base_type
      real_base_type
       i32
    field1
    list_separator
     ;
   field
    field_req
     optional
    field_type
     base_type
      real_base_type
       i32
    field2
    list_separator
     ;
   field
    field_req
     optional
    field_type
     base_type
      real_base_type
       i32
    field3
    list_separator
     ;
   field
    field_req
     optional
    field_type
     base_type
      real_base_type
       i32
    field4
    list_separator
     ;
   field
    field_req
     optional
    field_type
     base_type
      real_base_type
       i32
    field5
    list_separator
     ;
   field
    field_req
     optional
    field_type
     base_type
      real_base_type
       i32
    field6
    list_separator
     ;
   field
    field_req
     optional
    field_type
     base_type
      real_base_type
       i32
    field7
    list_separator
     ;
   field
    field_req
     optional
    field_type
     base_type
      real_base_type
       i32
    field8
    list_separator
     ;
   field
    field_req
     optional
    field_type
     base_type
      real_base_type
       i32
    field9
    list_separator
     ;
   field
    field_req
     optional
    field_type
     base_type
      real_base_type
       i32
    field10
    list_separator
     ;
   field
    field_req
     optional
    field_type
     base_type
      real_base_type
       i32
    field11
    list_separator
     ;
   field
    field_req
     optional
    field_type
     base_type
      real_base_type
       i32
    field12
    list_separator
     ;
   }
 definition
  struct_
   struct
   ListDoublePerf
   {
   field
    field_id
     integer
      1
     :
    field_type
     container_type
      list_type
       list
       <
       field_type
        base_type
         real_base_type
          double
       >
    field
    list_separator
     ;
   }
 <EOF>
