(startRule (module \r\n (moduleBody (moduleBodyElement (functionStmt Function   (ambiguousIdentifier Mult) (argList ( (arg ByVal   (ambiguousIdentifier Factor1)   (asTypeClause As   (type (baseType Integer)))) ,   (arg (ambiguousIdentifier Factor2)   (asTypeClause As   (type (baseType Integer)))) )) \r\n\t \r\n\t (block (blockStmt (letStmt (implicitCallStmt_InStmt (iCS_S_VariableOrProcedureCall (ambiguousIdentifier Mult)))   =   (valueStmt (valueStmt (implicitCallStmt_InStmt (iCS_S_VariableOrProcedureCall (ambiguousIdentifier Factor1))))   *   (valueStmt (implicitCallStmt_InStmt (iCS_S_VariableOrProcedureCall (ambiguousIdentifier Factor2)))))))) \r\n End Function))  \r\n \r\n (moduleBodyElement (functionStmt (visibility Public)   Function   (ambiguousIdentifier Foo) (argList ( (arg (ambiguousIdentifier a) (typeHint $)) ,   (arg (ambiguousIdentifier b) (typeHint &)) ,   (arg (ambiguousIdentifier c) (typeHint !)) ,   (arg (ambiguousIdentifier d) (typeHint #)) ,   (arg (ambiguousIdentifier e) (typeHint @)) ,   (arg (ambiguousIdentifier f) (typeHint $) ( )) ))   (asTypeClause As   (type (baseType Boolean))) \r\n\t (block (blockStmt (variableStmt Dim   (variableListStmt (variableSubStmt (ambiguousIdentifier asFoo) (typeHint $) ( )))))) \r\n End Function)))) <EOF>)