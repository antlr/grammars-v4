(startRule (module (moduleBody (moduleBodyElement (moduleBlock (block (blockStmt (variableStmt Dim   (variableListStmt (variableSubStmt (ambiguousIdentifier CurrentI)   (asTypeClause As   (type (baseType Integer))))))) \r\n (blockStmt (variableStmt Dim   (variableListStmt (variableSubStmt (ambiguousIdentifier CurrentObj)   (asTypeClause As   (type (baseType Object)))))))))) \r\n \r\n (moduleBodyElement (propertySetStmt Property Set   (ambiguousIdentifier CurrentI) (argList ( (arg (ambiguousIdentifier I)   (asTypeClause As   (type (baseType Integer)))) )) \r\n\t  (block (blockStmt (letStmt (implicitCallStmt_InStmt (iCS_S_VariableOrProcedureCall (ambiguousIdentifier CurrentI)))   =   (valueStmt (implicitCallStmt_InStmt (iCS_S_VariableOrProcedureCall (ambiguousIdentifier I)))))))  \r\n End Property)) \r\n \r\n (moduleBodyElement (propertySetStmt Property Set   (ambiguousIdentifier CurrentObject) (argList ( (arg (ambiguousIdentifier J)   (asTypeClause AS   (type (baseType Object)))) )) \r\n\t (block (blockStmt (setStmt Set   (implicitCallStmt_InStmt (iCS_S_VariableOrProcedureCall (ambiguousIdentifier CurrentObj)))   =   (valueStmt (implicitCallStmt_InStmt (iCS_S_VariableOrProcedureCall (ambiguousIdentifier J)))))))  \r\n End Property)) \r\n \r\n (moduleBodyElement (propertySetStmt (visibility Public)   Property Set   (ambiguousIdentifier Bar) (argList ( (arg (ambiguousIdentifier a) (typeHint $)) )) \r\n End Property))) \r\n) <EOF>)