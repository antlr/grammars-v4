(startRule (module \r\n (moduleBody (moduleBodyElement (subStmt Sub   (ambiguousIdentifier Mult) (argList ( (arg ByVal   (ambiguousIdentifier Factor1)   (asTypeClause As   (type (baseType Integer)))) ,   (arg (ambiguousIdentifier Factor2)   (asTypeClause As   (type (baseType Integer)))) )) \r\n\t (block (blockStmt (variableStmt Dim   (variableListStmt (variableSubStmt (ambiguousIdentifier Product))))) \r\n\t (blockStmt (letStmt (implicitCallStmt_InStmt (iCS_S_VariableOrProcedureCall (ambiguousIdentifier Product)))   =   (valueStmt (valueStmt (implicitCallStmt_InStmt (iCS_S_VariableOrProcedureCall (ambiguousIdentifier Factor1))))   *   (valueStmt (implicitCallStmt_InStmt (iCS_S_VariableOrProcedureCall (ambiguousIdentifier Factor2))))))) \r\n\t \r\n\t (blockStmt (implicitCallStmt_InBlock (iCS_B_MemberProcedureCall (implicitCallStmt_InStmt (iCS_S_VariableOrProcedureCall (ambiguousIdentifier Debug))) . (ambiguousIdentifier (ambiguousKeyword Print))   (argsCall (argCall (valueStmt (implicitCallStmt_InStmt (iCS_S_VariableOrProcedureCall (ambiguousIdentifier Product)))))))))) \r\n End Sub))  \r\n \r\n (moduleBodyElement (subStmt (visibility Public)   Sub   (ambiguousIdentifier Foo) (argList ( (arg (ambiguousIdentifier a) (typeHint $)) ,   (arg (ambiguousIdentifier b) (typeHint &)) ,   (arg (ambiguousIdentifier c) (typeHint !)) ,   (arg (ambiguousIdentifier d) (typeHint #)) ,   (arg (ambiguousIdentifier e) (typeHint @)) )) \r\n End Sub))) \r\n) <EOF>)