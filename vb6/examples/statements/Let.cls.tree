(startRule (module (moduleBody (moduleBodyElement (moduleBlock (block (blockStmt (variableStmt Dim   (variableListStmt (variableSubStmt (ambiguousIdentifier Var1)) ,   (variableSubStmt (ambiguousIdentifier Var2))))) \n \n (blockStmt (letStmt Let   (implicitCallStmt_InStmt (iCS_S_VariableOrProcedureCall (ambiguousIdentifier Var1)))   =   (valueStmt (literal "test")))) \n (blockStmt (letStmt Let   (implicitCallStmt_InStmt (iCS_S_VariableOrProcedureCall (ambiguousIdentifier Var2)))   =   (valueStmt (literal 2)))) \n (blockStmt (letStmt (implicitCallStmt_InStmt (iCS_S_VariableOrProcedureCall (ambiguousIdentifier Var1)))   =   (valueStmt (literal "hello world")))) \n (blockStmt (letStmt (implicitCallStmt_InStmt (iCS_S_VariableOrProcedureCall (ambiguousIdentifier Var1))) =   (valueStmt (literal "hello world")))) \n (blockStmt (letStmt (implicitCallStmt_InStmt (iCS_S_VariableOrProcedureCall (ambiguousIdentifier Var1)))   = (valueStmt (literal "hello world")))) \n (blockStmt (letStmt (implicitCallStmt_InStmt (iCS_S_VariableOrProcedureCall (ambiguousIdentifier Var1))) = (valueStmt (literal "hello world"))))))) \n \n (moduleBodyElement (functionStmt Function   (ambiguousIdentifier SomeFunction) (argList ( )) \n\t (block (blockStmt (letStmt (implicitCallStmt_InStmt (iCS_S_VariableOrProcedureCall (ambiguousIdentifier Var2)))   =   (valueStmt (literal 4)))) \n\t (blockStmt (letStmt Let   (implicitCallStmt_InStmt (iCS_S_VariableOrProcedureCall (ambiguousIdentifier Var2)))   =   (valueStmt (literal 6))))) \n End Function)))) <EOF>)