(startRule (module (moduleBody (moduleBodyElement (moduleBlock (block (blockStmt (variableStmt Dim   (variableListStmt (variableSubStmt (ambiguousIdentifier CondA)   (asTypeClause As   (type (baseType String))))))) \n (blockStmt (variableStmt Dim   (variableListStmt (variableSubStmt (ambiguousIdentifier CondB)   (asTypeClause As   (type (baseType String))))))) \n \n (blockStmt (selectCaseStmt Select   Case   (valueStmt (implicitCallStmt_InStmt (iCS_S_VariableOrProcedureCall (ambiguousIdentifier CondA)))) \n\t (sC_Case Case   (sC_Cond (valueStmt (literal "A"))) \n\t\t (block (blockStmt (beepStmt Beep))) \n\t) (sC_Case Case   (sC_Cond (valueStmt (literal "B"))) \n\t\t (block (blockStmt (selectCaseStmt Select   Case   (valueStmt (implicitCallStmt_InStmt (iCS_S_VariableOrProcedureCall (ambiguousIdentifier CondB)))) \n\t\t\t (sC_Case Case   (sC_Cond (valueStmt (literal "A"))) \n\t\t\t\t (block (blockStmt (beepStmt Beep))) \n\t\t\t) (sC_Case Case   (sC_Cond (valueStmt (literal "B"))) \n\t\t\t\t (block (blockStmt (beepStmt Beep))) \n\t\t\t) (sC_Case Case   (sC_Cond Else) \n\t\t\t\t (block (blockStmt (beepStmt Beep))) \n\t\t) End Select))) \n\t) (sC_Case Case   (sC_Cond Else) \n\t\t (block (blockStmt (beepStmt Beep))) \n) End Select))))))) <EOF>)