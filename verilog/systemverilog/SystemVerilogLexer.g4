/*
MIT License

Copyright (c) 2022 Mustafa Said AÄŸca

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

lexer grammar SystemVerilogLexer;

channels { COMMENTS, DIRECTIVES }

EM : '!' ;
EMEQ : '!=' ;
EMEQEQ : '!==' ;
EMEQQM : '!=?' ;
DQ : '"' ;
DQDPIDQ : '"DPI"' ;
DQDPIMICDQ : '"DPI-C"' ;
HA : '#' ;
HAHA : '##' ;
HAMIHA : '#-#' ;
HAEQHA : '#=#' ;
DL : '$' ;
DLERROR : '$error' ;
DLFATAL : '$fatal' ;
DLFULLSKEW : '$fullskew' ;
DLHOLD : '$hold' ;
DLINFO : '$info' ;
DLNOCHANGE : '$nochange' ;
DLPERIOD : '$period' ;
DLRECOVERY : '$recovery' ;
DLRECREM : '$recrem' ;
DLREMOVAL : '$removal' ;
DLROOTDT : '$root.' ;
DLSETUP : '$setup' ;
DLSETUPHOLD : '$setuphold' ;
DLSKEW : '$skew' ;
DLTIMESKEW : '$timeskew' ;
DLUNIT : '$unit' ;
DLWARNING : '$warning' ;
DLWIDTH : '$width' ;
MO : '%' ;
MOEQ : '%=' ;
AM : '&' ;
AMAM : '&&' ;
AMAMAM : '&&&' ;
AMEQ : '&=' ;
AP : '\'' ;
LP : '(' ;
RP : ')' ;
AS : '*' ;
ASAS : '**' ;
ASSL : '*/' ;
ASCLCLAS : '*::*' ;
ASEQ : '*=' ;
ASGT : '*>' ;
PL : '+' ;
PLPL : '++' ;
PLCL : '+:' ;
PLEQ : '+=' ;
CO : ',' ;
MI : '-' ;
MIMI : '--' ;
MICL : '-:' ;
MIEQ : '-=' ;
MIGT : '->' ;
MIGTGT : '->>' ;
DT : '.' ;
DTAS : '.*' ;
SL : '/' ;
SLAS : '/*' ;
SLSL : '//' ;
SLEQ : '/=' ;
ONESTEP : '1step' ;
CL : ':' ;
CLSL : ':/' ;
CLCL : '::' ;
CLEQ : ':=' ;
SC : ';' ;
LT : '<' ;
LTMIGT : '<->' ;
LTLT : '<<' ;
LTLTLT : '<<<' ;
LTLTLTEQ : '<<<=' ;
LTLTEQ : '<<=' ;
LTEQ : '<=' ;
EQ : '=' ;
EQEQ : '==' ;
EQEQEQ : '===' ;
EQEQQM : '==?' ;
EQGT : '=>' ;
GT : '>' ;
GTEQ : '>=' ;
GTGT : '>>' ;
GTGTEQ : '>>=' ;
GTGTGT : '>>>' ;
GTGTGTEQ : '>>>=' ;
QM : '?' ;
AT : '@' ;
ATAT : '@@' ;
PATHPULSEDL : 'PATHPULSE$' ;
LB : '[' ;
RB : ']' ;
CA : '^' ;
CAEQ : '^=' ;
CATI : '^~' ;
GA : '`' -> channel(DIRECTIVES), pushMode(DIRECTIVE_MODE) ;
ACCEPT_ON : 'accept_on' ;
ALIAS : 'alias' ;
ALWAYS : 'always' ;
ALWAYS_COMB : 'always_comb' ;
ALWAYS_FF : 'always_ff' ;
ALWAYS_LATCH : 'always_latch' ;
AND : 'and' ;
ASSERT : 'assert' ;
ASSIGN : 'assign' ;
ASSUME : 'assume' ;
AUTOMATIC : 'automatic' ;
BEFORE : 'before' ;
BEGIN : 'begin' ;
BIND : 'bind' ;
BINS : 'bins' ;
BINSOF : 'binsof' ;
BIT : 'bit' ;
BREAK : 'break' ;
BUF : 'buf' ;
BUFIFZERO : 'bufif0' ;
BUFIFONE : 'bufif1' ;
BYTE : 'byte' ;
CASE : 'case' ;
CASEX : 'casex' ;
CASEZ : 'casez' ;
CELL : 'cell' ;
CHANDLE : 'chandle' ;
CHECKER : 'checker' ;
CLASS : 'class' ;
CLOCKING : 'clocking' ;
CMOS : 'cmos' ;
CONFIG : 'config' ;
CONST : 'const' ;
CONSTRAINT : 'constraint' ;
CONTEXT : 'context' ;
CONTINUE : 'continue' ;
COVER : 'cover' ;
COVERGROUP : 'covergroup' ;
COVERPOINT : 'coverpoint' ;
CROSS : 'cross' ;
DEASSIGN : 'deassign' ;
DEFAULT : 'default' ;
DEFPARAM : 'defparam' ;
DESIGN : 'design' ;
DISABLE : 'disable' ;
DIST : 'dist' ;
DO : 'do' ;
EDGE : 'edge' ;
ELSE : 'else' ;
END : 'end' ;
ENDCASE : 'endcase' ;
ENDCHECKER : 'endchecker' ;
ENDCLASS : 'endclass' ;
ENDCLOCKING : 'endclocking' ;
ENDCONFIG : 'endconfig' ;
ENDFUNCTION : 'endfunction' ;
ENDGENERATE : 'endgenerate' ;
ENDGROUP : 'endgroup' ;
ENDINTERFACE : 'endinterface' ;
ENDMODULE : 'endmodule' ;
ENDPACKAGE : 'endpackage' ;
ENDPRIMITIVE : 'endprimitive' ;
ENDPROGRAM : 'endprogram' ;
ENDPROPERTY : 'endproperty' ;
ENDSEQUENCE : 'endsequence' ;
ENDSPECIFY : 'endspecify' ;
ENDTABLE : 'endtable' ;
ENDTASK : 'endtask' ;
ENUM : 'enum' ;
EVENT : 'event' ;
EXPECT : 'expect' ;
EXPORT : 'export' ;
EXTENDS : 'extends' ;
EXTERN : 'extern' ;
FINAL : 'final' ;
FIRST_MATCH : 'first_match' ;
FOR : 'for' ;
FORCE : 'force' ;
FOREACH : 'foreach' ;
FOREVER : 'forever' ;
FORK : 'fork' ;
FORKJOIN : 'forkjoin' ;
FUNCTION : 'function' ;
GENERATE : 'generate' ;
GENVAR : 'genvar' ;
GLOBAL : 'global' ;
HIGHZZERO : 'highz0' ;
HIGHZONE : 'highz1' ;
IF : 'if' ;
IFF : 'iff' ;
IFNONE : 'ifnone' ;
IGNORE_BINS : 'ignore_bins' ;
ILLEGAL_BINS : 'illegal_bins' ;
IMPLEMENTS : 'implements' ;
IMPLIES : 'implies' ;
IMPORT : 'import' ;
INCLUDE : 'include' -> mode(LIBRARY_MODE) ;
INITIAL : 'initial' ;
INOUT : 'inout' ;
INPUT : 'input' ;
INSIDE : 'inside' ;
INSTANCE : 'instance' ;
INT : 'int' ;
INTEGER : 'integer' ;
INTERCONNECT : 'interconnect' ;
INTERFACE : 'interface' ;
INTERSECT : 'intersect' ;
JOIN : 'join' ;
JOIN_ANY : 'join_any' ;
JOIN_NONE : 'join_none' ;
LARGE : 'large' ;
LET : 'let' ;
LIBLIST : 'liblist' ;
LIBRARY : 'library' -> mode(LIBRARY_MODE) ;
LOCAL : 'local' ;
LOCALPARAM : 'localparam' ;
LOGIC : 'logic' ;
LONGINT : 'longint' ;
MACROMODULE : 'macromodule' ;
MATCHES : 'matches' ;
MEDIUM : 'medium' ;
MODPORT : 'modport' ;
MODULE : 'module' ;
NAND : 'nand' ;
NEGEDGE : 'negedge' ;
NETTYPE : 'nettype' ;
NEW : 'new' ;
NEXTTIME : 'nexttime' ;
NMOS : 'nmos' ;
NOR : 'nor' ;
NOSHOWCANCELLED : 'noshowcancelled' ;
NOT : 'not' ;
NOTIFZERO : 'notif0' ;
NOTIFONE : 'notif1' ;
NULL : 'null' ;
OPTIONDT : 'option.' ;
OR : 'or' ;
OUTPUT : 'output' ;
PACKAGE : 'package' ;
PACKED : 'packed' ;
PARAMETER : 'parameter' ;
PMOS : 'pmos' ;
POSEDGE : 'posedge' ;
PRIMITIVE : 'primitive' ;
PRIORITY : 'priority' ;
PROGRAM : 'program' ;
PROPERTY : 'property' ;
PROTECTED : 'protected' ;
PULLZERO : 'pull0' ;
PULLONE : 'pull1' ;
PULLDOWN : 'pulldown' ;
PULLUP : 'pullup' ;
PULSESTYLE_ONDETECT : 'pulsestyle_ondetect' ;
PULSESTYLE_ONEVENT : 'pulsestyle_onevent' ;
PURE : 'pure' ;
RAND : 'rand' ;
RANDC : 'randc' ;
RANDCASE : 'randcase' ;
RANDOMIZE : 'randomize' ;
RANDSEQUENCE : 'randsequence' ;
RCMOS : 'rcmos' ;
REAL : 'real' ;
REALTIME : 'realtime' ;
REF : 'ref' ;
REG : 'reg' ;
REJECT_ON : 'reject_on' ;
RELEASE : 'release' ;
REPEAT : 'repeat' ;
RESTRICT : 'restrict' ;
RETURN : 'return' ;
RNMOS : 'rnmos' ;
RPMOS : 'rpmos' ;
RTRAN : 'rtran' ;
RTRANIFZERO : 'rtranif0' ;
RTRANIFONE : 'rtranif1' ;
S_ALWAYS : 's_always' ;
S_EVENTUALLY : 's_eventually' ;
S_NEXTTIME : 's_nexttime' ;
S_UNTIL : 's_until' ;
S_UNTIL_WITH : 's_until_with' ;
SAMPLE : 'sample' ;
SCALARED : 'scalared' ;
SEQUENCE : 'sequence' ;
SHORTINT : 'shortint' ;
SHORTREAL : 'shortreal' ;
SHOWCANCELLED : 'showcancelled' ;
SIGNED : 'signed' ;
SMALL : 'small' ;
SOFT : 'soft' ;
SOLVE : 'solve' ;
SPECIFY : 'specify' ;
SPECPARAM : 'specparam' ;
STATIC : 'static' ;
STD : 'std' ;
STRING : 'string' ;
STRONG : 'strong' ;
STRONGZERO : 'strong0' ;
STRONGONE : 'strong1' ;
STRUCT : 'struct' ;
SUPER : 'super' ;
SUPPLYZERO : 'supply0' ;
SUPPLYONE : 'supply1' ;
SYNC_ACCEPT_ON : 'sync_accept_on' ;
SYNC_REJECT_ON : 'sync_reject_on' ;
TABLE : 'table' -> mode(UDP_MODE) ;
TAGGED : 'tagged' ;
TASK : 'task' ;
THIS : 'this' ;
THROUGHOUT : 'throughout' ;
TIME : 'time' ;
TIMEPRECISION : 'timeprecision' ;
TIMEUNIT : 'timeunit' ;
TRAN : 'tran' ;
TRANIFZERO : 'tranif0' ;
TRANIFONE : 'tranif1' ;
TRI : 'tri' ;
TRIZERO : 'tri0' ;
TRIONE : 'tri1' ;
TRIAND : 'triand' ;
TRIOR : 'trior' ;
TRIREG : 'trireg' ;
TYPE : 'type' ;
TYPE_OPTIONDT : 'type_option.' ;
TYPEDEF : 'typedef' ;
UNION : 'union' ;
UNIQUE : 'unique' ;
UNIQUEZERO : 'unique0' ;
UNSIGNED : 'unsigned' ;
UNTIL : 'until' ;
UNTIL_WITH : 'until_with' ;
UNTYPED : 'untyped' ;
USE : 'use' ;
UWIRE : 'uwire' ;
VAR : 'var' ;
VECTORED : 'vectored' ;
VIRTUAL : 'virtual' ;
VOID : 'void' ;
WAIT : 'wait' ;
WAIT_ORDER : 'wait_order' ;
WAND : 'wand' ;
WEAK : 'weak' ;
WEAKZERO : 'weak0' ;
WEAKONE : 'weak1' ;
WHILE : 'while' ;
WILDCARD : 'wildcard' ;
WIRE : 'wire' ;
WITH : 'with' ;
WITHIN : 'within' ;
WOR : 'wor' ;
XNOR : 'xnor' ;
XOR : 'xor' ;
LC : '{' ;
VL : '|' ;
VLMIGT : '|->' ;
VLEQ : '|=' ;
VLEQGT : '|=>' ;
VLVL : '||' ;
RC : '}' ;
TI : '~' ;
TIAM : '~&' ;
TICA : '~^' ;
TIVL : '~|' ;
TIME_LITERAL : ( UNSIGNED_NUMBER | FIXED_POINT_NUMBER ) TIME_UNIT ;
fragment TIME_UNIT : [munpf]? 's' ;
DECIMAL_NUMBER : ( SIZE? DECIMAL_BASE )? UNSIGNED_NUMBER | SIZE? DECIMAL_BASE ( X_DIGIT | Z_DIGIT ) '_'* ;
BINARY_NUMBER : SIZE? BINARY_BASE BINARY_VALUE ;
OCTAL_NUMBER : SIZE? OCTAL_BASE OCTAL_VALUE ;
HEX_NUMBER : SIZE? HEX_BASE HEX_VALUE ;
fragment SIGN : [+\-] ;
fragment SIZE : NON_ZERO_UNSIGNED_NUMBER ;
fragment NON_ZERO_UNSIGNED_NUMBER : NON_ZERO_DECIMAL_DIGIT ( '_' | DECIMAL_DIGIT )* ;
REAL_NUMBER : FIXED_POINT_NUMBER | UNSIGNED_NUMBER ( '.' UNSIGNED_NUMBER )? EXP SIGN? UNSIGNED_NUMBER ;
fragment FIXED_POINT_NUMBER : UNSIGNED_NUMBER '.' UNSIGNED_NUMBER ;
fragment EXP : [eE] ;
fragment UNSIGNED_NUMBER : DECIMAL_DIGIT ( '_' | DECIMAL_DIGIT )* ;
fragment BINARY_VALUE : BINARY_DIGIT ( '_' | BINARY_DIGIT )* ;
fragment OCTAL_VALUE : OCTAL_DIGIT ( '_' | OCTAL_DIGIT )* ;
fragment HEX_VALUE : HEX_DIGIT ( '_' | HEX_DIGIT )* ;
fragment DECIMAL_BASE : '\'' [sS]? [dD] ;
fragment BINARY_BASE : '\'' [sS]? [bB] ;
fragment OCTAL_BASE : '\'' [sS]? [oO] ;
fragment HEX_BASE : '\'' [sS]? [hH] ;
fragment NON_ZERO_DECIMAL_DIGIT : [1-9] ;
fragment DECIMAL_DIGIT : [0-9] ;
fragment BINARY_DIGIT : [01] | X_DIGIT | Z_DIGIT ;
fragment OCTAL_DIGIT : [0-7] | X_DIGIT | Z_DIGIT ;
fragment HEX_DIGIT : [0-9a-fA-F] | X_DIGIT | Z_DIGIT ;
fragment X_DIGIT : [xX] ;
fragment Z_DIGIT : [zZ?] ;
UNBASED_UNSIZED_LITERAL : '\'0' | '\'1' | '\'' [xXzZ] ;
STRING_LITERAL : '"' ( ~["\\] | ESC_SEQ )*? '"' ;
fragment ESC_SEQ : '\\' . ;
COMMENT : ( ONE_LINE_COMMENT | BLOCK_COMMENT ) -> channel(COMMENTS) ;
fragment ONE_LINE_COMMENT : '//' COMMENT_TEXT NEWLINE ;
fragment BLOCK_COMMENT : '/*' COMMENT_TEXT '*/' ;
fragment COMMENT_TEXT : ASCII_ANY*? ;
fragment NEWLINE : '\r'? '\n' ;
ESCAPED_IDENTIFIER : '\\' ASCII_PRINTABLE_EXCEPT_SPACE* WHITE_SPACE ;
SIMPLE_IDENTIFIER : [a-zA-Z_] [a-zA-Z0-9_$]* ;
SYSTEM_TF_IDENTIFIER : '$' [a-zA-Z0-9_$][a-zA-Z0-9_$]* ;
WHITE_SPACE : [ \t\r\n]+ -> channel(HIDDEN) ;
fragment ASCII_ANY : [\u0000-\u007f] ;
fragment ASCII_PRINTABLE : [\u0020-\u007e] ;
fragment ASCII_PRINTABLE_EXCEPT_SPACE : [\u0021-\u007e] ;
//FINISH_NUMBER : [012] ;
//INIT_VAL : '1\'' [bB][01xX] | [01] ;
//EDGE_DESCRIPTOR : '01' | '10' | [zZxX][01] | [01][zZxX] ;
ZERO_OR_ONE_Z_OR_X : [01][zZxX] ;
//SCALAR_CONSTANT : ( '1'? '\'' [bB] )? [01] ;
//C_IDENTIFIER : [a-zA-Z_][a-zA-Z0-9_]* ;
mode LIBRARY_MODE;
LMCO : CO -> type(CO) ;
LMSC : SC -> type(SC), mode(DEFAULT_MODE) ;
LMGA : GA -> channel(DIRECTIVES), type(GA), pushMode(DIRECTIVE_MODE) ;
MIINCDIR : '-incdir' ;
LIBRARY_ESCAPED_IDENTIFIER : ESCAPED_IDENTIFIER -> type(ESCAPED_IDENTIFIER) ;
LIBRARY_SIMPLE_IDENTIFIER : SIMPLE_IDENTIFIER -> type(SIMPLE_IDENTIFIER) ;
LIBRARY_COMMENT : COMMENT -> channel(COMMENTS), type(COMMENT) ;
FILE_PATH_SPEC : ~[",; \t\r\n\\]+ | PATH_STRING ;
fragment PATH_STRING : STRING_LITERAL ;
LIBRARY_WHITE_SPACE : WHITE_SPACE -> channel(HIDDEN), type(WHITE_SPACE) ;
mode UDP_MODE;
UMLP : LP -> type(LP) ;
UMRP : RP -> type(RP) ;
UMMI : MI -> type(MI) ;
UMCL : CL -> type(CL) ;
UMSC : SC -> type(SC) ;
UMGA : GA -> channel(DIRECTIVES), type(GA), pushMode(DIRECTIVE_MODE) ;
//OUTPUT_SYMBOL : [01xX] ;
//LEVEL_SYMBOL : [01xX?bB] ;
OUTPUT_OR_LEVEL_SYMBOL : [01xX] ;
LEVEL_ONLY_SYMBOL : [?bB] ;
EDGE_SYMBOL : [rRfFpPnN*] ;
UDP_ENDTABLE : 'endtable' -> type(ENDTABLE), mode(DEFAULT_MODE) ;
UDP_COMMENT : COMMENT -> channel(COMMENTS), type(COMMENT) ;
UDP_WHITE_SPACE : WHITE_SPACE -> channel(HIDDEN), type(WHITE_SPACE) ;
mode DIRECTIVE_MODE;
FILE_DIRECTIVE : '__FILE__' -> channel(DIRECTIVES), popMode ;
LINE_DIRECTIVE_ : '__LINE__' -> channel(DIRECTIVES), popMode ;
BEGIN_KEYWORDS_DIRECTIVE : 'begin_keywords' -> channel(DIRECTIVES), mode(DIRECTIVE_TEXT_MODE) ;
CELLDEFINE_DIRECTIVE : 'celldefine' -> channel(DIRECTIVES), popMode ;
DEFAULT_NETTYPE_DIRECTIVE : 'default_nettype' -> channel(DIRECTIVES), mode(DIRECTIVE_TEXT_MODE) ;
DEFINE_DIRECTIVE : 'define' -> channel(DIRECTIVES), mode(DEFINE_DIRECTIVE_MODE) ;
ELSE_DIRECTIVE : 'else' -> channel(DIRECTIVES), popMode, mode(SOURCE_TEXT_MODE) ;
ELSIF_DIRECTIVE : 'elsif' -> channel(DIRECTIVES), popMode, mode(ELSIF_DIRECTIVE_MODE) ;
END_KEYWORDS_DIRECTIVE : 'end_keywords' -> channel(DIRECTIVES), popMode ;
ENDCELLDEFINE_DIRECTIVE : 'endcelldefine' -> channel(DIRECTIVES), popMode ;
ENDIF_DIRECTIVE : 'endif' -> channel(DIRECTIVES), popMode, popMode, popMode ;
IFDEF_DIRECTIVE : 'ifdef' -> channel(DIRECTIVES), mode(IFDEF_DIRECTIVE_MODE) ;
IFNDEF_DIRECTIVE : 'ifndef' -> channel(DIRECTIVES), mode(IFDEF_DIRECTIVE_MODE) ;
INCLUDE_DIRECTIVE : 'include' -> channel(DIRECTIVES), mode(DIRECTIVE_TEXT_MODE) ;
LINE_DIRECTIVE : 'line' -> channel(DIRECTIVES), mode(DIRECTIVE_TEXT_MODE) ;
NOUNCONNECTED_DRIVE_DIRECTIVE : 'nounconnected_drive' -> channel(DIRECTIVES), popMode ;
PRAGMA_DIRECTIVE : 'pragma' -> channel(DIRECTIVES), mode(DIRECTIVE_TEXT_MODE) ;
RESETALL_DIRECTIVE : 'resetall' -> channel(DIRECTIVES), popMode ;
TIMESCALE_DIRECTIVE : 'timescale' -> channel(DIRECTIVES), mode(DIRECTIVE_TEXT_MODE) ;
UNCONNECTED_DRIVE_DIRECTIVE : 'unconnected_drive' -> channel(DIRECTIVES), mode(DIRECTIVE_TEXT_MODE) ;
UNDEF_DIRECTIVE : 'undef' -> channel(DIRECTIVES), mode(UNDEF_DIRECTIVE_MODE) ;
UNDEFINEALL_DIRECTIVE : 'undefineall' -> channel(DIRECTIVES), popMode ;
MACRO_USAGE : DIRECTIVE_ID [ \t\r\n]*? MACRO_ARGS? -> channel(DIRECTIVES), popMode ;
fragment DIRECTIVE_ID : DIRECTIVE_ESCAPED_ID | DIRECTIVE_SIMPLE_ID ;
fragment DIRECTIVE_ESCAPED_ID : '\\' ASCII_PRINTABLE_EXCEPT_SPACE* WHITE_SPACE ;
fragment DIRECTIVE_SIMPLE_ID : [a-zA-Z_] [a-zA-Z0-9_$]* ;
fragment MACRO_ARGS : '(' ( MACRO_ARGS | ~[()] )* ')' ;
mode DIRECTIVE_TEXT_MODE;
DIRECTIVE_TEXT : COMMENT_TEXT NEWLINE -> channel(DIRECTIVES), popMode ;
mode DEFINE_DIRECTIVE_MODE;
DIRECTIVE_IDENTIFIER : DIRECTIVE_ID -> channel(DIRECTIVES), mode(MACRO_TEXT_MODE) ;
DIRECTIVE_COMMENT : COMMENT -> channel(COMMENTS) ;
DIRECTIVE_WHITE_SPACE : SPACE_TAB -> channel(HIDDEN) ;
DIRECTIVE_NEWLINE : NEWLINE -> channel(HIDDEN) ;
fragment SPACE_TAB : [ \t]+ ;
mode MACRO_TEXT_MODE;
MACRO_TEXT : ~[\r\n\\]+ -> channel(DIRECTIVES) ;
MACRO_ESC_NEWLINE : '\\' NEWLINE -> channel(DIRECTIVES) ;
MACRO_ESC_SEQ : ESC_SEQ -> channel(DIRECTIVES), type(MACRO_TEXT) ;
MACRO_NEWLINE : NEWLINE -> channel(HIDDEN), type(DIRECTIVE_NEWLINE), popMode ;
mode UNDEF_DIRECTIVE_MODE;
UNDEF_IDENTIFIER : DIRECTIVE_ID -> channel(DIRECTIVES), type(DIRECTIVE_IDENTIFIER), popMode ;
UNDEF_COMMENT : COMMENT -> channel(COMMENTS), type(DIRECTIVE_COMMENT) ;
UNDEF_WHITE_SPACE : SPACE_TAB -> channel(HIDDEN), type(DIRECTIVE_WHITE_SPACE) ;
UNDEF_NEWLINE : NEWLINE -> channel(HIDDEN), type(DIRECTIVE_NEWLINE) ;
mode IFDEF_DIRECTIVE_MODE;
IFDEF_IDENTIFIER : DIRECTIVE_ID -> channel(DIRECTIVES), type(DIRECTIVE_IDENTIFIER), pushMode(SOURCE_TEXT_MODE) ;
IFDEF_COMMENT : COMMENT -> channel(COMMENTS), type(DIRECTIVE_COMMENT) ;
IFDEF_WHITE_SPACE : SPACE_TAB -> channel(HIDDEN), type(DIRECTIVE_WHITE_SPACE) ;
IFDEF_NEWLINE : NEWLINE -> channel(HIDDEN), type(DIRECTIVE_NEWLINE) ;
mode ELSIF_DIRECTIVE_MODE;
ELSIF_IDENTIFIER : DIRECTIVE_ID -> channel(DIRECTIVES), type(DIRECTIVE_IDENTIFIER), mode(SOURCE_TEXT_MODE) ;
ELSIF_COMMENT : COMMENT -> channel(COMMENTS), type(DIRECTIVE_COMMENT) ;
ELSIF_WHITE_SPACE : SPACE_TAB -> channel(HIDDEN), type(DIRECTIVE_WHITE_SPACE) ;
ELSIF_NEWLINE : NEWLINE -> channel(HIDDEN), type(DIRECTIVE_NEWLINE) ;
mode SOURCE_TEXT_MODE;
SOURCE_TEXT : ~'`'+ -> channel(DIRECTIVES) ;
STGA : GA -> channel(DIRECTIVES), type(GA), pushMode(DIRECTIVE_MODE) ;
