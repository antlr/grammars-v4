source_text
 description
  package_declaration
   package
   package_identifier
    identifier
     simple_identifier
      p
   ;
   pkg_decl_item
    package_item
     package_item_declaration
      function_declaration
       function
       function_body_declaration
        function_data_type_or_implicit
         data_type_or_void
          data_type
           integer_atom_type
            int
        function_identifier
         identifier
          simple_identifier
           f
        (
        tf_port_list
         tf_port_item
        )
        ;
        function_statement_or_null
         function_statement
          statement
           statement_item
            jump_statement
             return
             expression
              primary
               primary_literal
                number
                 integral_number
                  decimal_number
                   unsigned_number
                    1
             ;
        endfunction
   endpackage
 description
  package_declaration
   package
   package_identifier
    identifier
     simple_identifier
      p2
   ;
   pkg_decl_item
    package_item
     package_item_declaration
      function_declaration
       function
       function_body_declaration
        function_data_type_or_implicit
         data_type_or_void
          data_type
           integer_atom_type
            int
        function_identifier
         identifier
          simple_identifier
           f
        (
        tf_port_list
         tf_port_item
        )
        ;
        function_statement_or_null
         function_statement
          statement
           statement_item
            jump_statement
             return
             expression
              primary
               primary_literal
                number
                 integral_number
                  decimal_number
                   unsigned_number
                    1
             ;
        endfunction
   endpackage
 description
  module_declaration
   module_header
    module_keyword
     module
    module_identifier
     identifier
      simple_identifier
       top
    ;
   module_item
    module_common_item
     module_item_declaration
      package_item_declaration
       data_declaration
        package_import_declaration
         import
         package_import_item
          package_identifier
           identifier
            simple_identifier
             p
          ::
          *
         ;
   module_item
    module_common_item
     module_item_declaration
      package_item_declaration
       data_declaration
        data_type
         integer_atom_type
          int
        list_of_variable_decl_assignments
         variable_decl_assignment
          variable_identifier
           identifier
            simple_identifier
             x
        ;
   module_item
    module_common_item
     conditional_generate_construct
      if_generate_construct
       if
       (
       constant_expression
        constant_primary
         primary_literal
          number
           integral_number
            decimal_number
             unsigned_number
              1
       )
       generate_block
        begin
        generate_block_name
         :
         generate_block_identifier
          identifier
           simple_identifier
            b
        generate_item
         initial_construct
          initial
          statement_or_null
           statement
            statement_item
             blocking_assignment
              operator_assignment
               variable_lvalue
                hierarchical_identifier
                 identifier
                  simple_identifier
                   x
               assignment_operator
                =
               expression
                primary
                 identifier
                  simple_identifier
                   f
                 arg_list
                  (
                  list_of_arguments
                   ordered_arg
                  )
             ;
        end
   module_item
    module_common_item
     module_item_declaration
      package_item_declaration
       data_declaration
        package_import_declaration
         import
         package_import_item
          package_identifier
           identifier
            simple_identifier
             p2
          ::
          *
         ;
   endmodule
 <EOF>
