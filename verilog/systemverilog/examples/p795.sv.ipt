source_text
 description
  module_declaration
   module_header
    module_keyword
     module
    module_identifier
     identifier
      simple_identifier
       top
    ;
   module_item
    module_common_item
     module_item_declaration
      package_item_declaration
       parameter_declaration
        parameter
        list_of_param_assignments
         param_assignment
          parameter_identifier
           identifier
            simple_identifier
             genblk2
          =
          constant_param_expression
           constant_mintypmax_expression
            constant_expression
             constant_primary
              primary_literal
               number
                integral_number
                 decimal_number
                  unsigned_number
                   0
       ;
   module_item
    module_common_item
     module_item_declaration
      genvar_declaration
       genvar
       list_of_genvar_identifiers
        genvar_identifier
         identifier
          simple_identifier
           i
       ;
   module_item
    module_common_item
     conditional_generate_construct
      if_generate_construct
       if
       (
       constant_expression
        constant_primary
         identifier
          simple_identifier
           genblk2
       )
       generate_block
        generate_item
         data_declaration
          data_type
           integer_vector_type
            logic
          list_of_variable_decl_assignments
           variable_decl_assignment
            variable_identifier
             identifier
              simple_identifier
               a
          ;
       else
       generate_block
        generate_item
         data_declaration
          data_type
           integer_vector_type
            logic
          list_of_variable_decl_assignments
           variable_decl_assignment
            variable_identifier
             identifier
              simple_identifier
               b
          ;
   module_item
    module_common_item
     conditional_generate_construct
      if_generate_construct
       if
       (
       constant_expression
        constant_primary
         identifier
          simple_identifier
           genblk2
       )
       generate_block
        generate_item
         data_declaration
          data_type
           integer_vector_type
            logic
          list_of_variable_decl_assignments
           variable_decl_assignment
            variable_identifier
             identifier
              simple_identifier
               a
          ;
       else
       generate_block
        generate_item
         data_declaration
          data_type
           integer_vector_type
            logic
          list_of_variable_decl_assignments
           variable_decl_assignment
            variable_identifier
             identifier
              simple_identifier
               b
          ;
   module_item
    module_common_item
     loop_generate_construct
      for
      (
      genvar_initialization
       genvar_identifier
        identifier
         simple_identifier
          i
       =
       constant_expression
        constant_primary
         primary_literal
          number
           integral_number
            decimal_number
             unsigned_number
              0
      ;
      genvar_expression
       constant_expression
        constant_expression
         constant_primary
          identifier
           simple_identifier
            i
        <
        constant_expression
         constant_primary
          primary_literal
           number
            integral_number
             decimal_number
              unsigned_number
               1
      ;
      genvar_iteration
       genvar_identifier
        identifier
         simple_identifier
          i
       assignment_operator
        =
       genvar_expression
        constant_expression
         constant_expression
          constant_primary
           identifier
            simple_identifier
             i
         +
         constant_expression
          constant_primary
           primary_literal
            number
             integral_number
              decimal_number
               unsigned_number
                1
      )
      generate_block
       begin
       generate_block_name
        :
        generate_block_identifier
         identifier
          simple_identifier
           g1
       generate_item
        conditional_generate_construct
         if_generate_construct
          if
          (
          constant_expression
           constant_primary
            primary_literal
             number
              integral_number
               decimal_number
                unsigned_number
                 1
          )
          generate_block
           generate_item
            data_declaration
             data_type
              integer_vector_type
               logic
             list_of_variable_decl_assignments
              variable_decl_assignment
               variable_identifier
                identifier
                 simple_identifier
                  a
             ;
       end
   module_item
    module_common_item
     loop_generate_construct
      for
      (
      genvar_initialization
       genvar_identifier
        identifier
         simple_identifier
          i
       =
       constant_expression
        constant_primary
         primary_literal
          number
           integral_number
            decimal_number
             unsigned_number
              0
      ;
      genvar_expression
       constant_expression
        constant_expression
         constant_primary
          identifier
           simple_identifier
            i
        <
        constant_expression
         constant_primary
          primary_literal
           number
            integral_number
             decimal_number
              unsigned_number
               1
      ;
      genvar_iteration
       genvar_identifier
        identifier
         simple_identifier
          i
       assignment_operator
        =
       genvar_expression
        constant_expression
         constant_expression
          constant_primary
           identifier
            simple_identifier
             i
         +
         constant_expression
          constant_primary
           primary_literal
            number
             integral_number
              decimal_number
               unsigned_number
                1
      )
      generate_block
       generate_item
        conditional_generate_construct
         if_generate_construct
          if
          (
          constant_expression
           constant_primary
            primary_literal
             number
              integral_number
               decimal_number
                unsigned_number
                 1
          )
          generate_block
           generate_item
            data_declaration
             data_type
              integer_vector_type
               logic
             list_of_variable_decl_assignments
              variable_decl_assignment
               variable_identifier
                identifier
                 simple_identifier
                  a
             ;
   module_item
    module_common_item
     conditional_generate_construct
      if_generate_construct
       if
       (
       constant_expression
        constant_primary
         primary_literal
          number
           integral_number
            decimal_number
             unsigned_number
              1
       )
       generate_block
        generate_item
         data_declaration
          data_type
           integer_vector_type
            logic
          list_of_variable_decl_assignments
           variable_decl_assignment
            variable_identifier
             identifier
              simple_identifier
               a
          ;
   endmodule
 <EOF>
