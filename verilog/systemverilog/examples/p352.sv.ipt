source_text
 description
  module_declaration
   module_header
    module_keyword
     module
    module_identifier
     identifier
      simple_identifier
       m
    ;
   module_item
    module_common_item
     module_item_declaration
      package_item_declaration
       data_declaration
        data_type
         integer_vector_type
          bit
        list_of_variable_decl_assignments
         variable_decl_assignment
          variable_identifier
           identifier
            simple_identifier
             a
          =
          expression
           primary
            primary_literal
             number
              integral_number
               binary_number
                size
                 1
                binary_base
                 'b
                binary_value
                 1
        ;
   module_item
    module_common_item
     module_item_declaration
      clocking_declaration
       default
       clocking
       clocking_identifier
        identifier
         simple_identifier
          cb
       clocking_event
        @
        (
        event_expression
         edge_identifier
          posedge
         expression
          primary
           hierarchical_identifier
            identifier
             simple_identifier
              clk
        )
       ;
       clocking_item
        clocking_direction
         output
        list_of_clocking_decl_assign
         clocking_decl_assign
          signal_identifier
           identifier
            simple_identifier
             a
        ;
       endclocking
   module_item
    module_common_item
     initial_construct
      initial
      statement_or_null
       statement
        statement_item
         seq_block
          begin
          statement_or_null
           statement
            statement_item
             procedural_timing_control_statement
              procedural_timing_control
               cycle_delay
                ##
                integral_number
                 decimal_number
                  unsigned_number
                   1
              statement_or_null
               ;
          statement_or_null
           statement
            statement_item
             nonblocking_assignment
              variable_lvalue
               hierarchical_identifier
                hier_ref
                 identifier
                  simple_identifier
                   cb
                 .
                identifier
                 simple_identifier
                  a
              <=
              expression
               primary
                primary_literal
                 number
                  integral_number
                   binary_number
                    size
                     1
                    binary_base
                     'b
                    binary_value
                     0
             ;
          statement_or_null
           statement
            statement_item
             procedural_timing_control_statement
              procedural_timing_control
               event_control
                @
                (
                event_expression
                 expression
                  primary
                   hierarchical_identifier
                    identifier
                     simple_identifier
                      x
                )
              statement_or_null
               ;
          statement_or_null
           statement
            statement_item
             nonblocking_assignment
              variable_lvalue
               hierarchical_identifier
                hier_ref
                 identifier
                  simple_identifier
                   cb
                 .
                identifier
                 simple_identifier
                  a
              <=
              expression
               primary
                primary_literal
                 number
                  integral_number
                   binary_number
                    size
                     1
                    binary_base
                     'b
                    binary_value
                     1
             ;
          end
   endmodule
 <EOF>
