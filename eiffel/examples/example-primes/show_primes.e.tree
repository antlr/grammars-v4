(class_declaration (class_header class (class_name SHOW_PRIMES)) (inheritance (inherit_clause inherit (parent_list (parent (class_type (class_name ARGUMENTS)))))) (creators (creation_clause create (creation_procedure_list (creation_procedure (feature_name main))))) (features (feature_clause feature (feature_declaration_list (feature_declaration (new_feature_list (new_feature (extended_feature_name (feature_name main)))) (declaration_body (feature_value (attribute_or_routine (local_declarations local (entity_declaration_list (entity_declaration_group (identifier_list i , n) (type_mark : (type (class_or_tuple_type (class_type (class_name INTEGER)))))))) (feature_body (effective_routine (internal (routine_mark do) (compound (instruction (conditional if (then_part_list (then_part (expression (expression argument_count) = (expression (special_expression (manifest_constant (manifest_value (integer_constant 1)))))) then (compound (instruction (assignment (variable (variable_attribute (feature_name n))) := (expression argument))) (instruction (expression (expression ( (expression (special_expression (manifest_constant (manifest_value (integer_constant 1))))) )) . (expression to_integer))) (instruction (loop (initialization from (compound (instruction (assignment (variable (variable_attribute (feature_name i))) := (expression (special_expression (manifest_constant (manifest_value (integer_constant 2))))))))) (exit_condition until (expression (expression i) > (expression n))) (loop_body loop (compound (instruction (conditional if (then_part_list (then_part (expression (unqualified_call (feature_name is_prime) (actuals ( (actual_list (expression i)) )))) then (compound (instruction (expression (expression io) . (expression put_string))) (instruction (expression ( (expression (expression (expression i) . (expression out)) + (expression (special_expression (manifest_constant (manifest_value (manifest_string "%N")))))) ))) ;))) end)) ; (instruction (assignment (variable (variable_attribute (feature_name i))) := (expression (expression i) + (expression (special_expression (manifest_constant (manifest_value (integer_constant 1)))))))))) end))))) (else_part else (compound (instruction (expression (expression io) . (expression put_string))) (instruction (expression ( (expression (expression (expression (special_expression (manifest_constant (manifest_value (manifest_string "Usage: "))))) + (expression (unqualified_call (feature_name argument) (actuals ( (actual_list (expression (special_expression (manifest_constant (manifest_value (integer_constant 0)))))) ))))) + (expression (special_expression (manifest_constant (manifest_value (manifest_string " <n>%N")))))) ))))) end)))))) end)))) (feature_declaration (new_feature_list (new_feature (extended_feature_name (feature_name is_prime)))) (declaration_body (formal_arguments ( (entity_declaration_list (entity_declaration_group (identifier_list n) (type_mark : (type (class_or_tuple_type (class_type (class_name INTEGER))))))) )) (query_mark (type_mark : (type (class_or_tuple_type (class_type (class_name BOOLEAN)))))) (feature_value (attribute_or_routine (precondition require (assertion (assertion_clause (unlabeled_assertion_clause (expression (expression n) > (expression (special_expression (manifest_constant (manifest_value (integer_constant 1)))))))))) (local_declarations local (entity_declaration_list (entity_declaration_group (identifier_list i) (type_mark : (type (class_or_tuple_type (class_type (class_name INTEGER)))))))) (feature_body (effective_routine (internal (routine_mark do) (compound (instruction (assignment (variable (local Result)) := (expression (expression ( (expression (expression n) = (expression (special_expression (manifest_constant (manifest_value (integer_constant 2)))))) )) or (expression ( (expression (expression (expression n) \\ (expression (special_expression (manifest_constant (manifest_value (integer_constant 2)))))) /= (expression (special_expression (manifest_constant (manifest_value (integer_constant 0)))))) ))))) ; (instruction (loop (initialization from (compound (instruction (assignment (variable (variable_attribute (feature_name i))) := (expression (special_expression (manifest_constant (manifest_value (integer_constant 3))))))))) (exit_condition until (expression (expression not (expression Result)) or (expression (expression (expression i) * (expression i)) > (expression n)))) (loop_body loop (compound (instruction (assignment (variable (local Result)) := (expression ( (expression (expression (expression n) \\ (expression i)) /= (expression (special_expression (manifest_constant (manifest_value (integer_constant 0)))))) )))) ; (instruction (assignment (variable (variable_attribute (feature_name i))) := (expression (expression i) + (expression (special_expression (manifest_constant (manifest_value (integer_constant 2)))))))))) end)))))) end))))))) end <EOF>)