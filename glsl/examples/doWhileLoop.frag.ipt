translation_unit
 external_declaration
  declaration
   init_declarator_list
    single_declaration
     fully_specified_type
      type_qualifier
       single_type_qualifier
        storage_qualifier
         uniform
      type_specifier
       type_specifier_nonarray
        vec4
     typeless_declaration
      bigColor
   ;
 external_declaration
  declaration
   init_declarator_list
    single_declaration
     fully_specified_type
      type_qualifier
       single_type_qualifier
        storage_qualifier
         varying
      type_specifier
       type_specifier_nonarray
        vec4
     typeless_declaration
      BaseColor
   ;
 external_declaration
  declaration
   init_declarator_list
    single_declaration
     fully_specified_type
      type_qualifier
       single_type_qualifier
        storage_qualifier
         uniform
      type_specifier
       type_specifier_nonarray
        float
     typeless_declaration
      d
   ;
 external_declaration
  function_definition
   function_prototype
    fully_specified_type
     type_specifier
      type_specifier_nonarray
       void
    main
    (
    )
   compound_statement_no_new_scope
    {
    statement_list
     statement
      simple_statement
       declaration_statement
        declaration
         init_declarator_list
          single_declaration
           fully_specified_type
            type_specifier
             type_specifier_nonarray
              vec4
           typeless_declaration
            color
            =
            initializer
             assignment_expression
              constant_expression
               binary_expression
                unary_expression
                 postfix_expression
                  primary_expression
                   variable_identifier
                    BaseColor
         ;
     statement
      simple_statement
       iteration_statement
        do
        statement
         compound_statement
          {
          statement_list
           statement
            simple_statement
             expression_statement
              expression
               assignment_expression
                unary_expression
                 postfix_expression
                  primary_expression
                   variable_identifier
                    color
                assignment_operator
                 +=
                assignment_expression
                 constant_expression
                  binary_expression
                   unary_expression
                    postfix_expression
                     primary_expression
                      variable_identifier
                       bigColor
              ;
          }
        while
        (
        expression
         assignment_expression
          constant_expression
           binary_expression
            binary_expression
             unary_expression
              postfix_expression
               postfix_expression
                primary_expression
                 variable_identifier
                  color
               .
               field_selection
                variable_identifier
                 x
            <
            binary_expression
             unary_expression
              postfix_expression
               primary_expression
                variable_identifier
                 d
        )
        ;
     statement
      simple_statement
       expression_statement
        expression
         assignment_expression
          unary_expression
           postfix_expression
            primary_expression
             variable_identifier
              gl_FragColor
          assignment_operator
           =
          assignment_expression
           constant_expression
            binary_expression
             unary_expression
              postfix_expression
               primary_expression
                variable_identifier
                 color
        ;
    }
 <EOF>
