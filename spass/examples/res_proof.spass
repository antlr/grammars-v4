begin_problem(ProofDemo).

list_of_descriptions.
name({*test.dfg*}).
author({*SPASS*}).
status(unsatisfiable).
description({*File generated by SPASS containing a proof.*}).
end_of_list.

list_of_symbols.
functions[(skf1, 1)].
predicates[(P, 2)].
end_of_list.

list_of_clauses(conjectures, cnf).
clause(forall([U],or(P(U,skf1(U)))),1).
clause(forall([U],or(not(P(skf1(U),U)))),2).
clause(forall([V,U,W],or(equal(U,V),equal(V,W),equal(W,U))),3).
end_of_list.

list_of_proof(SPASS).
step(10,forall([V,U,W],or(equal(U,V),equal(V,skf1(W)),P(W,U))),SpR,[3,1]).
step(36,forall([V,U],or(equal(U,V),equal(V,skf1(skf1(U))))),GeR,[10,2]).
step(43,forall([V,U],or(equal(U,V),P(skf1(U),V))),SpR,[36,1]).
step(58,forall([V,U],or(not(P(U,skf1(V))),equal(V,U))),SpL,[36,2]).
step(86,forall([V,U],or(equal(U,skf1(V)),equal(V,skf1(U)))),GeR,[43,58]).
step(87,forall([U],or(not(equal(U,U)),equal(skf1(U),U))),EqF,[86,86]).
step(124,forall([U],or(equal(skf1(U),U))),Obv,[87]).
step(129,forall([U],or(P(U,U))),Rew,[124,1]).
step(130,forall([U],or(not(P(U,U)))),Rew,[124,2]).
step(213,or(false),ClR,[129,130]).
end_of_list.

end_problem.