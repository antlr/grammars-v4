(compilationUnit (typeDeclaration (classOrInterfaceModifier public) (classDeclaration class ExampleInvocableMethod (classBody { (classBodyDeclaration (modifier (classOrInterfaceModifier (annotation @ (annotationName (qualifiedName InvocableMethod)) ( (elementValuePairs (elementValuePair label = (elementValue (expression (primary (literal 'Get Account Names'))))) (elementValuePair description = (elementValue (expression (primary (literal 'Returns the list of account names corresponding to the specified account IDs.'))))) (elementValuePair category = (elementValue (expression (primary (literal 'Account')))))) )))) (modifier (classOrInterfaceModifier public)) (modifier (classOrInterfaceModifier static)) (memberDeclaration (methodDeclaration (type_ (classOrInterfaceType List (typeArguments < (typeArgument (type_ (classOrInterfaceType String))) >))) getAccountNames (formalParameters ( (formalParameterList (formalParameter (type_ (classOrInterfaceType List (typeArguments < (typeArgument (type_ (classOrInterfaceType ID))) >))) (variableDeclaratorId ids))) )) (methodBody (block { (blockStatement (localVariableDeclarationStatement (localVariableDeclaration (type_ (classOrInterfaceType List (typeArguments < (typeArgument (type_ (classOrInterfaceType String))) >))) (variableDeclarators (variableDeclarator (variableDeclaratorId accountNames) = (variableInitializer (expression new (creator (createdName List (typeArgumentsOrDiamond (typeArguments < (typeArgument (type_ (classOrInterfaceType String))) >))) (classCreatorRest (arguments ( ))))))))) ;)) (blockStatement (localVariableDeclarationStatement (localVariableDeclaration (type_ (classOrInterfaceType List (typeArguments < (typeArgument (type_ (classOrInterfaceType Account))) >))) (variableDeclarators (variableDeclarator (variableDeclaratorId accounts) = (variableInitializer (expression (primary [SELECT Name FROM Account WHERE Id in :ids])))))) ;)) (blockStatement (statement for ( (forControl (enhancedForControl (type_ (classOrInterfaceType Account)) (variableDeclaratorId account) : (expression (primary accounts)))) ) (statement (block { (blockStatement (statement (statementExpression (expression (expression (expression (primary accountNames)) . add) ( (expressionList (expression (expression (primary account)) . Name)) ))) ;)) })))) (blockStatement (statement return (expression (primary accountNames)) ;)) }))))) }))) <EOF>)