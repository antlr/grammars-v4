compilationUnit
 translationUnit
  externalDeclaration
   functionDefinition
    declarationSpecifiers
     declarationSpecifier
      typeSpecifier
       int
    declarator
     directDeclarator
      directDeclarator
       main
      (
      )
    compoundStatement
     {
     blockItemList
      blockItem
       declaration
        declarationSpecifiers
         declarationSpecifier
          typeSpecifier
           int
        initDeclaratorList
         initDeclarator
          declarator
           directDeclarator
            i
         ,
         initDeclarator
          declarator
           directDeclarator
            sum
          =
          initializer
           assignmentExpression
            conditionalExpression
             logicalOrExpression
              logicalAndExpression
               inclusiveOrExpression
                exclusiveOrExpression
                 andExpression
                  equalityExpression
                   relationalExpression
                    shiftExpression
                     additiveExpression
                      multiplicativeExpression
                       castExpression
                        unaryExpression
                         postfixExpression
                          primaryExpression
                           0
        ;
      blockItem
       statement
        iterationStatement
         for
         (
         forCondition
          expression
           assignmentExpression
            unaryExpression
             postfixExpression
              primaryExpression
               i
            assignmentOperator
             =
            assignmentExpression
             conditionalExpression
              logicalOrExpression
               logicalAndExpression
                inclusiveOrExpression
                 exclusiveOrExpression
                  andExpression
                   equalityExpression
                    relationalExpression
                     shiftExpression
                      additiveExpression
                       multiplicativeExpression
                        castExpression
                         unaryExpression
                          postfixExpression
                           primaryExpression
                            1
          ;
          forExpression
           assignmentExpression
            conditionalExpression
             logicalOrExpression
              logicalAndExpression
               inclusiveOrExpression
                exclusiveOrExpression
                 andExpression
                  equalityExpression
                   relationalExpression
                    shiftExpression
                     additiveExpression
                      multiplicativeExpression
                       castExpression
                        unaryExpression
                         postfixExpression
                          primaryExpression
                           i
                    <=
                    shiftExpression
                     additiveExpression
                      multiplicativeExpression
                       castExpression
                        unaryExpression
                         postfixExpression
                          primaryExpression
                           LAST
          ;
          forExpression
           assignmentExpression
            conditionalExpression
             logicalOrExpression
              logicalAndExpression
               inclusiveOrExpression
                exclusiveOrExpression
                 andExpression
                  equalityExpression
                   relationalExpression
                    shiftExpression
                     additiveExpression
                      multiplicativeExpression
                       castExpression
                        unaryExpression
                         postfixExpression
                          primaryExpression
                           i
                          ++
         )
         statement
          compoundStatement
           {
           blockItemList
            blockItem
             statement
              expressionStatement
               expression
                assignmentExpression
                 unaryExpression
                  postfixExpression
                   primaryExpression
                    sum
                 assignmentOperator
                  +=
                 assignmentExpression
                  conditionalExpression
                   logicalOrExpression
                    logicalAndExpression
                     inclusiveOrExpression
                      exclusiveOrExpression
                       andExpression
                        equalityExpression
                         relationalExpression
                          shiftExpression
                           additiveExpression
                            multiplicativeExpression
                             castExpression
                              unaryExpression
                               postfixExpression
                                primaryExpression
                                 i
               ;
           }
      blockItem
       statement
        expressionStatement
         expression
          assignmentExpression
           conditionalExpression
            logicalOrExpression
             logicalAndExpression
              inclusiveOrExpression
               exclusiveOrExpression
                andExpression
                 equalityExpression
                  relationalExpression
                   shiftExpression
                    additiveExpression
                     multiplicativeExpression
                      castExpression
                       unaryExpression
                        postfixExpression
                         primaryExpression
                          printf
                         (
                         argumentExpressionList
                          assignmentExpression
                           conditionalExpression
                            logicalOrExpression
                             logicalAndExpression
                              inclusiveOrExpression
                               exclusiveOrExpression
                                andExpression
                                 equalityExpression
                                  relationalExpression
                                   shiftExpression
                                    additiveExpression
                                     multiplicativeExpression
                                      castExpression
                                       unaryExpression
                                        postfixExpression
                                         primaryExpression
                                          "sum = %d\n"
                          ,
                          assignmentExpression
                           conditionalExpression
                            logicalOrExpression
                             logicalAndExpression
                              inclusiveOrExpression
                               exclusiveOrExpression
                                andExpression
                                 equalityExpression
                                  relationalExpression
                                   shiftExpression
                                    additiveExpression
                                     multiplicativeExpression
                                      castExpression
                                       unaryExpression
                                        postfixExpression
                                         primaryExpression
                                          sum
                         )
         ;
      blockItem
       statement
        jumpStatement
         return
         expression
          assignmentExpression
           conditionalExpression
            logicalOrExpression
             logicalAndExpression
              inclusiveOrExpression
               exclusiveOrExpression
                andExpression
                 equalityExpression
                  relationalExpression
                   shiftExpression
                    additiveExpression
                     multiplicativeExpression
                      castExpression
                       unaryExpression
                        postfixExpression
                         primaryExpression
                          0
         ;
     }
 <EOF>
