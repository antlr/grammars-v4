compilationUnit
 translationUnit
  externalDeclaration
   declaration
    declarationSpecifiers
     declarationSpecifier
      typeSpecifier
       void
    initDeclaratorList
     initDeclarator
      declarator
       directDeclarator
        directDeclarator
         aX
        (
        parameterTypeList
         parameterList
          parameterDeclaration
           declarationSpecifiers2
            declarationSpecifier
             typeSpecifier
              void
        )
    ;
  externalDeclaration
   declaration
    declarationSpecifiers
     declarationSpecifier
      typeSpecifier
       int
    initDeclaratorList
     initDeclarator
      declarator
       directDeclarator
        directDeclarator
         a1
        (
        parameterTypeList
         parameterList
          parameterDeclaration
           declarationSpecifiers
            declarationSpecifier
             typeSpecifier
              int
           declarator
            directDeclarator
             param1
        )
    ;
  externalDeclaration
   declaration
    declarationSpecifiers
     declarationSpecifier
      typeSpecifier
       int
    initDeclaratorList
     initDeclarator
      declarator
       directDeclarator
        directDeclarator
         a2
        (
        parameterTypeList
         parameterList
          parameterDeclaration
           declarationSpecifiers
            declarationSpecifier
             typeSpecifier
              int
           declarator
            directDeclarator
             param1
          ,
          parameterDeclaration
           declarationSpecifiers2
            declarationSpecifier
             typeSpecifier
              typedefName
               param2
        )
    ;
  externalDeclaration
   declaration
    declarationSpecifiers
     declarationSpecifier
      typeSpecifier
       void
    initDeclaratorList
     initDeclarator
      declarator
       directDeclarator
        directDeclarator
         a3
        (
        )
    ;
  externalDeclaration
   declaration
    declarationSpecifiers
     declarationSpecifier
      typeSpecifier
       void
    initDeclaratorList
     initDeclarator
      declarator
       directDeclarator
        directDeclarator
         a3
        (
        parameterTypeList
         parameterList
          parameterDeclaration
           declarationSpecifiers2
            declarationSpecifier
             typeSpecifier
              void
        )
    ;
  externalDeclaration
   functionDefinition
    declarationSpecifiers
     declarationSpecifier
      typeSpecifier
       int
    declarator
     directDeclarator
      directDeclarator
       f
      (
      parameterTypeList
       parameterList
        parameterDeclaration
         declarationSpecifiers
          declarationSpecifier
           typeSpecifier
            int
         declarator
          directDeclarator
           arg1
        ,
        parameterDeclaration
         declarationSpecifiers
          declarationSpecifier
           typeSpecifier
            char
         declarator
          directDeclarator
           arg2
      )
    compoundStatement
     {
     blockItemList
      blockItem
       statement
        expressionStatement
         expression
          assignmentExpression
           conditionalExpression
            logicalOrExpression
             logicalAndExpression
              inclusiveOrExpression
               exclusiveOrExpression
                andExpression
                 equalityExpression
                  relationalExpression
                   shiftExpression
                    additiveExpression
                     multiplicativeExpression
                      castExpression
                       unaryExpression
                        postfixExpression
                         primaryExpression
                          a1
                         (
                         argumentExpressionList
                          assignmentExpression
                           conditionalExpression
                            logicalOrExpression
                             logicalAndExpression
                              inclusiveOrExpression
                               exclusiveOrExpression
                                andExpression
                                 equalityExpression
                                  relationalExpression
                                   shiftExpression
                                    additiveExpression
                                     multiplicativeExpression
                                      castExpression
                                       unaryExpression
                                        postfixExpression
                                         primaryExpression
                                          arg1
                         )
         ;
      blockItem
       statement
        expressionStatement
         expression
          assignmentExpression
           conditionalExpression
            logicalOrExpression
             logicalAndExpression
              inclusiveOrExpression
               exclusiveOrExpression
                andExpression
                 equalityExpression
                  relationalExpression
                   shiftExpression
                    additiveExpression
                     multiplicativeExpression
                      castExpression
                       unaryExpression
                        postfixExpression
                         primaryExpression
                          a2
                         (
                         argumentExpressionList
                          assignmentExpression
                           conditionalExpression
                            logicalOrExpression
                             logicalAndExpression
                              inclusiveOrExpression
                               exclusiveOrExpression
                                andExpression
                                 equalityExpression
                                  relationalExpression
                                   shiftExpression
                                    additiveExpression
                                     multiplicativeExpression
                                      castExpression
                                       unaryExpression
                                        postfixExpression
                                         primaryExpression
                                          arg1
                          ,
                          assignmentExpression
                           conditionalExpression
                            logicalOrExpression
                             logicalAndExpression
                              inclusiveOrExpression
                               exclusiveOrExpression
                                andExpression
                                 equalityExpression
                                  relationalExpression
                                   shiftExpression
                                    additiveExpression
                                     multiplicativeExpression
                                      castExpression
                                       unaryExpression
                                        postfixExpression
                                         primaryExpression
                                          arg2
                         )
         ;
      blockItem
       statement
        expressionStatement
         expression
          assignmentExpression
           conditionalExpression
            logicalOrExpression
             logicalAndExpression
              inclusiveOrExpression
               exclusiveOrExpression
                andExpression
                 equalityExpression
                  relationalExpression
                   shiftExpression
                    additiveExpression
                     multiplicativeExpression
                      castExpression
                       unaryExpression
                        postfixExpression
                         primaryExpression
                          a3
                         (
                         )
         ;
     }
 <EOF>
