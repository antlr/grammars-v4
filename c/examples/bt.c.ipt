compilationUnit
 translationUnit
  externalDeclaration
   declaration
    declarationSpecifiers
     declarationSpecifier
      typeSpecifier
       structOrUnionSpecifier
        structOrUnion
         struct
        tree_el
        {
        structDeclarationList
         structDeclaration
          specifierQualifierList
           typeSpecifier
            int
          structDeclaratorList
           structDeclarator
            declarator
             directDeclarator
              val
          ;
         structDeclaration
          specifierQualifierList
           typeSpecifier
            structOrUnionSpecifier
             structOrUnion
              struct
             tree_el
          structDeclaratorList
           structDeclarator
            declarator
             pointer
              *
             directDeclarator
              right
           ,
           structDeclarator
            declarator
             pointer
              *
             directDeclarator
              left
          ;
        }
    ;
  externalDeclaration
   declaration
    declarationSpecifiers
     declarationSpecifier
      storageClassSpecifier
       typedef
     declarationSpecifier
      typeSpecifier
       structOrUnionSpecifier
        structOrUnion
         struct
        tree_el
     declarationSpecifier
      typeSpecifier
       typedefName
        node
    ;
  externalDeclaration
   functionDefinition
    declarationSpecifiers
     declarationSpecifier
      typeSpecifier
       void
    declarator
     directDeclarator
      directDeclarator
       insert
      (
      parameterTypeList
       parameterList
        parameterDeclaration
         declarationSpecifiers
          declarationSpecifier
           typeSpecifier
            typedefName
             node
         declarator
          pointer
           *
           *
          directDeclarator
           tree
        ,
        parameterDeclaration
         declarationSpecifiers
          declarationSpecifier
           typeSpecifier
            typedefName
             node
         declarator
          pointer
           *
          directDeclarator
           item
      )
    compoundStatement
     {
     blockItemList
      blockItem
       statement
        selectionStatement
         if
         (
         expression
          assignmentExpression
           conditionalExpression
            logicalOrExpression
             logicalAndExpression
              inclusiveOrExpression
               exclusiveOrExpression
                andExpression
                 equalityExpression
                  relationalExpression
                   shiftExpression
                    additiveExpression
                     multiplicativeExpression
                      castExpression
                       unaryExpression
                        unaryOperator
                         !
                        castExpression
                         unaryExpression
                          postfixExpression
                           primaryExpression
                            (
                            expression
                             assignmentExpression
                              conditionalExpression
                               logicalOrExpression
                                logicalAndExpression
                                 inclusiveOrExpression
                                  exclusiveOrExpression
                                   andExpression
                                    equalityExpression
                                     relationalExpression
                                      shiftExpression
                                       additiveExpression
                                        multiplicativeExpression
                                         castExpression
                                          unaryExpression
                                           unaryOperator
                                            *
                                           castExpression
                                            unaryExpression
                                             postfixExpression
                                              primaryExpression
                                               tree
                            )
         )
         statement
          compoundStatement
           {
           blockItemList
            blockItem
             statement
              expressionStatement
               expression
                assignmentExpression
                 unaryExpression
                  unaryOperator
                   *
                  castExpression
                   unaryExpression
                    postfixExpression
                     primaryExpression
                      tree
                 assignmentOperator
                  =
                 assignmentExpression
                  conditionalExpression
                   logicalOrExpression
                    logicalAndExpression
                     inclusiveOrExpression
                      exclusiveOrExpression
                       andExpression
                        equalityExpression
                         relationalExpression
                          shiftExpression
                           additiveExpression
                            multiplicativeExpression
                             castExpression
                              unaryExpression
                               postfixExpression
                                primaryExpression
                                 item
               ;
            blockItem
             statement
              jumpStatement
               return
               ;
           }
      blockItem
       statement
        selectionStatement
         if
         (
         expression
          assignmentExpression
           conditionalExpression
            logicalOrExpression
             logicalAndExpression
              inclusiveOrExpression
               exclusiveOrExpression
                andExpression
                 equalityExpression
                  relationalExpression
                   shiftExpression
                    additiveExpression
                     multiplicativeExpression
                      castExpression
                       unaryExpression
                        postfixExpression
                         primaryExpression
                          item
                         ->
                         val
                   <
                   shiftExpression
                    additiveExpression
                     multiplicativeExpression
                      castExpression
                       unaryExpression
                        postfixExpression
                         primaryExpression
                          (
                          expression
                           assignmentExpression
                            conditionalExpression
                             logicalOrExpression
                              logicalAndExpression
                               inclusiveOrExpression
                                exclusiveOrExpression
                                 andExpression
                                  equalityExpression
                                   relationalExpression
                                    shiftExpression
                                     additiveExpression
                                      multiplicativeExpression
                                       castExpression
                                        unaryExpression
                                         unaryOperator
                                          *
                                         castExpression
                                          unaryExpression
                                           postfixExpression
                                            primaryExpression
                                             tree
                          )
                         ->
                         val
         )
         statement
          expressionStatement
           expression
            assignmentExpression
             conditionalExpression
              logicalOrExpression
               logicalAndExpression
                inclusiveOrExpression
                 exclusiveOrExpression
                  andExpression
                   equalityExpression
                    relationalExpression
                     shiftExpression
                      additiveExpression
                       multiplicativeExpression
                        castExpression
                         unaryExpression
                          postfixExpression
                           primaryExpression
                            insert
                           (
                           argumentExpressionList
                            assignmentExpression
                             conditionalExpression
                              logicalOrExpression
                               logicalAndExpression
                                inclusiveOrExpression
                                 exclusiveOrExpression
                                  andExpression
                                   equalityExpression
                                    relationalExpression
                                     shiftExpression
                                      additiveExpression
                                       multiplicativeExpression
                                        castExpression
                                         unaryExpression
                                          unaryOperator
                                           &
                                          castExpression
                                           unaryExpression
                                            postfixExpression
                                             primaryExpression
                                              (
                                              expression
                                               assignmentExpression
                                                conditionalExpression
                                                 logicalOrExpression
                                                  logicalAndExpression
                                                   inclusiveOrExpression
                                                    exclusiveOrExpression
                                                     andExpression
                                                      equalityExpression
                                                       relationalExpression
                                                        shiftExpression
                                                         additiveExpression
                                                          multiplicativeExpression
                                                           castExpression
                                                            unaryExpression
                                                             unaryOperator
                                                              *
                                                             castExpression
                                                              unaryExpression
                                                               postfixExpression
                                                                primaryExpression
                                                                 tree
                                              )
                                             ->
                                             left
                            ,
                            assignmentExpression
                             conditionalExpression
                              logicalOrExpression
                               logicalAndExpression
                                inclusiveOrExpression
                                 exclusiveOrExpression
                                  andExpression
                                   equalityExpression
                                    relationalExpression
                                     shiftExpression
                                      additiveExpression
                                       multiplicativeExpression
                                        castExpression
                                         unaryExpression
                                          postfixExpression
                                           primaryExpression
                                            item
                           )
           ;
         else
         statement
          selectionStatement
           if
           (
           expression
            assignmentExpression
             conditionalExpression
              logicalOrExpression
               logicalAndExpression
                inclusiveOrExpression
                 exclusiveOrExpression
                  andExpression
                   equalityExpression
                    relationalExpression
                     shiftExpression
                      additiveExpression
                       multiplicativeExpression
                        castExpression
                         unaryExpression
                          postfixExpression
                           primaryExpression
                            item
                           ->
                           val
                     >
                     shiftExpression
                      additiveExpression
                       multiplicativeExpression
                        castExpression
                         unaryExpression
                          postfixExpression
                           primaryExpression
                            (
                            expression
                             assignmentExpression
                              conditionalExpression
                               logicalOrExpression
                                logicalAndExpression
                                 inclusiveOrExpression
                                  exclusiveOrExpression
                                   andExpression
                                    equalityExpression
                                     relationalExpression
                                      shiftExpression
                                       additiveExpression
                                        multiplicativeExpression
                                         castExpression
                                          unaryExpression
                                           unaryOperator
                                            *
                                           castExpression
                                            unaryExpression
                                             postfixExpression
                                              primaryExpression
                                               tree
                            )
                           ->
                           val
           )
           statement
            expressionStatement
             expression
              assignmentExpression
               conditionalExpression
                logicalOrExpression
                 logicalAndExpression
                  inclusiveOrExpression
                   exclusiveOrExpression
                    andExpression
                     equalityExpression
                      relationalExpression
                       shiftExpression
                        additiveExpression
                         multiplicativeExpression
                          castExpression
                           unaryExpression
                            postfixExpression
                             primaryExpression
                              insert
                             (
                             argumentExpressionList
                              assignmentExpression
                               conditionalExpression
                                logicalOrExpression
                                 logicalAndExpression
                                  inclusiveOrExpression
                                   exclusiveOrExpression
                                    andExpression
                                     equalityExpression
                                      relationalExpression
                                       shiftExpression
                                        additiveExpression
                                         multiplicativeExpression
                                          castExpression
                                           unaryExpression
                                            unaryOperator
                                             &
                                            castExpression
                                             unaryExpression
                                              postfixExpression
                                               primaryExpression
                                                (
                                                expression
                                                 assignmentExpression
                                                  conditionalExpression
                                                   logicalOrExpression
                                                    logicalAndExpression
                                                     inclusiveOrExpression
                                                      exclusiveOrExpression
                                                       andExpression
                                                        equalityExpression
                                                         relationalExpression
                                                          shiftExpression
                                                           additiveExpression
                                                            multiplicativeExpression
                                                             castExpression
                                                              unaryExpression
                                                               unaryOperator
                                                                *
                                                               castExpression
                                                                unaryExpression
                                                                 postfixExpression
                                                                  primaryExpression
                                                                   tree
                                                )
                                               ->
                                               right
                              ,
                              assignmentExpression
                               conditionalExpression
                                logicalOrExpression
                                 logicalAndExpression
                                  inclusiveOrExpression
                                   exclusiveOrExpression
                                    andExpression
                                     equalityExpression
                                      relationalExpression
                                       shiftExpression
                                        additiveExpression
                                         multiplicativeExpression
                                          castExpression
                                           unaryExpression
                                            postfixExpression
                                             primaryExpression
                                              item
                             )
             ;
     }
  externalDeclaration
   functionDefinition
    declarationSpecifiers
     declarationSpecifier
      typeSpecifier
       void
    declarator
     directDeclarator
      directDeclarator
       printout
      (
      parameterTypeList
       parameterList
        parameterDeclaration
         declarationSpecifiers
          declarationSpecifier
           typeSpecifier
            typedefName
             node
         declarator
          pointer
           *
          directDeclarator
           tree
      )
    compoundStatement
     {
     blockItemList
      blockItem
       statement
        selectionStatement
         if
         (
         expression
          assignmentExpression
           conditionalExpression
            logicalOrExpression
             logicalAndExpression
              inclusiveOrExpression
               exclusiveOrExpression
                andExpression
                 equalityExpression
                  relationalExpression
                   shiftExpression
                    additiveExpression
                     multiplicativeExpression
                      castExpression
                       unaryExpression
                        postfixExpression
                         primaryExpression
                          tree
                         ->
                         left
         )
         statement
          expressionStatement
           expression
            assignmentExpression
             conditionalExpression
              logicalOrExpression
               logicalAndExpression
                inclusiveOrExpression
                 exclusiveOrExpression
                  andExpression
                   equalityExpression
                    relationalExpression
                     shiftExpression
                      additiveExpression
                       multiplicativeExpression
                        castExpression
                         unaryExpression
                          postfixExpression
                           primaryExpression
                            printout
                           (
                           argumentExpressionList
                            assignmentExpression
                             conditionalExpression
                              logicalOrExpression
                               logicalAndExpression
                                inclusiveOrExpression
                                 exclusiveOrExpression
                                  andExpression
                                   equalityExpression
                                    relationalExpression
                                     shiftExpression
                                      additiveExpression
                                       multiplicativeExpression
                                        castExpression
                                         unaryExpression
                                          postfixExpression
                                           primaryExpression
                                            tree
                                           ->
                                           left
                           )
           ;
      blockItem
       statement
        expressionStatement
         expression
          assignmentExpression
           conditionalExpression
            logicalOrExpression
             logicalAndExpression
              inclusiveOrExpression
               exclusiveOrExpression
                andExpression
                 equalityExpression
                  relationalExpression
                   shiftExpression
                    additiveExpression
                     multiplicativeExpression
                      castExpression
                       unaryExpression
                        postfixExpression
                         primaryExpression
                          printf
                         (
                         argumentExpressionList
                          assignmentExpression
                           conditionalExpression
                            logicalOrExpression
                             logicalAndExpression
                              inclusiveOrExpression
                               exclusiveOrExpression
                                andExpression
                                 equalityExpression
                                  relationalExpression
                                   shiftExpression
                                    additiveExpression
                                     multiplicativeExpression
                                      castExpression
                                       unaryExpression
                                        postfixExpression
                                         primaryExpression
                                          "%d\n"
                          ,
                          assignmentExpression
                           conditionalExpression
                            logicalOrExpression
                             logicalAndExpression
                              inclusiveOrExpression
                               exclusiveOrExpression
                                andExpression
                                 equalityExpression
                                  relationalExpression
                                   shiftExpression
                                    additiveExpression
                                     multiplicativeExpression
                                      castExpression
                                       unaryExpression
                                        postfixExpression
                                         primaryExpression
                                          tree
                                         ->
                                         val
                         )
         ;
      blockItem
       statement
        selectionStatement
         if
         (
         expression
          assignmentExpression
           conditionalExpression
            logicalOrExpression
             logicalAndExpression
              inclusiveOrExpression
               exclusiveOrExpression
                andExpression
                 equalityExpression
                  relationalExpression
                   shiftExpression
                    additiveExpression
                     multiplicativeExpression
                      castExpression
                       unaryExpression
                        postfixExpression
                         primaryExpression
                          tree
                         ->
                         right
         )
         statement
          expressionStatement
           expression
            assignmentExpression
             conditionalExpression
              logicalOrExpression
               logicalAndExpression
                inclusiveOrExpression
                 exclusiveOrExpression
                  andExpression
                   equalityExpression
                    relationalExpression
                     shiftExpression
                      additiveExpression
                       multiplicativeExpression
                        castExpression
                         unaryExpression
                          postfixExpression
                           primaryExpression
                            printout
                           (
                           argumentExpressionList
                            assignmentExpression
                             conditionalExpression
                              logicalOrExpression
                               logicalAndExpression
                                inclusiveOrExpression
                                 exclusiveOrExpression
                                  andExpression
                                   equalityExpression
                                    relationalExpression
                                     shiftExpression
                                      additiveExpression
                                       multiplicativeExpression
                                        castExpression
                                         unaryExpression
                                          postfixExpression
                                           primaryExpression
                                            tree
                                           ->
                                           right
                           )
           ;
     }
  externalDeclaration
   functionDefinition
    declarationSpecifiers
     declarationSpecifier
      typeSpecifier
       void
    declarator
     directDeclarator
      directDeclarator
       main
      (
      )
    compoundStatement
     {
     blockItemList
      blockItem
       statement
        expressionStatement
         expression
          assignmentExpression
           conditionalExpression
            logicalOrExpression
             logicalAndExpression
              inclusiveOrExpression
               exclusiveOrExpression
                andExpression
                 equalityExpression
                  relationalExpression
                   shiftExpression
                    additiveExpression
                     multiplicativeExpression
                      castExpression
                       unaryExpression
                        postfixExpression
                         primaryExpression
                          node
                      *
                      castExpression
                       unaryExpression
                        postfixExpression
                         primaryExpression
                          curr
          ,
          assignmentExpression
           conditionalExpression
            logicalOrExpression
             logicalAndExpression
              inclusiveOrExpression
               exclusiveOrExpression
                andExpression
                 equalityExpression
                  relationalExpression
                   shiftExpression
                    additiveExpression
                     multiplicativeExpression
                      castExpression
                       unaryExpression
                        unaryOperator
                         *
                        castExpression
                         unaryExpression
                          postfixExpression
                           primaryExpression
                            root
         ;
      blockItem
       declaration
        declarationSpecifiers
         declarationSpecifier
          typeSpecifier
           int
         declarationSpecifier
          typeSpecifier
           typedefName
            i
        ;
      blockItem
       statement
        expressionStatement
         expression
          assignmentExpression
           unaryExpression
            postfixExpression
             primaryExpression
              root
           assignmentOperator
            =
           assignmentExpression
            conditionalExpression
             logicalOrExpression
              logicalAndExpression
               inclusiveOrExpression
                exclusiveOrExpression
                 andExpression
                  equalityExpression
                   relationalExpression
                    shiftExpression
                     additiveExpression
                      multiplicativeExpression
                       castExpression
                        unaryExpression
                         postfixExpression
                          primaryExpression
                           NULL
         ;
      blockItem
       statement
        iterationStatement
         for
         (
         forCondition
          expression
           assignmentExpression
            unaryExpression
             postfixExpression
              primaryExpression
               i
            assignmentOperator
             =
            assignmentExpression
             conditionalExpression
              logicalOrExpression
               logicalAndExpression
                inclusiveOrExpression
                 exclusiveOrExpression
                  andExpression
                   equalityExpression
                    relationalExpression
                     shiftExpression
                      additiveExpression
                       multiplicativeExpression
                        castExpression
                         unaryExpression
                          postfixExpression
                           primaryExpression
                            1
          ;
          forExpression
           assignmentExpression
            conditionalExpression
             logicalOrExpression
              logicalAndExpression
               inclusiveOrExpression
                exclusiveOrExpression
                 andExpression
                  equalityExpression
                   relationalExpression
                    shiftExpression
                     additiveExpression
                      multiplicativeExpression
                       castExpression
                        unaryExpression
                         postfixExpression
                          primaryExpression
                           i
                    <=
                    shiftExpression
                     additiveExpression
                      multiplicativeExpression
                       castExpression
                        unaryExpression
                         postfixExpression
                          primaryExpression
                           10
          ;
          forExpression
           assignmentExpression
            conditionalExpression
             logicalOrExpression
              logicalAndExpression
               inclusiveOrExpression
                exclusiveOrExpression
                 andExpression
                  equalityExpression
                   relationalExpression
                    shiftExpression
                     additiveExpression
                      multiplicativeExpression
                       castExpression
                        unaryExpression
                         postfixExpression
                          primaryExpression
                           i
                          ++
         )
         statement
          compoundStatement
           {
           blockItemList
            blockItem
             statement
              expressionStatement
               expression
                assignmentExpression
                 unaryExpression
                  postfixExpression
                   primaryExpression
                    curr
                 assignmentOperator
                  =
                 assignmentExpression
                  conditionalExpression
                   logicalOrExpression
                    logicalAndExpression
                     inclusiveOrExpression
                      exclusiveOrExpression
                       andExpression
                        equalityExpression
                         relationalExpression
                          shiftExpression
                           additiveExpression
                            multiplicativeExpression
                             castExpression
                              (
                              typeName
                               specifierQualifierList
                                typeSpecifier
                                 typedefName
                                  node
                               abstractDeclarator
                                pointer
                                 *
                              )
                              castExpression
                               unaryExpression
                                postfixExpression
                                 primaryExpression
                                  malloc
                                 (
                                 argumentExpressionList
                                  assignmentExpression
                                   conditionalExpression
                                    logicalOrExpression
                                     logicalAndExpression
                                      inclusiveOrExpression
                                       exclusiveOrExpression
                                        andExpression
                                         equalityExpression
                                          relationalExpression
                                           shiftExpression
                                            additiveExpression
                                             multiplicativeExpression
                                              castExpression
                                               unaryExpression
                                                sizeof
                                                postfixExpression
                                                 primaryExpression
                                                  (
                                                  expression
                                                   assignmentExpression
                                                    conditionalExpression
                                                     logicalOrExpression
                                                      logicalAndExpression
                                                       inclusiveOrExpression
                                                        exclusiveOrExpression
                                                         andExpression
                                                          equalityExpression
                                                           relationalExpression
                                                            shiftExpression
                                                             additiveExpression
                                                              multiplicativeExpression
                                                               castExpression
                                                                unaryExpression
                                                                 postfixExpression
                                                                  primaryExpression
                                                                   node
                                                  )
                                 )
               ;
            blockItem
             statement
              expressionStatement
               expression
                assignmentExpression
                 unaryExpression
                  postfixExpression
                   primaryExpression
                    curr
                   ->
                   left
                 assignmentOperator
                  =
                 assignmentExpression
                  unaryExpression
                   postfixExpression
                    primaryExpression
                     curr
                    ->
                    right
                  assignmentOperator
                   =
                  assignmentExpression
                   conditionalExpression
                    logicalOrExpression
                     logicalAndExpression
                      inclusiveOrExpression
                       exclusiveOrExpression
                        andExpression
                         equalityExpression
                          relationalExpression
                           shiftExpression
                            additiveExpression
                             multiplicativeExpression
                              castExpression
                               unaryExpression
                                postfixExpression
                                 primaryExpression
                                  NULL
               ;
            blockItem
             statement
              expressionStatement
               expression
                assignmentExpression
                 unaryExpression
                  postfixExpression
                   primaryExpression
                    curr
                   ->
                   val
                 assignmentOperator
                  =
                 assignmentExpression
                  conditionalExpression
                   logicalOrExpression
                    logicalAndExpression
                     inclusiveOrExpression
                      exclusiveOrExpression
                       andExpression
                        equalityExpression
                         relationalExpression
                          shiftExpression
                           additiveExpression
                            multiplicativeExpression
                             castExpression
                              unaryExpression
                               postfixExpression
                                primaryExpression
                                 rand
                                (
                                )
               ;
            blockItem
             statement
              expressionStatement
               expression
                assignmentExpression
                 conditionalExpression
                  logicalOrExpression
                   logicalAndExpression
                    inclusiveOrExpression
                     exclusiveOrExpression
                      andExpression
                       equalityExpression
                        relationalExpression
                         shiftExpression
                          additiveExpression
                           multiplicativeExpression
                            castExpression
                             unaryExpression
                              postfixExpression
                               primaryExpression
                                insert
                               (
                               argumentExpressionList
                                assignmentExpression
                                 conditionalExpression
                                  logicalOrExpression
                                   logicalAndExpression
                                    inclusiveOrExpression
                                     exclusiveOrExpression
                                      andExpression
                                       equalityExpression
                                        relationalExpression
                                         shiftExpression
                                          additiveExpression
                                           multiplicativeExpression
                                            castExpression
                                             unaryExpression
                                              unaryOperator
                                               &
                                              castExpression
                                               unaryExpression
                                                postfixExpression
                                                 primaryExpression
                                                  root
                                ,
                                assignmentExpression
                                 conditionalExpression
                                  logicalOrExpression
                                   logicalAndExpression
                                    inclusiveOrExpression
                                     exclusiveOrExpression
                                      andExpression
                                       equalityExpression
                                        relationalExpression
                                         shiftExpression
                                          additiveExpression
                                           multiplicativeExpression
                                            castExpression
                                             unaryExpression
                                              postfixExpression
                                               primaryExpression
                                                curr
                               )
               ;
           }
      blockItem
       statement
        expressionStatement
         expression
          assignmentExpression
           conditionalExpression
            logicalOrExpression
             logicalAndExpression
              inclusiveOrExpression
               exclusiveOrExpression
                andExpression
                 equalityExpression
                  relationalExpression
                   shiftExpression
                    additiveExpression
                     multiplicativeExpression
                      castExpression
                       unaryExpression
                        postfixExpression
                         primaryExpression
                          printout
                         (
                         argumentExpressionList
                          assignmentExpression
                           conditionalExpression
                            logicalOrExpression
                             logicalAndExpression
                              inclusiveOrExpression
                               exclusiveOrExpression
                                andExpression
                                 equalityExpression
                                  relationalExpression
                                   shiftExpression
                                    additiveExpression
                                     multiplicativeExpression
                                      castExpression
                                       unaryExpression
                                        postfixExpression
                                         primaryExpression
                                          root
                         )
         ;
     }
 <EOF>
