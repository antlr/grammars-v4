compilationUnit
 translationUnit
  externalDeclaration
   declaration
    declarationSpecifiers
     declarationSpecifier
      typeSpecifier
       structOrUnionSpecifier
        structOrUnion
         struct
        list_el
        {
        structDeclarationList
         structDeclaration
          specifierQualifierList
           typeSpecifier
            int
          structDeclaratorList
           structDeclarator
            declarator
             directDeclarator
              val
          ;
         structDeclaration
          specifierQualifierList
           typeSpecifier
            structOrUnionSpecifier
             structOrUnion
              struct
             list_el
          structDeclaratorList
           structDeclarator
            declarator
             pointer
              *
             directDeclarator
              next
          ;
        }
    ;
  externalDeclaration
   declaration
    declarationSpecifiers
     declarationSpecifier
      storageClassSpecifier
       typedef
     declarationSpecifier
      typeSpecifier
       structOrUnionSpecifier
        structOrUnion
         struct
        list_el
     declarationSpecifier
      typeSpecifier
       typedefName
        item
    ;
  externalDeclaration
   functionDefinition
    declarationSpecifiers
     declarationSpecifier
      typeSpecifier
       void
    declarator
     directDeclarator
      directDeclarator
       main
      (
      )
    compoundStatement
     {
     blockItemList
      blockItem
       statement
        expressionStatement
         expression
          assignmentExpression
           conditionalExpression
            logicalOrExpression
             logicalAndExpression
              inclusiveOrExpression
               exclusiveOrExpression
                andExpression
                 equalityExpression
                  relationalExpression
                   shiftExpression
                    additiveExpression
                     multiplicativeExpression
                      castExpression
                       unaryExpression
                        postfixExpression
                         primaryExpression
                          item
                      *
                      castExpression
                       unaryExpression
                        postfixExpression
                         primaryExpression
                          curr
          ,
          assignmentExpression
           conditionalExpression
            logicalOrExpression
             logicalAndExpression
              inclusiveOrExpression
               exclusiveOrExpression
                andExpression
                 equalityExpression
                  relationalExpression
                   shiftExpression
                    additiveExpression
                     multiplicativeExpression
                      castExpression
                       unaryExpression
                        unaryOperator
                         *
                        castExpression
                         unaryExpression
                          postfixExpression
                           primaryExpression
                            head
         ;
      blockItem
       declaration
        declarationSpecifiers
         declarationSpecifier
          typeSpecifier
           int
         declarationSpecifier
          typeSpecifier
           typedefName
            i
        ;
      blockItem
       statement
        expressionStatement
         expression
          assignmentExpression
           unaryExpression
            postfixExpression
             primaryExpression
              head
           assignmentOperator
            =
           assignmentExpression
            conditionalExpression
             logicalOrExpression
              logicalAndExpression
               inclusiveOrExpression
                exclusiveOrExpression
                 andExpression
                  equalityExpression
                   relationalExpression
                    shiftExpression
                     additiveExpression
                      multiplicativeExpression
                       castExpression
                        unaryExpression
                         postfixExpression
                          primaryExpression
                           NULL
         ;
      blockItem
       statement
        iterationStatement
         for
         (
         forCondition
          expression
           assignmentExpression
            unaryExpression
             postfixExpression
              primaryExpression
               i
            assignmentOperator
             =
            assignmentExpression
             conditionalExpression
              logicalOrExpression
               logicalAndExpression
                inclusiveOrExpression
                 exclusiveOrExpression
                  andExpression
                   equalityExpression
                    relationalExpression
                     shiftExpression
                      additiveExpression
                       multiplicativeExpression
                        castExpression
                         unaryExpression
                          postfixExpression
                           primaryExpression
                            1
          ;
          forExpression
           assignmentExpression
            conditionalExpression
             logicalOrExpression
              logicalAndExpression
               inclusiveOrExpression
                exclusiveOrExpression
                 andExpression
                  equalityExpression
                   relationalExpression
                    shiftExpression
                     additiveExpression
                      multiplicativeExpression
                       castExpression
                        unaryExpression
                         postfixExpression
                          primaryExpression
                           i
                    <=
                    shiftExpression
                     additiveExpression
                      multiplicativeExpression
                       castExpression
                        unaryExpression
                         postfixExpression
                          primaryExpression
                           10
          ;
          forExpression
           assignmentExpression
            conditionalExpression
             logicalOrExpression
              logicalAndExpression
               inclusiveOrExpression
                exclusiveOrExpression
                 andExpression
                  equalityExpression
                   relationalExpression
                    shiftExpression
                     additiveExpression
                      multiplicativeExpression
                       castExpression
                        unaryExpression
                         postfixExpression
                          primaryExpression
                           i
                          ++
         )
         statement
          compoundStatement
           {
           blockItemList
            blockItem
             statement
              expressionStatement
               expression
                assignmentExpression
                 unaryExpression
                  postfixExpression
                   primaryExpression
                    curr
                 assignmentOperator
                  =
                 assignmentExpression
                  conditionalExpression
                   logicalOrExpression
                    logicalAndExpression
                     inclusiveOrExpression
                      exclusiveOrExpression
                       andExpression
                        equalityExpression
                         relationalExpression
                          shiftExpression
                           additiveExpression
                            multiplicativeExpression
                             castExpression
                              (
                              typeName
                               specifierQualifierList
                                typeSpecifier
                                 typedefName
                                  item
                               abstractDeclarator
                                pointer
                                 *
                              )
                              castExpression
                               unaryExpression
                                postfixExpression
                                 primaryExpression
                                  malloc
                                 (
                                 argumentExpressionList
                                  assignmentExpression
                                   conditionalExpression
                                    logicalOrExpression
                                     logicalAndExpression
                                      inclusiveOrExpression
                                       exclusiveOrExpression
                                        andExpression
                                         equalityExpression
                                          relationalExpression
                                           shiftExpression
                                            additiveExpression
                                             multiplicativeExpression
                                              castExpression
                                               unaryExpression
                                                sizeof
                                                postfixExpression
                                                 primaryExpression
                                                  (
                                                  expression
                                                   assignmentExpression
                                                    conditionalExpression
                                                     logicalOrExpression
                                                      logicalAndExpression
                                                       inclusiveOrExpression
                                                        exclusiveOrExpression
                                                         andExpression
                                                          equalityExpression
                                                           relationalExpression
                                                            shiftExpression
                                                             additiveExpression
                                                              multiplicativeExpression
                                                               castExpression
                                                                unaryExpression
                                                                 postfixExpression
                                                                  primaryExpression
                                                                   item
                                                  )
                                 )
               ;
            blockItem
             statement
              expressionStatement
               expression
                assignmentExpression
                 unaryExpression
                  postfixExpression
                   primaryExpression
                    curr
                   ->
                   val
                 assignmentOperator
                  =
                 assignmentExpression
                  conditionalExpression
                   logicalOrExpression
                    logicalAndExpression
                     inclusiveOrExpression
                      exclusiveOrExpression
                       andExpression
                        equalityExpression
                         relationalExpression
                          shiftExpression
                           additiveExpression
                            multiplicativeExpression
                             castExpression
                              unaryExpression
                               postfixExpression
                                primaryExpression
                                 i
               ;
            blockItem
             statement
              expressionStatement
               expression
                assignmentExpression
                 unaryExpression
                  postfixExpression
                   primaryExpression
                    curr
                   ->
                   next
                 assignmentOperator
                  =
                 assignmentExpression
                  conditionalExpression
                   logicalOrExpression
                    logicalAndExpression
                     inclusiveOrExpression
                      exclusiveOrExpression
                       andExpression
                        equalityExpression
                         relationalExpression
                          shiftExpression
                           additiveExpression
                            multiplicativeExpression
                             castExpression
                              unaryExpression
                               postfixExpression
                                primaryExpression
                                 head
               ;
            blockItem
             statement
              expressionStatement
               expression
                assignmentExpression
                 unaryExpression
                  postfixExpression
                   primaryExpression
                    head
                 assignmentOperator
                  =
                 assignmentExpression
                  conditionalExpression
                   logicalOrExpression
                    logicalAndExpression
                     inclusiveOrExpression
                      exclusiveOrExpression
                       andExpression
                        equalityExpression
                         relationalExpression
                          shiftExpression
                           additiveExpression
                            multiplicativeExpression
                             castExpression
                              unaryExpression
                               postfixExpression
                                primaryExpression
                                 curr
               ;
           }
      blockItem
       statement
        expressionStatement
         expression
          assignmentExpression
           unaryExpression
            postfixExpression
             primaryExpression
              curr
           assignmentOperator
            =
           assignmentExpression
            conditionalExpression
             logicalOrExpression
              logicalAndExpression
               inclusiveOrExpression
                exclusiveOrExpression
                 andExpression
                  equalityExpression
                   relationalExpression
                    shiftExpression
                     additiveExpression
                      multiplicativeExpression
                       castExpression
                        unaryExpression
                         postfixExpression
                          primaryExpression
                           head
         ;
      blockItem
       statement
        iterationStatement
         while
         (
         expression
          assignmentExpression
           conditionalExpression
            logicalOrExpression
             logicalAndExpression
              inclusiveOrExpression
               exclusiveOrExpression
                andExpression
                 equalityExpression
                  relationalExpression
                   shiftExpression
                    additiveExpression
                     multiplicativeExpression
                      castExpression
                       unaryExpression
                        postfixExpression
                         primaryExpression
                          curr
         )
         statement
          compoundStatement
           {
           blockItemList
            blockItem
             statement
              expressionStatement
               expression
                assignmentExpression
                 conditionalExpression
                  logicalOrExpression
                   logicalAndExpression
                    inclusiveOrExpression
                     exclusiveOrExpression
                      andExpression
                       equalityExpression
                        relationalExpression
                         shiftExpression
                          additiveExpression
                           multiplicativeExpression
                            castExpression
                             unaryExpression
                              postfixExpression
                               primaryExpression
                                printf
                               (
                               argumentExpressionList
                                assignmentExpression
                                 conditionalExpression
                                  logicalOrExpression
                                   logicalAndExpression
                                    inclusiveOrExpression
                                     exclusiveOrExpression
                                      andExpression
                                       equalityExpression
                                        relationalExpression
                                         shiftExpression
                                          additiveExpression
                                           multiplicativeExpression
                                            castExpression
                                             unaryExpression
                                              postfixExpression
                                               primaryExpression
                                                "%d\n"
                                ,
                                assignmentExpression
                                 conditionalExpression
                                  logicalOrExpression
                                   logicalAndExpression
                                    inclusiveOrExpression
                                     exclusiveOrExpression
                                      andExpression
                                       equalityExpression
                                        relationalExpression
                                         shiftExpression
                                          additiveExpression
                                           multiplicativeExpression
                                            castExpression
                                             unaryExpression
                                              postfixExpression
                                               primaryExpression
                                                curr
                                               ->
                                               val
                               )
               ;
            blockItem
             statement
              expressionStatement
               expression
                assignmentExpression
                 unaryExpression
                  postfixExpression
                   primaryExpression
                    curr
                 assignmentOperator
                  =
                 assignmentExpression
                  conditionalExpression
                   logicalOrExpression
                    logicalAndExpression
                     inclusiveOrExpression
                      exclusiveOrExpression
                       andExpression
                        equalityExpression
                         relationalExpression
                          shiftExpression
                           additiveExpression
                            multiplicativeExpression
                             castExpression
                              unaryExpression
                               postfixExpression
                                primaryExpression
                                 curr
                                ->
                                next
               ;
           }
     }
 <EOF>
