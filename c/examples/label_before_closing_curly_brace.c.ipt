compilationUnit
 translationUnit
  externalDeclaration
   functionDefinition
    declarationSpecifiers
     declarationSpecifier
      typeSpecifier
       int
    declarator
     directDeclarator
      directDeclarator
       main
      (
      parameterTypeList
       parameterList
        parameterDeclaration
         declarationSpecifiers
          declarationSpecifier
           typeSpecifier
            int
         declarator
          directDeclarator
           argc
        ,
        parameterDeclaration
         declarationSpecifiers
          declarationSpecifier
           typeSpecifier
            char
         declarator
          pointer
           *
          directDeclarator
           directDeclarator
            argv
           [
           ]
      )
    compoundStatement
     {
     blockItemList
      blockItem
       declaration
        declarationSpecifiers
         declarationSpecifier
          typeSpecifier
           int
        initDeclaratorList
         initDeclarator
          declarator
           directDeclarator
            i
          =
          initializer
           assignmentExpression
            conditionalExpression
             logicalOrExpression
              logicalAndExpression
               inclusiveOrExpression
                exclusiveOrExpression
                 andExpression
                  equalityExpression
                   relationalExpression
                    shiftExpression
                     additiveExpression
                      multiplicativeExpression
                       castExpression
                        unaryExpression
                         postfixExpression
                          primaryExpression
                           0
        ;
      blockItem
       statement
        iterationStatement
         do
         statement
          compoundStatement
           {
           blockItemList
            blockItem
             statement
              expressionStatement
               expression
                assignmentExpression
                 conditionalExpression
                  logicalOrExpression
                   logicalAndExpression
                    inclusiveOrExpression
                     exclusiveOrExpression
                      andExpression
                       equalityExpression
                        relationalExpression
                         shiftExpression
                          additiveExpression
                           multiplicativeExpression
                            castExpression
                             unaryExpression
                              postfixExpression
                               primaryExpression
                                i
                               ++
               ;
            blockItem
             statement
              selectionStatement
               if
               (
               expression
                assignmentExpression
                 conditionalExpression
                  logicalOrExpression
                   logicalAndExpression
                    inclusiveOrExpression
                     exclusiveOrExpression
                      andExpression
                       equalityExpression
                        relationalExpression
                         shiftExpression
                          additiveExpression
                           multiplicativeExpression
                            castExpression
                             unaryExpression
                              postfixExpression
                               primaryExpression
                                i
                        ==
                        relationalExpression
                         shiftExpression
                          additiveExpression
                           multiplicativeExpression
                            castExpression
                             unaryExpression
                              postfixExpression
                               primaryExpression
                                5
               )
               statement
                compoundStatement
                 {
                 blockItemList
                  blockItem
                   statement
                    jumpStatement
                     goto
                     label
                     ;
                 }
            blockItem
             statement
              expressionStatement
               expression
                assignmentExpression
                 conditionalExpression
                  logicalOrExpression
                   logicalAndExpression
                    inclusiveOrExpression
                     exclusiveOrExpression
                      andExpression
                       equalityExpression
                        relationalExpression
                         shiftExpression
                          additiveExpression
                           multiplicativeExpression
                            castExpression
                             unaryExpression
                              postfixExpression
                               primaryExpression
                                printf
                               (
                               argumentExpressionList
                                assignmentExpression
                                 conditionalExpression
                                  logicalOrExpression
                                   logicalAndExpression
                                    inclusiveOrExpression
                                     exclusiveOrExpression
                                      andExpression
                                       equalityExpression
                                        relationalExpression
                                         shiftExpression
                                          additiveExpression
                                           multiplicativeExpression
                                            castExpression
                                             unaryExpression
                                              postfixExpression
                                               primaryExpression
                                                "%d\n"
                                ,
                                assignmentExpression
                                 conditionalExpression
                                  logicalOrExpression
                                   logicalAndExpression
                                    inclusiveOrExpression
                                     exclusiveOrExpression
                                      andExpression
                                       equalityExpression
                                        relationalExpression
                                         shiftExpression
                                          additiveExpression
                                           multiplicativeExpression
                                            castExpression
                                             unaryExpression
                                              postfixExpression
                                               primaryExpression
                                                i
                               )
               ;
            blockItem
             statement
              labeledStatement
               label
               :
           }
         while
         (
         expression
          assignmentExpression
           conditionalExpression
            logicalOrExpression
             logicalAndExpression
              inclusiveOrExpression
               exclusiveOrExpression
                andExpression
                 equalityExpression
                  relationalExpression
                   shiftExpression
                    additiveExpression
                     multiplicativeExpression
                      castExpression
                       unaryExpression
                        postfixExpression
                         primaryExpression
                          i
                   <
                   shiftExpression
                    additiveExpression
                     multiplicativeExpression
                      castExpression
                       unaryExpression
                        postfixExpression
                         primaryExpression
                          10
         )
         ;
     }
 <EOF>
