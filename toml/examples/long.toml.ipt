document
 expression
  comment
   ################################################################################
 \n
 expression
  comment
   ## Comment
 \n\n
 expression
  comment
   # Speak your mind with the hash symbol. They go from the symbol to the end of
 \n
 expression
  comment
   # the line.
 \n\n\n
 expression
  comment
   ################################################################################
 \n
 expression
  comment
   ## Table
 \n\n
 expression
  comment
   # Tables (also known as hash tables or dictionaries) are collections of
 \n
 expression
  comment
   # key/value pairs. They appear in square brackets on a line by themselves.
 \n\n
 expression
  table
   standard_table
    [
    key
     simple_key
      unquoted_key
       table
    ]
  comment
 \n\n
 expression
  key_value
   key
    simple_key
     unquoted_key
      key
   =
   value
    string
     "value"
  comment
   # Yeah, you can do this.
 \n\n
 expression
  comment
   # Nested tables are denoted by table names with dots in them. Name your tables
 \n
 expression
  comment
   # whatever crap you please, just don't use #, ., [ or ].
 \n\n
 expression
  table
   standard_table
    [
    key
     dotted_key
      simple_key
       unquoted_key
        table
      .
      simple_key
       unquoted_key
        subtable
    ]
  comment
 \n\n
 expression
  key_value
   key
    simple_key
     unquoted_key
      key
   =
   value
    string
     "another value"
  comment
 \n\n
 expression
  comment
   # You don't need to specify all the super-tables if you don't want to. TOML
 \n
 expression
  comment
   # knows how to do it for you.
 \n\n
 expression
  comment
   # [x] you
 \n
 expression
  comment
   # [x.y] don't
 \n
 expression
  comment
   # [x.y.z] need these
 \n
 expression
  table
   standard_table
    [
    key
     dotted_key
      simple_key
       unquoted_key
        x
      .
      simple_key
       unquoted_key
        y
      .
      simple_key
       unquoted_key
        z
      .
      simple_key
       unquoted_key
        w
    ]
  comment
   # for this to work
 \n\n\n
 expression
  comment
   ################################################################################
 \n
 expression
  comment
   ## Inline Table
 \n\n
 expression
  comment
   # Inline tables provide a more compact syntax for expressing tables. They are
 \n
 expression
  comment
   # especially useful for grouped data that can otherwise quickly become verbose.
 \n
 expression
  comment
   # Inline tables are enclosed in curly braces `{` and `}`. No newlines are
 \n
 expression
  comment
   # allowed between the curly braces unless they are valid within a value.
 \n\n
 expression
  table
   standard_table
    [
    key
     dotted_key
      simple_key
       unquoted_key
        table
      .
      simple_key
       unquoted_key
        inline
    ]
  comment
 \n\n
 expression
  key_value
   key
    simple_key
     unquoted_key
      name
   =
   value
    inline_table
     {
     inline_table_keyvals
      inline_table_keyvals_non_empty
       key
        simple_key
         unquoted_key
          first
       =
       value
        string
         "Tom"
       ,
       inline_table_keyvals_non_empty
        key
         simple_key
          unquoted_key
           last
        =
        value
         string
          "Preston-Werner"
     }
  comment
 \n
 expression
  key_value
   key
    simple_key
     unquoted_key
      point
   =
   value
    inline_table
     {
     inline_table_keyvals
      inline_table_keyvals_non_empty
       key
        simple_key
         unquoted_key
          x
       =
       value
        integer
         1
       ,
       inline_table_keyvals_non_empty
        key
         simple_key
          unquoted_key
           y
        =
        value
         integer
          2
     }
  comment
 \n\n\n
 expression
  comment
   ################################################################################
 \n
 expression
  comment
   ## String
 \n\n
 expression
  comment
   # There are four ways to express strings: basic, multi-line basic, literal, and
 \n
 expression
  comment
   # multi-line literal. All strings must contain only valid UTF-8 characters.
 \n\n
 expression
  table
   standard_table
    [
    key
     dotted_key
      simple_key
       unquoted_key
        string
      .
      simple_key
       unquoted_key
        basic
    ]
  comment
 \n\n
 expression
  key_value
   key
    simple_key
     unquoted_key
      basic
   =
   value
    string
     "I'm a string. \"You can quote me\". Name\tJos\u00E9\nLocation\tSF."
  comment
 \n\n
 expression
  table
   standard_table
    [
    key
     dotted_key
      simple_key
       unquoted_key
        string
      .
      simple_key
       unquoted_key
        multiline
    ]
  comment
 \n\n
 expression
  comment
   # The following strings are byte-for-byte equivalent:
 \n
 expression
  key_value
   key
    simple_key
     unquoted_key
      key1
   =
   value
    string
     "One\nTwo"
  comment
 \n
 expression
  key_value
   key
    simple_key
     unquoted_key
      key2
   =
   value
    string
     """One\nTwo"""
  comment
 \n
 expression
  key_value
   key
    simple_key
     unquoted_key
      key3
   =
   value
    string
     """\nOne\nTwo"""
  comment
 \n\n
 expression
  table
   standard_table
    [
    key
     dotted_key
      simple_key
       unquoted_key
        string
      .
      simple_key
       unquoted_key
        multiline
      .
      simple_key
       unquoted_key
        continued
    ]
  comment
 \n\n
 expression
  comment
   # The following strings are byte-for-byte equivalent:
 \n
 expression
  key_value
   key
    simple_key
     unquoted_key
      key1
   =
   value
    string
     "The quick brown fox jumps over the lazy dog."
  comment
 \n\n
 expression
  key_value
   key
    simple_key
     unquoted_key
      key2
   =
   value
    string
     """\nThe quick brown \\n  fox jumps over \\n    the lazy dog."""
  comment
 \n\n
 expression
  key_value
   key
    simple_key
     unquoted_key
      key3
   =
   value
    string
     """\\n       The quick brown \\n       fox jumps over \\n       the lazy dog.\\n       """
  comment
 \n\n
 expression
  table
   standard_table
    [
    key
     dotted_key
      simple_key
       unquoted_key
        string
      .
      simple_key
       unquoted_key
        literal
    ]
  comment
 \n\n
 expression
  comment
   # What you see is what you get.
 \n
 expression
  key_value
   key
    simple_key
     unquoted_key
      winpath
   =
   value
    string
     'C:\Users\nodejs\templates'
  comment
 \n
 expression
  key_value
   key
    simple_key
     unquoted_key
      winpath2
   =
   value
    string
     '\\ServerX\admin$\system32\'
  comment
 \n
 expression
  key_value
   key
    simple_key
     unquoted_key
      quoted
   =
   value
    string
     'Tom "Dubs" Preston-Werner'
  comment
 \n
 expression
  key_value
   key
    simple_key
     unquoted_key
      regex
   =
   value
    string
     '<\i\c*\s*>'
  comment
 \n\n\n
 expression
  table
   standard_table
    [
    key
     dotted_key
      simple_key
       unquoted_key
        string
      .
      simple_key
       unquoted_key
        literal
      .
      simple_key
       unquoted_key
        multiline
    ]
  comment
 \n\n
 expression
  key_value
   key
    simple_key
     unquoted_key
      regex2
   =
   value
    string
     '''I [dw]on't need \d{2} apples'''
  comment
 \n
 expression
  key_value
   key
    simple_key
     unquoted_key
      lines
   =
   value
    string
     '''\nThe first newline is\ntrimmed in raw strings.\n   All other whitespace\n   is preserved.\n'''
  comment
 \n\n\n
 expression
  comment
   ################################################################################
 \n
 expression
  comment
   ## Integer
 \n\n
 expression
  comment
   # Integers are whole numbers. Positive numbers may be prefixed with a plus sign.
 \n
 expression
  comment
   # Negative numbers are prefixed with a minus sign.
 \n\n
 expression
  table
   standard_table
    [
    key
     simple_key
      unquoted_key
       integer
    ]
  comment
 \n\n
 expression
  key_value
   key
    simple_key
     unquoted_key
      key1
   =
   value
    integer
     +99
  comment
 \n
 expression
  key_value
   key
    simple_key
     unquoted_key
      key2
   =
   value
    integer
     42
  comment
 \n
 expression
  key_value
   key
    simple_key
     unquoted_key
      key3
   =
   value
    integer
     0
  comment
 \n
 expression
  key_value
   key
    simple_key
     unquoted_key
      key4
   =
   value
    integer
     -17
  comment
 \n\n
 expression
  table
   standard_table
    [
    key
     dotted_key
      simple_key
       unquoted_key
        integer
      .
      simple_key
       unquoted_key
        underscores
    ]
  comment
 \n\n
 expression
  comment
   # For large numbers, you may use underscores to enhance readability. Each
 \n
 expression
  comment
   # underscore must be surrounded by at least one digit.
 \n
 expression
  key_value
   key
    simple_key
     unquoted_key
      key1
   =
   value
    integer
     1_000
  comment
 \n
 expression
  key_value
   key
    simple_key
     unquoted_key
      key2
   =
   value
    integer
     5_349_221
  comment
 \n
 expression
  key_value
   key
    simple_key
     unquoted_key
      key3
   =
   value
    integer
     1_2_3_4_5
  comment
   # valid but inadvisable
 \n\n\n
 expression
  comment
   ################################################################################
 \n
 expression
  comment
   ## Float
 \n\n
 expression
  comment
   # A float consists of an integer part (which may be prefixed with a plus or
 \n
 expression
  comment
   # minus sign) followed by a fractional part and/or an exponent part.
 \n\n
 expression
  table
   standard_table
    [
    key
     dotted_key
      simple_key
       unquoted_key
        float
      .
      simple_key
       unquoted_key
        fractional
    ]
  comment
 \n\n
 expression
  key_value
   key
    simple_key
     unquoted_key
      key1
   =
   value
    floating_point
     +1.0
  comment
 \n
 expression
  key_value
   key
    simple_key
     unquoted_key
      key2
   =
   value
    floating_point
     3.1415
  comment
 \n
 expression
  key_value
   key
    simple_key
     unquoted_key
      key3
   =
   value
    floating_point
     -0.01
  comment
 \n\n
 expression
  table
   standard_table
    [
    key
     dotted_key
      simple_key
       unquoted_key
        float
      .
      simple_key
       unquoted_key
        exponent
    ]
  comment
 \n\n
 expression
  key_value
   key
    simple_key
     unquoted_key
      key1
   =
   value
    floating_point
     5e+22
  comment
 \n
 expression
  key_value
   key
    simple_key
     unquoted_key
      key2
   =
   value
    floating_point
     1e6
  comment
 \n
 expression
  key_value
   key
    simple_key
     unquoted_key
      key3
   =
   value
    floating_point
     -2E-2
  comment
 \n\n
 expression
  table
   standard_table
    [
    key
     dotted_key
      simple_key
       unquoted_key
        float
      .
      simple_key
       unquoted_key
        both
    ]
  comment
 \n\n
 expression
  key_value
   key
    simple_key
     unquoted_key
      key
   =
   value
    floating_point
     6.626e-34
  comment
 \n\n
 expression
  table
   standard_table
    [
    key
     dotted_key
      simple_key
       unquoted_key
        float
      .
      simple_key
       unquoted_key
        underscores
    ]
  comment
 \n\n
 expression
  key_value
   key
    simple_key
     unquoted_key
      key1
   =
   value
    floating_point
     9_224_617.445_991_228_313
  comment
 \n
 expression
  key_value
   key
    simple_key
     unquoted_key
      key2
   =
   value
    floating_point
     1e1_000
  comment
 \n\n\n
 expression
  comment
   ################################################################################
 \n
 expression
  comment
   ## Boolean
 \n\n
 expression
  comment
   # Booleans are just the tokens you're used to. Always lowercase.
 \n\n
 expression
  table
   standard_table
    [
    key
     simple_key
      unquoted_key
       boolean
    ]
  comment
 \n\n
 expression
  key_value
   key
    simple_key
     unquoted_key
      True
   =
   value
    bool_
     true
  comment
 \n
 expression
  key_value
   key
    simple_key
     unquoted_key
      False
   =
   value
    bool_
     false
  comment
 \n\n\n
 expression
  comment
   ################################################################################
 \n
 expression
  comment
   ## Datetime
 \n\n
 expression
  comment
   # Datetimes are RFC 3339 dates.
 \n\n
 expression
  table
   standard_table
    [
    key
     simple_key
      unquoted_key
       datetime
    ]
  comment
 \n\n
 expression
  key_value
   key
    simple_key
     unquoted_key
      key1
   =
   value
    date_time
     1979-05-27T07:32:00Z
  comment
 \n
 expression
  key_value
   key
    simple_key
     unquoted_key
      key2
   =
   value
    date_time
     1979-05-27T00:32:00-07:00
  comment
 \n
 expression
  key_value
   key
    simple_key
     unquoted_key
      key3
   =
   value
    date_time
     1979-05-27T00:32:00.999999-07:00
  comment
 \n\n\n
 expression
  comment
   ################################################################################
 \n
 expression
  comment
   ## Array
 \n\n
 expression
  comment
   # Arrays are square brackets with other primitives inside. Whitespace is
 \n
 expression
  comment
   # ignored. Elements are separated by commas. Data types may not be mixed.
 \n\n
 expression
  table
   standard_table
    [
    key
     simple_key
      unquoted_key
       array
    ]
  comment
 \n\n
 expression
  key_value
   key
    simple_key
     unquoted_key
      key1
   =
   value
    array_
     [
     array_values
      comment_or_nl
      value
       integer
        1
      nl_or_comment
      ,
      array_values
       comment_or_nl
       value
        integer
         2
       nl_or_comment
       ,
       array_values
        comment_or_nl
        value
         integer
          3
        nl_or_comment
       comment_or_nl
      comment_or_nl
     comment_or_nl
     ]
  comment
 \n
 expression
  key_value
   key
    simple_key
     unquoted_key
      key2
   =
   value
    array_
     [
     array_values
      comment_or_nl
      value
       string
        "red"
      nl_or_comment
      ,
      array_values
       comment_or_nl
       value
        string
         "yellow"
       nl_or_comment
       ,
       array_values
        comment_or_nl
        value
         string
          "green"
        nl_or_comment
       comment_or_nl
      comment_or_nl
     comment_or_nl
     ]
  comment
 \n
 expression
  key_value
   key
    simple_key
     unquoted_key
      key3
   =
   value
    array_
     [
     array_values
      comment_or_nl
      value
       array_
        [
        array_values
         comment_or_nl
         value
          integer
           1
         nl_or_comment
         ,
         array_values
          comment_or_nl
          value
           integer
            2
          nl_or_comment
         comment_or_nl
        comment_or_nl
        ]
      nl_or_comment
      ,
      array_values
       comment_or_nl
       value
        array_
         [
         array_values
          comment_or_nl
          value
           integer
            3
          nl_or_comment
          ,
          array_values
           comment_or_nl
           value
            integer
             4
           nl_or_comment
           ,
           array_values
            comment_or_nl
            value
             integer
              5
            nl_or_comment
           comment_or_nl
          comment_or_nl
         comment_or_nl
         ]
       nl_or_comment
      comment_or_nl
     comment_or_nl
     ]
  comment
 \n
 expression
  key_value
   key
    simple_key
     unquoted_key
      key4
   =
   value
    array_
     [
     array_values
      comment_or_nl
      value
       array_
        [
        array_values
         comment_or_nl
         value
          integer
           1
         nl_or_comment
         ,
         array_values
          comment_or_nl
          value
           integer
            2
          nl_or_comment
         comment_or_nl
        comment_or_nl
        ]
      nl_or_comment
      ,
      array_values
       comment_or_nl
       value
        array_
         [
         array_values
          comment_or_nl
          value
           string
            "a"
          nl_or_comment
          ,
          array_values
           comment_or_nl
           value
            string
             "b"
           nl_or_comment
           ,
           array_values
            comment_or_nl
            value
             string
              "c"
            nl_or_comment
           comment_or_nl
          comment_or_nl
         comment_or_nl
         ]
       nl_or_comment
      comment_or_nl
     comment_or_nl
     ]
  comment
   # this is ok
 \n\n
 expression
  comment
   # Arrays can also be multiline. So in addition to ignoring whitespace, arrays
 \n
 expression
  comment
   # also ignore newlines between the brackets.  Terminating commas are ok before
 \n
 expression
  comment
   # the closing bracket.
 \n\n
 expression
  key_value
   key
    simple_key
     unquoted_key
      key5
   =
   value
    array_
     [
     array_values
      comment_or_nl
       \n
      value
       integer
        1
      nl_or_comment
      ,
      array_values
       comment_or_nl
       value
        integer
         2
       nl_or_comment
       ,
       array_values
        comment_or_nl
        value
         integer
          3
        nl_or_comment
         \n
       comment_or_nl
      comment_or_nl
     comment_or_nl
     ]
  comment
 \n
 expression
  key_value
   key
    simple_key
     unquoted_key
      key6
   =
   value
    array_
     [
     array_values
      comment_or_nl
       \n
      value
       integer
        1
      nl_or_comment
      ,
      array_values
       comment_or_nl
        \n
       value
        integer
         2
       nl_or_comment
       ,
      comment_or_nl
       # this is ok
       \n
     comment_or_nl
     ]
  comment
 \n\n\n
 expression
  comment
   ################################################################################
 \n
 expression
  comment
   ## Array of Tables
 \n\n
 expression
  comment
   # These can be expressed by using a table name in double brackets. Each table
 \n
 expression
  comment
   # with the same double bracketed name will be an element in the array. The
 \n
 expression
  comment
   # tables are inserted in the order encountered.
 \n\n
 expression
  table
   array_table
    [[
    key
     simple_key
      unquoted_key
       products
    ]]
  comment
 \n\n
 expression
  key_value
   key
    simple_key
     unquoted_key
      name
   =
   value
    string
     "Hammer"
  comment
 \n
 expression
  key_value
   key
    simple_key
     unquoted_key
      sku
   =
   value
    integer
     738594937
  comment
 \n\n
 expression
  table
   array_table
    [[
    key
     simple_key
      unquoted_key
       products
    ]]
  comment
 \n\n
 expression
  table
   array_table
    [[
    key
     simple_key
      unquoted_key
       products
    ]]
  comment
 \n\n
 expression
  key_value
   key
    simple_key
     unquoted_key
      name
   =
   value
    string
     "Nail"
  comment
 \n
 expression
  key_value
   key
    simple_key
     unquoted_key
      sku
   =
   value
    integer
     284758393
  comment
 \n
 expression
  key_value
   key
    simple_key
     unquoted_key
      color
   =
   value
    string
     "gray"
  comment
 \n\n\n
 expression
  comment
   # You can create nested arrays of tables as well.
 \n\n
 expression
  table
   array_table
    [[
    key
     simple_key
      unquoted_key
       fruit
    ]]
  comment
 \n
 expression
  key_value
   key
    simple_key
     unquoted_key
      name
   =
   value
    string
     "apple"
  comment
 \n\n
 expression
  table
   standard_table
    [
    key
     dotted_key
      simple_key
       unquoted_key
        fruit
      .
      simple_key
       unquoted_key
        physical
    ]
  comment
 \n
 expression
  key_value
   key
    simple_key
     unquoted_key
      color
   =
   value
    string
     "red"
  comment
 \n
 expression
  key_value
   key
    simple_key
     unquoted_key
      shape
   =
   value
    string
     "round"
  comment
 \n\n
 expression
  table
   array_table
    [[
    key
     dotted_key
      simple_key
       unquoted_key
        fruit
      .
      simple_key
       unquoted_key
        variety
    ]]
  comment
 \n
 expression
  key_value
   key
    simple_key
     unquoted_key
      name
   =
   value
    string
     "red delicious"
  comment
 \n\n
 expression
  table
   array_table
    [[
    key
     dotted_key
      simple_key
       unquoted_key
        fruit
      .
      simple_key
       unquoted_key
        variety
    ]]
  comment
 \n
 expression
  key_value
   key
    simple_key
     unquoted_key
      name
   =
   value
    string
     "granny smith"
  comment
 \n\n
 expression
  table
   array_table
    [[
    key
     simple_key
      unquoted_key
       fruit
    ]]
  comment
 \n
 expression
  key_value
   key
    simple_key
     unquoted_key
      name
   =
   value
    string
     "banana"
  comment
 \n\n
 expression
  table
   array_table
    [[
    key
     dotted_key
      simple_key
       unquoted_key
        fruit
      .
      simple_key
       unquoted_key
        variety
    ]]
  comment
 \n
 expression
  key_value
   key
    simple_key
     unquoted_key
      name
   =
   value
    string
     "plantain"
  comment
 <EOF>
