file_
 command_invocation
  add_executable
  (
  single_argument
   hello
  single_argument
   world.c
  )
 command_invocation
  if
  (
  single_argument
   FALSE
  single_argument
   AND
  compound_argument
   (
   single_argument
    FALSE
   single_argument
    OR
   compound_argument
    (
    single_argument
     HELLO
    single_argument
     WORLD
    )
   single_argument
    TRUE
   )
  )
 command_invocation
  message
  (
  single_argument
   [=[\nThis is the first line in a bracket argument with bracket length 1.\nNo \-escape sequences or ${variable} references are evaluated.\nThis is always one argument even though it contains a ; character.\nThe text does not end on a closing bracket of length 0 like ]].\nIt does end in a closing bracket of length 1.\n]=]
  )
 command_invocation
  message
  (
  single_argument
   "This is a quoted argument containing multiple lines.\nThis is always one argument even though it contains a ; character.\nBoth \\-escape sequences and ${variable} references are evaluated.\nThe text does not end on an escaped double-quote like \".\nIt does end in an unescaped double quote.\n"
  )
 command_invocation
  message
  (
  single_argument
   "\\nThis is the first line of a quoted argument. \\nIn fact it is the only line but since it is long \\nthe source code uses line continuation.\\n"
  )
 command_invocation
  foreach
  (
  single_argument
   arg
  single_argument
   NoSpace
  single_argument
   Escaped\ Space
  single_argument
   This;Divides;Into;Five;Arguments
  single_argument
   Escaped\;Semicolon
  )
 command_invocation
  message
  (
  single_argument
   "${arg}"
  )
 command_invocation
  endforeach
  (
  )
 command_invocation
  message
  (
  single_argument
   "First Argument\n"
  single_argument
   "Second Argument"
  )
 command_invocation
  message
  (
  single_argument
   "First Argument\n"
  single_argument
   "Second Argument"
  )
 command_invocation
  set
  (
  single_argument
   srcs
  single_argument
   a.c
  single_argument
   b.c
  single_argument
   c.c
  )
 command_invocation
  set
  (
  single_argument
   x
  single_argument
   a
  single_argument
   "b;c"
  )
 <EOF>
