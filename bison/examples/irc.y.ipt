input_
 prologue_declarations
  prologue_declaration
   %define
   variable
    parse.error
   value
    verbose
  prologue_declaration
   grammar_declaration
    %code
    top
    actionBlock
     {\n\t#define _XOPEN_SOURCE 600\n\t#include <stdio.h>\n\t#include <stdlib.h>\n}
  prologue_declaration
   grammar_declaration
    %code
    requires
    actionBlock
     {\n\t#include <derp/list.h>\n\t#include <derp/treemap.h>\n\n\tstruct prefix\n\t{\n\t\tchar *host;\n\t\tchar *nick;\n\t\tchar *user;\n\t};\n\n\t/* building an irc_message is the overall\n\t   goal for this parser */\n\tstruct irc_message\n\t{\n\t\ttreemap *tags;\n\t\tstruct prefix *prefix;\n\t\tchar *command;\n\t\tlist *params;\n\t};\n}
  prologue_declaration
   grammar_declaration
    %code
    provides
    actionBlock
     {\n\tint yyerror(char const *msg);\n\tint yylex(void);\n\tvoid message_print(struct irc_message *m);\n}
  prologue_declaration
   grammar_declaration
    %union
    union_name
    actionBlock
     {\n\tchar *str;\n\tstruct prefix *prefix;\n\ttreemap *map;\n\tstruct map_pair *pair;\n\tlist *list;\n\tstruct irc_message *msg;\n}
  prologue_declaration
   grammar_declaration
    symbol_declaration
     %token
     token_decls
      token_decl
       id
        SPACE
       int_opt
       alias
  prologue_declaration
   grammar_declaration
    symbol_declaration
     %token
     token_decls
      <str>
      token_decl
       id
        COMMAND
       int_opt
       alias
      token_decl
       id
        MIDDLE
       int_opt
       alias
      token_decl
       id
        TRAILING
       int_opt
       alias
  prologue_declaration
   grammar_declaration
    symbol_declaration
     %token
     token_decls
      <pair>
      token_decl
       id
        TAG
       int_opt
       alias
  prologue_declaration
   grammar_declaration
    symbol_declaration
     %token
     token_decls
      <prefix>
      token_decl
       id
        PREFIX
       int_opt
       alias
  prologue_declaration
   grammar_declaration
    symbol_declaration
     %type
     symbol_decls
      <msg>
      symbol
       id
        message
      symbol
       id
        tagged_message
      symbol
       id
        prefixed_message
  prologue_declaration
   grammar_declaration
    symbol_declaration
     %type
     symbol_decls
      <map>
      symbol
       id
        tags
  prologue_declaration
   grammar_declaration
    symbol_declaration
     %type
     symbol_decls
      <list>
      symbol
       id
        params
 %%
 bison_grammar
  bison_grammar
   bison_grammar
    bison_grammar
     bison_grammar
      bison_grammar
       rules_or_grammar_declaration
        rules
         id
          final
         named_ref_opt
         :
         rhses_1
          rhs
           symbol
            id
             tagged_message
           named_ref_opt
           tag_opt
           actionBlock
            { message_print($1); }
           named_ref_opt
          ;
      rules_or_grammar_declaration
       rules
        id
         tagged_message
        named_ref_opt
        :
        rhses_1
         rhs
          symbol
           id
            '@'
          named_ref_opt
          symbol
           id
            tags
          named_ref_opt
           [ts]
          symbol
           id
            SPACE
          named_ref_opt
          symbol
           id
            prefixed_message
          named_ref_opt
           [msg]
          tag_opt
          actionBlock
           {\n\t$msg->tags = $ts;\n\t$$ = $msg;\n  }
          named_ref_opt
         |
         rhs
          symbol
           id
            prefixed_message
          named_ref_opt
         ;
     rules_or_grammar_declaration
      rules
       id
        prefixed_message
       named_ref_opt
       :
       rhses_1
        rhs
         symbol
          id
           ':'
         named_ref_opt
         symbol
          id
           PREFIX
         named_ref_opt
          [pfx]
         symbol
          id
           SPACE
         named_ref_opt
         symbol
          id
           message
         named_ref_opt
          [msg]
         tag_opt
         actionBlock
          {\n\t$msg->prefix = $pfx;\n\t$$ = $msg;\n  }
         named_ref_opt
        |
        rhs
         symbol
          id
           message
         named_ref_opt
        ;
    rules_or_grammar_declaration
     rules
      id
       message
      named_ref_opt
      :
      rhses_1
       rhs
        symbol
         id
          COMMAND
        named_ref_opt
         [cmd]
        symbol
         id
          params
        named_ref_opt
         [ps]
        tag_opt
        actionBlock
         {\n\tstruct irc_message *m = malloc(sizeof *m);\n\t*m = (struct irc_message) {\n\t\t.command=$cmd, .params=$ps\n\t};\n\t$$ = m;\n  }
        named_ref_opt
       ;
   rules_or_grammar_declaration
    rules
     id
      tags
     named_ref_opt
     :
     rhses_1
      rhs
       symbol
        id
         TAG
       named_ref_opt
       tag_opt
       actionBlock
        {\n\ttreemap *t = tm_new(derp_strcmp, NULL);\n\ttm_insert(t, $1->k, $1->v);\n\t$$ = t;\n  }
       named_ref_opt
      |
      rhs
       symbol
        id
         tags
       named_ref_opt
        [ts]
       symbol
        id
         ';'
       named_ref_opt
       symbol
        id
         TAG
       named_ref_opt
        [t]
       tag_opt
       actionBlock
        {\n\ttm_insert($ts, $t->k, $t->v);\n\t$$ = $ts;\n  }
       named_ref_opt
      ;
  rules_or_grammar_declaration
   rules
    id
     params
    named_ref_opt
    :
    rhses_1
     rhs
      symbol
       id
        SPACE
      named_ref_opt
      symbol
       id
        TRAILING
      named_ref_opt
      tag_opt
      actionBlock
       {\n\t$$ = l_new();\n\tl_prepend($$, $2);\n  }
      named_ref_opt
     |
     rhs
      symbol
       id
        SPACE
      named_ref_opt
      symbol
       id
        MIDDLE
      named_ref_opt
       [mid]
      symbol
       id
        params
      named_ref_opt
       [ps]
      tag_opt
      actionBlock
       {\n\tl_prepend($ps, $mid);\n\t$$ = $ps;\n  }
      named_ref_opt
     |
     rhs
      %empty
      tag_opt
      actionBlock
       {\n\t$$ = l_new();\n  }
      named_ref_opt
     ;
 epilogue_opt
  %%
  \n\nint yyerror(char const *msg)\n{\n\treturn fprintf(stderr, "%s\n", msg);\n}\n\nvoid message_print(struct irc_message *m)\n{\n\tif (m->tags)\n\t{\n\t\tstruct tm_iter  *it = tm_iter_begin(m->tags);\n\t\tstruct map_pair *p;\n\n\t\tputs("Tags:");\n\t\twhile ((p = tm_iter_next(it)) != NULL)\n\t\t\tprintf("\t'%s'='%s'\n", (char*)p->k, (char*)p->v);\n\t\ttm_iter_free(it);\n\t}\n\tif (m->prefix)\n\t\tprintf("Prefix: Nick %s, User %s, Host %s\n",\n\t\t       m->prefix->nick, m->prefix->user,\n\t\t\t   m->prefix->host);\n\tif (m->command)\n\t\tprintf("Command: %s\n", m->command);\n\tif (!l_is_empty(m->params))\n\t{\n\t\tputs("Params:");\n\t\tfor (list_item *li = l_first(m->params); li; li = li->next)\n\t\t\tprintf("\t%s\n", (char*)li->data);\n\t}\n}
 <EOF>
