/* Copyright (c) 2006, Sun Microsystems, Inc.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Sun Microsystems, Inc. nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */


options {
  USER_TOKEN_MANAGER = true;
}

PARSER_BEGIN(CalcInputParser)

public class CalcInputParser {
}

PARSER_END(CalcInputParser)

void Input() :
	{
	  double larg = 0.0;
	  double rarg;
	}
{
  ( 
    [
      larg=Number() 
	{
	  CalcGUI.print(larg);
	}
    ]
    (
      <ADD>
      rarg=Number()
	{
	  larg = larg + rarg;
	  CalcGUI.print(larg);
	}
    |
      <SUB>
      rarg=Number()
	{
	  larg = larg - rarg;
	  CalcGUI.print(larg);
	}
    |
      <MUL>
      rarg=Number()
	{
	  larg = larg * rarg;
	  CalcGUI.print(larg);
	}
    |
      <DIV>
      rarg=Number()
	{
	  larg = (rarg==0) ? Float.POSITIVE_INFINITY : (larg / rarg);
	  CalcGUI.print(larg);
	}
    )*
    <EQ: "=" >
  )*
}

double Number() :
	{
	  Token t;
	  String image = "";
	  double value = 0.0;
	  double decimalPlace = 1.0;
	}
{
  (
    t=<DIGIT>
	{
	  image += t.image;
	  value = value*10 + Integer.parseInt(t.image);
	  CalcGUI.print(image);
	}
  )+
  [
    <DOT>
	{
	  image += ".";
	  CalcGUI.print(image);
	}
    (
      t=<DIGIT>
	{
	  image += t.image;
	  decimalPlace *= 0.1;
	  value = value + Integer.parseInt(t.image)*decimalPlace;
	  CalcGUI.print(image);
	}
    )+
  ]
	{
	  return value;
	}
|
  <DOT>
	{
	  image = "0.";
	  CalcGUI.print(image);
	}
  (
    t=<DIGIT>
	{
	  image += t.image;
	  decimalPlace *= 0.1;
	  value = value + Integer.parseInt(t.image)*decimalPlace;
	  CalcGUI.print(image);
	}
  )+
	{
	  return value;
	}
}
