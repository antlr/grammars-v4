(module_ (moduleData module (moduleName (procCall (procName robdata) (procParameter ( sysmodule )))) \n (dataList \n (declaration (init_ PERS) (type_ tooldata) tMain := (expression (array_ [ (expression (primitive TRUE)) , (expression (array_ [ (expression (array_ [ (expression (primitive 0.0)) , (expression (primitive 0.0)) , (expression (primitive 700.0)) ])) , (expression (array_ [ (expression (primitive 1.0)) , (expression (primitive 0.0)) , (expression (primitive 0.0)) , (expression (primitive 0.0)) ])) ])) , (expression (array_ [ (expression (primitive 0.0)) , (expression (array_ [ (expression (primitive 5.0)) , (expression (primitive 0)) , (expression (primitive 95.5)) ])) , (expression (array_ [ (expression (primitive 1)) , (expression (primitive 0)) , (expression (primitive 0)) , (expression (primitive 0)) ])) , (expression (primitive 0.228)) , (expression (primitive 0.094)) , (expression (primitive 0)) ])) ])) ;) \n (declaration (init_ PERS) (type_ wobjdata) wobjMain := (expression (array_ [ (expression (primitive FALSE)) , (expression (primitive TRUE)) , (expression (primitive "")) , (expression (array_ [ (expression (array_ [ (expression (primitive 0)) , (expression (primitive 0)) , (expression (primitive 0)) ])) , (expression (array_ [ (expression (primitive 1)) , (expression (primitive 0)) , (expression (primitive 0)) , (expression (primitive 0)) ])) ])) , (expression (array_ [ (expression (array_ [ (expression (primitive 0)) , (expression (primitive 0)) , (expression (primitive 0)) ])) , (expression (array_ [ (expression (primitive 1)) , (expression (primitive 0)) , (expression (primitive 0)) , (expression (primitive 0)) ])) ])) ])) ;) \n (declaration (init_ CONST) (type_ speeddata) v200 := (expression (array_ [ (expression (primitive 200)) , (expression (primitive 500)) , (expression (primitive 5000)) , (expression (primitive 1000)) ])) ;) \n \n (procedure PROC (procCall (procName ConfigOn) (procParameter ( ))) \n (functionCall ConfJ (functionParameter \On) ;) \n (functionCall ConfL (functionParameter \On) ;) \n ENDPROC) \n \n) endmodule) <EOF>)