startRule
 decl
  include_decl
   include
   string
    "r1.yar"
 decl
  import_decl
   import
   string
    "pe"
  import_decl
   import
   string
    "cuckoo"
 decl
  include_decl
   include
   string
    "r1.yar"
  include_decl
   include
   string
    "r1.yar"
 decl
  rule_decl
   rule
   id_
    _d0
   {
   strings_section
    strings
    :
    string_def
     $a
     =
     string_value
      {
      string_construct
       11
      }
    string_def
     $b
     =
     string_value
      {
      string_construct
       ??
      }
    string_def
     $c
     =
     string_value
      {
      string_construct
       ??
      string_construct
       ??
      }
    string_def
     $d
     =
     string_value
      {
      string_construct
       ??
      string_construct
       ??
      string_construct
       0?
      }
    string_def
     $e
     =
     string_value
      {
      string_construct
       ??
      string_construct
       ??
      string_construct
       ?0
      }
    string_def
     $f
     =
     string_value
      string
       "text"
    string_def
     $g
     =
     string_value
      string
       "te\nxt"
   condition_section
    condition
    :
    expr
     number
      1
     of
     them
   }
  rule_decl
   rule_modifier
    private
   rule
   id_
    _dummy3
   tags
    :
    id_
     Tag1
    id_
     Tag2
   {
   meta_section
    meta
    :
    meta_def
     id_
      i1
     =
     meta_value
      string
       "a"
    meta_def
     id_
      i2
     =
     meta_value
      string
       "b"
    meta_def
     id_
      i3
     =
     meta_value
      0x00
    meta_def
     id_
      i4
     =
     meta_value
      number
       0
    meta_def
     id_
      i5
     =
     meta_value
      true_false
       false
   strings_section
    strings
    :
    string_def
     $text_1
     =
     string_value
      string
       "test"
     string_modifier
      private
    string_def
     $text_1a
     =
     string_value
      string
       "test"
     string_modifier
      private
     string_modifier
      base64
    string_def
     $text_1b
     =
     string_value
      string
       "test"
     string_modifier
      private
     string_modifier
      base64
      args
       (
       string
        " "
       )
    string_def
     $text_11
     =
     string_value
      {
      string_construct
       ff
      }
     string_modifier
      private
     string_modifier
      nocase
    string_def
     $text_6
     =
     string_value
      {
      string_construct
       00
      }
     string_modifier
      nocase
    string_def
     $text_6
     =
     string_value
      {
      string_construct
       00
      string_construct
       11
      }
     string_modifier
      ascii
    string_def
     $text_6
     =
     string_value
      {
      string_construct
       ?0
      string_construct
       0f
      string_construct
       fD
      string_construct
       ??
      string_construct
       a?
      }
     string_modifier
      xor
    string_def
     $text_2
     =
     string_value
      {
      string_construct
       a1
      string_construct
       ff
       jump
        [
        -
        ]
       a1
      string_construct
       ff
      }
     string_modifier
      base64wide
    string_def
     $text_5
     =
     string_value
      {
      string_construct
       a1
      string_construct
       ff
       jump
        [
        1
        ]
       ??
      string_construct
       ff
      }
     string_modifier
      fullword
    string_def
     $text_3
     =
     string_value
      {
      string_construct
       a1
      string_construct
       ff
       jump
        [
        1
        -
        ]
       a2
      string_construct
       ff
      }
    string_def
     $text_4
     =
     string_value
      {
      string_construct
       a1
      string_construct
       ff
       jump
        [
        1
        -
        2
        ]
       a2
      string_construct
       ff
      }
    string_def
     $text_1
     =
     string_value
      {
      string_construct
       alt
        (
        ff
        ff
        |
        fa
        ff
        |
        ??
        )
      }
    string_def
     $text_1
     =
     string_value
      {
      string_construct
       ff
      string_construct
       alt
        (
        ff
        ff
        |
        fa
        ff
        |
        ??
        )
      string_construct
       ff
      }
   condition_section
    condition
    :
    expr
     literal
      true_false
       false
   }
 decl
  include_decl
   include
   string
    "r1.yar"
 decl
  rule_decl
   rule_modifier
    global
   rule
   id_
    dummy1
   {
   condition_section
    condition
    :
    expr
     expr
      expr
       literal
        true_false
         false
      and
      expr
       expr
        literal
         va
       function
        contains
       expr
        literal
         "tt"
     and
     expr
      expr
       literal
        va
      function
       matches
      expr
       literal
        "ss"
   }
  rule_decl
   rule
   id_
    dummy2
   {
   meta_section
    meta
    :
    meta_def
     id_
      id1
     =
     meta_value
      string
       "txt1"
   condition_section
    condition
    :
    expr
     literal
      true_false
       false
   }
  rule_decl
   rule
   id_
    dummy3
   {
   meta_section
    meta
    :
    meta_def
     id_
      id1
     =
     meta_value
      string
       "txt1"
   strings_section
    strings
    :
    string_def
     $s
     =
     string_value
      string
       "t"
   condition_section
    condition
    :
    expr
     literal
      true_false
       false
   }
  rule_decl
   rule
   id_
    r4
   {
   meta_section
    meta
    :
    meta_def
     id_
      p
     =
     meta_value
      string
       "v"
   strings_section
    strings
    :
    string_def
     $a
     =
     string_value
      string
       "1"
    string_def
     $b
     =
     string_value
      {
      string_construct
       0f
      string_construct
       ??
      string_construct
       ?f
      string_construct
       f?
      }
    string_def
     $c
     =
     string_value
      {
      string_construct
       ff
       jump
        [
        -
        ]
       f?
      }
    string_def
     $c
     =
     string_value
      {
      string_construct
       alt
        (
        ?a
        |
        b?
        )
       jump
        [
        1
        -
        ]
       jump
        [
        2
        ]
       alt
        (
        ??
        |
        0d
        )
      string_construct
       f?
      }
    string_def
     $a
     =
     string_value
      string
       "1"
    string_def
     $b
     =
     string_value
      {
      string_construct
       ff
      }
    string_def
     $c
     =
     string_value
      {
      string_construct
       ff
       jump
        [
        1
        ]
       alt
        (
        aa
        |
        bb
        )
      string_construct
       ff
      }
   condition_section
    condition
    :
    expr
     expr
      expr
       expr
        expr
         expr
          expr
           expr
            expr
             expr
              expr
               expr
                expr
                 expr
                  expr
                   expr
                    expr
                     expr
                      expr
                       expr
                        expr
                         expr
                          expr
                           expr
                            expr
                             expr
                              expr
                               literal
                                $a
                              [
                              expr
                               literal
                                number
                                 1
                              ]
                             ==
                             expr
                              literal
                               number
                                1
                            and
                            expr
                             expr
                              fn4
                               uint16
                              (
                              expr
                               literal
                                number
                                 0
                              )
                             ==
                             expr
                              literal
                               0x5A4D
                           and
                           expr
                            expr
                             fn4
                              uint16be
                             (
                             expr
                              literal
                               number
                                0
                             )
                            ==
                            expr
                             literal
                              0x5A4D
                          and
                          expr
                           expr
                            fn4
                             int16
                            (
                            expr
                             literal
                              number
                               0
                            )
                           ==
                           expr
                            literal
                             0x5A4D
                         and
                         expr
                          expr
                           fn4
                            int16be
                           (
                           expr
                            literal
                             number
                              0
                           )
                          ==
                          expr
                           literal
                            0x5A4D
                        and
                        expr
                         expr
                          fn4
                           uint32
                          (
                          expr
                           fn4
                            uint32
                           (
                           expr
                            literal
                             0x3C
                           )
                          )
                         ==
                         expr
                          literal
                           0x00004550
                       and
                       expr
                        expr
                         fn4
                          uint32be
                         (
                         expr
                          fn4
                           uint32
                          (
                          expr
                           literal
                            0x3C
                          )
                         )
                        ==
                        expr
                         literal
                          0x00004550
                      and
                      expr
                       expr
                        fn4
                         int32
                        (
                        expr
                         fn4
                          uint32
                         (
                         expr
                          literal
                           0x3C
                         )
                        )
                       ==
                       expr
                        literal
                         0x00004550
                     and
                     expr
                      expr
                       fn4
                        int32be
                       (
                       expr
                        fn4
                         uint32
                        (
                        expr
                         literal
                          0x3C
                        )
                       )
                      ==
                      expr
                       literal
                        0x00004550
                    and
                    expr
                     $a
                     at
                     expr
                      literal
                       number
                        100
                   and
                   expr
                    expr
                     literal
                      #a
                    ==
                    expr
                     literal
                      number
                       1
                  and
                  expr
                   expr
                    expr
                     literal
                      @a
                    [
                    expr
                     literal
                      number
                       1
                    ]
                   ==
                   expr
                    literal
                     0x00
                 and
                 expr
                  expr
                   literal
                    @a
                  ==
                  expr
                   literal
                    0x00
                and
                expr
                 expr
                  literal
                   !a
                 ==
                 expr
                  literal
                   number
                    1
               and
               expr
                expr
                 expr
                  literal
                   !a
                 [
                 expr
                  literal
                   number
                    1
                 ]
                ==
                expr
                 literal
                  number
                   1
              and
              expr
               $a
               in
               range
                (
                expr
                 pos_fn
                  entrypoint
                ..
                expr
                 expr
                  pos_fn
                   entrypoint
                 +
                 expr
                  literal
                   number
                    10
                )
             and
             expr
              $a
              at
              expr
               expr
                pos_fn
                 entrypoint
               +
               expr
                literal
                 number
                  2
            and
            expr
             $a
             at
             expr
              expr
               literal
                pe
              .
              expr
               literal
                entry_point
           and
           expr
            number
             1
            of
            string_set
             (
             string_id_list
              $a*
             )
          and
          expr
           number
            1
           of
           string_set
            (
            string_id_list
             $*
            )
         and
         expr
          none
          of
          string_set
           (
           string_id_list
            $a*
            ,
            $b*
           )
          in
          range
           (
           expr
            literal
             number
              1
           ..
           expr
            literal
             number
              100
           )
        and
        expr
         all
         of
         string_set
          (
          string_id_list
           $a*
           ,
           $b*
          )
         in
         range
          (
          expr
           literal
            number
             1
          ..
          expr
           literal
            number
             100
          )
       and
       expr
        any
        of
        string_set
         (
         string_id_list
          $a*
          ,
          $b*
         )
        in
        range
         (
         expr
          literal
           number
            1
         ..
         expr
          literal
           number
            100
         )
      and
      expr
       number
        2
       of
       them
     and
     expr
      literal
       $a
   }
  rule_decl
   rule
   id_
    rf1
   {
   strings_section
    strings
    :
    string_def
     $a
     =
     string_value
      string
       "t"
   condition_section
    condition
    :
    for_expr
     for
     expr
      any
      of
      string_set
       (
       string_id_list
        $a
       )
     :
     (
     bool_expr
      expr
       $
     )
   }
  rule_decl
   rule
   id_
    rf2
   {
   strings_section
    strings
    :
    string_def
     $a
     =
     string_value
      string
       "t"
   condition_section
    condition
    :
    for_expr
     for
     expr
      any
      of
      string_set
       (
       string_id_list
        $a
       )
     :
     (
     bool_expr
      expr
       $
       at
       expr
        expr
         literal
          pe
        .
        expr
         literal
          entry_point
     )
   }
  rule_decl
   rule
   id_
    rf3
   {
   strings_section
    strings
    :
    string_def
     $a
     =
     string_value
      string
       "t"
   condition_section
    condition
    :
    for_expr
     for
     expr
      any
      of
      string_set
       (
       string_id_list
        $a
        ,
        $b
       )
     :
     (
     bool_expr
      expr
       expr
        #
       >
       expr
        literal
         number
          3
     )
   }
  rule_decl
   rule
   id_
    rf4
   {
   strings_section
    strings
    :
    string_def
     $a
     =
     string_value
      string
       "t"
   condition_section
    condition
    :
    for_expr
     for
     expr
      any
      of
      string_set
       (
       string_id_list
        $a
        ,
        $b
       )
     :
     (
     bool_expr
      expr
       expr
        @
       >
       expr
        literal
         number
          3
     )
   }
  rule_decl
   rule
   id_
    rf5
   {
   strings_section
    strings
    :
    string_def
     $a
     =
     string_value
      string
       "t"
   condition_section
    condition
    :
    for_expr
     for
     expr
      any
      id_
       i
      in
      range
       (
       expr
        literal
         number
          1
       ..
       expr
        literal
         #a
       )
     :
     (
     bool_expr
      expr
       expr
        expr
         expr
          literal
           @a
         [
         expr
          literal
           i
         ]
        +
        expr
         literal
          number
           10
       ==
       expr
        expr
         literal
          @b
        [
        expr
         literal
          i
        ]
     )
   }
  rule_decl
   rule
   id_
    rf6
   {
   strings_section
    strings
    :
    string_def
     $a
     =
     string_value
      string
       "t"
   condition_section
    condition
    :
    for_expr
     for
     any
     id_
      section
     in
     expr
      expr
       literal
        pe
      .
      expr
       literal
        sections
     :
     (
     bool_expr
      expr
       expr
        expr
         literal
          section
        .
        expr
         literal
          name
       ==
       expr
        literal
         ".text"
     )
   }
  rule_decl
   rule
   id_
    r5
   {
   strings_section
    strings
    :
    string_def
     $
     =
     string_value
      string
       "t"
    string_def
     $
     =
     string_value
      string
       "e"
   condition_section
    condition
    :
    expr
     number
      1
     of
     them
   }
 decl
  include_decl
   include
   string
    "r1.yar"
 decl
  rule_decl
   rule
   id_
    rr1
   {
   strings_section
    strings
    :
    string_def
     $a
     =
     string_value
      string
       "1"
    string_def
     $b
     =
     string_value
      string
       "2"
   condition_section
    condition
    :
    expr
     literal
      $a
   }
  rule_decl
   rule
   id_
    rr2
   {
   strings_section
    strings
    :
    string_def
     $a
     =
     string_value
      string
       "1"
   condition_section
    condition
    :
    expr
     any
     of
     (
     rr*
     )
   }
 decl
  include_decl
   include
   string
    "r1.yar"
 <EOF>
