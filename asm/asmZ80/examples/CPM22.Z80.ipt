prog
 line
  comment
   ;**************************************************************
 \n
 line
  comment
   ;*
 \n
 line
  comment
   ;*             C P / M   version   2 . 2
 \n
 line
  comment
   ;*
 \n
 line
  comment
   ;*   Reconstructed from memory image on February 27, 1981
 \n
 line
  comment
   ;*
 \n
 line
  comment
   ;*                by Clark A. Calkins
 \n
 line
  comment
   ;*
 \n
 line
  comment
   ;**************************************************************
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Set memory limit here. This is the amount of contigeous
 \n
 line
  comment
   ; ram starting from 0000. CP/M will reside at the end of this space.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     MEM
  directive
   assemblerdirective
    EQU
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        62
  comment
   ;for a 62k system (TS802 TEST - WORKS OK).
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     IOBYTE
  directive
   assemblerdirective
    EQU
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        3
  comment
   ;i/o definition byte.
 \n
 line
  lbl
   label
    name
     TDRIVE
  directive
   assemblerdirective
    EQU
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        4
  comment
   ;current drive name and user number.
 \n
 line
  lbl
   label
    name
     ENTRY
  directive
   assemblerdirective
    EQU
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        5
  comment
   ;entry point for the cp/m bdos.
 \n
 line
  lbl
   label
    name
     TFCB
  directive
   assemblerdirective
    EQU
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        5CH
  comment
   ;default file control block.
 \n
 line
  lbl
   label
    name
     TBUFF
  directive
   assemblerdirective
    EQU
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        80H
  comment
   ;i/o buffer and command line storage.
 \n
 line
  lbl
   label
    name
     TBASE
  directive
   assemblerdirective
    EQU
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        100H
  comment
   ;transiant program storage area.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Set control character equates.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     CNTRLC
  directive
   assemblerdirective
    EQU
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        3
  comment
   ;control-c
 \n
 line
  lbl
   label
    name
     CNTRLE
  directive
   assemblerdirective
    EQU
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        05H
  comment
   ;control-e
 \n
 line
  lbl
   label
    name
     BS
  directive
   assemblerdirective
    EQU
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        08H
  comment
   ;backspace
 \n
 line
  lbl
   label
    name
     TAB
  directive
   assemblerdirective
    EQU
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        09H
  comment
   ;tab
 \n
 line
  lbl
   label
    name
     LF
  directive
   assemblerdirective
    EQU
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0AH
  comment
   ;line feed
 \n
 line
  lbl
   label
    name
     FF
  directive
   assemblerdirective
    EQU
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0CH
  comment
   ;form feed
 \n
 line
  lbl
   label
    name
     CR
  directive
   assemblerdirective
    EQU
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0DH
  comment
   ;carriage return
 \n
 line
  lbl
   label
    name
     CNTRLP
  directive
   assemblerdirective
    EQU
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        10H
  comment
   ;control-p
 \n
 line
  lbl
   label
    name
     CNTRLR
  directive
   assemblerdirective
    EQU
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        12H
  comment
   ;control-r
 \n
 line
  lbl
   label
    name
     CNTRLS
  directive
   assemblerdirective
    EQU
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        13H
  comment
   ;control-s
 \n
 line
  lbl
   label
    name
     CNTRLU
  directive
   assemblerdirective
    EQU
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        15H
  comment
   ;control-u
 \n
 line
  lbl
   label
    name
     CNTRLX
  directive
   assemblerdirective
    EQU
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        18H
  comment
   ;control-x
 \n
 line
  lbl
   label
    name
     CNTRLZ
  directive
   assemblerdirective
    EQU
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        1AH
  comment
   ;control-z (end-of-file mark)
 \n
 line
  lbl
   label
    name
     DEL
  directive
   assemblerdirective
    EQU
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        7FH
  comment
   ;rubout
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Set origin for CP/M
 \n
 line
  comment
   ;
 \n
 line
  directive
   assemblerdirective
    ORG
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           MEM
        -
        multiplyingExpression
         argument
          number
           7
       )
      *
      argument
       number
        1024
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     CBASE
   :
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        COMMAND
  comment
   ;execute command processor (ccp).
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CLEARBUF
  comment
   ;entry to empty input buffer before starting ccp.
 \n\n
 line
  comment
   ;
 \n
 line
  comment
   ;   Standard cp/m ccp input buffer. Format is (max length),
 \n
 line
  comment
   ; (actual length), (char #1), (char #2), (char #3), etc.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     INBUFF
   :
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        127
  comment
   ;length of input buffer.
 \n
 line
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;current length of contents.
 \n
 line
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        'Copyright'
 \n
 line
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        ' 1979 (c) by Digital Research      '
 \n
 line
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
 \n
 line
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
 \n
 line
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
 \n
 line
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
 \n
 line
  lbl
   label
    name
     INPOINT
   :
  directive
   assemblerdirective
    DEFW
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        INBUFF
     +
     multiplyingExpression
      argument
       number
        2
  comment
   ;input line pointer
 \n
 line
  lbl
   label
    name
     NAMEPNT
   :
  directive
   assemblerdirective
    DEFW
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;input line pointer used for error message. Points to
 \n
 line
  comment
   ;\t\t\t;start of name in error.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Routine to print (A) on the console. All registers used.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     PRINT
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        E
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;setup bdos call.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       number
        2
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        ENTRY
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Routine to print (A) on the console and to save (BC).
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     PRINTB
   :
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        PRINT
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Routine to send a carriage return, line feed combination
 \n
 line
  comment
   ; to the console.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     CRLF
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       name
        CR
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        PRINTB
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       name
        LF
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        PRINTB
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Routine to send one space to the console and save (BC).
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     SPACE
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       string_
        ' '
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        PRINTB
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Routine to print character string pointed to be (BC) on the
 \n
 line
  comment
   ; console. It must terminate with a null byte.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     PLINE
   :
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CRLF
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  lbl
   label
    name
     PLINE2
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        PRINT
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        PLINE2
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Routine to reset the disk system.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     RESDSK
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       number
        13
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        ENTRY
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Routine to select disk (A).
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     DSKSEL
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        E
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       number
        14
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        ENTRY
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Routine to call bdos and save the return code. The zero
 \n
 line
  comment
   ; flag is set on a return of 0ffh.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     ENTRY1
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        ENTRY
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           RTNCODE
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;save return code.
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;set zero if 0ffh returned.
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Routine to open a file. (DE) must point to the FCB.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     OPEN
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       number
        15
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        ENTRY1
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Routine to open file at (FCB).
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     OPENFCB
   :
  instruction
   opcode
    XOR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;clear the record number byte at fcb+32
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           FCB
        +
        multiplyingExpression
         argument
          number
           32
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       name
        FCB
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        OPEN
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Routine to close a file. (DE) points to FCB.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     CLOSE
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       number
        16
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        ENTRY1
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Routine to search for the first file with ambigueous name
 \n
 line
  comment
   ; (DE).
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     SRCHFST
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       number
        17
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        ENTRY1
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Search for the next ambigeous file name.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     SRCHNXT
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       number
        18
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        ENTRY1
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Search for file at (FCB).
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     SRCHFCB
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       name
        FCB
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SRCHFST
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Routine to delete a file pointed to by (DE).
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     DELETE
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       number
        19
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        ENTRY
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Routine to call the bdos and set the zero flag if a zero
 \n
 line
  comment
   ; status is returned.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     ENTRY2
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        ENTRY
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;set zero flag if appropriate.
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Routine to read the next record from a sequential file.
 \n
 line
  comment
   ; (DE) points to the FCB.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     RDREC
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       number
        20
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        ENTRY2
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Routine to read file at (FCB).
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     READFCB
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       name
        FCB
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        RDREC
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Routine to write the next record of a sequential file.
 \n
 line
  comment
   ; (DE) points to the FCB.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     WRTREC
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       number
        21
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        ENTRY2
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Routine to create the file pointed to by (DE).
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     CREATE
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       number
        22
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        ENTRY1
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Routine to rename the file pointed to by (DE). Note that
 \n
 line
  comment
   ; the new name starts at (DE+16).
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     RENAM
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       number
        23
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        ENTRY
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Get the current user code.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     GETUSR
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        E
    ,
    expression
     multiplyingExpression
      argument
       number
        0FFH
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Routne to get or set the current user code.
 \n
 line
  comment
   ; If (E) is FF then this is a GET, else it is a SET.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     GETSETUC
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       number
        32
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        ENTRY
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Routine to set the current drive byte at (TDRIVE).
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     SETCDRV
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        GETUSR
  comment
   ;get user number
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;and shift into the upper 4 bits.
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        CDRIVE
  comment
   ;now add in the current drive number.
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           TDRIVE
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;and save.
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Move currently active drive down to (TDRIVE).
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     MOVECD
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           CDRIVE
       )
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           TDRIVE
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Routine to convert (A) into upper case ascii. Only letters
 \n
 line
  comment
   ; are affected.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     UPPER
   :
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        'a'
  comment
   ;check for letters in the range of 'a' to 'z'.
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        '{'
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NC
 \n
 line
  instruction
   opcode
    AND
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        5FH
  comment
   ;convert it if found.
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Routine to get a line of input. We must check to see if the
 \n
 line
  comment
   ; user is in (BATCH) mode. If so, then read the input from file
 \n
 line
  comment
   ; ($$$.SUB). At the end, reset to console input.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     GETINP
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           BATCH
       )
  comment
   ;if =0, then use console input.
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        GETINP1
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Use the submit file ($$$.sub) which is prepared by a
 \n
 line
  comment
   ; SUBMIT run. It must be on drive (A) and it will be deleted
 \n
 line
  comment
   ; if and error occures (like eof).
 \n
 line
  comment
   ;
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           CDRIVE
       )
  comment
   ;select drive 0 if need be.
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;always use drive A for submit.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        DSKSEL
  comment
   ;select it if required.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       name
        BATCHFCB
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        OPEN
  comment
   ;look for it.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        GETINP1
  comment
   ;if not there, use normal input.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           BATCHFCB
        +
        multiplyingExpression
         argument
          number
           15
       )
  comment
   ;get last record number+1.
 \n
 line
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           BATCHFCB
        +
        multiplyingExpression
         argument
          number
           32
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       name
        BATCHFCB
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        RDREC
  comment
   ;read last record.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        GETINP1
  comment
   ;quit on end of file.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Move this record into input buffer.
 \n
 line
  comment
   ;
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       name
        INBUFF
     +
     multiplyingExpression
      argument
       number
        1
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        TBUFF
  comment
   ;data was read into buffer here.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
    ,
    expression
     multiplyingExpression
      argument
       number
        128
  comment
   ;all 128 characters may be used.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        HL2DE
  comment
   ;(HL) to (DE), (B) bytes.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        BATCHFCB
     +
     multiplyingExpression
      argument
       number
        14
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;zero out the 's2' byte.
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;and decrement the record count.
 \n
 line
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       name
        BATCHFCB
  comment
   ;close the batch file now.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CLOSE
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        GETINP1
  comment
   ;quit on an error.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           CDRIVE
       )
  comment
   ;re-select previous drive if need be.
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        DSKSEL
  comment
   ;don't do needless selects.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Print line just read on console.
 \n
 line
  comment
   ;
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        INBUFF
     +
     multiplyingExpression
      argument
       number
        2
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        PLINE2
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CHKCON
  comment
   ;check console, quit on a key.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        GETINP2
  comment
   ;jump if no key is pressed.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Terminate the submit job on any keyboard input. Delete this
 \n
 line
  comment
   ; file such that it is not re-started and jump to normal keyboard
 \n
 line
  comment
   ; input section.
 \n
 line
  comment
   ;
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        DELBATCH
  comment
   ;delete the batch file.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CMMND1
  comment
   ;and restart command input.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Get here for normal keyboard input. Delete the submit file
 \n
 line
  comment
   ; incase there was one.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     GETINP1
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        DELBATCH
  comment
   ;delete file ($$$.sub).
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SETCDRV
  comment
   ;reset active disk.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       number
        10
  comment
   ;get line from console device.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       name
        INBUFF
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        ENTRY
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        MOVECD
  comment
   ;reset current drive (again).
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Convert input line to upper case.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     GETINP2
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        INBUFF
     +
     multiplyingExpression
      argument
       number
        1
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;(B)=character counter.
 \n
 line
  lbl
   label
    name
     GETINP3
   :
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        B
  comment
   ;end of the line?
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        GETINP4
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;convert to upper case.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        UPPER
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
  comment
   ;adjust character count.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        GETINP3
 \n
 line
  lbl
   label
    name
     GETINP4
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;add trailing null.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        INBUFF
     +
     multiplyingExpression
      argument
       number
        2
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           INPOINT
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;reset input line pointer.
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Routine to check the console for a key pressed. The zero
 \n
 line
  comment
   ; flag is set is none, else the character is returned in (A).
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     CHKCON
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       number
        11
  comment
   ;check console.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        ENTRY
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
  comment
   ;return if nothing.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       number
        1
  comment
   ;else get character.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        ENTRY
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;clear zero flag and return.
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Routine to get the currently active drive number.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     GETDSK
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       number
        25
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        ENTRY
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Set the stabdard dma address.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     STDDMA
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       name
        TBUFF
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Routine to set the dma address to (DE).
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     DMASET
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       number
        26
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        ENTRY
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;  Delete the batch file created by SUBMIT.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     DELBATCH
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        BATCH
  comment
   ;is batch active?
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;yes, de-activate it.
 \n
 line
  instruction
   opcode
    XOR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        DSKSEL
  comment
   ;select drive 0 for sure.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       name
        BATCHFCB
  comment
   ;and delete this file.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        DELETE
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           CDRIVE
       )
  comment
   ;reset current drive.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        DSKSEL
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Check to two strings at (PATTRN1) and (PATTRN2). They must be
 \n
 line
  comment
   ; the same or we halt....
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     VERIFY
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       name
        PATTRN1
  comment
   ;these are the serial number bytes.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        PATTRN2
  comment
   ;ditto, but how could they be different?
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
    ,
    expression
     multiplyingExpression
      argument
       number
        6
  comment
   ;6 bytes each.
 \n
 line
  lbl
   label
    name
     VERIFY1
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           DE
       )
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        HALT
  comment
   ;jump to halt routine.
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        VERIFY1
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Print back file name with a '?' to indicate a syntax error.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     SYNERR
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CRLF
  comment
   ;end current line.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           NAMEPNT
       )
  comment
   ;this points to name in error.
 \n
 line
  lbl
   label
    name
     SYNERR1
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;print it until a space or null is found.
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        ' '
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        SYNERR2
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        SYNERR2
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        PRINT
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SYNERR1
 \n
 line
  lbl
   label
    name
     SYNERR2
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       string_
        '?'
  comment
   ;add trailing '?'.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        PRINT
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CRLF
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        DELBATCH
  comment
   ;delete any batch file.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CMMND1
  comment
   ;and restart from console input.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Check character at (DE) for legal command input. Note that the
 \n
 line
  comment
   ; zero flag is set if the character is a delimiter.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     CHECK
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           DE
       )
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        ' '
  comment
   ;control characters are not legal here.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       name
        SYNERR
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
  comment
   ;check for valid delimiter.
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        '='
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        '_'
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        '.'
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        ':'
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        ';'
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        '<'
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        '>'
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Get the next non-blank character from (DE).
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     NONBLANK
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           DE
       )
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;string ends with a null.
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        ' '
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NONBLANK
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Add (HL)=(HL)+(A)
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     ADDHL
   :
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        L
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        L
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NC
  comment
   ;take care of any carry.
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        H
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Convert the first name in (FCB).
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     CONVFST
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       number
        0
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Format a file name (convert * to '?', etc.). On return,
 \n
 line
  comment
   ; (A)=0 is an unambigeous name was specified. Enter with (A) equal to
 \n
 line
  comment
   ; the position within the fcb for the name (either 0 or 16).
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     CONVERT
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        FCB
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        ADDHL
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    XOR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           CHGDRV
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;initialize drive change flag.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           INPOINT
       )
  comment
   ;set (HL) as pointer into input line.
 \n
 line
  instruction
   opcode
    EX
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NONBLANK
  comment
   ;get next non-blank character.
 \n
 line
  instruction
   opcode
    EX
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           NAMEPNT
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;save pointer here for any error message.
 \n
 line
  instruction
   opcode
    EX
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           DE
       )
  comment
   ;get first character.
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        CONVRT1
 \n
 line
  instruction
   opcode
    SBC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       string_
        'A'
     -
     multiplyingExpression
      argument
       number
        1
  comment
   ;might be a drive name, convert to binary.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;and save.
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
  comment
   ;check next character for a ':'.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           DE
       )
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        ':'
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        CONVRT2
 \n
 line
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
  comment
   ;nope, move pointer back to the start of the line.
 \n
 line
  lbl
   label
    name
     CONVRT1
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           CDRIVE
       )
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CONVRT3
 \n
 line
  lbl
   label
    name
     CONVRT2
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        B
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           CHGDRV
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;set change in drives flag.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        B
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Convert the basic file name.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     CONVRT3
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
    ,
    expression
     multiplyingExpression
      argument
       number
        08H
 \n
 line
  lbl
   label
    name
     CONVRT4
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CHECK
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        CONVRT8
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        '*'
  comment
   ;note that an '*' will fill the remaining
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        CONVRT5
  comment
   ;field with '?'.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       string_
        '?'
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CONVRT6
 \n
 line
  lbl
   label
    name
     CONVRT5
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  lbl
   label
    name
     CONVRT6
   :
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        CONVRT4
 \n
 line
  lbl
   label
    name
     CONVRT7
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CHECK
  comment
   ;get next delimiter.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        GETEXT
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CONVRT7
 \n
 line
  lbl
   label
    name
     CONVRT8
   :
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;blank fill the file name.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       string_
        ' '
 \n
 line
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        CONVRT8
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Get the extension and convert it.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     GETEXT
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
    ,
    expression
     multiplyingExpression
      argument
       number
        03H
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        '.'
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        GETEXT5
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  lbl
   label
    name
     GETEXT1
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CHECK
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        GETEXT5
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        '*'
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        GETEXT2
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       string_
        '?'
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        GETEXT3
 \n
 line
  lbl
   label
    name
     GETEXT2
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  lbl
   label
    name
     GETEXT3
   :
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        GETEXT1
 \n
 line
  lbl
   label
    name
     GETEXT4
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CHECK
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        GETEXT6
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        GETEXT4
 \n
 line
  lbl
   label
    name
     GETEXT5
   :
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       string_
        ' '
 \n
 line
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        GETEXT5
 \n
 line
  lbl
   label
    name
     GETEXT6
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
    ,
    expression
     multiplyingExpression
      argument
       number
        3
 \n
 line
  lbl
   label
    name
     GETEXT7
   :
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       number
        0
 \n
 line
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        GETEXT7
 \n
 line
  instruction
   opcode
    EX
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           INPOINT
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;save input line pointer.
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Check to see if this is an ambigeous file name specification.
 \n
 line
  comment
   ; Set the (A) register to non zero if it is.
 \n
 line
  comment
   ;
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
    ,
    expression
     multiplyingExpression
      argument
       number
        11
  comment
   ;set name length.
 \n
 line
  lbl
   label
    name
     GETEXT8
   :
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        '?'
  comment
   ;any question marks?
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        GETEXT9
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
  comment
   ;count them.
 \n
 line
  lbl
   label
    name
     GETEXT9
   :
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        GETEXT8
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        B
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   CP/M command table. Note commands can be either 3 or 4 characters long.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     NUMCMDS
  directive
   assemblerdirective
    EQU
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        6
  comment
   ;number of commands
 \n
 line
  lbl
   label
    name
     CMDTBL
   :
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        'DIR '
 \n
 line
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        'ERA '
 \n
 line
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        'TYPE'
 \n
 line
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        'SAVE'
 \n
 line
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        'REN '
 \n
 line
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        'USER'
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   The following six bytes must agree with those at (PATTRN2)
 \n
 line
  comment
   ; or cp/m will HALT. Why?
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     PATTRN1
   :
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        22
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;(* serial number bytes *).
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Search the command table for a match with what has just
 \n
 line
  comment
   ; been entered. If a match is found, then we jump to the
 \n
 line
  comment
   ; proper section. Else jump to (UNKNOWN).
 \n
 line
  comment
   ; On return, the (C) register is set to the command number
 \n
 line
  comment
   ; that matched (or NUMCMDS+1 if no match).
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     SEARCH
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        CMDTBL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       number
        0
 \n
 line
  lbl
   label
    name
     SEARCH1
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        C
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NUMCMDS
  comment
   ;this commands exists.
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NC
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       name
        FCB
     +
     multiplyingExpression
      argument
       number
        1
  comment
   ;check this one.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
    ,
    expression
     multiplyingExpression
      argument
       number
        4
  comment
   ;max command length.
 \n
 line
  lbl
   label
    name
     SEARCH2
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           DE
       )
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        SEARCH3
  comment
   ;not a match.
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        SEARCH2
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           DE
       )
  comment
   ;allow a 3 character command to match.
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        ' '
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        SEARCH4
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        C
  comment
   ;set return register for this command.
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  lbl
   label
    name
     SEARCH3
   :
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        SEARCH3
 \n
 line
  lbl
   label
    name
     SEARCH4
   :
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SEARCH1
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Set the input buffer to empty and then start the command
 \n
 line
  comment
   ; processor (ccp).
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     CLEARBUF
   :
  instruction
   opcode
    XOR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           INBUFF
        +
        multiplyingExpression
         argument
          number
           1
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;second byte is actual length.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;**************************************************************
 \n
 line
  comment
   ;*
 \n
 line
  comment
   ;*
 \n
 line
  comment
   ;* C C P  -   C o n s o l e   C o m m a n d   P r o c e s s o r
 \n
 line
  comment
   ;*
 \n
 line
  comment
   ;**************************************************************
 \n
 line
  comment
   ;*
 \n
 line
  lbl
   label
    name
     COMMAND
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        SP
    ,
    expression
     multiplyingExpression
      argument
       name
        CCPSTACK
  comment
   ;setup stack area.
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
  comment
   ;note that (C) should be equal to:
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        C
  comment
   ;(uuuudddd) where 'uuuu' is the user number
 \n
 line
  instruction
   opcode
    RRA
  comment
   ;and 'dddd' is the drive number.
 \n
 line
  instruction
   opcode
    RRA
 \n
 line
  instruction
   opcode
    RRA
 \n
 line
  instruction
   opcode
    RRA
 \n
 line
  instruction
   opcode
    AND
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0FH
  comment
   ;isolate the user number.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        E
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        GETSETUC
  comment
   ;and set it.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        RESDSK
  comment
   ;reset the disk system.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           BATCH
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;clear batch mode flag.
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        C
 \n
 line
  instruction
   opcode
    AND
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0FH
  comment
   ;isolate the drive number.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           CDRIVE
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;and save.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        DSKSEL
  comment
   ;...and select.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           INBUFF
        +
        multiplyingExpression
         argument
          number
           1
       )
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;anything in input buffer already?
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        CMMND2
  comment
   ;yes, we just process it.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Entry point to get a command line from the console.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     CMMND1
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        SP
    ,
    expression
     multiplyingExpression
      argument
       name
        CCPSTACK
  comment
   ;set stack straight.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CRLF
  comment
   ;start a new line on the screen.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        GETDSK
  comment
   ;get current drive.
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       string_
        'a'
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        PRINT
  comment
   ;print current drive.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       string_
        '>'
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        PRINT
  comment
   ;and add prompt.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        GETINP
  comment
   ;get line from user.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Process command line here.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     CMMND2
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       name
        TBUFF
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        DMASET
  comment
   ;set standard dma address.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        GETDSK
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           CDRIVE
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;set current drive.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CONVFST
  comment
   ;convert name typed in.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        SYNERR
  comment
   ;wild cards are not allowed.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           CHGDRV
       )
  comment
   ;if a change in drives was indicated,
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;then treat this as an unknown command
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        UNKNOWN
  comment
   ;which gets executed.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SEARCH
  comment
   ;else search command table for a match.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Note that an unknown command returns
 \n
 line
  comment
   ; with (A) pointing to the last address
 \n
 line
  comment
   ; in our table which is (UNKNOWN).
 \n
 line
  comment
   ;
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        CMDADR
  comment
   ;now, look thru our address table for command (A).
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        E
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;set (DE) to command number.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        D
    ,
    expression
     multiplyingExpression
      argument
       number
        0
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       register_
        DE
  comment
   ;(HL)=(CMDADR)+2*(command number).
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;now pick out this address.
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        H
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        L
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;now execute it.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   CP/M command address table.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     CMDADR
   :
  directive
   assemblerdirective
    DEFW
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        DIRECT
    ,
    expression
     multiplyingExpression
      argument
       name
        ERASE
    ,
    expression
     multiplyingExpression
      argument
       name
        TYPE
    ,
    expression
     multiplyingExpression
      argument
       name
        SAVE
 \n
 line
  directive
   assemblerdirective
    DEFW
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        RENAME
    ,
    expression
     multiplyingExpression
      argument
       name
        USER
    ,
    expression
     multiplyingExpression
      argument
       name
        UNKNOWN
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Halt the system. Reason for this is unknown at present.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     HALT
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       number
        76F3H
  comment
   ;'DI HLT' instructions.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           CBASE
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        CBASE
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Read error while TYPEing a file.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     RDERROR
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
    ,
    expression
     multiplyingExpression
      argument
       name
        RDERR
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        PLINE
 \n
 line
  lbl
   label
    name
     RDERR
   :
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        'Read error'
    ,
    expression
     multiplyingExpression
      argument
       number
        0
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Required file was not located.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     NONE
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
    ,
    expression
     multiplyingExpression
      argument
       name
        NOFILE
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        PLINE
 \n
 line
  lbl
   label
    name
     NOFILE
   :
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        'No file'
    ,
    expression
     multiplyingExpression
      argument
       number
        0
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Decode a command of the form 'A>filename number{ filename}.
 \n
 line
  comment
   ; Note that a drive specifier is not allowed on the first file
 \n
 line
  comment
   ; name. On return, the number is in register (A). Any error
 \n
 line
  comment
   ; causes 'filename?' to be printed and the command is aborted.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     DECODE
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CONVFST
  comment
   ;convert filename.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           CHGDRV
       )
  comment
   ;do not allow a drive to be specified.
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        SYNERR
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        FCB
     +
     multiplyingExpression
      argument
       number
        1
  comment
   ;convert number now.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
    ,
    expression
     multiplyingExpression
      argument
       number
        11
  comment
   ;(B)=sum register, (C)=max digit count.
 \n
 line
  lbl
   label
    name
     DECODE1
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        ' '
  comment
   ;a space terminates the numeral.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        DECODE3
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    SUB
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        '0'
  comment
   ;make binary from ascii.
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        10
  comment
   ;legal digit?
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NC
    ,
    expression
     multiplyingExpression
      argument
       name
        SYNERR
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        D
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;yes, save it in (D).
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        B
  comment
   ;compute (B)=(B)*10 and check for overflow.
 \n
 line
  instruction
   opcode
    AND
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0E0H
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        SYNERR
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        B
 \n
 line
  instruction
   opcode
    RLCA
 \n
 line
  instruction
   opcode
    RLCA
 \n
 line
  instruction
   opcode
    RLCA
  comment
   ;(A)=(B)*8
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        B
  comment
   ;.......*9
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       name
        SYNERR
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        B
  comment
   ;.......*10
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       name
        SYNERR
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        D
  comment
   ;add in new digit now.
 \n
 line
  lbl
   label
    name
     DECODE2
   :
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       name
        SYNERR
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;and save result.
 \n
 line
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
  comment
   ;only look at 11 digits.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        DECODE1
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  lbl
   label
    name
     DECODE3
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;spaces must follow (why?).
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        ' '
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        SYNERR
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  lbl
   label
    name
     DECODE4
   :
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        DECODE3
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        B
  comment
   ;set (A)=the numeric value entered.
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Move 3 bytes from (HL) to (DE). Note that there is only
 \n
 line
  comment
   ; one reference to this at (A2D5h).
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     MOVE3
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
    ,
    expression
     multiplyingExpression
      argument
       number
        3
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Move (B) bytes from (HL) to (DE).
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     HL2DE
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           DE
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        HL2DE
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Compute (HL)=(TBUFF)+(A)+(C) and get the byte that's here.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     EXTRACT
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        TBUFF
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        C
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        ADDHL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;  Check drive specified. If it means a change, then the new
 \n
 line
  comment
   ; drive will be selected. In any case, the drive byte of the
 \n
 line
  comment
   ; fcb will be set to null (means use current drive).
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     DSELECT
   :
  instruction
   opcode
    XOR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;null out first byte of fcb.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           FCB
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           CHGDRV
       )
  comment
   ;a drive change indicated?
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
 \n
 line
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;yes, is it the same as the current drive?
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        CDRIVE
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        DSKSEL
  comment
   ;no. Select it then.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Check the drive selection and reset it to the previous
 \n
 line
  comment
   ; drive if it was changed for the preceeding command.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     RESETDR
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           CHGDRV
       )
  comment
   ;drive change indicated?
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
 \n
 line
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;yes, was it a different drive?
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        CDRIVE
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           CDRIVE
       )
  comment
   ;yes, re-select our old drive.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        DSKSEL
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;**************************************************************
 \n
 line
  comment
   ;*
 \n
 line
  comment
   ;*           D I R E C T O R Y   C O M M A N D
 \n
 line
  comment
   ;*
 \n
 line
  comment
   ;**************************************************************
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     DIRECT
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CONVFST
  comment
   ;convert file name.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        DSELECT
  comment
   ;select indicated drive.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        FCB
     +
     multiplyingExpression
      argument
       number
        1
  comment
   ;was any file indicated?
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        ' '
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        DIRECT2
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
    ,
    expression
     multiplyingExpression
      argument
       number
        11
  comment
   ;no. Fill field with '?' - same as *.*.
 \n
 line
  lbl
   label
    name
     DIRECT1
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       string_
        '?'
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        DIRECT1
 \n
 line
  lbl
   label
    name
     DIRECT2
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        E
    ,
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;set initial cursor position.
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SRCHFCB
  comment
   ;get first file name.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        NONE
  comment
   ;none found at all?
 \n
 line
  lbl
   label
    name
     DIRECT3
   :
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        DIRECT9
  comment
   ;terminate if no more names.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           RTNCODE
       )
  comment
   ;get file's position in segment (0-3).
 \n
 line
  instruction
   opcode
    RRCA
 \n
 line
  instruction
   opcode
    RRCA
 \n
 line
  instruction
   opcode
    RRCA
 \n
 line
  instruction
   opcode
    AND
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        60H
  comment
   ;(A)=position*32
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       number
        10
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        EXTRACT
  comment
   ;extract the tenth entry in fcb.
 \n
 line
  instruction
   opcode
    RLA
  comment
   ;check system file status bit.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       name
        DIRECT8
  comment
   ;we don't list them.
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        E
  comment
   ;bump name count.
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        E
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  instruction
   opcode
    AND
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        03H
  comment
   ;at end of line?
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        AF
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        DIRECT4
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CRLF
  comment
   ;yes, end this line and start another.
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        GETDSK
  comment
   ;start line with ('A:').
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       string_
        'A'
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        PRINTB
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       string_
        ':'
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        PRINTB
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        DIRECT5
 \n
 line
  lbl
   label
    name
     DIRECT4
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SPACE
  comment
   ;add seperator between file names.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       string_
        ':'
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        PRINTB
 \n
 line
  lbl
   label
    name
     DIRECT5
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SPACE
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
    ,
    expression
     multiplyingExpression
      argument
       number
        1
  comment
   ;'extract' each file name character at a time.
 \n
 line
  lbl
   label
    name
     DIRECT6
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        B
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        EXTRACT
 \n
 line
  instruction
   opcode
    AND
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        7FH
  comment
   ;strip bit 7 (status bit).
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        ' '
  comment
   ;are we at the end of the name?
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        DRECT65
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        AF
  comment
   ;yes, don't print spaces at the end of a line.
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        AF
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        3
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        DRECT63
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       number
        9
  comment
   ;first check for no extension.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        EXTRACT
 \n
 line
  instruction
   opcode
    AND
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        7FH
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        ' '
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        DIRECT7
  comment
   ;don't print spaces.
 \n
 line
  lbl
   label
    name
     DRECT63
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       string_
        ' '
  comment
   ;else print them.
 \n
 line
  lbl
   label
    name
     DRECT65
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        PRINTB
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
  comment
   ;bump to next character psoition.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        B
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        12
  comment
   ;end of the name?
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NC
    ,
    expression
     multiplyingExpression
      argument
       name
        DIRECT7
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        9
  comment
   ;nope, starting extension?
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        DIRECT6
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SPACE
  comment
   ;yes, add seperating space.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        DIRECT6
 \n
 line
  lbl
   label
    name
     DIRECT7
   :
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        AF
  comment
   ;get the next file name.
 \n
 line
  lbl
   label
    name
     DIRECT8
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CHKCON
  comment
   ;first check console, quit on anything.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        DIRECT9
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SRCHNXT
  comment
   ;get next name.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        DIRECT3
  comment
   ;and continue with our list.
 \n
 line
  lbl
   label
    name
     DIRECT9
   :
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
  comment
   ;restore the stack and return to command level.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        GETBACK
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;**************************************************************
 \n
 line
  comment
   ;*
 \n
 line
  comment
   ;*                E R A S E   C O M M A N D
 \n
 line
  comment
   ;*
 \n
 line
  comment
   ;**************************************************************
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     ERASE
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CONVFST
  comment
   ;convert file name.
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        11
  comment
   ;was '*.*' entered?
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        ERASE1
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
    ,
    expression
     multiplyingExpression
      argument
       name
        YESNO
  comment
   ;yes, ask for confirmation.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        PLINE
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        GETINP
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        INBUFF
     +
     multiplyingExpression
      argument
       number
        1
 \n
 line
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;must be exactly 'y'.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        CMMND1
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        'Y'
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        CMMND1
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           INPOINT
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;save input line pointer.
 \n
 line
  lbl
   label
    name
     ERASE1
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        DSELECT
  comment
   ;select desired disk.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       name
        FCB
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        DELETE
  comment
   ;delete the file.
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        NONE
  comment
   ;not there?
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        GETBACK
  comment
   ;return to command level now.
 \n
 line
  lbl
   label
    name
     YESNO
   :
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        'All (y/n)?'
    ,
    expression
     multiplyingExpression
      argument
       number
        0
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;**************************************************************
 \n
 line
  comment
   ;*
 \n
 line
  comment
   ;*            T Y P E   C O M M A N D
 \n
 line
  comment
   ;*
 \n
 line
  comment
   ;**************************************************************
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     TYPE
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CONVFST
  comment
   ;convert file name.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        SYNERR
  comment
   ;wild cards not allowed.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        DSELECT
  comment
   ;select indicated drive.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        OPENFCB
  comment
   ;open the file.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        TYPE5
  comment
   ;not there?
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CRLF
  comment
   ;ok, start a new line on the screen.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        NBYTES
  comment
   ;initialize byte counter.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       number
        0FFH
  comment
   ;set to read first sector.
 \n
 line
  lbl
   label
    name
     TYPE1
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        NBYTES
 \n
 line
  lbl
   label
    name
     TYPE2
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;have we written the entire sector?
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        128
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       name
        TYPE3
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;yes, read in the next one.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        READFCB
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        TYPE4
  comment
   ;end or error?
 \n
 line
  instruction
   opcode
    XOR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;ok, clear byte counter.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  lbl
   label
    name
     TYPE3
   :
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;count this byte.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        TBUFF
  comment
   ;and get the (A)th one from the buffer (TBUFF).
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        ADDHL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CNTRLZ
  comment
   ;end of file mark?
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        GETBACK
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        PRINT
  comment
   ;no, print it.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CHKCON
  comment
   ;check console, quit if anything ready.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        GETBACK
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        TYPE1
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Get here on an end of file or read error.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     TYPE4
   :
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;read error?
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        GETBACK
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        RDERROR
  comment
   ;yes, print message.
 \n
 line
  lbl
   label
    name
     TYPE5
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        RESETDR
  comment
   ;and reset proper drive
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SYNERR
  comment
   ;now print file name with problem.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;**************************************************************
 \n
 line
  comment
   ;*
 \n
 line
  comment
   ;*            S A V E   C O M M A N D
 \n
 line
  comment
   ;*
 \n
 line
  comment
   ;**************************************************************
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     SAVE
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        DECODE
  comment
   ;get numeric number that follows SAVE.
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        AF
  comment
   ;save number of pages to write.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CONVFST
  comment
   ;convert file name.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        SYNERR
  comment
   ;wild cards not allowed.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        DSELECT
  comment
   ;select specified drive.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       name
        FCB
  comment
   ;now delete this file.
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        DELETE
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CREATE
  comment
   ;and create it again.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        SAVE3
  comment
   ;can't create?
 \n
 line
  instruction
   opcode
    XOR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;clear record number byte.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           FCB
        +
        multiplyingExpression
         argument
          number
           32
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        AF
  comment
   ;convert pages to sectors.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        L
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        H
    ,
    expression
     multiplyingExpression
      argument
       number
        0
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;(HL)=number of sectors to write.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       name
        TBASE
  comment
   ;and we start from here.
 \n
 line
  lbl
   label
    name
     SAVE1
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        H
  comment
   ;done yet?
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        L
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        SAVE2
 \n
 line
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;nope, count this and compute the start
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;of the next 128 byte sector.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       number
        128
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;save it and set the transfer address.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        DMASET
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       name
        FCB
  comment
   ;write out this sector now.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        WRTREC
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
  comment
   ;reset (DE) to the start of the last sector.
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;restore sector count.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        SAVE3
  comment
   ;write error?
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SAVE1
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Get here after writing all of the file.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     SAVE2
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       name
        FCB
  comment
   ;now close the file.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CLOSE
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;did it close ok?
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        SAVE4
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Print out error message (no space).
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     SAVE3
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
    ,
    expression
     multiplyingExpression
      argument
       name
        NOSPACE
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        PLINE
 \n
 line
  lbl
   label
    name
     SAVE4
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        STDDMA
  comment
   ;reset the standard dma address.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        GETBACK
 \n
 line
  lbl
   label
    name
     NOSPACE
   :
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        'No space'
    ,
    expression
     multiplyingExpression
      argument
       number
        0
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;**************************************************************
 \n
 line
  comment
   ;*
 \n
 line
  comment
   ;*           R E N A M E   C O M M A N D
 \n
 line
  comment
   ;*
 \n
 line
  comment
   ;**************************************************************
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     RENAME
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CONVFST
  comment
   ;convert first file name.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        SYNERR
  comment
   ;wild cards not allowed.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           CHGDRV
       )
  comment
   ;remember any change in drives specified.
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        AF
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        DSELECT
  comment
   ;and select this drive.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SRCHFCB
  comment
   ;is this file present?
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        RENAME6
  comment
   ;yes, print error message.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        FCB
  comment
   ;yes, move this name into second slot.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       name
        FCB
     +
     multiplyingExpression
      argument
       number
        16
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
    ,
    expression
     multiplyingExpression
      argument
       number
        16
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        HL2DE
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           INPOINT
       )
  comment
   ;get input pointer.
 \n
 line
  instruction
   opcode
    EX
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NONBLANK
  comment
   ;get next non blank character.
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        '='
  comment
   ;only allow an '=' or '_' seperator.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        RENAME1
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        '_'
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        RENAME5
 \n
 line
  lbl
   label
    name
     RENAME1
   :
  instruction
   opcode
    EX
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;ok, skip seperator.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           INPOINT
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;save input line pointer.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CONVFST
  comment
   ;convert this second file name now.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        RENAME5
  comment
   ;again, no wild cards.
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        AF
  comment
   ;if a drive was specified, then it
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;must be the same as before.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        CHGDRV
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        RENAME2
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        B
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        RENAME5
  comment
   ;they were different, error.
 \n
 line
  lbl
   label
    name
     RENAME2
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        B
  comment
   ;\treset as per the first file specification.
 \n
 line
  instruction
   opcode
    XOR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           FCB
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;clear the drive byte of the fcb.
 \n
 line
  lbl
   label
    name
     RENAME3
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SRCHFCB
  comment
   ;and go look for second file.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        RENAME4
  comment
   ;doesn't exist?
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       name
        FCB
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        RENAM
  comment
   ;ok, rename the file.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        GETBACK
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Process rename errors here.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     RENAME4
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NONE
  comment
   ;file not there.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        GETBACK
 \n
 line
  lbl
   label
    name
     RENAME5
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        RESETDR
  comment
   ;bad command format.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SYNERR
 \n
 line
  lbl
   label
    name
     RENAME6
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
    ,
    expression
     multiplyingExpression
      argument
       name
        EXISTS
  comment
   ;destination file already exists.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        PLINE
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        GETBACK
 \n
 line
  lbl
   label
    name
     EXISTS
   :
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        'File exists'
    ,
    expression
     multiplyingExpression
      argument
       number
        0
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;**************************************************************
 \n
 line
  comment
   ;*
 \n
 line
  comment
   ;*             U S E R   C O M M A N D
 \n
 line
  comment
   ;*
 \n
 line
  comment
   ;**************************************************************
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     USER
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        DECODE
  comment
   ;get numeric value following command.
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        16
  comment
   ;legal user number?
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NC
    ,
    expression
     multiplyingExpression
      argument
       name
        SYNERR
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        E
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;yes but is there anything else?
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           FCB
        +
        multiplyingExpression
         argument
          number
           1
       )
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        ' '
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        SYNERR
  comment
   ;yes, that is not allowed.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        GETSETUC
  comment
   ;ok, set user code.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        GETBACK1
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;**************************************************************
 \n
 line
  comment
   ;*
 \n
 line
  comment
   ;*        T R A N S I A N T   P R O G R A M   C O M M A N D
 \n
 line
  comment
   ;*
 \n
 line
  comment
   ;**************************************************************
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     UNKNOWN
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        VERIFY
  comment
   ;check for valid system (why?).
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           FCB
        +
        multiplyingExpression
         argument
          number
           1
       )
  comment
   ;anything to execute?
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        ' '
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        UNKWN1
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           CHGDRV
       )
  comment
   ;nope, only a drive change?
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        GETBACK1
  comment
   ;neither???
 \n
 line
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           CDRIVE
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;ok, store new drive.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        MOVECD
  comment
   ;set (TDRIVE) also.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        DSKSEL
  comment
   ;and select this drive.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        GETBACK1
  comment
   ;then return.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Here a file name was typed. Prepare to execute it.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     UNKWN1
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       name
        FCB
     +
     multiplyingExpression
      argument
       number
        9
  comment
   ;an extension specified?
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           DE
       )
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        ' '
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        SYNERR
  comment
   ;yes, not allowed.
 \n
 line
  lbl
   label
    name
     UNKWN2
   :
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        DSELECT
  comment
   ;select specified drive.
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        COMFILE
  comment
   ;set the extension to 'COM'.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        MOVE3
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        OPENFCB
  comment
   ;and open this file.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        UNKWN9
  comment
   ;not present?
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Load in the program.
 \n
 line
  comment
   ;
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        TBASE
  comment
   ;store the program starting here.
 \n
 line
  lbl
   label
    name
     UNKWN3
   :
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    EX
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        DMASET
  comment
   ;set transfer address.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       name
        FCB
  comment
   ;and read the next record.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        RDREC
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        UNKWN4
  comment
   ;end of file or read error?
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;nope, bump pointer for next sector.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       number
        128
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       name
        CBASE
  comment
   ;enough room for the whole file?
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        L
 \n
 line
  instruction
   opcode
    SUB
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        E
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        H
 \n
 line
  instruction
   opcode
    SBC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        D
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NC
    ,
    expression
     multiplyingExpression
      argument
       name
        UNKWN0
  comment
   ;no, it can't fit.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        UNKWN3
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Get here after finished reading.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     UNKWN4
   :
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;normal end of file?
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        UNKWN0
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        RESETDR
  comment
   ;yes, reset previous drive.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CONVFST
  comment
   ;convert the first file name that follows
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        CHGDRV
  comment
   ;command name.
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;set drive code in default fcb.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           FCB
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       number
        16
  comment
   ;put second name 16 bytes later.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CONVERT
  comment
   ;convert second file name.
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;and set the drive for this second file.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           FCB
        +
        multiplyingExpression
         argument
          number
           16
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    XOR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;clear record byte in fcb.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           FCB
        +
        multiplyingExpression
         argument
          number
           32
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       name
        TFCB
  comment
   ;move it into place at(005Ch).
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        FCB
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
    ,
    expression
     multiplyingExpression
      argument
       number
        33
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        HL2DE
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        INBUFF
     +
     multiplyingExpression
      argument
       number
        2
  comment
   ;now move the remainder of the input
 \n
 line
  lbl
   label
    name
     UNKWN5
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;line down to (0080h). Look for a non blank.
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;or a null.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        UNKWN6
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        ' '
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        UNKWN6
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        UNKWN5
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Do the line move now. It ends in a null byte.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     UNKWN6
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
    ,
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;keep a character count.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       name
        TBUFF
     +
     multiplyingExpression
      argument
       number
        1
  comment
   ;data gets put here.
 \n
 line
  lbl
   label
    name
     UNKWN7
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;move it now.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           DE
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        UNKWN8
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        UNKWN7
 \n
 line
  lbl
   label
    name
     UNKWN8
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        B
  comment
   ;now store the character count.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           TBUFF
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CRLF
  comment
   ;clean up the screen.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        STDDMA
  comment
   ;set standard transfer address.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SETCDRV
  comment
   ;reset current drive.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        TBASE
  comment
   ;and execute the program.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Transiant programs return here (or reboot).
 \n
 line
  comment
   ;
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        SP
    ,
    expression
     multiplyingExpression
      argument
       name
        BATCH
  comment
   ;set stack first off.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        MOVECD
  comment
   ;move current drive into place (TDRIVE).
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        DSKSEL
  comment
   ;and reselect it.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CMMND1
  comment
   ;back to comand mode.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Get here if some error occured.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     UNKWN9
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        RESETDR
  comment
   ;inproper format.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SYNERR
 \n
 line
  lbl
   label
    name
     UNKWN0
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
    ,
    expression
     multiplyingExpression
      argument
       name
        BADLOAD
  comment
   ;read error or won't fit.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        PLINE
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        GETBACK
 \n
 line
  lbl
   label
    name
     BADLOAD
   :
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        'Bad load'
    ,
    expression
     multiplyingExpression
      argument
       number
        0
 \n
 line
  lbl
   label
    name
     COMFILE
   :
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        'COM'
  comment
   ;command file extension.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Get here to return to command level. We will reset the
 \n
 line
  comment
   ; previous active drive and then either return to command
 \n
 line
  comment
   ; level directly or print error message and then return.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     GETBACK
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        RESETDR
  comment
   ;reset previous drive.
 \n
 line
  lbl
   label
    name
     GETBACK1
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CONVFST
  comment
   ;convert first name in (FCB).
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           FCB
        +
        multiplyingExpression
         argument
          number
           1
       )
  comment
   ;if this was just a drive change request,
 \n
 line
  instruction
   opcode
    SUB
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        ' '
  comment
   ;make sure it was valid.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        CHGDRV
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        SYNERR
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CMMND1
  comment
   ;ok, return to command level.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   ccp stack area.
 \n
 line
  comment
   ;
 \n
 line
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
 \n
 line
  lbl
   label
    name
     CCPSTACK
  directive
   assemblerdirective
    EQU
   expressionlist
    expression
     multiplyingExpression
      argument
       dollar
        $
  comment
   ;end of ccp stack area.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Batch (or SUBMIT) processing information storage.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     BATCH
   :
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;batch mode flag (0=not active).
 \n
 line
  lbl
   label
    name
     BATCHFCB
   :
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       string_
        '$$$     SUB'
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   File control block setup by the CCP.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     FCB
   :
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       string_
        '           '
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       string_
        '           '
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
 \n
 line
  lbl
   label
    name
     RTNCODE
   :
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;status returned from bdos call.
 \n
 line
  lbl
   label
    name
     CDRIVE
   :
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;currently active drive.
 \n
 line
  lbl
   label
    name
     CHGDRV
   :
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;change in drives flag (0=no change).
 \n
 line
  lbl
   label
    name
     NBYTES
   :
  directive
   assemblerdirective
    DEFW
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;byte counter used by TYPE.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Room for expansion?
 \n
 line
  comment
   ;
 \n
 line
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Note that the following six bytes must match those at
 \n
 line
  comment
   ; (PATTRN1) or cp/m will HALT. Why?
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     PATTRN2
   :
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        22
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;(* serial number bytes *).
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;**************************************************************
 \n
 line
  comment
   ;*
 \n
 line
  comment
   ;*                    B D O S   E N T R Y
 \n
 line
  comment
   ;*
 \n
 line
  comment
   ;**************************************************************
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     FBASE
   :
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        FBASE1
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Bdos error table.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     BADSCTR
   :
  directive
   assemblerdirective
    DEFW
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        ERROR1
  comment
   ;bad sector on read or write.
 \n
 line
  lbl
   label
    name
     BADSLCT
   :
  directive
   assemblerdirective
    DEFW
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        ERROR2
  comment
   ;bad disk select.
 \n
 line
  lbl
   label
    name
     RODISK
   :
  directive
   assemblerdirective
    DEFW
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        ERROR3
  comment
   ;disk is read only.
 \n
 line
  lbl
   label
    name
     ROFILE
   :
  directive
   assemblerdirective
    DEFW
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        ERROR4
  comment
   ;file is read only.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Entry into bdos. (DE) or (E) are the parameters passed. The
 \n
 line
  comment
   ; function number desired is in register (C).
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     FBASE1
   :
  instruction
   opcode
    EX
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;save the (DE) parameters.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           PARAMS
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    EX
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        E
  comment
   ;and save register (E) in particular.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           EPARAM
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       number
        0
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           STATUS
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;clear return status.
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       register_
        SP
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           USRSTACK
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;save users stack pointer.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        SP
    ,
    expression
     multiplyingExpression
      argument
       name
        STKAREA
  comment
   ;and set our own.
 \n
 line
  instruction
   opcode
    XOR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;clear auto select storage space.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           AUTOFLAG
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           AUTO
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        GOBACK
  comment
   ;set return address.
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        C
  comment
   ;get function number.
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NFUNCTS
  comment
   ;valid function number?
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NC
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       register_
        E
  comment
   ;keep single register function here.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        FUNCTNS
  comment
   ;now look thru the function table.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        E
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        D
    ,
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;(DE)=function number.
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       register_
        DE
  comment
   ;(HL)=(start of table)+2*(function number).
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        E
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        D
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;now (DE)=address for this function.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           PARAMS
       )
  comment
   ;retrieve parameters.
 \n
 line
  instruction
   opcode
    EX
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;now (DE) has the original parameters.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;execute desired function.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   BDOS function jump table.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     NFUNCTS
  directive
   assemblerdirective
    EQU
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        41
  comment
   ;number of functions in followin table.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     FUNCTNS
   :
  directive
   assemblerdirective
    DEFW
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        WBOOT
    ,
    expression
     multiplyingExpression
      argument
       name
        GETCON
    ,
    expression
     multiplyingExpression
      argument
       name
        OUTCON
    ,
    expression
     multiplyingExpression
      argument
       name
        GETRDR
    ,
    expression
     multiplyingExpression
      argument
       name
        PUNCH
    ,
    expression
     multiplyingExpression
      argument
       name
        LIST
    ,
    expression
     multiplyingExpression
      argument
       name
        DIRCIO
    ,
    expression
     multiplyingExpression
      argument
       name
        GETIOB
 \n
 line
  directive
   assemblerdirective
    DEFW
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SETIOB
    ,
    expression
     multiplyingExpression
      argument
       name
        PRTSTR
    ,
    expression
     multiplyingExpression
      argument
       name
        RDBUFF
    ,
    expression
     multiplyingExpression
      argument
       name
        GETCSTS
    ,
    expression
     multiplyingExpression
      argument
       name
        GETVER
    ,
    expression
     multiplyingExpression
      argument
       name
        RSTDSK
    ,
    expression
     multiplyingExpression
      argument
       name
        SETDSK
    ,
    expression
     multiplyingExpression
      argument
       name
        OPENFIL
 \n
 line
  directive
   assemblerdirective
    DEFW
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CLOSEFIL
    ,
    expression
     multiplyingExpression
      argument
       name
        GETFST
    ,
    expression
     multiplyingExpression
      argument
       name
        GETNXT
    ,
    expression
     multiplyingExpression
      argument
       name
        DELFILE
    ,
    expression
     multiplyingExpression
      argument
       name
        READSEQ
    ,
    expression
     multiplyingExpression
      argument
       name
        WRTSEQ
    ,
    expression
     multiplyingExpression
      argument
       name
        FCREATE
 \n
 line
  directive
   assemblerdirective
    DEFW
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        RENFILE
    ,
    expression
     multiplyingExpression
      argument
       name
        GETLOG
    ,
    expression
     multiplyingExpression
      argument
       name
        GETCRNT
    ,
    expression
     multiplyingExpression
      argument
       name
        PUTDMA
    ,
    expression
     multiplyingExpression
      argument
       name
        GETALOC
    ,
    expression
     multiplyingExpression
      argument
       name
        WRTPRTD
    ,
    expression
     multiplyingExpression
      argument
       name
        GETROV
    ,
    expression
     multiplyingExpression
      argument
       name
        SETATTR
 \n
 line
  directive
   assemblerdirective
    DEFW
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        GETPARM
    ,
    expression
     multiplyingExpression
      argument
       name
        GETUSER
    ,
    expression
     multiplyingExpression
      argument
       name
        RDRANDOM
    ,
    expression
     multiplyingExpression
      argument
       name
        WTRANDOM
    ,
    expression
     multiplyingExpression
      argument
       name
        FILESIZE
    ,
    expression
     multiplyingExpression
      argument
       name
        SETRAN
    ,
    expression
     multiplyingExpression
      argument
       name
        LOGOFF
    ,
    expression
     multiplyingExpression
      argument
       name
        RTN
 \n
 line
  directive
   assemblerdirective
    DEFW
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        RTN
    ,
    expression
     multiplyingExpression
      argument
       name
        WTSPECL
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Bdos error message section.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     ERROR1
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        BADSEC
  comment
   ;bad sector message.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        PRTERR
  comment
   ;print it and get a 1 char responce.
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CNTRLC
  comment
   ;re-boot request (control-c)?
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;yes.
 \n
 line
  instruction
   opcode
    RET
  comment
   ;no, return to retry i/o function.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     ERROR2
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        BADSEL
  comment
   ;bad drive selected.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        ERROR5
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     ERROR3
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        DISKRO
  comment
   ;disk is read only.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        ERROR5
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     ERROR4
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        FILERO
  comment
   ;file is read only.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     ERROR5
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        PRTERR
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;always reboot on these errors.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     BDOSERR
   :
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        'Bdos Err On '
 \n
 line
  lbl
   label
    name
     BDOSDRV
   :
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        ' : $'
 \n
 line
  lbl
   label
    name
     BADSEC
   :
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        'Bad Sector$'
 \n
 line
  lbl
   label
    name
     BADSEL
   :
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        'Select$'
 \n
 line
  lbl
   label
    name
     FILERO
   :
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        'File '
 \n
 line
  lbl
   label
    name
     DISKRO
   :
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        'R/O$'
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Print bdos error message.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     PRTERR
   :
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;save second message pointer.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        OUTCRLF
  comment
   ;send (cr)(lf).
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           ACTIVE
       )
  comment
   ;get active drive.
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       string_
        'A'
  comment
   ;make ascii.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           BDOSDRV
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;and put in message.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
    ,
    expression
     multiplyingExpression
      argument
       name
        BDOSERR
  comment
   ;and print it.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        PRTMESG
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
  comment
   ;print second message line now.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        PRTMESG
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Get an input character. We will check our 1 character
 \n
 line
  comment
   ; buffer first. This may be set by the console status routine.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     GETCHAR
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        CHARBUF
  comment
   ;check character buffer.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;anything present already?
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;...either case clear it.
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
  comment
   ;yes, use it.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CONIN
  comment
   ;nope, go get a character responce.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Input and echo a character.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     GETECHO
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        GETCHAR
  comment
   ;input a character.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CHKCHAR
  comment
   ;carriage control?
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
  comment
   ;no, a regular control char so don't echo.
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        AF
  comment
   ;ok, save character now.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        OUTCON
  comment
   ;and echo it.
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        AF
  comment
   ;get character and return.
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Check character in (A). Set the zero flag on a carriage
 \n
 line
  comment
   ; control character and the carry flag on any other control
 \n
 line
  comment
   ; character.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     CHKCHAR
   :
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CR
  comment
   ;check for carriage return, line feed, backspace,
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
  comment
   ;or a tab.
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        LF
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        TAB
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        BS
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        ' '
  comment
   ;other control char? Set carry flag.
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Check the console during output. Halt on a control-s, then
 \n
 line
  comment
   ; reboot on a control-c. If anything else is ready, clear the
 \n
 line
  comment
   ; zero flag and return (the calling routine may want to do
 \n
 line
  comment
   ; something).
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     CKCONSOL
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           CHARBUF
       )
  comment
   ;check buffer.
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;if anything, just return without checking.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        CKCON2
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CONST
  comment
   ;nothing in buffer. Check console.
 \n
 line
  instruction
   opcode
    AND
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        01H
  comment
   ;look at bit 0.
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
  comment
   ;return if nothing.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CONIN
  comment
   ;ok, get it.
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CNTRLS
  comment
   ;if not control-s, return with zero cleared.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        CKCON1
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CONIN
  comment
   ;halt processing until another char
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CNTRLC
  comment
   ;is typed. Control-c?
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;yes, reboot now.
 \n
 line
  instruction
   opcode
    XOR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;no, just pretend nothing was ever ready.
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  lbl
   label
    name
     CKCON1
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           CHARBUF
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;save character in buffer for later processing.
 \n
 line
  lbl
   label
    name
     CKCON2
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       number
        1
  comment
   ;set (A) to non zero to mean something is ready.
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Output (C) to the screen. If the printer flip-flop flag
 \n
 line
  comment
   ; is set, we will send character to printer also. The console
 \n
 line
  comment
   ; will be checked in the process.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     OUTCHAR
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           OUTFLAG
       )
  comment
   ;check output flag.
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;anything and we won't generate output.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        OUTCHR1
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CKCONSOL
  comment
   ;check console (we don't care whats there).
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CONOUT
  comment
   ;output (C) to the screen.
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           PRTFLAG
       )
  comment
   ;check printer flip-flop flag.
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        LIST
  comment
   ;print it also if non-zero.
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  lbl
   label
    name
     OUTCHR1
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        C
  comment
   ;update cursors position.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        CURPOS
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        DEL
  comment
   ;rubouts don't do anything here.
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;bump line pointer.
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        ' '
  comment
   ;and return if a normal character.
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NC
 \n
 line
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;restore and check for the start of the line.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
  comment
   ;ingnore control characters at the start of the line.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        C
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        BS
  comment
   ;is it a backspace?
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        OUTCHR2
 \n
 line
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;yes, backup pointer.
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  lbl
   label
    name
     OUTCHR2
   :
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        LF
  comment
   ;is it a line feed?
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
  comment
   ;ignore anything else.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;reset pointer to start of line.
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Output (A) to the screen. If it is a control character
 \n
 line
  comment
   ; (other than carriage control), use ^x format.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     SHOWIT
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        C
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CHKCHAR
  comment
   ;check character.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NC
    ,
    expression
     multiplyingExpression
      argument
       name
        OUTCON
  comment
   ;not a control, use normal output.
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        AF
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       string_
        '^'
  comment
   ;for a control character, preceed it with '^'.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        OUTCHAR
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        AF
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        '@'
  comment
   ;and then use the letter equivelant.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Function to output (C) to the console device and expand tabs
 \n
 line
  comment
   ; if necessary.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     OUTCON
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        C
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        TAB
  comment
   ;is it a tab?
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        OUTCHAR
  comment
   ;use regular output.
 \n
 line
  lbl
   label
    name
     OUTCON1
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       string_
        ' '
  comment
   ;yes it is, use spaces instead.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        OUTCHAR
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           CURPOS
       )
  comment
   ;go until the cursor is at a multiple of 8
 \n\n
 line
  instruction
   opcode
    AND
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        07H
  comment
   ;position.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        OUTCON1
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Echo a backspace character. Erase the prevoius character
 \n
 line
  comment
   ; on the screen.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     BACKUP
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        BACKUP1
  comment
   ;backup the screen 1 place.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       string_
        ' '
  comment
   ;then blank that character.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CONOUT
 \n
 line
  lbl
   label
    name
     BACKUP1
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       name
        BS
  comment
   ;then back space once more.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CONOUT
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Signal a deleted line. Print a '#' at the end and start
 \n
 line
  comment
   ; over.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     NEWLINE
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       string_
        '#'
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        OUTCHAR
  comment
   ;print this.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        OUTCRLF
  comment
   ;start new line.
 \n
 line
  lbl
   label
    name
     NEWLN1
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           CURPOS
       )
  comment
   ;move the cursor to the starting position.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        STARTING
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NC
  comment
   ;there yet?
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       string_
        ' '
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        OUTCHAR
  comment
   ;nope, keep going.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NEWLN1
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Output a (cr) (lf) to the console device (screen).
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     OUTCRLF
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       name
        CR
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        OUTCHAR
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       name
        LF
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        OUTCHAR
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Print message pointed to by (BC). It will end with a '$'.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     PRTMESG
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           BC
       )
  comment
   ;check for terminating character.
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        '$'
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
  comment
   ;otherwise, bump pointer and print it.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        OUTCON
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        PRTMESG
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Function to execute a buffered read.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     RDBUFF
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           CURPOS
       )
  comment
   ;use present location as starting one.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           STARTING
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           PARAMS
       )
  comment
   ;get the maximum buffer space.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;point to first available space.
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;and save.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
    ,
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;keep a character count.
 \n
 line
  lbl
   label
    name
     RDBUF1
   :
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  lbl
   label
    name
     RDBUF2
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        GETCHAR
  comment
   ;get the next input character.
 \n
 line
  instruction
   opcode
    AND
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        7FH
  comment
   ;strip bit 7.
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;reset registers.
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CR
  comment
   ;en of the line?
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        RDBUF17
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        LF
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        RDBUF17
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        BS
  comment
   ;how about a backspace?
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        RDBUF3
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        B
  comment
   ;yes, but ignore at the beginning of the line.
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        RDBUF1
 \n
 line
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
  comment
   ;ok, update counter.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           CURPOS
       )
  comment
   ;if we backspace to the start of the line,
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           OUTFLAG
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;treat as a cancel (control-x).
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        RDBUF10
 \n
 line
  lbl
   label
    name
     RDBUF3
   :
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        DEL
  comment
   ;user typed a rubout?
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        RDBUF4
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        B
  comment
   ;ignore at the start of the line.
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        RDBUF1
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;ok, echo the prevoius character.
 \n
 line
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
  comment
   ;and reset pointers (counters).
 \n
 line
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        RDBUF15
 \n
 line
  lbl
   label
    name
     RDBUF4
   :
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CNTRLE
  comment
   ;physical end of line?
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        RDBUF5
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
  comment
   ;yes, do it.
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        OUTCRLF
 \n
 line
  instruction
   opcode
    XOR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;and update starting position.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           STARTING
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        RDBUF2
 \n
 line
  lbl
   label
    name
     RDBUF5
   :
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CNTRLP
  comment
   ;control-p?
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        RDBUF6
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;yes, flip the print flag filp-flop byte.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        PRTFLAG
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       number
        1
  comment
   ;PRTFLAG=1-PRTFLAG
 \n
 line
  instruction
   opcode
    SUB
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        RDBUF1
 \n
 line
  lbl
   label
    name
     RDBUF6
   :
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CNTRLX
  comment
   ;control-x (cancel)?
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        RDBUF8
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  lbl
   label
    name
     RDBUF7
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           STARTING
       )
  comment
   ;yes, backup the cursor to here.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        CURPOS
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NC
    ,
    expression
     multiplyingExpression
      argument
       name
        RDBUFF
  comment
   ;done yet?
 \n
 line
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;no, decrement pointer and output back up one space.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        BACKUP
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        RDBUF7
 \n
 line
  lbl
   label
    name
     RDBUF8
   :
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CNTRLU
  comment
   ;cntrol-u (cancel line)?
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        RDBUF9
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NEWLINE
  comment
   ;start a new line.
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        RDBUFF
 \n
 line
  lbl
   label
    name
     RDBUF9
   :
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CNTRLR
  comment
   ;control-r?
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        RDBUF14
 \n
 line
  lbl
   label
    name
     RDBUF10
   :
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
  comment
   ;yes, start a new line and retype the old one.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NEWLINE
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  lbl
   label
    name
     RDBUF11
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        B
  comment
   ;done whole line yet?
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        RDBUF12
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;nope, get next character.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
  comment
   ;count it.
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SHOWIT
  comment
   ;and display it.
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        RDBUF11
 \n
 line
  lbl
   label
    name
     RDBUF12
   :
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;done with line. If we were displaying
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           OUTFLAG
       )
  comment
   ;then update cursor position.
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        RDBUF2
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        CURPOS
  comment
   ;because this line is shorter, we must
 \n
 line
  instruction
   opcode
    SUB
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;back up the cursor (not the screen however)
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           OUTFLAG
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;some number of positions.
 \n
 line
  lbl
   label
    name
     RDBUF13
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        BACKUP
  comment
   ;note that as long as (OUTFLAG) is non
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        OUTFLAG
  comment
   ;zero, the screen will not be changed.
 \n
 line
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        RDBUF13
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        RDBUF2
  comment
   ;now just get the next character.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Just a normal character, put this in our buffer and echo.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     RDBUF14
   :
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;store character.
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
  comment
   ;and count it.
 \n
 line
  lbl
   label
    name
     RDBUF15
   :
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;echo it now.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SHOWIT
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;was it an abort request?
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CNTRLC
  comment
   ;control-c abort?
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        B
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        RDBUF16
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        1
  comment
   ;only if at start of line.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       number
        0
 \n
 line
  lbl
   label
    name
     RDBUF16
   :
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
  comment
   ;nope, have we filled the buffer?
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       name
        RDBUF1
 \n
 line
  lbl
   label
    name
     RDBUF17
   :
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;yes end the line and return.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        B
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       name
        CR
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        OUTCHAR
  comment
   ;output (cr) and return.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Function to get a character from the console device.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     GETCON
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        GETECHO
  comment
   ;get and echo.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SETSTAT
  comment
   ;save status and return.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Function to get a character from the tape reader device.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     GETRDR
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        READER
  comment
   ;get a character from reader, set status and return.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SETSTAT
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;  Function to perform direct console i/o. If (C) contains (FF)
 \n
 line
  comment
   ; then this is an input request. If (C) contains (FE) then
 \n
 line
  comment
   ; this is a status request. Otherwise we are to output (C).
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     DIRCIO
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        C
  comment
   ;test for (FF).
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        DIRC1
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;test for (FE).
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        CONST
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CONOUT
  comment
   ;just output (C).
 \n
 line
  lbl
   label
    name
     DIRC1
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CONST
  comment
   ;this is an input request.
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        GOBACK1
  comment
   ;not ready? Just return (directly).
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CONIN
  comment
   ;yes, get character.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SETSTAT
  comment
   ;set status and return.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Function to return the i/o byte.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     GETIOB
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           IOBYTE
       )
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SETSTAT
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Function to set the i/o byte.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     SETIOB
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        IOBYTE
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        C
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Function to print the character string pointed to by (DE)
 \n
 line
  comment
   ; on the console device. The string ends with a '$'.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     PRTSTR
   :
  instruction
   opcode
    EX
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       register_
        L
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
    ,
    expression
     multiplyingExpression
      argument
       register_
        H
  comment
   ;now (BC) points to it.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        PRTMESG
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Function to interigate the console device.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     GETCSTS
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CKCONSOL
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Get here to set the status and return to the cleanup
 \n
 line
  comment
   ; section. Then back to the user.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     SETSTAT
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           STATUS
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  lbl
   label
    name
     RTN
   :
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Set the status to 1 (read or write error code).
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     IOERR1
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       number
        1
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SETSTAT
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     OUTFLAG
   :
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;output flag (non zero means no output).
 \n
 line
  lbl
   label
    name
     STARTING
   :
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        2
  comment
   ;starting position for cursor.
 \n
 line
  lbl
   label
    name
     CURPOS
   :
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;cursor position (0=start of line).
 \n
 line
  lbl
   label
    name
     PRTFLAG
   :
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;printer flag (control-p toggle). List if non zero.
 \n
 line
  lbl
   label
    name
     CHARBUF
   :
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;single input character buffer.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Stack area for BDOS calls.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     USRSTACK
   :
  directive
   assemblerdirective
    DEFW
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;save users stack pointer here.
 \n
 line
  comment
   ;
 \n
 line
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
 \n
 line
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
 \n
 line
  lbl
   label
    name
     STKAREA
  directive
   assemblerdirective
    EQU
   expressionlist
    expression
     multiplyingExpression
      argument
       dollar
        $
  comment
   ;end of stack area.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     USERNO
   :
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;current user number.
 \n
 line
  lbl
   label
    name
     ACTIVE
   :
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;currently active drive.
 \n
 line
  lbl
   label
    name
     PARAMS
   :
  directive
   assemblerdirective
    DEFW
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;save (DE) parameters here on entry.
 \n
 line
  lbl
   label
    name
     STATUS
   :
  directive
   assemblerdirective
    DEFW
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;status returned from bdos function.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Select error occured, jump to error routine.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     SLCTERR
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        BADSLCT
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Jump to (HL) indirectly.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     JUMPHL
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        E
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        D
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;now (DE) contain the desired address.
 \n
 line
  instruction
   opcode
    EX
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Block move. (DE) to (HL), (C) bytes total.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     DE2HL
   :
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
  comment
   ;is count down to zero?
 \n
 line
  lbl
   label
    name
     DE2HL1
   :
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
  comment
   ;yes, we are done.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           DE
       )
  comment
   ;no, move one more byte.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        DE2HL1
  comment
   ;and repeat.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Select the desired drive.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     SELECT
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           ACTIVE
       )
  comment
   ;get active disk.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SELDSK
  comment
   ;select it.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        H
  comment
   ;valid drive?
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        L
  comment
   ;valid drive?
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
  comment
   ;return if not.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Here, the BIOS returned the address of the parameter block
 \n
 line
  comment
   ; in (HL). We will extract the necessary pointers and save them.
 \n
 line
  comment
   ;
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        E
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;yes, get address of translation table into (DE).
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        D
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           SCRATCH1
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;save pointers to scratch areas.
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           SCRATCH2
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;ditto.
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           SCRATCH3
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;ditto.
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    EX
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;now save the translation table address.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           XLATE
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        DIRBUF
  comment
   ;put the next 8 bytes here.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       number
        8
  comment
   ;they consist of the directory buffer
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        DE2HL
  comment
   ;pointer, parameter block pointer,
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           DISKPB
       )
  comment
   ;check and allocation vectors.
 \n
 line
  instruction
   opcode
    EX
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        SECTORS
  comment
   ;move parameter block into our ram.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       number
        15
  comment
   ;it is 15 bytes long.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        DE2HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           DSKSIZE
       )
  comment
   ;check disk size.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        H
  comment
   ;more than 256 blocks on this?
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        BIGDISK
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       number
        0FFH
  comment
   ;set to samll.
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        SELECT1
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;wrong, set to large.
 \n
 line
  lbl
   label
    name
     SELECT1
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       number
        0FFH
  comment
   ;clear the zero flag.
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Routine to home the disk track head and clear pointers.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     HOMEDRV
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        HOME
  comment
   ;home the head.
 \n
 line
  instruction
   opcode
    XOR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           SCRATCH2
       )
  comment
   ;set our track pointer also.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           SCRATCH3
       )
  comment
   ;and our sector pointer.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Do the actual disk read and check the error return status.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     DOREAD
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        READ
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        IORET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Do the actual disk write and handle any bios error.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     DOWRITE
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        WRITE
 \n
 line
  lbl
   label
    name
     IORET
   :
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
  comment
   ;return unless an error occured.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        BADSCTR
  comment
   ;bad read/write on this sector.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        JUMPHL
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Routine to select the track and sector that the desired
 \n
 line
  comment
   ; block number falls in.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     TRKSEC
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           FILEPOS
       )
  comment
   ;get position of last accessed file
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       number
        2
  comment
   ;in directory and compute sector #.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SHIFTR
  comment
   ;sector #=file-position/4.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           BLKNMBR
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;save this as the block number of interest.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           CKSUMTBL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;what's it doing here too?
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   if the sector number has already been set (BLKNMBR), enter
 \n
 line
  comment
   ; at this point.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     TRKSEC1
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        BLKNMBR
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;move sector number into (BC).
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           SCRATCH3
       )
  comment
   ;get current sector number and
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        E
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;move this into (DE).
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        D
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           SCRATCH2
       )
  comment
   ;get current track number.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;and this into (HL).
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        H
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        L
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  lbl
   label
    name
     TRKSEC2
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        C
  comment
   ;is desired sector before current one?
 \n
 line
  instruction
   opcode
    SUB
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        E
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        B
 \n
 line
  instruction
   opcode
    SBC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        D
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NC
    ,
    expression
     multiplyingExpression
      argument
       name
        TRKSEC3
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;yes, decrement sectors by one track.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           SECTORS
       )
  comment
   ;get sectors per track.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        E
 \n
 line
  instruction
   opcode
    SUB
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        L
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        E
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        D
 \n
 line
  instruction
   opcode
    SBC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        H
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        D
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;now we have backed up one full track.
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;adjust track counter.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        TRKSEC2
 \n
 line
  lbl
   label
    name
     TRKSEC3
   :
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;desired sector is after current one.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           SECTORS
       )
  comment
   ;get sectors per track.
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       register_
        DE
  comment
   ;bump sector pointer to next track.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       name
        TRKSEC4
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        C
  comment
   ;is desired sector now before current one?
 \n
 line
  instruction
   opcode
    SUB
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        L
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        B
 \n
 line
  instruction
   opcode
    SBC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        H
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       name
        TRKSEC4
 \n
 line
  instruction
   opcode
    EX
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;not yes, increment track counter
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;and continue until it is.
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        TRKSEC3
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   here we have determined the track number that contains the
 \n
 line
  comment
   ; desired sector.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     TRKSEC4
   :
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;get track number (HL).
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    EX
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           OFFSET
       )
  comment
   ;adjust for first track offset.
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
    ,
    expression
     multiplyingExpression
      argument
       register_
        H
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       register_
        L
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SETTRK
  comment
   ;select this track.
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
  comment
   ;reset current track pointer.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           SCRATCH2
       )
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        E
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        D
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           SCRATCH3
       )
  comment
   ;reset the first sector on this track.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        E
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        D
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        C
  comment
   ;now subtract the desired one.
 \n
 line
  instruction
   opcode
    SUB
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        E
  comment
   ;to make it relative (1-# sectors/track).
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        B
 \n
 line
  instruction
   opcode
    SBC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        D
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           XLATE
       )
  comment
   ;translate this sector according to this table.
 \n
 line
  instruction
   opcode
    EX
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SECTRN
  comment
   ;let the bios translate it.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       register_
        L
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
    ,
    expression
     multiplyingExpression
      argument
       register_
        H
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SETSEC
  comment
   ;and select it.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Compute block number from record number (SAVNREC) and
 \n
 line
  comment
   ; extent number (SAVEXT).
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     GETBLOCK
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        BLKSHFT
  comment
   ;get logical to physical conversion.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;note that this is base 2 log of ratio.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           SAVNREC
       )
  comment
   ;get record number.
 \n
 line
  lbl
   label
    name
     GETBLK1
   :
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;compute (A)=(A)/2^BLKSHFT.
 \n
 line
  instruction
   opcode
    RRA
 \n
 line
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        GETBLK1
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;save result in (B).
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       number
        8
 \n
 line
  instruction
   opcode
    SUB
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;compute (C)=8-BLKSHFT.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           SAVEXT
       )
 \n
 line
  lbl
   label
    name
     GETBLK2
   :
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
  comment
   ;compute (A)=SAVEXT*2^(8-BLKSHFT).
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        GETBLK3
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    RLA
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        GETBLK2
 \n
 line
  lbl
   label
    name
     GETBLK3
   :
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        B
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Routine to extract the (BC) block byte from the fcb pointed
 \n
 line
  comment
   ; to by (PARAMS). If this is a big-disk, then these are 16 bit
 \n
 line
  comment
   ; block numbers, else they are 8 bit numbers.
 \n
 line
  comment
   ; Number is returned in (HL).
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     EXTBLK
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           PARAMS
       )
  comment
   ;get fcb address.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       number
        16
  comment
   ;block numbers start 16 bytes into fcb.
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           BIGDISK
       )
  comment
   ;are we using a big-disk?
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        EXTBLK1
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        L
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;no, extract an 8 bit number from the fcb.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        H
    ,
    expression
     multiplyingExpression
      argument
       number
        0
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  lbl
   label
    name
     EXTBLK1
   :
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       register_
        BC
  comment
   ;yes, extract a 16 bit number.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        E
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        D
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    EX
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;return in (HL).
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Compute block number.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     COMBLK
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        GETBLOCK
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
    ,
    expression
     multiplyingExpression
      argument
       number
        0
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        EXTBLK
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           BLKNMBR
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Check for a zero block number (unused).
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     CHKBLK
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           BLKNMBR
       )
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        L
  comment
   ;is it zero?
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        H
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Adjust physical block (BLKNMBR) and convert to logical
 \n
 line
  comment
   ; sector (LOGSECT). This is the starting sector of this block.
 \n
 line
  comment
   ; The actual sector of interest is then added to this and the
 \n
 line
  comment
   ; resulting sector number is stored back in (BLKNMBR). This
 \n
 line
  comment
   ; will still have to be adjusted for the track number.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     LOGICAL
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           BLKSHFT
       )
  comment
   ;get log2(physical/logical sectors).
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           BLKNMBR
       )
  comment
   ;get physical sector desired.
 \n
 line
  lbl
   label
    name
     LOGICL1
   :
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;compute logical sector number.
 \n
 line
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;note logical sectors are 128 bytes long.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        LOGICL1
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           LOGSECT
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;save logical sector.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           BLKMASK
       )
  comment
   ;get block mask.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           SAVNREC
       )
  comment
   ;get next sector to access.
 \n
 line
  instruction
   opcode
    AND
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
  comment
   ;extract the relative position within physical block.
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        L
  comment
   ;and add it too logical sector.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        L
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           BLKNMBR
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;and store.
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Set (HL) to point to extent byte in fcb.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     SETEXT
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           PARAMS
       )
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       number
        12
  comment
   ;it is the twelth byte.
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Set (HL) to point to record count byte in fcb and (DE) to
 \n
 line
  comment
   ; next record number byte.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     SETHLDE
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           PARAMS
       )
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       number
        15
  comment
   ;record count byte (#15).
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  instruction
   opcode
    EX
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       number
        17
  comment
   ;next record number (#32).
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Save current file data from fcb.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     STRDATA
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SETHLDE
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;get and store record count byte.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           SAVNREC
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    EX
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;get and store next record number byte.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           SAVNXT
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SETEXT
  comment
   ;point to extent byte.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           EXTMASK
       )
  comment
   ;get extent mask.
 \n
 line
  instruction
   opcode
    AND
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           SAVEXT
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;and save extent here.
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Set the next record to access. If (MODE) is set to 2, then
 \n
 line
  comment
   ; the last record byte (SAVNREC) has the correct number to access.
 \n
 line
  comment
   ; For sequential access, (MODE) will be equal to 1.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     SETNREC
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SETHLDE
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           MODE
       )
  comment
   ;get sequential flag (=1).
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        2
  comment
   ;a 2 indicates that no adder is needed.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        STNREC1
 \n
 line
  instruction
   opcode
    XOR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;clear adder (random access?).
 \n
 line
  lbl
   label
    name
     STNREC1
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           SAVNREC
       )
  comment
   ;get last record number.
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        C
  comment
   ;increment record count.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;and set fcb's next record byte.
 \n
 line
  instruction
   opcode
    EX
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           SAVNXT
       )
  comment
   ;get next record byte from storage.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;and put this into fcb as number of records used.
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Shift (HL) right (C) bits.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     SHIFTR
   :
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
 \n
 line
  lbl
   label
    name
     SHIFTR1
   :
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        H
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    RRA
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        H
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        L
 \n
 line
  instruction
   opcode
    RRA
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        L
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SHIFTR1
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Compute the check-sum for the directory buffer. Return
 \n
 line
  comment
   ; integer sum in (A).
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     CHECKSUM
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       number
        128
  comment
   ;length of buffer.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           DIRBUF
       )
  comment
   ;get its location.
 \n
 line
  instruction
   opcode
    XOR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;clear summation byte.
 \n
 line
  lbl
   label
    name
     CHKSUM1
   :
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       name
        M
  comment
   ;and compute sum ignoring carries.
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        CHKSUM1
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Shift (HL) left (C) bits.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     SHIFTL
   :
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
 \n
 line
  lbl
   label
    name
     SHIFTL1
   :
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;shift left 1 bit.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SHIFTL1
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Routine to set a bit in a 16 bit value contained in (BC).
 \n
 line
  comment
   ; The bit set depends on the current drive selection.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     SETBIT
   :
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
  comment
   ;save 16 bit word.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           ACTIVE
       )
  comment
   ;get active drive.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       number
        1
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SHIFTL
  comment
   ;shift bit 0 into place.
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
  comment
   ;now 'or' this with the original word.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        C
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        L
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        L
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;low byte done, do high byte.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        B
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        H
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        H
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Extract the write protect status bit for the current drive.
 \n
 line
  comment
   ; The result is returned in (A), bit 0.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     GETWPRT
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           WRTPRT
       )
  comment
   ;get status bytes.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           ACTIVE
       )
  comment
   ;which drive is current?
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SHIFTR
  comment
   ;shift status such that bit 0 is the
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        L
  comment
   ;one of interest for this drive.
 \n
 line
  instruction
   opcode
    AND
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        01H
  comment
   ;and isolate it.
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Function to write protect the current disk.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     WRTPRTD
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        WRTPRT
  comment
   ;point to status word.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;set (BC) equal to the status.
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SETBIT
  comment
   ;and set this bit according to current drive.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           WRTPRT
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;then save.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           DIRSIZE
       )
  comment
   ;now save directory size limit.
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;remember the last one.
 \n
 line
  instruction
   opcode
    EX
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           SCRATCH1
       )
  comment
   ;and store it here.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        E
  comment
   ;put low byte.
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        D
  comment
   ;then high byte.
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Check for a read only file.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     CHKROFL
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        FCB2HL
  comment
   ;set (HL) to file entry in directory buffer.
 \n
 line
  lbl
   label
    name
     CKROF1
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       number
        9
  comment
   ;look at bit 7 of the ninth byte.
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    RLA
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NC
  comment
   ;return if ok.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        ROFILE
  comment
   ;else, print error message and terminate.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        JUMPHL
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Check the write protect status of the active disk.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     CHKWPRT
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        GETWPRT
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
  comment
   ;return if ok.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        RODISK
  comment
   ;else print message and terminate.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        JUMPHL
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Routine to set (HL) pointing to the proper entry in the
 \n
 line
  comment
   ; directory buffer.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     FCB2HL
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           DIRBUF
       )
  comment
   ;get address of buffer.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           FCBPOS
       )
  comment
   ;relative position of file.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Routine to add (A) to (HL).
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     ADDA2HL
   :
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        L
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        L
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NC
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        H
  comment
   ;take care of any carry.
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Routine to get the 's2' byte from the fcb supplied in
 \n
 line
  comment
   ; the initial parameter specification.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     GETS2
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           PARAMS
       )
  comment
   ;get address of fcb.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       number
        14
  comment
   ;relative position of 's2'.
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;extract this byte.
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Clear the 's2' byte in the fcb.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     CLEARS2
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        GETS2
  comment
   ;this sets (HL) pointing to it.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;now clear it.
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Set bit 7 in the 's2' byte of the fcb.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     SETS2B7
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        GETS2
  comment
   ;get the byte.
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        80H
  comment
   ;and set bit 7.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;then store.
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Compare (FILEPOS) with (SCRATCH1) and set flags based on
 \n
 line
  comment
   ; the difference. This checks to see if there are more file
 \n
 line
  comment
   ; names in the directory. We are at (FILEPOS) and there are
 \n
 line
  comment
   ; (SCRATCH1) of them to check.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     MOREFLS
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           FILEPOS
       )
  comment
   ;we are here.
 \n
 line
  instruction
   opcode
    EX
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           SCRATCH1
       )
  comment
   ;and don't go past here.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        E
  comment
   ;compute difference but don't keep.
 \n
 line
  instruction
   opcode
    SUB
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        D
 \n
 line
  instruction
   opcode
    SBC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       name
        M
  comment
   ;set carry if no more names.
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Call this routine to prevent (SCRATCH1) from being greater
 \n
 line
  comment
   ; than (FILEPOS).
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     CHKNMBR
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        MOREFLS
  comment
   ;SCRATCH1 too big?
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
  comment
   ;yes, reset it to (FILEPOS).
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        D
 \n
 line
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        E
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Compute (HL)=(DE)-(HL)
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     SUBHL
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        E
  comment
   ;compute difference.
 \n
 line
  instruction
   opcode
    SUB
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        L
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        L
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;store low byte.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        D
 \n
 line
  instruction
   opcode
    SBC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        H
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        H
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;and then high byte.
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Set the directory checksum byte.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     SETDIR
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       number
        0FFH
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Routine to set or compare the directory checksum byte. If
 \n
 line
  comment
   ; (C)=0ffh, then this will set the checksum byte. Else the byte
 \n
 line
  comment
   ; will be checked. If the check fails (the disk has been changed),
 \n
 line
  comment
   ; then this disk will be write protected.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     CHECKDIR
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           CKSUMTBL
       )
 \n
 line
  instruction
   opcode
    EX
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           ALLOC1
       )
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SUBHL
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NC
  comment
   ;ok if (CKSUMTBL) > (ALLOC1), so return.
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CHECKSUM
  comment
   ;else compute checksum.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           CHKVECT
       )
  comment
   ;get address of checksum table.
 \n
 line
  instruction
   opcode
    EX
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           CKSUMTBL
       )
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       register_
        DE
  comment
   ;set (HL) to point to byte for this drive.
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
  comment
   ;set or check ?
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        CHKDIR1
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;check them.
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
  comment
   ;return if they are the same.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        MOREFLS
  comment
   ;not the same, do we care?
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NC
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        WRTPRTD
  comment
   ;yes, mark this as write protected.
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  lbl
   label
    name
     CHKDIR1
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;just set the byte.
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Do a write to the directory of the current disk.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     DIRWRITE
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SETDIR
  comment
   ;set checksum byte.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        DIRDMA
  comment
   ;set directory dma address.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       number
        1
  comment
   ;tell the bios to actually write.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        DOWRITE
  comment
   ;then do the write.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        DEFDMA
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Read from the directory.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     DIRREAD
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        DIRDMA
  comment
   ;set the directory dma address.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        DOREAD
  comment
   ;and read it.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Routine to set the dma address to the users choice.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     DEFDMA
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        USERDMA
  comment
   ;reset the default dma address and return.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        DIRDMA1
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Routine to set the dma address for directory work.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     DIRDMA
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        DIRBUF
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Set the dma address. On entry, (HL) points to
 \n
 line
  comment
   ; word containing the desired dma address.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     DIRDMA1
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;setup (BC) and go to the bios to set it.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SETDMA
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Move the directory buffer into user's dma space.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     MOVEDIR
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           DIRBUF
       )
  comment
   ;buffer is located here, and
 \n
 line
  instruction
   opcode
    EX
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           USERDMA
       )
  comment
   ; put it here.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       number
        128
  comment
   ;this is its length.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        DE2HL
  comment
   ;move it now and return.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Check (FILEPOS) and set the zero flag if it equals 0ffffh.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     CKFILPOS
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        FILEPOS
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;are both bytes the same?
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;yes, but are they each 0ffh?
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Set location (FILEPOS) to 0ffffh.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     STFILPOS
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       number
        0FFFFH
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           FILEPOS
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Move on to the next file position within the current
 \n
 line
  comment
   ; directory buffer. If no more exist, set pointer to 0ffffh
 \n
 line
  comment
   ; and the calling routine will check for this. Enter with (C)
 \n
 line
  comment
   ; equal to 0ffh to cause the checksum byte to be set, else we
 \n
 line
  comment
   ; will check this disk and set write protect if checksums are
 \n
 line
  comment
   ; not the same (applies only if another directory sector must
 \n
 line
  comment
   ; be read).
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     NXENTRY
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           DIRSIZE
       )
  comment
   ;get directory entry size limit.
 \n
 line
  instruction
   opcode
    EX
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           FILEPOS
       )
  comment
   ;get current count.
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;go on to the next one.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           FILEPOS
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SUBHL
  comment
   ;(HL)=(DIRSIZE)-(FILEPOS)
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NC
    ,
    expression
     multiplyingExpression
      argument
       name
        NXENT1
  comment
   ;is there more room left?
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        STFILPOS
  comment
   ;no. Set this flag and return.
 \n
 line
  lbl
   label
    name
     NXENT1
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           FILEPOS
       )
  comment
   ;get file position within directory.
 \n
 line
  instruction
   opcode
    AND
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        03H
  comment
   ;only look within this sector (only 4 entries fit).
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
    ,
    expression
     multiplyingExpression
      argument
       number
        5
  comment
   ;convert to relative position (32 bytes each).
 \n
 line
  lbl
   label
    name
     NXENT2
   :
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;note that this is not efficient code.
 \n
 line
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
  comment
   ;5 'ADD A's would be better.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        NXENT2
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           FCBPOS
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;save it as position of fcb.
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
  comment
   ;return if we are within buffer.
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        TRKSEC
  comment
   ;we need the next directory sector.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        DIRREAD
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CHECKDIR
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Routine to to get a bit from the disk space allocation
 \n
 line
  comment
   ; map. It is returned in (A), bit position 0. On entry to here,
 \n
 line
  comment
   ; set (BC) to the block number on the disk to check.
 \n
 line
  comment
   ; On return, (D) will contain the original bit position for
 \n
 line
  comment
   ; this block number and (HL) will point to the address for it.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     CKBITMAP
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        C
  comment
   ;determine bit number of interest.
 \n
 line
  instruction
   opcode
    AND
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        07H
  comment
   ;compute (D)=(E)=(C and 7)+1.
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        E
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;save particular bit number.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        D
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   compute (BC)=(BC)/8.
 \n
 line
  comment
   ;
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        C
 \n
 line
  instruction
   opcode
    RRCA
  comment
   ;now shift right 3 bits.
 \n
 line
  instruction
   opcode
    RRCA
 \n
 line
  instruction
   opcode
    RRCA
 \n
 line
  instruction
   opcode
    AND
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        1FH
  comment
   ;and clear bits 7,6,5.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        B
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;now shift (B) into bits 7,6,5.
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
  comment
   ;and add in (C).
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;ok, (C) ha been completed.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        B
  comment
   ;is there a better way of doing this?
 \n
 line
  instruction
   opcode
    RRCA
 \n
 line
  instruction
   opcode
    RRCA
 \n
 line
  instruction
   opcode
    RRCA
 \n
 line
  instruction
   opcode
    AND
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        1FH
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;and now (B) is completed.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   use this as an offset into the disk space allocation
 \n
 line
  comment
   ; table.
 \n
 line
  comment
   ;
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           ALOCVECT
       )
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;now get correct byte.
 \n
 line
  lbl
   label
    name
     CKBMAP1
   :
  instruction
   opcode
    RLCA
  comment
   ;get correct bit into position 0.
 \n
 line
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        E
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        CKBMAP1
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Set or clear the bit map such that block number (BC) will be marked
 \n
 line
  comment
   ; as used. On entry, if (E)=0 then this bit will be cleared, if it equals
 \n
 line
  comment
   ; 1 then it will be set (don't use anyother values).
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     STBITMAP
   :
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CKBITMAP
  comment
   ;get the byte of interest.
 \n
 line
  instruction
   opcode
    AND
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0FEH
  comment
   ;clear the affected bit.
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
  comment
   ;and now set it acording to (C).
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;  entry to restore the original bit position and then store
 \n
 line
  comment
   ; in table. (A) contains the value, (D) contains the bit
 \n
 line
  comment
   ; position (1-8), and (HL) points to the address within the
 \n
 line
  comment
   ; space allocation table for this byte.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     STBMAP1
   :
  instruction
   opcode
    RRCA
  comment
   ;restore original bit position.
 \n
 line
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        D
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        STBMAP1
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;and stor byte in table.
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Set/clear space used bits in allocation map for this file.
 \n
 line
  comment
   ; On entry, (C)=1 to set the map and (C)=0 to clear it.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     SETFILE
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        FCB2HL
  comment
   ;get address of fcb
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       number
        16
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       register_
        DE
  comment
   ;get to block number bytes.
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       number
        17
  comment
   ;check all 17 bytes (max) of table.
 \n
 line
  lbl
   label
    name
     SETFL1
   :
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
  comment
   ;done all bytes yet?
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           BIGDISK
       )
  comment
   ;check disk size for 16 bit block numbers.
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        SETFL2
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
  comment
   ;only 8 bit numbers. set (BC) to this one.
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;get low byte from table, always
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
    ,
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;set high byte to zero.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SETFL3
 \n
 line
  lbl
   label
    name
     SETFL2
   :
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
  comment
   ;for 16 bit block numbers, adjust counter.
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;now get both the low and high bytes.
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  lbl
   label
    name
     SETFL3
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        C
  comment
   ;block used?
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        SETFL4
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           DSKSIZE
       )
  comment
   ;is this block number within the
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        L
  comment
   ;space on the disk?
 \n
 line
  instruction
   opcode
    SUB
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        H
 \n
 line
  instruction
   opcode
    SBC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        B
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NC
    ,
    expression
     multiplyingExpression
      argument
       name
        STBITMAP
  comment
   ;yes, set the proper bit.
 \n
 line
  lbl
   label
    name
     SETFL4
   :
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;point to next block number in fcb.
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SETFL1
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Construct the space used allocation bit map for the active
 \n
 line
  comment
   ; drive. If a file name starts with '$' and it is under the
 \n
 line
  comment
   ; current user number, then (STATUS) is set to minus 1. Otherwise
 \n
 line
  comment
   ; it is not set at all.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     BITMAP
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           DSKSIZE
       )
  comment
   ;compute size of allocation table.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       number
        3
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SHIFTR
  comment
   ;(HL)=(HL)/8.
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;at lease 1 byte.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
    ,
    expression
     multiplyingExpression
      argument
       register_
        H
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       register_
        L
  comment
   ;set (BC) to the allocation table length.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Initialize the bitmap for this drive. Right now, the first
 \n
 line
  comment
   ; two bytes are specified by the disk parameter block. However
 \n
 line
  comment
   ; a patch could be entered here if it were necessary to setup
 \n
 line
  comment
   ; this table in a special mannor. For example, the bios could
 \n
 line
  comment
   ; determine locations of 'bad blocks' and set them as already
 \n
 line
  comment
   ; 'used' in the map.
 \n
 line
  comment
   ;
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           ALOCVECT
       )
  comment
   ;now zero out the table now.
 \n
 line
  lbl
   label
    name
     BITMAP1
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       number
        0
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        B
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        BITMAP1
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           ALLOC0
       )
  comment
   ;get initial space used by directory.
 \n
 line
  instruction
   opcode
    EX
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           ALOCVECT
       )
  comment
   ;and put this into map.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        E
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        D
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   End of initialization portion.
 \n
 line
  comment
   ;
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        HOMEDRV
  comment
   ;now home the drive.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           SCRATCH1
       )
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       number
        3
  comment
   ;force next directory request to read
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;in a sector.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       number
        0
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        STFILPOS
  comment
   ;clear initial file position also.
 \n
 line
  lbl
   label
    name
     BITMAP2
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       number
        0FFH
  comment
   ;read next file name in directory
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NXENTRY
  comment
   ;and set checksum byte.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CKFILPOS
  comment
   ;is there another file?
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        FCB2HL
  comment
   ;yes, get its address.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       number
        0E5H
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;empty file entry?
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        BITMAP2
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           USERNO
       )
  comment
   ;no, correct user number?
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        BITMAP3
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;yes, does name start with a '$'?
 \n
 line
  instruction
   opcode
    SUB
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        '$'
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        BITMAP3
 \n
 line
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;yes, set atatus to minus one.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           STATUS
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  lbl
   label
    name
     BITMAP3
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       number
        1
  comment
   ;now set this file's space as used in bit map.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SETFILE
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CHKNMBR
  comment
   ;keep (SCRATCH1) in bounds.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        BITMAP2
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Set the status (STATUS) and return.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     STSTATUS
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           FNDSTAT
       )
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SETSTAT
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Check extents in (A) and (C). Set the zero flag if they
 \n
 line
  comment
   ; are the same. The number of 16k chunks of disk space that
 \n
 line
  comment
   ; the directory extent covers is expressad is (EXTMASK+1).
 \n
 line
  comment
   ; No registers are modified.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     SAMEXT
   :
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        AF
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           EXTMASK
       )
  comment
   ;get extent mask and use it to
 \n
 line
  instruction
   opcode
    CPL
  comment
   ;to compare both extent numbers.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;save resulting mask here.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        C
  comment
   ;mask first extent and save in (C).
 \n
 line
  instruction
   opcode
    AND
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        AF
  comment
   ;now mask second extent and compare
 \n
 line
  instruction
   opcode
    AND
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
  comment
   ;with the first one.
 \n
 line
  instruction
   opcode
    SUB
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
 \n
 line
  instruction
   opcode
    AND
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        1FH
  comment
   ;(* only check buts 0-4 *)
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
  comment
   ;the zero flag is set if they are the same.
 \n
 line
  instruction
   opcode
    RET
  comment
   ;restore (BC) and return.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Search for the first occurence of a file name. On entry,
 \n
 line
  comment
   ; register (C) should contain the number of bytes of the fcb
 \n
 line
  comment
   ; that must match.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     FINDFST
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       number
        0FFH
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           FNDSTAT
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        COUNTER
  comment
   ;save character count.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        C
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           PARAMS
       )
  comment
   ;get filename to match.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           SAVEFCB
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;and save.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        STFILPOS
  comment
   ;clear initial file position (set to 0ffffh).
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        HOMEDRV
  comment
   ;home the drive.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Entry to locate the next occurence of a filename within the
 \n
 line
  comment
   ; directory. The disk is not expected to have been changed. If
 \n
 line
  comment
   ; it was, then it will be write protected.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     FINDNXT
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;write protect the disk if changed.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NXENTRY
  comment
   ;get next filename entry in directory.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CKFILPOS
  comment
   ;is file position = 0ffffh?
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        FNDNXT6
  comment
   ;yes, exit now then.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           SAVEFCB
       )
  comment
   ;set (DE) pointing to filename to match.
 \n
 line
  instruction
   opcode
    EX
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           DE
       )
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0E5H
  comment
   ;empty directory entry?
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        FNDNXT1
  comment
   ;(* are we trying to reserect erased entries? *)
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        MOREFLS
  comment
   ;more files in directory?
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NC
    ,
    expression
     multiplyingExpression
      argument
       name
        FNDNXT6
  comment
   ;no more. Exit now.
 \n
 line
  lbl
   label
    name
     FNDNXT1
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        FCB2HL
  comment
   ;get address of this fcb in directory.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           COUNTER
       )
  comment
   ;get number of bytes (characters) to check.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
    ,
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;initialize byte position counter.
 \n
 line
  lbl
   label
    name
     FNDNXT2
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        C
  comment
   ;are we done with the compare?
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        FNDNXT5
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           DE
       )
  comment
   ;no, check next byte.
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        '?'
  comment
   ;don't care about this character?
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        FNDNXT4
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        B
  comment
   ;get bytes position in fcb.
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        13
  comment
   ;don't care about the thirteenth byte either.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        FNDNXT4
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        12
  comment
   ;extent byte?
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           DE
       )
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        FNDNXT3
 \n
 line
  instruction
   opcode
    SUB
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;otherwise compare characters.
 \n
 line
  instruction
   opcode
    AND
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        7FH
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        FINDNXT
  comment
   ;not the same, check next entry.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        FNDNXT4
  comment
   ;so far so good, keep checking.
 \n
 line
  lbl
   label
    name
     FNDNXT3
   :
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
  comment
   ;check the extent byte here.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SAMEXT
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        FINDNXT
  comment
   ;not the same, look some more.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   So far the names compare. Bump pointers to the next byte
 \n
 line
  comment
   ; and continue until all (C) characters have been checked.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     FNDNXT4
   :
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
  comment
   ;bump pointers.
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
 \n
 line
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
  comment
   ;adjust character counter.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        FNDNXT2
 \n
 line
  lbl
   label
    name
     FNDNXT5
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           FILEPOS
       )
  comment
   ;return the position of this entry.
 \n
 line
  instruction
   opcode
    AND
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        03H
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           STATUS
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        FNDSTAT
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    RLA
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NC
 \n
 line
  instruction
   opcode
    XOR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Filename was not found. Set appropriate status.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     FNDNXT6
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        STFILPOS
  comment
   ;set (FILEPOS) to 0ffffh.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       number
        0FFH
  comment
   ;say not located.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SETSTAT
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Erase files from the directory. Only the first byte of the
 \n
 line
  comment
   ; fcb will be affected. It is set to (E5).
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     ERAFILE
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CHKWPRT
  comment
   ;is disk write protected?
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       number
        12
  comment
   ;only compare file names.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        FINDFST
  comment
   ;get first file name.
 \n
 line
  lbl
   label
    name
     ERAFIL1
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CKFILPOS
  comment
   ;any found?
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
  comment
   ;nope, we must be done.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CHKROFL
  comment
   ;is file read only?
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        FCB2HL
  comment
   ;nope, get address of fcb and
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       number
        0E5H
  comment
   ;set first byte to 'empty'.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;clear the space from the bit map.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SETFILE
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        DIRWRITE
  comment
   ;now write the directory sector back out.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        FINDNXT
  comment
   ;find the next file name.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        ERAFIL1
  comment
   ;and repeat process.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Look through the space allocation map (bit map) for the
 \n
 line
  comment
   ; next available block. Start searching at block number (BC-1).
 \n
 line
  comment
   ; The search procedure is to look for an empty block that is
 \n
 line
  comment
   ; before the starting block. If not empty, look at a later
 \n
 line
  comment
   ; block number. In this way, we return the closest empty block
 \n
 line
  comment
   ; on either side of the 'target' block number. This will speed
 \n
 line
  comment
   ; access on random devices. For serial devices, this should be
 \n
 line
  comment
   ; changed to look in the forward direction first and then start
 \n
 line
  comment
   ; at the front and search some more.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   On return, (DE)= block number that is empty and (HL) =0
 \n
 line
  comment
   ; if no empry block was found.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     FNDSPACE
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        D
    ,
    expression
     multiplyingExpression
      argument
       register_
        B
  comment
   ;set (DE) as the block that is checked.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        E
    ,
    expression
     multiplyingExpression
      argument
       register_
        C
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Look before target block. Registers (BC) are used as the lower
 \n
 line
  comment
   ; pointer and (DE) as the upper pointer.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     FNDSPA1
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        C
  comment
   ;is block 0 specified?
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        FNDSPA2
 \n
 line
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
  comment
   ;nope, check previous block.
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CKBITMAP
 \n
 line
  instruction
   opcode
    RRA
  comment
   ;is this block empty?
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NC
    ,
    expression
     multiplyingExpression
      argument
       name
        FNDSPA3
  comment
   ;yes. use this.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Note that the above logic gets the first block that it finds
 \n
 line
  comment
   ; that is empty. Thus a file could be written 'backward' making
 \n
 line
  comment
   ; it very slow to access. This could be changed to look for the
 \n
 line
  comment
   ; first empty block and then continue until the start of this
 \n
 line
  comment
   ; empty space is located and then used that starting block.
 \n
 line
  comment
   ; This should help speed up access to some files especially on
 \n
 line
  comment
   ; a well used disk with lots of fairly small 'holes'.
 \n
 line
  comment
   ;
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
  comment
   ;nope, check some more.
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Now look after target block.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     FNDSPA2
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           DSKSIZE
       )
  comment
   ;is block (DE) within disk limits?
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        E
 \n
 line
  instruction
   opcode
    SUB
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        L
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        D
 \n
 line
  instruction
   opcode
    SBC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        H
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NC
    ,
    expression
     multiplyingExpression
      argument
       name
        FNDSPA4
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
  comment
   ;yes, move on to next one.
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
    ,
    expression
     multiplyingExpression
      argument
       register_
        D
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       register_
        E
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CKBITMAP
  comment
   ;check it.
 \n
 line
  instruction
   opcode
    RRA
  comment
   ;empty?
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NC
    ,
    expression
     multiplyingExpression
      argument
       name
        FNDSPA3
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
  comment
   ;nope, continue searching.
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        FNDSPA1
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Empty block found. Set it as used and return with (HL)
 \n
 line
  comment
   ; pointing to it (true?).
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     FNDSPA3
   :
  instruction
   opcode
    RLA
  comment
   ;reset byte.
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;and set bit 0.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        STBMAP1
  comment
   ;update bit map.
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;set return registers.
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Free block was not found. If (BC) is not zero, then we have
 \n
 line
  comment
   ; not checked all of the disk space.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     FNDSPA4
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        C
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        FNDSPA1
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;set 'not found' status.
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Move a complete fcb entry into the directory and write it.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     FCBSET
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       number
        0
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        E
    ,
    expression
     multiplyingExpression
      argument
       number
        32
  comment
   ;length of each entry.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Move (E) bytes from the fcb pointed to by (PARAMS) into
 \n
 line
  comment
   ; fcb in directory starting at relative byte (C). This updated
 \n
 line
  comment
   ; directory buffer is then written to the disk.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     UPDATE
   :
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
    ,
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;set (BC) to relative byte position.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           PARAMS
       )
  comment
   ;get address of fcb.
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       register_
        BC
  comment
   ;compute starting byte.
 \n
 line
  instruction
   opcode
    EX
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        FCB2HL
  comment
   ;get address of fcb to update in directory.
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
  comment
   ;set (C) to number of bytes to change.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        DE2HL
 \n
 line
  lbl
   label
    name
     UPDATE1
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        TRKSEC
  comment
   ;determine the track and sector affected.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        DIRWRITE
  comment
   ;then write this sector out.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Routine to change the name of all files on the disk with a
 \n
 line
  comment
   ; specified name. The fcb contains the current name as the
 \n
 line
  comment
   ; first 12 characters and the new name 16 bytes into the fcb.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     CHGNAMES
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CHKWPRT
  comment
   ;check for a write protected disk.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       number
        12
  comment
   ;match first 12 bytes of fcb only.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        FINDFST
  comment
   ;get first name.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           PARAMS
       )
  comment
   ;get address of fcb.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;get user number.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       number
        16
  comment
   ;move over to desired name.
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;keep same user number.
 \n
 line
  lbl
   label
    name
     CHGNAM1
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CKFILPOS
  comment
   ;any matching file found?
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
  comment
   ;no, we must be done.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CHKROFL
  comment
   ;check for read only file.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       number
        16
  comment
   ;start 16 bytes into fcb.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        E
    ,
    expression
     multiplyingExpression
      argument
       number
        12
  comment
   ;and update the first 12 bytes of directory.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        UPDATE
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        FINDNXT
  comment
   ;get te next file name.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CHGNAM1
  comment
   ;and continue.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Update a files attributes. The procedure is to search for
 \n
 line
  comment
   ; every file with the same name as shown in fcb (ignoring bit 7)
 \n
 line
  comment
   ; and then to update it (which includes bit 7). No other changes
 \n
 line
  comment
   ; are made.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     SAVEATTR
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       number
        12
  comment
   ;match first 12 bytes.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        FINDFST
  comment
   ;look for first filename.
 \n
 line
  lbl
   label
    name
     SAVATR1
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CKFILPOS
  comment
   ;was one found?
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
  comment
   ;nope, we must be done.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;yes, update the first 12 bytes now.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        E
    ,
    expression
     multiplyingExpression
      argument
       number
        12
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        UPDATE
  comment
   ;update filename and write directory.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        FINDNXT
  comment
   ;and get the next file.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SAVATR1
  comment
   ;then continue until done.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;  Open a file (name specified in fcb).
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     OPENIT
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       number
        15
  comment
   ;compare the first 15 bytes.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        FINDFST
  comment
   ;get the first one in directory.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CKFILPOS
  comment
   ;any at all?
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
 \n
 line
  lbl
   label
    name
     OPENIT1
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SETEXT
  comment
   ;point to extent byte within users fcb.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;and get it.
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        AF
  comment
   ;save it and address.
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        FCB2HL
  comment
   ;point to fcb in directory.
 \n
 line
  instruction
   opcode
    EX
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           PARAMS
       )
  comment
   ;this is the users copy.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       number
        32
  comment
   ;move it into users space.
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        DE2HL
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SETS2B7
  comment
   ;set bit 7 in 's2' byte (unmodified).
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
  comment
   ;now get the extent byte from this fcb.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       number
        12
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;into (C).
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       number
        15
  comment
   ;now get the record count byte into (B).
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;keep the same extent as the user had originally.
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        AF
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        C
  comment
   ;is it the same as in the directory fcb?
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        B
  comment
   ;if yes, then use the same record count.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        OPENIT2
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;if the user specified an extent greater than
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       name
        OPENIT2
  comment
   ;the one in the directory, then set record count to 0.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       number
        128
  comment
   ;otherwise set to maximum.
 \n
 line
  lbl
   label
    name
     OPENIT2
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           PARAMS
       )
  comment
   ;set record count in users fcb to (A).
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       number
        15
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       register_
        DE
  comment
   ;compute relative position.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;and set the record count.
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Move two bytes from (DE) to (HL) if (and only if) (HL)
 \n
 line
  comment
   ; point to a zero value (16 bit).
 \n
 line
  comment
   ;   Return with zero flag set it (DE) was moved. Registers (DE)
 \n
 line
  comment
   ; and (HL) are not changed. However (A) is.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     MOVEWORD
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;check for a zero word.
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;both bytes zero?
 \n
 line
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
  comment
   ;nope, just return.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           DE
       )
  comment
   ;yes, move two bytes from (DE) into
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;this zero space.
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           DE
       )
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
  comment
   ;don't disturb these registers.
 \n
 line
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Get here to close a file specified by (fcb).
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     CLOSEIT
   :
  instruction
   opcode
    XOR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;clear status and file position bytes.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           STATUS
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           FILEPOS
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           FILEPOS
        +
        multiplyingExpression
         argument
          number
           1
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        GETWPRT
  comment
   ;get write protect bit for this drive.
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
  comment
   ;just return if it is set.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        GETS2
  comment
   ;else get the 's2' byte.
 \n
 line
  instruction
   opcode
    AND
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        80H
  comment
   ;and look at bit 7 (file unmodified?).
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
  comment
   ;just return if set.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       number
        15
  comment
   ;else look up this file in directory.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        FINDFST
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CKFILPOS
  comment
   ;was it found?
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
  comment
   ;just return if not.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
    ,
    expression
     multiplyingExpression
      argument
       number
        16
  comment
   ;set (HL) pointing to records used section.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        FCB2HL
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    EX
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           PARAMS
       )
  comment
   ;do the same for users specified fcb.
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       number
        16
  comment
   ;this many bytes are present in this extent.
 \n
 line
  lbl
   label
    name
     CLOSEIT1
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           BIGDISK
       )
  comment
   ;8 or 16 bit record numbers?
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        CLOSEIT4
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;just 8 bit. Get one from users fcb.
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           DE
       )
  comment
   ;now get one from directory fcb.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        CLOSEIT2
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;users byte was zero. Update from directory.
 \n
 line
  lbl
   label
    name
     CLOSEIT2
   :
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        CLOSEIT3
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;directories byte was zero, update from users fcb.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           DE
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  lbl
   label
    name
     CLOSEIT3
   :
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;if neither one of these bytes were zero,
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        CLOSEIT7
  comment
   ;then close error if they are not the same.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CLOSEIT5
  comment
   ;ok so far, get to next byte in fcbs.
 \n
 line
  lbl
   label
    name
     CLOSEIT4
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        MOVEWORD
  comment
   ;update users fcb if it is zero.
 \n
 line
  instruction
   opcode
    EX
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        MOVEWORD
  comment
   ;update directories fcb if it is zero.
 \n
 line
  instruction
   opcode
    EX
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           DE
       )
  comment
   ;if these two values are no different,
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;then a close error occured.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        CLOSEIT7
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
  comment
   ;check second byte.
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           DE
       )
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        CLOSEIT7
 \n
 line
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
  comment
   ;remember 16 bit values.
 \n
 line
  lbl
   label
    name
     CLOSEIT5
   :
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
  comment
   ;bump to next item in table.
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
  comment
   ;there are 16 entries only.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        CLOSEIT1
  comment
   ;continue if more to do.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
    ,
    expression
     multiplyingExpression
      argument
       number
        0FFECH
  comment
   ;backup 20 places (extent byte).
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    EX
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           DE
       )
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;directory's extent already greater than the
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       name
        CLOSEIT6
  comment
   ;users extent?
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;no, update directory extent.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
    ,
    expression
     multiplyingExpression
      argument
       number
        3
  comment
   ;and update the record count byte in
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       register_
        BC
  comment
   ;directories fcb.
 \n
 line
  instruction
   opcode
    EX
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;get from user.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           DE
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;and put in directory.
 \n
 line
  lbl
   label
    name
     CLOSEIT6
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       number
        0FFH
  comment
   ;set 'was open and is now closed' byte.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           CLOSEFLG
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        UPDATE1
  comment
   ;update the directory now.
 \n
 line
  lbl
   label
    name
     CLOSEIT7
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        STATUS
  comment
   ;set return status and then return.
 \n
 line
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Routine to get the next empty space in the directory. It
 \n
 line
  comment
   ; will then be cleared for use.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     GETEMPTY
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CHKWPRT
  comment
   ;make sure disk is not write protected.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           PARAMS
       )
  comment
   ;save current parameters (fcb).
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        EMPTYFCB
  comment
   ;use special one for empty space.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           PARAMS
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       number
        1
  comment
   ;search for first empty spot in directory.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        FINDFST
  comment
   ;(* only check first byte *)
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CKFILPOS
  comment
   ;none?
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           PARAMS
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;restore original fcb address.
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
  comment
   ;return if no more space.
 \n
 line
  instruction
   opcode
    EX
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       number
        15
  comment
   ;point to number of records for this file.
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       number
        17
  comment
   ;and clear all of this space.
 \n
 line
  instruction
   opcode
    XOR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  lbl
   label
    name
     GETMT1
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        GETMT1
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       number
        13
  comment
   ;clear the 's1' byte also.
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CHKNMBR
  comment
   ;keep (SCRATCH1) within bounds.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        FCBSET
  comment
   ;write out this fcb entry to directory.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SETS2B7
  comment
   ;set 's2' byte bit 7 (unmodified at present).
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Routine to close the current extent and open the next one
 \n
 line
  comment
   ; for reading.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     GETNEXT
   :
  instruction
   opcode
    XOR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           CLOSEFLG
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;clear close flag.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CLOSEIT
  comment
   ;close this extent.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CKFILPOS
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
  comment
   ;not there???
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           PARAMS
       )
  comment
   ;get extent byte.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
    ,
    expression
     multiplyingExpression
      argument
       number
        12
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;and increment it.
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    AND
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        1FH
  comment
   ;keep within range 0-31.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        GTNEXT1
  comment
   ;overflow?
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;mask extent byte.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           EXTMASK
       )
 \n
 line
  instruction
   opcode
    AND
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        CLOSEFLG
  comment
   ;check close flag (0ffh is ok).
 \n
 line
  instruction
   opcode
    AND
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        GTNEXT2
  comment
   ;if zero, we must read in next extent.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        GTNEXT3
  comment
   ;else, it is already in memory.
 \n
 line
  lbl
   label
    name
     GTNEXT1
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
    ,
    expression
     multiplyingExpression
      argument
       number
        2
  comment
   ;Point to the 's2' byte.
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;and bump it.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;too many extents?
 \n
 line
  instruction
   opcode
    AND
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0FH
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        GTNEXT5
  comment
   ;yes, set error code.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Get here to open the next extent.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     GTNEXT2
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       number
        15
  comment
   ;set to check first 15 bytes of fcb.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        FINDFST
  comment
   ;find the first one.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CKFILPOS
  comment
   ;none available?
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        GTNEXT3
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           RDWRTFLG
       )
  comment
   ;no extent present. Can we open an empty one?
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;0ffh means reading (so not possible).
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        GTNEXT5
  comment
   ;or an error.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        GETEMPTY
  comment
   ;we are writing, get an empty entry.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CKFILPOS
  comment
   ;none?
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        GTNEXT5
  comment
   ;error if true.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        GTNEXT4
  comment
   ;else we are almost done.
 \n
 line
  lbl
   label
    name
     GTNEXT3
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        OPENIT1
  comment
   ;open this extent.
 \n
 line
  lbl
   label
    name
     GTNEXT4
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        STRDATA
  comment
   ;move in updated data (rec #, extent #, etc.)
 \n
 line
  instruction
   opcode
    XOR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;clear status and return.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SETSTAT
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Error in extending the file. Too many extents were needed
 \n
 line
  comment
   ; or not enough space on the disk.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     GTNEXT5
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        IOERR1
  comment
   ;set error code, clear bit 7 of 's2'
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SETS2B7
  comment
   ;so this is not written on a close.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Read a sequential file.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     RDSEQ
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       number
        1
  comment
   ;set sequential access mode.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           MODE
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  lbl
   label
    name
     RDSEQ1
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       number
        0FFH
  comment
   ;don't allow reading unwritten space.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           RDWRTFLG
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        STRDATA
  comment
   ;put rec# and ext# into fcb.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           SAVNREC
       )
  comment
   ;get next record to read.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        SAVNXT
  comment
   ;get number of records in extent.
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;within this extent?
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       name
        RDSEQ2
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        128
  comment
   ;no. Is this extent fully used?
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        RDSEQ3
  comment
   ;no. End-of-file.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        GETNEXT
  comment
   ;yes, open the next one.
 \n
 line
  instruction
   opcode
    XOR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;reset next record to read.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           SAVNREC
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           STATUS
       )
  comment
   ;check on open, successful?
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        RDSEQ3
  comment
   ;no, error.
 \n
 line
  lbl
   label
    name
     RDSEQ2
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        COMBLK
  comment
   ;ok. compute block number to read.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CHKBLK
  comment
   ;check it. Within bounds?
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        RDSEQ3
  comment
   ;no, error.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        LOGICAL
  comment
   ;convert (BLKNMBR) to logical sector (128 byte).
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        TRKSEC1
  comment
   ;set the track and sector for this block #.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        DOREAD
  comment
   ;and read it.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SETNREC
  comment
   ;and set the next record to be accessed.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Read error occured. Set status and return.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     RDSEQ3
   :
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        IOERR1
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Write the next sequential record.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     WTSEQ
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       number
        1
  comment
   ;set sequential access mode.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           MODE
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  lbl
   label
    name
     WTSEQ1
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;allow an addition empty extent to be opened.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           RDWRTFLG
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CHKWPRT
  comment
   ;check write protect status.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           PARAMS
       )
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CKROF1
  comment
   ;check for read only file, (HL) already set to fcb.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        STRDATA
  comment
   ;put updated data into fcb.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           SAVNREC
       )
  comment
   ;get record number to write.
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        128
  comment
   ;within range?
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NC
    ,
    expression
     multiplyingExpression
      argument
       name
        IOERR1
  comment
   ;no, error(?).
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        COMBLK
  comment
   ;compute block number.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CHKBLK
  comment
   ;check number.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;is there one to write to?
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        WTSEQ6
  comment
   ;yes, go do it.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        GETBLOCK
  comment
   ;get next block number within fcb to use.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           RELBLOCK
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;and save.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
    ,
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;start looking for space from the start
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;if none allocated as yet.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        WTSEQ2
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;extract previous block number from fcb
 \n
 line
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
  comment
   ;so we can be closest to it.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        EXTBLK
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
    ,
    expression
     multiplyingExpression
      argument
       register_
        H
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       register_
        L
 \n
 line
  lbl
   label
    name
     WTSEQ2
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        FNDSPACE
  comment
   ;find the next empty block nearest number (BC).
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        L
  comment
   ;check for a zero number.
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        H
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        WTSEQ3
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       number
        2
  comment
   ;no more space?
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SETSTAT
 \n
 line
  lbl
   label
    name
     WTSEQ3
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           BLKNMBR
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;save block number to access.
 \n
 line
  instruction
   opcode
    EX
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;put block number into (DE).
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           PARAMS
       )
  comment
   ;now we must update the fcb for this
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
    ,
    expression
     multiplyingExpression
      argument
       number
        16
  comment
   ;newly allocated block.
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           BIGDISK
       )
  comment
   ;8 or 16 bit block numbers?
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           RELBLOCK
       )
  comment
   ;(* update this entry *)
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        WTSEQ4
  comment
   ;zero means 16 bit ones.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        ADDA2HL
  comment
   ;(HL)=(HL)+(A)
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        E
  comment
   ;store new block number.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        WTSEQ5
 \n
 line
  lbl
   label
    name
     WTSEQ4
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;compute spot in this 16 bit table.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
    ,
    expression
     multiplyingExpression
      argument
       number
        0
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        E
  comment
   ;stuff block number (DE) there.
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        D
 \n
 line
  lbl
   label
    name
     WTSEQ5
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       number
        2
  comment
   ;set (C) to indicate writing to un-used disk space.
 \n
 line
  lbl
   label
    name
     WTSEQ6
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           STATUS
       )
  comment
   ;are we ok so far?
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
  comment
   ;yes, save write flag for bios (register C).
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        LOGICAL
  comment
   ;convert (BLKNMBR) over to loical sectors.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           MODE
       )
  comment
   ;get access mode flag (1=sequential,
 \n
 line
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;0=random, 2=special?).
 \n
 line
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        WTSEQ9
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Special random i/o from function #40. Maybe for M/PM, but the
 \n
 line
  comment
   ; current block, if it has not been written to, will be zeroed
 \n
 line
  comment
   ; out and then written (reason?).
 \n
 line
  comment
   ;
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        C
  comment
   ;get write status flag (2=writing unused space).
 \n
 line
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        WTSEQ9
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           DIRBUF
       )
  comment
   ;zero out the directory buffer.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        D
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;note that (A) is zero here.
 \n
 line
  lbl
   label
    name
     WTSEQ7
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        D
  comment
   ;do 128 bytes.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        P
    ,
    expression
     multiplyingExpression
      argument
       name
        WTSEQ7
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        DIRDMA
  comment
   ;tell the bios the dma address for directory access.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           LOGSECT
       )
  comment
   ;get sector that starts current block.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       number
        2
  comment
   ;set 'writing to unused space' flag.
 \n
 line
  lbl
   label
    name
     WTSEQ8
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           BLKNMBR
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;save sector to write.
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        TRKSEC1
  comment
   ;determine its track and sector numbers.
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        DOWRITE
  comment
   ;now write out 128 bytes of zeros.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           BLKNMBR
       )
  comment
   ;get sector number.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;set normal write flag.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           BLKMASK
       )
  comment
   ;determine if we have written the entire
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;physical block.
 \n
 line
  instruction
   opcode
    AND
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        L
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;prepare for the next one.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        WTSEQ8
  comment
   ;continue until (BLKMASK+1) sectors written.
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;reset next sector number.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           BLKNMBR
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        DEFDMA
  comment
   ;and reset dma address.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Normal disk write. Set the desired track and sector then
 \n
 line
  comment
   ; do the actual write.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     WTSEQ9
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        TRKSEC1
  comment
   ;determine track and sector for this write.
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
  comment
   ;get write status flag.
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        DOWRITE
  comment
   ;and write this out.
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           SAVNREC
       )
  comment
   ;get number of records in file.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        SAVNXT
  comment
   ;get last record written.
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       name
        WTSEQ10
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;we have to update record count.
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       number
        2
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;*   This area has been patched to correct disk update problem
 \n
 line
  comment
   ;* when using blocking and de-blocking in the BIOS.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     WTSEQ10
   :
  instruction
   opcode
    NOP
  comment
   ;was 'dcr c'
 \n
 line
  instruction
   opcode
    NOP
  comment
   ;was 'dcr c'
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;was 'jnz wtseq99'
 \n
 line
  comment
   ;
 \n
 line
  comment
   ; *   End of patch.
 \n
 line
  comment
   ;
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        AF
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        GETS2
  comment
   ;set 'extent written to' flag.
 \n
 line
  instruction
   opcode
    AND
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        7FH
  comment
   ;(* clear bit 7 *)
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        AF
  comment
   ;get record count for this extent.
 \n
 line
  lbl
   label
    name
     WTSEQ99
   :
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        127
  comment
   ;is it full?
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        WTSEQ12
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           MODE
       )
  comment
   ;yes, are we in sequential mode?
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        1
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        WTSEQ12
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SETNREC
  comment
   ;yes, set next record number.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        GETNEXT
  comment
   ;and get next empty space in directory.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        STATUS
  comment
   ;ok?
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        WTSEQ11
 \n
 line
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;yes, set record count to -1.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           SAVNREC
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  lbl
   label
    name
     WTSEQ11
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;clear status.
 \n
 line
  lbl
   label
    name
     WTSEQ12
   :
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SETNREC
  comment
   ;set next record to access.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   For random i/o, set the fcb for the desired record number
 \n
 line
  comment
   ; based on the 'r0,r1,r2' bytes. These bytes in the fcb are
 \n
 line
  comment
   ; used as follows:
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;       fcb+35            fcb+34            fcb+33
 \n
 line
  comment
   ;  |     'r-2'      |      'r-1'      |      'r-0'     |
 \n
 line
  comment
   ;  |7             0 | 7             0 | 7             0|
 \n
 line
  comment
   ;  |0 0 0 0 0 0 0 0 | 0 0 0 0 0 0 0 0 | 0 0 0 0 0 0 0 0|
 \n
 line
  comment
   ;  |    overflow   | | extra |  extent   |   record #  |
 \n
 line
  comment
   ;  | ______________| |_extent|__number___|_____________|
 \n
 line
  comment
   ;                     also 's2'
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   On entry, register (C) contains 0ffh if this is a read
 \n
 line
  comment
   ; and thus we can not access unwritten disk space. Otherwise,
 \n
 line
  comment
   ; another extent will be opened (for writing) if required.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     POSITION
   :
  instruction
   opcode
    XOR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;set random i/o flag.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           MODE
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Special entry (function #40). M/PM ?
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     POSITN1
   :
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
  comment
   ;save read/write flag.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           PARAMS
       )
  comment
   ;get address of fcb.
 \n
 line
  instruction
   opcode
    EX
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       number
        33
  comment
   ;now get byte 'r0'.
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    AND
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        7FH
  comment
   ;keep bits 0-6 for the record number to access.
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        AF
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;now get bit 7 of 'r0' and bits 0-3 of 'r1'.
 \n
 line
  instruction
   opcode
    RLA
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    RLA
 \n
 line
  instruction
   opcode
    AND
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        1FH
  comment
   ;and save this in bits 0-4 of (C).
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;this is the extent byte.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;now get the extra extent byte.
 \n
 line
  instruction
   opcode
    RRA
 \n
 line
  instruction
   opcode
    RRA
 \n
 line
  instruction
   opcode
    RRA
 \n
 line
  instruction
   opcode
    RRA
 \n
 line
  instruction
   opcode
    AND
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0FH
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;and save it in (B).
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        AF
  comment
   ;get record number back to (A).
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;check overflow byte 'r2'.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        L
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        L
 \n
 line
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        L
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        L
    ,
    expression
     multiplyingExpression
      argument
       number
        6
  comment
   ;prepare for error.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        POSITN5
  comment
   ;out of disk space error.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       number
        32
  comment
   ;store record number into fcb.
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       number
        12
  comment
   ;and now check the extent byte.
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        C
 \n
 line
  instruction
   opcode
    SUB
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;same extent as before?
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        POSITN2
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       number
        14
  comment
   ;yes, check extra extent byte 's2' also.
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        B
 \n
 line
  instruction
   opcode
    SUB
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    AND
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        7FH
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        POSITN3
  comment
   ;same, we are almost done then.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;  Get here when another extent is required.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     POSITN2
   :
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CLOSEIT
  comment
   ;close current extent.
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        L
    ,
    expression
     multiplyingExpression
      argument
       number
        3
  comment
   ;prepare for error.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           STATUS
       )
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        POSITN4
  comment
   ;close error.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       number
        12
  comment
   ;put desired extent into fcb now.
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        C
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       number
        14
  comment
   ;and store extra extent byte 's2'.
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        B
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        OPENIT
  comment
   ;try and get this extent.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           STATUS
       )
  comment
   ;was it there?
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        POSITN3
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
  comment
   ;no. can we create a new one (writing?).
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        L
    ,
    expression
     multiplyingExpression
      argument
       number
        4
  comment
   ;prepare for error.
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        POSITN4
  comment
   ;nope, reading unwritten space error.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        GETEMPTY
  comment
   ;yes we can, try to find space.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        L
    ,
    expression
     multiplyingExpression
      argument
       number
        5
  comment
   ;prepare for error.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           STATUS
       )
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        POSITN4
  comment
   ;out of space?
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Normal return location. Clear error code and return.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     POSITN3
   :
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
  comment
   ;restore stack.
 \n
 line
  instruction
   opcode
    XOR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;and clear error code byte.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SETSTAT
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Error. Set the 's2' byte to indicate this (why?).
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     POSITN4
   :
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        GETS2
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       number
        0C0H
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Return with error code (presently in L).
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     POSITN5
   :
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        BC
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        L
  comment
   ;get error code.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           STATUS
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SETS2B7
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Read a random record.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     READRAN
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       number
        0FFH
  comment
   ;set 'read' status.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        POSITION
  comment
   ;position the file to proper record.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        RDSEQ1
  comment
   ;and read it as usual (if no errors).
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Write to a random record.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     WRITERAN
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;set 'writing' flag.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        POSITION
  comment
   ;position the file to proper record.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        WTSEQ1
  comment
   ;and write as usual (if no errors).
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Compute the random record number. Enter with (HL) pointing
 \n
 line
  comment
   ; to a fcb an (DE) contains a relative location of a record
 \n
 line
  comment
   ; number. On exit, (C) contains the 'r0' byte, (B) the 'r1'
 \n
 line
  comment
   ; byte, and (A) the 'r2' byte.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   On return, the zero flag is set if the record is within
 \n
 line
  comment
   ; bounds. Otherwise, an overflow occured.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     COMPRAND
   :
  instruction
   opcode
    EX
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;save fcb pointer in (DE).
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       register_
        DE
  comment
   ;compute relative position of record #.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;get record number into (BC).
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
    ,
    expression
     multiplyingExpression
      argument
       number
        0
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       number
        12
  comment
   ;now get extent.
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;compute (BC)=(record #)+(extent)*128.
 \n
 line
  instruction
   opcode
    RRCA
  comment
   ;move lower bit into bit 7.
 \n
 line
  instruction
   opcode
    AND
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        80H
  comment
   ;and ignore all other bits.
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        C
  comment
   ;add to our record number.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;take care of any carry.
 \n
 line
  instruction
   opcode
    ADC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        B
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;now get the upper bits of extent into
 \n
 line
  instruction
   opcode
    RRCA
  comment
   ;bit positions 0-3.
 \n
 line
  instruction
   opcode
    AND
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0FH
  comment
   ;and ignore all others.
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        B
  comment
   ;add this in to 'r1' byte.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       number
        14
  comment
   ;get the 's2' byte (extra extent).
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;and shift it left 4 bits (bits 4-7).
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        AF
  comment
   ;save carry flag (bit 0 of flag byte).
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        B
  comment
   ;now add extra extent into 'r1'.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        AF
  comment
   ;and save carry (overflow byte 'r2').
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;bit 0 of (L) is the overflow indicator.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        L
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;and same for first carry flag.
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        L
  comment
   ;either one of these set?
 \n
 line
  instruction
   opcode
    AND
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        01H
  comment
   ;only check the carry flags.
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Routine to setup the fcb (bytes 'r0', 'r1', 'r2') to
 \n
 line
  comment
   ; reflect the last record used for a random (or other) file.
 \n
 line
  comment
   ; This reads the directory and looks at all extents computing
 \n
 line
  comment
   ; the largerst record number for each and keeping the maximum
 \n
 line
  comment
   ; value only. Then 'r0', 'r1', and 'r2' will reflect this
 \n
 line
  comment
   ; maximum record number. This is used to compute the space used
 \n
 line
  comment
   ; by a random file.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     RANSIZE
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       number
        12
  comment
   ;look thru directory for first entry with
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        FINDFST
  comment
   ;this name.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           PARAMS
       )
  comment
   ;zero out the 'r0, r1, r2' bytes.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       number
        33
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        D
  comment
   ;note that (D)=0.
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        D
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        D
 \n
 line
  lbl
   label
    name
     RANSIZ1
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CKFILPOS
  comment
   ;is there an extent to process?
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        RANSIZ3
  comment
   ;no, we are done.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        FCB2HL
  comment
   ;set (HL) pointing to proper fcb in dir.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       number
        15
  comment
   ;point to last record in extent.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        COMPRAND
  comment
   ;and compute random parameters.
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;now check these values against those
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        E
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;already in fcb.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        C
  comment
   ;the carry flag will be set if those
 \n
 line
  instruction
   opcode
    SUB
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;in the fcb represent a larger size than
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;this extent does.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        B
 \n
 line
  instruction
   opcode
    SBC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       name
        M
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        E
 \n
 line
  instruction
   opcode
    SBC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       name
        M
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       name
        RANSIZ2
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        E
  comment
   ;we found a larger (in size) extent.
 \n
 line
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;stuff these values into fcb.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        B
 \n
 line
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        C
 \n
 line
  lbl
   label
    name
     RANSIZ2
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        FINDNXT
  comment
   ;now get the next extent.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        RANSIZ1
  comment
   ;continue til all done.
 \n
 line
  lbl
   label
    name
     RANSIZ3
   :
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;we are done, restore the stack and
 \n
 line
  instruction
   opcode
    RET
  comment
   ;return.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Function to return the random record position of a given
 \n
 line
  comment
   ; file which has been read in sequential mode up to now.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     SETRAN
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           PARAMS
       )
  comment
   ;point to fcb.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       number
        32
  comment
   ;and to last used record.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        COMPRAND
  comment
   ;compute random position.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       number
        33
  comment
   ;now stuff these values into fcb.
 \n
 line
  instruction
   opcode
    ADD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       register_
        DE
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        C
  comment
   ;move 'r0'.
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        B
  comment
   ;and 'r1'.
 \n
 line
  instruction
   opcode
    INC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;and lastly 'r2'.
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   This routine select the drive specified in (ACTIVE) and
 \n
 line
  comment
   ; update the login vector and bitmap table if this drive was
 \n
 line
  comment
   ; not already active.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     LOGINDRV
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           LOGIN
       )
  comment
   ;get the login vector.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           ACTIVE
       )
  comment
   ;get the default drive.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SHIFTR
  comment
   ;position active bit for this drive
 \n
 line
  instruction
   opcode
    PUSH
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;into bit 0.
 \n
 line
  instruction
   opcode
    EX
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SELECT
  comment
   ;select this drive.
 \n
 line
  instruction
   opcode
    POP
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        SLCTERR
  comment
   ;valid drive?
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        L
  comment
   ;is this a newly activated drive?
 \n
 line
  instruction
   opcode
    RRA
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           LOGIN
       )
  comment
   ;yes, update the login vector.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       register_
        L
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
    ,
    expression
     multiplyingExpression
      argument
       register_
        H
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SETBIT
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           LOGIN
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;and save.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        BITMAP
  comment
   ;now update the bitmap.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Function to set the active disk number.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     SETDSK
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           EPARAM
       )
  comment
   ;get parameter passed and see if this
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        ACTIVE
  comment
   ;represents a change in drives.
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    RET
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;yes it does, log it in.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        LOGINDRV
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   This is the 'auto disk select' routine. The firsst byte
 \n
 line
  comment
   ; of the fcb is examined for a drive specification. If non
 \n
 line
  comment
   ; zero then the drive will be selected and loged in.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     AUTOSEL
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       number
        0FFH
  comment
   ;say 'auto-select activated'.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           AUTO
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           PARAMS
       )
  comment
   ;get drive specified.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    AND
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        1FH
  comment
   ;look at lower 5 bits.
 \n
 line
  instruction
   opcode
    DEC
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;adjust for (1=A, 2=B) etc.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           EPARAM
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;and save for the select routine.
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        1EH
  comment
   ;check for 'no change' condition.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NC
    ,
    expression
     multiplyingExpression
      argument
       name
        AUTOSL1
  comment
   ;yes, don't change.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           ACTIVE
       )
  comment
   ;we must change, save currently active
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           OLDDRV
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;drive.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;and save first byte of fcb also.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           AUTOFLAG
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;this must be non-zero.
 \n
 line
  instruction
   opcode
    AND
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0E0H
  comment
   ;whats this for (bits 6,7 are used for
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;something)?
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SETDSK
  comment
   ;select and log in this drive.
 \n
 line
  lbl
   label
    name
     AUTOSL1
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           USERNO
       )
  comment
   ;move user number into fcb.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           PARAMS
       )
  comment
   ;(* upper half of first byte *)
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    RET
  comment
   ;and return (all done).
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Function to return the current cp/m version number.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     GETVER
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       number
        022H
  comment
   ;version 2.2
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SETSTAT
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Function to reset the disk system.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     RSTDSK
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;clear write protect status and log
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           WRTPRT
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;in vector.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           LOGIN
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    XOR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;select drive 'A'.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           ACTIVE
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       name
        TBUFF
  comment
   ;setup default dma address.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           USERDMA
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        DEFDMA
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        LOGINDRV
  comment
   ;now log in drive 'A'.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Function to open a specified file.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     OPENFIL
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CLEARS2
  comment
   ;clear 's2' byte.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        AUTOSEL
  comment
   ;select proper disk.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        OPENIT
  comment
   ;and open the file.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Function to close a specified file.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     CLOSEFIL
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        AUTOSEL
  comment
   ;select proper disk.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CLOSEIT
  comment
   ;and close the file.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Function to return the first occurence of a specified file
 \n
 line
  comment
   ; name. If the first byte of the fcb is '?' then the name will
 \n
 line
  comment
   ; not be checked (get the first entry no matter what).
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     GETFST
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;prepare for special search.
 \n
 line
  instruction
   opcode
    EX
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;is first byte a '?'?
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        '?'
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        GETFST1
  comment
   ;yes, just get very first entry (zero length match).
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SETEXT
  comment
   ;get the extension byte from fcb.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
  comment
   ;is it '?'? if yes, then we want
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       string_
        '?'
  comment
   ;an entry with a specific 's2' byte.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        CLEARS2
  comment
   ;otherwise, look for a zero 's2' byte.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        AUTOSEL
  comment
   ;select proper drive.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       number
        15
  comment
   ;compare bytes 0-14 in fcb (12&13 excluded).
 \n
 line
  lbl
   label
    name
     GETFST1
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        FINDFST
  comment
   ;find an entry and then move it into
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        MOVEDIR
  comment
   ;the users dma space.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Function to return the next occurence of a file name.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     GETNXT
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           SAVEFCB
       )
  comment
   ;restore pointers. note that no
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           PARAMS
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;other dbos calls are allowed.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        AUTOSEL
  comment
   ;no error will be returned, but the
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        FINDNXT
  comment
   ;results will be wrong.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        MOVEDIR
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Function to delete a file by name.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     DELFILE
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        AUTOSEL
  comment
   ;select proper drive.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        ERAFILE
  comment
   ;erase the file.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        STSTATUS
  comment
   ;set status and return.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Function to execute a sequential read of the specified
 \n
 line
  comment
   ; record number.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     READSEQ
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        AUTOSEL
  comment
   ;select proper drive then read.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        RDSEQ
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Function to write the net sequential record.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     WRTSEQ
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        AUTOSEL
  comment
   ;select proper drive then write.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        WTSEQ
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Create a file function.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     FCREATE
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CLEARS2
  comment
   ;clear the 's2' byte on all creates.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        AUTOSEL
  comment
   ;select proper drive and get the next
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        GETEMPTY
  comment
   ;empty directory space.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Function to rename a file.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     RENFILE
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        AUTOSEL
  comment
   ;select proper drive and then switch
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        CHGNAMES
  comment
   ;file names.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        STSTATUS
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Function to return the login vector.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     GETLOG
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           LOGIN
       )
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        GETPRM1
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Function to return the current disk assignment.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     GETCRNT
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           ACTIVE
       )
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SETSTAT
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Function to set the dma address.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     PUTDMA
   :
  instruction
   opcode
    EX
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           USERDMA
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;save in our space and then get to
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        DEFDMA
  comment
   ;the bios with this also.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Function to return the allocation vector.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     GETALOC
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           ALOCVECT
       )
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        GETPRM1
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Function to return the read-only status vector.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     GETROV
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           WRTPRT
       )
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        GETPRM1
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Function to set the file attributes (read-only, system).
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     SETATTR
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        AUTOSEL
  comment
   ;select proper drive then save attributes.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SAVEATTR
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        STSTATUS
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Function to return the address of the disk parameter block
 \n
 line
  comment
   ; for the current drive.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     GETPARM
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           DISKPB
       )
 \n
 line
  lbl
   label
    name
     GETPRM1
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           STATUS
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Function to get or set the user number. If (E) was (FF)
 \n
 line
  comment
   ; then this is a request to return the current user number.
 \n
 line
  comment
   ; Else set the user number from (E).
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     GETUSER
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           EPARAM
       )
  comment
   ;get parameter.
 \n
 line
  instruction
   opcode
    CP
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0FFH
  comment
   ;get user number?
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        NZ
    ,
    expression
     multiplyingExpression
      argument
       name
        SETUSER
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           USERNO
       )
  comment
   ;yes, just do it.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SETSTAT
 \n
 line
  lbl
   label
    name
     SETUSER
   :
  instruction
   opcode
    AND
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        1FH
  comment
   ;no, we should set it instead. keep low
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           USERNO
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;bits (0-4) only.
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Function to read a random record from a file.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     RDRANDOM
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        AUTOSEL
  comment
   ;select proper drive and read.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        READRAN
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Function to compute the file size for random files.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     WTRANDOM
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        AUTOSEL
  comment
   ;select proper drive and write.
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        WRITERAN
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Function to compute the size of a random file.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     FILESIZE
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        AUTOSEL
  comment
   ;select proper drive and check file length
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        RANSIZE
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Function #37. This allows a program to log off any drives.
 \n
 line
  comment
   ; On entry, set (DE) to contain a word with bits set for those
 \n
 line
  comment
   ; drives that are to be logged off. The log-in vector and the
 \n
 line
  comment
   ; write protect vector will be updated. This must be a M/PM
 \n
 line
  comment
   ; special function.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     LOGOFF
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           PARAMS
       )
  comment
   ;get drives to log off.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        L
  comment
   ;for each bit that is set, we want
 \n
 line
  instruction
   opcode
    CPL
  comment
   ;to clear that bit in (LOGIN)
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        E
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;and (WRTPRT).
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        H
 \n
 line
  instruction
   opcode
    CPL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           LOGIN
       )
  comment
   ;reset the login vector.
 \n
 line
  instruction
   opcode
    AND
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        H
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        D
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        L
 \n
 line
  instruction
   opcode
    AND
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        E
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        E
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           WRTPRT
       )
 \n
 line
  instruction
   opcode
    EX
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        DE
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           LOGIN
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;and save.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        L
  comment
   ;now do the write protect vector.
 \n
 line
  instruction
   opcode
    AND
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        E
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        L
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        H
 \n
 line
  instruction
   opcode
    AND
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        D
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        H
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           WRTPRT
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
  comment
   ;and save. all done.
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Get here to return to the user.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     GOBACK
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           AUTO
       )
  comment
   ;was auto select activated?
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        GOBACK1
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           PARAMS
       )
  comment
   ;yes, but was a change made?
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;(* reset first byte of fcb *)
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           AUTOFLAG
       )
 \n
 line
  instruction
   opcode
    OR
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        GOBACK1
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          register_
           HL
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
  comment
   ;yes, reset first byte properly.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           OLDDRV
       )
  comment
   ;and get the old drive and select it.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           EPARAM
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        SETDSK
 \n
 line
  lbl
   label
    name
     GOBACK1
   :
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           USRSTACK
       )
  comment
   ;reset the users stack pointer.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        SP
    ,
    expression
     multiplyingExpression
      argument
       register_
        HL
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        HL
    ,
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           STATUS
       )
  comment
   ;get return status.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       register_
        L
  comment
   ;force version 1.4 compatability.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        B
    ,
    expression
     multiplyingExpression
      argument
       register_
        H
 \n
 line
  instruction
   opcode
    RET
  comment
   ;and go back to user.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Function #40. This is a special entry to do random i/o.
 \n
 line
  comment
   ; For the case where we are writing to unused disk space, this
 \n
 line
  comment
   ; space will be zeroed out first. This must be a M/PM special
 \n
 line
  comment
   ; purpose function, because why would any normal program even
 \n
 line
  comment
   ; care about the previous contents of a sector about to be
 \n
 line
  comment
   ; written over.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     WTSPECL
   :
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        AUTOSEL
  comment
   ;select proper drive.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        A
    ,
    expression
     multiplyingExpression
      argument
       number
        2
  comment
   ;use special write mode.
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       (
       expression
        multiplyingExpression
         argument
          name
           MODE
       )
    ,
    expression
     multiplyingExpression
      argument
       register_
        A
 \n
 line
  instruction
   opcode
    LD
   expressionlist
    expression
     multiplyingExpression
      argument
       register_
        C
    ,
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;set write indicator.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        POSITN1
  comment
   ;position the file.
 \n
 line
  instruction
   opcode
    CALL
   expressionlist
    expression
     multiplyingExpression
      argument
       name
        Z
    ,
    expression
     multiplyingExpression
      argument
       name
        WTSEQ1
  comment
   ;and write (if no errors).
 \n
 line
  instruction
   opcode
    RET
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;**************************************************************
 \n
 line
  comment
   ;*
 \n
 line
  comment
   ;*     BDOS data storage pool.
 \n
 line
  comment
   ;*
 \n
 line
  comment
   ;**************************************************************
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     EMPTYFCB
   :
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0E5H
  comment
   ;empty directory segment indicator.
 \n
 line
  lbl
   label
    name
     WRTPRT
   :
  directive
   assemblerdirective
    DEFW
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;write protect status for all 16 drives.
 \n
 line
  lbl
   label
    name
     LOGIN
   :
  directive
   assemblerdirective
    DEFW
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;drive active word (1 bit per drive).
 \n
 line
  lbl
   label
    name
     USERDMA
   :
  directive
   assemblerdirective
    DEFW
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        080H
  comment
   ;user's dma address (defaults to 80h).
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Scratch areas from parameter block.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     SCRATCH1
   :
  directive
   assemblerdirective
    DEFW
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;relative position within dir segment for file (0-3).
 \n
 line
  lbl
   label
    name
     SCRATCH2
   :
  directive
   assemblerdirective
    DEFW
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;last selected track number.
 \n
 line
  lbl
   label
    name
     SCRATCH3
   :
  directive
   assemblerdirective
    DEFW
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;last selected sector number.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Disk storage areas from parameter block.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     DIRBUF
   :
  directive
   assemblerdirective
    DEFW
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;address of directory buffer to use.
 \n
 line
  lbl
   label
    name
     DISKPB
   :
  directive
   assemblerdirective
    DEFW
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;contains address of disk parameter block.
 \n
 line
  lbl
   label
    name
     CHKVECT
   :
  directive
   assemblerdirective
    DEFW
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;address of check vector.
 \n
 line
  lbl
   label
    name
     ALOCVECT
   :
  directive
   assemblerdirective
    DEFW
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;address of allocation vector (bit map).
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Parameter block returned from the bios.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     SECTORS
   :
  directive
   assemblerdirective
    DEFW
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;sectors per track from bios.
 \n
 line
  lbl
   label
    name
     BLKSHFT
   :
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;block shift.
 \n
 line
  lbl
   label
    name
     BLKMASK
   :
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;block mask.
 \n
 line
  lbl
   label
    name
     EXTMASK
   :
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;extent mask.
 \n
 line
  lbl
   label
    name
     DSKSIZE
   :
  directive
   assemblerdirective
    DEFW
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;disk size from bios (number of blocks-1).
 \n
 line
  lbl
   label
    name
     DIRSIZE
   :
  directive
   assemblerdirective
    DEFW
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;directory size.
 \n
 line
  lbl
   label
    name
     ALLOC0
   :
  directive
   assemblerdirective
    DEFW
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;storage for first bytes of bit map (dir space used).
 \n
 line
  lbl
   label
    name
     ALLOC1
   :
  directive
   assemblerdirective
    DEFW
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
 \n
 line
  lbl
   label
    name
     OFFSET
   :
  directive
   assemblerdirective
    DEFW
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;first usable track number.
 \n
 line
  lbl
   label
    name
     XLATE
   :
  directive
   assemblerdirective
    DEFW
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;sector translation table address.
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     CLOSEFLG
   :
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;close flag (=0ffh is extent written ok).
 \n
 line
  lbl
   label
    name
     RDWRTFLG
   :
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;read/write flag (0ffh=read, 0=write).
 \n
 line
  lbl
   label
    name
     FNDSTAT
   :
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;filename found status (0=found first entry).
 \n
 line
  lbl
   label
    name
     MODE
   :
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;I/o mode select (0=random, 1=sequential, 2=special random).
 \n
 line
  lbl
   label
    name
     EPARAM
   :
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;storage for register (E) on entry to bdos.
 \n
 line
  lbl
   label
    name
     RELBLOCK
   :
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;relative position within fcb of block number written.
 \n
 line
  lbl
   label
    name
     COUNTER
   :
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;byte counter for directory name searches.
 \n
 line
  lbl
   label
    name
     SAVEFCB
   :
  directive
   assemblerdirective
    DEFW
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;save space for address of fcb (for directory searches).
 \n
 line
  lbl
   label
    name
     BIGDISK
   :
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;if =0 then disk is > 256 blocks long.
 \n
 line
  lbl
   label
    name
     AUTO
   :
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;if non-zero, then auto select activated.
 \n
 line
  lbl
   label
    name
     OLDDRV
   :
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;on auto select, storage for previous drive.
 \n
 line
  lbl
   label
    name
     AUTOFLAG
   :
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;if non-zero, then auto select changed drives.
 \n
 line
  lbl
   label
    name
     SAVNXT
   :
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;storage for next record number to access.
 \n
 line
  lbl
   label
    name
     SAVEXT
   :
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;storage for extent number of file.
 \n
 line
  lbl
   label
    name
     SAVNREC
   :
  directive
   assemblerdirective
    DEFW
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;storage for number of records in file.
 \n
 line
  lbl
   label
    name
     BLKNMBR
   :
  directive
   assemblerdirective
    DEFW
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;block number (physical sector) used within a file or logical sect
 \n
 line
  lbl
   label
    name
     LOGSECT
   :
  directive
   assemblerdirective
    DEFW
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;starting logical (128 byte) sector of block (physical sector).
 \n
 line
  lbl
   label
    name
     FCBPOS
   :
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;relative position within buffer for fcb of file of interest.
 \n
 line
  lbl
   label
    name
     FILEPOS
   :
  directive
   assemblerdirective
    DEFW
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;files position within directory (0 to max entries -1).
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Disk directory buffer checksum bytes. One for each of the
 \n
 line
  comment
   ; 16 possible drives.
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     CKSUMTBL
   :
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;   Extra space ?
 \n
 line
  comment
   ;
 \n
 line
  directive
   assemblerdirective
    DEFB
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
    ,
    expression
     multiplyingExpression
      argument
       number
        0
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;**************************************************************
 \n
 line
  comment
   ;*
 \n
 line
  comment
   ;*        B I O S   J U M P   T A B L E
 \n
 line
  comment
   ;*
 \n
 line
  comment
   ;**************************************************************
 \n
 line
  comment
   ;
 \n
 line
  lbl
   label
    name
     BOOT
   :
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
  comment
   ;NOTE WE USE FAKE DESTINATIONS
 \n
 line
  lbl
   label
    name
     WBOOT
   :
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
 \n
 line
  lbl
   label
    name
     CONST
   :
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
 \n
 line
  lbl
   label
    name
     CONIN
   :
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
 \n
 line
  lbl
   label
    name
     CONOUT
   :
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
 \n
 line
  lbl
   label
    name
     LIST
   :
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
 \n
 line
  lbl
   label
    name
     PUNCH
   :
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
 \n
 line
  lbl
   label
    name
     READER
   :
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
 \n
 line
  lbl
   label
    name
     HOME
   :
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
 \n
 line
  lbl
   label
    name
     SELDSK
   :
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
 \n
 line
  lbl
   label
    name
     SETTRK
   :
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
 \n
 line
  lbl
   label
    name
     SETSEC
   :
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
 \n
 line
  lbl
   label
    name
     SETDMA
   :
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
 \n
 line
  lbl
   label
    name
     READ
   :
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
 \n
 line
  lbl
   label
    name
     WRITE
   :
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
 \n
 line
  lbl
   label
    name
     PRSTAT
   :
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
 \n
 line
  lbl
   label
    name
     SECTRN
   :
  instruction
   opcode
    JP
   expressionlist
    expression
     multiplyingExpression
      argument
       number
        0
 \n
 line
  comment
   ;
 \n
 line
  comment
   ;*
 \n
 line
  comment
   ;******************   E N D   O F   C P / M   *****************
 \n
 line
  comment
   ;*
 \n\n
 <EOF>
