prog
 version_directive
  .version
  1.0
 target_directive
  .target
  target_list
   target_specifier
    sm_10
   ,
   target_specifier
    sm_11
 line
  directive
   .reg
   built_in_type
    .b32
   id_list
    id_
     r1
    ,
    id_
     r2
  ;
 line
  directive
   .reg
   built_in_type
    .s32
   id_list
    id_
     i
  ;
 line
  directive
   .reg
   vector_type
    .v4
   built_in_type
    .f32
   id_list
    id_
     accel
  ;
 line
  directive
   .reg
   built_in_type
    .pred
   id_list
    id_
     p
    ,
    id_
     q
    ,
    id_
     r
  ;
 line
  directive
   .reg
   built_in_type
    .b32
   id_list
    id_
     %r<100>
  ;
 line
  directive
   .const
   var_decl
    built_in_type
     .f32
    id_list
     id_
      bias
    array_spec
     [
     ]
    initializer
     =
     initial_value
      {
      initial_value
       -
       const_value
        floating_point_constant
         1.0
      ,
      initial_value
       const_value
        floating_point_constant
         1.0
      }
  ;
 line
  directive
   .struct
   id_
    float4
   {
   struct_field_list
    field_decl
     built_in_type
      .f32
     id_list
      id_
       v0
      ,
      id_
       v1
      ,
      id_
       v2
      ,
      id_
       v3
    ;
   }
  ;
 line
  directive
   .struct
   id_
    some_struct
   {
   struct_field_list
    field_decl
     built_in_type
      .s32
     id_list
      id_
       i
    ;
    field_decl
     built_in_type
      .s32
     id_list
      id_
       j
    ;
    field_decl
     built_in_type
      .f32
     id_list
      id_
       x
    ;
    field_decl
     built_in_type
      .f32
     id_list
      id_
       y
    ;
   }
  ;
 line
  directive
   .global
   var_decl
    built_in_type
     .f32
    id_list
     id_
      array
    array_spec
     [
     N
     ]
  ;
 line
  directive
   .global
   var_decl
    built_in_type
     .u32
    id_list
     id_
      loc
  ;
 line
  directive
   .global
   var_decl
    built_in_type
     .u8
    id_list
     id_
      bg
    array_spec
     [
     integer_constant
      4
     ]
    initializer
     =
     initial_value
      {
      initial_value
       const_value
        integer_constant
         0
      ,
      initial_value
       const_value
        integer_constant
         0
      ,
      initial_value
       const_value
        integer_constant
         0
      ,
      initial_value
       const_value
        integer_constant
         0
      }
  ;
 line
  directive
   state_space
    .global
   .struct
   id_
    float4
   id_
    coord
  ;
 line
  directive
   .global
   var_decl
    vector_type
     .v4
    built_in_type
     .f32
    id_list
     id_
      V
  ;
 line
  directive
   .global
   var_decl
    built_in_type
     .s32
    id_list
     id_
      offset
    array_spec
     [
     ]
    array_spec
     [
     ]
    initializer
     =
     initial_value
      {
      initial_value
       {
       initial_value
        -
        const_value
         integer_constant
          1
       ,
       initial_value
        const_value
         integer_constant
          0
       }
      ,
      initial_value
       {
       initial_value
        const_value
         integer_constant
          0
       ,
       initial_value
        -
        const_value
         integer_constant
          1
       }
      ,
      initial_value
       {
       initial_value
        const_value
         integer_constant
          1
       ,
       initial_value
        const_value
         integer_constant
          0
       }
      ,
      initial_value
       {
       initial_value
        const_value
         integer_constant
          0
       ,
       initial_value
        const_value
         integer_constant
          1
       }
      }
  ;
 line
  directive
   .union
   id_
    intOrFloat
   {
   struct_field_list
    field_decl
     built_in_type
      .s32
     id_list
      id_
       i
    ;
    field_decl
     built_in_type
      .f32
     id_list
      id_
       f
    ;
   }
  ;
 line
  directive
   .shared
   var_decl
    vector_type
     .v2
    built_in_type
     .u16
    id_list
     id_
      uv
  ;
 line
  directive
   .shared
   var_decl
    built_in_type
     .u8
    id_list
     id_
      mailbox
    array_spec
     [
     integer_constant
      128
     ]
  ;
 line
  directive
   .local
   var_decl
    built_in_type
     .u16
    id_list
     id_
      kernel
    array_spec
     [
     integer_constant
      19
     ]
    array_spec
     [
     integer_constant
      19
     ]
  ;
 line
  directive
   .global
   var_decl
    built_in_type
     .s32
    id_list
     id_
      n
    initializer
     =
     initial_value
      const_value
       integer_constant
        10
  ;
 line
  directive
   .shared
   var_decl
    built_in_type
     .f16
    id_list
     id_
      blur_kernel
    array_spec
     [
     ]
    array_spec
     [
     ]
    initializer
     =
     initial_value
      {
      initial_value
       {
       initial_value
        const_value
         floating_point_constant
          .05
       ,
       initial_value
        const_value
         floating_point_constant
          .1
       ,
       initial_value
        const_value
         floating_point_constant
          .05
       }
      ,
      initial_value
       {
       initial_value
        const_value
         floating_point_constant
          .1
       ,
       initial_value
        const_value
         floating_point_constant
          .4
       ,
       initial_value
        const_value
         floating_point_constant
          .1
       }
      ,
      initial_value
       {
       initial_value
        const_value
         floating_point_constant
          .05
       ,
       initial_value
        const_value
         floating_point_constant
          .1
       ,
       initial_value
        const_value
         floating_point_constant
          .05
       }
      }
  ;
 line
  directive
   .global
   var_decl
    vector_type
     .v3
    built_in_type
     .u8
    id_list
     id_
      rgb
    array_spec
     [
     integer_constant
      3
     ]
    initializer
     =
     initial_value
      {
      initial_value
       {
       initial_value
        const_value
         integer_constant
          1
       ,
       initial_value
        const_value
         integer_constant
          0
       ,
       initial_value
        const_value
         integer_constant
          0
       }
      ,
      initial_value
       {
       initial_value
        const_value
         integer_constant
          0
       ,
       initial_value
        const_value
         integer_constant
          1
       ,
       initial_value
        const_value
         integer_constant
          0
       }
      ,
      initial_value
       {
       initial_value
        const_value
         integer_constant
          0
       ,
       initial_value
        const_value
         integer_constant
          0
       ,
       initial_value
        const_value
         integer_constant
          1
       }
      }
  ;
 line
  .func
  ret_param
   (
   state_space
    .reg
   built_in_type
    .b32
   id_
    rval
   )
  id_
   foo
  reg_list
   (
   reg_decl
    .reg
    built_in_type
     .b32
    id_
     arg0
   ,
   reg_decl
    .reg
    built_in_type
     .f64
    id_
     arg1
   )
  body
   {
   line
    directive
     .reg
     built_in_type
      .b32
     id_list
      id_
       localVar
    ;
   line
    instruction_template
     instruction
      mov
      data_type
       built_in_type
        .b32
      operand
       id_
        rval
      ,
      operand
       id_
        result
    ;
   line
    instruction_template
     instruction
      ret
    ;
   }
 line
  .entry
  id_
   filter
  array_spec
   [
   integer_constant
    16
   ]
  array_spec
   [
   integer_constant
    16
   ]
  body
   {
   line
    directive
     .reg
     built_in_type
      .b32
     id_list
      id_
       a
    ;
   line
    instruction_template
     instruction
      ret
    ;
   }
 line
  instruction_template
   start:
   instruction
    mov
    data_type
     built_in_type
      .b32
    operand
     id_
      r1
    ,
    operand
     id_
      %tid
     .
     id_
      x
  ;
 line
  instruction_template
   instruction
    shl
    data_type
     built_in_type
      .b32
    operand
     id_
      r1
    ,
    operand
     id_
      r1
    ,
    operand
     const_value
      integer_constant
       2
  ;
 line
  instruction_template
   instruction
    ld
    space
     .global
    data_type
     built_in_type
      .b32
    operand
     id_
      r2
    ,
    operand
     id_
      array
     [
     arr_ix
      id_
       r1
     ]
  ;
 line
  instruction_template
   instruction
    add
    data_type
     built_in_type
      .f32
    operand
     id_
      r2
    ,
    operand
     id_
      r2
    ,
    operand
     const_value
      floating_point_constant
       0.5
  ;
 line
  instruction_template
   guard
    @
    pred_reg
     id_
      p
   instruction
    add
    data_type
     built_in_type
      .u32
    operand
     id_
      x
    ,
    operand
     id_
      y
    ,
    operand
     id_
      z
  ;
 line
  instruction_template
   instruction
    add
    .sat
    data_type
     built_in_type
      .s32
    operand
     id_
      c
    ,
    operand
     id_
      c
    ,
    operand
     const_value
      integer_constant
       1
  ;
 line
  instruction_template
   instruction
    add
    rounding_mode
     floating_point_rounding_mode
      .rz
    data_type
     built_in_type
      .f32
    operand
     id_
      f1
    ,
    operand
     id_
      f2
    ,
    operand
     id_
      f3
  ;
 line
  instruction_template
   instruction
    sub
    data_type
     built_in_type
      .s32
    operand
     id_
      c
    ,
    operand
     id_
      a
    ,
    operand
     id_
      b
  ;
 line
  instruction_template
   instruction
    mul
    .wide
    data_type
     built_in_type
      .s16
    operand
     id_
      fa
    ,
    operand
     id_
      fxs
    ,
    operand
     id_
      fys
  ;
 line
  instruction_template
   instruction
    mul
    .lo
    data_type
     built_in_type
      .s16
    operand
     id_
      fa
    ,
    operand
     id_
      fxs
    ,
    operand
     id_
      fys
  ;
 line
  instruction_template
   instruction
    mul
    .wide
    data_type
     built_in_type
      .s32
    operand
     id_
      z
    ,
    operand
     id_
      x
    ,
    operand
     id_
      y
  ;
 line
  instruction_template
   instruction
    mul
    data_type
     built_in_type
      .f32
    operand
     id_
      circumf
    ,
    operand
     id_
      radius
    ,
    operand
     id_
      pi
  ;
 line
  instruction_template
   instruction
    mad
    .lo
    data_type
     built_in_type
      .s32
    operand
     id_
      d
    ,
    operand
     id_
      a
    ,
    operand
     id_
      b
    ,
    operand
     id_
      c
  ;
 line
  instruction_template
   instruction
    mad
    .lo
    data_type
     built_in_type
      .s32
    operand
     id_
      r
    ,
    operand
     id_
      p
    ,
    operand
     id_
      q
    ,
    operand
     id_
      r
  ;
 line
  instruction_template
   guard
    @
    pred_reg
     id_
      p
   instruction
    mad
    data_type
     built_in_type
      .f32
    operand
     id_
      d
    ,
    operand
     id_
      a
    ,
    operand
     id_
      b
    ,
    operand
     id_
      c
  ;
 line
  instruction_template
   instruction
    mul24
    .lo
    data_type
     built_in_type
      .s32
    operand
     id_
      d
    ,
    operand
     id_
      a
    ,
    operand
     id_
      b
  ;
 line
  instruction_template
   instruction
    mad24
    .lo
    data_type
     built_in_type
      .s32
    operand
     id_
      d
    ,
    operand
     id_
      a
    ,
    operand
     id_
      b
    ,
    operand
     id_
      c
  ;
 line
  instruction_template
   instruction
    sad
    data_type
     built_in_type
      .s32
    operand
     id_
      d
    ,
    operand
     id_
      a
    ,
    operand
     id_
      b
    ,
    operand
     id_
      c
  ;
 line
  instruction_template
   instruction
    sad
    data_type
     built_in_type
      .u32
    operand
     id_
      d
    ,
    operand
     id_
      a
    ,
    operand
     id_
      b
    ,
    operand
     id_
      d
  ;
 line
  instruction_template
   instruction
    sad
    data_type
     built_in_type
      .f32
    operand
     id_
      w
    ,
    operand
     id_
      x
    ,
    operand
     id_
      y
    ,
    operand
     id_
      z
  ;
 line
  instruction_template
   instruction
    div
    data_type
     built_in_type
      .s32
    operand
     id_
      b
    ,
    operand
     id_
      n
    ,
    operand
     id_
      i
  ;
 line
  instruction_template
   instruction
    div
    .wide
    data_type
     built_in_type
      .s32
    operand
     id_
      d
    ,
    operand
     id_
      an_s64_var
    ,
    operand
     id_
      b
  ;
 line
  instruction_template
   instruction
    div
    data_type
     built_in_type
      .f32
    operand
     id_
      diam
    ,
    operand
     id_
      circum
    ,
    operand
     const_value
      floating_point_constant
       3.14159
  ;
 line
  instruction_template
   instruction
    rem
    data_type
     built_in_type
      .s32
    operand
     id_
      x
    ,
    operand
     id_
      x
    ,
    operand
     const_value
      integer_constant
       8
  ;
 line
  instruction_template
   instruction
    abs
    data_type
     built_in_type
      .s32
    operand
     id_
      r0
    ,
    operand
     id_
      a
  ;
 line
  instruction_template
   instruction
    abs
    data_type
     built_in_type
      .f32
    operand
     id_
      x
    ,
    operand
     id_
      f0
  ;
 line
  instruction_template
   instruction
    neg
    data_type
     built_in_type
      .s32
    operand
     id_
      r0
    ,
    operand
     id_
      a
  ;
 line
  instruction_template
   instruction
    neg
    data_type
     built_in_type
      .f32
    operand
     id_
      x
    ,
    operand
     id_
      f0
  ;
 line
  instruction_template
   instruction
    min
    data_type
     built_in_type
      .s32
    operand
     id_
      r0
    ,
    operand
     id_
      a
    ,
    operand
     id_
      b
  ;
 line
  instruction_template
   guard
    @
    pred_reg
     id_
      p
   instruction
    min
    data_type
     built_in_type
      .u16
    operand
     id_
      h
    ,
    operand
     id_
      i
    ,
    operand
     id_
      j
  ;
 line
  instruction_template
   instruction
    min
    data_type
     built_in_type
      .f32
    operand
     id_
      z
    ,
    operand
     id_
      z
    ,
    operand
     id_
      x
  ;
 line
  instruction_template
   instruction
    max
    data_type
     built_in_type
      .f32
    operand
     id_
      f0
    ,
    operand
     id_
      f1
    ,
    operand
     id_
      f2
  ;
 line
  instruction_template
   instruction
    max
    data_type
     built_in_type
      .u32
    operand
     id_
      d
    ,
    operand
     id_
      a
    ,
    operand
     id_
      b
  ;
 line
  instruction_template
   instruction
    max
    data_type
     built_in_type
      .s32
    operand
     id_
      q
    ,
    operand
     id_
      q
    ,
    operand
     const_value
      integer_constant
       0
  ;
 line
  instruction_template
   instruction
    set
    cmp_op
     .lt
    bool_op
     .and
    data_type
     built_in_type
      .f32
    data_type
     built_in_type
      .s32
    operand
     id_
      d
    ,
    operand
     id_
      a
    ,
    operand
     id_
      b
    ,
    operand
     id_
      r
  ;
 line
  instruction_template
   instruction
    set
    cmp_op
     .eq
    data_type
     built_in_type
      .u32
    data_type
     built_in_type
      .u32
    operand
     id_
      d
    ,
    operand
     id_
      i
    ,
    operand
     id_
      n
  ;
 line
  instruction_template
   instruction
    setp
    cmp_op
     .lt
    bool_op
     .and
    data_type
     built_in_type
      .s32
    operand
     id_
      p
    |
    operand
     id_
      q
    ,
    operand
     id_
      a
    ,
    operand
     id_
      b
    ,
    operand
     id_
      r
  ;
 line
  instruction_template
   instruction
    setp
    cmp_op
     .eq
    data_type
     built_in_type
      .u32
    operand
     id_
      p
    ,
    operand
     id_
      i
    ,
    operand
     id_
      n
  ;
 line
  instruction_template
   instruction
    selp
    data_type
     built_in_type
      .s32
    operand
     id_
      r0
    ,
    operand
     id_
      r
    ,
    operand
     id_
      g
    ,
    operand
     id_
      p
  ;
 line
  instruction_template
   instruction
    selp
    data_type
     built_in_type
      .f32
    operand
     id_
      f0
    ,
    operand
     id_
      t
    ,
    operand
     id_
      x
    ,
    operand
     id_
      xp
  ;
 line
  instruction_template
   instruction
    slct
    data_type
     built_in_type
      .u32
    data_type
     built_in_type
      .s32
    operand
     id_
      x
    ,
    operand
     id_
      y
    ,
    operand
     id_
      z
    ,
    operand
     id_
      val
  ;
 line
  instruction_template
   instruction
    slct
    data_type
     built_in_type
      .u64
    data_type
     built_in_type
      .f32
    operand
     id_
      A
    ,
    operand
     id_
      B
    ,
    operand
     id_
      C
    ,
    operand
     id_
      fval
  ;
 line
  instruction_template
   instruction
    and
    data_type
     built_in_type
      .b32
    operand
     id_
      x
    ,
    operand
     id_
      q
    ,
    operand
     id_
      r
  ;
 line
  instruction_template
   instruction
    and
    data_type
     built_in_type
      .b32
    operand
     id_
      sign
    ,
    operand
     id_
      fpvalue
    ,
    operand
     const_value
      integer_constant
       0x80000000
  ;
 line
  instruction_template
   instruction
    or
    data_type
     built_in_type
      .b32
    operand
     id_
      mask
    ,
    operand
     id_
      mask
    ,
    operand
     const_value
      integer_constant
       0x00010001
  ;
 line
  instruction_template
   instruction
    or
    data_type
     built_in_type
      .pred
    operand
     id_
      p
    ,
    operand
     id_
      q
    ,
    operand
     id_
      r
  ;
 line
  instruction_template
   instruction
    xor
    data_type
     built_in_type
      .b32
    operand
     id_
      d
    ,
    operand
     id_
      q
    ,
    operand
     id_
      r
  ;
 line
  instruction_template
   instruction
    xor
    data_type
     built_in_type
      .b16
    operand
     id_
      d
    ,
    operand
     id_
      x
    ,
    operand
     const_value
      integer_constant
       0x0001
  ;
 line
  instruction_template
   instruction
    not
    data_type
     built_in_type
      .b32
    operand
     id_
      mask
    ,
    operand
     id_
      mask
  ;
 line
  instruction_template
   instruction
    not
    data_type
     built_in_type
      .pred
    operand
     id_
      p
    ,
    operand
     id_
      q
  ;
 line
  instruction_template
   instruction
    cnot
    data_type
     built_in_type
      .b32
    operand
     id_
      d
    ,
    operand
     id_
      a
  ;
 line
  instruction_template
   instruction
    shl
    data_type
     built_in_type
      .b32
    operand
     id_
      q
    ,
    operand
     id_
      a
    ,
    operand
     const_value
      integer_constant
       2
  ;
 line
  instruction_template
   instruction
    shr
    data_type
     built_in_type
      .u16
    operand
     id_
      c
    ,
    operand
     id_
      a
    ,
    operand
     const_value
      integer_constant
       2
  ;
 line
  instruction_template
   instruction
    shr
    data_type
     built_in_type
      .s32
    operand
     id_
      i
    ,
    operand
     id_
      i
    ,
    operand
     const_value
      integer_constant
       1
  ;
 line
  instruction_template
   instruction
    shr
    data_type
     built_in_type
      .b16
    operand
     id_
      k
    ,
    operand
     id_
      i
    ,
    operand
     id_
      j
  ;
 line
  instruction_template
   instruction
    mov
    data_type
     built_in_type
      .f32
    operand
     id_
      d
    ,
    operand
     id_
      a
  ;
 line
  instruction_template
   instruction
    mov
    data_type
     built_in_type
      .u16
    operand
     id_
      u
    ,
    operand
     id_
      v
  ;
 line
  instruction_template
   instruction
    mov
    data_type
     built_in_type
      .f32
    operand
     id_
      k
    ,
    operand
     const_value
      floating_point_constant
       0.1
  ;
 line
  instruction_template
   instruction
    mov
    data_type
     built_in_type
      .u32
    operand
     id_
      ptr
    ,
    operand
     id_
      A
  ;
 line
  instruction_template
   instruction
    mov
    data_type
     built_in_type
      .u32
    operand
     id_
      ptr
    ,
    operand
     id_
      A
     [
     arr_ix
      integer_constant
       5
     ]
  ;
 line
  instruction_template
   instruction
    ld
    space
     .global
    data_type
     built_in_type
      .f32
    operand
     id_
      d
    ,
    operand
     [
     addr_expr
      id_
       a
     ]
  ;
 line
  instruction_template
   instruction
    ld
    space
     .shared
    data_type
     built_in_type
      .b32
    operand
     id_
      d
    ,
    operand
     [
     addr_expr
      id_
       p
     ]
  ;
 line
  instruction_template
   instruction
    ld
    space
     .const
    data_type
     built_in_type
      .s32
    operand
     id_
      d
    ,
    operand
     [
     addr_expr
      id_
       p
      +
      integer_constant
       4
     ]
  ;
 line
  instruction_template
   instruction
    ld
    space
     .global
    data_type
     vector_type
      .v4
     built_in_type
      .f32
    operand
     id_
      Q
    ,
    operand
     [
     addr_expr
      id_
       p
     ]
  ;
 line
  instruction_template
   instruction
    ld
    space
     .local
    data_type
     built_in_type
      .b64
    operand
     id_
      x
    ,
    operand
     [
     addr_expr
      integer_constant
       240
     ]
  ;
 line
  instruction_template
   instruction
    st
    space
     .global
    data_type
     built_in_type
      .f32
    operand
     [
     addr_expr
      id_
       d
     ]
    ,
    operand
     id_
      a
  ;
 line
  instruction_template
   instruction
    st
    space
     .local
    data_type
     built_in_type
      .b32
    operand
     [
     addr_expr
      id_
       q
      +
      integer_constant
       4
     ]
    ,
    operand
     id_
      a
  ;
 line
  instruction_template
   instruction
    st
    space
     .global
    data_type
     vector_type
      .v4
     built_in_type
      .s32
    operand
     [
     addr_expr
      id_
       p
     ]
    ,
    operand
     id_
      Q
  ;
 line
  instruction_template
   instruction
    st
    space
     .shared
    data_type
     built_in_type
      .s32
    operand
     [
     addr_expr
      integer_constant
       100
     ]
    ,
    operand
     id_
      r7
  ;
 line
  instruction_template
   instruction
    cvt
    data_type
     built_in_type
      .f32
    data_type
     built_in_type
      .s32
    operand
     id_
      f
    ,
    operand
     id_
      i
  ;
 line
  instruction_template
   instruction
    cvt
    .sat
    data_type
     built_in_type
      .s32
    data_type
     built_in_type
      .f64
    operand
     id_
      j
    ,
    operand
     id_
      r
  ;
 line
  instruction_template
   instruction
    cvt
    rounding_mode
     integer_rounding_mode
      .rni
    data_type
     built_in_type
      .f32
    data_type
     built_in_type
      .f32
    operand
     id_
      x
    ,
    operand
     id_
      y
  ;
 line
  instruction_template
   instruction
    tex
    geom
     .3d
    data_type
     vector_type
      .v4
     built_in_type
      .s32
    data_type
     built_in_type
      .f32
    operand
     {
     id_list
      id_
       r1
      ,
      id_
       r2
      ,
      id_
       r3
      ,
      id_
       r4
     }
    ,
    operand
     id_
      tex_a
    ,
    operand
     {
     id_list
      id_
       f1
      ,
      id_
       f2
      ,
      id_
       f3
     }
  ;
 line
  instruction_template
   instruction
    tex
    geom
     .1d
    data_type
     vector_type
      .v4
     built_in_type
      .s32
    data_type
     built_in_type
      .f32
    operand
     {
     id_list
      id_
       r1
      ,
      id_
       r2
      ,
      id_
       r3
      ,
      id_
       r4
     }
    ,
    operand
     id_
      tex_a
    ,
    operand
     {
     id_list
      id_
       f1
     }
  ;
 line
  instruction_template
   instruction
    setp
    cmp_op
     .eq
    data_type
     built_in_type
      .f32
    operand
     id_
      p
    ,
    operand
     id_
      y
    ,
    operand
     const_value
      integer_constant
       0
  ;
 line
  instruction_template
   guard
    @
    !
    pred_reg
     id_
      p
   instruction
    div
    data_type
     built_in_type
      .f32
    operand
     id_
      ratio
    ,
    operand
     id_
      x
    ,
    operand
     id_
      y
  ;
 line
  instruction_template
   guard
    @
    pred_reg
     id_
      q
   instruction
    bra
    id_
     L23
  ;
 line
  instruction_template
   instruction
    bra
    .uni
    id_
     L_exit
  ;
 line
  instruction_template
   guard
    @
    pred_reg
     id_
      p
   instruction
    bra
    id_
     L321
  ;
 line
  instruction_template
   instruction
    call
    id_
     init
  ;
 line
  instruction_template
   instruction
    call
    .uni
    id_
     g
    ,
    (
    operand
     id_
      a
    )
  ;
 line
  instruction_template
   guard
    @
    pred_reg
     id_
      p
   instruction
    call
    (
    operand
     id_
      d
    )
    ,
    id_
     h
    ,
    (
    operand
     id_
      a
    ,
    operand
     id_
      b
    )
  ;
 line
  instruction_template
   instruction
    ret
  ;
 line
  instruction_template
   guard
    @
    pred_reg
     id_
      p
   instruction
    ret
  ;
 line
  instruction_template
   instruction
    exit
  ;
 line
  instruction_template
   guard
    @
    pred_reg
     id_
      p
   instruction
    exit
  ;
 line
  instruction_template
   instruction
    bar
    .sync
    operand
     const_value
      integer_constant
       0
  ;
 line
  instruction_template
   instruction
    atom
    space
     .global
    .
    operation
     add
    data_type
     built_in_type
      .s32
    operand
     id_
      d
    ,
    operand
     [
     addr_expr
      id_
       a
     ]
    ,
    operand
     const_value
      integer_constant
       1
  ;
 line
  instruction_template
   instruction
    frc
    data_type
     built_in_type
      .f32
    operand
     id_
      f
    ,
    operand
     id_
      g
  ;
 line
  instruction_template
   instruction
    sin
    data_type
     built_in_type
      .f32
    operand
     id_
      sa
    ,
    operand
     id_
      a
  ;
 line
  instruction_template
   instruction
    cos
    data_type
     built_in_type
      .f32
    operand
     id_
      cb
    ,
    operand
     id_
      b
  ;
 line
  instruction_template
   guard
    @
    pred_reg
     id_
      p
   instruction
    lg2
    data_type
     built_in_type
      .f32
    operand
     id_
      q
    ,
    operand
     id_
      a
  ;
 line
  instruction_template
   instruction
    ex2
    data_type
     built_in_type
      .f32
    operand
     id_
      q
    ,
    operand
     id_
      r
  ;
 line
  instruction_template
   instruction
    rcp
    data_type
     built_in_type
      .f32
    operand
     id_
      ri
    ,
    operand
     id_
      r
  ;
 line
  instruction_template
   instruction
    sqrt
    data_type
     built_in_type
      .f32
    operand
     id_
      r
    ,
    operand
     id_
      x
  ;
 line
  instruction_template
   instruction
    rsqrt
    data_type
     built_in_type
      .f32
    operand
     id_
      isr
    ,
    operand
     id_
      x
  ;
 line
  instruction_template
   instruction
    trap
  ;
 line
  instruction_template
   guard
    @
    pred_reg
     id_
      p
   instruction
    trap
  ;
 line
  instruction_template
   instruction
    brkpt
  ;
 line
  instruction_template
   guard
    @
    pred_reg
     id_
      p
   instruction
    brkpt
  ;
 line
  instruction_template
   instruction
    mov
    data_type
     built_in_type
      .b16
    operand
     id_
      r0
    ,
    operand
     id_
      special_register
       %tid.0
  ;
 line
  instruction_template
   instruction
    cvt
    data_type
     built_in_type
      .u32
    data_type
     built_in_type
      .u16
    operand
     id_
      r2
    ,
    operand
     id_
      special_register
       %tid.2
  ;
 line
  instruction_template
   instruction
    mov
    data_type
     built_in_type
      .b16
    operand
     id_
      r0
    ,
    operand
     id_
      special_register
       %tid.0
  ;
 line
  instruction_template
   instruction
    mov
    data_type
     built_in_type
      .b16
    operand
     id_
      h1
    ,
    operand
     id_
      special_register
       %tid.1
  ;
 line
  instruction_template
   instruction
    mov
    data_type
     built_in_type
      .u16
    operand
     id_
      h2
    ,
    operand
     id_
      special_register
       %ntid.0
  ;
 line
  instruction_template
   instruction
    mad
    data_type
     built_in_type
      .u16
    operand
     id_
      r0
    ,
    operand
     id_
      h1
    ,
    operand
     id_
      h2
    ,
    operand
     id_
      r0
  ;
 line
  instruction_template
   instruction
    mov
    data_type
     built_in_type
      .u32
    operand
     id_
      %r1
    ,
    operand
     id_
      special_register
       %ctaid.1
  ;
 line
  instruction_template
   instruction
    mov
    data_type
     built_in_type
      .u32
    operand
     id_
      r1
    ,
    operand
     id_
      %nctaid
  ;
 line
  instruction_template
   instruction
    mov
    data_type
     built_in_type
      .u32
    operand
     id_
      r1
    ,
    operand
     id_
      special_register
       %gridid
  ;
 line
  instruction_template
   instruction
    mov
    data_type
     built_in_type
      .u32
    operand
     id_
      r1
    ,
    operand
     id_
      special_register
       %clock
  ;
 <EOF>
