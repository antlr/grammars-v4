prog
 line
  comment
   " Warren's date program.
 eol
  \n\n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       sys
      argument
       expression
        multiplyingExpression
         atom
          variable
           time
  comment
   " Get time in sixtieths since beginning of year
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        variable
         cll
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        variable
         div
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        216000
  comment
   " Divide by number of sixtieths in an hour.
 eol
  \n
 line
  comment
   " At this point MQ=number of hours since the
 eol
  \n
 line
  comment
   " beginning of the year, and AC is the number
 eol
  \n
 line
  comment
   " of sixtieths since the last o'clock.
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          variable
           sixtieths
  comment
   " Save AC and work on the hours & days
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lacq
  comment
   " Move the number of hours into the AC
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       idiv
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        24
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          variable
           hours
  comment
   " Save the remainder as the number of hours 
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lacq
  comment
   " The quotient is the number of days so far this year
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          variable
           dayinyear
 eol
  \n
 eol
  \n
 line
  declarations
   declaration
    label
     1:
    declarationRight
     instruction
      opcode
       lmq
  comment
   " Copy current number of days into MQ before subtract
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       tad
      argument
       expression
        multiplyingExpression
         atom
          variable
           daysinmonth
      argument
       expression
        multiplyingExpression
         atom
          variable
           i
  comment
   " Subtract days in the month
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       sma
    declarationRight
     instruction
      opcode
       sza
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          2f
  comment
   " Result was >0, not this month
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          3f
 eol
  \n
 line
  declarations
   declaration
    label
     2:
    declarationRight
     instruction
      opcode
       isz
      argument
       expression
        multiplyingExpression
         atom
          variable
           curmonth
  comment
   " Not this month, so move up
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       isz
      argument
       expression
        multiplyingExpression
         atom
          variable
           daysinmonth
  comment
   " and try the next one
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          1b
 eol
  \n\n
 line
  declarations
   declaration
    label
     3:
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           dayinyear
  comment
   " Get the num days so far this year
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       idiv
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        7
  comment
   " Modulo 7 to get the day number in the week
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       tad
      argument
       expression
        multiplyingExpression
         atom
          variable
           dayptr
  comment
   " Add to the base day name pointer
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          variable
           dayptr
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           dayptr
      argument
       expression
        multiplyingExpression
         atom
          variable
           i
  comment
   " Save the base of this day name string
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          1f
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           d1
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       sys
      argument
       expression
        multiplyingExpression
         atom
          variable
           write
   ;
   declaration
    label
     1:
    declarationRight
     expression
      multiplyingExpression
       atom
        0
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        2
  comment
   " and print it out
 eol
  \n\n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           curmonth
      argument
       expression
        multiplyingExpression
         atom
          variable
           i
  comment
   " Get the pointer to the month name
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          1f
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           d1
  comment
   " Print out the month name
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       sys
      argument
       expression
        multiplyingExpression
         atom
          variable
           write
   ;
   declaration
    label
     1:
    declarationRight
     expression
      multiplyingExpression
       atom
        0
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        2
 eol
  \n\n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lacq
  comment
   " Get back the days in this month from MQ
 eol
  \n
 line
  comment
   " which we had at the jmp 3f way back
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       tad
      argument
       expression
        multiplyingExpression
         atom
          variable
           d1
  comment
   " and print them out +1
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jms
      argument
       expression
        multiplyingExpression
         atom
          variable
           decprnt
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        -
        atom
         2
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jms
      argument
       expression
        multiplyingExpression
         atom
          variable
           seventy
  comment
   " followed by " 1970 "
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           hours
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jms
      argument
       expression
        multiplyingExpression
         atom
          variable
           decprnt
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        -
        atom
         2
  comment
   " Print the number of hours
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jms
      argument
       expression
        multiplyingExpression
         atom
          variable
           colon
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           sixtieths
  comment
   " Now get the sixtieths back and divide by 60
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       idiv
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        60
  comment
   " to lose the sixtieths that we don't care about.
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lacq
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       idiv
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        60
  comment
   " Get the remainder as the number of seconds into AC
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          variable
           seconds
  comment
   " and save it
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lacq
  comment
   " Get the quotient as the number of minutes
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jms
      argument
       expression
        multiplyingExpression
         atom
          variable
           decprnt
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        -
        atom
         2
  comment
   " and print it
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jms
      argument
       expression
        multiplyingExpression
         atom
          variable
           colon
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           seconds
  comment
   " Finally print the seconds out
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jms
      argument
       expression
        multiplyingExpression
         atom
          variable
           decprnt
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        -
        atom
         2
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           d1
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       sys
      argument
       expression
        multiplyingExpression
         atom
          variable
           write
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        variable
         newline
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        1
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       sys
      argument
       expression
        multiplyingExpression
         atom
          variable
           exit
  comment
   " Boy, what an effort!
 eol
  \n\n
 line
  declarations
   declaration
    label
     decprnt:
    declarationRight
     expression
      multiplyingExpression
       atom
        0
  comment
   " Routine to print out a number in decimal
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          variable
           num
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           endptr
  comment
   " Point at the end of the buffer
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          variable
           dbufptr
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dzm
      argument
       expression
        multiplyingExpression
         atom
          variable
           count
  comment
   " and set no characters so far
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           num
 eol
  \n
 line
  declarations
   declaration
    label
     1:
    declarationRight
     expression
      multiplyingExpression
       atom
        variable
         cll
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       sza
  comment
   " Is there anything left in the number?
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          3f
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           o60
  comment
   " No, so put a space into the buffer
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          4f
 eol
  \n\n
 line
  declarations
   declaration
    label
     3:
    declarationRight
     instruction
      opcode
       idiv
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        10
  comment
   " Divide AC by 10
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       tad
      argument
       expression
        multiplyingExpression
         atom
          variable
           o60
  comment
   " Add ASCII '0'
 eol
  \n
 line
  declarations
   declaration
    label
     4:
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          variable
           dbufptr
      argument
       expression
        multiplyingExpression
         atom
          variable
           i
  comment
   " and save the character into the buffer
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        -
        atom
         1
  comment
   " Move pointer back a word
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       tad
      argument
       expression
        multiplyingExpression
         atom
          variable
           dbufptr
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          variable
           dbufptr
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       isz
      argument
       expression
        multiplyingExpression
         atom
          variable
           count
  comment
   " Bump up the count of characters
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lacq
  comment
   " and move the quotient into AC
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       isz
      argument
       expression
        multiplyingExpression
         atom
          variable
           decprnt
      argument
       expression
        multiplyingExpression
         atom
          variable
           i
  comment
   " Add 1 to the # digits the user wants
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          1b
  comment
   " Loop back for the next digit
 eol
  \n\n
 line
  declarations
   declaration
    label
     5:
    declarationRight
     instruction
      opcode
       isz
      argument
       expression
        multiplyingExpression
         atom
          variable
           dbufptr
  comment
   " Restore the pointer to the first digit
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           d1
  comment
   " Print as a string on stdout
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       sys
      argument
       expression
        multiplyingExpression
         atom
          variable
           write
   ;
   declaration
    label
     dbufptr:
    declarationRight
     expression
      multiplyingExpression
       atom
        variable
         dbufend
   ;
   declaration
    label
     count:
    declarationRight
     expression
      multiplyingExpression
       atom
        0
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       isz
      argument
       expression
        multiplyingExpression
         atom
          variable
           decprnt
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          variable
           decprnt
      argument
       expression
        multiplyingExpression
         atom
          variable
           i
  comment
   " and return from the routine
 eol
  \n\n\n
 line
  declarations
   declaration
    label
     colon:
    declarationRight
     expression
      multiplyingExpression
       atom
        0
  comment
   " Print out a colon
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           d1
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       sys
      argument
       expression
        multiplyingExpression
         atom
          variable
           write
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        variable
         colonstr
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        1
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          variable
           colon
      argument
       expression
        multiplyingExpression
         atom
          variable
           i
 eol
  \n
 eol
  \n
 line
  declarations
   declaration
    label
     seventy:
    declarationRight
     expression
      multiplyingExpression
       atom
        0
  comment
   " Print out " 1970 "
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           d1
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       sys
      argument
       expression
        multiplyingExpression
         atom
          variable
           write
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        variable
         seventystr
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        3
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          variable
           seventy
      argument
       expression
        multiplyingExpression
         atom
          variable
           i
 eol
  \n
 eol
  \n\n
 line
  comment
   " When doing the decimal conversion, we set aside 5 words
 eol
  \n
 line
  comment
   " to buffer the characters, and we write from the end
 eol
  \n
 line
  comment
   " backwards to the beginning of the buffer
 eol
  \n
 line
  declarations
   declaration
    label
     dbuf:
    declarationRight
     assignment
      symbol
       .
      =
      expression
       multiplyingExpression
        atom
         .
       +
       multiplyingExpression
        atom
         4
  comment
   " First 4 words in the buffer
 eol
  \n
 line
  declarations
   declaration
    label
     dbufend:
    declarationRight
     assignment
      symbol
       .
      =
      expression
       multiplyingExpression
        atom
         .
       +
       multiplyingExpression
        atom
         1
  comment
   " and the last word
 eol
  \n
 line
  declarations
   declaration
    label
     endptr:
    declarationRight
     expression
      multiplyingExpression
       atom
        variable
         dbufend
 eol
  \n\n
 line
  declarations
   declaration
    label
     d1:
    declarationRight
     expression
      multiplyingExpression
       atom
        1
  comment
   " File descriptor 1 = stdout
 eol
  \n
 line
  declarations
   declaration
    label
     d10:
    declarationRight
     expression
      multiplyingExpression
       atom
        10
  comment
   " Divide by 10
 eol
  \n
 line
  declarations
   declaration
    label
     o60:
    declarationRight
     expression
      multiplyingExpression
       atom
        060
  comment
   " ASCII space
 eol
  \n
 line
  declarations
   declaration
    label
     num:
    declarationRight
     expression
      multiplyingExpression
       atom
        0
  comment
   " Argument to the decimal routine, temp storage
 eol
  \n
 line
  declarations
   declaration
    label
     colonstr:
    declarationRight
     expression
      multiplyingExpression
       atom
        072
  comment
   " ASCII colon character
 eol
  \n
 line
  declarations
   declaration
    label
     seventystr:
    declarationRight
     expression
      multiplyingExpression
       atom
        040061
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        string
         <97
         >
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        string
         <0
         040
 eol
  \n
 line
  declarations
   declaration
    label
     newline:
    declarationRight
     expression
      multiplyingExpression
       atom
        012
  comment
   " ASCII newline
 eol
  \n\n
 line
  declarations
   declaration
    label
     sixtieths:
    declarationRight
     expression
      multiplyingExpression
       atom
        0
  comment
   " Storage for the date and time components
 eol
  \n
 line
  declarations
   declaration
    label
     seconds:
    declarationRight
     expression
      multiplyingExpression
       atom
        0
 eol
  \n
 line
  declarations
   declaration
    label
     minutes:
    declarationRight
     expression
      multiplyingExpression
       atom
        0
 eol
  \n
 line
  declarations
   declaration
    label
     hours:
    declarationRight
     expression
      multiplyingExpression
       atom
        0
 eol
  \n
 line
  declarations
   declaration
    label
     dayinyear:
    declarationRight
     expression
      multiplyingExpression
       atom
        0
 eol
  \n\n
 line
  comment
   " Array of month names pointers
 eol
  \n
 line
  comment
   " plus a pointer to the base.
 eol
  \n
 line
  declarations
   declaration
    label
     curmonth:
    declarationRight
     expression
      multiplyingExpression
       atom
        variable
         montharray
 eol
  \n
 line
  declarations
   declaration
    label
     montharray:
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        variable
         jan
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        variable
         feb
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        variable
         mar
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        variable
         apr
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        variable
         may
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        variable
         jun
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        variable
         jul
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        variable
         aug
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        variable
         sep
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        variable
         oct
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        variable
         nov
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        variable
         dec
 eol
  \n\n
 line
  declarations
   declaration
    label
     jan:
    declarationRight
     expression
      multiplyingExpression
       atom
        string
         <Ja
         >
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        string
         <n
         040
 eol
  \n
 line
  declarations
   declaration
    label
     feb:
    declarationRight
     expression
      multiplyingExpression
       atom
        string
         <Fe
         >
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        string
         <b
         040
 eol
  \n
 line
  declarations
   declaration
    label
     mar:
    declarationRight
     expression
      multiplyingExpression
       atom
        string
         <Ma
         >
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        string
         <r
         040
 eol
  \n
 line
  declarations
   declaration
    label
     apr:
    declarationRight
     expression
      multiplyingExpression
       atom
        string
         <Ap
         >
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        string
         <r
         040
 eol
  \n
 line
  declarations
   declaration
    label
     may:
    declarationRight
     expression
      multiplyingExpression
       atom
        string
         <Ma
         >
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        string
         <y
         040
 eol
  \n
 line
  declarations
   declaration
    label
     jun:
    declarationRight
     expression
      multiplyingExpression
       atom
        string
         <Ju
         >
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        string
         <n
         040
 eol
  \n
 line
  declarations
   declaration
    label
     jul:
    declarationRight
     expression
      multiplyingExpression
       atom
        string
         <Ju
         >
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        string
         <l
         040
 eol
  \n
 line
  declarations
   declaration
    label
     aug:
    declarationRight
     expression
      multiplyingExpression
       atom
        string
         <Au
         >
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        string
         <g
         040
 eol
  \n
 line
  declarations
   declaration
    label
     sep:
    declarationRight
     expression
      multiplyingExpression
       atom
        string
         <Se
         >
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        string
         <p
         040
 eol
  \n
 line
  declarations
   declaration
    label
     oct:
    declarationRight
     expression
      multiplyingExpression
       atom
        string
         <Oc
         >
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        string
         <t
         040
 eol
  \n
 line
  declarations
   declaration
    label
     nov:
    declarationRight
     expression
      multiplyingExpression
       atom
        string
         <No
         >
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        string
         <v
         040
 eol
  \n
 line
  declarations
   declaration
    label
     dec:
    declarationRight
     expression
      multiplyingExpression
       atom
        string
         <De
         >
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        string
         <c
         040
 eol
  \n\n
 line
  comment
   " Array of days in each month
 eol
  \n
 line
  comment
   " plus a pointer to the base.
 eol
  \n
 line
  declarations
   declaration
    label
     daysinmonth:
    declarationRight
     expression
      multiplyingExpression
       atom
        variable
         dayarray
 eol
  \n
 line
  declarations
   declaration
    label
     dayarray:
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        -
        atom
         31
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        -
        atom
         29
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        -
        atom
         31
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        -
        atom
         30
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        -
        atom
         31
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        -
        atom
         30
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        -
        atom
         31
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        -
        atom
         31
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        -
        atom
         30
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        -
        atom
         31
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        -
        atom
         30
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        -
        atom
         31
 eol
  \n\n
 line
  comment
   " Array of day strings
 eol
  \n
 line
  comment
   " and pointer to the base
 eol
  \n
 line
  declarations
   declaration
    label
     dayptr:
    declarationRight
     expression
      multiplyingExpression
       atom
        variable
         daylist
 eol
  \n
 line
  declarations
   declaration
    label
     daylist:
    declarationRight
     expression
      multiplyingExpression
       atom
        variable
         thu
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        variable
         fri
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        variable
         sat
  comment
   " Jan 1 1970 is a Thursday
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        variable
         sun
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        variable
         mon
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        variable
         tue
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        variable
         wed
 eol
  \n\n
 line
  declarations
   declaration
    label
     sun:
    declarationRight
     expression
      multiplyingExpression
       atom
        string
         <Su
         >
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        string
         <n
         040
 eol
  \n
 line
  declarations
   declaration
    label
     mon:
    declarationRight
     expression
      multiplyingExpression
       atom
        string
         <Mo
         >
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        string
         <n
         040
 eol
  \n
 line
  declarations
   declaration
    label
     tue:
    declarationRight
     expression
      multiplyingExpression
       atom
        string
         <Tu
         >
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        string
         <e
         040
 eol
  \n
 line
  declarations
   declaration
    label
     wed:
    declarationRight
     expression
      multiplyingExpression
       atom
        string
         <We
         >
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        string
         <d
         040
 eol
  \n
 line
  declarations
   declaration
    label
     thu:
    declarationRight
     expression
      multiplyingExpression
       atom
        string
         <Th
         >
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        string
         <u
         040
 eol
  \n
 line
  declarations
   declaration
    label
     fri:
    declarationRight
     expression
      multiplyingExpression
       atom
        string
         <Fr
         >
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        string
         <i
         040
 eol
  \n
 line
  declarations
   declaration
    label
     sat:
    declarationRight
     expression
      multiplyingExpression
       atom
        string
         <Sa
         >
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        string
         <t
         040
 eol
  \n
 <EOF>
