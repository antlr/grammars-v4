prog
 line
  comment
   " Warren's cat program: cat [arg1 arg2 ...]
 eol
  \n\n
 line
  declarations
   declaration
    label
     main:
 eol
  \n
 line
  comment
   " Load the pointer pointer in 017777 to see if we have any arguments
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          017777
      argument
       expression
        multiplyingExpression
         atom
          variable
           i
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       sad
      argument
       expression
        multiplyingExpression
         atom
          variable
           d4
  comment
   " Skip if we have more than four argument words
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          variable
           stdinout
  comment
   " Only four argument words, so no arguments
 eol
  \n\n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          017777
  comment
   " Move five words past the argument word count
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       tad
      argument
       expression
        multiplyingExpression
         atom
          variable
           d1
  comment
   " so that AC points at the first argument
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       tad
      argument
       expression
        multiplyingExpression
         atom
          variable
           d4
 eol
  \n\n
 line
  comment
   " This section opens files and copies their contents to standard output
 eol
  \n
 line
  declarations
   declaration
    label
     catfiles:
 eol
  \n
 line
  comment
   " We start with AC pointing to an argument. Save it at the "name" label
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          variable
           name
 eol
  \n\n
 line
  comment
   " Open the file and get the fd into AC
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       sys
      argument
       expression
        multiplyingExpression
         atom
          variable
           open
   ;
   declaration
    label
     name:
    declarationRight
     expression
      multiplyingExpression
       atom
        0
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        0
   ;
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        variable
         spa
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          variable
           badfile
  comment
   " Negative fd, exit with an error message
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          variable
           fd
  comment
   " Save the file descriptor
 eol
  \n\n
 line
  declarations
   declaration
    label
     fileloop:
 eol
  \n
 line
  comment
   " Read 64 words into the buffer from the input file
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           fd
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       sys
      argument
       expression
        multiplyingExpression
         atom
          variable
           read
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        variable
         buf
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        64
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        variable
         spa
  comment
   " Skip if result was >= 0
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          variable
           error
  comment
   " Result was -ve, so error result
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       sna
  comment
   " Skip if result was >0
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          variable
           fileend
  comment
   " Result was zero, so nothing left to read
 eol
  \n\n
 line
  comment
   " Save the count of words read in
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          1f
 eol
  \n\n
 line
  comment
   " Write five words from the buffer to stdout
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           d1
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       sys
      argument
       expression
        multiplyingExpression
         atom
          variable
           write
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        variable
         buf
   ;
   declaration
    label
     1:
    declarationRight
     expression
      multiplyingExpression
       atom
        0
 eol
  \n\n
 line
  comment
   " and loop back for more words to read
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          variable
           fileloop
 eol
  \n\n
 line
  declarations
   declaration
    label
     fileend:
 eol
  \n
 line
  comment
   " Close the open file descriptor
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           fd
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       sys
      argument
       expression
        multiplyingExpression
         atom
          variable
           close
 eol
  \n\n
 line
  comment
   " Subtract 4 from the count of argument words
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        -
        atom
         4
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       tad
      argument
       expression
        multiplyingExpression
         atom
          017777
      argument
       expression
        multiplyingExpression
         atom
          variable
           i
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          017777
      argument
       expression
        multiplyingExpression
         atom
          variable
           i
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       sad
      argument
       expression
        multiplyingExpression
         atom
          variable
           d4
  comment
   " Is the value 4, i.e. no args left?
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          variable
           end
  comment
   " Yes, so exit
 eol
  \n\n
 line
  comment
   " Still an argument, so move up to the next filename argument
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           name
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       tad
      argument
       expression
        multiplyingExpression
         atom
          variable
           d4
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          variable
           name
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          variable
           catfiles
  comment
   " and loop back to cat this file
 eol
  \n\n
 line
  declarations
   declaration
    label
     end:
 eol
  \n
 line
  comment
   " exit
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       sys
      argument
       expression
        multiplyingExpression
         atom
          variable
           exit
 eol
  \n\n
 line
  comment
   " This section copies from standard input to standard output
 eol
  \n
 line
  comment
   " We cheat by setting the fd value to zero and storing 8
 eol
  \n
 line
  comment
   " into the argc word count, so that when the code hits
 eol
  \n
 line
  comment
   " fileend, the word count drops to 4 and we exit.
 eol
  \n
 line
  declarations
   declaration
    label
     stdinout:
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           d8
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          017777
      argument
       expression
        multiplyingExpression
         atom
          variable
           i
  comment
   " Save 8 into the word count
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           d0
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          variable
           fd
  comment
   " Save file descriptor 0
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          variable
           fileloop
 eol
  \n\n
 line
  comment
   " This code comes from the real cat.s
 eol
  \n
 line
  declarations
   declaration
    label
     badfile:
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           name
  comment
   " Get the pointer to the filename
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          1f
  comment
   " Store it in 1f below
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           d8
  comment
   " Load fd 8 which is stderr
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       sys
      argument
       expression
        multiplyingExpression
         atom
          variable
           write
   ;
   declaration
    label
     1:
    declarationRight
     expression
      multiplyingExpression
       atom
        0
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        4
  comment
   " Write the name, max 4 words
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           d8
  comment
   " Then write " ?\n"
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       sys
      argument
       expression
        multiplyingExpression
         atom
          variable
           write
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        1f
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        2
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       sys
      argument
       expression
        multiplyingExpression
         atom
          variable
           exit
  comment
   " and exit
 eol
  \n\n
 line
  declarations
   declaration
    label
     1:
    declarationRight
     expression
      multiplyingExpression
       atom
        040
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        077012
  comment
   " String literal: " ?\n"
 eol
  \n\n
 line
  declarations
   declaration
    label
     error:
 eol
  \n
 line
  comment
   " Print an "err read" string on stderr and exit
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           d8
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       sys
      argument
       expression
        multiplyingExpression
         atom
          variable
           write
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        variable
         noreadstr
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        5
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       sys
      argument
       expression
        multiplyingExpression
         atom
          variable
           exit
 eol
  \n\n
 line
  declarations
   declaration
    label
     noreadstr:
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        string
         <er
         >
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        string
         <r
         040
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        string
         <re
         >
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        string
         <ad
         >
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        012000
 eol
  \n\n
 line
  declarations
   declaration
    label
     fd:
    declarationRight
     expression
      multiplyingExpression
       atom
        0
  comment
   " fd of the open file
 eol
  \n
 line
  declarations
   declaration
    label
     d0:
    declarationRight
     expression
      multiplyingExpression
       atom
        0
  comment
   " Constants 0, 1, 4 and 8
 eol
  \n
 line
  declarations
   declaration
    label
     d1:
    declarationRight
     expression
      multiplyingExpression
       atom
        1
 eol
  \n
 line
  declarations
   declaration
    label
     d4:
    declarationRight
     expression
      multiplyingExpression
       atom
        4
 eol
  \n
 line
  declarations
   declaration
    label
     d8:
    declarationRight
     expression
      multiplyingExpression
       atom
        8
  comment
   " stderr seems to have fd 8
 eol
  \n
 line
  declarations
   declaration
    label
     minus4:
    declarationRight
     expression
      multiplyingExpression
       atom
        0777774
  comment
   " Constant -4
 eol
  \n\n
 line
  comment
   " Input buffer for read
 eol
  \n
 line
  declarations
   declaration
    label
     buf:
    declarationRight
     assignment
      symbol
       .
      =
      expression
       multiplyingExpression
        atom
         .
       +
       multiplyingExpression
        atom
         64
 eol
  \n
 <EOF>
