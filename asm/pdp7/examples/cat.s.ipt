prog
 line
  comment
   " cat: cat arg1 [arg2 ...]
 eol
  \n\n
 line
  comment
   " Load the pointer pointer in 017777 to see if we have any arguments
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          017777
      argument
       expression
        multiplyingExpression
         atom
          variable
           i
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       sad
      argument
       expression
        multiplyingExpression
         atom
          variable
           d4
  comment
   " Skip if we have more than four argument words
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          variable
           nofiles
  comment
   " Only four argument words, so no arguments
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          017777
  comment
   " Move five words past the argument word count
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       tad
      argument
       expression
        multiplyingExpression
         atom
          variable
           d1
  comment
   " so that AC points at the first argument
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       tad
      argument
       expression
        multiplyingExpression
         atom
          variable
           d4
  comment
   " and save the pointer in name
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          variable
           name
 eol
  \n\n
 line
  declarations
   declaration
    label
     loop:
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       sys
      argument
       expression
        multiplyingExpression
         atom
          variable
           open
   ;
   declaration
    label
     name:
    declarationRight
     expression
      multiplyingExpression
       atom
        0
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        0
  comment
   " Open file, get fd back
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        variable
         spa
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          variable
           badfile
  comment
   " Negative fd, exit with an error message
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          variable
           fi
  comment
   " Save file descriptor in fi
 eol
  \n\n
 line
  declarations
   declaration
    label
     1:
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jms
      argument
       expression
        multiplyingExpression
         atom
          variable
           getc
  comment
   " Get a character in AC
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       sad
      argument
       expression
        multiplyingExpression
         atom
          variable
           o4
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          1f
  comment
   " Break the loop when we get a ctrl-D
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jms
      argument
       expression
        multiplyingExpression
         atom
          variable
           putc
  comment
   " Write the character on stdout
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          1b
  comment
   " and loop back
 eol
  \n\n
 line
  declarations
   declaration
    label
     1:
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           fi
  comment
   " Close the file descriptor in fi
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       sys
      argument
       expression
        multiplyingExpression
         atom
          variable
           close
 eol
  \n\n
 line
  declarations
   declaration
    label
     loop1:
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        -
        atom
         4
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       tad
      argument
       expression
        multiplyingExpression
         atom
          017777
      argument
       expression
        multiplyingExpression
         atom
          variable
           i
  comment
   " Subtract 4 from the count of argument words
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          017777
      argument
       expression
        multiplyingExpression
         atom
          variable
           i
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       sad
      argument
       expression
        multiplyingExpression
         atom
          variable
           d4
  comment
   " Is the value 4, i.e. no args left?
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          variable
           done
  comment
   " Yes, so exit
 eol
  \n\n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           name
  comment
   " Still an argument, so move up
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       tad
      argument
       expression
        multiplyingExpression
         atom
          variable
           d4
  comment
   " to the next filename argument
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          variable
           name
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          variable
           loop
  comment
   " and loop back to cat this file
 eol
  \n\n
 line
  declarations
   declaration
    label
     badfile:
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           name
  comment
   " Get the pointer to the filename
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          1f
  comment
   " Store it in 1f below
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           d1
  comment
   " Load fd 1 which is stdout
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       sys
      argument
       expression
        multiplyingExpression
         atom
          variable
           write
   ;
   declaration
    label
     1:
    declarationRight
     expression
      multiplyingExpression
       atom
        0
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        4
  comment
   " Write the four words of the filename
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           d1
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       sys
      argument
       expression
        multiplyingExpression
         atom
          variable
           write
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        1f
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        2
  comment
   " and then write " ?\n"
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          variable
           loop1
  comment
   " Now try doing the next argument
 eol
  \n\n
 line
  declarations
   declaration
    label
     1:
    declarationRight
     expression
      multiplyingExpression
       atom
        040
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        077012
  comment
   " String literal: " ?\n"
 eol
  \n\n
 line
  declarations
   declaration
    label
     nofiles:
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           d1
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       sys
      argument
       expression
        multiplyingExpression
         atom
          variable
           write
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        1f
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        5
  comment
   " Write "No files\n" to stderr
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       sys
      argument
       expression
        multiplyingExpression
         atom
          variable
           exit
  comment
   " and exit
 eol
  \n\n
 line
  declarations
   declaration
    label
     1:
    declarationRight
     expression
      multiplyingExpression
       atom
        string
         <no
         >
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        040
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        string
         <fi
         >
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        string
         <le
         >
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        string
         <s
         012
 eol
  \n\n
 line
  declarations
   declaration
    label
     done:
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           noc
  comment
   " Is the number of characters left zero?
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       sna
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       sys
      argument
       expression
        multiplyingExpression
         atom
          variable
           exit
  comment
   " Yes, exit
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       and
      argument
       expression
        multiplyingExpression
         atom
          variable
           d1
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       sna
      argument
       expression
        multiplyingExpression
         atom
          variable
           cla
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          1f
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jms
      argument
       expression
        multiplyingExpression
         atom
          variable
           putc
  comment
   " Store the character in the buffer
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          variable
           done
  comment
   " and loop back
 eol
  \n
 line
  declarations
   declaration
    label
     1:
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           noc
  comment
   " Get the number of characters in the buffer
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       rcr
  comment
   " Divide by two to convert to words
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          1f
  comment
   " Save in the write's word count below
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           fo
  comment
   " Load fd 1, stdout
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       sys
      argument
       expression
        multiplyingExpression
         atom
          variable
           write
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        variable
         iopt
      +
      multiplyingExpression
       atom
        1
   ;
   declaration
    label
     1:
    declarationRight
     expression
      multiplyingExpression
       atom
        ..
  comment
   " Write the leftover buffer and exit
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       sys
      argument
       expression
        multiplyingExpression
         atom
          variable
           exit
 eol
  \n\n
 line
  declarations
   declaration
    label
     getc:
    declarationRight
     expression
      multiplyingExpression
       atom
        0
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           ipt
  comment
   " Load the pointer to the next word in the buffer
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       sad
      argument
       expression
        multiplyingExpression
         atom
          variable
           eipt
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          1f
  comment
   " We've reached the end of the buffer, so read more
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          2f
  comment
   " Save the pointer
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       add
      argument
       expression
        multiplyingExpression
         atom
          variable
           o400000
  comment
   " Flip the msb and save into ipt
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          variable
           ipt
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       ral
  comment
   " Move the msb into the link register
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          2f
      argument
       expression
        multiplyingExpression
         atom
          variable
           i
  comment
   " Load the word from the buffer
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       szl
  comment
   " Skip if this is the second character in the word
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lrss
      argument
       expression
        multiplyingExpression
         atom
          9
  comment
   " It's the first char, shift down the top character
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       and
      argument
       expression
        multiplyingExpression
         atom
          variable
           o177
  comment
   " Keep the lowest 7 bits
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       sna
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          variable
           getc
        +
        multiplyingExpression
         atom
          1
  comment
   " Skip a NUL characters and read another one
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          variable
           getc
      argument
       expression
        multiplyingExpression
         atom
          variable
           i
  comment
   " Return the character from the subroutine
 eol
  \n
 line
  declarations
   declaration
    label
     1:
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           fi
  comment
   " Buffer is empty, read another 64 characters
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       sys
      argument
       expression
        multiplyingExpression
         atom
          variable
           read
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        variable
         iipt
      +
      multiplyingExpression
       atom
        1
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        64
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       sna
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          1f
  comment
   " No characters were read in
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       tad
      argument
       expression
        multiplyingExpression
         atom
          variable
           iipt
  comment
   " Add the word count to the base of the buffer
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          variable
           eipt
  comment
   " and store in the end buffer pointer
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           iipt
  comment
   " Reset the ipt to the base of the buffer
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          variable
           ipt
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          variable
           getc
        +
        multiplyingExpression
         atom
          1
  comment
   " and loop back to get one character
 eol
  \n
 line
  declarations
   declaration
    label
     1:
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           o4
  comment
   " No character, return with ctrl-D
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          variable
           getc
      argument
       expression
        multiplyingExpression
         atom
          variable
           i
  comment
   " return from subroutine
 eol
  \n\n
 line
  declarations
   declaration
    label
     putc:
    declarationRight
     expression
      multiplyingExpression
       atom
        0
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       and
      argument
       expression
        multiplyingExpression
         atom
          variable
           o177
  comment
   " Keep the lowest 7 bits and save into 2f+1
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          2f
        +
        multiplyingExpression
         atom
          1
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           opt
  comment
   " Save the pointer to the empty buffer
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          2f
  comment
   " position to 2f
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       add
      argument
       expression
        multiplyingExpression
         atom
          variable
           o400000
  comment
   " Flip the msb and save back into opt
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          variable
           opt
  comment
   " This also has the effect of incrementing
 eol
  \n
 line
  comment
   " the opt pointer every second addition!
 eol
  \n\n
 line
  declarations
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        variable
         spa
  comment
   " If the bit was set, we already have one
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          1f
  comment
   " character at 2f+1. If no previous character,
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          2f
      argument
       expression
        multiplyingExpression
         atom
          variable
           i
  comment
   " merge the old and new character together
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       xor
      argument
       expression
        multiplyingExpression
         atom
          2f
        +
        multiplyingExpression
         atom
          1
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          3f
  comment
   " and go to the "save it in buffer" code
 eol
  \n
 line
  declarations
   declaration
    label
     1:
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          2f
        +
        multiplyingExpression
         atom
          1
  comment
   " Move the character up into the top half
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       alss
      argument
       expression
        multiplyingExpression
         atom
          9
 eol
  \n
 line
  declarations
   declaration
    label
     3:
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          2f
      argument
       expression
        multiplyingExpression
         atom
          variable
           i
  comment
   " Save the word into the buffer
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       isz
      argument
       expression
        multiplyingExpression
         atom
          variable
           noc
  comment
   " Add 1 to the char count, never skipping
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           noc
  comment
   " Have we reached 128 characters, 64 words?
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       sad
      argument
       expression
        multiplyingExpression
         atom
          variable
           d128
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       skp
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          variable
           putc
      argument
       expression
        multiplyingExpression
         atom
          variable
           i
  comment
   " No, so return (more room still in the buffer)
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           fo
  comment
   " Load fd1 (i.e stdout)
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       sys
      argument
       expression
        multiplyingExpression
         atom
          variable
           write
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        variable
         iopt
      +
      multiplyingExpression
       atom
        1
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        64
  comment
   " and write out the 64 words in the buffer
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           iopt
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          variable
           opt
  comment
   " Set opt pointing back to base of buffer
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dzm
      argument
       expression
        multiplyingExpression
         atom
          variable
           noc
  comment
   " Set the number of chars in the buffer to 0
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          variable
           putc
      argument
       expression
        multiplyingExpression
         atom
          variable
           i
  comment
   " and return
 eol
  \n\n
 line
  declarations
   declaration
    label
     2:
    declarationRight
     expression
      multiplyingExpression
       atom
        0
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        0
  comment
   " Current input and output word pointers
 eol
  \n
 line
  declarations
   declaration
    label
     ipt:
    declarationRight
     expression
      multiplyingExpression
       atom
        0
  comment
   " Current input buffer base
 eol
  \n
 line
  declarations
   declaration
    label
     eipt:
    declarationRight
     expression
      multiplyingExpression
       atom
        0
  comment
   " Pointer to end of data read in input buffer
 eol
  \n
 line
  declarations
   declaration
    label
     iipt:
    declarationRight
     expression
      multiplyingExpression
       atom
        .
      +
      multiplyingExpression
       atom
        1
   ;
   declaration
    declarationRight
     assignment
      symbol
       .
      =
      expression
       multiplyingExpression
        atom
         .
       +
       multiplyingExpression
        atom
         64
  comment
   " 64 word input buffer and pointer to it
 eol
  \n
 line
  declarations
   declaration
    label
     fi:
    declarationRight
     expression
      multiplyingExpression
       atom
        0
  comment
   " Input file descriptor
 eol
  \n
 line
  declarations
   declaration
    label
     opt:
    declarationRight
     expression
      multiplyingExpression
       atom
        .
      +
      multiplyingExpression
       atom
        2
  comment
   " Current output buffer base
 eol
  \n
 line
  declarations
   declaration
    label
     iopt:
    declarationRight
     expression
      multiplyingExpression
       atom
        .
      +
      multiplyingExpression
       atom
        1
   ;
   declaration
    declarationRight
     assignment
      symbol
       .
      =
      expression
       multiplyingExpression
        atom
         .
       +
       multiplyingExpression
        atom
         64
  comment
   " 64 word output buffer and pointer to it
 eol
  \n
 line
  declarations
   declaration
    label
     noc:
    declarationRight
     expression
      multiplyingExpression
       atom
        0
  comment
   " Number of output characters
 eol
  \n
 line
  declarations
   declaration
    label
     fo:
    declarationRight
     expression
      multiplyingExpression
       atom
        1
  comment
   " Output file descriptor, fd 1 is stdout
 eol
  \n\n
 line
  declarations
   declaration
    label
     d1:
    declarationRight
     expression
      multiplyingExpression
       atom
        1
  comment
   " Octal and decimal constants
 eol
  \n
 line
  declarations
   declaration
    label
     o4:
    label
     d4:
    declarationRight
     expression
      multiplyingExpression
       atom
        4
 eol
  \n
 line
  declarations
   declaration
    label
     d8:
    declarationRight
     expression
      multiplyingExpression
       atom
        8
 eol
  \n
 line
  declarations
   declaration
    label
     o400000:
    declarationRight
     expression
      multiplyingExpression
       atom
        0400000
  comment
   " Msb toggle bit
 eol
  \n
 line
  declarations
   declaration
    label
     o177:
    declarationRight
     expression
      multiplyingExpression
       atom
        0177
  comment
   " ASCII mask
 eol
  \n
 line
  declarations
   declaration
    label
     d128:
    declarationRight
     expression
      multiplyingExpression
       atom
        128
  comment
   " 128 words in the output buffer
 eol
  \n
 <EOF>
