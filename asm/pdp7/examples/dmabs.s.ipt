prog
 line
  comment
   " dmabs
 eol
  \n\n
 line
  comment
   " takes a list of files on command line and punches out each
 eol
  \n
 line
  comment
   " to paper tape with a "hardware read-in" (HRI) bootstrap
 eol
  \n
 line
  comment
   " program in front of them.
 eol
  \n\n
 line
  comment
   " Bob Supnik says:
 eol
  \n
 line
  comment
   " The PDP-7/9/15 hardware read-in used a simple format where
 eol
  \n
 line
  comment
   " the start address was specified in the address switches, and
 eol
  \n
 line
  comment
   " then 18b words were deposited sequentially in memory. Binary
 eol
  \n
 line
  comment
   " format was distinguished by having the high order bit (0200)
 eol
  \n
 line
  comment
   " in each 8b tape frame set, so that leader (all 0s) could be
 eol
  \n
 line
  comment
   " ignored. A frame with bit 1 set (0100) indicated end of
 eol
  \n
 line
  comment
   " load; the last word was supposed to be either a JMP (to
 eol
  \n
 line
  comment
   " start the program running) or a HLT.
 eol
  \n\n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           o17
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       sys
      argument
       expression
        multiplyingExpression
         atom
          variable
           creat
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        variable
         punout
  comment
   " open paper tape punch
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        variable
         spa
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       sys
      argument
       expression
        multiplyingExpression
         atom
          variable
           save
  comment
   " open failed: dump core
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          variable
           fo
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          017777
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       tad
      argument
       expression
        multiplyingExpression
         atom
          variable
           d1
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          variable
           name
  comment
   " get pointer to argv[0]
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jms
      argument
       expression
        multiplyingExpression
         atom
          variable
           space
  comment
   " punch 10 inch leader
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        100
 eol
  \n\n
 line
  declarations
   declaration
    label
     loop:
  comment
   " loop for input files
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dzm
      argument
       expression
        multiplyingExpression
         atom
          variable
           oldsum
  comment
   " clear checksum
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           initcmd
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          variable
           comand
  comment
   " reset command to "dac"
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           i
      argument
       expression
        multiplyingExpression
         atom
          017777
  comment
   " get arg count
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       sad
      argument
       expression
        multiplyingExpression
         atom
          variable
           d4
  comment
   " anything left?
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          variable
           stop
  comment
   "  no: stop
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       tad
      argument
       expression
        multiplyingExpression
         atom
          variable
           dm4
  comment
   " decrement argc by 4
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          variable
           i
      argument
       expression
        multiplyingExpression
         atom
          017777
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           name
  comment
   " advance arg pointer
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       tad
      argument
       expression
        multiplyingExpression
         atom
          variable
           d4
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          variable
           name
 eol
  \n\n
 line
  declarations
   declaration
    label
     dump1:
  comment
   " (label not used)
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           comand
  comment
   " get command word
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       xor
      argument
       expression
        multiplyingExpression
         atom
          variable
           dactra
  comment
   " transmute dac to jmp
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          variable
           tracmd
 eol
  \n\n
 line
  declarations
   declaration
    label
     dump2:
  comment
   " (label not used)
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       sys
      argument
       expression
        multiplyingExpression
         atom
          variable
           open
   ;
   declaration
    label
     name:
    declarationRight
     expression
      multiplyingExpression
       atom
        0
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        0
  comment
   " open file
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        variable
         spa
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          variable
           opnerr
  comment
   " open failed
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          variable
           fi
  comment
   " save input fd
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        -
        atom
         variable
          bootsiz
  comment
   " get length of bootstrap
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          variable
           c1
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       law
      argument
       expression
        multiplyingExpression
         atom
          variable
           boot
        -
        multiplyingExpression
         atom
          1
  comment
   " get pointer to boostrap in i8
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          8
 eol
  \n
 line
  declarations
   declaration
    label
     1:
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           i
      argument
       expression
        multiplyingExpression
         atom
          8
  comment
   " fetch word from bootstrap
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jms
      argument
       expression
        multiplyingExpression
         atom
          variable
           put
  comment
   " write to tape
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       isz
      argument
       expression
        multiplyingExpression
         atom
          variable
           c1
  comment
   " done?
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          1b
  comment
   "  no: loop
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           bootcmd
  comment
   " write "jmp" instruction to tape
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lrs
      argument
       expression
        multiplyingExpression
         atom
          12
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jms
      argument
       expression
        multiplyingExpression
         atom
          variable
           put1
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           bootcmd
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lrs
      argument
       expression
        multiplyingExpression
         atom
          6
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jms
      argument
       expression
        multiplyingExpression
         atom
          variable
           put1
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           bootcmd
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       and
      argument
       expression
        multiplyingExpression
         atom
          variable
           o77
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       xor
      argument
       expression
        multiplyingExpression
         atom
          variable
           o300
  comment
   " final frame of jmp word: 0100 set
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jms
      argument
       expression
        multiplyingExpression
         atom
          variable
           put2
 eol
  \n\n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jms
      argument
       expression
        multiplyingExpression
         atom
          variable
           space
  comment
   " punch three empty frames
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        3
 eol
  \n\n
 line
  declarations
   declaration
    label
     dump3:
  comment
   " block loop
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        -
        atom
         1
  comment
   " reset i8 to buffer
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       tad
      argument
       expression
        multiplyingExpression
         atom
          variable
           bufp
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          8
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        -
        atom
         64
  comment
   " get count
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          variable
           c1
 eol
  \n
 line
  declarations
   declaration
    label
     1:
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dzm
      argument
       expression
        multiplyingExpression
         atom
          variable
           i
      argument
       expression
        multiplyingExpression
         atom
          8
  comment
   " loop zeroing buffer
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       isz
      argument
       expression
        multiplyingExpression
         atom
          variable
           c1
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          1b
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           fi
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       sys
      argument
       expression
        multiplyingExpression
         atom
          variable
           read
   ;
   declaration
    label
     bufp:
    declarationRight
     expression
      multiplyingExpression
       atom
        variable
         buf
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        64
  comment
   " read block from input file
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       sna
  comment
   " got some?
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          variable
           done
  comment
   "  done
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          variable
           count
  comment
   " save count
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        -
        atom
         1
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       tad
      argument
       expression
        multiplyingExpression
         atom
          variable
           bufp
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          8
  comment
   " point i8 to input buffer
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        -
        atom
         64
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          variable
           c1
  comment
   " reset count
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        variable
         cla
 eol
  \n
 line
  declarations
   declaration
    label
     1:
  comment
   " loop for 1's complement sum of buffer
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       add
      argument
       expression
        multiplyingExpression
         atom
          variable
           i
      argument
       expression
        multiplyingExpression
         atom
          8
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       isz
      argument
       expression
        multiplyingExpression
         atom
          variable
           c1
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          1b
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       sna
  comment
   " sum non-zero?
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          variable
           dump4
  comment
   "  no: is zero: skip this block
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          variable
           newsum
  comment
   " save as new sum
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           comand
  comment
   " get command word
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jms
      argument
       expression
        multiplyingExpression
         atom
          variable
           put
  comment
   " write to tape
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           count
  comment
   " get positive count
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jms
      argument
       expression
        multiplyingExpression
         atom
          variable
           put
  comment
   " write to tape
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           oldsum
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       add
      argument
       expression
        multiplyingExpression
         atom
          variable
           comand
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       add
      argument
       expression
        multiplyingExpression
         atom
          variable
           count
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jms
      argument
       expression
        multiplyingExpression
         atom
          variable
           put
  comment
   " write oldsum+command+count
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           newsum
  comment
   " copy new sum to old sum
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          variable
           oldsum
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jms
      argument
       expression
        multiplyingExpression
         atom
          variable
           space
  comment
   " write three empty frame
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        3
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        -
        atom
         1
  comment
   " reset i8 to input buffer
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       tad
      argument
       expression
        multiplyingExpression
         atom
          variable
           bufp
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          8
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        -
        atom
         1
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       tad
      argument
       expression
        multiplyingExpression
         atom
          variable
           count
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       cma
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          variable
           c1
  comment
   " reset counter
 eol
  \n
 line
  declarations
   declaration
    label
     1:
  comment
   " loop writing block to tape
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           i
      argument
       expression
        multiplyingExpression
         atom
          8
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jms
      argument
       expression
        multiplyingExpression
         atom
          variable
           put
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       isz
      argument
       expression
        multiplyingExpression
         atom
          variable
           c1
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          1b
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jms
      argument
       expression
        multiplyingExpression
         atom
          variable
           space
  comment
   " follow with 1 inch trailer
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        10
 eol
  \n\n
 line
  declarations
   declaration
    label
     dump4:
  comment
   " end of block
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           comand
  comment
   " advance command word by count
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       tad
      argument
       expression
        multiplyingExpression
         atom
          variable
           count
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          variable
           comand
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          variable
           dump3
  comment
   " loop for another block
 eol
  \n\n
 line
  declarations
   declaration
    label
     done:
  comment
   " here at end of input file
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           tracmd
  comment
   " get transfer command (jmp)
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jms
      argument
       expression
        multiplyingExpression
         atom
          variable
           put
  comment
   " write to tape
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        variable
         cla
  comment
   " write a zero word
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jms
      argument
       expression
        multiplyingExpression
         atom
          variable
           put
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           oldsum
  comment
   " get checksum
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       add
      argument
       expression
        multiplyingExpression
         atom
          variable
           tracmd
  comment
   " add in jmp command word
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jms
      argument
       expression
        multiplyingExpression
         atom
          variable
           put
  comment
   " write to tape
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jms
      argument
       expression
        multiplyingExpression
         atom
          variable
           space
  comment
   " write two inch trailer
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        20
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           fi
  comment
   " close input file
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       sys
      argument
       expression
        multiplyingExpression
         atom
          variable
           close
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          variable
           loop
  comment
   " loop for another input file
 eol
  \n\n
 line
  declarations
   declaration
    label
     stop:
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        variable
         cla
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jms
      argument
       expression
        multiplyingExpression
         atom
          variable
           put
  comment
   " write a zero binary word to tape
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jms
      argument
       expression
        multiplyingExpression
         atom
          variable
           space
  comment
   " write 10 inch trailer
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        100
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       sys
      argument
       expression
        multiplyingExpression
         atom
          variable
           exit
 eol
  \n\n
 line
  declarations
   declaration
    label
     space:
    declarationRight
     expression
      multiplyingExpression
       atom
        0
  comment
   " punch empty frames (count after jms)
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        -
        atom
         1
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       tad
      argument
       expression
        multiplyingExpression
         atom
          variable
           i
      argument
       expression
        multiplyingExpression
         atom
          variable
           space
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       cma
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          variable
           c1
  comment
   " store negative count
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       isz
      argument
       expression
        multiplyingExpression
         atom
          variable
           space
  comment
   " skip count word
 eol
  \n
 line
  declarations
   declaration
    label
     1:
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           o400
  comment
   " defeat NUL removal
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jms
      argument
       expression
        multiplyingExpression
         atom
          variable
           put2
  comment
   " write one empty frame
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       isz
      argument
       expression
        multiplyingExpression
         atom
          variable
           c1
  comment
   " done?
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          1b
  comment
   "  no
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          variable
           i
      argument
       expression
        multiplyingExpression
         atom
          variable
           space
 eol
  \n\n
 line
  declarations
   declaration
    label
     put:
    declarationRight
     expression
      multiplyingExpression
       atom
        0
  comment
   " write a (binary) word (as three frames)
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          1f
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lrs
      argument
       expression
        multiplyingExpression
         atom
          12
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jms
      argument
       expression
        multiplyingExpression
         atom
          variable
           put1
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          1f
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lrs
      argument
       expression
        multiplyingExpression
         atom
          6
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jms
      argument
       expression
        multiplyingExpression
         atom
          variable
           put1
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          1f
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jms
      argument
       expression
        multiplyingExpression
         atom
          variable
           put1
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          variable
           i
      argument
       expression
        multiplyingExpression
         atom
          variable
           put
 eol
  \n
 line
  declarations
   declaration
    label
     1:
    declarationRight
     expression
      multiplyingExpression
       atom
        0
 eol
  \n\n
 line
  declarations
   declaration
    label
     put1:
    declarationRight
     expression
      multiplyingExpression
       atom
        0
  comment
   " write one frame of a binary word
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       and
      argument
       expression
        multiplyingExpression
         atom
          variable
           o77
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       xor
      argument
       expression
        multiplyingExpression
         atom
          variable
           o200
  comment
   " light the high bit
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jms
      argument
       expression
        multiplyingExpression
         atom
          variable
           put2
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          variable
           i
      argument
       expression
        multiplyingExpression
         atom
          variable
           put1
 eol
  \n\n
 line
  declarations
   declaration
    label
     put2:
    declarationRight
     expression
      multiplyingExpression
       atom
        0
  comment
   " write one frame to tape
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          1f
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           fo
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       sys
      argument
       expression
        multiplyingExpression
         atom
          variable
           write
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        1f
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        1
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          variable
           i
      argument
       expression
        multiplyingExpression
         atom
          variable
           put2
 eol
  \n
 line
  declarations
   declaration
    label
     1:
    declarationRight
     expression
      multiplyingExpression
       atom
        0
 eol
  \n\n
 line
  declarations
   declaration
    label
     boot:
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     assignment
      symbol
       variable
        org
      =
      expression
       multiplyingExpression
        atom
         017740
 eol
  \n
 line
  declarations
   declaration
    label
     2:
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jms
      argument
       expression
        multiplyingExpression
         atom
          variable
           get1
        -
        multiplyingExpression
         atom
          variable
           boot
        +
        multiplyingExpression
         atom
          variable
           org
  comment
   " get command word from tape
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          variable
           cmd
        -
        multiplyingExpression
         atom
          variable
           boot
        +
        multiplyingExpression
         atom
          variable
           org
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jms
      argument
       expression
        multiplyingExpression
         atom
          variable
           get1
        -
        multiplyingExpression
         atom
          variable
           boot
        +
        multiplyingExpression
         atom
          variable
           org
  comment
   " get count from tape
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       cma
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          variable
           cnt
        -
        multiplyingExpression
         atom
          variable
           boot
        +
        multiplyingExpression
         atom
          variable
           org
  comment
   " store complemented (incremented below)
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jms
      argument
       expression
        multiplyingExpression
         atom
          variable
           get2
        -
        multiplyingExpression
         atom
          variable
           boot
        +
        multiplyingExpression
         atom
          variable
           org
  comment
   " get checksum word
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       xor
      argument
       expression
        multiplyingExpression
         atom
          variable
           sum
        -
        multiplyingExpression
         atom
          variable
           boot
        +
        multiplyingExpression
         atom
          variable
           org
  comment
   " clear those bits in sum
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dzm
      argument
       expression
        multiplyingExpression
         atom
          variable
           sum
        -
        multiplyingExpression
         atom
          variable
           boot
        +
        multiplyingExpression
         atom
          variable
           org
  comment
   " clear out sum
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        variable
         cla
    declarationRight
     expression
      multiplyingExpression
       atom
        variable
         cll
    declarationRight
     instruction
      opcode
       sza
  comment
   " checksum match? & clear AC & LINK
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       hlt
  comment
   "  no: checksum mismatch
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       isz
      argument
       expression
        multiplyingExpression
         atom
          variable
           cnt
        -
        multiplyingExpression
         atom
          variable
           boot
        +
        multiplyingExpression
         atom
          variable
           org
  comment
   " yes: increment count (complete negate)
 eol
  \n
 line
  declarations
   declaration
    label
     1:
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jms
      argument
       expression
        multiplyingExpression
         atom
          variable
           get1
        -
        multiplyingExpression
         atom
          variable
           boot
        +
        multiplyingExpression
         atom
          variable
           org
  comment
   " get data word from tape
 eol
  \n
 line
  declarations
   declaration
    label
     cmd:
    declarationRight
     expression
      multiplyingExpression
       atom
        0
  comment
   " command word (read from tape)
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       isz
      argument
       expression
        multiplyingExpression
         atom
          variable
           cmd
        -
        multiplyingExpression
         atom
          variable
           boot
        +
        multiplyingExpression
         atom
          variable
           org
  comment
   " increment command instruction
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       isz
      argument
       expression
        multiplyingExpression
         atom
          variable
           cnt
        -
        multiplyingExpression
         atom
          variable
           boot
        +
        multiplyingExpression
         atom
          variable
           org
  comment
   " increment count
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          1b
        -
        multiplyingExpression
         atom
          variable
           boot
        +
        multiplyingExpression
         atom
          variable
           org
  comment
   "  not done, keep going
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          2b
        -
        multiplyingExpression
         atom
          variable
           boot
        +
        multiplyingExpression
         atom
          variable
           org
 eol
  \n
 line
  declarations
   declaration
    label
     get1:
    declarationRight
     expression
      multiplyingExpression
       atom
        0
  comment
   " get checksummed word from tape
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jms
      argument
       expression
        multiplyingExpression
         atom
          variable
           get2
        -
        multiplyingExpression
         atom
          variable
           boot
        +
        multiplyingExpression
         atom
          variable
           org
  comment
   " read a word
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          variable
           get2
        -
        multiplyingExpression
         atom
          variable
           boot
        +
        multiplyingExpression
         atom
          variable
           org
  comment
   " save (in get2 return addr word!)
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       add
      argument
       expression
        multiplyingExpression
         atom
          variable
           sum
        -
        multiplyingExpression
         atom
          variable
           boot
        +
        multiplyingExpression
         atom
          variable
           org
  comment
   " 1's complement sum
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          variable
           sum
        -
        multiplyingExpression
         atom
          variable
           boot
        +
        multiplyingExpression
         atom
          variable
           org
  comment
   " save sum
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           get2
        -
        multiplyingExpression
         atom
          variable
           boot
        +
        multiplyingExpression
         atom
          variable
           org
  comment
   " get word back
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          variable
           i
      argument
       expression
        multiplyingExpression
         atom
          variable
           get1
        -
        multiplyingExpression
         atom
          variable
           boot
        +
        multiplyingExpression
         atom
          variable
           org
  comment
   " return
 eol
  \n
 line
  declarations
   declaration
    label
     get2:
    declarationRight
     expression
      multiplyingExpression
       atom
        0
  comment
   " get unchecksummed word from tape
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        variable
         iot
    declarationRight
     expression
      multiplyingExpression
       atom
        0144
  comment
   " "rsb" ptr select binary mode
 eol
  \n
 line
  declarations
   declaration
    label
     1:
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        variable
         iot
    declarationRight
     expression
      multiplyingExpression
       atom
        0101
  comment
   " "rsf" ptr skip if flag set
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          1b
        -
        multiplyingExpression
         atom
          variable
           boot
        +
        multiplyingExpression
         atom
          variable
           org
  comment
   "  loop until ready
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        variable
         iot
    declarationRight
     expression
      multiplyingExpression
       atom
        0112
  comment
   " "rrb" ptr clear flag, or in read buffer
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          variable
           i
      argument
       expression
        multiplyingExpression
         atom
          variable
           get2
        -
        multiplyingExpression
         atom
          variable
           boot
        +
        multiplyingExpression
         atom
          variable
           org
 eol
  \n
 line
  declarations
   declaration
    label
     sum:
    declarationRight
     expression
      multiplyingExpression
       atom
        0
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     assignment
      symbol
       variable
        cnt
      =
      expression
       multiplyingExpression
        atom
         variable
          sum
       +
       multiplyingExpression
        atom
         1
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     assignment
      symbol
       variable
        bootsiz
      =
      expression
       multiplyingExpression
        atom
         .
       -
       multiplyingExpression
        atom
         variable
          boot
 eol
  \n
 line
  declarations
   declaration
    label
     bootcmd:
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          variable
           org
 eol
  \n\n
 line
  declarations
   declaration
    label
     opnerr:
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           name
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          1f
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           d1
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       sys
      argument
       expression
        multiplyingExpression
         atom
          variable
           write
   ;
   declaration
    label
     1:
    declarationRight
     expression
      multiplyingExpression
       atom
        0
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        4
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       lac
      argument
       expression
        multiplyingExpression
         atom
          variable
           d1
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       sys
      argument
       expression
        multiplyingExpression
         atom
          variable
           write
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        variable
         mes
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        2
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     instruction
      opcode
       jmp
      argument
       expression
        multiplyingExpression
         atom
          variable
           loop
 eol
  \n
 line
  declarations
   declaration
    label
     mes:
 eol
  \n
 line
  declarations
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        040
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        077012
  comment
   " space, ?, NL
 eol
  \n\n
 line
  declarations
   declaration
    label
     comand:
    declarationRight
     expression
      multiplyingExpression
       atom
        0
 eol
  \n
 line
  declarations
   declaration
    label
     tracmd:
    declarationRight
     expression
      multiplyingExpression
       atom
        0
 eol
  \n
 line
  declarations
   declaration
    label
     d1:
    declarationRight
     expression
      multiplyingExpression
       atom
        1
 eol
  \n
 line
  declarations
   declaration
    label
     o17777:
    declarationRight
     expression
      multiplyingExpression
       atom
        017777
  comment
   " unused?
 eol
  \n
 line
  declarations
   declaration
    label
     o77:
    declarationRight
     expression
      multiplyingExpression
       atom
        077
 eol
  \n
 line
  declarations
   declaration
    label
     o200:
    declarationRight
     expression
      multiplyingExpression
       atom
        0200
 eol
  \n
 line
  declarations
   declaration
    label
     o300:
    declarationRight
     expression
      multiplyingExpression
       atom
        0300
 eol
  \n
 line
  declarations
   declaration
    label
     d4:
    declarationRight
     expression
      multiplyingExpression
       atom
        4
 eol
  \n
 line
  declarations
   declaration
    label
     d64:
    declarationRight
     expression
      multiplyingExpression
       atom
        64
 eol
  \n
 line
  declarations
   declaration
    label
     dm4:
    declarationRight
     expression
      multiplyingExpression
       atom
        -
        atom
         4
 eol
  \n
 line
  declarations
   declaration
    label
     o400:
    declarationRight
     expression
      multiplyingExpression
       atom
        0400
 eol
  \n
 line
  declarations
   declaration
    label
     punout:
    declarationRight
     expression
      multiplyingExpression
       atom
        string
         <pp
         >
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        string
         <to
         >
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        string
         <ut
         >
   ;
   declaration
    declarationRight
     expression
      multiplyingExpression
       atom
        040040
 eol
  \n
 line
  declarations
   declaration
    label
     o17:
    declarationRight
     expression
      multiplyingExpression
       atom
        017
 eol
  \n\n
 line
  declarations
   declaration
    label
     fi:
    declarationRight
     expression
      multiplyingExpression
       atom
        0
 eol
  \n
 line
  declarations
   declaration
    label
     fo:
    declarationRight
     expression
      multiplyingExpression
       atom
        0
 eol
  \n
 line
  declarations
   declaration
    label
     count:
    declarationRight
     expression
      multiplyingExpression
       atom
        0
 eol
  \n
 line
  declarations
   declaration
    label
     oldsum:
    declarationRight
     expression
      multiplyingExpression
       atom
        0
 eol
  \n
 line
  declarations
   declaration
    label
     newsum:
    declarationRight
     expression
      multiplyingExpression
       atom
        0
 eol
  \n
 line
  declarations
   declaration
    label
     daccmd:
    declarationRight
     instruction
      opcode
       dac
 eol
  \n
 line
  declarations
   declaration
    label
     dactra:
    declarationRight
     instruction
      opcode
       dac
    declarationRight
     instruction
      opcode
       jmp
 eol
  \n
 line
  declarations
   declaration
    label
     initcmd:
    declarationRight
     instruction
      opcode
       dac
      argument
       expression
        multiplyingExpression
         atom
          0
 eol
  \n
 line
  declarations
   declaration
    label
     c1:
    declarationRight
     expression
      multiplyingExpression
       atom
        0
 eol
  \n
 line
  declarations
   declaration
    label
     buf:
 eol
  \n\n
 line
  declarations
   declaration
    declarationRight
     assignment
      symbol
       variable
        iot
      =
      expression
       multiplyingExpression
        atom
         0700000
 eol
  \n
 <EOF>
