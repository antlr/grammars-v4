program
 line
  \n
 line
  \n
 line
  \n
 line
  \n
 line
  \n\n
 line
  directive
   global
    global
   global_params
    name
     call1_64
  \n\n
 line
  directive
   extern
    extern
   extern_params
    name
     printf
  \n\n
 line
  directive
   section
    SECTION
   section_params
    name
     .data
  \n
 line
  label
   name
    fmt1
   :
  pseudoinstruction
   dx
    db
   value
    atom
     string
      "rdi=%ld, L[0]=%ld"
   ,
   value
    atom
     integer
      10
   ,
   value
    atom
     integer
      0
  \n
 line
  label
   name
    fmt2
   :
  pseudoinstruction
   dx
    db
   value
    atom
     string
      "rdi=%ld, L[1]=%ld"
   ,
   value
    atom
     integer
      10
   ,
   value
    atom
     integer
      0
  \n\n
 line
  directive
   section
    SECTION
   section_params
    name
     .bss
  \n
 line
  label
   name
    a
   :
  pseudoinstruction
   resx
    resq
   integer
    1
  \n\n
 line
  directive
   section
    SECTION
   section_params
    name
     .text
  \n\n
 line
  label
   name
    call1_64
   :
  \n
 line
  instruction
   opcode
    push
   operand
    register
     rbp
  \n
 line
  instruction
   opcode
    mov
   operand
    register
     rbp
   ,
   operand
    register
     rsp
  \n
 line
  instruction
   opcode
    push
   operand
    register
     rdx
  \n
 line
  instruction
   opcode
    push
   operand
    register
     rdi
  \n
 line
  instruction
   opcode
    push
   operand
    register
     rsi
  \n\n
 line
  instruction
   opcode
    mov
   operand
    register
     rax
   ,
   operand
    register
     rdi
  \n
 line
  instruction
   opcode
    mov
   operand
    [
    expression
     conditionalExpression
      booleanOrExpression
       booleanAndExpression
        inclusiveOrExpression
         exclusiveOrExpression
          andExpression
           equalityExpression
            relationalExpression
             shiftExpression
              additiveExpression
               multiplicativeExpression
                castExpression
                 name
                  a
    ]
   ,
   operand
    register
     rdi
  \n\n
 line
  instruction
   opcode
    mov
   operand
    register
     rdi
   ,
   operand
    name
     fmt1
  \n
 line
  instruction
   opcode
    mov
   operand
    register
     rsi
   ,
   operand
    register
     rax
  \n
 line
  instruction
   opcode
    mov
   operand
    register
     rdx
   ,
   operand
    [
    expression
     conditionalExpression
      booleanOrExpression
       booleanAndExpression
        inclusiveOrExpression
         exclusiveOrExpression
          andExpression
           equalityExpression
            relationalExpression
             shiftExpression
              additiveExpression
               multiplicativeExpression
                castExpression
                 register
                  rax
    ]
  \n
 line
  instruction
   opcode
    mov
   operand
    register
     rax
   ,
   operand
    integer
     0
  \n
 line
  instruction
   opcode
    call
   operand
    name
     printf
  \n\n
 line
  instruction
   opcode
    mov
   operand
    register
     rax
   ,
   operand
    [
    expression
     conditionalExpression
      booleanOrExpression
       booleanAndExpression
        inclusiveOrExpression
         exclusiveOrExpression
          andExpression
           equalityExpression
            relationalExpression
             shiftExpression
              additiveExpression
               multiplicativeExpression
                castExpression
                 name
                  a
    ]
  \n
 line
  instruction
   opcode
    mov
   operand
    register
     rdi
   ,
   operand
    name
     fmt2
  \n
 line
  instruction
   opcode
    mov
   operand
    register
     rsi
   ,
   operand
    register
     rax
  \n
 line
  instruction
   opcode
    mov
   operand
    register
     rdx
   ,
   operand
    [
    expression
     conditionalExpression
      booleanOrExpression
       booleanAndExpression
        inclusiveOrExpression
         exclusiveOrExpression
          andExpression
           equalityExpression
            relationalExpression
             shiftExpression
              additiveExpression
               multiplicativeExpression
                castExpression
                 register
                  rax
               +
               multiplicativeExpression
                castExpression
                 integer
                  8
    ]
  \n
 line
  instruction
   opcode
    mov
   operand
    register
     rax
   ,
   operand
    integer
     0
  \n
 line
  instruction
   opcode
    call
   operand
    name
     printf
  \n\n
 line
  instruction
   opcode
    mov
   operand
    register
     rax
   ,
   operand
    [
    expression
     conditionalExpression
      booleanOrExpression
       booleanAndExpression
        inclusiveOrExpression
         exclusiveOrExpression
          andExpression
           equalityExpression
            relationalExpression
             shiftExpression
              additiveExpression
               multiplicativeExpression
                castExpression
                 name
                  a
    ]
  \n
 line
  instruction
   opcode
    mov
   operand
    register
     rdx
   ,
   operand
    [
    expression
     conditionalExpression
      booleanOrExpression
       booleanAndExpression
        inclusiveOrExpression
         exclusiveOrExpression
          andExpression
           equalityExpression
            relationalExpression
             shiftExpression
              additiveExpression
               multiplicativeExpression
                castExpression
                 register
                  rax
    ]
  \n
 line
  instruction
   opcode
    add
   operand
    register
     rdx
   ,
   operand
    integer
     3
  \n
 line
  instruction
   opcode
    mov
   operand
    [
    expression
     conditionalExpression
      booleanOrExpression
       booleanAndExpression
        inclusiveOrExpression
         exclusiveOrExpression
          andExpression
           equalityExpression
            relationalExpression
             shiftExpression
              additiveExpression
               multiplicativeExpression
                castExpression
                 register
                  rax
    ]
   ,
   operand
    register
     rdx
  \n\n
 line
  instruction
   opcode
    mov
   operand
    register
     rdx
   ,
   operand
    [
    expression
     conditionalExpression
      booleanOrExpression
       booleanAndExpression
        inclusiveOrExpression
         exclusiveOrExpression
          andExpression
           equalityExpression
            relationalExpression
             shiftExpression
              additiveExpression
               multiplicativeExpression
                castExpression
                 register
                  rax
               +
               multiplicativeExpression
                castExpression
                 integer
                  8
    ]
  \n
 line
  instruction
   opcode
    add
   operand
    register
     rdx
   ,
   operand
    integer
     4
  \n
 line
  instruction
   opcode
    mov
   operand
    [
    expression
     conditionalExpression
      booleanOrExpression
       booleanAndExpression
        inclusiveOrExpression
         exclusiveOrExpression
          andExpression
           equalityExpression
            relationalExpression
             shiftExpression
              additiveExpression
               multiplicativeExpression
                castExpression
                 register
                  rax
               +
               multiplicativeExpression
                castExpression
                 integer
                  8
    ]
   ,
   operand
    register
     rdx
  \n\n
 line
  instruction
   opcode
    pop
   operand
    register
     rsi
  \n
 line
  instruction
   opcode
    pop
   operand
    register
     rdi
  \n
 line
  instruction
   opcode
    pop
   operand
    register
     rdx
  \n
 line
  instruction
   opcode
    mov
   operand
    register
     rsp
   ,
   operand
    register
     rbp
  \n
 line
  instruction
   opcode
    pop
   operand
    register
     rbp
  \n
 line
  instruction
   opcode
    ret
  \n\n
 <EOF>
