preds
 pred
  BEG_G
  {
  program
   statement_list
    statement
     declare
      graph_t
     dcl_list
      dcl_item
       dcl_name
        og
    ;
    statement
     declare
      edge_t
     dcl_list
      dcl_item
       dcl_name
        e
    ;
    statement
     declare
      node_t
     dcl_list
      dcl_item
       dcl_name
        ctr
       initialize_
        assign
         =
         expr
          function
           node
          (
          args
           arg_list
            expr
             expr
              variable
               $
             ,
             expr
              array_
               ARGV
              [
              args
               arg_list
                expr
                 constant
                  0
              ]
          )
    ;
    statement
     declare
      double
     dcl_list
      dcl_item
       dcl_name
        rs
       initialize_
        assign
         =
         expr
          constant
           1.0
    ;
    statement
     declare
      int
     dcl_list
      dcl_item
       dcl_name
        cx
      ,
      dcl_item
       dcl_name
        cy
    ;
    statement
     declare
      int
     dcl_list
      dcl_item
       dcl_name
        x
      ,
      dcl_item
       dcl_name
        y
    ;
    statement
     declare
      node_t
     dcl_list
      dcl_item
       dcl_name
        n
    ;
    statement
     declare
      int
     dcl_list
      dcl_item
       dcl_name
        i
      ,
      dcl_item
       dcl_name
        n_r
    ;
    statement
     declare
      int
     dcl_list
      dcl_item
       dcl_name
        d
    ;
    statement
     declare
      int
     dcl_list
      dcl_item
       dcl_name
        rads
       array
        [
        declare
         int
        ]
    ;
    statement
     declare
      char
      *
     dcl_list
      dcl_item
       dcl_name
        ctr_s
       initialize_
        assign
         =
         expr
          variable
           ctr
           members
            .
            pos
    ;
    statement
     expr
      scan
       sscanf
      (
      args
       arg_list
        expr
         expr
          expr
           expr
            variable
             ctr_s
           ,
           expr
            constant
             "%d,%d"
          ,
          expr
           &
           variable
            cx
         ,
         expr
          &
          variable
           cy
      )
    ;
    statement
     if
     (
     expr
      function
       hasAttr
      (
      args
       arg_list
        expr
         expr
          variable
           $
         ,
         expr
          constant
           "ranksep"
      )
     )
     statement
      {
      statement_list
       statement
        expr
         scan
          sscanf
         (
         args
          arg_list
           expr
            expr
             expr
              variable
               $
               members
                .
                ranksep
             ,
             expr
              constant
               "%f"
            ,
            expr
             &
             variable
              rs
         )
       ;
       statement
        if
        (
        expr
         expr
          variable
           rs
         ==
         expr
          constant
           0.0
        )
        statement
         expr
          variable
           rs
          assign
           =
           expr
            constant
             1.0
       ;
      }
    statement
     expr
      variable
       rs
      assign
       *=
       expr
        constant
         72
    ;
    statement
     expr
      variable
       rs
      assign
       =
       expr
        expr
         expr
          constant
           1.5
         *
         expr
          variable
           rs
        *
        expr
         variable
          rs
    ;
  }
 pred
  N
  [
  program
   statement_list
    statement
     expr
      expr
       variable
        $
      !=
      expr
       variable
        ctr
  ]
  {
  program
   statement_list
    statement
     expr
      scan
       sscanf
      (
      args
       arg_list
        expr
         expr
          expr
           expr
            variable
             $
             members
              .
              pos
           ,
           expr
            constant
             "%d,%d"
          ,
          expr
           &
           variable
            x
         ,
         expr
          &
          variable
           y
      )
    ;
    statement
     expr
      variable
       d
      assign
       =
       expr
        expr
         expr
          (
          expr
           expr
            variable
             x
           -
           expr
            variable
             cx
          )
         *
         expr
          (
          expr
           expr
            variable
             x
           -
           expr
            variable
             cx
          )
        +
        expr
         expr
          (
          expr
           expr
            variable
             y
           -
           expr
            variable
             cy
          )
         *
         expr
          (
          expr
           expr
            variable
             y
           -
           expr
            variable
             cy
          )
    ;
    statement
     for
     (
     variable
      rads
      index
       [
       expr
        variable
         i
       ]
     )
     statement
      {
      statement_list
       statement
        if
        (
        expr
         expr
          (
          expr
           expr
            array_
             rads
            [
            args
             arg_list
              expr
               variable
                i
            ]
           -
           expr
            expr
             variable
              rs
            <=
            expr
             variable
              d
          )
         &&
         expr
          (
          expr
           expr
            variable
             d
           <=
           expr
            expr
             array_
              rads
             [
             args
              arg_list
               expr
                variable
                 i
             ]
            +
            expr
             variable
              rs
          )
        )
        statement
         return
       ;
      }
    statement
     expr
      variable
       n_r
      ++
    ;
    statement
     expr
      variable
       rads
       index
        [
        expr
         variable
          n_r
        ]
      assign
       =
       expr
        variable
         d
    ;
  }
 pred
  END_G
  {
  program
   statement_list
    statement
     expr
      variable
       og
      assign
       =
       expr
        function
         copy
        (
        args
         arg_list
          expr
           expr
            variable
             NULL
           ,
           expr
            variable
             $
        )
    ;
    statement
     expr
      variable
       og
       members
        .
        outputorder
      assign
       =
       expr
        constant
         "nodesfirst"
    ;
    statement
     expr
      function
       setDflt
      (
      args
       arg_list
        expr
         expr
          expr
           expr
            variable
             og
           ,
           expr
            constant
             "N"
          ,
          expr
           constant
            "label"
         ,
         expr
          constant
           "\\N"
      )
    ;
    statement
     for
     (
     variable
      rads
      index
       [
       expr
        variable
         i
       ]
     )
     statement
      {
      statement_list
       statement
        expr
         variable
          n
         assign
          =
          expr
           function
            node
           (
           args
            arg_list
             expr
              expr
               variable
                og
              ,
              expr
               expr
                constant
                 "ring_"
               +
               expr
                (
                expr
                 (
                 declare
                  string
                 )
                 expr
                  variable
                   i
                )
           )
       ;
       statement
        expr
         variable
          n
          members
           .
           shape
         assign
          =
          expr
           constant
            "circle"
       ;
       statement
        expr
         variable
          n
          members
           .
           pos
         assign
          =
          expr
           variable
            ctr_s
       ;
       statement
        expr
         variable
          n
          members
           .
           style
         assign
          =
          expr
           constant
            ""
       ;
       statement
        expr
         variable
          n
          members
           .
           label
         assign
          =
          expr
           constant
            ""
       ;
       statement
        expr
         variable
          d
         assign
          =
          expr
           array_
            rads
           [
           args
            arg_list
             expr
              variable
               i
           ]
       ;
       statement
        expr
         variable
          n
          members
           .
           width
         assign
          =
          expr
           print_
            sprintf
           (
           args
            arg_list
             expr
              expr
               constant
                "%f"
              ,
              expr
               expr
                function
                 sqrt
                (
                args
                 arg_list
                  expr
                   variable
                    d
                )
               /
               expr
                constant
                 36.0
           )
       ;
      }
    statement
     for
     (
     expr
      variable
       n
      assign
       =
       expr
        function
         fstnode
        (
        args
         arg_list
          expr
           variable
            $
        )
     ;
     expr
      variable
       n
     ;
     expr
      variable
       n
      assign
       =
       expr
        function
         nxtnode
        (
        args
         arg_list
          expr
           variable
            n
        )
     )
     statement
      expr
       function
        clone
       (
       args
        arg_list
         expr
          expr
           variable
            og
          ,
          expr
           variable
            n
       )
    ;
    statement
     for
     (
     expr
      variable
       n
      assign
       =
       expr
        function
         fstnode
        (
        args
         arg_list
          expr
           variable
            $
        )
     ;
     expr
      variable
       n
     ;
     expr
      variable
       n
      assign
       =
       expr
        function
         nxtnode
        (
        args
         arg_list
          expr
           variable
            n
        )
     )
     statement
      for
      (
      expr
       variable
        e
       assign
        =
        expr
         function
          fstedge
         (
         args
          arg_list
           expr
            variable
             n
         )
      ;
      expr
       variable
        e
      ;
      expr
       variable
        e
       assign
        =
        expr
         function
          nxtedge
         (
         args
          arg_list
           expr
            expr
             variable
              e
            ,
            expr
             variable
              n
         )
      )
      statement
       expr
        function
         clone
        (
        args
         arg_list
          expr
           expr
            variable
             og
           ,
           expr
            variable
             e
        )
    ;
    statement
     expr
      function
       write
      (
      args
       arg_list
        expr
         variable
          og
      )
    ;
  }
 <EOF>
