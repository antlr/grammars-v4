program
 executableProgram
  programUnit
   module
    moduleStmt
     MODULE
     moduleName
      ident
       test_c_ptr
    moduleBody
     moduleBody
      moduleBody
       moduleBody
        specificationPartConstruct
         implicitStmt
          IMPLICIT
          NONE
       specificationPartConstruct
        declarationConstruct
         derivedTypeDef
          derivedTypeStmt
           type
           ::
           handle_type
          derivedTypeBody
           derivedTypeBodyConstruct
            componentDefStmt
             typeSpec
              integer
             ::
             componentDeclList
              componentDecl
               componentName
                iptr
          endTypeStmt
           end
           type
      specificationPartConstruct
       declarationConstruct
        derivedTypeDef
         derivedTypeStmt
          type
          c_ptr
         derivedTypeBody
          derivedTypeBodyConstruct
           componentDefStmt
            typeSpec
             integer
            ::
            componentDeclList
             componentDecl
              componentName
               cptr
         endTypeStmt
          end
          type
     moduleSubprogramPartConstruct
      moduleSubprogram
       functionSubprogram
        functionPrefix
         FUNCTION
        functionName
         getptr
        functionRange
         functionParList
          (
          functionPars
           functionPar
            dummyArgName
             a
          )
         body
          bodyConstruct
           specificationPartConstruct
            declarationConstruct
             typeDeclarationStmt
              typeSpec
               TYPE
               (
               typeName
                ident
                 c_ptr
               )
              ::
              entityDeclList
               entityDecl
                objectName
                 name
                  getptr
          bodyConstruct
           specificationPartConstruct
            declarationConstruct
             typeDeclarationStmt
              typeSpec
               integer
              ::
              entityDeclList
               entityDecl
                objectName
                 name
                  rslts
               ,
               entityDecl
                objectName
                 name
                  expect
          bodyConstruct
           executableConstruct
            actionStmt
             assignmentStmt
              expect
              =
              expression
               level5Expr
                equivOperand
                 orOperand
                  andOperand
                   level4Expr
                    level3Expr
                     level2Expr
                      addOperand
                       multOperand
                        level1Expr
                         primary
                          unsignedArithmeticConstant
                           4
          bodyConstruct
           executableConstruct
            actionStmt
             assignmentStmt
              rslts
              =
              expression
               level5Expr
                equivOperand
                 orOperand
                  andOperand
                   level4Expr
                    level3Expr
                     level2Expr
                      addOperand
                       multOperand
                        level1Expr
                         primary
                          nameDataRef
                           name
                            a
                           complexDataRefTail
                            %
                            iptr
          bodyConstruct
           executableConstruct
            actionStmt
             assignmentStmt
              getptr
              %
              nameDataRef
               name
                cptr
              =
              expression
               level5Expr
                equivOperand
                 orOperand
                  andOperand
                   level4Expr
                    level3Expr
                     level2Expr
                      addOperand
                       multOperand
                        level1Expr
                         primary
                          unsignedArithmeticConstant
                           0
         endFunctionStmt
          END
          FUNCTION
          getptr
    endModuleStmt
     END
     MODULE
     test_c_ptr
  programUnit
   mainProgram
    programStmt
     PROGRAM
     main
    mainRange
     body
      bodyConstruct
       specificationPartConstruct
        useStmt
         USE
         test_c_ptr
      bodyConstruct
       specificationPartConstruct
        implicitStmt
         IMPLICIT
         NONE
      bodyConstruct
       specificationPartConstruct
        declarationConstruct
         typeDeclarationStmt
          typeSpec
           TYPE
           (
           typeName
            ident
             c_ptr
           )
          ::
          entityDeclList
           entityDecl
            objectName
             name
              dummy
      bodyConstruct
       specificationPartConstruct
        declarationConstruct
         typeDeclarationStmt
          typeSpec
           type
           (
           typeName
            ident
             handle_type
           )
          ::
          entityDeclList
           entityDecl
            objectName
             name
              input
      bodyConstruct
       executableConstruct
        actionStmt
         assignmentStmt
          input
          %
          nameDataRef
           name
            iptr
          =
          expression
           level5Expr
            equivOperand
             orOperand
              andOperand
               level4Expr
                level3Expr
                 level2Expr
                  addOperand
                   multOperand
                    level1Expr
                     primary
                      unsignedArithmeticConstant
                       4
      bodyConstruct
       executableConstruct
        actionStmt
         assignmentStmt
          dummy
          =
          expression
           level5Expr
            equivOperand
             orOperand
              andOperand
               level4Expr
                level3Expr
                 level2Expr
                  addOperand
                   multOperand
                    level1Expr
                     primary
                      nameDataRef
                       name
                        getptr
                       complexDataRefTail
                        sectionSubscriptRef
                         (
                         sectionSubscriptList
                          sectionSubscript
                           expression
                            level5Expr
                             equivOperand
                              orOperand
                               andOperand
                                level4Expr
                                 level3Expr
                                  level2Expr
                                   addOperand
                                    multOperand
                                     level1Expr
                                      primary
                                       nameDataRef
                                        name
                                         input
                         )
     endProgramStmt
      END
      PROGRAM
      main
 <EOF>
