program
 executableProgram
  programUnit
   module
    moduleStmt
     module
     moduleName
      ident
       mm
    moduleBody
     specificationPartConstruct
      declarationConstruct
       typeDeclarationStmt
        typeSpec
         integer
        attrSpecSeq
         ,
         attrSpec
          parameter
        ::
        entityDeclList
         entityDecl
          objectName
           name
            kk
          =
          expression
           level5Expr
            equivOperand
             orOperand
              andOperand
               level4Expr
                level3Expr
                 level2Expr
                  addOperand
                   multOperand
                    level1Expr
                     primary
                      unsignedArithmeticConstant
                       4
    endModuleStmt
     end
     module
     mm
  programUnit
   subroutineSubprogram
    subroutine
    subroutineName
     ss
    subroutineRange
     subroutineParList
     body
      bodyConstruct
       specificationPartConstruct
        declarationConstruct
         interfaceBlock
          interfaceStmt
           interface
          interfaceBlockBody
           interfaceBodyPartConstruct
            interfaceBody
             functionPrefix
              typeSpec
               integer
               kindSelector
                (
                kind
                =
                expression
                 level5Expr
                  equivOperand
                   orOperand
                    andOperand
                     level4Expr
                      level3Expr
                       level2Expr
                        addOperand
                         multOperand
                          level1Expr
                           primary
                            nameDataRef
                             name
                              kk
                )
              function
             ff1
             functionInterfaceRange
              functionParList
               (
               functionPars
                functionPar
                 dummyArgName
                  aa
                ,
                functionPar
                 dummyArgName
                  bb
               )
              subprogramInterfaceBody
               subprogramInterfaceBody
                subprogramInterfaceBody
                 specificationPartConstruct
                  useStmt
                   use
                   mm
                   ,
                   only
                   :
                   onlyList
                    onlyStmt
                     useName
                      ident
                       kk
                specificationPartConstruct
                 implicitStmt
                  implicit
                  none
               specificationPartConstruct
                declarationConstruct
                 typeDeclarationStmt
                  typeSpec
                   integer
                   kindSelector
                    (
                    kind
                    =
                    expression
                     level5Expr
                      equivOperand
                       orOperand
                        andOperand
                         level4Expr
                          level3Expr
                           level2Expr
                            addOperand
                             multOperand
                              level1Expr
                               primary
                                nameDataRef
                                 name
                                  kk
                    )
                  ::
                  entityDeclList
                   entityDecl
                    objectName
                     name
                      aa
                   ,
                   entityDecl
                    objectName
                     name
                      bb
              endFunctionStmt
               end
               function
               ff1
          endInterfaceStmt
           end
           interface
      bodyConstruct
       specificationPartConstruct
        declarationConstruct
         interfaceBlock
          interfaceStmt
           interface
          interfaceBlockBody
           interfaceBodyPartConstruct
            interfaceBody
             functionPrefix
              typeSpec
               integer
               kindSelector
                (
                kind
                =
                expression
                 level5Expr
                  equivOperand
                   orOperand
                    andOperand
                     level4Expr
                      level3Expr
                       level2Expr
                        addOperand
                         multOperand
                          level1Expr
                           primary
                            nameDataRef
                             name
                              kk
                )
              function
             ff2
             functionInterfaceRange
              functionParList
               (
               functionPars
                functionPar
                 dummyArgName
                  aa
                ,
                functionPar
                 dummyArgName
                  bb
               )
              subprogramInterfaceBody
               subprogramInterfaceBody
                subprogramInterfaceBody
                 specificationPartConstruct
                  useStmt
                   use
                   mm
                   ,
                   only
                   :
                   onlyList
                    onlyStmt
                     useName
                      ident
                       kk
                specificationPartConstruct
                 implicitStmt
                  implicit
                  none
               specificationPartConstruct
                declarationConstruct
                 typeDeclarationStmt
                  typeSpec
                   integer
                   kindSelector
                    (
                    kind
                    =
                    expression
                     level5Expr
                      equivOperand
                       orOperand
                        andOperand
                         level4Expr
                          level3Expr
                           level2Expr
                            addOperand
                             multOperand
                              level1Expr
                               primary
                                nameDataRef
                                 name
                                  kk
                    )
                  ::
                  entityDeclList
                   entityDecl
                    objectName
                     name
                      aa
                   ,
                   entityDecl
                    objectName
                     name
                      bb
              endFunctionStmt
               end
               function
               ff2
          endInterfaceStmt
           end
           interface
      bodyConstruct
       executableConstruct
        ifConstruct
         ifThenStmt
          if
          (
          expression
           level5Expr
            equivOperand
             orOperand
              andOperand
               level4Expr
                level3Expr
                 level2Expr
                  addOperand
                   multOperand
                    level1Expr
                     primary
                      nameDataRef
                       name
                        ff1
                       complexDataRefTail
                        sectionSubscriptRef
                         (
                         sectionSubscriptList
                          sectionSubscript
                           expression
                            level5Expr
                             equivOperand
                              orOperand
                               andOperand
                                level4Expr
                                 level3Expr
                                  level2Expr
                                   addOperand
                                    multOperand
                                     level1Expr
                                      primary
                                       unsignedArithmeticConstant
                                        1
                          ,
                          sectionSubscript
                           expression
                            level5Expr
                             equivOperand
                              orOperand
                               andOperand
                                level4Expr
                                 level3Expr
                                  level2Expr
                                   addOperand
                                    multOperand
                                     level1Expr
                                      primary
                                       unsignedArithmeticConstant
                                        2
                         )
                  +
                  addOperand
                   multOperand
                    level1Expr
                     primary
                      nameDataRef
                       name
                        ff2
                       complexDataRefTail
                        sectionSubscriptRef
                         (
                         sectionSubscriptList
                          sectionSubscript
                           expression
                            level5Expr
                             equivOperand
                              orOperand
                               andOperand
                                level4Expr
                                 level3Expr
                                  level2Expr
                                   addOperand
                                    multOperand
                                     level1Expr
                                      primary
                                       unsignedArithmeticConstant
                                        3
                          ,
                          sectionSubscript
                           expression
                            level5Expr
                             equivOperand
                              orOperand
                               andOperand
                                level4Expr
                                 level3Expr
                                  level2Expr
                                   addOperand
                                    multOperand
                                     level1Expr
                                      primary
                                       unsignedArithmeticConstant
                                        4
                         )
                relOp
                 .eq.
                level3Expr
                 level2Expr
                  addOperand
                   multOperand
                    level1Expr
                     primary
                      unsignedArithmeticConstant
                       10
          )
          then
         conditionalBody
          executionPartConstruct
           executableConstruct
            actionStmt
             printStmt
              print
              formatIdentifier
               *
              ,
              outputItemList
               expression
                level5Expr
                 equivOperand
                  orOperand
                   andOperand
                    level4Expr
                     level3Expr
                      level2Expr
                       addOperand
                        multOperand
                         level1Expr
                          primary
                           "PASS"
         elseConstruct
          elseStmt
           else
          conditionalBody
           executionPartConstruct
            executableConstruct
             actionStmt
              printStmt
               print
               formatIdentifier
                *
               ,
               outputItemList
                expression
                 level5Expr
                  equivOperand
                   orOperand
                    andOperand
                     level4Expr
                      level3Expr
                       level2Expr
                        addOperand
                         multOperand
                          level1Expr
                           primary
                            "FAIL"
         endIfStmt
          endif
     endSubroutineStmt
      end
      subroutine
      ss
  programUnit
   functionSubprogram
    functionPrefix
     typeSpec
      integer
      kindSelector
       (
       kind
       =
       expression
        level5Expr
         equivOperand
          orOperand
           andOperand
            level4Expr
             level3Expr
              level2Expr
               addOperand
                multOperand
                 level1Expr
                  primary
                   nameDataRef
                    name
                     kk
       )
     function
    functionName
     ff1
    functionRange
     functionParList
      (
      functionPars
       functionPar
        dummyArgName
         aa
       ,
       functionPar
        dummyArgName
         bb
      )
     body
      bodyConstruct
       specificationPartConstruct
        useStmt
         use
         mm
         ,
         only
         :
         onlyList
          onlyStmt
           useName
            ident
             kk
      bodyConstruct
       specificationPartConstruct
        implicitStmt
         implicit
         none
      bodyConstruct
       specificationPartConstruct
        declarationConstruct
         typeDeclarationStmt
          typeSpec
           integer
           kindSelector
            (
            kind
            =
            expression
             level5Expr
              equivOperand
               orOperand
                andOperand
                 level4Expr
                  level3Expr
                   level2Expr
                    addOperand
                     multOperand
                      level1Expr
                       primary
                        nameDataRef
                         name
                          kk
            )
          ::
          entityDeclList
           entityDecl
            objectName
             name
              aa
           ,
           entityDecl
            objectName
             name
              bb
      bodyConstruct
       executableConstruct
        actionStmt
         assignmentStmt
          ff1
          =
          expression
           level5Expr
            equivOperand
             orOperand
              andOperand
               level4Expr
                level3Expr
                 level2Expr
                  addOperand
                   multOperand
                    level1Expr
                     primary
                      nameDataRef
                       name
                        aa
                  +
                  addOperand
                   multOperand
                    level1Expr
                     primary
                      nameDataRef
                       name
                        bb
     endFunctionStmt
      end
      function
      ff1
  programUnit
   functionSubprogram
    functionPrefix
     typeSpec
      integer
      kindSelector
       (
       kind
       =
       expression
        level5Expr
         equivOperand
          orOperand
           andOperand
            level4Expr
             level3Expr
              level2Expr
               addOperand
                multOperand
                 level1Expr
                  primary
                   nameDataRef
                    name
                     kk
       )
     function
    functionName
     ff2
    functionRange
     functionParList
      (
      functionPars
       functionPar
        dummyArgName
         aa
       ,
       functionPar
        dummyArgName
         bb
      )
     body
      bodyConstruct
       specificationPartConstruct
        useStmt
         use
         mm
         ,
         only
         :
         onlyList
          onlyStmt
           useName
            ident
             kk
      bodyConstruct
       specificationPartConstruct
        implicitStmt
         implicit
         none
      bodyConstruct
       specificationPartConstruct
        declarationConstruct
         typeDeclarationStmt
          typeSpec
           integer
           kindSelector
            (
            kind
            =
            expression
             level5Expr
              equivOperand
               orOperand
                andOperand
                 level4Expr
                  level3Expr
                   level2Expr
                    addOperand
                     multOperand
                      level1Expr
                       primary
                        nameDataRef
                         name
                          kk
            )
          ::
          entityDeclList
           entityDecl
            objectName
             name
              aa
           ,
           entityDecl
            objectName
             name
              bb
      bodyConstruct
       executableConstruct
        actionStmt
         assignmentStmt
          ff2
          =
          expression
           level5Expr
            equivOperand
             orOperand
              andOperand
               level4Expr
                level3Expr
                 level2Expr
                  addOperand
                   multOperand
                    level1Expr
                     primary
                      nameDataRef
                       name
                        aa
                  +
                  addOperand
                   multOperand
                    level1Expr
                     primary
                      nameDataRef
                       name
                        bb
     endFunctionStmt
      end
      function
      ff2
  programUnit
   mainProgram
    mainRange
     body
      bodyConstruct
       executableConstruct
        actionStmt
         callStmt
          call
          subroutineNameUse
           ss
     endProgramStmt
      end
 <EOF>
