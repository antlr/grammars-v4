file_input
 stmt
  simple_stmt
   small_stmt
    expr_stmt
     testlist
      test
       or_test
        and_test
         not_test
          comparison
           expr
            xor_expr
             and_expr
              shift_expr
               arith_expr
                term
                 factor
                  power
                   atom
                    """Bastionification utility.\n\nA bastion (for another object -- the 'original') is an object that has\nthe same methods as the original but does not give access to its\ninstance variables.  Bastions have a number of uses, but the most\nobvious one is to provide code executing in restricted mode with a\nsafe interface to an object implemented in unrestricted mode.\n\nThe bastionification routine has an optional second argument which is\na filter function.  Only those methods for which the filter method\n(called with the method name as argument) returns true are accessible.\nThe default filter method returns true unless the method name begins\nwith an underscore.\n\nThere are a number of possible implementations of bastions.  We use a\n'lazy' approach where the bastion's __getattr__() discipline does all\nthe work for a particular method the first time it is used.  This is\nusually fastest, especially if the user doesn't call all available\nmethods.  The retrieved methods are stored as instance variables of\nthe bastion, so the overhead is only occurred on the first use of each\nmethod.\n\nDetail: the bastion class has a __repr__() discipline which includes\nthe repr() of the original object.  This is precomputed when the\nbastion is created.\n\n"""
   \n
 stmt
  simple_stmt
   small_stmt
    import_stmt
     import_from
      from
      dotted_name
       warnings
      import
      import_as_names
       import_as_name
        warnpy3k
   \n
 stmt
  simple_stmt
   small_stmt
    expr_stmt
     testlist
      test
       or_test
        and_test
         not_test
          comparison
           expr
            xor_expr
             and_expr
              shift_expr
               arith_expr
                term
                 factor
                  power
                   atom
                    warnpy3k
                   trailer
                    (
                    arglist
                     argument
                      test
                       or_test
                        and_test
                         not_test
                          comparison
                           expr
                            xor_expr
                             and_expr
                              shift_expr
                               arith_expr
                                term
                                 factor
                                  power
                                   atom
                                    "the Bastion module has been removed in Python 3.0"
                     ,
                     argument
                      test
                       or_test
                        and_test
                         not_test
                          comparison
                           expr
                            xor_expr
                             and_expr
                              shift_expr
                               arith_expr
                                term
                                 factor
                                  power
                                   atom
                                    stacklevel
                      =
                      test
                       or_test
                        and_test
                         not_test
                          comparison
                           expr
                            xor_expr
                             and_expr
                              shift_expr
                               arith_expr
                                term
                                 factor
                                  power
                                   atom
                                    2
                    )
   \n
 stmt
  simple_stmt
   small_stmt
    del_stmt
     del
     exprlist
      expr
       xor_expr
        and_expr
         shift_expr
          arith_expr
           term
            factor
             power
              atom
               warnpy3k
   \n
 stmt
  simple_stmt
   small_stmt
    expr_stmt
     testlist
      test
       or_test
        and_test
         not_test
          comparison
           expr
            xor_expr
             and_expr
              shift_expr
               arith_expr
                term
                 factor
                  power
                   atom
                    __all__
     =
     testlist
      test
       or_test
        and_test
         not_test
          comparison
           expr
            xor_expr
             and_expr
              shift_expr
               arith_expr
                term
                 factor
                  power
                   atom
                    [
                    listmaker
                     test
                      or_test
                       and_test
                        not_test
                         comparison
                          expr
                           xor_expr
                            and_expr
                             shift_expr
                              arith_expr
                               term
                                factor
                                 power
                                  atom
                                   "BastionClass"
                     ,
                     test
                      or_test
                       and_test
                        not_test
                         comparison
                          expr
                           xor_expr
                            and_expr
                             shift_expr
                              arith_expr
                               term
                                factor
                                 power
                                  atom
                                   "Bastion"
                    ]
   \n
 stmt
  simple_stmt
   small_stmt
    import_stmt
     import_from
      from
      dotted_name
       types
      import
      import_as_names
       import_as_name
        MethodType
   \n
 stmt
  compound_stmt
   classdef
    class
    BastionClass
    :
    suite
     \n
     <INDENT>
     stmt
      simple_stmt
       small_stmt
        expr_stmt
         testlist
          test
           or_test
            and_test
             not_test
              comparison
               expr
                xor_expr
                 and_expr
                  shift_expr
                   arith_expr
                    term
                     factor
                      power
                       atom
                        """Helper class used by the Bastion() function.\n\n    You could subclass this and pass the subclass as the bastionclass\n    argument to the Bastion() function, as long as the constructor has\n    the same signature (a get() function and a name for the object).\n\n    """
       \n
     stmt
      compound_stmt
       funcdef
        def
        __init__
        parameters
         (
         varargslist
          fpdef
           self
          ,
          fpdef
           get
          ,
          fpdef
           name
         )
        :
        suite
         \n
         <INDENT>
         stmt
          simple_stmt
           small_stmt
            expr_stmt
             testlist
              test
               or_test
                and_test
                 not_test
                  comparison
                   expr
                    xor_expr
                     and_expr
                      shift_expr
                       arith_expr
                        term
                         factor
                          power
                           atom
                            """Constructor.\n\n        Arguments:\n\n        get - a function that gets the attribute value (by name)\n        name - a human-readable name for the original object\n               (suggestion: use repr(object))\n\n        """
           \n
         stmt
          simple_stmt
           small_stmt
            expr_stmt
             testlist
              test
               or_test
                and_test
                 not_test
                  comparison
                   expr
                    xor_expr
                     and_expr
                      shift_expr
                       arith_expr
                        term
                         factor
                          power
                           atom
                            self
                           trailer
                            .
                            _get_
             =
             testlist
              test
               or_test
                and_test
                 not_test
                  comparison
                   expr
                    xor_expr
                     and_expr
                      shift_expr
                       arith_expr
                        term
                         factor
                          power
                           atom
                            get
           \n
         stmt
          simple_stmt
           small_stmt
            expr_stmt
             testlist
              test
               or_test
                and_test
                 not_test
                  comparison
                   expr
                    xor_expr
                     and_expr
                      shift_expr
                       arith_expr
                        term
                         factor
                          power
                           atom
                            self
                           trailer
                            .
                            _name_
             =
             testlist
              test
               or_test
                and_test
                 not_test
                  comparison
                   expr
                    xor_expr
                     and_expr
                      shift_expr
                       arith_expr
                        term
                         factor
                          power
                           atom
                            name
           \n
         <DEDENT>
     stmt
      compound_stmt
       funcdef
        def
        __repr__
        parameters
         (
         varargslist
          fpdef
           self
         )
        :
        suite
         \n
         <INDENT>
         stmt
          simple_stmt
           small_stmt
            expr_stmt
             testlist
              test
               or_test
                and_test
                 not_test
                  comparison
                   expr
                    xor_expr
                     and_expr
                      shift_expr
                       arith_expr
                        term
                         factor
                          power
                           atom
                            """Return a representation string.\n\n        This includes the name passed in to the constructor, so that\n        if you print the bastion during debugging, at least you have\n        some idea of what it is.\n\n        """
           \n
         stmt
          simple_stmt
           small_stmt
            flow_stmt
             return_stmt
              return
              testlist
               test
                or_test
                 and_test
                  not_test
                   comparison
                    expr
                     xor_expr
                      and_expr
                       shift_expr
                        arith_expr
                         term
                          factor
                           power
                            atom
                             "<Bastion for %s>"
                          %
                          factor
                           power
                            atom
                             self
                            trailer
                             .
                             _name_
           \n
         <DEDENT>
     stmt
      compound_stmt
       funcdef
        def
        __getattr__
        parameters
         (
         varargslist
          fpdef
           self
          ,
          fpdef
           name
         )
        :
        suite
         \n
         <INDENT>
         stmt
          simple_stmt
           small_stmt
            expr_stmt
             testlist
              test
               or_test
                and_test
                 not_test
                  comparison
                   expr
                    xor_expr
                     and_expr
                      shift_expr
                       arith_expr
                        term
                         factor
                          power
                           atom
                            """Get an as-yet undefined attribute value.\n\n        This calls the get() function that was passed to the\n        constructor.  The result is stored as an instance variable so\n        that the next time the same attribute is requested,\n        __getattr__() won't be invoked.\n\n        If the get() function raises an exception, this is simply\n        passed on -- exceptions are not cached.\n\n        """
           \n
         stmt
          simple_stmt
           small_stmt
            expr_stmt
             testlist
              test
               or_test
                and_test
                 not_test
                  comparison
                   expr
                    xor_expr
                     and_expr
                      shift_expr
                       arith_expr
                        term
                         factor
                          power
                           atom
                            attribute
             =
             testlist
              test
               or_test
                and_test
                 not_test
                  comparison
                   expr
                    xor_expr
                     and_expr
                      shift_expr
                       arith_expr
                        term
                         factor
                          power
                           atom
                            self
                           trailer
                            .
                            _get_
                           trailer
                            (
                            arglist
                             argument
                              test
                               or_test
                                and_test
                                 not_test
                                  comparison
                                   expr
                                    xor_expr
                                     and_expr
                                      shift_expr
                                       arith_expr
                                        term
                                         factor
                                          power
                                           atom
                                            name
                            )
           \n
         stmt
          simple_stmt
           small_stmt
            expr_stmt
             testlist
              test
               or_test
                and_test
                 not_test
                  comparison
                   expr
                    xor_expr
                     and_expr
                      shift_expr
                       arith_expr
                        term
                         factor
                          power
                           atom
                            self
                           trailer
                            .
                            __dict__
                           trailer
                            [
                            subscriptlist
                             subscript
                              test
                               or_test
                                and_test
                                 not_test
                                  comparison
                                   expr
                                    xor_expr
                                     and_expr
                                      shift_expr
                                       arith_expr
                                        term
                                         factor
                                          power
                                           atom
                                            name
                            ]
             =
             testlist
              test
               or_test
                and_test
                 not_test
                  comparison
                   expr
                    xor_expr
                     and_expr
                      shift_expr
                       arith_expr
                        term
                         factor
                          power
                           atom
                            attribute
           \n
         stmt
          simple_stmt
           small_stmt
            flow_stmt
             return_stmt
              return
              testlist
               test
                or_test
                 and_test
                  not_test
                   comparison
                    expr
                     xor_expr
                      and_expr
                       shift_expr
                        arith_expr
                         term
                          factor
                           power
                            atom
                             attribute
           \n
         <DEDENT>
     <DEDENT>
 stmt
  compound_stmt
   funcdef
    def
    Bastion
    parameters
     (
     varargslist
      fpdef
       object
      ,
      fpdef
       filter
      =
      test
       lambdef
        lambda
        varargslist
         fpdef
          name
        :
        test
         or_test
          and_test
           not_test
            comparison
             expr
              xor_expr
               and_expr
                shift_expr
                 arith_expr
                  term
                   factor
                    power
                     atom
                      name
                     trailer
                      [
                      subscriptlist
                       subscript
                        :
                        test
                         or_test
                          and_test
                           not_test
                            comparison
                             expr
                              xor_expr
                               and_expr
                                shift_expr
                                 arith_expr
                                  term
                                   factor
                                    power
                                     atom
                                      1
                      ]
             comp_op
              !=
             expr
              xor_expr
               and_expr
                shift_expr
                 arith_expr
                  term
                   factor
                    power
                     atom
                      '_'
      ,
      fpdef
       name
      =
      test
       or_test
        and_test
         not_test
          comparison
           expr
            xor_expr
             and_expr
              shift_expr
               arith_expr
                term
                 factor
                  power
                   atom
                    None
      ,
      fpdef
       bastionclass
      =
      test
       or_test
        and_test
         not_test
          comparison
           expr
            xor_expr
             and_expr
              shift_expr
               arith_expr
                term
                 factor
                  power
                   atom
                    BastionClass
     )
    :
    suite
     \n
     <INDENT>
     stmt
      simple_stmt
       small_stmt
        expr_stmt
         testlist
          test
           or_test
            and_test
             not_test
              comparison
               expr
                xor_expr
                 and_expr
                  shift_expr
                   arith_expr
                    term
                     factor
                      power
                       atom
                        """Create a bastion for an object, using an optional filter.\n\n    See the Bastion module's documentation for background.\n\n    Arguments:\n\n    object - the original object\n    filter - a predicate that decides whether a function name is OK;\n             by default all names are OK that don't start with '_'\n    name - the name of the object; default repr(object)\n    bastionclass - class used to create the bastion; default BastionClass\n\n    """
       \n
     stmt
      simple_stmt
       small_stmt
        flow_stmt
         raise_stmt
          raise
          test
           or_test
            and_test
             not_test
              comparison
               expr
                xor_expr
                 and_expr
                  shift_expr
                   arith_expr
                    term
                     factor
                      power
                       atom
                        RuntimeError
          ,
          test
           or_test
            and_test
             not_test
              comparison
               expr
                xor_expr
                 and_expr
                  shift_expr
                   arith_expr
                    term
                     factor
                      power
                       atom
                        "This code is not secure in Python 2.2 and later"
       \n
     stmt
      compound_stmt
       funcdef
        def
        get1
        parameters
         (
         varargslist
          fpdef
           name
          ,
          fpdef
           object
          =
          test
           or_test
            and_test
             not_test
              comparison
               expr
                xor_expr
                 and_expr
                  shift_expr
                   arith_expr
                    term
                     factor
                      power
                       atom
                        object
          ,
          fpdef
           filter
          =
          test
           or_test
            and_test
             not_test
              comparison
               expr
                xor_expr
                 and_expr
                  shift_expr
                   arith_expr
                    term
                     factor
                      power
                       atom
                        filter
         )
        :
        suite
         \n
         <INDENT>
         stmt
          simple_stmt
           small_stmt
            expr_stmt
             testlist
              test
               or_test
                and_test
                 not_test
                  comparison
                   expr
                    xor_expr
                     and_expr
                      shift_expr
                       arith_expr
                        term
                         factor
                          power
                           atom
                            """Internal function for Bastion().  See source comments."""
           \n
         stmt
          compound_stmt
           if_stmt
            if
            test
             or_test
              and_test
               not_test
                comparison
                 expr
                  xor_expr
                   and_expr
                    shift_expr
                     arith_expr
                      term
                       factor
                        power
                         atom
                          filter
                         trailer
                          (
                          arglist
                           argument
                            test
                             or_test
                              and_test
                               not_test
                                comparison
                                 expr
                                  xor_expr
                                   and_expr
                                    shift_expr
                                     arith_expr
                                      term
                                       factor
                                        power
                                         atom
                                          name
                          )
            :
            suite
             \n
             <INDENT>
             stmt
              simple_stmt
               small_stmt
                expr_stmt
                 testlist
                  test
                   or_test
                    and_test
                     not_test
                      comparison
                       expr
                        xor_expr
                         and_expr
                          shift_expr
                           arith_expr
                            term
                             factor
                              power
                               atom
                                attribute
                 =
                 testlist
                  test
                   or_test
                    and_test
                     not_test
                      comparison
                       expr
                        xor_expr
                         and_expr
                          shift_expr
                           arith_expr
                            term
                             factor
                              power
                               atom
                                getattr
                               trailer
                                (
                                arglist
                                 argument
                                  test
                                   or_test
                                    and_test
                                     not_test
                                      comparison
                                       expr
                                        xor_expr
                                         and_expr
                                          shift_expr
                                           arith_expr
                                            term
                                             factor
                                              power
                                               atom
                                                object
                                 ,
                                 argument
                                  test
                                   or_test
                                    and_test
                                     not_test
                                      comparison
                                       expr
                                        xor_expr
                                         and_expr
                                          shift_expr
                                           arith_expr
                                            term
                                             factor
                                              power
                                               atom
                                                name
                                )
               \n
             stmt
              compound_stmt
               if_stmt
                if
                test
                 or_test
                  and_test
                   not_test
                    comparison
                     expr
                      xor_expr
                       and_expr
                        shift_expr
                         arith_expr
                          term
                           factor
                            power
                             atom
                              type
                             trailer
                              (
                              arglist
                               argument
                                test
                                 or_test
                                  and_test
                                   not_test
                                    comparison
                                     expr
                                      xor_expr
                                       and_expr
                                        shift_expr
                                         arith_expr
                                          term
                                           factor
                                            power
                                             atom
                                              attribute
                              )
                     comp_op
                      ==
                     expr
                      xor_expr
                       and_expr
                        shift_expr
                         arith_expr
                          term
                           factor
                            power
                             atom
                              MethodType
                :
                suite
                 \n
                 <INDENT>
                 stmt
                  simple_stmt
                   small_stmt
                    flow_stmt
                     return_stmt
                      return
                      testlist
                       test
                        or_test
                         and_test
                          not_test
                           comparison
                            expr
                             xor_expr
                              and_expr
                               shift_expr
                                arith_expr
                                 term
                                  factor
                                   power
                                    atom
                                     attribute
                   \n
                 <DEDENT>
             <DEDENT>
         stmt
          simple_stmt
           small_stmt
            flow_stmt
             raise_stmt
              raise
              test
               or_test
                and_test
                 not_test
                  comparison
                   expr
                    xor_expr
                     and_expr
                      shift_expr
                       arith_expr
                        term
                         factor
                          power
                           atom
                            AttributeError
              ,
              test
               or_test
                and_test
                 not_test
                  comparison
                   expr
                    xor_expr
                     and_expr
                      shift_expr
                       arith_expr
                        term
                         factor
                          power
                           atom
                            name
           \n
         <DEDENT>
     stmt
      compound_stmt
       funcdef
        def
        get2
        parameters
         (
         varargslist
          fpdef
           name
          ,
          fpdef
           get1
          =
          test
           or_test
            and_test
             not_test
              comparison
               expr
                xor_expr
                 and_expr
                  shift_expr
                   arith_expr
                    term
                     factor
                      power
                       atom
                        get1
         )
        :
        suite
         \n
         <INDENT>
         stmt
          simple_stmt
           small_stmt
            expr_stmt
             testlist
              test
               or_test
                and_test
                 not_test
                  comparison
                   expr
                    xor_expr
                     and_expr
                      shift_expr
                       arith_expr
                        term
                         factor
                          power
                           atom
                            """Internal function for Bastion().  See source comments."""
           \n
         stmt
          simple_stmt
           small_stmt
            flow_stmt
             return_stmt
              return
              testlist
               test
                or_test
                 and_test
                  not_test
                   comparison
                    expr
                     xor_expr
                      and_expr
                       shift_expr
                        arith_expr
                         term
                          factor
                           power
                            atom
                             get1
                            trailer
                             (
                             arglist
                              argument
                               test
                                or_test
                                 and_test
                                  not_test
                                   comparison
                                    expr
                                     xor_expr
                                      and_expr
                                       shift_expr
                                        arith_expr
                                         term
                                          factor
                                           power
                                            atom
                                             name
                             )
           \n
         <DEDENT>
     stmt
      compound_stmt
       if_stmt
        if
        test
         or_test
          and_test
           not_test
            comparison
             expr
              xor_expr
               and_expr
                shift_expr
                 arith_expr
                  term
                   factor
                    power
                     atom
                      name
             comp_op
              is
             expr
              xor_expr
               and_expr
                shift_expr
                 arith_expr
                  term
                   factor
                    power
                     atom
                      None
        :
        suite
         \n
         <INDENT>
         stmt
          simple_stmt
           small_stmt
            expr_stmt
             testlist
              test
               or_test
                and_test
                 not_test
                  comparison
                   expr
                    xor_expr
                     and_expr
                      shift_expr
                       arith_expr
                        term
                         factor
                          power
                           atom
                            name
             =
             testlist
              test
               or_test
                and_test
                 not_test
                  comparison
                   expr
                    xor_expr
                     and_expr
                      shift_expr
                       arith_expr
                        term
                         factor
                          power
                           atom
                            repr
                           trailer
                            (
                            arglist
                             argument
                              test
                               or_test
                                and_test
                                 not_test
                                  comparison
                                   expr
                                    xor_expr
                                     and_expr
                                      shift_expr
                                       arith_expr
                                        term
                                         factor
                                          power
                                           atom
                                            object
                            )
           \n
         <DEDENT>
     stmt
      simple_stmt
       small_stmt
        flow_stmt
         return_stmt
          return
          testlist
           test
            or_test
             and_test
              not_test
               comparison
                expr
                 xor_expr
                  and_expr
                   shift_expr
                    arith_expr
                     term
                      factor
                       power
                        atom
                         bastionclass
                        trailer
                         (
                         arglist
                          argument
                           test
                            or_test
                             and_test
                              not_test
                               comparison
                                expr
                                 xor_expr
                                  and_expr
                                   shift_expr
                                    arith_expr
                                     term
                                      factor
                                       power
                                        atom
                                         get2
                          ,
                          argument
                           test
                            or_test
                             and_test
                              not_test
                               comparison
                                expr
                                 xor_expr
                                  and_expr
                                   shift_expr
                                    arith_expr
                                     term
                                      factor
                                       power
                                        atom
                                         name
                         )
       \n
     <DEDENT>
 stmt
  compound_stmt
   funcdef
    def
    _test
    parameters
     (
     )
    :
    suite
     \n
     <INDENT>
     stmt
      simple_stmt
       small_stmt
        expr_stmt
         testlist
          test
           or_test
            and_test
             not_test
              comparison
               expr
                xor_expr
                 and_expr
                  shift_expr
                   arith_expr
                    term
                     factor
                      power
                       atom
                        """Test the Bastion() function."""
       \n
     stmt
      compound_stmt
       classdef
        class
        Original
        :
        suite
         \n
         <INDENT>
         stmt
          compound_stmt
           funcdef
            def
            __init__
            parameters
             (
             varargslist
              fpdef
               self
             )
            :
            suite
             \n
             <INDENT>
             stmt
              simple_stmt
               small_stmt
                expr_stmt
                 testlist
                  test
                   or_test
                    and_test
                     not_test
                      comparison
                       expr
                        xor_expr
                         and_expr
                          shift_expr
                           arith_expr
                            term
                             factor
                              power
                               atom
                                self
                               trailer
                                .
                                sum
                 =
                 testlist
                  test
                   or_test
                    and_test
                     not_test
                      comparison
                       expr
                        xor_expr
                         and_expr
                          shift_expr
                           arith_expr
                            term
                             factor
                              power
                               atom
                                0
               \n
             <DEDENT>
         stmt
          compound_stmt
           funcdef
            def
            add
            parameters
             (
             varargslist
              fpdef
               self
              ,
              fpdef
               n
             )
            :
            suite
             \n
             <INDENT>
             stmt
              simple_stmt
               small_stmt
                expr_stmt
                 testlist
                  test
                   or_test
                    and_test
                     not_test
                      comparison
                       expr
                        xor_expr
                         and_expr
                          shift_expr
                           arith_expr
                            term
                             factor
                              power
                               atom
                                self
                               trailer
                                .
                                _add
                               trailer
                                (
                                arglist
                                 argument
                                  test
                                   or_test
                                    and_test
                                     not_test
                                      comparison
                                       expr
                                        xor_expr
                                         and_expr
                                          shift_expr
                                           arith_expr
                                            term
                                             factor
                                              power
                                               atom
                                                n
                                )
               \n
             <DEDENT>
         stmt
          compound_stmt
           funcdef
            def
            _add
            parameters
             (
             varargslist
              fpdef
               self
              ,
              fpdef
               n
             )
            :
            suite
             \n
             <INDENT>
             stmt
              simple_stmt
               small_stmt
                expr_stmt
                 testlist
                  test
                   or_test
                    and_test
                     not_test
                      comparison
                       expr
                        xor_expr
                         and_expr
                          shift_expr
                           arith_expr
                            term
                             factor
                              power
                               atom
                                self
                               trailer
                                .
                                sum
                 =
                 testlist
                  test
                   or_test
                    and_test
                     not_test
                      comparison
                       expr
                        xor_expr
                         and_expr
                          shift_expr
                           arith_expr
                            term
                             factor
                              power
                               atom
                                self
                               trailer
                                .
                                sum
                            +
                            term
                             factor
                              power
                               atom
                                n
               \n
             <DEDENT>
         stmt
          compound_stmt
           funcdef
            def
            total
            parameters
             (
             varargslist
              fpdef
               self
             )
            :
            suite
             \n
             <INDENT>
             stmt
              simple_stmt
               small_stmt
                flow_stmt
                 return_stmt
                  return
                  testlist
                   test
                    or_test
                     and_test
                      not_test
                       comparison
                        expr
                         xor_expr
                          and_expr
                           shift_expr
                            arith_expr
                             term
                              factor
                               power
                                atom
                                 self
                                trailer
                                 .
                                 sum
               \n
             <DEDENT>
         <DEDENT>
     stmt
      simple_stmt
       small_stmt
        expr_stmt
         testlist
          test
           or_test
            and_test
             not_test
              comparison
               expr
                xor_expr
                 and_expr
                  shift_expr
                   arith_expr
                    term
                     factor
                      power
                       atom
                        o
         =
         testlist
          test
           or_test
            and_test
             not_test
              comparison
               expr
                xor_expr
                 and_expr
                  shift_expr
                   arith_expr
                    term
                     factor
                      power
                       atom
                        Original
                       trailer
                        (
                        )
       \n
     stmt
      simple_stmt
       small_stmt
        expr_stmt
         testlist
          test
           or_test
            and_test
             not_test
              comparison
               expr
                xor_expr
                 and_expr
                  shift_expr
                   arith_expr
                    term
                     factor
                      power
                       atom
                        b
         =
         testlist
          test
           or_test
            and_test
             not_test
              comparison
               expr
                xor_expr
                 and_expr
                  shift_expr
                   arith_expr
                    term
                     factor
                      power
                       atom
                        Bastion
                       trailer
                        (
                        arglist
                         argument
                          test
                           or_test
                            and_test
                             not_test
                              comparison
                               expr
                                xor_expr
                                 and_expr
                                  shift_expr
                                   arith_expr
                                    term
                                     factor
                                      power
                                       atom
                                        o
                        )
       \n
     stmt
      simple_stmt
       small_stmt
        expr_stmt
         testlist
          test
           or_test
            and_test
             not_test
              comparison
               expr
                xor_expr
                 and_expr
                  shift_expr
                   arith_expr
                    term
                     factor
                      power
                       atom
                        testcode
         =
         testlist
          test
           or_test
            and_test
             not_test
              comparison
               expr
                xor_expr
                 and_expr
                  shift_expr
                   arith_expr
                    term
                     factor
                      power
                       atom
                        """if 1:\n    b.add(81)\n    b.add(18)\n    print "b.total() =", b.total()\n    try:\n        print "b.sum =", b.sum,\n    except:\n        print "inaccessible"\n    else:\n        print "accessible"\n    try:\n        print "b._add =", b._add,\n    except:\n        print "inaccessible"\n    else:\n        print "accessible"\n    try:\n        print "b._get_.func_defaults =", map(type, b._get_.func_defaults),\n    except:\n        print "inaccessible"\n    else:\n        print "accessible"\n    \n"""
       \n
     stmt
      simple_stmt
       small_stmt
        exec_stmt
         exec
         expr
          xor_expr
           and_expr
            shift_expr
             arith_expr
              term
               factor
                power
                 atom
                  testcode
       \n
     stmt
      simple_stmt
       small_stmt
        print_stmt
         print
         test
          or_test
           and_test
            not_test
             comparison
              expr
               xor_expr
                and_expr
                 shift_expr
                  arith_expr
                   term
                    factor
                     power
                      atom
                       '='
                    *
                    factor
                     power
                      atom
                       20
         ,
         test
          or_test
           and_test
            not_test
             comparison
              expr
               xor_expr
                and_expr
                 shift_expr
                  arith_expr
                   term
                    factor
                     power
                      atom
                       "Using rexec:"
         ,
         test
          or_test
           and_test
            not_test
             comparison
              expr
               xor_expr
                and_expr
                 shift_expr
                  arith_expr
                   term
                    factor
                     power
                      atom
                       '='
                    *
                    factor
                     power
                      atom
                       20
       \n
     stmt
      simple_stmt
       small_stmt
        import_stmt
         import_name
          import
          dotted_as_names
           dotted_as_name
            dotted_name
             rexec
       \n
     stmt
      simple_stmt
       small_stmt
        expr_stmt
         testlist
          test
           or_test
            and_test
             not_test
              comparison
               expr
                xor_expr
                 and_expr
                  shift_expr
                   arith_expr
                    term
                     factor
                      power
                       atom
                        r
         =
         testlist
          test
           or_test
            and_test
             not_test
              comparison
               expr
                xor_expr
                 and_expr
                  shift_expr
                   arith_expr
                    term
                     factor
                      power
                       atom
                        rexec
                       trailer
                        .
                        RExec
                       trailer
                        (
                        )
       \n
     stmt
      simple_stmt
       small_stmt
        expr_stmt
         testlist
          test
           or_test
            and_test
             not_test
              comparison
               expr
                xor_expr
                 and_expr
                  shift_expr
                   arith_expr
                    term
                     factor
                      power
                       atom
                        m
         =
         testlist
          test
           or_test
            and_test
             not_test
              comparison
               expr
                xor_expr
                 and_expr
                  shift_expr
                   arith_expr
                    term
                     factor
                      power
                       atom
                        r
                       trailer
                        .
                        add_module
                       trailer
                        (
                        arglist
                         argument
                          test
                           or_test
                            and_test
                             not_test
                              comparison
                               expr
                                xor_expr
                                 and_expr
                                  shift_expr
                                   arith_expr
                                    term
                                     factor
                                      power
                                       atom
                                        '__main__'
                        )
       \n
     stmt
      simple_stmt
       small_stmt
        expr_stmt
         testlist
          test
           or_test
            and_test
             not_test
              comparison
               expr
                xor_expr
                 and_expr
                  shift_expr
                   arith_expr
                    term
                     factor
                      power
                       atom
                        m
                       trailer
                        .
                        b
         =
         testlist
          test
           or_test
            and_test
             not_test
              comparison
               expr
                xor_expr
                 and_expr
                  shift_expr
                   arith_expr
                    term
                     factor
                      power
                       atom
                        b
       \n
     stmt
      simple_stmt
       small_stmt
        expr_stmt
         testlist
          test
           or_test
            and_test
             not_test
              comparison
               expr
                xor_expr
                 and_expr
                  shift_expr
                   arith_expr
                    term
                     factor
                      power
                       atom
                        r
                       trailer
                        .
                        r_exec
                       trailer
                        (
                        arglist
                         argument
                          test
                           or_test
                            and_test
                             not_test
                              comparison
                               expr
                                xor_expr
                                 and_expr
                                  shift_expr
                                   arith_expr
                                    term
                                     factor
                                      power
                                       atom
                                        testcode
                        )
       \n
     <DEDENT>
 stmt
  compound_stmt
   if_stmt
    if
    test
     or_test
      and_test
       not_test
        comparison
         expr
          xor_expr
           and_expr
            shift_expr
             arith_expr
              term
               factor
                power
                 atom
                  __name__
         comp_op
          ==
         expr
          xor_expr
           and_expr
            shift_expr
             arith_expr
              term
               factor
                power
                 atom
                  '__main__'
    :
    suite
     \n
     <INDENT>
     stmt
      simple_stmt
       small_stmt
        expr_stmt
         testlist
          test
           or_test
            and_test
             not_test
              comparison
               expr
                xor_expr
                 and_expr
                  shift_expr
                   arith_expr
                    term
                     factor
                      power
                       atom
                        _test
                       trailer
                        (
                        )
       \n
     <DEDENT>
 <EOF>
