grammar_rules
 grammar_rule
  num
  =
  modifier
   atomic_modifier
    @
  {
  expression
   term
    node
     terminal
      int
   infix_operator
    sequence_operator
     ~
   term
    node
     (
     expression
      term
       node
        terminal
         "."
      infix_operator
       sequence_operator
        ~
      term
       node
        terminal
         ASCII_DIGIT
       postfix_operator
        repeat_operator
         *
     )
    postfix_operator
     optional_operator
      ?
   infix_operator
    sequence_operator
     ~
   term
    node
     (
     expression
      term
       node
        terminal
         ^"e"
      infix_operator
       sequence_operator
        ~
      term
       node
        terminal
         int
     )
    postfix_operator
     optional_operator
      ?
  }
 grammar_rule
  int
  =
  {
  expression
   term
    node
     (
     expression
      term
       node
        terminal
         "+"
      infix_operator
       choice_operator
        |
      term
       node
        terminal
         "-"
     )
    postfix_operator
     optional_operator
      ?
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      ASCII_DIGIT
    postfix_operator
     repeat_once_operator
      +
  }
 grammar_rule
  operation
  =
  modifier
   silent_modifier
    _
  {
  expression
   term
    node
     terminal
      add
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      subtract
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      multiply
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      divide
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      power
  }
 grammar_rule
  add
  =
  {
  expression
   term
    node
     terminal
      "+"
  }
 grammar_rule
  subtract
  =
  {
  expression
   term
    node
     terminal
      "-"
  }
 grammar_rule
  multiply
  =
  {
  expression
   term
    node
     terminal
      "*"
  }
 grammar_rule
  divide
  =
  {
  expression
   term
    node
     terminal
      "/"
  }
 grammar_rule
  power
  =
  {
  expression
   term
    node
     terminal
      "^"
  }
 grammar_rule
  expr
  =
  {
  expression
   term
    node
     terminal
      term
   infix_operator
    sequence_operator
     ~
   term
    node
     (
     expression
      term
       node
        terminal
         operation
      infix_operator
       sequence_operator
        ~
      term
       node
        terminal
         term
     )
    postfix_operator
     repeat_operator
      *
  }
 grammar_rule
  term
  =
  modifier
   silent_modifier
    _
  {
  expression
   term
    node
     terminal
      num
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      "("
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      expr
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      ")"
  }
 grammar_rule
  calculation
  =
  modifier
   silent_modifier
    _
  {
  expression
   term
    node
     terminal
      SOI
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      expr
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      EOI
  }
 grammar_rule
  WHITESPACE
  =
  modifier
   silent_modifier
    _
  {
  expression
   term
    node
     terminal
      " "
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      "\t"
  }
 <EOF>
