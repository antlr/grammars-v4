grammar_rules
 grammar_rule
  toml
  =
  {
  expression
   term
    node
     terminal
      SOI
   infix_operator
    sequence_operator
     ~
   term
    node
     (
     expression
      term
       node
        terminal
         table
      infix_operator
       choice_operator
        |
      term
       node
        terminal
         array_table
      infix_operator
       choice_operator
        |
      term
       node
        terminal
         pair
     )
    postfix_operator
     repeat_operator
      *
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      EOI
  }
 grammar_rule
  table
  =
  {
  expression
   term
    node
     terminal
      "["
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      key
   infix_operator
    sequence_operator
     ~
   term
    node
     (
     expression
      term
       node
        terminal
         "."
      infix_operator
       sequence_operator
        ~
      term
       node
        terminal
         key
     )
    postfix_operator
     repeat_operator
      *
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      "]"
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      pair
    postfix_operator
     repeat_operator
      *
  }
 grammar_rule
  array_table
  =
  {
  expression
   term
    node
     terminal
      "[["
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      key
   infix_operator
    sequence_operator
     ~
   term
    node
     (
     expression
      term
       node
        terminal
         "."
      infix_operator
       sequence_operator
        ~
      term
       node
        terminal
         key
     )
    postfix_operator
     repeat_operator
      *
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      "]]"
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      pair
    postfix_operator
     repeat_operator
      *
  }
 grammar_rule
  pair
  =
  {
  expression
   term
    node
     terminal
      key
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      "="
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      value
  }
 grammar_rule
  key
  =
  modifier
   atomic_modifier
    @
  {
  expression
   term
    node
     terminal
      identifier
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      string
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      literal
  }
 grammar_rule
  value
  =
  modifier
   silent_modifier
    _
  {
  expression
   term
    node
     terminal
      inline_table
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      array
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      multi_line_string
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      string
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      multi_line_literal
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      literal
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      date_time
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      local_date_time
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      full_date
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      partial_time
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      float
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      integer
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      boolean
  }
 grammar_rule
  inline_table
  =
  {
  expression
   term
    node
     terminal
      "{"
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      pair
   infix_operator
    sequence_operator
     ~
   term
    node
     (
     expression
      term
       node
        terminal
         ","
      infix_operator
       sequence_operator
        ~
      term
       node
        terminal
         pair
     )
    postfix_operator
     repeat_operator
      *
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      ","
    postfix_operator
     optional_operator
      ?
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      "}"
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      "{"
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      "}"
  }
 grammar_rule
  array
  =
  {
  expression
   term
    node
     terminal
      "["
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      value
   infix_operator
    sequence_operator
     ~
   term
    node
     (
     expression
      term
       node
        terminal
         ","
      infix_operator
       sequence_operator
        ~
      term
       node
        terminal
         value
     )
    postfix_operator
     repeat_operator
      *
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      ","
    postfix_operator
     optional_operator
      ?
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      "]"
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      "["
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      "]"
  }
 grammar_rule
  identifier
  =
  {
  expression
   term
    node
     (
     expression
      term
       node
        terminal
         ASCII_ALPHANUMERIC
      infix_operator
       choice_operator
        |
      term
       node
        terminal
         "_"
      infix_operator
       choice_operator
        |
      term
       node
        terminal
         "-"
     )
    postfix_operator
     repeat_once_operator
      +
  }
 grammar_rule
  multi_line_string
  =
  modifier
   atomic_modifier
    @
  {
  expression
   term
    node
     terminal
      "\"\"\""
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      inner
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      "\"\"\""
  }
 grammar_rule
  string
  =
  modifier
   atomic_modifier
    @
  {
  expression
   term
    node
     terminal
      "\""
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      inner
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      "\""
  }
 grammar_rule
  inner
  =
  modifier
   atomic_modifier
    @
  {
  expression
   term
    node
     (
     expression
      term
       prefix_operator
        negative_predicate_operator
         !
       node
        (
        expression
         term
          node
           terminal
            "\""
         infix_operator
          choice_operator
           |
         term
          node
           terminal
            "\\"
         infix_operator
          choice_operator
           |
         term
          node
           terminal
            "\u{0000}"
         infix_operator
          choice_operator
           |
         term
          node
           terminal
            "\u{001F}"
        )
      infix_operator
       sequence_operator
        ~
      term
       node
        terminal
         ANY
     )
    postfix_operator
     repeat_operator
      *
   infix_operator
    sequence_operator
     ~
   term
    node
     (
     expression
      term
       node
        terminal
         escape
      infix_operator
       sequence_operator
        ~
      term
       node
        terminal
         inner
     )
    postfix_operator
     optional_operator
      ?
  }
 grammar_rule
  multi_line_literal
  =
  modifier
   atomic_modifier
    @
  {
  expression
   term
    node
     terminal
      "'''"
   infix_operator
    sequence_operator
     ~
   term
    node
     (
     expression
      term
       prefix_operator
        negative_predicate_operator
         !
       node
        terminal
         "'''"
      infix_operator
       sequence_operator
        ~
      term
       node
        terminal
         ANY
     )
    postfix_operator
     repeat_operator
      *
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      "'''"
  }
 grammar_rule
  literal
  =
  modifier
   atomic_modifier
    @
  {
  expression
   term
    node
     terminal
      "'"
   infix_operator
    sequence_operator
     ~
   term
    node
     (
     expression
      term
       prefix_operator
        negative_predicate_operator
         !
       node
        terminal
         "'"
      infix_operator
       sequence_operator
        ~
      term
       node
        terminal
         ANY
     )
    postfix_operator
     repeat_operator
      *
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      "'"
  }
 grammar_rule
  escape
  =
  modifier
   atomic_modifier
    @
  {
  expression
   term
    node
     terminal
      "\\"
   infix_operator
    sequence_operator
     ~
   term
    node
     (
     expression
      term
       node
        terminal
         "b"
      infix_operator
       choice_operator
        |
      term
       node
        terminal
         "t"
      infix_operator
       choice_operator
        |
      term
       node
        terminal
         "n"
      infix_operator
       choice_operator
        |
      term
       node
        terminal
         "f"
      infix_operator
       choice_operator
        |
      term
       node
        terminal
         "r"
      infix_operator
       choice_operator
        |
      term
       node
        terminal
         "\""
      infix_operator
       choice_operator
        |
      term
       node
        terminal
         "\\"
      infix_operator
       choice_operator
        |
      term
       node
        terminal
         unicode
      infix_operator
       choice_operator
        |
      term
       node
        terminal
         NEWLINE
     )
    postfix_operator
     optional_operator
      ?
  }
 grammar_rule
  unicode
  =
  modifier
   atomic_modifier
    @
  {
  expression
   term
    node
     terminal
      "u"
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      ASCII_HEX_DIGIT
    postfix_operator
     repeat_exact
      {
      4
      }
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      "U"
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      ASCII_HEX_DIGIT
    postfix_operator
     repeat_exact
      {
      8
      }
  }
 grammar_rule
  date_time
  =
  modifier
   compound_atomic_modifier
    $
  {
  expression
   term
    node
     terminal
      full_date
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      "T"
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      full_time
  }
 grammar_rule
  local_date_time
  =
  modifier
   compound_atomic_modifier
    $
  {
  expression
   term
    node
     terminal
      full_date
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      "T"
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      partial_time
  }
 grammar_rule
  partial_time
  =
  modifier
   compound_atomic_modifier
    $
  {
  expression
   term
    node
     terminal
      time_hour
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      ":"
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      time_minute
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      ":"
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      time_second
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      time_secfrac
    postfix_operator
     optional_operator
      ?
  }
 grammar_rule
  full_date
  =
  modifier
   compound_atomic_modifier
    $
  {
  expression
   term
    node
     terminal
      date_fullyear
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      "-"
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      date_month
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      "-"
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      date_mday
  }
 grammar_rule
  full_time
  =
  modifier
   compound_atomic_modifier
    $
  {
  expression
   term
    node
     terminal
      partial_time
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      time_offset
  }
 grammar_rule
  date_fullyear
  =
  modifier
   atomic_modifier
    @
  {
  expression
   term
    node
     terminal
      ASCII_DIGIT
    postfix_operator
     repeat_exact
      {
      4
      }
  }
 grammar_rule
  date_month
  =
  modifier
   atomic_modifier
    @
  {
  expression
   term
    node
     terminal
      ASCII_DIGIT
    postfix_operator
     repeat_exact
      {
      2
      }
  }
 grammar_rule
  date_mday
  =
  modifier
   atomic_modifier
    @
  {
  expression
   term
    node
     terminal
      ASCII_DIGIT
    postfix_operator
     repeat_exact
      {
      2
      }
  }
 grammar_rule
  time_hour
  =
  modifier
   atomic_modifier
    @
  {
  expression
   term
    node
     terminal
      ASCII_DIGIT
    postfix_operator
     repeat_exact
      {
      2
      }
  }
 grammar_rule
  time_minute
  =
  modifier
   atomic_modifier
    @
  {
  expression
   term
    node
     terminal
      ASCII_DIGIT
    postfix_operator
     repeat_exact
      {
      2
      }
  }
 grammar_rule
  time_second
  =
  modifier
   atomic_modifier
    @
  {
  expression
   term
    node
     terminal
      ASCII_DIGIT
    postfix_operator
     repeat_exact
      {
      2
      }
  }
 grammar_rule
  time_secfrac
  =
  modifier
   atomic_modifier
    @
  {
  expression
   term
    node
     terminal
      "."
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      ASCII_DIGIT
    postfix_operator
     repeat_once_operator
      +
  }
 grammar_rule
  time_offset
  =
  modifier
   compound_atomic_modifier
    $
  {
  expression
   term
    node
     terminal
      "Z"
   infix_operator
    choice_operator
     |
   term
    node
     (
     expression
      term
       node
        terminal
         "+"
      infix_operator
       choice_operator
        |
      term
       node
        terminal
         "-"
     )
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      time_hour
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      ":"
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      time_minute
  }
 grammar_rule
  integer
  =
  modifier
   atomic_modifier
    @
  {
  expression
   term
    node
     (
     expression
      term
       node
        terminal
         "+"
      infix_operator
       choice_operator
        |
      term
       node
        terminal
         "-"
     )
    postfix_operator
     optional_operator
      ?
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      int
  }
 grammar_rule
  float
  =
  modifier
   atomic_modifier
    @
  {
  expression
   term
    node
     (
     expression
      term
       node
        terminal
         "+"
      infix_operator
       choice_operator
        |
      term
       node
        terminal
         "-"
     )
    postfix_operator
     optional_operator
      ?
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      int
   infix_operator
    sequence_operator
     ~
   term
    node
     (
     expression
      term
       node
        terminal
         "."
      infix_operator
       sequence_operator
        ~
      term
       node
        terminal
         digits
      infix_operator
       sequence_operator
        ~
      term
       node
        terminal
         exp
       postfix_operator
        optional_operator
         ?
      infix_operator
       choice_operator
        |
      term
       node
        terminal
         exp
     )
    postfix_operator
     optional_operator
      ?
  }
 grammar_rule
  int
  =
  modifier
   atomic_modifier
    @
  {
  expression
   term
    node
     terminal
      "0"
   infix_operator
    choice_operator
     |
   term
    node
     (
     expression
      term
       node
        terminal
         ASCII_NONZERO_DIGIT
      infix_operator
       sequence_operator
        ~
      term
       node
        terminal
         digits
       postfix_operator
        optional_operator
         ?
     )
  }
 grammar_rule
  digits
  =
  modifier
   atomic_modifier
    @
  {
  expression
   term
    node
     (
     expression
      term
       node
        terminal
         ASCII_DIGIT
      infix_operator
       choice_operator
        |
      term
       node
        (
        expression
         term
          node
           terminal
            "_"
         infix_operator
          sequence_operator
           ~
         term
          node
           terminal
            ASCII_DIGIT
        )
     )
    postfix_operator
     repeat_once_operator
      +
  }
 grammar_rule
  exp
  =
  modifier
   atomic_modifier
    @
  {
  expression
   term
    node
     (
     expression
      term
       node
        terminal
         "E"
      infix_operator
       choice_operator
        |
      term
       node
        terminal
         "e"
     )
   infix_operator
    sequence_operator
     ~
   term
    node
     (
     expression
      term
       node
        terminal
         "+"
      infix_operator
       choice_operator
        |
      term
       node
        terminal
         "-"
     )
    postfix_operator
     optional_operator
      ?
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      int
  }
 grammar_rule
  boolean
  =
  {
  expression
   term
    node
     terminal
      "true"
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      "false"
  }
 grammar_rule
  WHITESPACE
  =
  modifier
   silent_modifier
    _
  {
  expression
   term
    node
     terminal
      " "
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      "\t"
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      NEWLINE
  }
 grammar_rule
  COMMENT
  =
  modifier
   silent_modifier
    _
  {
  expression
   term
    node
     terminal
      "#"
   infix_operator
    sequence_operator
     ~
   term
    node
     (
     expression
      term
       prefix_operator
        negative_predicate_operator
         !
       node
        terminal
         NEWLINE
      infix_operator
       sequence_operator
        ~
      term
       node
        terminal
         ANY
     )
    postfix_operator
     repeat_operator
      *
  }
 <EOF>
