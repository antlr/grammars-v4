grammar_rules
 grammar_rule
  program
  =
  modifier
   silent_modifier
    _
  {
  expression
   term
    node
     terminal
      SOI
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      "\n"
    postfix_operator
     repeat_operator
      *
   infix_operator
    sequence_operator
     ~
   term
    node
     (
     expression
      term
       node
        terminal
         stmt
      infix_operator
       sequence_operator
        ~
      term
       node
        terminal
         "\n"
       postfix_operator
        repeat_once_operator
         +
     )
    postfix_operator
     repeat_operator
      *
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      stmt
    postfix_operator
     optional_operator
      ?
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      EOI
  }
 grammar_rule
  stmt
  =
  modifier
   silent_modifier
    _
  {
  expression
   term
    node
     terminal
      expr
  }
 grammar_rule
  expr
  =
  {
  expression
   term
    node
     terminal
      assgmtExpr
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      monadicExpr
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      dyadicExpr
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      string
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      terms
  }
 grammar_rule
  monadicExpr
  =
  {
  expression
   term
    node
     terminal
      verb
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      expr
  }
 grammar_rule
  dyadicExpr
  =
  {
  expression
   term
    node
     (
     expression
      term
       node
        terminal
         monadicExpr
      infix_operator
       choice_operator
        |
      term
       node
        terminal
         terms
     )
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      verb
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      expr
  }
 grammar_rule
  assgmtExpr
  =
  {
  expression
   term
    node
     terminal
      ident
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      "=:"
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      expr
  }
 grammar_rule
  terms
  =
  {
  expression
   term
    node
     terminal
      term
    postfix_operator
     repeat_once_operator
      +
  }
 grammar_rule
  term
  =
  modifier
   silent_modifier
    _
  {
  expression
   term
    node
     terminal
      decimal
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      integer
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      ident
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      "("
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      expr
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      ")"
  }
 grammar_rule
  verb
  =
  {
  expression
   term
    node
     terminal
      ">:"
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      "*:"
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      "-"
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      "%"
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      "#"
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      ">."
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      "+"
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      "*"
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      "<"
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      "="
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      "^"
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      "|"
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      ">"
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      "$"
  }
 grammar_rule
  integer
  =
  modifier
   atomic_modifier
    @
  {
  expression
   term
    node
     terminal
      "_"
    postfix_operator
     optional_operator
      ?
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      ASCII_DIGIT
    postfix_operator
     repeat_once_operator
      +
  }
 grammar_rule
  decimal
  =
  modifier
   atomic_modifier
    @
  {
  expression
   term
    node
     terminal
      "_"
    postfix_operator
     optional_operator
      ?
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      ASCII_DIGIT
    postfix_operator
     repeat_once_operator
      +
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      "."
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      ASCII_DIGIT
    postfix_operator
     repeat_operator
      *
  }
 grammar_rule
  ident
  =
  modifier
   atomic_modifier
    @
  {
  expression
   term
    node
     terminal
      ASCII_ALPHA
   infix_operator
    sequence_operator
     ~
   term
    node
     (
     expression
      term
       node
        terminal
         ASCII_ALPHANUMERIC
      infix_operator
       choice_operator
        |
      term
       node
        terminal
         "_"
     )
    postfix_operator
     repeat_operator
      *
  }
 grammar_rule
  string
  =
  modifier
   atomic_modifier
    @
  {
  expression
   term
    node
     terminal
      "'"
   infix_operator
    sequence_operator
     ~
   term
    node
     (
     expression
      term
       node
        terminal
         "''"
      infix_operator
       choice_operator
        |
      term
       node
        (
        expression
         term
          prefix_operator
           negative_predicate_operator
            !
          node
           terminal
            "'"
         infix_operator
          sequence_operator
           ~
         term
          node
           terminal
            ANY
        )
     )
    postfix_operator
     repeat_operator
      *
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      "'"
  }
 grammar_rule
  WHITESPACE
  =
  modifier
   silent_modifier
    _
  {
  expression
   term
    node
     terminal
      " "
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      "\t"
  }
 grammar_rule
  COMMENT
  =
  modifier
   silent_modifier
    _
  {
  expression
   term
    node
     terminal
      "NB."
   infix_operator
    sequence_operator
     ~
   term
    node
     (
     expression
      term
       prefix_operator
        negative_predicate_operator
         !
       node
        terminal
         "\n"
      infix_operator
       sequence_operator
        ~
      term
       node
        terminal
         ANY
     )
    postfix_operator
     repeat_operator
      *
  }
 <EOF>
