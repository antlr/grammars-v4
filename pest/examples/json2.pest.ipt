grammar_rules
 grammar_rule
  json
  =
  modifier
   silent_modifier
    _
  {
  expression
   term
    node
     terminal
      SOI
   infix_operator
    sequence_operator
     ~
   term
    node
     (
     expression
      term
       node
        terminal
         object
      infix_operator
       choice_operator
        |
      term
       node
        terminal
         array
     )
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      EOI
  }
 grammar_rule
  value
  =
  modifier
   silent_modifier
    _
  {
  expression
   term
    node
     terminal
      object
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      array
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      string
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      number
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      boolean
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      null
  }
 grammar_rule
  object
  =
  {
  expression
   term
    node
     terminal
      "{"
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      "}"
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      "{"
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      pair
   infix_operator
    sequence_operator
     ~
   term
    node
     (
     expression
      term
       node
        terminal
         ","
      infix_operator
       sequence_operator
        ~
      term
       node
        terminal
         pair
     )
    postfix_operator
     repeat_operator
      *
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      "}"
  }
 grammar_rule
  pair
  =
  {
  expression
   term
    node
     terminal
      string
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      ":"
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      value
  }
 grammar_rule
  array
  =
  {
  expression
   term
    node
     terminal
      "["
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      "]"
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      "["
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      value
   infix_operator
    sequence_operator
     ~
   term
    node
     (
     expression
      term
       node
        terminal
         ","
      infix_operator
       sequence_operator
        ~
      term
       node
        terminal
         value
     )
    postfix_operator
     repeat_operator
      *
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      "]"
  }
 grammar_rule
  string
  =
  modifier
   compound_atomic_modifier
    $
  {
  expression
   term
    node
     terminal
      "\""
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      inner
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      "\""
  }
 grammar_rule
  inner
  =
  modifier
   atomic_modifier
    @
  {
  expression
   term
    node
     terminal
      char
    postfix_operator
     repeat_operator
      *
  }
 grammar_rule
  char
  =
  {
  expression
   term
    prefix_operator
     negative_predicate_operator
      !
    node
     (
     expression
      term
       node
        terminal
         "\""
      infix_operator
       choice_operator
        |
      term
       node
        terminal
         "\\"
     )
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      ANY
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      "\\"
   infix_operator
    sequence_operator
     ~
   term
    node
     (
     expression
      term
       node
        terminal
         "\""
      infix_operator
       choice_operator
        |
      term
       node
        terminal
         "\\"
      infix_operator
       choice_operator
        |
      term
       node
        terminal
         "/"
      infix_operator
       choice_operator
        |
      term
       node
        terminal
         "b"
      infix_operator
       choice_operator
        |
      term
       node
        terminal
         "f"
      infix_operator
       choice_operator
        |
      term
       node
        terminal
         "n"
      infix_operator
       choice_operator
        |
      term
       node
        terminal
         "r"
      infix_operator
       choice_operator
        |
      term
       node
        terminal
         "t"
     )
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      "\\"
   infix_operator
    sequence_operator
     ~
   term
    node
     (
     expression
      term
       node
        terminal
         "u"
      infix_operator
       sequence_operator
        ~
      term
       node
        terminal
         ASCII_HEX_DIGIT
       postfix_operator
        repeat_exact
         {
         4
         }
     )
  }
 grammar_rule
  number
  =
  modifier
   atomic_modifier
    @
  {
  expression
   term
    node
     terminal
      "-"
    postfix_operator
     optional_operator
      ?
   infix_operator
    sequence_operator
     ~
   term
    node
     (
     expression
      term
       node
        terminal
         "0"
      infix_operator
       choice_operator
        |
      term
       node
        terminal
         ASCII_NONZERO_DIGIT
      infix_operator
       sequence_operator
        ~
      term
       node
        terminal
         ASCII_DIGIT
       postfix_operator
        repeat_operator
         *
     )
   infix_operator
    sequence_operator
     ~
   term
    node
     (
     expression
      term
       node
        terminal
         "."
      infix_operator
       sequence_operator
        ~
      term
       node
        terminal
         ASCII_DIGIT
       postfix_operator
        repeat_operator
         *
     )
    postfix_operator
     optional_operator
      ?
   infix_operator
    sequence_operator
     ~
   term
    node
     (
     expression
      term
       node
        terminal
         ^"e"
      infix_operator
       sequence_operator
        ~
      term
       node
        (
        expression
         term
          node
           terminal
            "+"
         infix_operator
          choice_operator
           |
         term
          node
           terminal
            "-"
        )
       postfix_operator
        optional_operator
         ?
      infix_operator
       sequence_operator
        ~
      term
       node
        terminal
         ASCII_DIGIT
       postfix_operator
        repeat_once_operator
         +
     )
    postfix_operator
     optional_operator
      ?
  }
 grammar_rule
  boolean
  =
  {
  expression
   term
    node
     terminal
      "true"
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      "false"
  }
 grammar_rule
  null
  =
  {
  expression
   term
    node
     terminal
      "null"
  }
 grammar_rule
  WHITESPACE
  =
  modifier
   silent_modifier
    _
  {
  expression
   term
    node
     terminal
      " "
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      "\t"
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      "\r"
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      "\n"
  }
 <EOF>
