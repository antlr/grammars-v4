grammar_rules
 grammar_rule
  dotgraph
  =
  {
  expression
   term
    node
     terminal
      strict
    postfix_operator
     optional_operator
      ?
   infix_operator
    sequence_operator
     ~
   term
    node
     (
     expression
      term
       node
        terminal
         graph
      infix_operator
       choice_operator
        |
      term
       node
        terminal
         digraph
     )
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      ident
    postfix_operator
     optional_operator
      ?
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      "{"
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      stmt_list
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      "}"
  }
 grammar_rule
  stmt_list
  =
  {
  expression
   term
    node
     (
     expression
      term
       node
        terminal
         stmt
      infix_operator
       sequence_operator
        ~
      term
       node
        terminal
         ";"
       postfix_operator
        optional_operator
         ?
      infix_operator
       sequence_operator
        ~
      term
       node
        terminal
         stmt_list
     )
    postfix_operator
     optional_operator
      ?
  }
 grammar_rule
  stmt
  =
  {
  expression
   term
    node
     terminal
      subgraph
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      edge_stmt
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      attr_stmt
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      id_eq
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      node_stmt
  }
 grammar_rule
  attr_stmt
  =
  {
  expression
   term
    node
     (
     expression
      term
       node
        terminal
         graph
      infix_operator
       choice_operator
        |
      term
       node
        terminal
         node
      infix_operator
       choice_operator
        |
      term
       node
        terminal
         edge
     )
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      attr_list
  }
 grammar_rule
  attr_list
  =
  {
  expression
   term
    node
     terminal
      "["
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      a_list
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      "]"
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      attr_list
    postfix_operator
     optional_operator
      ?
  }
 grammar_rule
  a_list
  =
  {
  expression
   term
    node
     terminal
      ident
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      "="
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      ident
   infix_operator
    sequence_operator
     ~
   term
    node
     (
     expression
      term
       node
        terminal
         ";"
      infix_operator
       choice_operator
        |
      term
       node
        terminal
         ","
     )
    postfix_operator
     optional_operator
      ?
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      a_list
    postfix_operator
     optional_operator
      ?
  }
 grammar_rule
  edge_stmt
  =
  {
  expression
   term
    node
     terminal
      node_id
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      edge_rhs
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      attr_list
    postfix_operator
     optional_operator
      ?
  }
 grammar_rule
  edge_rhs
  =
  {
  expression
   term
    node
     terminal
      edgeop
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      node_id
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      edge_rhs
    postfix_operator
     optional_operator
      ?
  }
 grammar_rule
  edgeop
  =
  modifier
   silent_modifier
    _
  {
  expression
   term
    node
     terminal
      "--"
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      "->"
  }
 grammar_rule
  node_stmt
  =
  {
  expression
   term
    node
     terminal
      node_id
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      attr_list
    postfix_operator
     optional_operator
      ?
  }
 grammar_rule
  node_id
  =
  {
  expression
   term
    node
     terminal
      ident
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      port
    postfix_operator
     optional_operator
      ?
  }
 grammar_rule
  port
  =
  {
  expression
   term
    node
     terminal
      ":"
   infix_operator
    sequence_operator
     ~
   term
    node
     terminal
      ident
  }
 grammar_rule
  ident
  =
  modifier
   silent_modifier
    _
  {
  expression
   term
    node
     (
     expression
      term
       node
        terminal
         ASCII_ALPHA
      infix_operator
       choice_operator
        |
      term
       node
        terminal
         "_"
     )
   infix_operator
    sequence_operator
     ~
   term
    node
     (
     expression
      term
       node
        terminal
         ASCII_ALPHANUMERIC
      infix_operator
       choice_operator
        |
      term
       node
        terminal
         "_"
     )
    postfix_operator
     repeat_operator
      *
  }
 grammar_rule
  WHITESPACE
  =
  modifier
   silent_modifier
    _
  {
  expression
   term
    node
     terminal
      " "
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      "\t"
   infix_operator
    choice_operator
     |
   term
    node
     terminal
      NEWLINE
  }
 <EOF>
