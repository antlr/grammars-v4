sourceFile
 packageClause
  package
  main
 eos
  \n\n
 importDecl
  import
  (
  importSpec
   importPath
    string_
     "fmt"
  eos
   \n
  importSpec
   importPath
    string_
     "time"
  eos
   \n
  )
 eos
  \n\n
 declaration
  typeDecl
   type
   (
   typeSpec
    typeDef
     Abser
     type_
      typeLit
       interfaceType
        interface
        {
        methodSpec
         Abs
         parameters
          (
          )
         result
          type_
           typeName
            float64
        eos
         \n
        }
   eos
    \n
   typeSpec
    typeDef
     MyError
     type_
      typeLit
       structType
        struct
        {
        fieldDecl
         identifierList
          When
         type_
          typeName
           qualifiedIdent
            time
            .
            Time
        eos
         \n
        fieldDecl
         identifierList
          What
         type_
          typeName
           string
        eos
         \n
        }
   eos
    \n\n
   typeSpec
    typeDef
     MyCustomError
     type_
      typeLit
       structType
        struct
        {
        fieldDecl
         identifierList
          Message
         type_
          typeName
           string
        eos
         \n
        fieldDecl
         embeddedField
          typeName
           Abser
        eos
         \n
        fieldDecl
         embeddedField
          typeName
           MyError
        eos
         \n
        }
   eos
    \n
   )
 eos
  \n\n
 methodDecl
  func
  receiver
   parameters
    (
    parameterDecl
     identifierList
      myErr
     type_
      typeLit
       pointerType
        *
        type_
         typeName
          MyCustomError
    )
  Abs
  signature
   parameters
    (
    )
   result
    type_
     typeName
      float64
  block
   {
   statementList
    statement
     returnStmt
      return
      expressionList
       expression
        primaryExpr
         operand
          literal
           basicLit
            0.0
    eos
     \n
   }
 eos
  \n\n
 functionDecl
  func
  main
  signature
   parameters
    (
    )
  block
   {
   statementList
    statement
     simpleStmt
      shortVarDecl
       identifierList
        a
       :=
       expressionList
        expression
         primaryExpr
          operand
           literal
            compositeLit
             literalType
              typeName
               MyCustomError
             literalValue
              {
              elementList
               keyedElement
                element
                 expression
                  primaryExpr
                   operand
                    literal
                     basicLit
                      string_
                       "New One"
               ,
               keyedElement
                element
                 expression
                  primaryExpr
                   operand
                    literal
                     basicLit
                      nil
               ,
               keyedElement
                element
                 expression
                  primaryExpr
                   operand
                    literal
                     compositeLit
                      literalType
                       typeName
                        MyError
                      literalValue
                       {
                       elementList
                        keyedElement
                         element
                          expression
                           primaryExpr
                            primaryExpr
                             primaryExpr
                              operand
                               operandName
                                time
                             .
                             Now
                            arguments
                             (
                             )
                        ,
                        keyedElement
                         element
                          expression
                           primaryExpr
                            operand
                             literal
                              basicLit
                               string_
                                "Hello"
                       }
              }
    eos
     \n
    statement
     simpleStmt
      expressionStmt
       expression
        primaryExpr
         primaryExpr
          primaryExpr
           operand
            operandName
             a
          .
          Abs
         arguments
          (
          )
    eos
     \n
    statement
     simpleStmt
      assignment
       expressionList
        expression
         primaryExpr
          primaryExpr
           operand
            operandName
             a
          .
          Message
       assign_op
        =
       expressionList
        expression
         primaryExpr
          operand
           literal
            basicLit
             string_
              "New"
    eos
     \n
    statement
     simpleStmt
      expressionStmt
       expression
        primaryExpr
         primaryExpr
          primaryExpr
           operand
            operandName
             fmt
          .
          Println
         arguments
          (
          expressionList
           expression
            primaryExpr
             operand
              literal
               basicLit
                string_
                 "MyCustomError method = %v"
           ,
           expression
            primaryExpr
             primaryExpr
              primaryExpr
               operand
                operandName
                 a
              .
              Abs
             arguments
              (
              )
          )
    eos
     \n
   }
 eos
  <EOF>
 <EOF>
