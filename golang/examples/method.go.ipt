sourceFile
 packageClause
  package
  samples
 eos
  \n\n
 importDecl
  import
  (
  importSpec
   importPath
    string_
     "fmt"
  eos
   \n
  importSpec
   importPath
    string_
     "math"
  eos
   \n
  )
 eos
  \n\n
 declaration
  typeDecl
   type
   typeSpec
    typeDef
     Vertex
     type_
      typeLit
       structType
        struct
        {
        fieldDecl
         identifierList
          X
          ,
          Y
         type_
          typeName
           float64
        eos
         \n
        }
 eos
  \n\n
 methodDecl
  func
  receiver
   parameters
    (
    parameterDecl
     identifierList
      v
     type_
      typeName
       Vertex
    )
  Abs
  signature
   parameters
    (
    )
   result
    type_
     typeName
      float64
  block
   {
   statementList
    statement
     returnStmt
      return
      expressionList
       expression
        primaryExpr
         primaryExpr
          primaryExpr
           operand
            operandName
             math
          .
          Sqrt
         arguments
          (
          expressionList
           expression
            expression
             expression
              primaryExpr
               primaryExpr
                operand
                 operandName
                  v
               .
               X
             *
             expression
              primaryExpr
               primaryExpr
                operand
                 operandName
                  v
               .
               X
            +
            expression
             expression
              primaryExpr
               primaryExpr
                operand
                 operandName
                  v
               .
               Y
             *
             expression
              primaryExpr
               primaryExpr
                operand
                 operandName
                  v
               .
               Y
          )
    eos
     \n
   }
 eos
  \n\n
 functionDecl
  func
  Methods
  signature
   parameters
    (
    )
  block
   {
   statementList
    statement
     simpleStmt
      shortVarDecl
       identifierList
        v
       :=
       expressionList
        expression
         primaryExpr
          operand
           literal
            compositeLit
             literalType
              typeName
               Vertex
             literalValue
              {
              elementList
               keyedElement
                element
                 expression
                  primaryExpr
                   operand
                    literal
                     basicLit
                      integer
                       3
               ,
               keyedElement
                element
                 expression
                  primaryExpr
                   operand
                    literal
                     basicLit
                      integer
                       4
              }
    eos
     \n
    statement
     simpleStmt
      expressionStmt
       expression
        primaryExpr
         primaryExpr
          primaryExpr
           operand
            operandName
             fmt
          .
          Println
         arguments
          (
          expressionList
           expression
            primaryExpr
             primaryExpr
              primaryExpr
               operand
                operandName
                 v
              .
              Abs
             arguments
              (
              )
          )
    eos
     \n
   }
 eos
  <EOF>
 <EOF>
