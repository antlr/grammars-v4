sourceFile
 packageClause
  package
  samples
 eos
  \n\n
 functionDecl
  func
  Selects
  signature
   parameters
    (
    )
  block
   {
   statementList
    statement
     declaration
      varDecl
       var
       varSpec
        identifierList
         a
        type_
         typeLit
          sliceType
           [
           ]
           elementType
            type_
             typeName
              int
    eos
     \n
    statement
     declaration
      varDecl
       var
       varSpec
        identifierList
         c
         ,
         c1
         ,
         c2
         ,
         c3
         ,
         c4
         ,
         c5
        type_
         typeLit
          channelType
           chan
           elementType
            type_
             typeName
              int
    eos
     \n
    statement
     declaration
      varDecl
       var
       varSpec
        identifierList
         i1
         ,
         i2
        type_
         typeName
          int
    eos
     \n
    statement
     selectStmt
      select
      {
      commClause
       commCase
        case
        recvStmt
         expressionList
          expression
           primaryExpr
            operand
             operandName
              i1
         =
         expression
          <-
          expression
           primaryExpr
            operand
             operandName
              c1
       :
       statementList
        statement
         simpleStmt
          expressionStmt
           expression
            primaryExpr
             primaryExpr
              operand
               operandName
                print
             arguments
              (
              expressionList
               expression
                primaryExpr
                 operand
                  literal
                   basicLit
                    string_
                     "received "
               ,
               expression
                primaryExpr
                 operand
                  operandName
                   i1
               ,
               expression
                primaryExpr
                 operand
                  literal
                   basicLit
                    string_
                     " from c1\n"
              )
        eos
         \n
      commClause
       commCase
        case
        sendStmt
         expression
          primaryExpr
           operand
            operandName
             c2
         <-
         expression
          primaryExpr
           operand
            operandName
             i2
       :
       statementList
        statement
         simpleStmt
          expressionStmt
           expression
            primaryExpr
             primaryExpr
              operand
               operandName
                print
             arguments
              (
              expressionList
               expression
                primaryExpr
                 operand
                  literal
                   basicLit
                    string_
                     "sent "
               ,
               expression
                primaryExpr
                 operand
                  operandName
                   i2
               ,
               expression
                primaryExpr
                 operand
                  literal
                   basicLit
                    string_
                     " to c2\n"
              )
        eos
         \n
      commClause
       commCase
        case
        recvStmt
         identifierList
          i3
          ,
          ok
         :=
         expression
          primaryExpr
           operand
            (
            expression
             <-
             expression
              primaryExpr
               operand
                operandName
                 c3
            )
       :
       statementList
        statement
         ifStmt
          if
          expression
           primaryExpr
            operand
             operandName
              ok
          block
           {
           statementList
            statement
             simpleStmt
              expressionStmt
               expression
                primaryExpr
                 primaryExpr
                  operand
                   operandName
                    print
                 arguments
                  (
                  expressionList
                   expression
                    primaryExpr
                     operand
                      literal
                       basicLit
                        string_
                         "received "
                   ,
                   expression
                    primaryExpr
                     operand
                      operandName
                       i3
                   ,
                   expression
                    primaryExpr
                     operand
                      literal
                       basicLit
                        string_
                         " from c3\n"
                  )
            eos
             \n
           }
          else
          block
           {
           statementList
            statement
             simpleStmt
              expressionStmt
               expression
                primaryExpr
                 primaryExpr
                  operand
                   operandName
                    print
                 arguments
                  (
                  expressionList
                   expression
                    primaryExpr
                     operand
                      literal
                       basicLit
                        string_
                         "c3 is closed\n"
                  )
            eos
             \n
           }
        eos
         \n
      commClause
       commCase
        case
        recvStmt
         expression
          <-
          expression
           primaryExpr
            operand
             operandName
              c5
       :
       statementList
        statement
         simpleStmt
          expressionStmt
           expression
            primaryExpr
             primaryExpr
              operand
               operandName
                print
             arguments
              (
              expressionList
               expression
                primaryExpr
                 operand
                  literal
                   basicLit
                    string_
                     "received without an assignment"
              )
        eos
         \n
      commClause
       commCase
        case
        recvStmt
         expressionList
          expression
           primaryExpr
            primaryExpr
             operand
              operandName
               a
            index
             [
             expression
              primaryExpr
               primaryExpr
                operand
                 operandName
                  f
               arguments
                (
                )
             ]
         =
         expression
          <-
          expression
           primaryExpr
            operand
             operandName
              c4
       :
      commClause
       commCase
        default
       :
       statementList
        statement
         simpleStmt
          expressionStmt
           expression
            primaryExpr
             primaryExpr
              operand
               operandName
                print
             arguments
              (
              expressionList
               expression
                primaryExpr
                 operand
                  literal
                   basicLit
                    string_
                     "no communication\n"
              )
        eos
         \n
      }
    eos
     \n\n
    statement
     forStmt
      for
      forClause
       simpleStmt
        shortVarDecl
         identifierList
          i
         :=
         expressionList
          expression
           primaryExpr
            operand
             literal
              basicLit
               integer
                0
       eos
        ;
       expression
        expression
         primaryExpr
          operand
           operandName
            i
        <
        expression
         primaryExpr
          operand
           literal
            basicLit
             integer
              10
       eos
        ;
       simpleStmt
        incDecStmt
         expression
          primaryExpr
           operand
            operandName
             i
         ++
      block
       {
       statementList
        statement
         selectStmt
          select
          {
          commClause
           commCase
            case
            sendStmt
             expression
              primaryExpr
               operand
                operandName
                 c
             <-
             expression
              primaryExpr
               operand
                literal
                 basicLit
                  integer
                   0
           :
          commClause
           commCase
            case
            sendStmt
             expression
              primaryExpr
               operand
                operandName
                 c
             <-
             expression
              primaryExpr
               operand
                literal
                 basicLit
                  integer
                   1
           :
          commClause
           commCase
            default
           :
          }
        eos
         \n
       }
    eos
     \n\n
   }
 eos
  \n
 <EOF>
