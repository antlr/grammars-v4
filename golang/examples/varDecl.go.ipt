sourceFile
 packageClause
  package
  samples
 eos
  \n\n
 importDecl
  import
  importSpec
   importPath
    string_
     "fmt"
 eos
  \n\n
 declaration
  varDecl
   var
   varSpec
    identifierList
     entries
    type_
     typeLit
      mapType
       map
       [
       type_
        typeName
         string
       ]
       elementType
        type_
         typeName
          int
 eos
  \n\n
 functionDecl
  func
  multiRet
  signature
   parameters
    (
    )
   result
    parameters
     (
     parameterDecl
      type_
       typeName
        int
     ,
     parameterDecl
      type_
       typeName
        int
     )
  block
   {
   statementList
    statement
     returnStmt
      return
      expressionList
       expression
        primaryExpr
         operand
          literal
           basicLit
            integer
             1
       ,
       expression
        primaryExpr
         operand
          literal
           basicLit
            integer
             2
    eos
     \n
   }
 eos
  \n\n
 functionDecl
  func
  VarDecls
  signature
   parameters
    (
    )
  block
   {
   statementList
    statement
     declaration
      varDecl
       var
       varSpec
        identifierList
         a
        type_
         typeName
          int
    eos
     \n
    statement
     declaration
      varDecl
       var
       varSpec
        identifierList
         b
         ,
         c
        type_
         typeName
          float64
    eos
     \n
    statement
     declaration
      varDecl
       var
       varSpec
        identifierList
         d
        =
        expressionList
         expression
          primaryExpr
           operand
            literal
             basicLit
              integer
               1
    eos
     \n
    statement
     declaration
      varDecl
       var
       varSpec
        identifierList
         e
         ,
         f
        type_
         typeName
          float32
        =
        expressionList
         expression
          -
          expression
           primaryExpr
            operand
             literal
              basicLit
               integer
                1
         ,
         expression
          -
          expression
           primaryExpr
            operand
             literal
              basicLit
               integer
                2
    eos
     \n
    statement
     declaration
      varDecl
       var
       (
       varSpec
        identifierList
         g
        type_
         typeName
          int
       eos
        \n
       varSpec
        identifierList
         h
         ,
         i
         ,
         j
        =
        expressionList
         expression
          primaryExpr
           operand
            literal
             basicLit
              2.0
         ,
         expression
          primaryExpr
           operand
            literal
             basicLit
              3.0
         ,
         expression
          primaryExpr
           operand
            literal
             basicLit
              string_
               "bar"
       eos
        \n
       )
    eos
     \n
    statement
     declaration
      varDecl
       var
       varSpec
        identifierList
         l
         ,
         m
        =
        expressionList
         expression
          primaryExpr
           primaryExpr
            operand
             operandName
              multiRet
           arguments
            (
            )
    eos
     \n
    statement
     simpleStmt
      expressionStmt
       expression
        primaryExpr
         primaryExpr
          primaryExpr
           operand
            operandName
             fmt
          .
          Println
         arguments
          (
          expressionList
           expression
            primaryExpr
             operand
              operandName
               a
           ,
           expression
            primaryExpr
             operand
              operandName
               b
           ,
           expression
            primaryExpr
             operand
              operandName
               c
           ,
           expression
            primaryExpr
             operand
              operandName
               d
           ,
           expression
            primaryExpr
             operand
              operandName
               e
           ,
           expression
            primaryExpr
             operand
              operandName
               f
           ,
           expression
            primaryExpr
             operand
              operandName
               g
           ,
           expression
            primaryExpr
             operand
              operandName
               h
           ,
           expression
            primaryExpr
             operand
              operandName
               i
           ,
           expression
            primaryExpr
             operand
              operandName
               j
           ,
           expression
            primaryExpr
             operand
              operandName
               l
           ,
           expression
            primaryExpr
             operand
              operandName
               m
          )
    eos
     \n
   }
 eos
  \n
 <EOF>
