sourceFile
 packageClause
  package
  samples
 eos
  \n\n
 importDecl
  import
  importSpec
   importPath
    string_
     "fmt"
 eos
  \n\n
 declaration
  typeDecl
   type
   typeSpec
    typeDef
     Vertex2
     type_
      typeLit
       structType
        struct
        {
        fieldDecl
         identifierList
          Lat
          ,
          Long
         type_
          typeName
           float64
        eos
         \n
        }
 eos
  \n\n
 declaration
  varDecl
   var
   varSpec
    identifierList
     s
    type_
     typeLit
      mapType
       map
       [
       type_
        typeName
         int
       ]
       elementType
        type_
         typeName
          string
 eos
  \n
 declaration
  varDecl
   var
   varSpec
    identifierList
     m
    type_
     typeLit
      mapType
       map
       [
       type_
        typeName
         string
       ]
       elementType
        type_
         typeName
          Vertex2
 eos
  \n\n
 functionDecl
  func
  Maps
  signature
   parameters
    (
    )
  block
   {
   statementList
    statement
     simpleStmt
      assignment
       expressionList
        expression
         primaryExpr
          operand
           operandName
            m
       assign_op
        =
       expressionList
        expression
         primaryExpr
          primaryExpr
           operand
            operandName
             make
          arguments
           (
           type_
            typeLit
             mapType
              map
              [
              type_
               typeName
                string
              ]
              elementType
               type_
                typeName
                 Vertex2
           )
    eos
     \n
    statement
     simpleStmt
      assignment
       expressionList
        expression
         primaryExpr
          primaryExpr
           operand
            operandName
             m
          index
           [
           expression
            primaryExpr
             operand
              literal
               basicLit
                string_
                 "Bell Labs"
           ]
       assign_op
        =
       expressionList
        expression
         primaryExpr
          operand
           literal
            compositeLit
             literalType
              typeName
               Vertex2
             literalValue
              {
              elementList
               keyedElement
                element
                 expression
                  primaryExpr
                   operand
                    literal
                     basicLit
                      40.68433
               ,
               keyedElement
                element
                 expression
                  -
                  expression
                   primaryExpr
                    operand
                     literal
                      basicLit
                       74.39967
              ,
              }
    eos
     \n
    statement
     simpleStmt
      assignment
       expressionList
        expression
         primaryExpr
          primaryExpr
           operand
            operandName
             s
          index
           [
           expression
            primaryExpr
             operand
              literal
               basicLit
                integer
                 1
           ]
       assign_op
        =
       expressionList
        expression
         primaryExpr
          operand
           literal
            basicLit
             string_
              "test"
    eos
     \n
    statement
     simpleStmt
      expressionStmt
       expression
        primaryExpr
         primaryExpr
          primaryExpr
           operand
            operandName
             fmt
          .
          Println
         arguments
          (
          expressionList
           expression
            primaryExpr
             primaryExpr
              operand
               operandName
                m
             index
              [
              expression
               primaryExpr
                operand
                 literal
                  basicLit
                   string_
                    "Bell Labs"
              ]
          )
    eos
     \n
   }
 eos
  <EOF>
 <EOF>
