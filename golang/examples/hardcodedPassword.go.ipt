sourceFile
 packageClause
  package
  samples
 eos
  \n\n
 importDecl
  import
  importSpec
   importPath
    string_
     "fmt"
 eos
  \n\n
 declaration
  typeDecl
   type
   typeSpec
    typeDef
     HpType
     type_
      typeLit
       structType
        struct
        {
        }
 eos
  \n\n
 methodDecl
  func
  receiver
   parameters
    (
    parameterDecl
     identifierList
      c
     type_
      typeName
       HpType
    )
  HP
  signature
   parameters
    (
    )
  block
   {
   statementList
    statement
     simpleStmt
      shortVarDecl
       identifierList
        password
       :=
       expressionList
        expression
         primaryExpr
          operand
           literal
            basicLit
             string_
              `hardcoded`
    eos
     \n
    statement
     simpleStmt
      expressionStmt
       expression
        primaryExpr
         primaryExpr
          primaryExpr
           operand
            operandName
             fmt
          .
          Printf
         arguments
          (
          expressionList
           expression
            primaryExpr
             operand
              literal
               basicLit
                string_
                 "Hello, world\nYou type the password=%v\n"
           ,
           expression
            primaryExpr
             operand
              operandName
               password
          )
    eos
     \n
    statement
     simpleStmt
      shortVarDecl
       identifierList
        letters
       :=
       expressionList
        expression
         primaryExpr
          operand
           literal
            compositeLit
             literalType
              sliceType
               [
               ]
               elementType
                type_
                 typeName
                  string
             literalValue
              {
              elementList
               keyedElement
                element
                 expression
                  primaryExpr
                   operand
                    literal
                     basicLit
                      string_
                       "a"
               ,
               keyedElement
                element
                 expression
                  primaryExpr
                   operand
                    literal
                     basicLit
                      string_
                       "b"
               ,
               keyedElement
                element
                 expression
                  primaryExpr
                   operand
                    literal
                     basicLit
                      string_
                       "c"
               ,
               keyedElement
                element
                 expression
                  primaryExpr
                   operand
                    literal
                     basicLit
                      string_
                       "d"
              }
    eos
     \n
    statement
     simpleStmt
      shortVarDecl
       identifierList
        p
       :=
       expressionList
        expression
         primaryExpr
          primaryExpr
           operand
            operandName
             make
          arguments
           (
           type_
            typeLit
             sliceType
              [
              ]
              elementType
               type_
                typeName
                 string
           ,
           expressionList
            expression
             primaryExpr
              operand
               literal
                basicLit
                 integer
                  10
           )
    eos
     \n
    statement
     simpleStmt
      assignment
       expressionList
        expression
         primaryExpr
          operand
           operandName
            p
       assign_op
        =
       expressionList
        expression
         primaryExpr
          primaryExpr
           operand
            operandName
             append
          arguments
           (
           expressionList
            expression
             primaryExpr
              operand
               operandName
                letters
            ,
            expression
             primaryExpr
              operand
               literal
                basicLit
                 string_
                  "e"
            ,
            expression
             primaryExpr
              operand
               literal
                basicLit
                 string_
                  "f"
           )
    eos
     \n
    statement
     simpleStmt
      expressionStmt
       expression
        primaryExpr
         primaryExpr
          primaryExpr
           operand
            operandName
             fmt
          .
          Println
         arguments
          (
          expressionList
           expression
            primaryExpr
             operand
              operandName
               letters
           ,
           expression
            primaryExpr
             primaryExpr
              operand
               operandName
                len
             arguments
              (
              expressionList
               expression
                primaryExpr
                 operand
                  operandName
                   letters
              )
           ,
           expression
            primaryExpr
             primaryExpr
              operand
               operandName
                cap
             arguments
              (
              expressionList
               expression
                primaryExpr
                 operand
                  operandName
                   letters
              )
          )
    eos
     \n
    statement
     simpleStmt
      expressionStmt
       expression
        primaryExpr
         primaryExpr
          primaryExpr
           operand
            operandName
             fmt
          .
          Println
         arguments
          (
          expressionList
           expression
            primaryExpr
             operand
              operandName
               p
           ,
           expression
            primaryExpr
             primaryExpr
              operand
               operandName
                len
             arguments
              (
              expressionList
               expression
                primaryExpr
                 operand
                  operandName
                   p
              )
           ,
           expression
            primaryExpr
             primaryExpr
              operand
               operandName
                cap
             arguments
              (
              expressionList
               expression
                primaryExpr
                 operand
                  operandName
                   p
              )
          )
    eos
     \n
   }
 eos
  \n
 <EOF>
