sourceFile
 packageClause
  package
  samples
 eos
  \n\n
 importDecl
  import
  importSpec
   importPath
    string_
     "fmt"
 eos
  \n\n
 functionDecl
  func
  S
  signature
   parameters
    (
    )
   result
    parameters
     (
     parameterDecl
      type_
       typeName
        int
     ,
     parameterDecl
      type_
       typeName
        int
     )
  block
   {
   statementList
    statement
     returnStmt
      return
      expressionList
       expression
        primaryExpr
         operand
          literal
           basicLit
            integer
             1
       ,
       expression
        primaryExpr
         operand
          literal
           basicLit
            integer
             2
    eos
     \n
   }
 eos
  \n\n
 functionDecl
  func
  ForStmts
  signature
   parameters
    (
    )
  block
   {
   statementList
    statement
     simpleStmt
      shortVarDecl
       identifierList
        a
        ,
        b
       :=
       expressionList
        expression
         primaryExpr
          operand
           literal
            basicLit
             integer
              1
        ,
        expression
         primaryExpr
          operand
           literal
            basicLit
             integer
              2
    eos
     \n
    statement
     forStmt
      for
      expression
       expression
        primaryExpr
         operand
          operandName
           a
       <
       expression
        primaryExpr
         operand
          operandName
           b
      block
       {
       statementList
        statement
         simpleStmt
          expressionStmt
           expression
            primaryExpr
             primaryExpr
              primaryExpr
               operand
                operandName
                 fmt
              .
              Println
             arguments
              (
              expressionList
               expression
                primaryExpr
                 operand
                  literal
                   basicLit
                    string_
                     "From condition-only ForStmt"
              )
        eos
         \n
        statement
         breakStmt
          break
        eos
         \n
       }
    eos
     \n\n
    statement
     forStmt
      for
      forClause
       eos
        ;
       eos
        ;
      block
       {
       statementList
        statement
         simpleStmt
          expressionStmt
           expression
            primaryExpr
             primaryExpr
              primaryExpr
               operand
                operandName
                 fmt
              .
              Println
             arguments
              (
              expressionList
               expression
                primaryExpr
                 operand
                  literal
                   basicLit
                    string_
                     "From empty ForClause ForStmt"
              )
        eos
         \n
        statement
         breakStmt
          break
        eos
         \n
       }
    eos
     \n\n
    statement
     forStmt
      for
      forClause
       eos
        ;
       expression
        expression
         primaryExpr
          operand
           operandName
            a
        <
        expression
         primaryExpr
          operand
           operandName
            b
       eos
        ;
      block
       {
       statementList
        statement
         simpleStmt
          expressionStmt
           expression
            primaryExpr
             primaryExpr
              primaryExpr
               operand
                operandName
                 fmt
              .
              Println
             arguments
              (
              expressionList
               expression
                primaryExpr
                 operand
                  literal
                   basicLit
                    string_
                     "From condition-only ForClause ForClause ForStmt"
              )
        eos
         \n
        statement
         breakStmt
          break
        eos
         \n
       }
    eos
     \n\n
    statement
     forStmt
      for
      forClause
       simpleStmt
        shortVarDecl
         identifierList
          j
         :=
         expressionList
          expression
           primaryExpr
            operand
             literal
              basicLit
               integer
                0
       eos
        ;
       expression
        expression
         primaryExpr
          operand
           operandName
            a
        <
        expression
         primaryExpr
          operand
           operandName
            b
       eos
        ;
      block
       {
       statementList
        statement
         simpleStmt
          incDecStmt
           expression
            primaryExpr
             operand
              operandName
               j
           ++
        eos
         \n
        statement
         simpleStmt
          expressionStmt
           expression
            primaryExpr
             primaryExpr
              primaryExpr
               operand
                operandName
                 fmt
              .
              Println
             arguments
              (
              expressionList
               expression
                primaryExpr
                 operand
                  literal
                   basicLit
                    string_
                     "From init and condition ForClause ForClause ForStmt"
              )
        eos
         \n
        statement
         breakStmt
          break
        eos
         \n
       }
    eos
     \n\n
    statement
     forStmt
      for
      forClause
       simpleStmt
        shortVarDecl
         identifierList
          j
         :=
         expressionList
          expression
           primaryExpr
            operand
             literal
              basicLit
               integer
                0
       eos
        ;
       eos
        ;
       simpleStmt
        incDecStmt
         expression
          primaryExpr
           operand
            operandName
             j
         ++
      block
       {
       statementList
        statement
         simpleStmt
          expressionStmt
           expression
            primaryExpr
             primaryExpr
              primaryExpr
               operand
                operandName
                 fmt
              .
              Println
             arguments
              (
              expressionList
               expression
                primaryExpr
                 operand
                  literal
                   basicLit
                    string_
                     "From init and post ForClause ForClause ForStmt"
              )
        eos
         \n
        statement
         breakStmt
          break
        eos
         \n
       }
    eos
     \n\n
    statement
     forStmt
      for
      forClause
       eos
        ;
       expression
        expression
         primaryExpr
          operand
           operandName
            a
        <
        expression
         primaryExpr
          operand
           operandName
            b
       eos
        ;
       simpleStmt
        incDecStmt
         expression
          primaryExpr
           operand
            operandName
             a
         ++
      block
       {
       statementList
        statement
         simpleStmt
          expressionStmt
           expression
            primaryExpr
             primaryExpr
              primaryExpr
               operand
                operandName
                 fmt
              .
              Println
             arguments
              (
              expressionList
               expression
                primaryExpr
                 operand
                  literal
                   basicLit
                    string_
                     "From condition and post ForClause ForClause ForStmt"
              )
        eos
         \n
        statement
         breakStmt
          break
        eos
         \n
       }
    eos
     \n\n
    statement
     forStmt
      for
      forClause
       simpleStmt
        shortVarDecl
         identifierList
          z
         :=
         expressionList
          expression
           primaryExpr
            operand
             literal
              basicLit
               integer
                0
       eos
        ;
       expression
        expression
         primaryExpr
          operand
           operandName
            a
        <
        expression
         primaryExpr
          operand
           operandName
            b
       eos
        ;
       simpleStmt
        incDecStmt
         expression
          primaryExpr
           operand
            operandName
             z
         ++
      block
       {
       statementList
        statement
         simpleStmt
          expressionStmt
           expression
            primaryExpr
             primaryExpr
              primaryExpr
               operand
                operandName
                 fmt
              .
              Println
             arguments
              (
              expressionList
               expression
                primaryExpr
                 operand
                  literal
                   basicLit
                    string_
                     "From full ForClause ForClause ForStmt"
              )
        eos
         \n
        statement
         returnStmt
          return
        eos
         \n
       }
    eos
     \n
   }
 eos
  \n
 <EOF>
