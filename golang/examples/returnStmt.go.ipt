sourceFile
 packageClause
  package
  samples
 eos
  \n\n
 declaration
  typeDecl
   type
   typeSpec
    typeDef
     Devnull
     type_
      typeLit
       structType
        struct
        {
        }
 eos
  \n\n
 functionDecl
  func
  noResult
  signature
   parameters
    (
    )
  block
   {
   statementList
    statement
     returnStmt
      return
    eos
     \n
   }
 eos
  \n\n
 functionDecl
  func
  simpleF
  signature
   parameters
    (
    )
   result
    type_
     typeName
      int
  block
   {
   statementList
    statement
     returnStmt
      return
      expressionList
       expression
        primaryExpr
         operand
          literal
           basicLit
            integer
             2
    eos
     \n
   }
 eos
  \n\n
 functionDecl
  func
  complexF1
  signature
   parameters
    (
    )
   result
    parameters
     (
     parameterDecl
      identifierList
       re
      type_
       typeName
        float64
     ,
     parameterDecl
      identifierList
       im
      type_
       typeName
        float64
     )
  block
   {
   statementList
    statement
     returnStmt
      return
      expressionList
       expression
        -
        expression
         primaryExpr
          operand
           literal
            basicLit
             7.0
       ,
       expression
        -
        expression
         primaryExpr
          operand
           literal
            basicLit
             4.0
    eos
     \n
   }
 eos
  \n\n
 functionDecl
  func
  complexF2
  signature
   parameters
    (
    )
   result
    parameters
     (
     parameterDecl
      identifierList
       re
      type_
       typeName
        float64
     ,
     parameterDecl
      identifierList
       im
      type_
       typeName
        float64
     )
  block
   {
   statementList
    statement
     returnStmt
      return
      expressionList
       expression
        primaryExpr
         primaryExpr
          operand
           operandName
            complexF1
         arguments
          (
          )
    eos
     \n
   }
 eos
  \n\n
 functionDecl
  func
  complexF3
  signature
   parameters
    (
    )
   result
    parameters
     (
     parameterDecl
      identifierList
       re
      type_
       typeName
        float64
     ,
     parameterDecl
      identifierList
       im
      type_
       typeName
        float64
     )
  block
   {
   statementList
    statement
     simpleStmt
      assignment
       expressionList
        expression
         primaryExpr
          operand
           operandName
            re
       assign_op
        =
       expressionList
        expression
         primaryExpr
          operand
           literal
            basicLit
             7.0
    eos
     \n
    statement
     simpleStmt
      assignment
       expressionList
        expression
         primaryExpr
          operand
           operandName
            im
       assign_op
        =
       expressionList
        expression
         primaryExpr
          operand
           literal
            basicLit
             4.0
    eos
     \n
    statement
     returnStmt
      return
    eos
     \n
   }
 eos
  \n\n
 methodDecl
  func
  receiver
   parameters
    (
    parameterDecl
     type_
      typeName
       Devnull
    )
  writeLength
  signature
   parameters
    (
    parameterDecl
     identifierList
      p
     type_
      typeLit
       sliceType
        [
        ]
        elementType
         type_
          typeName
           byte
    )
   result
    parameters
     (
     parameterDecl
      identifierList
       n
      type_
       typeName
        int
     ,
     parameterDecl
      identifierList
       _
      type_
       typeName
        error
     )
  block
   {
   statementList
    statement
     simpleStmt
      assignment
       expressionList
        expression
         primaryExpr
          operand
           operandName
            n
       assign_op
        =
       expressionList
        expression
         primaryExpr
          primaryExpr
           operand
            operandName
             len
          arguments
           (
           expressionList
            expression
             primaryExpr
              operand
               operandName
                p
           )
    eos
     \n
    statement
     returnStmt
      return
    eos
     \n
   }
 eos
  \n\n
 functionDecl
  func
  ReturnImported
  signature
   parameters
    (
    )
  block
   {
   statementList
    statement
     declaration
      varDecl
       var
       varSpec
        identifierList
         p
        type_
         typeLit
          sliceType
           [
           ]
           elementType
            type_
             typeName
              byte
    eos
     \n
    statement
     declaration
      varDecl
       var
       varSpec
        identifierList
         devnull
        type_
         typeName
          Devnull
    eos
     \n
    statement
     simpleStmt
      expressionStmt
       expression
        primaryExpr
         primaryExpr
          operand
           operandName
            noResult
         arguments
          (
          )
    eos
     \n
    statement
     simpleStmt
      expressionStmt
       expression
        primaryExpr
         primaryExpr
          operand
           operandName
            simpleF
         arguments
          (
          )
    eos
     \n
    statement
     simpleStmt
      expressionStmt
       expression
        primaryExpr
         primaryExpr
          operand
           operandName
            complexF1
         arguments
          (
          )
    eos
     \n
    statement
     simpleStmt
      expressionStmt
       expression
        primaryExpr
         primaryExpr
          operand
           operandName
            complexF2
         arguments
          (
          )
    eos
     \n
    statement
     simpleStmt
      expressionStmt
       expression
        primaryExpr
         primaryExpr
          operand
           operandName
            complexF3
         arguments
          (
          )
    eos
     \n
    statement
     simpleStmt
      expressionStmt
       expression
        primaryExpr
         primaryExpr
          primaryExpr
           operand
            operandName
             devnull
          .
          writeLength
         arguments
          (
          expressionList
           expression
            primaryExpr
             operand
              operandName
               p
          )
    eos
     \n
   }
 eos
  <EOF>
 <EOF>
