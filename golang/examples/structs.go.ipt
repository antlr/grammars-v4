sourceFile
 packageClause
  package
  samples
 eos
  \n\n
 importDecl
  import
  importSpec
   importPath
    string_
     "fmt"
 eos
  \n\n
 declaration
  typeDecl
   type
   typeSpec
    typeDef
     T1
     type_
      typeName
       int
 eos
  \n
 declaration
  typeDecl
   type
   typeSpec
    typeDef
     T22
     type_
      typeName
       T1
 eos
  \n
 declaration
  typeDecl
   type
   typeSpec
    typeDef
     T3
     type_
      typeName
       T22
 eos
  \n
 declaration
  typeDecl
   type
   typeSpec
    typeDef
     T4
     type_
      typeName
       T3
 eos
  \n\n
 declaration
  typeDecl
   type
   typeSpec
    typeDef
     EmptyStruct
     type_
      typeLit
       structType
        struct
        {
        }
 eos
  \n\n
 declaration
  typeDecl
   type
   typeSpec
    typeDef
     regularStruct
     type_
      typeLit
       structType
        struct
        {
        fieldDecl
         identifierList
          z
          ,
          zz
         type_
          typeName
           int
        eos
         \n
        fieldDecl
         identifierList
          u
         type_
          typeName
           float32
        eos
         \n
        fieldDecl
         identifierList
          _
         type_
          typeName
           float32
        eos
         \n
        fieldDecl
         identifierList
          A
         type_
          typeLit
           pointerType
            *
            type_
             typeLit
              sliceType
               [
               ]
               elementType
                type_
                 typeName
                  int
        eos
         \n
        fieldDecl
         identifierList
          F
         type_
          typeLit
           functionType
            func
            signature
             parameters
              (
              )
        eos
         \n
        }
 eos
  \n\n
 declaration
  typeDecl
   type
   typeSpec
    typeDef
     PromotedStruct
     type_
      typeLit
       structType
        struct
        {
        fieldDecl
         embeddedField
          typeName
           T1
        eos
         \n
        fieldDecl
         embeddedField
          *
          typeName
           T22
        eos
         \n
        fieldDecl
         identifierList
          x
          ,
          y
         type_
          typeName
           int
        eos
         \n
        }
 eos
  \n\n
 declaration
  typeDecl
   type
   typeSpec
    typeDef
     StructWithTag
     type_
      typeLit
       structType
        struct
        {
        fieldDecl
         identifierList
          x
          ,
          y
         type_
          typeName
           float64
         string_
          ""
        eos
         \n
        fieldDecl
         identifierList
          name
         type_
          typeName
           string
         string_
          "any string is permitted as a tag"
        eos
         \n
        fieldDecl
         identifierList
          _
         type_
          typeLit
           arrayType
            [
            arrayLength
             expression
              primaryExpr
               operand
                literal
                 basicLit
                  integer
                   4
            ]
            elementType
             type_
              typeName
               byte
         string_
          "ceci n'est pas un champ de structure"
        eos
         \n
        }
 eos
  \n\n
 declaration
  typeDecl
   type
   typeSpec
    typeDef
     StructWithNumberFields
     type_
      typeLit
       structType
        struct
        {
        fieldDecl
         identifierList
          microsec
         type_
          typeName
           uint64
         string_
          `protobuf:"1"`
        eos
         \n
        fieldDecl
         identifierList
          serverIP6
         type_
          typeName
           uint64
         string_
          `protobuf:"2"`
        eos
         \n
        }
 eos
  \n\n
 declaration
  typeDecl
   type
   typeSpec
    typeDef
     person
     type_
      typeLit
       structType
        struct
        {
        fieldDecl
         identifierList
          name
         type_
          typeName
           string
        eos
         \n
        fieldDecl
         identifierList
          age
         type_
          typeName
           int
        eos
         \n
        fieldDecl
         identifierList
          personfunc
         type_
          typeLit
           functionType
            func
            signature
             parameters
              (
              )
        eos
         \n
        }
 eos
  \n\n
 methodDecl
  func
  receiver
   parameters
    (
    parameterDecl
     type_
      typeLit
       pointerType
        *
        type_
         typeName
          person
    )
  outside
  signature
   parameters
    (
    )
  block
   {
   statementList
    statement
     simpleStmt
      expressionStmt
       expression
        primaryExpr
         primaryExpr
          primaryExpr
           operand
            operandName
             fmt
          .
          Println
         arguments
          (
          expressionList
           expression
            primaryExpr
             operand
              literal
               basicLit
                string_
                 "Declared outside and invoked!!!"
          )
    eos
     \n
   }
 eos
  \n\n
 functionDecl
  func
  Structs
  signature
   parameters
    (
    )
  block
   {
   statementList
    statement
     simpleStmt
      shortVarDecl
       identifierList
        fPtr
       :=
       expressionList
        expression
         primaryExpr
          operand
           literal
            functionLit
             func
             signature
              parameters
               (
               )
             block
              {
              statementList
               statement
                simpleStmt
                 expressionStmt
                  expression
                   primaryExpr
                    primaryExpr
                     primaryExpr
                      operand
                       operandName
                        fmt
                     .
                     Println
                    arguments
                     (
                     expressionList
                      expression
                       primaryExpr
                        operand
                         literal
                          basicLit
                           string_
                            "LAUNCH FROM  PERSON STRUCT INSTANCE"
                     )
               eos
              }
    eos
     \n\n
    statement
     simpleStmt
      expressionStmt
       expression
        primaryExpr
         primaryExpr
          primaryExpr
           operand
            operandName
             fmt
          .
          Println
         arguments
          (
          expressionList
           expression
            primaryExpr
             operand
              literal
               compositeLit
                literalType
                 typeName
                  person
                literalValue
                 {
                 elementList
                  keyedElement
                   element
                    expression
                     primaryExpr
                      operand
                       literal
                        basicLit
                         string_
                          "Bob"
                  ,
                  keyedElement
                   element
                    expression
                     primaryExpr
                      operand
                       literal
                        basicLit
                         integer
                          20
                  ,
                  keyedElement
                   element
                    expression
                     primaryExpr
                      operand
                       operandName
                        fPtr
                 }
          )
    eos
     \n\n
    statement
     simpleStmt
      expressionStmt
       expression
        primaryExpr
         primaryExpr
          primaryExpr
           operand
            operandName
             fmt
          .
          Println
         arguments
          (
          expressionList
           expression
            primaryExpr
             operand
              literal
               compositeLit
                literalType
                 typeName
                  person
                literalValue
                 {
                 elementList
                  keyedElement
                   key
                    expression
                     primaryExpr
                      operand
                       operandName
                        name
                   :
                   element
                    expression
                     primaryExpr
                      operand
                       literal
                        basicLit
                         string_
                          "Alice"
                  ,
                  keyedElement
                   key
                    expression
                     primaryExpr
                      operand
                       operandName
                        age
                   :
                   element
                    expression
                     primaryExpr
                      operand
                       literal
                        basicLit
                         integer
                          30
                 }
          )
    eos
     \n\n
    statement
     simpleStmt
      expressionStmt
       expression
        primaryExpr
         primaryExpr
          primaryExpr
           operand
            operandName
             fmt
          .
          Println
         arguments
          (
          expressionList
           expression
            primaryExpr
             operand
              literal
               compositeLit
                literalType
                 typeName
                  person
                literalValue
                 {
                 elementList
                  keyedElement
                   key
                    expression
                     primaryExpr
                      operand
                       operandName
                        name
                   :
                   element
                    expression
                     primaryExpr
                      operand
                       literal
                        basicLit
                         string_
                          "Fred"
                 }
          )
    eos
     \n\n
    statement
     simpleStmt
      expressionStmt
       expression
        primaryExpr
         primaryExpr
          primaryExpr
           operand
            operandName
             fmt
          .
          Println
         arguments
          (
          expressionList
           expression
            &
            expression
             primaryExpr
              operand
               literal
                compositeLit
                 literalType
                  typeName
                   person
                 literalValue
                  {
                  elementList
                   keyedElement
                    key
                     expression
                      primaryExpr
                       operand
                        operandName
                         name
                    :
                    element
                     expression
                      primaryExpr
                       operand
                        literal
                         basicLit
                          string_
                           "Ann"
                   ,
                   keyedElement
                    key
                     expression
                      primaryExpr
                       operand
                        operandName
                         age
                    :
                    element
                     expression
                      primaryExpr
                       operand
                        literal
                         basicLit
                          integer
                           40
                  }
          )
    eos
     \n\n
    statement
     simpleStmt
      shortVarDecl
       identifierList
        s
       :=
       expressionList
        expression
         primaryExpr
          operand
           literal
            compositeLit
             literalType
              typeName
               person
             literalValue
              {
              elementList
               keyedElement
                key
                 expression
                  primaryExpr
                   operand
                    operandName
                     name
                :
                element
                 expression
                  primaryExpr
                   operand
                    literal
                     basicLit
                      string_
                       "Sean"
               ,
               keyedElement
                key
                 expression
                  primaryExpr
                   operand
                    operandName
                     age
                :
                element
                 expression
                  primaryExpr
                   operand
                    literal
                     basicLit
                      integer
                       50
               ,
               keyedElement
                key
                 expression
                  primaryExpr
                   operand
                    operandName
                     personfunc
                :
                element
                 expression
                  primaryExpr
                   operand
                    operandName
                     fPtr
              }
    eos
     \n
    statement
     simpleStmt
      expressionStmt
       expression
        primaryExpr
         primaryExpr
          primaryExpr
           operand
            operandName
             fmt
          .
          Println
         arguments
          (
          expressionList
           expression
            primaryExpr
             primaryExpr
              operand
               operandName
                s
             .
             name
          )
    eos
     \n\n
    statement
     simpleStmt
      expressionStmt
       expression
        primaryExpr
         primaryExpr
          primaryExpr
           operand
            operandName
             s
          .
          personfunc
         arguments
          (
          )
    eos
     \n
    statement
     simpleStmt
      expressionStmt
       expression
        primaryExpr
         primaryExpr
          primaryExpr
           operand
            operandName
             s
          .
          outside
         arguments
          (
          )
    eos
     ;
    statement
     simpleStmt
      shortVarDecl
       identifierList
        sp
       :=
       expressionList
        expression
         &
         expression
          primaryExpr
           operand
            operandName
             s
    eos
     \n
    statement
     simpleStmt
      expressionStmt
       expression
        primaryExpr
         primaryExpr
          primaryExpr
           operand
            operandName
             fmt
          .
          Println
         arguments
          (
          expressionList
           expression
            primaryExpr
             primaryExpr
              operand
               operandName
                sp
             .
             age
          )
    eos
     \n\n
    statement
     simpleStmt
      assignment
       expressionList
        expression
         primaryExpr
          primaryExpr
           operand
            operandName
             sp
          .
          age
       assign_op
        =
       expressionList
        expression
         primaryExpr
          operand
           literal
            basicLit
             integer
              51
    eos
     \n
    statement
     simpleStmt
      expressionStmt
       expression
        primaryExpr
         primaryExpr
          primaryExpr
           operand
            operandName
             fmt
          .
          Println
         arguments
          (
          expressionList
           expression
            primaryExpr
             primaryExpr
              operand
               operandName
                sp
             .
             age
          )
    eos
     \n\n
    statement
     declaration
      varDecl
       var
       varSpec
        identifierList
         zeroPerson
        type_
         typeName
          person
    eos
     \n
    statement
     simpleStmt
      expressionStmt
       expression
        primaryExpr
         primaryExpr
          primaryExpr
           operand
            operandName
             fmt
          .
          Println
         arguments
          (
          expressionList
           expression
            primaryExpr
             operand
              operandName
               zeroPerson
          )
    eos
     \n\n
    statement
     simpleStmt
      shortVarDecl
       identifierList
        newPerson
       :=
       expressionList
        expression
         primaryExpr
          primaryExpr
           operand
            operandName
             new
          arguments
           (
           expressionList
            expression
             primaryExpr
              operand
               operandName
                person
           )
    eos
     \n
    statement
     simpleStmt
      expressionStmt
       expression
        primaryExpr
         primaryExpr
          primaryExpr
           operand
            operandName
             fmt
          .
          Println
         arguments
          (
          expressionList
           expression
            primaryExpr
             operand
              operandName
               newPerson
          )
    eos
     \n
   }
 eos
  \n
 <EOF>
