sourceFile
 packageClause
  package
  main
 eos
  \n\n
 importDecl
  import
  importSpec
   importPath
    string_
     "fmt"
 eos
  \n\n
 functionDecl
  func
  generate
  signature
   parameters
    (
    parameterDecl
     identifierList
      ch
     type_
      typeLit
       channelType
        chan
        <-
        elementType
         type_
          typeName
           int
    )
  block
   {
   statementList
    statement
     forStmt
      for
      forClause
       simpleStmt
        shortVarDecl
         identifierList
          i
         :=
         expressionList
          expression
           primaryExpr
            operand
             literal
              basicLit
               integer
                2
       eos
        ;
       eos
        ;
       simpleStmt
        incDecStmt
         expression
          primaryExpr
           operand
            operandName
             i
         ++
      block
       {
       statementList
        statement
         simpleStmt
          sendStmt
           expression
            primaryExpr
             operand
              operandName
               ch
           <-
           expression
            primaryExpr
             operand
              operandName
               i
        eos
         \n
       }
    eos
     \n
   }
 eos
  \n\n
 functionDecl
  func
  filter
  signature
   parameters
    (
    parameterDecl
     identifierList
      src
     type_
      typeLit
       channelType
        <-
        chan
        elementType
         type_
          typeName
           int
    ,
    parameterDecl
     identifierList
      dst
     type_
      typeLit
       channelType
        chan
        <-
        elementType
         type_
          typeName
           int
    ,
    parameterDecl
     identifierList
      prime
     type_
      typeName
       int
    )
  block
   {
   statementList
    statement
     forStmt
      for
      rangeClause
       identifierList
        i
       :=
       range
       expression
        primaryExpr
         operand
          operandName
           src
      block
       {
       statementList
        statement
         ifStmt
          if
          expression
           expression
            expression
             primaryExpr
              operand
               operandName
                i
            %
            expression
             primaryExpr
              operand
               operandName
                prime
           !=
           expression
            primaryExpr
             operand
              literal
               basicLit
                integer
                 0
          block
           {
           statementList
            statement
             simpleStmt
              sendStmt
               expression
                primaryExpr
                 operand
                  operandName
                   dst
               <-
               expression
                primaryExpr
                 operand
                  operandName
                   i
            eos
             \n
           }
        eos
         \n
       }
    eos
     \n
   }
 eos
  \n\n
 functionDecl
  func
  sieve
  signature
   parameters
    (
    )
  block
   {
   statementList
    statement
     simpleStmt
      shortVarDecl
       identifierList
        ch
       :=
       expressionList
        expression
         primaryExpr
          primaryExpr
           operand
            operandName
             make
          arguments
           (
           type_
            typeLit
             channelType
              chan
              elementType
               type_
                typeName
                 int
           )
    eos
     \n
    statement
     goStmt
      go
      expression
       primaryExpr
        primaryExpr
         operand
          operandName
           generate
        arguments
         (
         expressionList
          expression
           primaryExpr
            operand
             operandName
              ch
         )
    eos
     \n
    statement
     forStmt
      for
      block
       {
       statementList
        statement
         simpleStmt
          shortVarDecl
           identifierList
            prime
           :=
           expressionList
            expression
             <-
             expression
              primaryExpr
               operand
                operandName
                 ch
        eos
         \n
        statement
         simpleStmt
          expressionStmt
           expression
            primaryExpr
             primaryExpr
              primaryExpr
               operand
                operandName
                 fmt
              .
              Print
             arguments
              (
              expressionList
               expression
                primaryExpr
                 operand
                  operandName
                   prime
               ,
               expression
                primaryExpr
                 operand
                  literal
                   basicLit
                    string_
                     "\n"
              )
        eos
         \n
        statement
         simpleStmt
          shortVarDecl
           identifierList
            ch1
           :=
           expressionList
            expression
             primaryExpr
              primaryExpr
               operand
                operandName
                 make
              arguments
               (
               type_
                typeLit
                 channelType
                  chan
                  elementType
                   type_
                    typeName
                     int
               )
        eos
         \n
        statement
         goStmt
          go
          expression
           primaryExpr
            primaryExpr
             operand
              operandName
               filter
            arguments
             (
             expressionList
              expression
               primaryExpr
                operand
                 operandName
                  ch
              ,
              expression
               primaryExpr
                operand
                 operandName
                  ch1
              ,
              expression
               primaryExpr
                operand
                 operandName
                  prime
             )
        eos
         \n
        statement
         simpleStmt
          assignment
           expressionList
            expression
             primaryExpr
              operand
               operandName
                ch
           assign_op
            =
           expressionList
            expression
             primaryExpr
              operand
               operandName
                ch1
        eos
         \n
       }
    eos
     \n
   }
 eos
  \n\n
 functionDecl
  func
  main
  signature
   parameters
    (
    )
  block
   {
   statementList
    statement
     simpleStmt
      expressionStmt
       expression
        primaryExpr
         primaryExpr
          operand
           operandName
            sieve
         arguments
          (
          )
    eos
     \n
   }
 eos
  <EOF>
 <EOF>
