sourceFile
 packageClause
  package
  test_controller
 eos
  \n\n
 importDecl
  import
  (
  importSpec
   importPath
    string_
     "aa.bb.com/facility/assert"
  eos
   \n
  importSpec
   importPath
    string_
     "aa.bb.com/xxx/post/internal/controller"
  eos
   \n
  importSpec
   importPath
    string_
     "aa.bb.com/xxx/post/pkg/cerror"
  eos
   \n
  importSpec
   ctx2
   importPath
    string_
     "aa.bb.com/xxx/post/test/tools/ctx"
  eos
   \n
  importSpec
   importPath
    string_
     "aa.bb.com/xxx/post/thrift_gen/base"
  eos
   \n
  importSpec
   importPath
    string_
     "aa.bb.com/xxx/post/thrift_gen/something/xxx/post"
  eos
   \n
  importSpec
   importPath
    string_
     "aa.bb.com/gopkg/logs"
  eos
   \n
  )
 eos
  \n\n
 functionDecl
  func
  newUpdateCommentRequest
  signature
   parameters
    (
    )
   result
    type_
     typeLit
      pointerType
       *
       type_
        typeName
         qualifiedIdent
          post
          .
          UpdateCommentRequest
  block
   {
   statementList
    statement
     simpleStmt
      shortVarDecl
       identifierList
        req
       :=
       expressionList
        expression
         primaryExpr
          primaryExpr
           primaryExpr
            operand
             operandName
              post
           .
           NewUpdateCommentRequest
          arguments
           (
           )
    eos
     \n
    statement
     simpleStmt
      assignment
       expressionList
        expression
         primaryExpr
          primaryExpr
           operand
            operandName
             req
          .
          CommentId
       assign_op
        =
       expressionList
        expression
         primaryExpr
          operand
           literal
            basicLit
             integer
              18
    eos
     \n
    statement
     simpleStmt
      shortVarDecl
       identifierList
        fields
       :=
       expressionList
        expression
         primaryExpr
          operand
           literal
            compositeLit
             literalType
              mapType
               map
               [
               type_
                typeName
                 string
               ]
               elementType
                type_
                 typeLit
                  interfaceType
                   interface
                   {
                   }
             literalValue
              {
              elementList
               keyedElement
                key
                 expression
                  primaryExpr
                   operand
                    literal
                     basicLit
                      string_
                       "extra"
                :
                element
                 expression
                  primaryExpr
                   operand
                    literal
                     basicLit
                      string_
                       `{"test_update_fields":"update_fields_by_test"}`
              ,
              }
    eos
     \n
    statement
     simpleStmt
      assignment
       expressionList
        expression
         primaryExpr
          primaryExpr
           operand
            operandName
             req
          .
          UpdateFields
        ,
        expression
         primaryExpr
          operand
           operandName
            _
       assign_op
        =
       expressionList
        expression
         primaryExpr
          primaryExpr
           primaryExpr
            operand
             operandName
              json
           .
           MarshalToString
          arguments
           (
           expressionList
            expression
             primaryExpr
              operand
               operandName
                fields
           )
    eos
     \n
    statement
     simpleStmt
      assignment
       expressionList
        expression
         primaryExpr
          primaryExpr
           operand
            operandName
             req
          .
          Base
       assign_op
        =
       expressionList
        expression
         &
         expression
          primaryExpr
           operand
            literal
             compositeLit
              literalType
               typeName
                qualifiedIdent
                 base
                 .
                 Base
              literalValue
               {
               elementList
                keyedElement
                 key
                  expression
                   primaryExpr
                    operand
                     operandName
                      Caller
                 :
                 element
                  expression
                   primaryExpr
                    operand
                     literal
                      basicLit
                       string_
                        "some.interface.withip"
               ,
               }
    eos
     \n
    statement
     returnStmt
      return
      expressionList
       expression
        primaryExpr
         operand
          operandName
           req
    eos
     \n
   }
 eos
  \n\n
 functionDecl
  func
  TestUpdateComment
  signature
   parameters
    (
    )
  block
   {
   statementList
    statement
     simpleStmt
      shortVarDecl
       identifierList
        ctx
       :=
       expressionList
        expression
         primaryExpr
          primaryExpr
           primaryExpr
            operand
             operandName
              ctx2
           .
           MockKiteContext
          arguments
           (
           expressionList
            expression
             primaryExpr
              operand
               literal
                basicLit
                 string_
                  "contextname"
            ,
            expression
             primaryExpr
              operand
               literal
                basicLit
                 string_
                  ""
           )
    eos
     \n
    statement
     simpleStmt
      shortVarDecl
       identifierList
        req
       :=
       expressionList
        expression
         primaryExpr
          primaryExpr
           operand
            operandName
             newUpdateCommentRequest
          arguments
           (
           )
    eos
     \n
    statement
     simpleStmt
      shortVarDecl
       identifierList
        resp
        ,
        err
       :=
       expressionList
        expression
         primaryExpr
          primaryExpr
           primaryExpr
            operand
             operandName
              controller
           .
           UpdateComment
          arguments
           (
           expressionList
            expression
             primaryExpr
              operand
               operandName
                ctx
            ,
            expression
             primaryExpr
              operand
               operandName
                req
           )
    eos
     \n
    statement
     simpleStmt
      expressionStmt
       expression
        primaryExpr
         primaryExpr
          primaryExpr
           operand
            operandName
             logs
          .
          Info
         arguments
          (
          expressionList
           expression
            primaryExpr
             operand
              literal
               basicLit
                string_
                 "%+v %+v %+v"
           ,
           expression
            primaryExpr
             operand
              operandName
               req
           ,
           expression
            primaryExpr
             operand
              operandName
               resp
           ,
           expression
            primaryExpr
             operand
              operandName
               err
          )
    eos
     \n
    statement
     simpleStmt
      expressionStmt
       expression
        primaryExpr
         primaryExpr
          primaryExpr
           operand
            operandName
             assert
          .
          IsNil
         arguments
          (
          expressionList
           expression
            primaryExpr
             operand
              operandName
               err
          )
    eos
     \n
    statement
     simpleStmt
      expressionStmt
       expression
        primaryExpr
         primaryExpr
          primaryExpr
           operand
            operandName
             assert
          .
          EqualInt32
         arguments
          (
          expressionList
           expression
            primaryExpr
             primaryExpr
              primaryExpr
               operand
                operandName
                 resp
              .
              BaseResp
             .
             StatusCode
           ,
           expression
            primaryExpr
             primaryExpr
              primaryExpr
               primaryExpr
                operand
                 operandName
                  cerror
               .
               ErrNo_Success
              .
              Int32
             arguments
              (
              )
          )
    eos
     \n
   }
 eos
  \n\n
 <EOF>
