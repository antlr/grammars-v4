sourceFile
 packageClause
  package
  samples
 eos
  \n\n
 importDecl
  import
  importSpec
   importPath
    string_
     "fmt"
 eos
  \n\n
 functionDecl
  func
  ForeachStmts
  signature
   parameters
    (
    )
  block
   {
   statementList
    statement
     simpleStmt
      shortVarDecl
       identifierList
        nums
       :=
       expressionList
        expression
         primaryExpr
          operand
           literal
            compositeLit
             literalType
              sliceType
               [
               ]
               elementType
                type_
                 typeName
                  int
             literalValue
              {
              elementList
               keyedElement
                element
                 expression
                  primaryExpr
                   operand
                    literal
                     basicLit
                      integer
                       2
               ,
               keyedElement
                element
                 expression
                  primaryExpr
                   operand
                    literal
                     basicLit
                      integer
                       3
               ,
               keyedElement
                element
                 expression
                  primaryExpr
                   operand
                    literal
                     basicLit
                      integer
                       4
              }
    eos
     \n
    statement
     simpleStmt
      shortVarDecl
       identifierList
        sum
       :=
       expressionList
        expression
         primaryExpr
          operand
           literal
            basicLit
             integer
              0
    eos
     \n
    statement
     forStmt
      for
      rangeClause
       identifierList
        _
        ,
        num
       :=
       range
       expression
        primaryExpr
         operand
          operandName
           nums
      block
       {
       statementList
        statement
         simpleStmt
          assignment
           expressionList
            expression
             primaryExpr
              operand
               operandName
                sum
           assign_op
            +
            =
           expressionList
            expression
             primaryExpr
              operand
               operandName
                num
        eos
         \n
       }
    eos
     \n
    statement
     simpleStmt
      expressionStmt
       expression
        primaryExpr
         primaryExpr
          primaryExpr
           operand
            operandName
             fmt
          .
          Println
         arguments
          (
          expressionList
           expression
            primaryExpr
             operand
              literal
               basicLit
                string_
                 "sum:"
           ,
           expression
            primaryExpr
             operand
              operandName
               sum
          )
    eos
     \n\n
    statement
     forStmt
      for
      rangeClause
       identifierList
        i
        ,
        num
       :=
       range
       expression
        primaryExpr
         operand
          operandName
           nums
      block
       {
       statementList
        statement
         ifStmt
          if
          expression
           expression
            primaryExpr
             operand
              operandName
               num
           ==
           expression
            primaryExpr
             operand
              literal
               basicLit
                integer
                 3
          block
           {
           statementList
            statement
             simpleStmt
              expressionStmt
               expression
                primaryExpr
                 primaryExpr
                  primaryExpr
                   operand
                    operandName
                     fmt
                  .
                  Println
                 arguments
                  (
                  expressionList
                   expression
                    primaryExpr
                     operand
                      literal
                       basicLit
                        string_
                         "index:"
                   ,
                   expression
                    primaryExpr
                     operand
                      operandName
                       i
                  )
            eos
             \n
           }
        eos
         \n
       }
    eos
     \n\n
    statement
     simpleStmt
      shortVarDecl
       identifierList
        kvs
       :=
       expressionList
        expression
         primaryExpr
          operand
           literal
            compositeLit
             literalType
              mapType
               map
               [
               type_
                typeName
                 string
               ]
               elementType
                type_
                 typeName
                  string
             literalValue
              {
              elementList
               keyedElement
                key
                 expression
                  primaryExpr
                   operand
                    literal
                     basicLit
                      string_
                       "a"
                :
                element
                 expression
                  primaryExpr
                   operand
                    literal
                     basicLit
                      string_
                       "apple"
               ,
               keyedElement
                key
                 expression
                  primaryExpr
                   operand
                    literal
                     basicLit
                      string_
                       "b"
                :
                element
                 expression
                  primaryExpr
                   operand
                    literal
                     basicLit
                      string_
                       "banana"
              }
    eos
     \n\n
    statement
     forStmt
      for
      rangeClause
       identifierList
        k
        ,
        v
       :=
       range
       expression
        primaryExpr
         operand
          operandName
           kvs
      block
       {
       statementList
        statement
         simpleStmt
          expressionStmt
           expression
            primaryExpr
             primaryExpr
              primaryExpr
               operand
                operandName
                 fmt
              .
              Printf
             arguments
              (
              expressionList
               expression
                primaryExpr
                 operand
                  literal
                   basicLit
                    string_
                     "%s -> %s\n"
               ,
               expression
                primaryExpr
                 operand
                  operandName
                   k
               ,
               expression
                primaryExpr
                 operand
                  operandName
                   v
              )
        eos
         \n
       }
    eos
     \n\n
    statement
     forStmt
      for
      rangeClause
       range
       expression
        primaryExpr
         operand
          operandName
           kvs
      block
       {
       statementList
        statement
         simpleStmt
          expressionStmt
           expression
            primaryExpr
             primaryExpr
              primaryExpr
               operand
                operandName
                 fmt
              .
              Printf
             arguments
              (
              expressionList
               expression
                primaryExpr
                 operand
                  literal
                   basicLit
                    string_
                     "empty range\n"
              )
        eos
         \n
       }
    eos
     \n
   }
 eos
  <EOF>
 <EOF>
