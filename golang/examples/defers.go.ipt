sourceFile
 packageClause
  package
  samples
 eos
  \n\n
 importDecl
  import
  (
  importSpec
   importPath
    string_
     "fmt"
  eos
   \n
  importSpec
   importPath
    string_
     "crypto/rsa"
  eos
   \n
  importSpec
   importPath
    string_
     "crypto/rand"
  eos
   \n
  )
 eos
  \n\n
 functionDecl
  func
  DeferCallee
  signature
   parameters
    (
    )
  block
   {
   statementList
    statement
     simpleStmt
      expressionStmt
       expression
        primaryExpr
         primaryExpr
          primaryExpr
           operand
            operandName
             fmt
          .
          Println
         arguments
          (
          expressionList
           expression
            primaryExpr
             operand
              literal
               basicLit
                string_
                 "Called from the first defer!"
          )
    eos
     \n
   }
 eos
  \n\n
 functionDecl
  func
  DeferCallee2
  signature
   parameters
    (
    )
  block
   {
   statementList
    statement
     simpleStmt
      expressionStmt
       expression
        primaryExpr
         primaryExpr
          primaryExpr
           operand
            operandName
             fmt
          .
          Println
         arguments
          (
          expressionList
           expression
            primaryExpr
             operand
              literal
               basicLit
                string_
                 "Called from the second defer!"
          )
    eos
     \n
   }
 eos
  \n\n
 functionDecl
  func
  Defers
  signature
   parameters
    (
    )
  block
   {
   statementList
    statement
     simpleStmt
      shortVarDecl
       identifierList
        pvk
        ,
        err
       :=
       expressionList
        expression
         primaryExpr
          primaryExpr
           primaryExpr
            operand
             operandName
              rsa
           .
           GenerateKey
          arguments
           (
           expressionList
            expression
             primaryExpr
              primaryExpr
               operand
                operandName
                 rand
              .
              Reader
            ,
            expression
             primaryExpr
              operand
               literal
                basicLit
                 integer
                  2048
           )
    eos
     \n
    statement
     deferStmt
      defer
      expression
       primaryExpr
        primaryExpr
         operand
          operandName
           DeferCallee
        arguments
         (
         )
    eos
     \n
    statement
     ifStmt
      if
      simpleStmt
       shortVarDecl
        identifierList
         extra
        :=
        expressionList
         expression
          -
          expression
           primaryExpr
            operand
             literal
              basicLit
               integer
                1
      eos
       ;
      expression
       expression
        primaryExpr
         operand
          operandName
           err
       !=
       expression
        primaryExpr
         operand
          literal
           basicLit
            nil
      block
       {
       statementList
        statement
         simpleStmt
          expressionStmt
           expression
            primaryExpr
             primaryExpr
              primaryExpr
               operand
                operandName
                 fmt
              .
              Println
             arguments
              (
              expressionList
               expression
                primaryExpr
                 operand
                  literal
                   basicLit
                    string_
                     "Something went wrong"
               ,
               expression
                primaryExpr
                 operand
                  operandName
                   extra
              )
        eos
         \n
       }
      else
      block
       {
       statementList
        statement
         returnStmt
          return
        eos
         \n
       }
    eos
     \n\n
    statement
     deferStmt
      defer
      expression
       primaryExpr
        primaryExpr
         operand
          operandName
           DeferCallee2
        arguments
         (
         )
    eos
     \n
    statement
     simpleStmt
      expressionStmt
       expression
        primaryExpr
         primaryExpr
          primaryExpr
           operand
            operandName
             fmt
          .
          Printf
         arguments
          (
          expressionList
           expression
            primaryExpr
             operand
              literal
               basicLit
                string_
                 "End\n"
           ,
           expression
            primaryExpr
             primaryExpr
              primaryExpr
               operand
                operandName
                 pvk
              .
              Size
             arguments
              (
              )
          )
    eos
     \n
   }
 eos
  \n
 <EOF>
