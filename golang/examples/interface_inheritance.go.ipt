sourceFile
 packageClause
  package
  main
 eos
  \n\n
 importDecl
  import
  importSpec
   importPath
    string_
     "fmt"
 eos
  \n\n
 declaration
  typeDecl
   type
   typeSpec
    typeDef
     T1
     type_
      typeLit
       structType
        struct
        {
        fieldDecl
         identifierList
          name
         type_
          typeName
           string
        eos
         \n
        }
 eos
  \n\n
 methodDecl
  func
  receiver
   parameters
    (
    parameterDecl
     identifierList
      t
     type_
      typeName
       T1
    )
  M
  signature
   parameters
    (
    )
  block
   {
   }
 eos
  \n
 methodDecl
  func
  receiver
   parameters
    (
    parameterDecl
     identifierList
      t
     type_
      typeName
       T1
    )
  N
  signature
   parameters
    (
    )
  block
   {
   }
 eos
  \n
 methodDecl
  func
  receiver
   parameters
    (
    parameterDecl
     identifierList
      t
     type_
      typeName
       T1
    )
  String
  signature
   parameters
    (
    )
   result
    type_
     typeName
      string
  block
   {
   statementList
    statement
     returnStmt
      return
      expressionList
       expression
        primaryExpr
         operand
          literal
           basicLit
            string_
             ""
    eos
   }
 eos
  \n
 methodDecl
  func
  receiver
   parameters
    (
    parameterDecl
     identifierList
      t
     type_
      typeName
       T1
    )
  Error
  signature
   parameters
    (
    )
   result
    type_
     typeName
      string
  block
   {
   statementList
    statement
     returnStmt
      return
      expressionList
       expression
        primaryExpr
         operand
          literal
           basicLit
            string_
             ""
    eos
   }
 eos
  \n\n
 declaration
  typeDecl
   type
   typeSpec
    typeDef
     T2
     type_
      typeLit
       structType
        struct
        {
        fieldDecl
         identifierList
          name
         type_
          typeName
           string
        eos
         \n
        }
 eos
  \n\n
 methodDecl
  func
  receiver
   parameters
    (
    parameterDecl
     identifierList
      t
     type_
      typeName
       T2
    )
  M
  signature
   parameters
    (
    )
  block
   {
   }
 eos
  \n
 methodDecl
  func
  receiver
   parameters
    (
    parameterDecl
     identifierList
      t
     type_
      typeName
       T2
    )
  N
  signature
   parameters
    (
    )
  block
   {
   }
 eos
  \n
 methodDecl
  func
  receiver
   parameters
    (
    parameterDecl
     identifierList
      t
     type_
      typeName
       T2
    )
  String
  signature
   parameters
    (
    )
   result
    type_
     typeName
      string
  block
   {
   statementList
    statement
     returnStmt
      return
      expressionList
       expression
        primaryExpr
         operand
          literal
           basicLit
            string_
             ""
    eos
   }
 eos
  \n
 methodDecl
  func
  receiver
   parameters
    (
    parameterDecl
     identifierList
      t
     type_
      typeName
       T2
    )
  Error
  signature
   parameters
    (
    )
   result
    type_
     typeName
      string
  block
   {
   statementList
    statement
     returnStmt
      return
      expressionList
       expression
        primaryExpr
         operand
          literal
           basicLit
            string_
             ""
    eos
   }
 eos
  \n\n
 declaration
  typeDecl
   type
   typeSpec
    typeDef
     I
     type_
      typeLit
       interfaceType
        interface
        {
        methodSpec
         M
         parameters
          (
          )
        eos
         \n
        }
 eos
  \n\n
 declaration
  typeDecl
   type
   typeSpec
    typeDef
     V
     type_
      typeLit
       interfaceType
        interface
        {
        typeElement
         typeTerm
          type_
           typeName
            I
        eos
         \n
        typeElement
         typeTerm
          type_
           typeName
            qualifiedIdent
             fmt
             .
             Stringer
        eos
         \n
        methodSpec
         N
         parameters
          (
          )
        eos
         \n
        typeElement
         typeTerm
          type_
           typeName
            error
        eos
         \n
        }
 eos
  \n\n
 functionDecl
  func
  main
  signature
   parameters
    (
    )
  block
   {
   statementList
    statement
     simpleStmt
      shortVarDecl
       identifierList
        m
       :=
       expressionList
        expression
         primaryExpr
          primaryExpr
           operand
            operandName
             make
          arguments
           (
           type_
            typeLit
             mapType
              map
              [
              type_
               typeName
                I
              ]
              elementType
               type_
                typeName
                 int
           )
    eos
     \n
    statement
     declaration
      varDecl
       var
       varSpec
        identifierList
         i1
        type_
         typeName
          I
        =
        expressionList
         expression
          primaryExpr
           operand
            literal
             compositeLit
              literalType
               typeName
                T1
              literalValue
               {
               elementList
                keyedElement
                 element
                  expression
                   primaryExpr
                    operand
                     literal
                      basicLit
                       string_
                        "foo"
               }
    eos
     \n
    statement
     declaration
      varDecl
       var
       varSpec
        identifierList
         i2
        type_
         typeName
          I
        =
        expressionList
         expression
          primaryExpr
           operand
            literal
             compositeLit
              literalType
               typeName
                T2
              literalValue
               {
               elementList
                keyedElement
                 element
                  expression
                   primaryExpr
                    operand
                     literal
                      basicLit
                       string_
                        "bar"
               }
    eos
     \n
    statement
     simpleStmt
      assignment
       expressionList
        expression
         primaryExpr
          operand
           operandName
            m
           typeArgs
            [
            typeList
             type_
              typeName
               i1
            ]
       assign_op
        =
       expressionList
        expression
         primaryExpr
          operand
           literal
            basicLit
             integer
              1
    eos
     \n
    statement
     simpleStmt
      assignment
       expressionList
        expression
         primaryExpr
          operand
           operandName
            m
           typeArgs
            [
            typeList
             type_
              typeName
               i2
            ]
       assign_op
        =
       expressionList
        expression
         primaryExpr
          operand
           literal
            basicLit
             integer
              2
    eos
     \n
    statement
     simpleStmt
      expressionStmt
       expression
        primaryExpr
         primaryExpr
          primaryExpr
           operand
            operandName
             fmt
          .
          Println
         arguments
          (
          expressionList
           expression
            primaryExpr
             operand
              operandName
               m
          )
    eos
     \n\n
    statement
     simpleStmt
      shortVarDecl
       identifierList
        n
       :=
       expressionList
        expression
         primaryExpr
          primaryExpr
           operand
            operandName
             make
          arguments
           (
           type_
            typeLit
             mapType
              map
              [
              type_
               typeName
                V
              ]
              elementType
               type_
                typeName
                 int
           )
    eos
     \n
    statement
     declaration
      varDecl
       var
       varSpec
        identifierList
         v1
        type_
         typeName
          V
        =
        expressionList
         expression
          primaryExpr
           operand
            literal
             compositeLit
              literalType
               typeName
                T1
              literalValue
               {
               elementList
                keyedElement
                 element
                  expression
                   primaryExpr
                    operand
                     literal
                      basicLit
                       string_
                        "foo"
               }
    eos
     \n
    statement
     declaration
      varDecl
       var
       varSpec
        identifierList
         v2
        type_
         typeName
          V
        =
        expressionList
         expression
          primaryExpr
           operand
            literal
             compositeLit
              literalType
               typeName
                T2
              literalValue
               {
               elementList
                keyedElement
                 element
                  expression
                   primaryExpr
                    operand
                     literal
                      basicLit
                       string_
                        "bar"
               }
    eos
     \n
    statement
     simpleStmt
      expressionStmt
       expression
        primaryExpr
         primaryExpr
          primaryExpr
           operand
            operandName
             v1
          .
          N
         arguments
          (
          )
    eos
     \n
    statement
     simpleStmt
      expressionStmt
       expression
        primaryExpr
         primaryExpr
          primaryExpr
           operand
            operandName
             v2
          .
          M
         arguments
          (
          )
    eos
     \n
    statement
     simpleStmt
      expressionStmt
       expression
        primaryExpr
         primaryExpr
          primaryExpr
           operand
            operandName
             v1
          .
          String
         arguments
          (
          )
    eos
     \n
    statement
     simpleStmt
      expressionStmt
       expression
        primaryExpr
         primaryExpr
          primaryExpr
           operand
            operandName
             v2
          .
          Error
         arguments
          (
          )
    eos
     \n
    statement
     simpleStmt
      assignment
       expressionList
        expression
         primaryExpr
          operand
           operandName
            n
           typeArgs
            [
            typeList
             type_
              typeName
               v1
            ]
       assign_op
        =
       expressionList
        expression
         primaryExpr
          operand
           literal
            basicLit
             integer
              3
    eos
     \n
    statement
     simpleStmt
      assignment
       expressionList
        expression
         primaryExpr
          operand
           operandName
            n
           typeArgs
            [
            typeList
             type_
              typeName
               v2
            ]
       assign_op
        =
       expressionList
        expression
         primaryExpr
          operand
           literal
            basicLit
             integer
              4
    eos
     \n
    statement
     simpleStmt
      expressionStmt
       expression
        primaryExpr
         primaryExpr
          primaryExpr
           operand
            operandName
             fmt
          .
          Println
         arguments
          (
          expressionList
           expression
            primaryExpr
             operand
              operandName
               n
          )
    eos
     \n
   }
 eos
  <EOF>
 <EOF>
