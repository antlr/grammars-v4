sourceFile
 packageClause
  package
  samples
 eos
  \n\n
 importDecl
  import
  importSpec
   importPath
    string_
     "fmt"
 eos
  \n\n
 declaration
  typeDecl
   type
   typeSpec
    typeDef
     Shape
     type_
      typeLit
       interfaceType
        interface
        {
        methodSpec
         Area
         parameters
          (
          parameterDecl
           identifierList
            a
           type_
            typeName
             float64
          )
         result
          type_
           typeName
            float64
        eos
         \n
        }
 eos
  \n\n
 declaration
  typeDecl
   type
   typeSpec
    typeDef
     Object
     type_
      typeLit
       interfaceType
        interface
        {
        methodSpec
         Volume
         parameters
          (
          )
         result
          type_
           typeName
            float64
        eos
         \n
        }
 eos
  \n\n
 declaration
  typeDecl
   type
   typeSpec
    typeDef
     Material
     type_
      typeLit
       interfaceType
        interface
        {
        typeElement
         typeTerm
          type_
           typeName
            Shape
        eos
         \n
        typeElement
         typeTerm
          type_
           typeName
            Object
        eos
         \n
        }
 eos
  \n\n
 declaration
  typeDecl
   type
   typeSpec
    typeDef
     Cube
     type_
      typeLit
       structType
        struct
        {
        fieldDecl
         identifierList
          side
         type_
          typeName
           float64
        eos
         \n
        }
 eos
  \n\n
 methodDecl
  func
  receiver
   parameters
    (
    parameterDecl
     identifierList
      c
     type_
      typeName
       Cube
    )
  Area
  signature
   parameters
    (
    parameterDecl
     identifierList
      a
     type_
      typeName
       float64
    )
   result
    type_
     typeName
      float64
  block
   {
   statementList
    statement
     returnStmt
      return
      expressionList
       expression
        expression
         expression
          primaryExpr
           operand
            literal
             basicLit
              integer
               6
         *
         expression
          primaryExpr
           operand
            (
            expression
             expression
              primaryExpr
               primaryExpr
                operand
                 operandName
                  c
               .
               side
             *
             expression
              primaryExpr
               primaryExpr
                operand
                 operandName
                  c
               .
               side
            )
        *
        expression
         primaryExpr
          operand
           operandName
            a
    eos
     \n
   }
 eos
  \n\n
 methodDecl
  func
  receiver
   parameters
    (
    parameterDecl
     identifierList
      c
     type_
      typeName
       Cube
    )
  Volume
  signature
   parameters
    (
    )
   result
    type_
     typeName
      float64
  block
   {
   statementList
    statement
     returnStmt
      return
      expressionList
       expression
        expression
         expression
          primaryExpr
           primaryExpr
            operand
             operandName
              c
           .
           side
         *
         expression
          primaryExpr
           primaryExpr
            operand
             operandName
              c
           .
           side
        *
        expression
         primaryExpr
          primaryExpr
           operand
            operandName
             c
          .
          side
    eos
     \n
   }
 eos
  \n\n
 functionDecl
  func
  Interfaces
  signature
   parameters
    (
    )
  block
   {
   statementList
    statement
     simpleStmt
      shortVarDecl
       identifierList
        c
       :=
       expressionList
        expression
         primaryExpr
          operand
           literal
            compositeLit
             literalType
              typeName
               Cube
             literalValue
              {
              elementList
               keyedElement
                element
                 expression
                  primaryExpr
                   operand
                    literal
                     basicLit
                      integer
                       3
              }
    eos
     \n
    statement
     declaration
      varDecl
       var
       varSpec
        identifierList
         m
        type_
         typeName
          Material
        =
        expressionList
         expression
          primaryExpr
           operand
            operandName
             c
    eos
     \n
    statement
     declaration
      varDecl
       var
       varSpec
        identifierList
         s
        type_
         typeName
          Shape
        =
        expressionList
         expression
          primaryExpr
           operand
            operandName
             c
    eos
     \n
    statement
     declaration
      varDecl
       var
       varSpec
        identifierList
         o
        type_
         typeName
          Object
        =
        expressionList
         expression
          primaryExpr
           operand
            operandName
             c
    eos
     \n
    statement
     simpleStmt
      expressionStmt
       expression
        primaryExpr
         primaryExpr
          primaryExpr
           operand
            operandName
             fmt
          .
          Printf
         arguments
          (
          expressionList
           expression
            primaryExpr
             operand
              literal
               basicLit
                string_
                 "dynamic type and value of interface m of static type Material is'%T' and '%v'\n"
           ,
           expression
            primaryExpr
             operand
              operandName
               m
           ,
           expression
            primaryExpr
             operand
              operandName
               m
          )
    eos
     \n
    statement
     simpleStmt
      expressionStmt
       expression
        primaryExpr
         primaryExpr
          primaryExpr
           operand
            operandName
             fmt
          .
          Printf
         arguments
          (
          expressionList
           expression
            primaryExpr
             operand
              literal
               basicLit
                string_
                 "dynamic type and value of interface s of static type Shape is'%T' and '%v'\n"
           ,
           expression
            primaryExpr
             operand
              operandName
               s
           ,
           expression
            primaryExpr
             operand
              operandName
               s
          )
    eos
     \n
    statement
     simpleStmt
      expressionStmt
       expression
        primaryExpr
         primaryExpr
          primaryExpr
           operand
            operandName
             fmt
          .
          Printf
         arguments
          (
          expressionList
           expression
            primaryExpr
             operand
              literal
               basicLit
                string_
                 "dynamic type and value of interface o of static type Object is'%T' and '%v'\n"
           ,
           expression
            primaryExpr
             operand
              operandName
               o
           ,
           expression
            primaryExpr
             operand
              operandName
               o
          )
    eos
     \n
   }
 eos
  \n
 <EOF>
