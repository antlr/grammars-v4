sourceFile
 packageClause
  package
  samples
 eos
  \n\n
 importDecl
  import
  (
  importSpec
   importPath
    string_
     "fmt"
  eos
   \n
  )
 eos
  \n\n
 functionDecl
  func
  main
  signature
   parameters
    (
    )
  block
   {
   statementList
    statement
     ifStmt
      if
      eos
       ;
      expression
       primaryExpr
        operand
         operandName
          true
      block
       {
       statementList
        statement
         simpleStmt
          expressionStmt
           expression
            primaryExpr
             primaryExpr
              primaryExpr
               operand
                operandName
                 fmt
              .
              Print
             arguments
              (
              expressionList
               expression
                primaryExpr
                 operand
                  literal
                   basicLit
                    string_
                     "Hello"
              )
        eos
         \n
       }
    eos
     \n\n
    statement
     simpleStmt
      shortVarDecl
       identifierList
        x
       :=
       expressionList
        expression
         primaryExpr
          operand
           literal
            basicLit
             integer
              1
    eos
     \n\n
    statement
     switchStmt
      exprSwitchStmt
       switch
       eos
        ;
       expression
        primaryExpr
         operand
          operandName
           x
       {
       exprCaseClause
        exprSwitchCase
         default
        :
        statementList
         statement
          simpleStmt
           expressionStmt
            expression
             primaryExpr
              primaryExpr
               primaryExpr
                operand
                 operandName
                  fmt
               .
               Print
              arguments
               (
               expressionList
                expression
                 primaryExpr
                  operand
                   literal
                    basicLit
                     string_
                      " "
               )
         eos
          \n
       }
    eos
     \n\n
    statement
     declaration
      varDecl
       var
       varSpec
        identifierList
         y
        type_
         typeLit
          interfaceType
           interface
           {
           }
        =
        expressionList
         expression
          primaryExpr
           operand
            literal
             basicLit
              integer
               1
    eos
     \n\n
    statement
     switchStmt
      typeSwitchStmt
       switch
       eos
        ;
       typeSwitchGuard
        primaryExpr
         operand
          operandName
           y
        .
        (
        type
        )
       {
       typeCaseClause
        typeSwitchCase
         default
        :
        statementList
         statement
          simpleStmt
           expressionStmt
            expression
             primaryExpr
              primaryExpr
               primaryExpr
                operand
                 operandName
                  fmt
               .
               Println
              arguments
               (
               expressionList
                expression
                 primaryExpr
                  operand
                   literal
                    basicLit
                     string_
                      "World"
               )
         eos
          \n
       }
    eos
     \n\n
    statement
     forStmt
      for
      forClause
       eos
        ;
       expression
        primaryExpr
         operand
          operandName
           true
       eos
        ;
      block
       {
       statementList
        statement
         simpleStmt
          expressionStmt
           expression
            primaryExpr
             primaryExpr
              primaryExpr
               operand
                operandName
                 fmt
              .
              Println
             arguments
              (
              expressionList
               expression
                primaryExpr
                 operand
                  literal
                   basicLit
                    string_
                     "!"
              )
        eos
         \n
       }
    eos
     \n\n
   }
 eos
  \n
 <EOF>
