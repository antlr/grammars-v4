sourceFile
 packageClause
  package
  samples
 eos
  \n\n
 importDecl
  import
  (
  importSpec
   importPath
    string_
     "fmt"
  eos
   \n
  )
 eos
  \n\n
 functionDecl
  func
  SliceDecls
  signature
   parameters
    (
    )
  block
   {
   statementList
    statement
     simpleStmt
      shortVarDecl
       identifierList
        primes
       :=
       expressionList
        expression
         primaryExpr
          operand
           literal
            compositeLit
             literalType
              arrayType
               [
               arrayLength
                expression
                 primaryExpr
                  operand
                   literal
                    basicLit
                     integer
                      6
               ]
               elementType
                type_
                 typeName
                  int
             literalValue
              {
              elementList
               keyedElement
                element
                 expression
                  primaryExpr
                   operand
                    literal
                     basicLit
                      integer
                       2
               ,
               keyedElement
                element
                 expression
                  primaryExpr
                   operand
                    literal
                     basicLit
                      integer
                       3
               ,
               keyedElement
                element
                 expression
                  primaryExpr
                   operand
                    literal
                     basicLit
                      integer
                       5
               ,
               keyedElement
                element
                 expression
                  primaryExpr
                   operand
                    literal
                     basicLit
                      integer
                       7
               ,
               keyedElement
                element
                 expression
                  primaryExpr
                   operand
                    literal
                     basicLit
                      integer
                       11
               ,
               keyedElement
                element
                 expression
                  primaryExpr
                   operand
                    literal
                     basicLit
                      integer
                       13
              }
    eos
     \n
    statement
     declaration
      varDecl
       var
       varSpec
        identifierList
         sl
        type_
         typeLit
          sliceType
           [
           ]
           elementType
            type_
             typeName
              int
        =
        expressionList
         expression
          primaryExpr
           primaryExpr
            operand
             operandName
              primes
           slice_
            [
            expression
             primaryExpr
              operand
               literal
                basicLit
                 integer
                  1
            :
            expression
             primaryExpr
              operand
               literal
                basicLit
                 integer
                  4
            ]
    eos
     \n
    statement
     simpleStmt
      expressionStmt
       expression
        primaryExpr
         primaryExpr
          primaryExpr
           operand
            operandName
             fmt
          .
          Println
         arguments
          (
          expressionList
           expression
            primaryExpr
             operand
              operandName
               sl
          )
    eos
     \n\n
    statement
     simpleStmt
      shortVarDecl
       identifierList
        s
       :=
       expressionList
        expression
         primaryExpr
          primaryExpr
           operand
            operandName
             make
          arguments
           (
           type_
            typeLit
             sliceType
              [
              ]
              elementType
               type_
                typeName
                 string
           ,
           expressionList
            expression
             primaryExpr
              operand
               literal
                basicLit
                 integer
                  3
           )
    eos
     \n
    statement
     simpleStmt
      expressionStmt
       expression
        primaryExpr
         primaryExpr
          primaryExpr
           operand
            operandName
             fmt
          .
          Println
         arguments
          (
          expressionList
           expression
            primaryExpr
             operand
              literal
               basicLit
                string_
                 "emp:"
           ,
           expression
            primaryExpr
             operand
              operandName
               s
          )
    eos
     \n\n
    statement
     simpleStmt
      assignment
       expressionList
        expression
         primaryExpr
          primaryExpr
           operand
            operandName
             s
          index
           [
           expression
            primaryExpr
             operand
              literal
               basicLit
                integer
                 0
           ]
       assign_op
        =
       expressionList
        expression
         primaryExpr
          operand
           literal
            basicLit
             string_
              "a"
    eos
     \n
    statement
     simpleStmt
      assignment
       expressionList
        expression
         primaryExpr
          primaryExpr
           operand
            operandName
             s
          index
           [
           expression
            primaryExpr
             operand
              literal
               basicLit
                integer
                 1
           ]
       assign_op
        =
       expressionList
        expression
         primaryExpr
          operand
           literal
            basicLit
             string_
              "b"
    eos
     \n
    statement
     simpleStmt
      assignment
       expressionList
        expression
         primaryExpr
          primaryExpr
           operand
            operandName
             s
          index
           [
           expression
            primaryExpr
             operand
              literal
               basicLit
                integer
                 2
           ]
       assign_op
        =
       expressionList
        expression
         primaryExpr
          operand
           literal
            basicLit
             string_
              "c"
    eos
     \n
    statement
     simpleStmt
      expressionStmt
       expression
        primaryExpr
         primaryExpr
          primaryExpr
           operand
            operandName
             fmt
          .
          Println
         arguments
          (
          expressionList
           expression
            primaryExpr
             operand
              literal
               basicLit
                string_
                 "set:"
           ,
           expression
            primaryExpr
             operand
              operandName
               s
          )
    eos
     \n
    statement
     simpleStmt
      expressionStmt
       expression
        primaryExpr
         primaryExpr
          primaryExpr
           operand
            operandName
             fmt
          .
          Println
         arguments
          (
          expressionList
           expression
            primaryExpr
             operand
              literal
               basicLit
                string_
                 "get:"
           ,
           expression
            primaryExpr
             primaryExpr
              operand
               operandName
                s
             index
              [
              expression
               primaryExpr
                operand
                 literal
                  basicLit
                   integer
                    2
              ]
          )
    eos
     \n
    statement
     simpleStmt
      expressionStmt
       expression
        primaryExpr
         primaryExpr
          primaryExpr
           operand
            operandName
             fmt
          .
          Println
         arguments
          (
          expressionList
           expression
            primaryExpr
             operand
              literal
               basicLit
                string_
                 "len:"
           ,
           expression
            primaryExpr
             primaryExpr
              operand
               operandName
                len
             arguments
              (
              expressionList
               expression
                primaryExpr
                 operand
                  operandName
                   s
              )
          )
    eos
     \n\n
    statement
     simpleStmt
      assignment
       expressionList
        expression
         primaryExpr
          operand
           operandName
            s
       assign_op
        =
       expressionList
        expression
         primaryExpr
          primaryExpr
           operand
            operandName
             append
          arguments
           (
           expressionList
            expression
             primaryExpr
              operand
               operandName
                s
            ,
            expression
             primaryExpr
              operand
               literal
                basicLit
                 string_
                  "d"
           )
    eos
     \n
    statement
     simpleStmt
      assignment
       expressionList
        expression
         primaryExpr
          operand
           operandName
            s
       assign_op
        =
       expressionList
        expression
         primaryExpr
          primaryExpr
           operand
            operandName
             append
          arguments
           (
           expressionList
            expression
             primaryExpr
              operand
               operandName
                s
            ,
            expression
             primaryExpr
              operand
               literal
                basicLit
                 string_
                  "e"
            ,
            expression
             primaryExpr
              operand
               literal
                basicLit
                 string_
                  "f"
           )
    eos
     \n
    statement
     simpleStmt
      expressionStmt
       expression
        primaryExpr
         primaryExpr
          primaryExpr
           operand
            operandName
             fmt
          .
          Println
         arguments
          (
          expressionList
           expression
            primaryExpr
             operand
              literal
               basicLit
                string_
                 "apd:"
           ,
           expression
            primaryExpr
             operand
              operandName
               s
          )
    eos
     \n\n
    statement
     simpleStmt
      shortVarDecl
       identifierList
        c
       :=
       expressionList
        expression
         primaryExpr
          primaryExpr
           operand
            operandName
             make
          arguments
           (
           type_
            typeLit
             sliceType
              [
              ]
              elementType
               type_
                typeName
                 string
           ,
           expressionList
            expression
             primaryExpr
              primaryExpr
               operand
                operandName
                 len
              arguments
               (
               expressionList
                expression
                 primaryExpr
                  operand
                   operandName
                    s
               )
           )
    eos
     \n
    statement
     simpleStmt
      expressionStmt
       expression
        primaryExpr
         primaryExpr
          operand
           operandName
            copy
         arguments
          (
          expressionList
           expression
            primaryExpr
             operand
              operandName
               c
           ,
           expression
            primaryExpr
             operand
              operandName
               s
          )
    eos
     \n
    statement
     simpleStmt
      expressionStmt
       expression
        primaryExpr
         primaryExpr
          primaryExpr
           operand
            operandName
             fmt
          .
          Println
         arguments
          (
          expressionList
           expression
            primaryExpr
             operand
              literal
               basicLit
                string_
                 "cpy:"
           ,
           expression
            primaryExpr
             operand
              operandName
               c
          )
    eos
     \n\n
    statement
     simpleStmt
      shortVarDecl
       identifierList
        l
       :=
       expressionList
        expression
         primaryExpr
          primaryExpr
           operand
            operandName
             s
          slice_
           [
           expression
            primaryExpr
             operand
              literal
               basicLit
                integer
                 2
           :
           expression
            primaryExpr
             operand
              literal
               basicLit
                integer
                 5
           ]
    eos
     \n
    statement
     simpleStmt
      expressionStmt
       expression
        primaryExpr
         primaryExpr
          primaryExpr
           operand
            operandName
             fmt
          .
          Println
         arguments
          (
          expressionList
           expression
            primaryExpr
             operand
              literal
               basicLit
                string_
                 "sl1:"
           ,
           expression
            primaryExpr
             operand
              operandName
               l
          )
    eos
     \n\n
    statement
     simpleStmt
      assignment
       expressionList
        expression
         primaryExpr
          operand
           operandName
            l
       assign_op
        =
       expressionList
        expression
         primaryExpr
          primaryExpr
           operand
            operandName
             s
          slice_
           [
           :
           expression
            primaryExpr
             operand
              literal
               basicLit
                integer
                 5
           ]
    eos
     \n
    statement
     simpleStmt
      expressionStmt
       expression
        primaryExpr
         primaryExpr
          primaryExpr
           operand
            operandName
             fmt
          .
          Println
         arguments
          (
          expressionList
           expression
            primaryExpr
             operand
              literal
               basicLit
                string_
                 "sl2:"
           ,
           expression
            primaryExpr
             operand
              operandName
               l
          )
    eos
     \n\n
    statement
     simpleStmt
      assignment
       expressionList
        expression
         primaryExpr
          operand
           operandName
            l
       assign_op
        =
       expressionList
        expression
         primaryExpr
          primaryExpr
           operand
            operandName
             s
          slice_
           [
           expression
            primaryExpr
             operand
              literal
               basicLit
                integer
                 2
           :
           ]
    eos
     \n
    statement
     simpleStmt
      expressionStmt
       expression
        primaryExpr
         primaryExpr
          primaryExpr
           operand
            operandName
             fmt
          .
          Println
         arguments
          (
          expressionList
           expression
            primaryExpr
             operand
              literal
               basicLit
                string_
                 "sl3:"
           ,
           expression
            primaryExpr
             operand
              operandName
               l
          )
    eos
     \n
    statement
     simpleStmt
      shortVarDecl
       identifierList
        t
       :=
       expressionList
        expression
         primaryExpr
          operand
           literal
            compositeLit
             literalType
              sliceType
               [
               ]
               elementType
                type_
                 typeName
                  string
             literalValue
              {
              elementList
               keyedElement
                element
                 expression
                  primaryExpr
                   operand
                    literal
                     basicLit
                      string_
                       "g"
               ,
               keyedElement
                element
                 expression
                  primaryExpr
                   operand
                    literal
                     basicLit
                      string_
                       "h"
               ,
               keyedElement
                element
                 expression
                  primaryExpr
                   operand
                    literal
                     basicLit
                      string_
                       "i"
              }
    eos
     \n
    statement
     simpleStmt
      expressionStmt
       expression
        primaryExpr
         primaryExpr
          primaryExpr
           operand
            operandName
             fmt
          .
          Println
         arguments
          (
          expressionList
           expression
            primaryExpr
             operand
              literal
               basicLit
                string_
                 "dcl:"
           ,
           expression
            primaryExpr
             operand
              operandName
               t
          )
    eos
     \n\n
    statement
     simpleStmt
      shortVarDecl
       identifierList
        twoD
       :=
       expressionList
        expression
         primaryExpr
          primaryExpr
           operand
            operandName
             make
          arguments
           (
           type_
            typeLit
             sliceType
              [
              ]
              elementType
               type_
                typeLit
                 sliceType
                  [
                  ]
                  elementType
                   type_
                    typeName
                     int
           ,
           expressionList
            expression
             primaryExpr
              operand
               literal
                basicLit
                 integer
                  3
           )
    eos
     \n
    statement
     forStmt
      for
      forClause
       simpleStmt
        shortVarDecl
         identifierList
          i
         :=
         expressionList
          expression
           primaryExpr
            operand
             literal
              basicLit
               integer
                0
       eos
        ;
       expression
        expression
         primaryExpr
          operand
           operandName
            i
        <
        expression
         primaryExpr
          operand
           literal
            basicLit
             integer
              3
       eos
        ;
       simpleStmt
        incDecStmt
         expression
          primaryExpr
           operand
            operandName
             i
         ++
      block
       {
       statementList
        statement
         simpleStmt
          shortVarDecl
           identifierList
            innerLen
           :=
           expressionList
            expression
             expression
              primaryExpr
               operand
                operandName
                 i
             +
             expression
              primaryExpr
               operand
                literal
                 basicLit
                  integer
                   1
        eos
         \n
        statement
         simpleStmt
          assignment
           expressionList
            expression
             primaryExpr
              operand
               operandName
                twoD
               typeArgs
                [
                typeList
                 type_
                  typeName
                   i
                ]
           assign_op
            =
           expressionList
            expression
             primaryExpr
              primaryExpr
               operand
                operandName
                 make
              arguments
               (
               type_
                typeLit
                 sliceType
                  [
                  ]
                  elementType
                   type_
                    typeName
                     int
               ,
               expressionList
                expression
                 primaryExpr
                  operand
                   operandName
                    innerLen
               )
        eos
         \n
        statement
         forStmt
          for
          forClause
           simpleStmt
            shortVarDecl
             identifierList
              j
             :=
             expressionList
              expression
               primaryExpr
                operand
                 literal
                  basicLit
                   integer
                    0
           eos
            ;
           expression
            expression
             primaryExpr
              operand
               operandName
                j
            <
            expression
             primaryExpr
              operand
               operandName
                innerLen
           eos
            ;
           simpleStmt
            incDecStmt
             expression
              primaryExpr
               operand
                operandName
                 j
             ++
          block
           {
           statementList
            statement
             simpleStmt
              assignment
               expressionList
                expression
                 primaryExpr
                  primaryExpr
                   operand
                    operandName
                     twoD
                    typeArgs
                     [
                     typeList
                      type_
                       typeName
                        i
                     ]
                  index
                   [
                   expression
                    primaryExpr
                     operand
                      operandName
                       j
                   ]
               assign_op
                =
               expressionList
                expression
                 expression
                  primaryExpr
                   operand
                    operandName
                     i
                 +
                 expression
                  primaryExpr
                   operand
                    operandName
                     j
            eos
             \n
           }
        eos
         \n
       }
    eos
     \n
    statement
     simpleStmt
      expressionStmt
       expression
        primaryExpr
         primaryExpr
          primaryExpr
           operand
            operandName
             fmt
          .
          Println
         arguments
          (
          expressionList
           expression
            primaryExpr
             operand
              literal
               basicLit
                string_
                 "2d: "
           ,
           expression
            primaryExpr
             operand
              operandName
               twoD
          )
    eos
     \n
   }
 eos
  <EOF>
 <EOF>
