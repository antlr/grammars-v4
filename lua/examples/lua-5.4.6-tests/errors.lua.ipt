start_
 chunk
  block
   stat
    functioncall
     print
     args
      (
      explist
       exp
        string
         "testing errors"
      )
   stat
    local
    attnamelist
     debug
     attrib
    =
    explist
     exp
      prefixexp
       functioncall
        require
        args
         string
          "debug"
   stat
    local
    attnamelist
     mt
     attrib
    =
    explist
     exp
      exp
       prefixexp
        functioncall
         getmetatable
         args
          (
          explist
           exp
            prefixexp
             _G
          )
      or
      exp
       tableconstructor
        {
        }
   stat
    local
    attnamelist
     oldmm
     attrib
    =
    explist
     exp
      prefixexp
       mt
       .
       __index
   stat
    varlist
     var
      prefixexp
       mt
      .
      __index
    =
    explist
     exp
      nil
   stat
    local
    function
    checkerr
    funcbody
     (
     parlist
      namelist
       msg
       ,
       f
      ,
      ...
     )
     block
      stat
       local
       attnamelist
        st
        attrib
        ,
        err
        attrib
       =
       explist
        exp
         prefixexp
          functioncall
           pcall
           args
            (
            explist
             exp
              prefixexp
               f
             ,
             exp
              ...
            )
      stat
       functioncall
        assert
        args
         (
         explist
          exp
           exp
            not
            exp
             prefixexp
              st
           and
           exp
            prefixexp
             functioncall
              string
              .
              find
              args
               (
               explist
                exp
                 prefixexp
                  err
                ,
                exp
                 prefixexp
                  msg
               )
         )
     end
   stat
    local
    function
    doit
    funcbody
     (
     parlist
      namelist
       s
     )
     block
      stat
       local
       attnamelist
        f
        attrib
        ,
        msg
        attrib
       =
       explist
        exp
         prefixexp
          functioncall
           load
           args
            (
            explist
             exp
              prefixexp
               s
            )
      stat
       if
       exp
        not
        exp
         prefixexp
          f
       then
       block
        retstat
         return
         explist
          exp
           prefixexp
            msg
       end
      stat
       local
       attnamelist
        cond
        attrib
        ,
        msg
        attrib
       =
       explist
        exp
         prefixexp
          functioncall
           pcall
           args
            (
            explist
             exp
              prefixexp
               f
            )
      retstat
       return
       explist
        exp
         exp
          prefixexp
           (
           exp
            not
            exp
             prefixexp
              cond
           )
         and
         exp
          prefixexp
           msg
     end
   stat
    local
    function
    checkmessage
    funcbody
     (
     parlist
      namelist
       prog
       ,
       msg
       ,
       debug
     )
     block
      stat
       local
       attnamelist
        m
        attrib
       =
       explist
        exp
         prefixexp
          functioncall
           doit
           args
            (
            explist
             exp
              prefixexp
               prog
            )
      stat
       if
       exp
        prefixexp
         debug
       then
       block
        stat
         functioncall
          print
          args
           (
           explist
            exp
             prefixexp
              m
            ,
            exp
             prefixexp
              msg
           )
       end
      stat
       functioncall
        assert
        args
         (
         explist
          exp
           prefixexp
            functioncall
             string
             .
             find
             args
              (
              explist
               exp
                prefixexp
                 m
               ,
               exp
                prefixexp
                 msg
               ,
               exp
                number
                 1
               ,
               exp
                true
              )
         )
     end
   stat
    local
    function
    checksyntax
    funcbody
     (
     parlist
      namelist
       prog
       ,
       extra
       ,
       token
       ,
       line
     )
     block
      stat
       local
       attnamelist
        msg
        attrib
       =
       explist
        exp
         prefixexp
          functioncall
           doit
           args
            (
            explist
             exp
              prefixexp
               prog
            )
      stat
       if
       exp
        exp
         not
         exp
          prefixexp
           functioncall
            string
            .
            find
            args
             (
             explist
              exp
               prefixexp
                token
              ,
              exp
               string
                "^<%a"
             )
        and
        exp
         not
         exp
          prefixexp
           functioncall
            string
            .
            find
            args
             (
             explist
              exp
               prefixexp
                token
              ,
              exp
               string
                "^char%("
             )
       then
       block
        stat
         varlist
          var
           token
         =
         explist
          exp
           exp
            string
             "'"
           ..
           exp
            exp
             prefixexp
              token
            ..
            exp
             string
              "'"
       end
      stat
       varlist
        var
         token
       =
       explist
        exp
         prefixexp
          functioncall
           string
           .
           gsub
           args
            (
            explist
             exp
              prefixexp
               token
             ,
             exp
              string
               "(%p)"
             ,
             exp
              string
               "%%%1"
            )
      stat
       local
       attnamelist
        pt
        attrib
       =
       explist
        exp
         prefixexp
          functioncall
           string
           .
           format
           args
            (
            explist
             exp
              string
               [[^%%[string ".*"%%]:%d: .- near %s$]]
             ,
             exp
              prefixexp
               line
             ,
             exp
              prefixexp
               token
            )
      stat
       functioncall
        assert
        args
         (
         explist
          exp
           prefixexp
            functioncall
             string
             .
             find
             args
              (
              explist
               exp
                prefixexp
                 msg
               ,
               exp
                prefixexp
                 pt
              )
         )
      stat
       functioncall
        assert
        args
         (
         explist
          exp
           prefixexp
            functioncall
             string
             .
             find
             args
              (
              explist
               exp
                prefixexp
                 msg
               ,
               exp
                prefixexp
                 msg
               ,
               exp
                number
                 1
               ,
               exp
                true
              )
         )
     end
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        exp
         prefixexp
          functioncall
           doit
           args
            (
            explist
             exp
              string
               "error('hi', 0)"
            )
        ==
        exp
         string
          'hi'
      )
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        exp
         prefixexp
          functioncall
           doit
           args
            (
            explist
             exp
              string
               "error()"
            )
        ==
        exp
         nil
      )
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        prefixexp
         functioncall
          doit
          args
           (
           explist
            exp
             string
              "table.unpack({}, 1, n=2^30)"
           )
      )
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        prefixexp
         functioncall
          doit
          args
           (
           explist
            exp
             string
              "a=math.sin()"
           )
      )
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        exp
         not
         exp
          prefixexp
           functioncall
            doit
            args
             (
             explist
              exp
               string
                "tostring(1)"
             )
        and
        exp
         prefixexp
          functioncall
           doit
           args
            (
            explist
             exp
              string
               "tostring()"
            )
      )
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        prefixexp
         functioncall
          doit
          args
           string
            "tonumber()"
      )
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        prefixexp
         functioncall
          doit
          args
           string
            "repeat until 1; a"
      )
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        prefixexp
         functioncall
          doit
          args
           string
            "return;;"
      )
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        prefixexp
         functioncall
          doit
          args
           string
            "assert(false)"
      )
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        prefixexp
         functioncall
          doit
          args
           string
            "assert(nil)"
      )
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        prefixexp
         functioncall
          doit
          args
           (
           explist
            exp
             string
              "function a (... , ...) end"
           )
      )
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        prefixexp
         functioncall
          doit
          args
           (
           explist
            exp
             string
              "function a (, ...) end"
           )
      )
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        prefixexp
         functioncall
          doit
          args
           (
           explist
            exp
             string
              "local t={}; t = t[#t] + 1"
           )
      )
   stat
    functioncall
     checksyntax
     args
      (
      explist
       exp
        string
         [[\n  local a = {4\n\n]]
       ,
       exp
        string
         "'}' expected (to close '{' at line 1)"
       ,
       exp
        string
         "<eof>"
       ,
       exp
        number
         3
      )
   stat
    do
    block
     stat
      local
      function
      checksyntax
      funcbody
       (
       parlist
        namelist
         prog
         ,
         msg
         ,
         line
       )
       block
        stat
         local
         attnamelist
          st
          attrib
          ,
          err
          attrib
         =
         explist
          exp
           prefixexp
            functioncall
             load
             args
              (
              explist
               exp
                prefixexp
                 prog
              )
        stat
         functioncall
          assert
          args
           (
           explist
            exp
             prefixexp
              functioncall
               string
               .
               find
               args
                (
                explist
                 exp
                  prefixexp
                   err
                 ,
                 exp
                  exp
                   string
                    "line "
                  ..
                  exp
                   prefixexp
                    line
                )
           )
        stat
         functioncall
          assert
          args
           (
           explist
            exp
             prefixexp
              functioncall
               string
               .
               find
               args
                (
                explist
                 exp
                  prefixexp
                   err
                 ,
                 exp
                  prefixexp
                   msg
                 ,
                 exp
                  number
                   1
                 ,
                 exp
                  true
                )
           )
       end
     stat
      functioncall
       checksyntax
       args
        (
        explist
         exp
          string
           [[\n    ::A:: a = 1\n    ::A::\n  ]]
         ,
         exp
          string
           "label 'A' already defined"
         ,
         exp
          number
           1
        )
     stat
      functioncall
       checksyntax
       args
        (
        explist
         exp
          string
           [[\n    a = 1\n    goto A\n    do ::A:: end\n  ]]
         ,
         exp
          string
           "no visible label 'A'"
         ,
         exp
          number
           2
        )
    end
   stat
    if
    exp
     not
     exp
      prefixexp
       T
    then
    block
     stat
      functioncall
       (
       exp
        exp
         prefixexp
          Message
        or
        exp
         prefixexp
          print
       )
       args
        (
        explist
         exp
          string
           '\n >>> testC not active: skipping memory message test <<<\n'
        )
    else
    block
     stat
      functioncall
       print
       args
        string
         "testing memory error message"
     stat
      local
      attnamelist
       a
       attrib
      =
      explist
       exp
        tableconstructor
         {
         }
     stat
      for
      i
      =
      exp
       number
        1
      ,
      exp
       number
        10000
      do
      block
       stat
        varlist
         var
          prefixexp
           a
          [
          exp
           prefixexp
            i
          ]
        =
        explist
         exp
          true
      end
     stat
      functioncall
       collectgarbage
       args
        (
        )
     stat
      functioncall
       T
       .
       totalmem
       args
        (
        explist
         exp
          exp
           prefixexp
            functioncall
             T
             .
             totalmem
             args
              (
              )
          +
          exp
           number
            10000
        )
     stat
      local
      attnamelist
       st
       attrib
       ,
       msg
       attrib
      =
      explist
       exp
        prefixexp
         functioncall
          pcall
          args
           (
           explist
            exp
             functiondef
              function
              funcbody
               (
               parlist
               )
               block
                stat
                 for
                 i
                 =
                 exp
                  number
                   1
                 ,
                 exp
                  number
                   100000
                 do
                 block
                  stat
                   varlist
                    var
                     prefixexp
                      a
                     [
                     exp
                      prefixexp
                       i
                     ]
                   =
                   explist
                    exp
                     prefixexp
                      functioncall
                       tostring
                       args
                        (
                        explist
                         exp
                          prefixexp
                           i
                        )
                 end
               end
           )
     stat
      functioncall
       T
       .
       totalmem
       args
        (
        explist
         exp
          number
           0
        )
     stat
      functioncall
       assert
       args
        (
        explist
         exp
          exp
           not
           exp
            prefixexp
             st
          and
          exp
           exp
            prefixexp
             msg
           ==
           exp
            exp
             string
              "not enough"
            ..
            exp
             string
              " memory"
        )
    end
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "a = {} + 1"
       ,
       exp
        string
         "arithmetic"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "a = {} | 1"
       ,
       exp
        string
         "bitwise operation"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "a = {} < 1"
       ,
       exp
        string
         "attempt to compare"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "a = {} <= 1"
       ,
       exp
        string
         "attempt to compare"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "aaa=1; bbbb=2; aaa=math.sin(3)+bbbb(3)"
       ,
       exp
        string
         "global 'bbbb'"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "aaa={}; do local aaa=1 end aaa:bbbb(3)"
       ,
       exp
        string
         "method 'bbbb'"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "local a={}; a.bbbb(3)"
       ,
       exp
        string
         "field 'bbbb'"
      )
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        not
        exp
         prefixexp
          functioncall
           string
           .
           find
           args
            (
            explist
             exp
              prefixexp
               functioncall
                doit
                args
                 string
                  "aaa={13}; local bbbb=1; aaa[bbbb](3)"
             ,
             exp
              string
               "'bbbb'"
            )
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "aaa={13}; local bbbb=1; aaa[bbbb](3)"
       ,
       exp
        string
         "number"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "aaa=(1)..{}"
       ,
       exp
        string
         "a table value"
      )
   stat
    varlist
     var
      prefixexp
       _G
      .
      aaa
     ,
     var
      prefixexp
       _G
      .
      bbbb
    =
    explist
     exp
      nil
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "local a; a(13)"
       ,
       exp
        string
         "local 'a'"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         [[\n  local a = setmetatable({}, {__add = 34})\n  a = a + 1\n]]
       ,
       exp
        string
         "metamethod 'add'"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         [[\n  local a = setmetatable({}, {__lt = {}})\n  a = a > a\n]]
       ,
       exp
        string
         "metamethod 'lt'"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "local a={}; return a.bbbb(3)"
       ,
       exp
        string
         "field 'bbbb'"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "aaa={}; do local aaa=1 end; return aaa:bbbb(3)"
       ,
       exp
        string
         "method 'bbbb'"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "aaa = #print"
       ,
       exp
        string
         "length of a function value"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "aaa = #3"
       ,
       exp
        string
         "length of a number value"
      )
   stat
    varlist
     var
      prefixexp
       _G
      .
      aaa
    =
    explist
     exp
      nil
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "aaa.bbb:ddd(9)"
       ,
       exp
        string
         "global 'aaa'"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "local aaa={bbb=1}; aaa.bbb:ddd(9)"
       ,
       exp
        string
         "field 'bbb'"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "local aaa={bbb={}}; aaa.bbb:ddd(9)"
       ,
       exp
        string
         "method 'ddd'"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "local a,b,c; (function () a = b+1.1 end)()"
       ,
       exp
        string
         "upvalue 'b'"
      )
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        not
        exp
         prefixexp
          functioncall
           doit
           args
            string
             "local aaa={bbb={ddd=next}}; aaa.bbb:ddd(nil)"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "local a,b,cc; (function () a = cc[1] end)()"
       ,
       exp
        string
         "upvalue 'cc'"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "local a,b,cc; (function () a.x = 1 end)()"
       ,
       exp
        string
         "upvalue 'a'"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "local _ENV = {x={}}; a = a + 1"
       ,
       exp
        string
         "global 'a'"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "BB=1; local aaa={}; x=aaa+BB"
       ,
       exp
        string
         "local 'aaa'"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "aaa={}; x=3.3/aaa"
       ,
       exp
        string
         "global 'aaa'"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "aaa=2; BB=nil;x=aaa*BB"
       ,
       exp
        string
         "global 'BB'"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "aaa={}; x=-aaa"
       ,
       exp
        string
         "global 'aaa'"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "aaa=1; local aaa,bbbb=2,3; aaa = math.sin(1) and bbbb(3)"
       ,
       exp
        string
         "local 'bbbb'"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "aaa=1; local aaa,bbbb=2,3; aaa = bbbb(1) or aaa(3)"
       ,
       exp
        string
         "local 'bbbb'"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "local a,b,c,f = 1,1,1; f((a and b) or c)"
       ,
       exp
        string
         "local 'f'"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "local a,b,c = 1,1,1; ((a and b) or c)()"
       ,
       exp
        string
         "call a number value"
      )
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        not
        exp
         prefixexp
          functioncall
           string
           .
           find
           args
            (
            explist
             exp
              prefixexp
               functioncall
                doit
                args
                 string
                  "aaa={}; x=(aaa or aaa)+(aaa and aaa)"
             ,
             exp
              string
               "'aaa'"
            )
      )
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        not
        exp
         prefixexp
          functioncall
           string
           .
           find
           args
            (
            explist
             exp
              prefixexp
               functioncall
                doit
                args
                 string
                  "aaa={}; (aaa or aaa)()"
             ,
             exp
              string
               "'aaa'"
            )
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "print(print < 10)"
       ,
       exp
        string
         "function with number"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "print(print < print)"
       ,
       exp
        string
         "two function values"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "print('10' < 10)"
       ,
       exp
        string
         "string with number"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "print(10 < '23')"
       ,
       exp
        string
         "number with string"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "local a = 2.0^100; x = a << 2"
       ,
       exp
        string
         "local a"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "local a = 1 >> 2.0^100"
       ,
       exp
        string
         "has no integer representation"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "local a = 10.1 << 2.0^100"
       ,
       exp
        string
         "has no integer representation"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "local a = 2.0^100 & 1"
       ,
       exp
        string
         "has no integer representation"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "local a = 2.0^100 & 1e100"
       ,
       exp
        string
         "has no integer representation"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "local a = 2.0 | 1e40"
       ,
       exp
        string
         "has no integer representation"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "local a = 2e100 ~ 1"
       ,
       exp
        string
         "has no integer representation"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "string.sub('a', 2.0^100)"
       ,
       exp
        string
         "has no integer representation"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "string.rep('a', 3.3)"
       ,
       exp
        string
         "has no integer representation"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "return 6e40 & 7"
       ,
       exp
        string
         "has no integer representation"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "return 34 << 7e30"
       ,
       exp
        string
         "has no integer representation"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "return ~-3e40"
       ,
       exp
        string
         "has no integer representation"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "return ~-3.009"
       ,
       exp
        string
         "has no integer representation"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "return 3.009 & 1"
       ,
       exp
        string
         "has no integer representation"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "return 34 >> {}"
       ,
       exp
        string
         "table value"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "aaa = 24 // 0"
       ,
       exp
        string
         "divide by zero"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "aaa = 1 % 0"
       ,
       exp
        string
         "'n%0'"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "local a = setmetatable({}, {__index = 10}).x"
       ,
       exp
        string
         "attempt to index a number value"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "for i = {}, 10 do end"
       ,
       exp
        string
         "table"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "for i = io.stdin, 10 do end"
       ,
       exp
        string
         "FILE"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "for i = {}, 10 do end"
       ,
       exp
        string
         "initial value"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "for i = 1, 'x', 10 do end"
       ,
       exp
        string
         "string"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "for i = 1, {}, 10 do end"
       ,
       exp
        string
         "limit"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "for i = 1, {} do end"
       ,
       exp
        string
         "limit"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "for i = 1, 10, print do end"
       ,
       exp
        string
         "step"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "for i = 1, 10, print do end"
       ,
       exp
        string
         "function"
      )
   stat
    varlist
     var
      prefixexp
       _G
      .
      D
    =
    explist
     exp
      prefixexp
       debug
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         [[\n  -- create light udata\n  local x = D.upvalueid(function () return debug end, 1)\n  D.setuservalue(x, {})\n]]
       ,
       exp
        string
         "light userdata"
      )
   stat
    varlist
     var
      prefixexp
       _G
      .
      D
    =
    explist
     exp
      nil
   stat
    do
    block
     stat
      functioncall
       checkmessage
       args
        (
        explist
         exp
          string
           "math.sin(io.input())"
         ,
         exp
          string
           "(number expected, got FILE*)"
        )
     stat
      varlist
       var
        prefixexp
         _G
        .
        XX
      =
      explist
       exp
        prefixexp
         functioncall
          setmetatable
          args
           (
           explist
            exp
             tableconstructor
              {
              }
            ,
            exp
             tableconstructor
              {
              fieldlist
               field
                __name
                =
                exp
                 string
                  "My Type"
              }
           )
     stat
      functioncall
       assert
       args
        (
        explist
         exp
          prefixexp
           functioncall
            string
            .
            find
            args
             (
             explist
              exp
               prefixexp
                functioncall
                 tostring
                 args
                  (
                  explist
                   exp
                    prefixexp
                     XX
                  )
              ,
              exp
               string
                "^My Type"
             )
        )
     stat
      functioncall
       checkmessage
       args
        (
        explist
         exp
          string
           "io.input(XX)"
         ,
         exp
          string
           "(FILE* expected, got My Type)"
        )
     stat
      functioncall
       checkmessage
       args
        (
        explist
         exp
          string
           "return XX + 1"
         ,
         exp
          string
           "on a My Type value"
        )
     stat
      functioncall
       checkmessage
       args
        (
        explist
         exp
          string
           "return ~io.stdin"
         ,
         exp
          string
           "on a FILE* value"
        )
     stat
      functioncall
       checkmessage
       args
        (
        explist
         exp
          string
           "return XX < XX"
         ,
         exp
          string
           "two My Type values"
        )
     stat
      functioncall
       checkmessage
       args
        (
        explist
         exp
          string
           "return {} < XX"
         ,
         exp
          string
           "table with My Type"
        )
     stat
      functioncall
       checkmessage
       args
        (
        explist
         exp
          string
           "return XX < io.stdin"
         ,
         exp
          string
           "My Type with FILE*"
        )
     stat
      varlist
       var
        prefixexp
         _G
        .
        XX
      =
      explist
       exp
        nil
     stat
      if
      exp
       prefixexp
        T
      then
      block
       stat
        local
        attnamelist
         x
         attrib
        =
        explist
         exp
          prefixexp
           functioncall
            setmetatable
            args
             (
             explist
              exp
               tableconstructor
                {
                }
              ,
              exp
               tableconstructor
                {
                fieldlist
                 field
                  __name
                  =
                  exp
                   string
                    "TABLE"
                }
             )
       stat
        functioncall
         assert
         args
          (
          explist
           exp
            exp
             prefixexp
              functioncall
               T
               .
               testC
               args
                (
                explist
                 exp
                  string
                   "Ltolstring -1; return 1"
                 ,
                 exp
                  prefixexp
                   x
                )
            ==
            exp
             prefixexp
              functioncall
               tostring
               args
                (
                explist
                 exp
                  prefixexp
                   x
                )
          )
       stat
        local
        attnamelist
         a
         attrib
         ,
         b
         attrib
        =
        explist
         exp
          prefixexp
           functioncall
            T
            .
            testC
            args
             (
             explist
              exp
               string
                "pushint 10; Ltolstring -2; return 2"
              ,
              exp
               prefixexp
                x
             )
       stat
        functioncall
         assert
         args
          (
          explist
           exp
            exp
             exp
              prefixexp
               a
             ==
             exp
              number
               10
            and
            exp
             exp
              prefixexp
               b
             ==
             exp
              prefixexp
               functioncall
                tostring
                args
                 (
                 explist
                  exp
                   prefixexp
                    x
                 )
          )
       stat
        functioncall
         setmetatable
         args
          (
          explist
           exp
            prefixexp
             x
           ,
           exp
            tableconstructor
             {
             fieldlist
              field
               __tostring
               =
               exp
                functiondef
                 function
                 funcbody
                  (
                  parlist
                   namelist
                    o
                  )
                  block
                   stat
                    functioncall
                     assert
                     args
                      (
                      explist
                       exp
                        exp
                         prefixexp
                          o
                        ==
                        exp
                         prefixexp
                          x
                      )
                   retstat
                    return
                    explist
                     exp
                      string
                       "ABC"
                  end
             }
          )
       stat
        local
        attnamelist
         a
         attrib
         ,
         b
         attrib
         ,
         c
         attrib
        =
        explist
         exp
          prefixexp
           functioncall
            T
            .
            testC
            args
             (
             explist
              exp
               string
                "pushint 10; Ltolstring -2; return 3"
              ,
              exp
               prefixexp
                x
             )
       stat
        functioncall
         assert
         args
          (
          explist
           exp
            exp
             exp
              exp
               prefixexp
                a
              ==
              exp
               prefixexp
                x
             and
             exp
              exp
               prefixexp
                b
              ==
              exp
               number
                10
            and
            exp
             exp
              prefixexp
               c
             ==
             exp
              string
               "ABC"
          )
      end
    end
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "(io.write or print){}"
       ,
       exp
        string
         "io.write"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "(collectgarbage or print){}"
       ,
       exp
        string
         "collectgarbage"
      )
   stat
    do
    block
     stat
      local
      attnamelist
       f
       attrib
      =
      explist
       exp
        functiondef
         function
         funcbody
          (
          parlist
           namelist
            a
          )
          block
           retstat
            return
            explist
             exp
              exp
               prefixexp
                a
              +
              exp
               number
                1
          end
     stat
      varlist
       var
        f
      =
      explist
       exp
        prefixexp
         functioncall
          assert
          args
           (
           explist
            exp
             prefixexp
              functioncall
               load
               args
                (
                explist
                 exp
                  prefixexp
                   functioncall
                    string
                    .
                    dump
                    args
                     (
                     explist
                      exp
                       prefixexp
                        f
                      ,
                      exp
                       true
                     )
                )
           )
     stat
      functioncall
       assert
       args
        (
        explist
         exp
          exp
           prefixexp
            functioncall
             f
             args
              (
              explist
               exp
                number
                 3
              )
          ==
          exp
           number
            4
        )
     stat
      functioncall
       checkerr
       args
        (
        explist
         exp
          string
           "^%?:%-1:"
         ,
         exp
          prefixexp
           f
         ,
         exp
          tableconstructor
           {
           }
        )
     stat
      varlist
       var
        f
      =
      explist
       exp
        functiondef
         function
         funcbody
          (
          parlist
          )
          block
           stat
            local
            attnamelist
             a
             attrib
           stat
            ;
           stat
            varlist
             var
              a
            =
            explist
             exp
              tableconstructor
               {
               }
           stat
            ;
           retstat
            return
            explist
             exp
              exp
               prefixexp
                a
              +
              exp
               number
                2
          end
     stat
      varlist
       var
        f
      =
      explist
       exp
        prefixexp
         functioncall
          assert
          args
           (
           explist
            exp
             prefixexp
              functioncall
               load
               args
                (
                explist
                 exp
                  prefixexp
                   functioncall
                    string
                    .
                    dump
                    args
                     (
                     explist
                      exp
                       prefixexp
                        f
                      ,
                      exp
                       true
                     )
                )
           )
     stat
      functioncall
       checkerr
       args
        (
        explist
         exp
          string
           "^%?:%-1:.*table value"
         ,
         exp
          prefixexp
           f
        )
    end
   stat
    local
    attnamelist
     t
     attrib
    =
    explist
     exp
      tableconstructor
       {
       }
   stat
    for
    i
    =
    exp
     number
      1
    ,
    exp
     number
      1000
    do
    block
     stat
      varlist
       var
        prefixexp
         t
        [
        exp
         prefixexp
          i
        ]
      =
      explist
       exp
        exp
         string
          "aaa = x"
        ..
        exp
         prefixexp
          i
    end
   stat
    local
    attnamelist
     s
     attrib
    =
    explist
     exp
      prefixexp
       functioncall
        table
        .
        concat
        args
         (
         explist
          exp
           prefixexp
            t
          ,
          exp
           string
            "; "
         )
   stat
    varlist
     var
      t
    =
    explist
     exp
      nil
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        exp
         prefixexp
          s
        ..
        exp
         string
          "; aaa = bbb + 1"
       ,
       exp
        string
         "global 'bbb'"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        exp
         string
          "local _ENV=_ENV;"
        ..
        exp
         exp
          prefixexp
           s
         ..
         exp
          string
           "; aaa = bbb + 1"
       ,
       exp
        string
         "global 'bbb'"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        exp
         prefixexp
          s
        ..
        exp
         string
          "; local t = {}; aaa = t.bbb + 1"
       ,
       exp
        string
         "field 'bbb'"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        exp
         prefixexp
          s
        ..
        exp
         string
          "; local t = {}; t:bbb()"
       ,
       exp
        string
         "method 'bbb'"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         [[aaa=9\nrepeat until 3==3\nlocal x=math.sin(math.cos(3))\nif math.sin(1) == x then return math.sin(1) end   -- tail call\nlocal a,b = 1, {\n  {x='a'..'b'..'c', y='b', z=x},\n  {1,2,3,4,5} or 3+3<=3+3,\n  3+1>3+1,\n  {d = x and aaa[x or y]}}\n]]
       ,
       exp
        string
         "global 'aaa'"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         [[\nlocal x,y = {},1\nif math.sin(1) == 0 then return 3 end    -- return\nx.a()]]
       ,
       exp
        string
         "field 'a'"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         [[\nprefix = nil\ninsert = nil\nwhile 1 do\n  local a\n  if nil then break end\n  insert(prefix, a)\nend]]
       ,
       exp
        string
         "global 'insert'"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         [[  -- tail call\n  return math.sin("a")\n]]
       ,
       exp
        string
         "sin"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         [[collectgarbage("nooption")]]
       ,
       exp
        string
         "invalid option"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         [[x = print .. "a"]]
       ,
       exp
        string
         "concatenate"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         [[x = "a" .. false]]
       ,
       exp
        string
         "concatenate"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         [[x = {} .. 2]]
       ,
       exp
        string
         "concatenate"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "getmetatable(io.stdin).__gc()"
       ,
       exp
        string
         "no value"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         [[\nlocal Var\nlocal function main()\n  NoSuchName (function() Var=0 end)\nend\nmain()\n]]
       ,
       exp
        string
         "global 'NoSuchName'"
      )
   stat
    functioncall
     print
     args
      string
       '+'
   stat
    varlist
     var
      aaa
    =
    explist
     exp
      tableconstructor
       {
       }
   stat
    ;
   stat
    functioncall
     setmetatable
     args
      (
      explist
       exp
        prefixexp
         aaa
       ,
       exp
        tableconstructor
         {
         fieldlist
          field
           __index
           =
           exp
            prefixexp
             string
         }
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "aaa:sub()"
       ,
       exp
        string
         "bad self"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "string.sub('a', {})"
       ,
       exp
        string
         "#2"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "('a'):sub{}"
       ,
       exp
        string
         "#1"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "table.sort({1,2,3}, table.sort)"
       ,
       exp
        string
         "'table.sort'"
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "string.gsub('s', 's', setmetatable)"
       ,
       exp
        string
         "'setmetatable'"
      )
   stat
    varlist
     var
      prefixexp
       _G
      .
      aaa
    =
    explist
     exp
      nil
   stat
    local
    function
    f
    funcbody
     (
     parlist
      namelist
       n
     )
     block
      stat
       local
       attnamelist
        c
        attrib
       =
       explist
        exp
         prefixexp
          functioncall
           coroutine
           .
           create
           args
            (
            explist
             exp
              prefixexp
               f
            )
      stat
       local
       attnamelist
        a
        attrib
        ,
        b
        attrib
       =
       explist
        exp
         prefixexp
          functioncall
           coroutine
           .
           resume
           args
            (
            explist
             exp
              prefixexp
               c
            )
      retstat
       return
       explist
        exp
         prefixexp
          b
     end
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        prefixexp
         functioncall
          string
          .
          find
          args
           (
           explist
            exp
             prefixexp
              functioncall
               f
               args
                (
                )
            ,
            exp
             string
              "C stack overflow"
           )
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        string
         "coroutine.yield()"
       ,
       exp
        string
         "outside a coroutine"
      )
   stat
    varlist
     var
      f
    =
    explist
     exp
      prefixexp
       functioncall
        coroutine
        .
        wrap
        args
         (
         explist
          exp
           functiondef
            function
            funcbody
             (
             parlist
             )
             block
              stat
               functioncall
                table
                .
                sort
                args
                 (
                 explist
                  exp
                   tableconstructor
                    {
                    fieldlist
                     field
                      exp
                       number
                        1
                     fieldsep
                      ,
                     field
                      exp
                       number
                        2
                     fieldsep
                      ,
                     field
                      exp
                       number
                        3
                    }
                  ,
                  exp
                   prefixexp
                    coroutine
                    .
                    yield
                 )
             end
         )
   stat
    functioncall
     checkerr
     args
      (
      explist
       exp
        string
         "yield across"
       ,
       exp
        prefixexp
         f
      )
   stat
    local
    attnamelist
     idsize
     attrib
    =
    explist
     exp
      exp
       number
        60
      -
      exp
       number
        1
   stat
    local
    function
    checksize
    funcbody
     (
     parlist
      namelist
       source
     )
     block
      stat
       local
       attnamelist
        _
        attrib
        ,
        msg
        attrib
       =
       explist
        exp
         prefixexp
          functioncall
           load
           args
            (
            explist
             exp
              string
               "x"
             ,
             exp
              prefixexp
               source
            )
      stat
       varlist
        var
         msg
       =
       explist
        exp
         prefixexp
          functioncall
           string
           .
           match
           args
            (
            explist
             exp
              prefixexp
               msg
             ,
             exp
              string
               "^([^:]*):"
            )
      stat
       functioncall
        assert
        args
         (
         explist
          exp
           exp
            prefixexp
             functioncall
              msg
              :
              len
              args
               (
               )
           <=
           exp
            prefixexp
             idsize
         )
     end
   stat
    for
    i
    =
    exp
     exp
      number
       60
     -
     exp
      number
       10
    ,
    exp
     exp
      number
       60
     +
     exp
      number
       10
    do
    block
     stat
      functioncall
       checksize
       args
        (
        explist
         exp
          exp
           string
            "@"
          ..
          exp
           prefixexp
            functioncall
             string
             .
             rep
             args
              (
              explist
               exp
                string
                 "x"
               ,
               exp
                prefixexp
                 i
              )
        )
     stat
      functioncall
       checksize
       args
        (
        explist
         exp
          prefixexp
           functioncall
            string
            .
            rep
            args
             (
             explist
              exp
               string
                "x"
              ,
              exp
               exp
                prefixexp
                 i
               -
               exp
                number
                 10
             )
        )
     stat
      functioncall
       checksize
       args
        (
        explist
         exp
          exp
           string
            "="
          ..
          exp
           prefixexp
            functioncall
             string
             .
             rep
             args
              (
              explist
               exp
                string
                 "x"
               ,
               exp
                prefixexp
                 i
              )
        )
    end
   stat
    local
    function
    lineerror
    funcbody
     (
     parlist
      namelist
       s
       ,
       l
     )
     block
      stat
       local
       attnamelist
        err
        attrib
        ,
        msg
        attrib
       =
       explist
        exp
         prefixexp
          functioncall
           pcall
           args
            (
            explist
             exp
              prefixexp
               functioncall
                load
                args
                 (
                 explist
                  exp
                   prefixexp
                    s
                 )
            )
      stat
       local
       attnamelist
        line
        attrib
       =
       explist
        exp
         prefixexp
          functioncall
           tonumber
           args
            (
            explist
             exp
              prefixexp
               functioncall
                string
                .
                match
                args
                 (
                 explist
                  exp
                   prefixexp
                    msg
                  ,
                  exp
                   string
                    ":(%d+):"
                 )
            )
      stat
       functioncall
        assert
        args
         (
         explist
          exp
           exp
            exp
             prefixexp
              line
            ==
            exp
             prefixexp
              l
           or
           exp
            prefixexp
             (
             exp
              exp
               not
               exp
                prefixexp
                 line
              and
              exp
               not
               exp
                prefixexp
                 l
             )
         )
     end
   stat
    functioncall
     lineerror
     args
      (
      explist
       exp
        string
         "local a\n for i=1,'a' do \n print(i) \n end"
       ,
       exp
        number
         2
      )
   stat
    functioncall
     lineerror
     args
      (
      explist
       exp
        string
         "\n local a \n for k,v in 3 \n do \n print(k) \n end"
       ,
       exp
        number
         3
      )
   stat
    functioncall
     lineerror
     args
      (
      explist
       exp
        string
         "\n\n for k,v in \n 3 \n do \n print(k) \n end"
       ,
       exp
        number
         4
      )
   stat
    functioncall
     lineerror
     args
      (
      explist
       exp
        string
         "function a.x.y ()\na=a+1\nend"
       ,
       exp
        number
         1
      )
   stat
    functioncall
     lineerror
     args
      (
      explist
       exp
        string
         "a = \na\n+\n{}"
       ,
       exp
        number
         3
      )
   stat
    functioncall
     lineerror
     args
      (
      explist
       exp
        string
         "a = \n3\n+\n(\n4\n/\nprint)"
       ,
       exp
        number
         6
      )
   stat
    functioncall
     lineerror
     args
      (
      explist
       exp
        string
         "a = \nprint\n+\n(\n4\n/\n7)"
       ,
       exp
        number
         3
      )
   stat
    functioncall
     lineerror
     args
      (
      explist
       exp
        string
         "a\n=\n-\n\nprint\n;"
       ,
       exp
        number
         3
      )
   stat
    functioncall
     lineerror
     args
      (
      explist
       exp
        string
         [[\na\n(\n23)\n]]
       ,
       exp
        number
         1
      )
   stat
    functioncall
     lineerror
     args
      (
      explist
       exp
        string
         [[\nlocal a = {x = 13}\na\n.\nx\n(\n23\n)\n]]
       ,
       exp
        number
         2
      )
   stat
    functioncall
     lineerror
     args
      (
      explist
       exp
        string
         [[\nlocal a = {x = 13}\na\n.\nx\n(\n23 + a\n)\n]]
       ,
       exp
        number
         6
      )
   stat
    local
    attnamelist
     p
     attrib
    =
    explist
     exp
      string
       [[\n  function g() f() end\n  function f(x) error('a', XX) end\ng()\n]]
   stat
    varlist
     var
      XX
    =
    explist
     exp
      number
       3
   stat
    ;
   stat
    functioncall
     lineerror
     args
      (
      explist
       exp
        prefixexp
         (
         exp
          prefixexp
           p
         )
       ,
       exp
        number
         3
      )
   stat
    varlist
     var
      XX
    =
    explist
     exp
      number
       0
   stat
    ;
   stat
    functioncall
     lineerror
     args
      (
      explist
       exp
        prefixexp
         (
         exp
          prefixexp
           p
         )
       ,
       exp
        false
      )
   stat
    varlist
     var
      XX
    =
    explist
     exp
      number
       1
   stat
    ;
   stat
    functioncall
     lineerror
     args
      (
      explist
       exp
        prefixexp
         (
         exp
          prefixexp
           p
         )
       ,
       exp
        number
         2
      )
   stat
    varlist
     var
      XX
    =
    explist
     exp
      number
       2
   stat
    ;
   stat
    functioncall
     lineerror
     args
      (
      explist
       exp
        prefixexp
         (
         exp
          prefixexp
           p
         )
       ,
       exp
        number
         1
      )
   stat
    varlist
     var
      prefixexp
       _G
      .
      XX
     ,
     var
      prefixexp
       _G
      .
      g
     ,
     var
      prefixexp
       _G
      .
      f
    =
    explist
     exp
      nil
   stat
    functioncall
     lineerror
     args
      (
      explist
       exp
        string
         [[\nlocal b = false\nif not b then\n  error 'test'\nend]]
       ,
       exp
        number
         3
      )
   stat
    functioncall
     lineerror
     args
      (
      explist
       exp
        string
         [[\nlocal b = false\nif not b then\n  if not b then\n    if not b then\n      error 'test'\n    end\n  end\nend]]
       ,
       exp
        number
         5
      )
   stat
    functioncall
     lineerror
     args
      (
      explist
       exp
        string
         [[\n  local a = 0\n  local b = 1\n  local c = b % a\n]]
       ,
       exp
        number
         3
      )
   stat
    do
    block
     stat
      local
      attnamelist
       s
       attrib
      =
      explist
       exp
        prefixexp
         functioncall
          string
          .
          format
          args
           (
           explist
            exp
             string
              "%s return __A.x"
            ,
            exp
             prefixexp
              functioncall
               string
               .
               rep
               args
                (
                explist
                 exp
                  string
                   "\n"
                 ,
                 exp
                  number
                   300
                )
           )
     stat
      functioncall
       lineerror
       args
        (
        explist
         exp
          prefixexp
           s
         ,
         exp
          number
           301
        )
    end
   stat
    if
    exp
     not
     exp
      prefixexp
       _soft
    then
    block
     stat
      functioncall
       collectgarbage
       args
        (
        )
     stat
      functioncall
       print
       args
        string
         "testing stack overflow"
     stat
      local
      attnamelist
       C
       attrib
      =
      explist
       exp
        number
         0
     stat
      local
      attnamelist
       l
       attrib
      =
      explist
       exp
        exp
         prefixexp
          functioncall
           debug
           .
           getinfo
           args
            (
            explist
             exp
              number
               1
             ,
             exp
              string
               "l"
            )
          .
          currentline
        +
        exp
         number
          1
     stat
      local
      function
      auxy
      funcbody
       (
       parlist
       )
       block
        stat
         varlist
          var
           C
         =
         explist
          exp
           exp
            prefixexp
             C
           +
           exp
            number
             1
        stat
         ;
        stat
         functioncall
          auxy
          args
           (
           )
       end
     stat
      function
      funcname
       YY
      funcbody
       (
       parlist
       )
       block
        stat
         functioncall
          collectgarbage
          args
           (
           explist
            exp
             string
              "stop"
           )
        stat
         functioncall
          auxy
          args
           (
           )
        stat
         functioncall
          collectgarbage
          args
           (
           explist
            exp
             string
              "restart"
           )
       end
     stat
      local
      function
      checkstackmessage
      funcbody
       (
       parlist
        namelist
         m
       )
       block
        stat
         functioncall
          print
          args
           (
           explist
            exp
             exp
              string
               "(expected stack overflow after "
             ..
             exp
              exp
               prefixexp
                C
              ..
              exp
               string
                " calls)"
           )
        stat
         varlist
          var
           C
         =
         explist
          exp
           number
            0
        retstat
         return
         explist
          exp
           prefixexp
            (
            exp
             prefixexp
              functioncall
               string
               .
               find
               args
                (
                explist
                 exp
                  prefixexp
                   m
                 ,
                 exp
                  string
                   "stack overflow"
                )
            )
       end
     stat
      functioncall
       assert
       args
        (
        explist
         exp
          prefixexp
           functioncall
            checkstackmessage
            args
             (
             explist
              exp
               prefixexp
                functioncall
                 doit
                 args
                  (
                  explist
                   exp
                    string
                     'YY()'
                  )
             )
        )
     stat
      functioncall
       assert
       args
        (
        explist
         exp
          prefixexp
           functioncall
            checkstackmessage
            args
             (
             explist
              exp
               prefixexp
                functioncall
                 doit
                 args
                  (
                  explist
                   exp
                    string
                     'YY()'
                  )
             )
        )
     stat
      functioncall
       assert
       args
        (
        explist
         exp
          prefixexp
           functioncall
            checkstackmessage
            args
             (
             explist
              exp
               prefixexp
                functioncall
                 doit
                 args
                  (
                  explist
                   exp
                    string
                     'YY()'
                  )
             )
        )
     stat
      varlist
       var
        prefixexp
         _G
        .
        YY
      =
      explist
       exp
        nil
     stat
      local
      attnamelist
       l1
       attrib
     stat
      local
      function
      g
      funcbody
       (
       parlist
        namelist
         x
       )
       block
        stat
         varlist
          var
           l1
         =
         explist
          exp
           exp
            prefixexp
             functioncall
              debug
              .
              getinfo
              args
               (
               explist
                exp
                 prefixexp
                  x
                ,
                exp
                 string
                  "l"
               )
             .
             currentline
           +
           exp
            number
             2
        stat
         functioncall
          collectgarbage
          args
           (
           explist
            exp
             string
              "stop"
           )
        stat
         functioncall
          auxy
          args
           (
           )
        stat
         functioncall
          collectgarbage
          args
           (
           explist
            exp
             string
              "restart"
           )
       end
     stat
      local
      attnamelist
       _
       attrib
       ,
       stackmsg
       attrib
      =
      explist
       exp
        prefixexp
         functioncall
          xpcall
          args
           (
           explist
            exp
             prefixexp
              g
            ,
            exp
             prefixexp
              debug
              .
              traceback
            ,
            exp
             number
              1
           )
     stat
      functioncall
       print
       args
        (
        explist
         exp
          string
           '+'
        )
     stat
      local
      attnamelist
       stack
       attrib
      =
      explist
       exp
        tableconstructor
         {
         }
     stat
      for
      namelist
       line
      in
      explist
       exp
        prefixexp
         functioncall
          string
          .
          gmatch
          args
           (
           explist
            exp
             prefixexp
              stackmsg
            ,
            exp
             string
              "[^\n]*"
           )
      do
      block
       stat
        local
        attnamelist
         curr
         attrib
        =
        explist
         exp
          prefixexp
           functioncall
            string
            .
            match
            args
             (
             explist
              exp
               prefixexp
                line
              ,
              exp
               string
                ":(%d+):"
             )
       stat
        if
        exp
         prefixexp
          curr
        then
        block
         stat
          functioncall
           table
           .
           insert
           args
            (
            explist
             exp
              prefixexp
               stack
             ,
             exp
              prefixexp
               functioncall
                tonumber
                args
                 (
                 explist
                  exp
                   prefixexp
                    curr
                 )
            )
        end
      end
     stat
      local
      attnamelist
       i
       attrib
      =
      explist
       exp
        number
         1
     stat
      while
      exp
       exp
        prefixexp
         stack
         [
         exp
          prefixexp
           i
         ]
       ~=
       exp
        prefixexp
         l1
      do
      block
       stat
        functioncall
         assert
         args
          (
          explist
           exp
            exp
             prefixexp
              stack
              [
              exp
               prefixexp
                i
              ]
            ==
            exp
             prefixexp
              l
          )
       stat
        varlist
         var
          i
        =
        explist
         exp
          exp
           prefixexp
            i
          +
          exp
           number
            1
      end
     stat
      functioncall
       assert
       args
        (
        explist
         exp
          exp
           prefixexp
            i
          >
          exp
           number
            15
        )
     stat
      local
      attnamelist
       res
       attrib
       ,
       msg
       attrib
      =
      explist
       exp
        prefixexp
         functioncall
          xpcall
          args
           (
           explist
            exp
             prefixexp
              error
            ,
            exp
             prefixexp
              error
           )
     stat
      functioncall
       assert
       args
        (
        explist
         exp
          exp
           not
           exp
            prefixexp
             res
          and
          exp
           exp
            prefixexp
             functioncall
              type
              args
               (
               explist
                exp
                 prefixexp
                  msg
               )
           ==
           exp
            string
             'string'
        )
     stat
      functioncall
       print
       args
        (
        explist
         exp
          string
           '+'
        )
     stat
      local
      function
      f
      funcbody
       (
       parlist
        namelist
         x
       )
       block
        stat
         if
         exp
          exp
           prefixexp
            x
          ==
          exp
           number
            0
         then
         block
          stat
           functioncall
            error
            args
             (
             explist
              exp
               string
                'a\n'
             )
         else
         block
          stat
           local
           attnamelist
            aux
            attrib
           =
           explist
            exp
             functiondef
              function
              funcbody
               (
               parlist
               )
               block
                retstat
                 return
                 explist
                  exp
                   prefixexp
                    functioncall
                     f
                     args
                      (
                      explist
                       exp
                        exp
                         prefixexp
                          x
                        -
                        exp
                         number
                          1
                      )
               end
          stat
           local
           attnamelist
            a
            attrib
            ,
            b
            attrib
           =
           explist
            exp
             prefixexp
              functioncall
               xpcall
               args
                (
                explist
                 exp
                  prefixexp
                   aux
                 ,
                 exp
                  prefixexp
                   aux
                )
          retstat
           return
           explist
            exp
             prefixexp
              a
            ,
            exp
             prefixexp
              b
         end
       end
     stat
      functioncall
       f
       args
        (
        explist
         exp
          number
           3
        )
     stat
      local
      function
      loop
      funcbody
       (
       parlist
        namelist
         x
         ,
         y
         ,
         z
       )
       block
        retstat
         return
         explist
          exp
           exp
            number
             1
           +
           exp
            prefixexp
             functioncall
              loop
              args
               (
               explist
                exp
                 prefixexp
                  x
                ,
                exp
                 prefixexp
                  y
                ,
                exp
                 prefixexp
                  z
               )
       end
     stat
      local
      attnamelist
       res
       attrib
       ,
       msg
       attrib
      =
      explist
       exp
        prefixexp
         functioncall
          xpcall
          args
           (
           explist
            exp
             prefixexp
              loop
            ,
            exp
             functiondef
              function
              funcbody
               (
               parlist
                namelist
                 m
               )
               block
                stat
                 functioncall
                  assert
                  args
                   (
                   explist
                    exp
                     prefixexp
                      functioncall
                       string
                       .
                       find
                       args
                        (
                        explist
                         exp
                          prefixexp
                           m
                         ,
                         exp
                          string
                           "stack overflow"
                        )
                   )
                stat
                 functioncall
                  checkerr
                  args
                   (
                   explist
                    exp
                     string
                      "error handling"
                    ,
                    exp
                     prefixexp
                      loop
                   )
                stat
                 functioncall
                  assert
                  args
                   (
                   explist
                    exp
                     exp
                      prefixexp
                       functioncall
                        math
                        .
                        sin
                        args
                         (
                         explist
                          exp
                           number
                            0
                         )
                     ==
                     exp
                      number
                       0
                   )
                retstat
                 return
                 explist
                  exp
                   number
                    15
               end
           )
     stat
      functioncall
       assert
       args
        (
        explist
         exp
          exp
           prefixexp
            msg
          ==
          exp
           number
            15
        )
     stat
      local
      attnamelist
       f
       attrib
      =
      explist
       exp
        functiondef
         function
         funcbody
          (
          parlist
          )
          block
           stat
            for
            i
            =
            exp
             number
              999900
            ,
            exp
             number
              1000000
            ,
            exp
             number
              1
            do
            block
             stat
              functioncall
               table
               .
               unpack
               args
                (
                explist
                 exp
                  tableconstructor
                   {
                   }
                 ,
                 exp
                  number
                   1
                 ,
                 exp
                  prefixexp
                   i
                )
            end
          end
     stat
      functioncall
       checkerr
       args
        (
        explist
         exp
          string
           "too many results"
         ,
         exp
          prefixexp
           f
        )
    end
   stat
    do
    block
     stat
      local
      attnamelist
       t
       attrib
      =
      explist
       exp
        tableconstructor
         {
         }
     stat
      local
      attnamelist
       res
       attrib
       ,
       msg
       attrib
      =
      explist
       exp
        prefixexp
         functioncall
          pcall
          args
           (
           explist
            exp
             functiondef
              function
              funcbody
               (
               parlist
               )
               block
                stat
                 functioncall
                  error
                  args
                   (
                   explist
                    exp
                     prefixexp
                      t
                   )
               end
           )
     stat
      functioncall
       assert
       args
        (
        explist
         exp
          exp
           not
           exp
            prefixexp
             res
          and
          exp
           exp
            prefixexp
             msg
           ==
           exp
            prefixexp
             t
        )
     stat
      varlist
       var
        res
       ,
       var
        msg
      =
      explist
       exp
        prefixexp
         functioncall
          pcall
          args
           (
           explist
            exp
             functiondef
              function
              funcbody
               (
               parlist
               )
               block
                stat
                 functioncall
                  error
                  args
                   (
                   explist
                    exp
                     nil
                   )
               end
           )
     stat
      functioncall
       assert
       args
        (
        explist
         exp
          exp
           not
           exp
            prefixexp
             res
          and
          exp
           exp
            prefixexp
             msg
           ==
           exp
            nil
        )
     stat
      local
      function
      f
      funcbody
       (
       parlist
       )
       block
        stat
         functioncall
          error
          args
           tableconstructor
            {
            fieldlist
             field
              msg
              =
              exp
               string
                'x'
            }
       end
     stat
      varlist
       var
        res
       ,
       var
        msg
      =
      explist
       exp
        prefixexp
         functioncall
          xpcall
          args
           (
           explist
            exp
             prefixexp
              f
            ,
            exp
             functiondef
              function
              funcbody
               (
               parlist
                namelist
                 r
               )
               block
                retstat
                 return
                 explist
                  exp
                   tableconstructor
                    {
                    fieldlist
                     field
                      msg
                      =
                      exp
                       exp
                        prefixexp
                         r
                         .
                         msg
                       ..
                       exp
                        string
                         'y'
                    }
               end
           )
     stat
      functioncall
       assert
       args
        (
        explist
         exp
          exp
           prefixexp
            msg
            .
            msg
          ==
          exp
           string
            'xy'
        )
     stat
      varlist
       var
        res
       ,
       var
        msg
      =
      explist
       exp
        prefixexp
         functioncall
          pcall
          args
           (
           explist
            exp
             prefixexp
              assert
            ,
            exp
             false
            ,
            exp
             string
              "X"
            ,
            exp
             prefixexp
              t
           )
     stat
      functioncall
       assert
       args
        (
        explist
         exp
          exp
           not
           exp
            prefixexp
             res
          and
          exp
           exp
            prefixexp
             msg
           ==
           exp
            string
             "X"
        )
     stat
      varlist
       var
        res
       ,
       var
        msg
      =
      explist
       exp
        prefixexp
         functioncall
          pcall
          args
           (
           explist
            exp
             functiondef
              function
              funcbody
               (
               parlist
               )
               block
                stat
                 functioncall
                  assert
                  args
                   (
                   explist
                    exp
                     false
                   )
               end
           )
     stat
      local
      attnamelist
       line
       attrib
      =
      explist
       exp
        prefixexp
         functioncall
          string
          .
          match
          args
           (
           explist
            exp
             prefixexp
              msg
            ,
            exp
             string
              "%w+%.lua:(%d+): assertion failed!$"
           )
     stat
      functioncall
       assert
       args
        (
        explist
         exp
          exp
           prefixexp
            functioncall
             tonumber
             args
              (
              explist
               exp
                prefixexp
                 line
              )
          ==
          exp
           exp
            prefixexp
             functioncall
              debug
              .
              getinfo
              args
               (
               explist
                exp
                 number
                  1
                ,
                exp
                 string
                  "l"
               )
             .
             currentline
           -
           exp
            number
             2
        )
     stat
      varlist
       var
        res
       ,
       var
        msg
      =
      explist
       exp
        prefixexp
         functioncall
          pcall
          args
           (
           explist
            exp
             prefixexp
              assert
            ,
            exp
             false
            ,
            exp
             prefixexp
              t
           )
     stat
      functioncall
       assert
       args
        (
        explist
         exp
          exp
           not
           exp
            prefixexp
             res
          and
          exp
           exp
            prefixexp
             msg
           ==
           exp
            prefixexp
             t
        )
     stat
      varlist
       var
        res
       ,
       var
        msg
      =
      explist
       exp
        prefixexp
         functioncall
          pcall
          args
           (
           explist
            exp
             prefixexp
              assert
            ,
            exp
             nil
            ,
            exp
             nil
           )
     stat
      functioncall
       assert
       args
        (
        explist
         exp
          exp
           not
           exp
            prefixexp
             res
          and
          exp
           exp
            prefixexp
             msg
           ==
           exp
            nil
        )
     stat
      varlist
       var
        res
       ,
       var
        msg
      =
      explist
       exp
        prefixexp
         functioncall
          pcall
          args
           (
           explist
            exp
             prefixexp
              assert
           )
     stat
      functioncall
       assert
       args
        (
        explist
         exp
          exp
           not
           exp
            prefixexp
             res
          and
          exp
           prefixexp
            functioncall
             string
             .
             find
             args
              (
              explist
               exp
                prefixexp
                 msg
               ,
               exp
                string
                 "value expected"
              )
        )
    end
   stat
    local
    attnamelist
     a
     attrib
     ,
     b
     attrib
     ,
     c
     attrib
    =
    explist
     exp
      prefixexp
       functioncall
        xpcall
        args
         (
         explist
          exp
           prefixexp
            string
            .
            find
          ,
          exp
           prefixexp
            error
          ,
          exp
           string
            "alo"
          ,
          exp
           string
            "al"
         )
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        exp
         exp
          prefixexp
           a
         and
         exp
          exp
           prefixexp
            b
          ==
          exp
           number
            1
        and
        exp
         exp
          prefixexp
           c
         ==
         exp
          number
           2
      )
   stat
    varlist
     var
      a
     ,
     var
      b
     ,
     var
      c
    =
    explist
     exp
      prefixexp
       functioncall
        xpcall
        args
         (
         explist
          exp
           prefixexp
            string
            .
            find
          ,
          exp
           functiondef
            function
            funcbody
             (
             parlist
              namelist
               x
             )
             block
              retstat
               return
               explist
                exp
                 tableconstructor
                  {
                  }
             end
          ,
          exp
           true
          ,
          exp
           string
            "al"
         )
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        exp
         exp
          not
          exp
           prefixexp
            a
         and
         exp
          exp
           prefixexp
            functioncall
             type
             args
              (
              explist
               exp
                prefixexp
                 b
              )
          ==
          exp
           string
            "table"
        and
        exp
         exp
          prefixexp
           c
         ==
         exp
          nil
      )
   stat
    functioncall
     print
     args
      (
      explist
       exp
        string
         "testing tokens in error messages"
      )
   stat
    functioncall
     checksyntax
     args
      (
      explist
       exp
        string
         "syntax error"
       ,
       exp
        string
         ""
       ,
       exp
        string
         "error"
       ,
       exp
        number
         1
      )
   stat
    functioncall
     checksyntax
     args
      (
      explist
       exp
        string
         "1.000"
       ,
       exp
        string
         ""
       ,
       exp
        string
         "1.000"
       ,
       exp
        number
         1
      )
   stat
    functioncall
     checksyntax
     args
      (
      explist
       exp
        string
         "[[a]]"
       ,
       exp
        string
         ""
       ,
       exp
        string
         "[[a]]"
       ,
       exp
        number
         1
      )
   stat
    functioncall
     checksyntax
     args
      (
      explist
       exp
        string
         "'aa'"
       ,
       exp
        string
         ""
       ,
       exp
        string
         "'aa'"
       ,
       exp
        number
         1
      )
   stat
    functioncall
     checksyntax
     args
      (
      explist
       exp
        string
         "while << do end"
       ,
       exp
        string
         ""
       ,
       exp
        string
         "<<"
       ,
       exp
        number
         1
      )
   stat
    functioncall
     checksyntax
     args
      (
      explist
       exp
        string
         "for >> do end"
       ,
       exp
        string
         ""
       ,
       exp
        string
         ">>"
       ,
       exp
        number
         1
      )
   stat
    functioncall
     checksyntax
     args
      (
      explist
       exp
        string
         "a\1a = 1"
       ,
       exp
        string
         ""
       ,
       exp
        string
         "<\\1>"
       ,
       exp
        number
         1
      )
   stat
    functioncall
     checksyntax
     args
      (
      explist
       exp
        string
         "\255a = 1"
       ,
       exp
        string
         ""
       ,
       exp
        string
         "<\\255>"
       ,
       exp
        number
         1
      )
   stat
    functioncall
     doit
     args
      (
      explist
       exp
        string
         'I = load("a=9+"); aaa=3'
      )
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        exp
         exp
          prefixexp
           _G
           .
           aaa
         ==
         exp
          number
           3
        and
        exp
         not
         exp
          prefixexp
           _G
           .
           I
      )
   stat
    varlist
     var
      prefixexp
       _G
      .
      I
     ,
     var
      prefixexp
       _G
      .
      aaa
    =
    explist
     exp
      nil
   stat
    functioncall
     print
     args
      (
      explist
       exp
        string
         '+'
      )
   stat
    local
    attnamelist
     lim
     attrib
    =
    explist
     exp
      number
       1000
   stat
    if
    exp
     prefixexp
      _soft
    then
    block
     stat
      varlist
       var
        lim
      =
      explist
       exp
        number
         100
    end
   stat
    for
    i
    =
    exp
     number
      1
    ,
    exp
     prefixexp
      lim
    do
    block
     stat
      functioncall
       doit
       args
        (
        explist
         exp
          string
           'a = '
        )
     stat
      functioncall
       doit
       args
        (
        explist
         exp
          string
           'a = 4+nil'
        )
    end
   stat
    local
    function
    testrep
    funcbody
     (
     parlist
      namelist
       init
       ,
       rep
       ,
       close
       ,
       repc
       ,
       finalresult
     )
     block
      stat
       local
       attnamelist
        s
        attrib
       =
       explist
        exp
         exp
          prefixexp
           init
         ..
         exp
          exp
           prefixexp
            functioncall
             string
             .
             rep
             args
              (
              explist
               exp
                prefixexp
                 rep
               ,
               exp
                number
                 100
              )
          ..
          exp
           exp
            prefixexp
             close
           ..
           exp
            prefixexp
             functioncall
              string
              .
              rep
              args
               (
               explist
                exp
                 prefixexp
                  repc
                ,
                exp
                 number
                  100
               )
      stat
       local
       attnamelist
        res
        attrib
        ,
        msg
        attrib
       =
       explist
        exp
         prefixexp
          functioncall
           load
           args
            (
            explist
             exp
              prefixexp
               s
            )
      stat
       functioncall
        assert
        args
         (
         explist
          exp
           prefixexp
            res
         )
      stat
       if
       exp
        prefixexp
         (
         exp
          prefixexp
           finalresult
         )
       then
       block
        stat
         functioncall
          assert
          args
           (
           explist
            exp
             exp
              prefixexp
               functioncall
                res
                args
                 (
                 )
             ==
             exp
              prefixexp
               finalresult
           )
       end
      stat
       varlist
        var
         s
       =
       explist
        exp
         exp
          prefixexp
           init
         ..
         exp
          prefixexp
           functioncall
            string
            .
            rep
            args
             (
             explist
              exp
               prefixexp
                rep
              ,
              exp
               number
                500
             )
      stat
       local
       attnamelist
        res
        attrib
        ,
        msg
        attrib
       =
       explist
        exp
         prefixexp
          functioncall
           load
           args
            (
            explist
             exp
              prefixexp
               s
            )
      stat
       functioncall
        assert
        args
         (
         explist
          exp
           exp
            not
            exp
             prefixexp
              res
           and
           exp
            prefixexp
             (
             exp
              exp
               prefixexp
                functioncall
                 string
                 .
                 find
                 args
                  (
                  explist
                   exp
                    prefixexp
                     msg
                   ,
                   exp
                    string
                     "too many"
                  )
              or
              exp
               prefixexp
                functioncall
                 string
                 .
                 find
                 args
                  (
                  explist
                   exp
                    prefixexp
                     msg
                   ,
                   exp
                    string
                     "overflow"
                  )
             )
         )
     end
   stat
    functioncall
     testrep
     args
      (
      explist
       exp
        string
         "local a; a"
       ,
       exp
        string
         ",a"
       ,
       exp
        string
         "= 1"
       ,
       exp
        string
         ",1"
      )
   stat
    functioncall
     testrep
     args
      (
      explist
       exp
        string
         "local a; a="
       ,
       exp
        string
         "{"
       ,
       exp
        string
         "0"
       ,
       exp
        string
         "}"
      )
   stat
    functioncall
     testrep
     args
      (
      explist
       exp
        string
         "return "
       ,
       exp
        string
         "("
       ,
       exp
        string
         "2"
       ,
       exp
        string
         ")"
       ,
       exp
        number
         2
      )
   stat
    functioncall
     testrep
     args
      (
      explist
       exp
        string
         "local function a (x) return x end; return "
       ,
       exp
        string
         "a("
       ,
       exp
        string
         "2.2"
       ,
       exp
        string
         ")"
       ,
       exp
        number
         2.2
      )
   stat
    functioncall
     testrep
     args
      (
      explist
       exp
        string
         ""
       ,
       exp
        string
         "do "
       ,
       exp
        string
         ""
       ,
       exp
        string
         " end"
      )
   stat
    functioncall
     testrep
     args
      (
      explist
       exp
        string
         ""
       ,
       exp
        string
         "while a do "
       ,
       exp
        string
         ""
       ,
       exp
        string
         " end"
      )
   stat
    functioncall
     testrep
     args
      (
      explist
       exp
        string
         "local a; "
       ,
       exp
        string
         "if a then else "
       ,
       exp
        string
         ""
       ,
       exp
        string
         " end"
      )
   stat
    functioncall
     testrep
     args
      (
      explist
       exp
        string
         ""
       ,
       exp
        string
         "function foo () "
       ,
       exp
        string
         ""
       ,
       exp
        string
         " end"
      )
   stat
    functioncall
     testrep
     args
      (
      explist
       exp
        string
         "local a = ''; return "
       ,
       exp
        string
         "a.."
       ,
       exp
        string
         "'a'"
       ,
       exp
        string
         ""
       ,
       exp
        string
         "a"
      )
   stat
    functioncall
     testrep
     args
      (
      explist
       exp
        string
         "local a = 1; return "
       ,
       exp
        string
         "a^"
       ,
       exp
        string
         "a"
       ,
       exp
        string
         ""
       ,
       exp
        number
         1
      )
   stat
    functioncall
     checkmessage
     args
      (
      explist
       exp
        exp
         string
          "a = f(x"
        ..
        exp
         exp
          prefixexp
           functioncall
            string
            .
            rep
            args
             (
             explist
              exp
               string
                ",x"
              ,
              exp
               number
                260
             )
         ..
         exp
          string
           ")"
       ,
       exp
        string
         "too many registers"
      )
   stat
    local
    attnamelist
     lim
     attrib
    =
    explist
     exp
      number
       127
   stat
    local
    attnamelist
     s
     attrib
    =
    explist
     exp
      string
       "local function fooA ()\n  local "
   stat
    for
    j
    =
    exp
     number
      1
    ,
    exp
     prefixexp
      lim
    do
    block
     stat
      varlist
       var
        s
      =
      explist
       exp
        exp
         prefixexp
          s
        ..
        exp
         exp
          string
           "a"
         ..
         exp
          exp
           prefixexp
            j
          ..
          exp
           string
            ", "
    end
   stat
    varlist
     var
      s
    =
    explist
     exp
      exp
       prefixexp
        s
      ..
      exp
       string
        "b,c\n"
   stat
    varlist
     var
      s
    =
    explist
     exp
      exp
       prefixexp
        s
      ..
      exp
       string
        "local function fooB ()\n  local "
   stat
    for
    j
    =
    exp
     number
      1
    ,
    exp
     prefixexp
      lim
    do
    block
     stat
      varlist
       var
        s
      =
      explist
       exp
        exp
         prefixexp
          s
        ..
        exp
         exp
          string
           "b"
         ..
         exp
          exp
           prefixexp
            j
          ..
          exp
           string
            ", "
    end
   stat
    varlist
     var
      s
    =
    explist
     exp
      exp
       prefixexp
        s
      ..
      exp
       string
        "b\n"
   stat
    varlist
     var
      s
    =
    explist
     exp
      exp
       prefixexp
        s
      ..
      exp
       string
        "function fooC () return b+c"
   stat
    local
    attnamelist
     c
     attrib
    =
    explist
     exp
      exp
       number
        1
      +
      exp
       number
        2
   stat
    for
    j
    =
    exp
     number
      1
    ,
    exp
     prefixexp
      lim
    do
    block
     stat
      varlist
       var
        s
      =
      explist
       exp
        exp
         prefixexp
          s
        ..
        exp
         exp
          string
           "+a"
         ..
         exp
          exp
           prefixexp
            j
          ..
          exp
           exp
            string
             "+b"
           ..
           exp
            prefixexp
             j
     stat
      varlist
       var
        c
      =
      explist
       exp
        exp
         prefixexp
          c
        +
        exp
         number
          2
    end
   stat
    varlist
     var
      s
    =
    explist
     exp
      exp
       prefixexp
        s
      ..
      exp
       string
        "\nend  end end"
   stat
    local
    attnamelist
     a
     attrib
     ,
     b
     attrib
    =
    explist
     exp
      prefixexp
       functioncall
        load
        args
         (
         explist
          exp
           prefixexp
            s
         )
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        exp
         exp
          exp
           prefixexp
            c
          >
          exp
           number
            255
         and
         exp
          prefixexp
           functioncall
            string
            .
            find
            args
             (
             explist
              exp
               prefixexp
                b
              ,
              exp
               string
                "too many upvalues"
             )
        and
        exp
         prefixexp
          functioncall
           string
           .
           find
           args
            (
            explist
             exp
              prefixexp
               b
             ,
             exp
              string
               "line 5"
            )
      )
   stat
    varlist
     var
      s
    =
    explist
     exp
      string
       "\nfunction foo ()\n  local "
   stat
    for
    j
    =
    exp
     number
      1
    ,
    exp
     number
      300
    do
    block
     stat
      varlist
       var
        s
      =
      explist
       exp
        exp
         prefixexp
          s
        ..
        exp
         exp
          string
           "a"
         ..
         exp
          exp
           prefixexp
            j
          ..
          exp
           string
            ", "
    end
   stat
    varlist
     var
      s
    =
    explist
     exp
      exp
       prefixexp
        s
      ..
      exp
       string
        "b\n"
   stat
    local
    attnamelist
     a
     attrib
     ,
     b
     attrib
    =
    explist
     exp
      prefixexp
       functioncall
        load
        args
         (
         explist
          exp
           prefixexp
            s
         )
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        exp
         prefixexp
          functioncall
           string
           .
           find
           args
            (
            explist
             exp
              prefixexp
               b
             ,
             exp
              string
               "line 2"
            )
        and
        exp
         prefixexp
          functioncall
           string
           .
           find
           args
            (
            explist
             exp
              prefixexp
               b
             ,
             exp
              string
               "too many local variables"
            )
      )
   stat
    varlist
     var
      prefixexp
       mt
      .
      __index
    =
    explist
     exp
      prefixexp
       oldmm
   stat
    functioncall
     print
     args
      (
      explist
       exp
        string
         'OK'
      )
 <EOF>
