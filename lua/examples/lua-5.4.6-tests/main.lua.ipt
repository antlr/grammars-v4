start_
 chunk
  block
   stat
    if
    exp
     prefixexp
      _port
    then
    block
     retstat
      return
    end
   stat
    functioncall
     print
     args
      (
      explist
       exp
        string
         "testing stand-alone interpreter"
      )
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        prefixexp
         functioncall
          os
          .
          execute
          args
           (
           )
      )
   stat
    local
    attnamelist
     arg
     attrib
    =
    explist
     exp
      exp
       prefixexp
        arg
      or
      exp
       prefixexp
        ARG
   stat
    local
    attnamelist
     prog
     attrib
    =
    explist
     exp
      prefixexp
       functioncall
        os
        .
        tmpname
        args
         (
         )
   stat
    local
    attnamelist
     otherprog
     attrib
    =
    explist
     exp
      prefixexp
       functioncall
        os
        .
        tmpname
        args
         (
         )
   stat
    local
    attnamelist
     out
     attrib
    =
    explist
     exp
      prefixexp
       functioncall
        os
        .
        tmpname
        args
         (
         )
   stat
    local
    attnamelist
     progname
     attrib
   stat
    do
    block
     stat
      local
      attnamelist
       i
       attrib
      =
      explist
       exp
        number
         0
     stat
      while
      exp
       prefixexp
        arg
        [
        exp
         prefixexp
          i
        ]
      do
      block
       stat
        varlist
         var
          i
        =
        explist
         exp
          exp
           prefixexp
            i
          -
          exp
           number
            1
      end
     stat
      varlist
       var
        progname
      =
      explist
       exp
        prefixexp
         arg
         [
         exp
          exp
           prefixexp
            i
          +
          exp
           number
            1
         ]
    end
   stat
    functioncall
     print
     args
      (
      explist
       exp
        exp
         string
          "progname: "
        ..
        exp
         prefixexp
          progname
      )
   stat
    local
    attnamelist
     prepfile
     attrib
    =
    explist
     exp
      functiondef
       function
       funcbody
        (
        parlist
         namelist
          s
          ,
          p
        )
        block
         stat
          varlist
           var
            p
          =
          explist
           exp
            exp
             prefixexp
              p
            or
            exp
             prefixexp
              prog
         stat
          functioncall
           io
           .
           output
           args
            (
            explist
             exp
              prefixexp
               p
            )
         stat
          functioncall
           io
           .
           write
           args
            (
            explist
             exp
              prefixexp
               s
            )
         stat
          functioncall
           assert
           args
            (
            explist
             exp
              prefixexp
               functioncall
                io
                .
                close
                args
                 (
                 )
            )
        end
   stat
    local
    function
    getoutput
    funcbody
     (
     parlist
     )
     block
      stat
       functioncall
        io
        .
        input
        args
         (
         explist
          exp
           prefixexp
            out
         )
      stat
       local
       attnamelist
        t
        attrib
       =
       explist
        exp
         prefixexp
          functioncall
           io
           .
           read
           args
            (
            explist
             exp
              string
               "a"
            )
      stat
       functioncall
        functioncall
         io
         .
         input
         args
          (
          )
        :
        close
        args
         (
         )
      stat
       functioncall
        assert
        args
         (
         explist
          exp
           prefixexp
            functioncall
             os
             .
             remove
             args
              (
              explist
               exp
                prefixexp
                 out
              )
         )
      retstat
       return
       explist
        exp
         prefixexp
          t
     end
   stat
    local
    function
    checkprogout
    funcbody
     (
     parlist
      namelist
       s
     )
     block
      stat
       functioncall
        assert
        args
         (
         explist
          exp
           exp
            prefixexp
             functioncall
              string
              .
              sub
              args
               (
               explist
                exp
                 prefixexp
                  s
                ,
                exp
                 -
                 exp
                  number
                   1
               )
           ==
           exp
            string
             "\n"
         )
      stat
       local
       attnamelist
        t
        attrib
       =
       explist
        exp
         prefixexp
          functioncall
           getoutput
           args
            (
            )
      stat
       for
       namelist
        line
       in
       explist
        exp
         prefixexp
          functioncall
           string
           .
           gmatch
           args
            (
            explist
             exp
              prefixexp
               s
             ,
             exp
              string
               ".-\n"
            )
       do
       block
        stat
         functioncall
          assert
          args
           (
           explist
            exp
             prefixexp
              functioncall
               string
               .
               find
               args
                (
                explist
                 exp
                  prefixexp
                   t
                 ,
                 exp
                  prefixexp
                   line
                 ,
                 exp
                  number
                   1
                 ,
                 exp
                  true
                )
           )
       end
     end
   stat
    local
    function
    checkout
    funcbody
     (
     parlist
      namelist
       s
     )
     block
      stat
       local
       attnamelist
        t
        attrib
       =
       explist
        exp
         prefixexp
          functioncall
           getoutput
           args
            (
            )
      stat
       if
       exp
        exp
         prefixexp
          s
        ~=
        exp
         prefixexp
          t
       then
       block
        stat
         functioncall
          print
          args
           (
           explist
            exp
             prefixexp
              functioncall
               string
               .
               format
               args
                (
                explist
                 exp
                  string
                   "'%s' - '%s'\n"
                 ,
                 exp
                  prefixexp
                   s
                 ,
                 exp
                  prefixexp
                   t
                )
           )
       end
      stat
       functioncall
        assert
        args
         (
         explist
          exp
           exp
            prefixexp
             s
           ==
           exp
            prefixexp
             t
         )
      retstat
       return
       explist
        exp
         prefixexp
          t
     end
   stat
    local
    function
    RUN
    funcbody
     (
     parlist
      namelist
       p
      ,
      ...
     )
     block
      stat
       varlist
        var
         p
       =
       explist
        exp
         prefixexp
          functioncall
           string
           .
           gsub
           args
            (
            explist
             exp
              prefixexp
               p
             ,
             exp
              string
               "lua"
             ,
             exp
              exp
               string
                '"'
              ..
              exp
               exp
                prefixexp
                 progname
               ..
               exp
                string
                 '"'
             ,
             exp
              number
               1
            )
      stat
       local
       attnamelist
        s
        attrib
       =
       explist
        exp
         prefixexp
          functioncall
           string
           .
           format
           args
            (
            explist
             exp
              prefixexp
               p
             ,
             exp
              ...
            )
      stat
       functioncall
        assert
        args
         (
         explist
          exp
           prefixexp
            functioncall
             os
             .
             execute
             args
              (
              explist
               exp
                prefixexp
                 s
              )
         )
     end
   stat
    local
    function
    NoRun
    funcbody
     (
     parlist
      namelist
       msg
       ,
       p
      ,
      ...
     )
     block
      stat
       varlist
        var
         p
       =
       explist
        exp
         prefixexp
          functioncall
           string
           .
           gsub
           args
            (
            explist
             exp
              prefixexp
               p
             ,
             exp
              string
               "lua"
             ,
             exp
              exp
               string
                '"'
              ..
              exp
               exp
                prefixexp
                 progname
               ..
               exp
                string
                 '"'
             ,
             exp
              number
               1
            )
      stat
       local
       attnamelist
        s
        attrib
       =
       explist
        exp
         prefixexp
          functioncall
           string
           .
           format
           args
            (
            explist
             exp
              prefixexp
               p
             ,
             exp
              ...
            )
      stat
       varlist
        var
         s
       =
       explist
        exp
         prefixexp
          functioncall
           string
           .
           format
           args
            (
            explist
             exp
              string
               "%s 2> %s"
             ,
             exp
              prefixexp
               s
             ,
             exp
              prefixexp
               out
            )
      stat
       functioncall
        assert
        args
         (
         explist
          exp
           not
           exp
            prefixexp
             functioncall
              os
              .
              execute
              args
               (
               explist
                exp
                 prefixexp
                  s
               )
         )
      stat
       functioncall
        assert
        args
         (
         explist
          exp
           prefixexp
            functioncall
             string
             .
             find
             args
              (
              explist
               exp
                prefixexp
                 functioncall
                  getoutput
                  args
                   (
                   )
               ,
               exp
                prefixexp
                 msg
               ,
               exp
                number
                 1
               ,
               exp
                true
              )
         )
     end
   stat
    functioncall
     RUN
     args
      (
      explist
       exp
        string
         'lua -v'
      )
   stat
    functioncall
     print
     args
      (
      explist
       exp
        prefixexp
         functioncall
          string
          .
          format
          args
           (
           explist
            exp
             string
              "(temporary program file used in these tests: %s)"
            ,
            exp
             prefixexp
              prog
           )
      )
   stat
    functioncall
     prepfile
     args
      string
       ""
   stat
    functioncall
     RUN
     args
      (
      explist
       exp
        string
         'lua - < %s > %s'
       ,
       exp
        prefixexp
         prog
       ,
       exp
        prefixexp
         out
      )
   stat
    functioncall
     checkout
     args
      (
      explist
       exp
        string
         ""
      )
   stat
    functioncall
     prepfile
     args
      string
       [[\n  print(\n1, a\n)\n]]
   stat
    functioncall
     RUN
     args
      (
      explist
       exp
        string
         'lua - < %s > %s'
       ,
       exp
        prefixexp
         prog
       ,
       exp
        prefixexp
         out
      )
   stat
    functioncall
     checkout
     args
      (
      explist
       exp
        string
         "1\tnil\n"
      )
   stat
    functioncall
     RUN
     args
      (
      explist
       exp
        string
         'echo "print(10)\nprint(2)\n" | lua > %s'
       ,
       exp
        prefixexp
         out
      )
   stat
    functioncall
     checkout
     args
      (
      explist
       exp
        string
         "10\n2\n"
      )
   stat
    functioncall
     prepfile
     args
      (
      explist
       exp
        string
         "\xEF\xBB\xBF"
      )
   stat
    functioncall
     RUN
     args
      (
      explist
       exp
        string
         'lua %s > %s'
       ,
       exp
        prefixexp
         prog
       ,
       exp
        prefixexp
         out
      )
   stat
    functioncall
     checkout
     args
      (
      explist
       exp
        string
         ""
      )
   stat
    functioncall
     prepfile
     args
      (
      explist
       exp
        string
         "\xEF\xBB\xBFprint(3)"
      )
   stat
    functioncall
     RUN
     args
      (
      explist
       exp
        string
         'lua %s > %s'
       ,
       exp
        prefixexp
         prog
       ,
       exp
        prefixexp
         out
      )
   stat
    functioncall
     checkout
     args
      (
      explist
       exp
        string
         "3\n"
      )
   stat
    functioncall
     prepfile
     args
      (
      explist
       exp
        string
         "\xEF\xBB\xBF# comment!!\nprint(3)"
      )
   stat
    functioncall
     RUN
     args
      (
      explist
       exp
        string
         'lua %s > %s'
       ,
       exp
        prefixexp
         prog
       ,
       exp
        prefixexp
         out
      )
   stat
    functioncall
     checkout
     args
      (
      explist
       exp
        string
         "3\n"
      )
   stat
    functioncall
     prepfile
     args
      (
      explist
       exp
        string
         "\xEF"
      )
   stat
    functioncall
     NoRun
     args
      (
      explist
       exp
        string
         "unexpected symbol"
       ,
       exp
        string
         'lua %s > %s'
       ,
       exp
        prefixexp
         prog
       ,
       exp
        prefixexp
         out
      )
   stat
    functioncall
     prepfile
     args
      (
      explist
       exp
        string
         "\xEF\xBB"
      )
   stat
    functioncall
     NoRun
     args
      (
      explist
       exp
        string
         "unexpected symbol"
       ,
       exp
        string
         'lua %s > %s'
       ,
       exp
        prefixexp
         prog
       ,
       exp
        prefixexp
         out
      )
   stat
    functioncall
     prepfile
     args
      (
      explist
       exp
        string
         "\xEFprint(3)"
      )
   stat
    functioncall
     NoRun
     args
      (
      explist
       exp
        string
         "unexpected symbol"
       ,
       exp
        string
         'lua %s > %s'
       ,
       exp
        prefixexp
         prog
       ,
       exp
        prefixexp
         out
      )
   stat
    functioncall
     prepfile
     args
      (
      explist
       exp
        string
         "\xEF\xBBprint(3)"
      )
   stat
    functioncall
     NoRun
     args
      (
      explist
       exp
        string
         "unexpected symbol"
       ,
       exp
        string
         'lua %s > %s'
       ,
       exp
        prefixexp
         prog
       ,
       exp
        prefixexp
         out
      )
   stat
    functioncall
     RUN
     args
      (
      explist
       exp
        string
         'echo "print(arg[1])" | lua - -h > %s'
       ,
       exp
        prefixexp
         out
      )
   stat
    functioncall
     checkout
     args
      (
      explist
       exp
        string
         "-h\n"
      )
   stat
    functioncall
     prepfile
     args
      (
      explist
       exp
        string
         "print(package.path)"
      )
   stat
    functioncall
     RUN
     args
      (
      explist
       exp
        string
         'env LUA_INIT= LUA_PATH=x lua %s > %s'
       ,
       exp
        prefixexp
         prog
       ,
       exp
        prefixexp
         out
      )
   stat
    functioncall
     checkout
     args
      (
      explist
       exp
        string
         "x\n"
      )
   stat
    functioncall
     RUN
     args
      (
      explist
       exp
        string
         'env LUA_INIT= LUA_PATH_5_4=y LUA_PATH=x lua %s > %s'
       ,
       exp
        prefixexp
         prog
       ,
       exp
        prefixexp
         out
      )
   stat
    functioncall
     checkout
     args
      (
      explist
       exp
        string
         "y\n"
      )
   stat
    functioncall
     prepfile
     args
      (
      explist
       exp
        string
         "print(package.cpath)"
      )
   stat
    functioncall
     RUN
     args
      (
      explist
       exp
        string
         'env LUA_INIT= LUA_CPATH=xuxu lua %s > %s'
       ,
       exp
        prefixexp
         prog
       ,
       exp
        prefixexp
         out
      )
   stat
    functioncall
     checkout
     args
      (
      explist
       exp
        string
         "xuxu\n"
      )
   stat
    functioncall
     RUN
     args
      (
      explist
       exp
        string
         'env LUA_INIT= LUA_CPATH_5_4=yacc LUA_CPATH=x lua %s > %s'
       ,
       exp
        prefixexp
         prog
       ,
       exp
        prefixexp
         out
      )
   stat
    functioncall
     checkout
     args
      (
      explist
       exp
        string
         "yacc\n"
      )
   stat
    functioncall
     prepfile
     args
      (
      explist
       exp
        string
         "print(X)"
      )
   stat
    functioncall
     RUN
     args
      (
      explist
       exp
        string
         'env LUA_INIT="X=tonumber(arg[1])" lua %s 3.2 > %s'
       ,
       exp
        prefixexp
         prog
       ,
       exp
        prefixexp
         out
      )
   stat
    functioncall
     checkout
     args
      (
      explist
       exp
        string
         "3.2\n"
      )
   stat
    functioncall
     prepfile
     args
      (
      explist
       exp
        string
         "print(X)"
      )
   stat
    functioncall
     RUN
     args
      (
      explist
       exp
        string
         'env LUA_INIT_5_4="X=10" LUA_INIT="X=3" lua %s > %s'
       ,
       exp
        prefixexp
         prog
       ,
       exp
        prefixexp
         out
      )
   stat
    functioncall
     checkout
     args
      (
      explist
       exp
        string
         "10\n"
      )
   stat
    functioncall
     prepfile
     args
      (
      explist
       exp
        string
         "x = x or 10; print(x); x = x + 1"
      )
   stat
    functioncall
     RUN
     args
      (
      explist
       exp
        string
         'env LUA_INIT="@%s" lua %s > %s'
       ,
       exp
        prefixexp
         prog
       ,
       exp
        prefixexp
         prog
       ,
       exp
        prefixexp
         out
      )
   stat
    functioncall
     checkout
     args
      (
      explist
       exp
        string
         "10\n11\n"
      )
   stat
    functioncall
     NoRun
     args
      (
      explist
       exp
        string
         'LUA_INIT:1: msg'
       ,
       exp
        string
         'env LUA_INIT="error(\'msg\')" lua'
      )
   stat
    local
    attnamelist
     defaultpath
     attrib
     ,
     defaultCpath
     attrib
   stat
    do
    block
     stat
      functioncall
       prepfile
       args
        (
        explist
         exp
          string
           "print(package.path, package.cpath)"
        )
     stat
      functioncall
       RUN
       args
        (
        explist
         exp
          string
           'env LUA_INIT="error(10)" LUA_PATH=xxx LUA_CPATH=xxx lua -E %s > %s'
         ,
         exp
          prefixexp
           prog
         ,
         exp
          prefixexp
           out
        )
     stat
      local
      attnamelist
       output
       attrib
      =
      explist
       exp
        prefixexp
         functioncall
          getoutput
          args
           (
           )
     stat
      varlist
       var
        defaultpath
      =
      explist
       exp
        prefixexp
         functioncall
          string
          .
          match
          args
           (
           explist
            exp
             prefixexp
              output
            ,
            exp
             string
              "^(.-)\t"
           )
     stat
      varlist
       var
        defaultCpath
      =
      explist
       exp
        prefixexp
         functioncall
          string
          .
          match
          args
           (
           explist
            exp
             prefixexp
              output
            ,
            exp
             string
              "\t(.-)$"
           )
     stat
      functioncall
       RUN
       args
        (
        explist
         exp
          string
           'env -i lua %s > %s'
         ,
         exp
          prefixexp
           prog
         ,
         exp
          prefixexp
           out
        )
     stat
      local
      attnamelist
       out
       attrib
      =
      explist
       exp
        prefixexp
         functioncall
          getoutput
          args
           (
           )
     stat
      functioncall
       assert
       args
        (
        explist
         exp
          exp
           prefixexp
            defaultpath
          ==
          exp
           prefixexp
            functioncall
             string
             .
             match
             args
              (
              explist
               exp
                prefixexp
                 output
               ,
               exp
                string
                 "^(.-)\t"
              )
        )
     stat
      functioncall
       assert
       args
        (
        explist
         exp
          exp
           prefixexp
            defaultCpath
          ==
          exp
           prefixexp
            functioncall
             string
             .
             match
             args
              (
              explist
               exp
                prefixexp
                 output
               ,
               exp
                string
                 "\t(.-)$"
              )
        )
    end
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        exp
         exp
          exp
           not
           exp
            prefixexp
             functioncall
              string
              .
              find
              args
               (
               explist
                exp
                 prefixexp
                  defaultpath
                ,
                exp
                 string
                  "xxx"
               )
          and
          exp
           prefixexp
            functioncall
             string
             .
             find
             args
              (
              explist
               exp
                prefixexp
                 defaultpath
               ,
               exp
                string
                 "lua"
              )
         and
         exp
          not
          exp
           prefixexp
            functioncall
             string
             .
             find
             args
              (
              explist
               exp
                prefixexp
                 defaultCpath
               ,
               exp
                string
                 "xxx"
              )
        and
        exp
         prefixexp
          functioncall
           string
           .
           find
           args
            (
            explist
             exp
              prefixexp
               defaultCpath
             ,
             exp
              string
               "lua"
            )
      )
   stat
    local
    function
    convert
    funcbody
     (
     parlist
      namelist
       p
     )
     block
      stat
       functioncall
        prepfile
        args
         (
         explist
          exp
           string
            "print(package.path)"
         )
      stat
       functioncall
        RUN
        args
         (
         explist
          exp
           string
            'env LUA_PATH="%s" lua %s > %s'
          ,
          exp
           prefixexp
            p
          ,
          exp
           prefixexp
            prog
          ,
          exp
           prefixexp
            out
         )
      stat
       local
       attnamelist
        expected
        attrib
       =
       explist
        exp
         prefixexp
          functioncall
           getoutput
           args
            (
            )
      stat
       varlist
        var
         expected
       =
       explist
        exp
         prefixexp
          functioncall
           string
           .
           sub
           args
            (
            explist
             exp
              prefixexp
               expected
             ,
             exp
              number
               1
             ,
             exp
              -
              exp
               number
                2
            )
      stat
       if
       exp
        prefixexp
         functioncall
          string
          .
          find
          args
           (
           explist
            exp
             prefixexp
              p
            ,
            exp
             string
              ";;"
           )
       then
       block
        stat
         varlist
          var
           p
         =
         explist
          exp
           prefixexp
            functioncall
             string
             .
             gsub
             args
              (
              explist
               exp
                prefixexp
                 p
               ,
               exp
                string
                 ";;"
               ,
               exp
                exp
                 string
                  ";"
                ..
                exp
                 exp
                  prefixexp
                   defaultpath
                 ..
                 exp
                  string
                   ";"
              )
        stat
         varlist
          var
           p
         =
         explist
          exp
           prefixexp
            functioncall
             string
             .
             gsub
             args
              (
              explist
               exp
                prefixexp
                 p
               ,
               exp
                string
                 "^;"
               ,
               exp
                string
                 ""
              )
        stat
         varlist
          var
           p
         =
         explist
          exp
           prefixexp
            functioncall
             string
             .
             gsub
             args
              (
              explist
               exp
                prefixexp
                 p
               ,
               exp
                string
                 ";$"
               ,
               exp
                string
                 ""
              )
       end
      stat
       functioncall
        assert
        args
         (
         explist
          exp
           exp
            prefixexp
             p
           ==
           exp
            prefixexp
             expected
         )
     end
   stat
    functioncall
     convert
     args
      (
      explist
       exp
        string
         ";"
      )
   stat
    functioncall
     convert
     args
      (
      explist
       exp
        string
         ";;"
      )
   stat
    functioncall
     convert
     args
      (
      explist
       exp
        string
         "a;;b"
      )
   stat
    functioncall
     convert
     args
      (
      explist
       exp
        string
         ";;b"
      )
   stat
    functioncall
     convert
     args
      (
      explist
       exp
        string
         "a;;"
      )
   stat
    functioncall
     convert
     args
      (
      explist
       exp
        string
         "a;b;;c"
      )
   stat
    functioncall
     prepfile
     args
      (
      explist
       exp
        string
         "print(1); a=2; return {x=15}"
      )
   stat
    functioncall
     prepfile
     args
      (
      explist
       exp
        prefixexp
         functioncall
          (
          exp
           string
            "print(a); print(_G['%s'].x)"
          )
          :
          format
          args
           (
           explist
            exp
             prefixexp
              prog
           )
       ,
       exp
        prefixexp
         otherprog
      )
   stat
    functioncall
     RUN
     args
      (
      explist
       exp
        string
         'env LUA_PATH="?;;" lua -l %s -l%s -lstring -l io %s > %s'
       ,
       exp
        prefixexp
         prog
       ,
       exp
        prefixexp
         otherprog
       ,
       exp
        prefixexp
         otherprog
       ,
       exp
        prefixexp
         out
      )
   stat
    functioncall
     checkout
     args
      (
      explist
       exp
        string
         "1\n2\n15\n2\n15\n"
      )
   stat
    functioncall
     prepfile
     args
      (
      explist
       exp
        string
         "print(str.upper'alo alo', m.max(10, 20))"
      )
   stat
    functioncall
     RUN
     args
      (
      explist
       exp
        string
         "lua -l 'str=string' '-lm=math' -e 'print(m.sin(0))' %s > %s"
       ,
       exp
        prefixexp
         prog
       ,
       exp
        prefixexp
         out
      )
   stat
    functioncall
     checkout
     args
      (
      explist
       exp
        string
         "0.0\nALO ALO\t20\n"
      )
   stat
    local
    attnamelist
     a
     attrib
    =
    explist
     exp
      string
       [[\n  assert(#arg == 3 and arg[1] == 'a' and\n         arg[2] == 'b' and arg[3] == 'c')\n  assert(arg[-1] == '--' and arg[-2] == "-e " and arg[-3] == '%s')\n  assert(arg[4] == undef and arg[-4] == undef)\n  local a, b, c = ...\n  assert(... == 'a' and a == 'a' and b == 'b' and c == 'c')\n]]
   stat
    varlist
     var
      a
    =
    explist
     exp
      prefixexp
       functioncall
        string
        .
        format
        args
         (
         explist
          exp
           prefixexp
            a
          ,
          exp
           prefixexp
            progname
         )
   stat
    functioncall
     prepfile
     args
      (
      explist
       exp
        prefixexp
         a
      )
   stat
    functioncall
     RUN
     args
      (
      explist
       exp
        string
         'lua "-e " -- %s a b c'
       ,
       exp
        prefixexp
         prog
      )
   stat
    functioncall
     prepfile
     args
      string
       "assert(arg)"
   stat
    functioncall
     prepfile
     args
      (
      explist
       exp
        string
         "assert(arg)"
       ,
       exp
        prefixexp
         otherprog
      )
   stat
    functioncall
     RUN
     args
      (
      explist
       exp
        string
         'env LUA_PATH="?;;" lua -l%s - < %s'
       ,
       exp
        prefixexp
         prog
       ,
       exp
        prefixexp
         otherprog
      )
   stat
    functioncall
     RUN
     args
      (
      explist
       exp
        string
         'echo "print(...)" | lua -e "arg[1] = 100" - > %s'
       ,
       exp
        prefixexp
         out
      )
   stat
    functioncall
     checkout
     args
      (
      explist
       exp
        string
         "100\n"
      )
   stat
    functioncall
     NoRun
     args
      (
      explist
       exp
        string
         "'arg' is not a table"
       ,
       exp
        string
         'echo "" | lua -e "arg = 1" -'
      )
   stat
    functioncall
     RUN
     args
      (
      explist
       exp
        string
         'echo 10 | lua -e "print=nil" -i > /dev/null 2> %s'
       ,
       exp
        prefixexp
         out
      )
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        prefixexp
         functioncall
          string
          .
          find
          args
           (
           explist
            exp
             prefixexp
              functioncall
               getoutput
               args
                (
                )
            ,
            exp
             string
              "error calling 'print'"
           )
      )
   stat
    functioncall
     RUN
     args
      (
      explist
       exp
        string
         'echo "io.stderr:write(1000)\ncont" | lua -e "require\'debug\'.debug()" 2> %s'
       ,
       exp
        prefixexp
         out
      )
   stat
    functioncall
     checkout
     args
      (
      explist
       exp
        string
         "lua_debug> 1000lua_debug> "
      )
   stat
    functioncall
     print
     args
      (
      explist
       exp
        string
         "testing warnings"
      )
   stat
    functioncall
     RUN
     args
      (
      explist
       exp
        string
         'echo "io.stderr:write(1); warn[[XXX]]" | lua 2> %s'
       ,
       exp
        prefixexp
         out
      )
   stat
    functioncall
     checkout
     args
      (
      explist
       exp
        string
         "1"
      )
   stat
    functioncall
     prepfile
     args
      string
       [[\nwarn("@allow")               -- unknown control, ignored\nwarn("@off", "XXX", "@off")  -- these are not control messages\nwarn("@off")                 -- this one is\nwarn("@on", "YYY", "@on")    -- not control, but warn is off\nwarn("@off")                 -- keep it off\nwarn("@on")                  -- restart warnings\nwarn("", "@on")              -- again, no control, real warning\nwarn("@on")                  -- keep it "started"\nwarn("Z", "Z", "Z")          -- common warning\n]]
   stat
    functioncall
     RUN
     args
      (
      explist
       exp
        string
         'lua -W %s 2> %s'
       ,
       exp
        prefixexp
         prog
       ,
       exp
        prefixexp
         out
      )
   stat
    functioncall
     checkout
     args
      string
       [[\nLua warning: @offXXX@off\nLua warning: @on\nLua warning: ZZZ\n]]
   stat
    functioncall
     prepfile
     args
      string
       [[\nwarn("@allow")\n-- create two objects to be finalized when closing state\n-- the errors in the finalizers must generate warnings\nu1 = setmetatable({}, {__gc = function () error("XYZ") end})\nu2 = setmetatable({}, {__gc = function () error("ZYX") end})\n]]
   stat
    functioncall
     RUN
     args
      (
      explist
       exp
        string
         'lua -W %s 2> %s'
       ,
       exp
        prefixexp
         prog
       ,
       exp
        prefixexp
         out
      )
   stat
    functioncall
     checkprogout
     args
      (
      explist
       exp
        string
         "ZYX)\nXYZ)\n"
      )
   stat
    functioncall
     prepfile
     args
      string
       [[\n-- should be called last\nprint("creating 1")\nsetmetatable({}, {__gc = function () print(1) end})\n\nprint("creating 2")\nsetmetatable({}, {__gc = function ()\n  print("2")\n  print("creating 3")\n  -- this finalizer should not be called, as object will be\n  -- created after 'lua_close' has been called\n  setmetatable({}, {__gc = function () print(3) end})\n  print(collectgarbage())    -- cannot call collector here\n  os.exit(0, true)\nend})\n]]
   stat
    functioncall
     RUN
     args
      (
      explist
       exp
        string
         'lua -W %s > %s'
       ,
       exp
        prefixexp
         prog
       ,
       exp
        prefixexp
         out
      )
   stat
    functioncall
     checkout
     args
      string
       [[\ncreating 1\ncreating 2\n2\ncreating 3\nnil\n1\n]]
   stat
    functioncall
     prepfile
     args
      string
       [[print(({...})[30])]]
   stat
    functioncall
     RUN
     args
      (
      explist
       exp
        string
         'lua %s %s > %s'
       ,
       exp
        prefixexp
         prog
       ,
       exp
        prefixexp
         functioncall
          string
          .
          rep
          args
           (
           explist
            exp
             string
              " a"
            ,
            exp
             number
              30
           )
       ,
       exp
        prefixexp
         out
      )
   stat
    functioncall
     checkout
     args
      (
      explist
       exp
        string
         "a\n"
      )
   stat
    functioncall
     RUN
     args
      (
      explist
       exp
        string
         [[lua "-eprint(1)" -ea=3 -e "print(a)" > %s]]
       ,
       exp
        prefixexp
         out
      )
   stat
    functioncall
     checkout
     args
      (
      explist
       exp
        string
         "1\n3\n"
      )
   stat
    functioncall
     prepfile
     args
      string
       [[\n(6*2-6) -- ===\na =\n10\nprint(a)\na]]
   stat
    functioncall
     RUN
     args
      (
      explist
       exp
        string
         [[lua -e"_PROMPT='' _PROMPT2=''" -i < %s > %s]]
       ,
       exp
        prefixexp
         prog
       ,
       exp
        prefixexp
         out
      )
   stat
    functioncall
     checkprogout
     args
      (
      explist
       exp
        string
         "6\n10\n10\n\n"
      )
   stat
    functioncall
     prepfile
     args
      (
      explist
       exp
        string
         "a = [[b\nc\nd\ne]]\n=a"
      )
   stat
    functioncall
     RUN
     args
      (
      explist
       exp
        string
         [[lua -e"_PROMPT='' _PROMPT2=''" -i < %s > %s]]
       ,
       exp
        prefixexp
         prog
       ,
       exp
        prefixexp
         out
      )
   stat
    functioncall
     checkprogout
     args
      (
      explist
       exp
        string
         "b\nc\nd\ne\n\n"
      )
   stat
    local
    attnamelist
     prompt
     attrib
    =
    explist
     exp
      string
       "alo"
   stat
    functioncall
     prepfile
     args
      string
       [[ --\na = 2\n]]
   stat
    functioncall
     RUN
     args
      (
      explist
       exp
        string
         [[lua "-e_PROMPT='%s'" -i < %s > %s]]
       ,
       exp
        prefixexp
         prompt
       ,
       exp
        prefixexp
         prog
       ,
       exp
        prefixexp
         out
      )
   stat
    local
    attnamelist
     t
     attrib
    =
    explist
     exp
      prefixexp
       functioncall
        getoutput
        args
         (
         )
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        prefixexp
         functioncall
          string
          .
          find
          args
           (
           explist
            exp
             prefixexp
              t
            ,
            exp
             exp
              prefixexp
               prompt
             ..
             exp
              exp
               string
                ".*"
              ..
              exp
               exp
                prefixexp
                 prompt
               ..
               exp
                exp
                 string
                  ".*"
                ..
                exp
                 prefixexp
                  prompt
           )
      )
   stat
    functioncall
     prepfile
     args
      string
       [[ --\na = 2\n]]
   stat
    functioncall
     RUN
     args
      (
      explist
       exp
        string
         [[lua -i < %s > %s]]
       ,
       exp
        prefixexp
         prog
       ,
       exp
        prefixexp
         out
      )
   stat
    local
    attnamelist
     t
     attrib
    =
    explist
     exp
      prefixexp
       functioncall
        getoutput
        args
         (
         )
   stat
    varlist
     var
      prompt
    =
    explist
     exp
      string
       "> "
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        prefixexp
         functioncall
          string
          .
          find
          args
           (
           explist
            exp
             prefixexp
              t
            ,
            exp
             exp
              prefixexp
               prompt
             ..
             exp
              exp
               string
                ".*"
              ..
              exp
               exp
                prefixexp
                 prompt
               ..
               exp
                exp
                 string
                  ".*"
                ..
                exp
                 prefixexp
                  prompt
           )
      )
   stat
    varlist
     var
      prompt
    =
    explist
     exp
      string
       "local C = 0;\z\n   _PROMPT=setmetatable({},{__tostring = function () \z\n     C = C + 1; return C end})"
   stat
    functioncall
     prepfile
     args
      string
       [[ --\na = 2\n]]
   stat
    functioncall
     RUN
     args
      (
      explist
       exp
        string
         [[lua -e "%s" -i < %s > %s]]
       ,
       exp
        prefixexp
         prompt
       ,
       exp
        prefixexp
         prog
       ,
       exp
        prefixexp
         out
      )
   stat
    local
    attnamelist
     t
     attrib
    =
    explist
     exp
      prefixexp
       functioncall
        getoutput
        args
         (
         )
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        prefixexp
         functioncall
          string
          .
          find
          args
           (
           explist
            exp
             prefixexp
              t
            ,
            exp
             string
              [[\n1 --\n2a = 2\n3\n]]
            ,
            exp
             number
              1
            ,
            exp
             true
           )
      )
   stat
    functioncall
     prepfile
     args
      string
       [[\ndebug = require "debug"\nm = {x=0}\nsetmetatable(m, {__tostring = function(x)\n  return tostring(debug.getinfo(4).currentline + x.x)\nend})\nerror(m)\n]]
   stat
    functioncall
     NoRun
     args
      (
      explist
       exp
        exp
         prefixexp
          progname
        ..
        exp
         string
          ": 6\n"
       ,
       exp
        string
         [[lua %s]]
       ,
       exp
        prefixexp
         prog
      )
   stat
    functioncall
     prepfile
     args
      (
      explist
       exp
        string
         "error{}"
      )
   stat
    functioncall
     NoRun
     args
      (
      explist
       exp
        string
         "error object is a table value"
       ,
       exp
        string
         [[lua %s]]
       ,
       exp
        prefixexp
         prog
      )
   stat
    local
    attnamelist
     s
     attrib
    =
    explist
     exp
      string
       [=[ --\nfunction f ( x )\n  local a = [[\nxuxu\n]]\n  local b = "\\nxuxu\n"\n  if x == 11 then return 1 + 12 , 2 + 20 end  --[[ test multiple returns ]]\n  return x + 1\n  --\\\nend\nreturn( f( 100 ) )\nassert( a == b )\ndo return f( 11 ) end  ]=]
   stat
    varlist
     var
      s
    =
    explist
     exp
      prefixexp
       functioncall
        string
        .
        gsub
        args
         (
         explist
          exp
           prefixexp
            s
          ,
          exp
           string
            ' '
          ,
          exp
           string
            '\n\n'
         )
   stat
    functioncall
     prepfile
     args
      (
      explist
       exp
        prefixexp
         s
      )
   stat
    functioncall
     RUN
     args
      (
      explist
       exp
        string
         [[lua -e"_PROMPT='' _PROMPT2=''" -i < %s > %s]]
       ,
       exp
        prefixexp
         prog
       ,
       exp
        prefixexp
         out
      )
   stat
    functioncall
     checkprogout
     args
      (
      explist
       exp
        string
         "101\n13\t22\n\n"
      )
   stat
    functioncall
     prepfile
     args
      string
       [[#comment in 1st line without \n at the end]]
   stat
    functioncall
     RUN
     args
      (
      explist
       exp
        string
         'lua %s'
       ,
       exp
        prefixexp
         prog
      )
   stat
    functioncall
     prepfile
     args
      (
      explist
       exp
        exp
         string
          "#comment\n"
        ..
        exp
         prefixexp
          functioncall
           string
           .
           dump
           args
            (
            explist
             exp
              prefixexp
               functioncall
                load
                args
                 (
                 explist
                  exp
                   string
                    "print(3)"
                 )
            )
      )
   stat
    functioncall
     RUN
     args
      (
      explist
       exp
        string
         'lua %s > %s'
       ,
       exp
        prefixexp
         prog
       ,
       exp
        prefixexp
         out
      )
   stat
    functioncall
     checkout
     args
      (
      explist
       exp
        string
         '3\n'
      )
   stat
    functioncall
     prepfile
     args
      (
      explist
       exp
        prefixexp
         functioncall
          string
          .
          format
          args
           (
           explist
            exp
             string
              [[io.output(%q); io.write('alo')]]
            ,
            exp
             prefixexp
              out
           )
      )
   stat
    functioncall
     RUN
     args
      (
      explist
       exp
        string
         'lua %s'
       ,
       exp
        prefixexp
         prog
      )
   stat
    functioncall
     checkout
     args
      (
      explist
       exp
        string
         'alo'
      )
   stat
    functioncall
     RUN
     args
      (
      explist
       exp
        string
         [[lua -v  -e"print'hello'" > %s]]
       ,
       exp
        prefixexp
         out
      )
   stat
    varlist
     var
      t
    =
    explist
     exp
      prefixexp
       functioncall
        getoutput
        args
         (
         )
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        prefixexp
         functioncall
          string
          .
          find
          args
           (
           explist
            exp
             prefixexp
              t
            ,
            exp
             string
              "PUC%-Rio\nhello"
           )
      )
   stat
    functioncall
     prepfile
     args
      (
      explist
       exp
        string
         "os.exit(nil, true)"
      )
   stat
    functioncall
     RUN
     args
      (
      explist
       exp
        string
         'lua %s'
       ,
       exp
        prefixexp
         prog
      )
   stat
    functioncall
     prepfile
     args
      (
      explist
       exp
        string
         "os.exit(0, true)"
      )
   stat
    functioncall
     RUN
     args
      (
      explist
       exp
        string
         'lua %s'
       ,
       exp
        prefixexp
         prog
      )
   stat
    functioncall
     prepfile
     args
      (
      explist
       exp
        string
         "os.exit(true, true)"
      )
   stat
    functioncall
     RUN
     args
      (
      explist
       exp
        string
         'lua %s'
       ,
       exp
        prefixexp
         prog
      )
   stat
    functioncall
     prepfile
     args
      (
      explist
       exp
        string
         "os.exit(1, true)"
      )
   stat
    functioncall
     NoRun
     args
      (
      explist
       exp
        string
         ""
       ,
       exp
        string
         "lua %s"
       ,
       exp
        prefixexp
         prog
      )
   stat
    functioncall
     prepfile
     args
      (
      explist
       exp
        string
         "os.exit(false, true)"
      )
   stat
    functioncall
     NoRun
     args
      (
      explist
       exp
        string
         ""
       ,
       exp
        string
         "lua %s"
       ,
       exp
        prefixexp
         prog
      )
   stat
    functioncall
     prepfile
     args
      string
       [[\n  local x <close> = setmetatable({},\n        {__close = function (self, err)\n                     assert(err == nil)\n                     print("Ok")\n                   end})\n  local e1 <close> = setmetatable({}, {__close = function () print(120) end})\n  os.exit(true, true)\n]]
   stat
    functioncall
     RUN
     args
      (
      explist
       exp
        string
         'lua %s > %s'
       ,
       exp
        prefixexp
         prog
       ,
       exp
        prefixexp
         out
      )
   stat
    functioncall
     checkprogout
     args
      (
      explist
       exp
        string
         "120\nOk\n"
      )
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        prefixexp
         functioncall
          os
          .
          remove
          args
           (
           explist
            exp
             prefixexp
              prog
           )
      )
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        prefixexp
         functioncall
          os
          .
          remove
          args
           (
           explist
            exp
             prefixexp
              otherprog
           )
      )
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        not
        exp
         prefixexp
          functioncall
           os
           .
           remove
           args
            (
            explist
             exp
              prefixexp
               out
            )
      )
   stat
    functioncall
     NoRun
     args
      (
      explist
       exp
        string
         "unrecognized option '-h'"
       ,
       exp
        string
         "lua -h"
      )
   stat
    functioncall
     NoRun
     args
      (
      explist
       exp
        string
         "unrecognized option '---'"
       ,
       exp
        string
         "lua ---"
      )
   stat
    functioncall
     NoRun
     args
      (
      explist
       exp
        string
         "unrecognized option '-Ex'"
       ,
       exp
        string
         "lua -Ex"
      )
   stat
    functioncall
     NoRun
     args
      (
      explist
       exp
        string
         "unrecognized option '-vv'"
       ,
       exp
        string
         "lua -vv"
      )
   stat
    functioncall
     NoRun
     args
      (
      explist
       exp
        string
         "unrecognized option '-iv'"
       ,
       exp
        string
         "lua -iv"
      )
   stat
    functioncall
     NoRun
     args
      (
      explist
       exp
        string
         "'-e' needs argument"
       ,
       exp
        string
         "lua -e"
      )
   stat
    functioncall
     NoRun
     args
      (
      explist
       exp
        string
         "syntax error"
       ,
       exp
        string
         "lua -e a"
      )
   stat
    functioncall
     NoRun
     args
      (
      explist
       exp
        string
         "'-l' needs argument"
       ,
       exp
        string
         "lua -l"
      )
   stat
    if
    exp
     prefixexp
      T
    then
    block
     stat
      functioncall
       print
       args
        (
        explist
         exp
          string
           "testing 'not enough memory' to create a state"
        )
     stat
      functioncall
       NoRun
       args
        (
        explist
         exp
          string
           "not enough memory"
         ,
         exp
          string
           "env MEMLIMIT=100 lua"
        )
     stat
      functioncall
       warn
       args
        (
        explist
         exp
          string
           "@store"
        )
     stat
      functioncall
       warn
       args
        (
        explist
         exp
          string
           "@123"
         ,
         exp
          string
           "456"
         ,
         exp
          string
           "789"
        )
     stat
      functioncall
       assert
       args
        (
        explist
         exp
          exp
           prefixexp
            _WARN
          ==
          exp
           string
            "@123456789"
        )
     stat
      ;
     stat
      varlist
       var
        _WARN
      =
      explist
       exp
        false
     stat
      functioncall
       warn
       args
        (
        explist
         exp
          string
           "zip"
         ,
         exp
          string
           ""
         ,
         exp
          string
           " "
         ,
         exp
          string
           "zap"
        )
     stat
      functioncall
       assert
       args
        (
        explist
         exp
          exp
           prefixexp
            _WARN
          ==
          exp
           string
            "zip zap"
        )
     stat
      ;
     stat
      varlist
       var
        _WARN
      =
      explist
       exp
        false
     stat
      functioncall
       warn
       args
        (
        explist
         exp
          string
           "ZIP"
         ,
         exp
          string
           ""
         ,
         exp
          string
           " "
         ,
         exp
          string
           "ZAP"
        )
     stat
      functioncall
       assert
       args
        (
        explist
         exp
          exp
           prefixexp
            _WARN
          ==
          exp
           string
            "ZIP ZAP"
        )
     stat
      ;
     stat
      varlist
       var
        _WARN
      =
      explist
       exp
        false
     stat
      functioncall
       warn
       args
        (
        explist
         exp
          string
           "@normal"
        )
    end
   stat
    do
    block
     stat
      local
      attnamelist
       st
       attrib
       ,
       msg
       attrib
      =
      explist
       exp
        prefixexp
         functioncall
          pcall
          args
           (
           explist
            exp
             prefixexp
              warn
           )
     stat
      functioncall
       assert
       args
        (
        explist
         exp
          prefixexp
           functioncall
            string
            .
            find
            args
             (
             explist
              exp
               prefixexp
                msg
              ,
              exp
               string
                "string expected"
             )
        )
     stat
      varlist
       var
        st
       ,
       var
        msg
      =
      explist
       exp
        prefixexp
         functioncall
          pcall
          args
           (
           explist
            exp
             prefixexp
              warn
            ,
            exp
             string
              "SHOULD NOT APPEAR"
            ,
            exp
             tableconstructor
              {
              }
           )
     stat
      functioncall
       assert
       args
        (
        explist
         exp
          prefixexp
           functioncall
            string
            .
            find
            args
             (
             explist
              exp
               prefixexp
                msg
              ,
              exp
               string
                "string expected"
             )
        )
    end
   stat
    functioncall
     print
     args
      (
      explist
       exp
        string
         '+'
      )
   stat
    functioncall
     print
     args
      (
      explist
       exp
        string
         'testing Ctrl C'
      )
   stat
    do
    block
     stat
      local
      function
      kill
      funcbody
       (
       parlist
        namelist
         pid
       )
       block
        retstat
         return
         explist
          exp
           prefixexp
            functioncall
             os
             .
             execute
             args
              (
              explist
               exp
                prefixexp
                 functioncall
                  string
                  .
                  format
                  args
                   (
                   explist
                    exp
                     string
                      'kill -INT %s 2> /dev/null'
                    ,
                    exp
                     prefixexp
                      pid
                   )
              )
       end
     stat
      local
      function
      runback
      funcbody
       (
       parlist
        namelist
         luaprg
       )
       block
        stat
         local
         attnamelist
          shellprg
          attrib
         =
         explist
          exp
           prefixexp
            functioncall
             string
             .
             format
             args
              (
              explist
               exp
                string
                 '%s -e "%s" & echo $!'
               ,
               exp
                prefixexp
                 progname
               ,
               exp
                prefixexp
                 luaprg
              )
        stat
         local
         attnamelist
          f
          attrib
         =
         explist
          exp
           prefixexp
            functioncall
             io
             .
             popen
             args
              (
              explist
               exp
                prefixexp
                 shellprg
               ,
               exp
                string
                 "r"
              )
        stat
         local
         attnamelist
          pid
          attrib
         =
         explist
          exp
           prefixexp
            functioncall
             f
             :
             read
             args
              (
              )
        stat
         functioncall
          print
          args
           (
           explist
            exp
             exp
              string
               "(if test fails now, it may leave a Lua script running in \z\n            background, pid "
             ..
             exp
              exp
               prefixexp
                pid
              ..
              exp
               string
                ")"
           )
        retstat
         return
         explist
          exp
           prefixexp
            f
          ,
          exp
           prefixexp
            pid
       end
     stat
      local
      attnamelist
       f
       attrib
       ,
       pid
       attrib
      =
      explist
       exp
        prefixexp
         functioncall
          runback
          args
           string
            [[\n    pcall(function () print(12); while true do end end); print(42)]]
     stat
      functioncall
       assert
       args
        (
        explist
         exp
          exp
           prefixexp
            functioncall
             f
             :
             read
             args
              (
              )
          ==
          exp
           string
            "12"
        )
     stat
      functioncall
       kill
       args
        (
        explist
         exp
          prefixexp
           pid
        )
     stat
      functioncall
       assert
       args
        (
        explist
         exp
          exp
           prefixexp
            functioncall
             f
             :
             read
             args
              (
              )
          ==
          exp
           string
            "42"
        )
     stat
      functioncall
       assert
       args
        (
        explist
         exp
          prefixexp
           functioncall
            f
            :
            close
            args
             (
             )
        )
     stat
      functioncall
       print
       args
        (
        explist
         exp
          string
           "done"
        )
     stat
      local
      attnamelist
       f
       attrib
       ,
       pid
       attrib
      =
      explist
       exp
        prefixexp
         functioncall
          runback
          args
           string
            [[\n    print(15); string.find(string.rep('a', 100000), '.*b')]]
     stat
      functioncall
       assert
       args
        (
        explist
         exp
          exp
           prefixexp
            functioncall
             f
             :
             read
             args
              (
              )
          ==
          exp
           string
            "15"
        )
     stat
      functioncall
       assert
       args
        (
        explist
         exp
          prefixexp
           functioncall
            os
            .
            execute
            args
             (
             explist
              exp
               string
                "sleep 1"
             )
        )
     stat
      local
      attnamelist
       n
       attrib
      =
      explist
       exp
        number
         100
     stat
      for
      i
      =
      exp
       number
        0
      ,
      exp
       number
        100
      do
      block
       stat
        if
        exp
         not
         exp
          prefixexp
           functioncall
            kill
            args
             (
             explist
              exp
               prefixexp
                pid
             )
        then
        block
         stat
          varlist
           var
            n
          =
          explist
           exp
            prefixexp
             i
         stat
          break
        end
      end
     stat
      functioncall
       assert
       args
        (
        explist
         exp
          prefixexp
           functioncall
            f
            :
            close
            args
             (
             )
        )
     stat
      functioncall
       assert
       args
        (
        explist
         exp
          exp
           prefixexp
            n
          >=
          exp
           number
            2
        )
     stat
      functioncall
       print
       args
        (
        explist
         exp
          prefixexp
           functioncall
            string
            .
            format
            args
             (
             explist
              exp
               string
                "done (with %d kills)"
              ,
              exp
               prefixexp
                n
             )
        )
    end
   stat
    functioncall
     print
     args
      (
      explist
       exp
        string
         "OK"
      )
 <EOF>
