start_
 chunk
  block
   stat
    functioncall
     print
     args
      (
      explist
       exp
        string
         'testing scanner'
      )
   stat
    local
    attnamelist
     debug
     attrib
    =
    explist
     exp
      prefixexp
       functioncall
        require
        args
         string
          "debug"
   stat
    local
    function
    dostring
    funcbody
     (
     parlist
      namelist
       x
     )
     block
      retstat
       return
       explist
        exp
         prefixexp
          functioncall
           functioncall
            assert
            args
             (
             explist
              exp
               prefixexp
                functioncall
                 load
                 args
                  (
                  explist
                   exp
                    prefixexp
                     x
                  )
              ,
              exp
               string
                ""
             )
           args
            (
            )
     end
   stat
    functioncall
     dostring
     args
      (
      explist
       exp
        string
         "x \v\f = \t\r 'a\0a' \v\f\f"
      )
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        exp
         exp
          prefixexp
           x
         ==
         exp
          string
           'a\0a'
        and
        exp
         exp
          prefixexp
           functioncall
            string
            .
            len
            args
             (
             explist
              exp
               prefixexp
                x
             )
         ==
         exp
          number
           3
      )
   stat
    varlist
     var
      prefixexp
       _G
      .
      x
    =
    explist
     exp
      nil
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        exp
         string
          '\n\"\'\\'
        ==
        exp
         string
          [[\n\n"'\]]
      )
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        prefixexp
         functioncall
          string
          .
          find
          args
           (
           explist
            exp
             string
              "\a\b\f\n\r\t\v"
            ,
            exp
             string
              "^%c%c%c%c%c%c%c$"
           )
      )
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        exp
         string
          "\09912"
        ==
        exp
         string
          'c12'
      )
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        exp
         string
          "\99ab"
        ==
        exp
         string
          'cab'
      )
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        exp
         string
          "\099"
        ==
        exp
         string
          '\99'
      )
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        exp
         string
          "\099\n"
        ==
        exp
         string
          'c\10'
      )
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        exp
         string
          '\0\0\0alo'
        ==
        exp
         exp
          string
           '\0'
         ..
         exp
          exp
           string
            '\0\0'
          ..
          exp
           string
            'alo'
      )
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        exp
         exp
          number
           010
         ..
         exp
          exp
           number
            020
          ..
          exp
           -
           exp
            number
             030
        ==
        exp
         string
          "1020-30"
      )
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        exp
         string
          "\x00\x05\x10\x1f\x3C\xfF\xe8"
        ==
        exp
         string
          "\0\5\16\31\60\255\232"
      )
   stat
    local
    function
    lexstring
    funcbody
     (
     parlist
      namelist
       x
       ,
       y
       ,
       n
     )
     block
      stat
       local
       attnamelist
        f
        attrib
       =
       explist
        exp
         prefixexp
          functioncall
           assert
           args
            (
            explist
             exp
              prefixexp
               functioncall
                load
                args
                 (
                 explist
                  exp
                   exp
                    string
                     'return '
                   ..
                   exp
                    exp
                     prefixexp
                      x
                    ..
                    exp
                     string
                      ', require"debug".getinfo(1).currentline'
                  ,
                  exp
                   string
                    ''
                 )
            )
      stat
       local
       attnamelist
        s
        attrib
        ,
        l
        attrib
       =
       explist
        exp
         prefixexp
          functioncall
           f
           args
            (
            )
      stat
       functioncall
        assert
        args
         (
         explist
          exp
           exp
            exp
             prefixexp
              s
            ==
            exp
             prefixexp
              y
           and
           exp
            exp
             prefixexp
              l
            ==
            exp
             prefixexp
              n
         )
     end
   stat
    functioncall
     lexstring
     args
      (
      explist
       exp
        string
         "'abc\\z  \n   efg'"
       ,
       exp
        string
         "abcefg"
       ,
       exp
        number
         2
      )
   stat
    functioncall
     lexstring
     args
      (
      explist
       exp
        string
         "'abc\\z  \n\n\n'"
       ,
       exp
        string
         "abc"
       ,
       exp
        number
         4
      )
   stat
    functioncall
     lexstring
     args
      (
      explist
       exp
        string
         "'\\z  \n\t\f\v\n'"
       ,
       exp
        string
         ""
       ,
       exp
        number
         3
      )
   stat
    functioncall
     lexstring
     args
      (
      explist
       exp
        string
         "[[\nalo\nalo\n\n]]"
       ,
       exp
        string
         "alo\nalo\n\n"
       ,
       exp
        number
         5
      )
   stat
    functioncall
     lexstring
     args
      (
      explist
       exp
        string
         "[[\nalo\ralo\n\n]]"
       ,
       exp
        string
         "alo\nalo\n\n"
       ,
       exp
        number
         5
      )
   stat
    functioncall
     lexstring
     args
      (
      explist
       exp
        string
         "[[\nalo\ralo\r\n]]"
       ,
       exp
        string
         "alo\nalo\n"
       ,
       exp
        number
         4
      )
   stat
    functioncall
     lexstring
     args
      (
      explist
       exp
        string
         "[[\ralo\n\ralo\r\n]]"
       ,
       exp
        string
         "alo\nalo\n"
       ,
       exp
        number
         4
      )
   stat
    functioncall
     lexstring
     args
      (
      explist
       exp
        string
         "[[alo]\n]alo]]"
       ,
       exp
        string
         "alo]\n]alo"
       ,
       exp
        number
         2
      )
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        exp
         string
          "abc\z\n        def\z\n        ghi\z\n       "
        ==
        exp
         string
          'abcdefghi'
      )
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        exp
         string
          "\u{0}\u{00000000}\x00\0"
        ==
        exp
         prefixexp
          functioncall
           string
           .
           char
           args
            (
            explist
             exp
              number
               0
             ,
             exp
              number
               0
             ,
             exp
              number
               0
             ,
             exp
              number
               0
            )
      )
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        exp
         string
          "\u{0}\u{7F}"
        ==
        exp
         string
          "\x00\x7F"
      )
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        exp
         string
          "\u{80}\u{7FF}"
        ==
        exp
         string
          "\xC2\x80\xDF\xBF"
      )
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        exp
         string
          "\u{800}\u{FFFF}"
        ==
        exp
         string
          "\xE0\xA0\x80\xEF\xBF\xBF"
      )
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        exp
         string
          "\u{10000}\u{1FFFFF}"
        ==
        exp
         string
          "\xF0\x90\x80\x80\xF7\xBF\xBF\xBF"
      )
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        exp
         string
          "\u{200000}\u{3FFFFFF}"
        ==
        exp
         string
          "\xF8\x88\x80\x80\x80\xFB\xBF\xBF\xBF\xBF"
      )
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        exp
         string
          "\u{4000000}\u{7FFFFFFF}"
        ==
        exp
         string
          "\xFC\x84\x80\x80\x80\x80\xFD\xBF\xBF\xBF\xBF\xBF"
      )
   stat
    local
    function
    lexerror
    funcbody
     (
     parlist
      namelist
       s
       ,
       err
     )
     block
      stat
       local
       attnamelist
        st
        attrib
        ,
        msg
        attrib
       =
       explist
        exp
         prefixexp
          functioncall
           load
           args
            (
            explist
             exp
              exp
               string
                'return '
              ..
              exp
               prefixexp
                s
             ,
             exp
              string
               ''
            )
      stat
       if
       exp
        exp
         prefixexp
          err
        ~=
        exp
         string
          '<eof>'
       then
       block
        stat
         varlist
          var
           err
         =
         explist
          exp
           exp
            prefixexp
             err
           ..
           exp
            string
             "'"
       end
      stat
       functioncall
        assert
        args
         (
         explist
          exp
           exp
            not
            exp
             prefixexp
              st
           and
           exp
            prefixexp
             functioncall
              string
              .
              find
              args
               (
               explist
                exp
                 prefixexp
                  msg
                ,
                exp
                 exp
                  string
                   "near .-"
                 ..
                 exp
                  prefixexp
                   err
               )
         )
     end
   stat
    functioncall
     lexerror
     args
      (
      explist
       exp
        string
         [["abc\x"]]
       ,
       exp
        string
         [[\x"]]
      )
   stat
    functioncall
     lexerror
     args
      (
      explist
       exp
        string
         [["abc\x]]
       ,
       exp
        string
         [[\x]]
      )
   stat
    functioncall
     lexerror
     args
      (
      explist
       exp
        string
         [["\x]]
       ,
       exp
        string
         [[\x]]
      )
   stat
    functioncall
     lexerror
     args
      (
      explist
       exp
        string
         [["\x5"]]
       ,
       exp
        string
         [[\x5"]]
      )
   stat
    functioncall
     lexerror
     args
      (
      explist
       exp
        string
         [["\x5]]
       ,
       exp
        string
         [[\x5]]
      )
   stat
    functioncall
     lexerror
     args
      (
      explist
       exp
        string
         [["\xr"]]
       ,
       exp
        string
         [[\xr]]
      )
   stat
    functioncall
     lexerror
     args
      (
      explist
       exp
        string
         [["\xr]]
       ,
       exp
        string
         [[\xr]]
      )
   stat
    functioncall
     lexerror
     args
      (
      explist
       exp
        string
         [["\x.]]
       ,
       exp
        string
         [[\x.]]
      )
   stat
    functioncall
     lexerror
     args
      (
      explist
       exp
        string
         [["\x8%"]]
       ,
       exp
        string
         [[\x8%%]]
      )
   stat
    functioncall
     lexerror
     args
      (
      explist
       exp
        string
         [["\xAG]]
       ,
       exp
        string
         [[\xAG]]
      )
   stat
    functioncall
     lexerror
     args
      (
      explist
       exp
        string
         [["\g"]]
       ,
       exp
        string
         [[\g]]
      )
   stat
    functioncall
     lexerror
     args
      (
      explist
       exp
        string
         [["\g]]
       ,
       exp
        string
         [[\g]]
      )
   stat
    functioncall
     lexerror
     args
      (
      explist
       exp
        string
         [["\."]]
       ,
       exp
        string
         [[\%.]]
      )
   stat
    functioncall
     lexerror
     args
      (
      explist
       exp
        string
         [["\999"]]
       ,
       exp
        string
         [[\999"]]
      )
   stat
    functioncall
     lexerror
     args
      (
      explist
       exp
        string
         [["xyz\300"]]
       ,
       exp
        string
         [[\300"]]
      )
   stat
    functioncall
     lexerror
     args
      (
      explist
       exp
        string
         [["   \256"]]
       ,
       exp
        string
         [[\256"]]
      )
   stat
    functioncall
     lexerror
     args
      (
      explist
       exp
        string
         [["abc\u{100000000}"]]
       ,
       exp
        string
         [[abc\u{100000000]]
      )
   stat
    functioncall
     lexerror
     args
      (
      explist
       exp
        string
         [["abc\u11r"]]
       ,
       exp
        string
         [[abc\u1]]
      )
   stat
    functioncall
     lexerror
     args
      (
      explist
       exp
        string
         [["abc\u"]]
       ,
       exp
        string
         [[abc\u"]]
      )
   stat
    functioncall
     lexerror
     args
      (
      explist
       exp
        string
         [["abc\u{11r"]]
       ,
       exp
        string
         [[abc\u{11r]]
      )
   stat
    functioncall
     lexerror
     args
      (
      explist
       exp
        string
         [["abc\u{11"]]
       ,
       exp
        string
         [[abc\u{11"]]
      )
   stat
    functioncall
     lexerror
     args
      (
      explist
       exp
        string
         [["abc\u{11]]
       ,
       exp
        string
         [[abc\u{11]]
      )
   stat
    functioncall
     lexerror
     args
      (
      explist
       exp
        string
         [["abc\u{r"]]
       ,
       exp
        string
         [[abc\u{r]]
      )
   stat
    functioncall
     lexerror
     args
      (
      explist
       exp
        string
         "[=[alo]]"
       ,
       exp
        string
         "<eof>"
      )
   stat
    functioncall
     lexerror
     args
      (
      explist
       exp
        string
         "[=[alo]="
       ,
       exp
        string
         "<eof>"
      )
   stat
    functioncall
     lexerror
     args
      (
      explist
       exp
        string
         "[=[alo]"
       ,
       exp
        string
         "<eof>"
      )
   stat
    functioncall
     lexerror
     args
      (
      explist
       exp
        string
         "'alo"
       ,
       exp
        string
         "<eof>"
      )
   stat
    functioncall
     lexerror
     args
      (
      explist
       exp
        string
         "'alo \\z  \n\n"
       ,
       exp
        string
         "<eof>"
      )
   stat
    functioncall
     lexerror
     args
      (
      explist
       exp
        string
         "'alo \\z"
       ,
       exp
        string
         "<eof>"
      )
   stat
    functioncall
     lexerror
     args
      (
      explist
       exp
        string
         [['alo \98]]
       ,
       exp
        string
         "<eof>"
      )
   stat
    for
    i
    =
    exp
     number
      0
    ,
    exp
     number
      255
    do
    block
     stat
      local
      attnamelist
       s
       attrib
      =
      explist
       exp
        prefixexp
         functioncall
          string
          .
          char
          args
           (
           explist
            exp
             prefixexp
              i
           )
     stat
      functioncall
       assert
       args
        (
        explist
         exp
          exp
           not
           exp
            prefixexp
             functioncall
              string
              .
              find
              args
               (
               explist
                exp
                 prefixexp
                  s
                ,
                exp
                 string
                  "[a-zA-Z_]"
               )
          ==
          exp
           not
           exp
            prefixexp
             functioncall
              load
              args
               (
               explist
                exp
                 exp
                  prefixexp
                   s
                 ..
                 exp
                  string
                   "=1"
                ,
                exp
                 string
                  ""
               )
        )
     stat
      functioncall
       assert
       args
        (
        explist
         exp
          exp
           not
           exp
            prefixexp
             functioncall
              string
              .
              find
              args
               (
               explist
                exp
                 prefixexp
                  s
                ,
                exp
                 string
                  "[a-zA-Z_0-9]"
               )
          ==
          exp
           not
           exp
            prefixexp
             functioncall
              load
              args
               (
               explist
                exp
                 exp
                  string
                   "a"
                 ..
                 exp
                  exp
                   prefixexp
                    s
                  ..
                  exp
                   string
                    "1 = 1"
                ,
                exp
                 string
                  ""
               )
        )
    end
   stat
    local
    attnamelist
     var1
     attrib
    =
    explist
     exp
      exp
       prefixexp
        functioncall
         string
         .
         rep
         args
          (
          explist
           exp
            string
             'a'
           ,
           exp
            number
             15000
          )
      ..
      exp
       string
        '1'
   stat
    local
    attnamelist
     var2
     attrib
    =
    explist
     exp
      exp
       prefixexp
        functioncall
         string
         .
         rep
         args
          (
          explist
           exp
            string
             'a'
           ,
           exp
            number
             15000
          )
      ..
      exp
       string
        '2'
   stat
    local
    attnamelist
     prog
     attrib
    =
    explist
     exp
      prefixexp
       functioncall
        string
        .
        format
        args
         (
         explist
          exp
           string
            [[\n  %s = 5\n  %s = %s + 1\n  return function () return %s - %s end\n]]
          ,
          exp
           prefixexp
            var1
          ,
          exp
           prefixexp
            var2
          ,
          exp
           prefixexp
            var1
          ,
          exp
           prefixexp
            var1
          ,
          exp
           prefixexp
            var2
         )
   stat
    local
    attnamelist
     f
     attrib
    =
    explist
     exp
      prefixexp
       functioncall
        dostring
        args
         (
         explist
          exp
           prefixexp
            prog
         )
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        exp
         exp
          exp
           prefixexp
            _G
            [
            exp
             prefixexp
              var1
            ]
          ==
          exp
           number
            5
         and
         exp
          exp
           prefixexp
            _G
            [
            exp
             prefixexp
              var2
            ]
          ==
          exp
           number
            6
        and
        exp
         exp
          prefixexp
           functioncall
            f
            args
             (
             )
         ==
         exp
          -
          exp
           number
            1
      )
   stat
    varlist
     var
      prefixexp
       _G
      [
      exp
       prefixexp
        var1
      ]
     ,
     var
      prefixexp
       _G
      [
      exp
       prefixexp
        var2
      ]
    =
    explist
     exp
      nil
   stat
    functioncall
     print
     args
      (
      explist
       exp
        string
         '+'
      )
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        exp
         string
          "\n\t"
        ==
        exp
         string
          [[\n\n\t]]
      )
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        exp
         string
          [[\n\n $debug]]
        ==
        exp
         string
          "\n $debug"
      )
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        exp
         string
          [[ [ ]]
        ~=
        exp
         string
          [[ ] ]]
      )
   stat
    local
    attnamelist
     b
     attrib
    =
    explist
     exp
      string
       "001234567890123456789012345678901234567891234567890123456789012345678901234567890012345678901234567890123456789012345678912345678901234567890123456789012345678900123456789012345678901234567890123456789123456789012345678901234567890123456789001234567890123456789012345678901234567891234567890123456789012345678901234567890012345678901234567890123456789012345678912345678901234567890123456789012345678900123456789012345678901234567890123456789123456789012345678901234567890123456789001234567890123456789012345678901234567891234567890123456789012345678901234567890012345678901234567890123456789012345678912345678901234567890123456789012345678900123456789012345678901234567890123456789123456789012345678901234567890123456789001234567890123456789012345678901234567891234567890123456789012345678901234567890012345678901234567890123456789012345678912345678901234567890123456789012345678900123456789012345678901234567890123456789123456789012345678901234567890123456789"
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        exp
         prefixexp
          functioncall
           string
           .
           len
           args
            (
            explist
             exp
              prefixexp
               b
            )
        ==
        exp
         number
          960
      )
   stat
    varlist
     var
      prog
    =
    explist
     exp
      string
       [=[\nprint('+')\n\nlocal a1 = [["this is a 'string' with several 'quotes'"]]\nlocal a2 = "'quotes'"\n\nassert(string.find(a1, a2) == 34)\nprint('+')\n\na1 = [==[temp = [[an arbitrary value]]; ]==]\nassert(load(a1))()\nassert(temp == 'an arbitrary value')\n_G.temp = nil\n-- long strings --\nlocal b = "001234567890123456789012345678901234567891234567890123456789012345678901234567890012345678901234567890123456789012345678912345678901234567890123456789012345678900123456789012345678901234567890123456789123456789012345678901234567890123456789001234567890123456789012345678901234567891234567890123456789012345678901234567890012345678901234567890123456789012345678912345678901234567890123456789012345678900123456789012345678901234567890123456789123456789012345678901234567890123456789001234567890123456789012345678901234567891234567890123456789012345678901234567890012345678901234567890123456789012345678912345678901234567890123456789012345678900123456789012345678901234567890123456789123456789012345678901234567890123456789001234567890123456789012345678901234567891234567890123456789012345678901234567890012345678901234567890123456789012345678912345678901234567890123456789012345678900123456789012345678901234567890123456789123456789012345678901234567890123456789"\nassert(string.len(b) == 960)\nprint('+')\n\nlocal a = [[00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n]]\nassert(string.len(a) == 1863)\nassert(string.sub(a, 1, 40) == string.sub(b, 1, 40))\nx = 1\n]=]
   stat
    functioncall
     print
     args
      (
      explist
       exp
        string
         '+'
      )
   stat
    varlist
     var
      prefixexp
       _G
      .
      x
    =
    explist
     exp
      nil
   stat
    functioncall
     dostring
     args
      (
      explist
       exp
        prefixexp
         prog
      )
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        prefixexp
         x
      )
   stat
    varlist
     var
      prefixexp
       _G
      .
      x
    =
    explist
     exp
      nil
   stat
    do
    block
     stat
      local
      function
      getadd
      funcbody
       (
       parlist
        namelist
         s
       )
       block
        retstat
         return
         explist
          exp
           prefixexp
            functioncall
             string
             .
             format
             args
              (
              explist
               exp
                string
                 "%p"
               ,
               exp
                prefixexp
                 s
              )
       end
     stat
      local
      attnamelist
       s1
       attrib
        <
        const
        >
      =
      explist
       exp
        string
         "01234567890123456789012345678901234567890123456789"
     stat
      local
      attnamelist
       s2
       attrib
        <
        const
        >
      =
      explist
       exp
        string
         "01234567890123456789012345678901234567890123456789"
     stat
      local
      attnamelist
       s3
       attrib
      =
      explist
       exp
        string
         "01234567890123456789012345678901234567890123456789"
     stat
      local
      function
      foo
      funcbody
       (
       parlist
       )
       block
        retstat
         return
         explist
          exp
           prefixexp
            s1
       end
     stat
      local
      function
      foo1
      funcbody
       (
       parlist
       )
       block
        retstat
         return
         explist
          exp
           prefixexp
            s3
       end
     stat
      local
      function
      foo2
      funcbody
       (
       parlist
       )
       block
        retstat
         return
         explist
          exp
           string
            "01234567890123456789012345678901234567890123456789"
       end
     stat
      local
      attnamelist
       a1
       attrib
      =
      explist
       exp
        prefixexp
         functioncall
          getadd
          args
           (
           explist
            exp
             prefixexp
              s1
           )
     stat
      functioncall
       assert
       args
        (
        explist
         exp
          exp
           prefixexp
            a1
          ==
          exp
           prefixexp
            functioncall
             getadd
             args
              (
              explist
               exp
                prefixexp
                 s2
              )
        )
     stat
      functioncall
       assert
       args
        (
        explist
         exp
          exp
           prefixexp
            a1
          ==
          exp
           prefixexp
            functioncall
             getadd
             args
              (
              explist
               exp
                prefixexp
                 functioncall
                  foo
                  args
                   (
                   )
              )
        )
     stat
      functioncall
       assert
       args
        (
        explist
         exp
          exp
           prefixexp
            a1
          ==
          exp
           prefixexp
            functioncall
             getadd
             args
              (
              explist
               exp
                prefixexp
                 functioncall
                  foo1
                  args
                   (
                   )
              )
        )
     stat
      functioncall
       assert
       args
        (
        explist
         exp
          exp
           prefixexp
            a1
          ==
          exp
           prefixexp
            functioncall
             getadd
             args
              (
              explist
               exp
                prefixexp
                 functioncall
                  foo2
                  args
                   (
                   )
              )
        )
     stat
      local
      attnamelist
       sd
       attrib
      =
      explist
       exp
        exp
         string
          "0123456789"
        ..
        exp
         string
          "0123456789012345678901234567890123456789"
     stat
      functioncall
       assert
       args
        (
        explist
         exp
          exp
           exp
            prefixexp
             sd
           ==
           exp
            prefixexp
             s1
          and
          exp
           exp
            prefixexp
             functioncall
              getadd
              args
               (
               explist
                exp
                 prefixexp
                  sd
               )
           ~=
           exp
            prefixexp
             a1
        )
    end
   stat
    varlist
     var
      prog
    =
    explist
     exp
      string
       [[\nlocal a = 1        -- a comment\nlocal b = 2\n\n\nx = [=[\nhi\n]=]\ny = "\\nhello\r\n\\n"\nreturn require"debug".getinfo(1).currentline\n]]
   stat
    for
    namelist
     _
     ,
     n
    in
    explist
     exp
      prefixexp
       functioncall
        pairs
        args
         tableconstructor
          {
          fieldlist
           field
            exp
             string
              "\n"
           fieldsep
            ,
           field
            exp
             string
              "\r"
           fieldsep
            ,
           field
            exp
             string
              "\n\r"
           fieldsep
            ,
           field
            exp
             string
              "\r\n"
          }
    do
    block
     stat
      local
      attnamelist
       prog
       attrib
       ,
       nn
       attrib
      =
      explist
       exp
        prefixexp
         functioncall
          string
          .
          gsub
          args
           (
           explist
            exp
             prefixexp
              prog
            ,
            exp
             string
              "\n"
            ,
            exp
             prefixexp
              n
           )
     stat
      functioncall
       assert
       args
        (
        explist
         exp
          exp
           prefixexp
            functioncall
             dostring
             args
              (
              explist
               exp
                prefixexp
                 prog
              )
          ==
          exp
           prefixexp
            nn
        )
     stat
      functioncall
       assert
       args
        (
        explist
         exp
          exp
           exp
            prefixexp
             _G
             .
             x
           ==
           exp
            string
             "hi\n"
          and
          exp
           exp
            prefixexp
             _G
             .
             y
           ==
           exp
            string
             "\nhello\r\n\n"
        )
    end
   stat
    varlist
     var
      prefixexp
       _G
      .
      x
     ,
     var
      prefixexp
       _G
      .
      y
    =
    explist
     exp
      nil
   stat
    local
    attnamelist
     a
     attrib
    =
    explist
     exp
      string
       [==[]=]==]
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        exp
         prefixexp
          a
        ==
        exp
         string
          "]="
      )
   stat
    varlist
     var
      a
    =
    explist
     exp
      string
       [==[[===[[=[]]=][====[]]===]===]==]
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        exp
         prefixexp
          a
        ==
        exp
         string
          "[===[[=[]]=][====[]]===]==="
      )
   stat
    varlist
     var
      a
    =
    explist
     exp
      string
       [====[[===[[=[]]=][====[]]===]===]====]
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        exp
         prefixexp
          a
        ==
        exp
         string
          "[===[[=[]]=][====[]]===]==="
      )
   stat
    varlist
     var
      a
    =
    explist
     exp
      string
       [=[]]]]]]]]]=]
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        exp
         prefixexp
          a
        ==
        exp
         string
          "]]]]]]]]"
      )
   stat
    local
    attnamelist
     x
     attrib
    =
    explist
     exp
      tableconstructor
       {
       fieldlist
        field
         exp
          string
           "="
        fieldsep
         ,
        field
         exp
          string
           "["
        fieldsep
         ,
        field
         exp
          string
           "]"
        fieldsep
         ,
        field
         exp
          string
           "\n"
       }
   stat
    local
    attnamelist
     len
     attrib
    =
    explist
     exp
      number
       4
   stat
    local
    function
    gen
    funcbody
     (
     parlist
      namelist
       c
       ,
       n
     )
     block
      stat
       if
       exp
        exp
         prefixexp
          n
        ==
        exp
         number
          0
       then
       block
        stat
         functioncall
          coroutine
          .
          yield
          args
           (
           explist
            exp
             prefixexp
              c
           )
       else
       block
        stat
         for
         namelist
          _
          ,
          a
         in
         explist
          exp
           prefixexp
            functioncall
             pairs
             args
              (
              explist
               exp
                prefixexp
                 x
              )
         do
         block
          stat
           functioncall
            gen
            args
             (
             explist
              exp
               exp
                prefixexp
                 c
               ..
               exp
                prefixexp
                 a
              ,
              exp
               exp
                prefixexp
                 n
               -
               exp
                number
                 1
             )
         end
       end
     end
   stat
    for
    namelist
     s
    in
    explist
     exp
      prefixexp
       functioncall
        coroutine
        .
        wrap
        args
         (
         explist
          exp
           functiondef
            function
            funcbody
             (
             parlist
             )
             block
              stat
               functioncall
                gen
                args
                 (
                 explist
                  exp
                   string
                    ""
                  ,
                  exp
                   prefixexp
                    len
                 )
             end
         )
    do
    block
     stat
      functioncall
       assert
       args
        (
        explist
         exp
          exp
           prefixexp
            s
          ==
          exp
           prefixexp
            functioncall
             functioncall
              load
              args
               (
               explist
                exp
                 exp
                  string
                   "return [====[\n"
                 ..
                 exp
                  exp
                   prefixexp
                    s
                  ..
                  exp
                   string
                    "]====]"
                ,
                exp
                 string
                  ""
               )
             args
              (
              )
        )
    end
   stat
    if
    exp
     exp
      prefixexp
       functioncall
        os
        .
        setlocale
        args
         (
         explist
          exp
           string
            "pt_BR"
         )
     or
     exp
      prefixexp
       functioncall
        os
        .
        setlocale
        args
         (
         explist
          exp
           string
            "ptb"
         )
    then
    block
     stat
      functioncall
       assert
       args
        (
        explist
         exp
          exp
           exp
            prefixexp
             functioncall
              tonumber
              args
               (
               explist
                exp
                 string
                  "3,4"
               )
           ==
           exp
            number
             3.4
          and
          exp
           exp
            prefixexp
             functioncall
              tonumber
              args
               string
                "3.4"
           ==
           exp
            number
             3.4
        )
     stat
      functioncall
       assert
       args
        (
        explist
         exp
          exp
           prefixexp
            functioncall
             tonumber
             args
              (
              explist
               exp
                string
                 "  -.4  "
              )
          ==
          exp
           -
           exp
            number
             0.4
        )
     stat
      functioncall
       assert
       args
        (
        explist
         exp
          exp
           prefixexp
            functioncall
             tonumber
             args
              (
              explist
               exp
                string
                 "  +0x.41  "
              )
          ==
          exp
           number
            0X0.41
        )
     stat
      functioncall
       assert
       args
        (
        explist
         exp
          not
          exp
           prefixexp
            functioncall
             load
             args
              (
              explist
               exp
                string
                 "a = (3,4)"
              )
        )
     stat
      functioncall
       assert
       args
        (
        explist
         exp
          exp
           prefixexp
            functioncall
             functioncall
              assert
              args
               (
               explist
                exp
                 prefixexp
                  functioncall
                   load
                   args
                    (
                    explist
                     exp
                      string
                       "return 3.4"
                    )
               )
             args
              (
              )
          ==
          exp
           number
            3.4
        )
     stat
      functioncall
       assert
       args
        (
        explist
         exp
          exp
           prefixexp
            functioncall
             functioncall
              assert
              args
               (
               explist
                exp
                 prefixexp
                  functioncall
                   load
                   args
                    (
                    explist
                     exp
                      string
                       "return .4,3"
                    )
               )
             args
              (
              )
          ==
          exp
           number
            .4
        )
     stat
      functioncall
       assert
       args
        (
        explist
         exp
          exp
           prefixexp
            functioncall
             functioncall
              assert
              args
               (
               explist
                exp
                 prefixexp
                  functioncall
                   load
                   args
                    (
                    explist
                     exp
                      string
                       "return 4."
                    )
               )
             args
              (
              )
          ==
          exp
           number
            4.
        )
     stat
      functioncall
       assert
       args
        (
        explist
         exp
          exp
           prefixexp
            functioncall
             functioncall
              assert
              args
               (
               explist
                exp
                 prefixexp
                  functioncall
                   load
                   args
                    (
                    explist
                     exp
                      string
                       "return 4.+.5"
                    )
               )
             args
              (
              )
          ==
          exp
           number
            4.5
        )
     stat
      functioncall
       assert
       args
        (
        explist
         exp
          exp
           exp
            exp
             string
              " 0x.1 "
            +
            exp
             string
              " 0x,1"
           +
           exp
            string
             "-0X.1\t"
          ==
          exp
           number
            0x0.1
        )
     stat
      functioncall
       assert
       args
        (
        explist
         exp
          exp
           not
           exp
            prefixexp
             functioncall
              tonumber
              args
               string
                "inf"
          and
          exp
           not
           exp
            prefixexp
             functioncall
              tonumber
              args
               string
                "NAN"
        )
     stat
      functioncall
       assert
       args
        (
        explist
         exp
          exp
           prefixexp
            functioncall
             functioncall
              assert
              args
               (
               explist
                exp
                 prefixexp
                  functioncall
                   load
                   args
                    (
                    explist
                     exp
                      prefixexp
                       functioncall
                        string
                        .
                        format
                        args
                         (
                         explist
                          exp
                           string
                            "return %q"
                          ,
                          exp
                           number
                            4.51
                         )
                    )
               )
             args
              (
              )
          ==
          exp
           number
            4.51
        )
     stat
      local
      attnamelist
       a
       attrib
       ,
       b
       attrib
      =
      explist
       exp
        prefixexp
         functioncall
          load
          args
           (
           explist
            exp
             string
              "return 4.5."
           )
     stat
      functioncall
       assert
       args
        (
        explist
         exp
          prefixexp
           functioncall
            string
            .
            find
            args
             (
             explist
              exp
               prefixexp
                b
              ,
              exp
               string
                "'4%.5%.'"
             )
        )
     stat
      functioncall
       assert
       args
        (
        explist
         exp
          prefixexp
           functioncall
            os
            .
            setlocale
            args
             (
             explist
              exp
               string
                "C"
             )
        )
    else
    block
     stat
      functioncall
       (
       exp
        exp
         prefixexp
          Message
        or
        exp
         prefixexp
          print
       )
       args
        (
        explist
         exp
          string
           '\n >>> pt_BR locale not available: skipping decimal point tests <<<\n'
        )
    end
   stat
    local
    attnamelist
     s
     attrib
    =
    explist
     exp
      string
       "a string with \r and \n and \r\n and \n\r"
   stat
    local
    attnamelist
     c
     attrib
    =
    explist
     exp
      prefixexp
       functioncall
        string
        .
        format
        args
         (
         explist
          exp
           string
            "return %q"
          ,
          exp
           prefixexp
            s
         )
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        exp
         prefixexp
          functioncall
           functioncall
            assert
            args
             (
             explist
              exp
               prefixexp
                functioncall
                 load
                 args
                  (
                  explist
                   exp
                    prefixexp
                     c
                  )
             )
           args
            (
            )
        ==
        exp
         prefixexp
          s
      )
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        not
        exp
         prefixexp
          functioncall
           load
           args
            string
             "a = 'non-ending string"
      )
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        not
        exp
         prefixexp
          functioncall
           load
           args
            string
             "a = 'non-ending string\n'"
      )
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        not
        exp
         prefixexp
          functioncall
           load
           args
            string
             "a = '\\345'"
      )
   stat
    functioncall
     assert
     args
      (
      explist
       exp
        not
        exp
         prefixexp
          functioncall
           load
           args
            string
             "a = [=x]"
      )
   stat
    local
    function
    malformednum
    funcbody
     (
     parlist
      namelist
       n
       ,
       exp
     )
     block
      stat
       local
       attnamelist
        s
        attrib
        ,
        msg
        attrib
       =
       explist
        exp
         prefixexp
          functioncall
           load
           args
            (
            explist
             exp
              exp
               string
                "return "
              ..
              exp
               prefixexp
                n
            )
      stat
       functioncall
        assert
        args
         (
         explist
          exp
           exp
            not
            exp
             prefixexp
              s
           and
           exp
            prefixexp
             functioncall
              string
              .
              find
              args
               (
               explist
                exp
                 prefixexp
                  msg
                ,
                exp
                 prefixexp
                  exp
               )
         )
     end
   stat
    functioncall
     malformednum
     args
      (
      explist
       exp
        string
         "0xe-"
       ,
       exp
        string
         "near <eof>"
      )
   stat
    functioncall
     malformednum
     args
      (
      explist
       exp
        string
         "0xep-p"
       ,
       exp
        string
         "malformed number"
      )
   stat
    functioncall
     malformednum
     args
      (
      explist
       exp
        string
         "1print()"
       ,
       exp
        string
         "malformed number"
      )
   stat
    functioncall
     print
     args
      (
      explist
       exp
        string
         'OK'
      )
 <EOF>
