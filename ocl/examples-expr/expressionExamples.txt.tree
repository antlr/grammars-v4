(expressions (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (setExpression Map{ (expressionList (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression "1"))) |-> (factorExpression (factor2Expression (basicExpression "a"))))))) , (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression "2"))) |-> (factorExpression (factor2Expression (basicExpression "b")))))))) }))))))) ; (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (setExpression OrderedSet{ (expressionList (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression 1))))))) , (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression 2))))))) , (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression 4)))))))) }))))))) ; (expression (lambdaExpression lambda x : (type double) in (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression x)) * (factorExpression (factor2Expression (basicExpression x)) * (factorExpression (factor2Expression (basicExpression x))))))))))) ; (expression (conditionalExpression if (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (factor2Expression (basicExpression s)) ->hasMatch ( (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression "[a-z]+"))))))) ))))))) then (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (factor2Expression (basicExpression s)) ->firstMatch ( (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression "[a-z]+"))))))) ))))))) else (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression null))))))) endif)) ; (expression (conditionalExpression if (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (factor2Expression (basicExpression s)) ->hasMatch ( (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression "[a-z]+"))))))) ))))))) then (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (factor2Expression (basicExpression s)) ->firstMatch ( (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression "[a-z]+"))))))) ))))))) else (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression s))))))) endif)) ; (expression (conditionalExpression if (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression (basicExpression (basicExpression s) . hasMatch) ( (expressionList (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression r)))))))) )))))))) then (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression (basicExpression (basicExpression s) . firstMatch) ( (expressionList (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression r)))))))) )))))))) else (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression s))))))) endif)) ; (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (factor2Expression (factor2Expression (factor2Expression (basicExpression s)) ->select ( (identifier x) | (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression x)))) >= (additiveExpression (factorExpression (factor2Expression (basicExpression 0))))))) )) ->collect ( (identifier y) | (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression y)) * (factorExpression (factor2Expression (basicExpression y)))))))) )) ->sum())))))) ; (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (factor2Expression (basicExpression s)) ->iterate ( (identifier x) ; (identifier acc) = (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (setExpression Set{ }))))))) | (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (factor2Expression (basicExpression acc)) ->including ( (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression x)) * (factorExpression (factor2Expression (basicExpression x)))))))) ))))))) ))))))) ; (expression (logicalExpression (equalityExpression (additiveExpression (additiveExpression (additiveExpression (factorExpression (factor2Expression (basicExpression 2)) * (factorExpression (factor2Expression (basicExpression x))))) - (factorExpression (factor2Expression (basicExpression 3)) * (factorExpression (factor2Expression (basicExpression y))))) + (additiveExpression (factorExpression (factor2Expression (basicExpression 4)) * (factorExpression (factor2Expression (basicExpression z))))))))) ; <EOF>)