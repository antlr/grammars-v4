(specification package app5 { (classifier (classDefinition class Bond { (classBody (classBodyElement (stereotype stereotype persistent ;)) (classBodyElement (attributeDefinition attribute id identity : (type String) ;)) (classBodyElement (attributeDefinition attribute term : (type double) ;)) (classBodyElement (attributeDefinition attribute coupon : (type double) ;)) (classBodyElement (attributeDefinition attribute price : (type double) ;)) (classBodyElement (attributeDefinition attribute frequency : (type int) ;)) (classBodyElement (attributeDefinition attribute yield derived : (type double) ;)) (classBodyElement (attributeDefinition attribute duration derived : (type double) ;)) (classBodyElement (operationDefinition operation discount ( (parameterDeclarations (parameterDeclaration amount : (type double)) , (parameterDeclaration r : (type double)) , (parameterDeclaration time : (type double))) ) : (type double) pre: (expression (logicalExpression (logicalExpression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression r)))) > (additiveExpression (factorExpression (factor2Expression - (factor2Expression (basicExpression 1))))))) & (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression r)))) <= (additiveExpression (factorExpression (factor2Expression (basicExpression 1))))))) & (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression time)))) >= (additiveExpression (factorExpression (factor2Expression (basicExpression 0)))))))) post: (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression true))))))) activity: (statement (basicExpression result) := (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression amount)) / (factorExpression (factor2Expression (basicExpression ( (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (factor2Expression (basicExpression ( (expression (logicalExpression (equalityExpression (additiveExpression (additiveExpression (factorExpression (factor2Expression (basicExpression 1)))) + (additiveExpression (factorExpression (factor2Expression (basicExpression r)))))))) ))) ->pow ( (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression time))))))) ))))))) )))))))))) ;)) (classBodyElement (operationDefinition operation value ( (parameterDeclarations (parameterDeclaration r : (type double))) ) : (type double) pre: (expression (logicalExpression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression r)))) > (additiveExpression (factorExpression (factor2Expression - (factor2Expression (basicExpression 1))))))) & (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression r)))) <= (additiveExpression (factorExpression (factor2Expression (basicExpression 1)))))))) post: (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression true))))))) activity: (statement (statement (statement (statement (statement (statement (statement (statement (statement var upper : (type int)) ; (statement (basicExpression upper) := (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (factor2Expression (factor2Expression (basicExpression ( (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression term)) * (factorExpression (factor2Expression (basicExpression frequency)))))))) ))) ->floor()) ->oclAsType ( (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression int))))))) ))))))))) ; (statement var c : (type double))) ; (statement (basicExpression c) := (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression coupon)) / (factorExpression (factor2Expression (basicExpression frequency)))))))))) ; (statement var period : (type double))) ; (statement (basicExpression period) := (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression 1.0)) / (factorExpression (factor2Expression (basicExpression frequency)))))))))) ; (statement (basicExpression result) := (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression (basicExpression (basicExpression self) . discount) ( (expressionList (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression 100))))))) , (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression r))))))) , (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression term)))))))) )))))))))) ; (statement for i : (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression 1))) .. (factorExpression (factor2Expression (basicExpression upper))))))) do (statement (basicExpression result) := (expression (logicalExpression (equalityExpression (additiveExpression (additiveExpression (factorExpression (factor2Expression (basicExpression result)))) + (additiveExpression (factorExpression (factor2Expression (basicExpression (basicExpression (basicExpression self) . discount) ( (expressionList (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression c))))))) , (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression r))))))) , (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression i)) * (factorExpression (factor2Expression (basicExpression period))))))))) )))))))))))) ; (statement return (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression result))))))))) ;)) (classBodyElement (operationDefinition operation timeDiscount ( (parameterDeclarations (parameterDeclaration amount : (type double)) , (parameterDeclaration r : (type double)) , (parameterDeclaration time : (type double))) ) : (type double) pre: (expression (logicalExpression (logicalExpression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression r)))) > (additiveExpression (factorExpression (factor2Expression - (factor2Expression (basicExpression 1))))))) & (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression r)))) <= (additiveExpression (factorExpression (factor2Expression (basicExpression 1))))))) & (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression time)))) >= (additiveExpression (factorExpression (factor2Expression (basicExpression 0)))))))) post: (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression true))))))) activity: (statement (basicExpression result) := (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression ( (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression amount)) * (factorExpression (factor2Expression (basicExpression time)))))))) ))) / (factorExpression (factor2Expression (basicExpression ( (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (factor2Expression (basicExpression ( (expression (logicalExpression (equalityExpression (additiveExpression (additiveExpression (factorExpression (factor2Expression (basicExpression 1)))) + (additiveExpression (factorExpression (factor2Expression (basicExpression r)))))))) ))) ->pow ( (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression time))))))) ))))))) )))))))))) ;)) (classBodyElement (operationDefinition operation macaulayDuration ( (parameterDeclarations (parameterDeclaration r : (type double))) ) : (type double) pre: (expression (logicalExpression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression r)))) > (additiveExpression (factorExpression (factor2Expression - (factor2Expression (basicExpression 1))))))) & (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression r)))) <= (additiveExpression (factorExpression (factor2Expression (basicExpression 1)))))))) post: (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression true))))))) activity: (statement (statement (statement (statement (statement (statement (statement (statement (statement var upper : (type int)) ; (statement (basicExpression upper) := (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (factor2Expression (factor2Expression (basicExpression ( (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression term)) * (factorExpression (factor2Expression (basicExpression frequency)))))))) ))) ->floor()) ->oclAsType ( (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression int))))))) ))))))))) ; (statement var c : (type double))) ; (statement (basicExpression c) := (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression coupon)) / (factorExpression (factor2Expression (basicExpression frequency)))))))))) ; (statement var period : (type double))) ; (statement (basicExpression period) := (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression 1.0)) / (factorExpression (factor2Expression (basicExpression frequency)))))))))) ; (statement (basicExpression result) := (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression (basicExpression (basicExpression self) . timeDiscount) ( (expressionList (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression 100))))))) , (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression r))))))) , (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression term)))))))) )))))))))) ; (statement for i : (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression 1))) .. (factorExpression (factor2Expression (basicExpression upper))))))) do (statement (basicExpression result) := (expression (logicalExpression (equalityExpression (additiveExpression (additiveExpression (factorExpression (factor2Expression (basicExpression result)))) + (additiveExpression (factorExpression (factor2Expression (basicExpression (basicExpression (basicExpression self) . timeDiscount) ( (expressionList (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression c))))))) , (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression r))))))) , (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression i)) * (factorExpression (factor2Expression (basicExpression period))))))))) )))))))))))) ; (statement return (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression result)) / (factorExpression (factor2Expression (basicExpression (basicExpression (basicExpression self) . value) ( (expressionList (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression r)))))))) ))))))))))) ;)) (classBodyElement (operationDefinition operation bisection ( (parameterDeclarations (parameterDeclaration r : (type double)) , (parameterDeclaration rl : (type double)) , (parameterDeclaration ru : (type double))) ) : (type double) pre: (expression (logicalExpression (logicalExpression (logicalExpression (logicalExpression (logicalExpression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression r)))) > (additiveExpression (factorExpression (factor2Expression - (factor2Expression (basicExpression 1))))))) & (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression rl)))) > (additiveExpression (factorExpression (factor2Expression - (factor2Expression (basicExpression 1)))))))) & (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression ru)))) > (additiveExpression (factorExpression (factor2Expression - (factor2Expression (basicExpression 1)))))))) & (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression ru)))) <= (additiveExpression (factorExpression (factor2Expression (basicExpression 1))))))) & (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression rl)))) <= (additiveExpression (factorExpression (factor2Expression (basicExpression 1))))))) & (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression r)))) <= (additiveExpression (factorExpression (factor2Expression (basicExpression 1)))))))) post: (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression true))))))) activity: (statement (statement (statement var v : (type double)) ; (statement (basicExpression v) := (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression (basicExpression value) ( (expressionList (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression r)))))))) )))))))))) ; (statement if (expression (logicalExpression (equalityExpression (additiveExpression (additiveExpression (factorExpression (factor2Expression (basicExpression ru)))) - (factorExpression (factor2Expression (basicExpression rl)))) < (additiveExpression (factorExpression (factor2Expression (basicExpression 0.001))))))) then (statement return (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression r)))))))) else (statement if (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression v)))) > (additiveExpression (factorExpression (factor2Expression (basicExpression price))))))) then (statement return (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression (basicExpression (basicExpression self) . bisection) ( (expressionList (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression ( (expression (logicalExpression (equalityExpression (additiveExpression (additiveExpression (factorExpression (factor2Expression (basicExpression ru)))) + (additiveExpression (factorExpression (factor2Expression (basicExpression r)))))))) ))) / (factorExpression (factor2Expression (basicExpression 2)))))))) , (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression r))))))) , (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression ru)))))))) ))))))))) else (statement return (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression (basicExpression (basicExpression self) . bisection) ( (expressionList (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression ( (expression (logicalExpression (equalityExpression (additiveExpression (additiveExpression (factorExpression (factor2Expression (basicExpression r)))) + (additiveExpression (factorExpression (factor2Expression (basicExpression rl)))))))) ))) / (factorExpression (factor2Expression (basicExpression 2)))))))) , (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression rl))))))) , (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression r)))))))) )))))))))))) ;))) })) (classifier (usecaseDefinition usecase findDuration ( (parameterDeclarations (parameterDeclaration bondId : (type String))) ) : (type String) { (usecaseBody (usecaseBodyElement (stereotype stereotype application ;)) (usecaseBodyElement activity: (statement (statement (statement (statement (statement var bond : (type Bond)) ; (statement (basicExpression bond) := (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression (basicExpression Bond) [ (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression bondId))))))) ]))))))))) ; (statement (basicExpression (basicExpression bond) . duration) := (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression (basicExpression (basicExpression bond) . macaulayDuration) ( (expressionList (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression (basicExpression bond) . yield)))))))) )))))))))) ; (statement call (basicExpression (basicExpression persistBond) ( (expressionList (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression bond)))))))) )))) ; (statement (basicExpression result) := (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression ( (expression (logicalExpression (equalityExpression (additiveExpression (additiveExpression (factorExpression (factor2Expression (basicExpression "Duration is: ")))) + (additiveExpression (factorExpression (factor2Expression (basicExpression (basicExpression bond) . duration)))))))) )))))))))) ;)) })) (classifier (usecaseDefinition usecase findYield ( (parameterDeclarations (parameterDeclaration bondId : (type String))) ) : (type String) { (usecaseBody (usecaseBodyElement extendedBy findDuration ;) (usecaseBodyElement (stereotype stereotype application ;)) (usecaseBodyElement activity: (statement (statement (statement (statement (statement var bond : (type Bond)) ; (statement (basicExpression bond) := (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression (basicExpression Bond) [ (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression bondId))))))) ]))))))))) ; (statement (basicExpression (basicExpression bond) . yield) := (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression (basicExpression (basicExpression bond) . bisection) ( (expressionList (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression 0.25))))))) , (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression - (factor2Expression (basicExpression 0.5)))))))) , (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression 1)))))))) )))))))))) ; (statement call (basicExpression (basicExpression persistBond) ( (expressionList (expression (logicalExpression (equalityExpression (additiveExpression (factorExpression (factor2Expression (basicExpression bond)))))))) )))) ; (statement (basicExpression result) := (expression (logicalExpression (equalityExpression (additiveExpression (additiveExpression (factorExpression (factor2Expression (basicExpression "Yield is: ")))) + (additiveExpression (factorExpression (factor2Expression (basicExpression (basicExpression bond) . yield)))))))))) ;)) })) } <EOF>)