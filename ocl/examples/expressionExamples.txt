Map{ "1" |-> "a", "2" |-> "b" }

OrderedSet{ 1, 2, 4 }

lambda x : double in x*x*x


if s->hasMatch("[a-z]+") then s->firstMatch("[a-z]+") else null endif

if s->hasMatch("[a-z]+") then s->firstMatch("[a-z]+") else s endif

/* dot notation can be used instead, if you prefer: */ 

if s.hasMatch(r) then s.firstMatch(r) else s endif


s->select( x | x >= 0)->collect( y | y*y )->sum()

s->iterate( x; acc = Set{} | acc->including(x*x) )

