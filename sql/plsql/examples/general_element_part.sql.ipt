sql_script
 unit_statement
  create_package
   CREATE
   OR
   REPLACE
   PACKAGE
   package_name
    identifier
     id_expression
      regular_id
       TEST_PKG_LXD
   AS
   package_obj_spec
    type_declaration
     TYPE
     identifier
      id_expression
       regular_id
        type_array
     IS
     varray_type_def
      ARRAY
      (
      expression
       logical_expression
        unary_logical_expression
         multiset_expression
          relational_expression
           compound_expression
            concatenation
             model_expression
              unary_expression
               atom
                constant
                 numeric
                  5
      )
      OF
      type_spec
       datatype
        native_datatype_element
         PLS_INTEGER
     ;
   package_obj_spec
    function_spec
     FUNCTION
     identifier
      id_expression
       regular_id
        return_array_test
     RETURN
     type_spec
      type_name
       id_expression
        regular_id
         type_array
     ;
   package_obj_spec
    procedure_spec
     PROCEDURE
     identifier
      id_expression
       regular_id
        get_array_test
     ;
   END
   package_name
    identifier
     id_expression
      regular_id
       TEST_PKG_LXD
 ;
 unit_statement
  create_package_body
   CREATE
   OR
   REPLACE
   PACKAGE
   BODY
   package_name
    identifier
     id_expression
      regular_id
       TEST_PKG_LXD
   AS
   package_obj_body
    function_body
     FUNCTION
     identifier
      id_expression
       regular_id
        return_array_test
     RETURN
     type_spec
      type_name
       id_expression
        regular_id
         type_array
     IS
     seq_of_declare_specs
      declare_spec
       variable_declaration
        identifier
         id_expression
          regular_id
           test_array
        type_spec
         type_name
          id_expression
           regular_id
            type_array
        ;
     body
      BEGIN
      seq_of_statements
       statement
        assignment_statement
         general_element
          general_element_part
           id_expression
            regular_id
             test_array
         :=
         expression
          logical_expression
           unary_logical_expression
            multiset_expression
             relational_expression
              compound_expression
               concatenation
                model_expression
                 unary_expression
                  atom
                   general_element
                    general_element_part
                     id_expression
                      regular_id
                       type_array
                     function_argument
                      (
                      argument
                       expression
                        logical_expression
                         unary_logical_expression
                          multiset_expression
                           relational_expression
                            compound_expression
                             concatenation
                              model_expression
                               unary_expression
                                atom
                                 constant
                                  numeric
                                   1
                      ,
                      argument
                       expression
                        logical_expression
                         unary_logical_expression
                          multiset_expression
                           relational_expression
                            compound_expression
                             concatenation
                              model_expression
                               unary_expression
                                atom
                                 constant
                                  numeric
                                   2
                      ,
                      argument
                       expression
                        logical_expression
                         unary_logical_expression
                          multiset_expression
                           relational_expression
                            compound_expression
                             concatenation
                              model_expression
                               unary_expression
                                atom
                                 constant
                                  numeric
                                   3
                      ,
                      argument
                       expression
                        logical_expression
                         unary_logical_expression
                          multiset_expression
                           relational_expression
                            compound_expression
                             concatenation
                              model_expression
                               unary_expression
                                atom
                                 constant
                                  numeric
                                   4
                      ,
                      argument
                       expression
                        logical_expression
                         unary_logical_expression
                          multiset_expression
                           relational_expression
                            compound_expression
                             concatenation
                              model_expression
                               unary_expression
                                atom
                                 constant
                                  numeric
                                   5
                      )
       ;
       statement
        return_statement
         return
         expression
          logical_expression
           unary_logical_expression
            multiset_expression
             relational_expression
              compound_expression
               concatenation
                model_expression
                 unary_expression
                  atom
                   general_element
                    general_element_part
                     id_expression
                      regular_id
                       test_array
       ;
      END
      label_name
       id_expression
        regular_id
         return_array_test
     ;
   package_obj_body
    procedure_body
     PROCEDURE
     identifier
      id_expression
       regular_id
        get_array_test
     IS
     seq_of_declare_specs
      declare_spec
       variable_declaration
        identifier
         id_expression
          regular_id
           non_reserved_keywords_pre12c
            value
        type_spec
         datatype
          native_datatype_element
           PLS_INTEGER
        ;
     body
      BEGIN
      seq_of_statements
       statement
        assignment_statement
         general_element
          general_element_part
           id_expression
            regular_id
             non_reserved_keywords_pre12c
              value
         :=
         expression
          logical_expression
           unary_logical_expression
            multiset_expression
             relational_expression
              compound_expression
               concatenation
                model_expression
                 unary_expression
                  atom
                   general_element
                    general_element_part
                     id_expression
                      regular_id
                       return_array_test
                     function_argument
                      (
                      )
                     function_argument
                      (
                      argument
                       expression
                        logical_expression
                         unary_logical_expression
                          multiset_expression
                           relational_expression
                            compound_expression
                             concatenation
                              model_expression
                               unary_expression
                                atom
                                 constant
                                  numeric
                                   3
                      )
       ;
       statement
        call_statement
         routine_name
          identifier
           id_expression
            regular_id
             dbms_output
          .
          id_expression
           regular_id
            put_line
         function_argument
          (
          argument
           expression
            logical_expression
             unary_logical_expression
              multiset_expression
               relational_expression
                compound_expression
                 concatenation
                  concatenation
                   model_expression
                    unary_expression
                     atom
                      constant
                       quoted_string
                        'value='
                  |
                  |
                  concatenation
                   model_expression
                    unary_expression
                     atom
                      general_element
                       general_element_part
                        id_expression
                         regular_id
                          non_reserved_keywords_pre12c
                           value
          )
       ;
      END
      label_name
       id_expression
        regular_id
         get_array_test
     ;
   END
   package_name
    identifier
     id_expression
      regular_id
       TEST_PKG_LXD
 ;
 <EOF>
