root
 sqlStatements
  sqlStatement
   utilityStatement
    diagnosticsStatement
     GET
     DIAGNOSTICS
     variableClause
      @p1
     =
     NUMBER
     ,
     variableClause
      @p2
     =
     ROW_COUNT
  ;
  sqlStatement
   utilityStatement
    diagnosticsStatement
     GET
     DIAGNOSTICS
     CONDITION
     decimalLiteral
      1
     variableClause
      @p1
     =
     diagnosticsConditionInformationName
      MYSQL_ERRNO
  ;
  sqlStatement
   utilityStatement
    diagnosticsStatement
     GET
     DIAGNOSTICS
     CONDITION
     decimalLiteral
      1
     variableClause
      @p1
     =
     diagnosticsConditionInformationName
      RETURNED_SQLSTATE
     ,
     variableClause
      @p2
     =
     diagnosticsConditionInformationName
      MESSAGE_TEXT
  ;
  sqlStatement
   utilityStatement
    diagnosticsStatement
     GET
     DIAGNOSTICS
     CONDITION
     decimalLiteral
      1
     variableClause
      @p3
     =
     diagnosticsConditionInformationName
      RETURNED_SQLSTATE
     ,
     variableClause
      @p4
     =
     diagnosticsConditionInformationName
      MESSAGE_TEXT
  ;
  sqlStatement
   utilityStatement
    diagnosticsStatement
     GET
     DIAGNOSTICS
     CONDITION
     decimalLiteral
      1
     variableClause
      @p5
     =
     diagnosticsConditionInformationName
      SCHEMA_NAME
     ,
     variableClause
      @p6
     =
     diagnosticsConditionInformationName
      TABLE_NAME
  ;
  sqlStatement
   utilityStatement
    diagnosticsStatement
     GET
     DIAGNOSTICS
     CONDITION
     decimalLiteral
      1
     variableClause
      @errno
     =
     diagnosticsConditionInformationName
      MYSQL_ERRNO
  ;
  sqlStatement
   utilityStatement
    diagnosticsStatement
     GET
     DIAGNOSTICS
     variableClause
      @cno
     =
     NUMBER
  ;
  sqlStatement
   utilityStatement
    diagnosticsStatement
     GET
     DIAGNOSTICS
     CONDITION
     variableClause
      @cno
     variableClause
      @errno
     =
     diagnosticsConditionInformationName
      MYSQL_ERRNO
  ;
  sqlStatement
   utilityStatement
    diagnosticsStatement
     GET
     CURRENT
     DIAGNOSTICS
     CONDITION
     decimalLiteral
      1
     variableClause
      uid
       simpleId
        errno
     =
     diagnosticsConditionInformationName
      MYSQL_ERRNO
     ,
     variableClause
      uid
       simpleId
        msg
     =
     diagnosticsConditionInformationName
      MESSAGE_TEXT
  ;
  sqlStatement
   utilityStatement
    diagnosticsStatement
     GET
     STACKED
     DIAGNOSTICS
     CONDITION
     decimalLiteral
      1
     variableClause
      uid
       simpleId
        errno
     =
     diagnosticsConditionInformationName
      MYSQL_ERRNO
     ,
     variableClause
      uid
       simpleId
        msg
     =
     diagnosticsConditionInformationName
      MESSAGE_TEXT
  ;
  sqlStatement
   utilityStatement
    diagnosticsStatement
     GET
     CURRENT
     DIAGNOSTICS
     variableClause
      uid
       simpleId
        errcount
     =
     NUMBER
  ;
  sqlStatement
   administrationStatement
    createUser
     CREATE
     USER
     userAuthOption
      userName
       simpleUserName
        'test_crm_debezium'
       hostName
        @'%'
      IDENTIFIED
      WITH
      authenticationRule
       authPlugin
        uid
         'mysql_native_password'
       AS
       '*6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9'
     userPasswordOption
      PASSWORD
      EXPIRE
      NEVER
     COMMENT
     '-'
  ;
  sqlStatement
   administrationStatement
    createUser
     CREATE
     USER
     userAuthOption
      userName
       simpleUserName
        'jim'
       hostName
        @'localhost'
     ATTRIBUTE
     '{"fname": "James", "lname": "Scott", "phone": "123-456-7890"}'
  ;
  sqlStatement
   administrationStatement
    createUser
     CREATE
     USER
     userAuthOption
      userName
       simpleUserName
        'jim'
       hostName
        @'localhost'
      IDENTIFIED
      BY
      '123'
  ;
  sqlStatement
   administrationStatement
    createUser
     CREATE
     USER
     userAuthOption
      userName
       simpleUserName
        'jim'
       hostName
        @localhost
      IDENTIFIED
      BY
      '123'
  ;
  sqlStatement
   ddlStatement
    createTable
     create
     table
     tableName
      fullId
       uid
        simpleId
         new_t
     (
     like
     tableName
      fullId
       uid
        simpleId
         t1
     )
  ;
  sqlStatement
   ddlStatement
    createTable
     create
     table
     tableName
      fullId
       uid
        simpleId
         log_table
     createDefinitions
      (
      createDefinition
       uid
        simpleId
         keywordsCanBeId
          row
       columnDefinition
        dataType
         varchar
         lengthOneDimension
          (
          decimalLiteral
           512
          )
      )
  ;
  sqlStatement
   ddlStatement
    createTable
     create
     table
     tableName
      fullId
       uid
        simpleId
         log_table
     createDefinitions
      (
      createDefinition
       uid
        simpleId
         keywordsCanBeId
          row
       columnDefinition
        dataType
         character
         lengthOneDimension
          (
          decimalLiteral
           512
          )
      )
  ;
  sqlStatement
   ddlStatement
    createTable
     create
     table
     tableName
      fullId
       uid
        simpleId
         new_t
     createDefinitions
      (
      createDefinition
       uid
        simpleId
         c
       columnDefinition
        dataType
         national
         char
      )
  ;
  sqlStatement
   ddlStatement
    createTable
     create
     table
     tableName
      fullId
       uid
        simpleId
         ships
     createDefinitions
      (
      createDefinition
       uid
        simpleId
         keywordsCanBeId
          name
       columnDefinition
        dataType
         varchar
         lengthOneDimension
          (
          decimalLiteral
           255
          )
      ,
      createDefinition
       uid
        simpleId
         class_id
       columnDefinition
        dataType
         int
      ,
      createDefinition
       uid
        simpleId
         id
       columnDefinition
        dataType
         int
      )
  ;
  sqlStatement
   ddlStatement
    createTable
     create
     table
     tableName
      fullId
       uid
        simpleId
         ships_guns
     createDefinitions
      (
      createDefinition
       uid
        simpleId
         guns_id
       columnDefinition
        dataType
         int
      ,
      createDefinition
       uid
        simpleId
         ship_id
       columnDefinition
        dataType
         int
      )
  ;
  sqlStatement
   ddlStatement
    createTable
     create
     table
     tableName
      fullId
       uid
        simpleId
         guns
     createDefinitions
      (
      createDefinition
       uid
        simpleId
         id
       columnDefinition
        dataType
         int
      ,
      createDefinition
       uid
        simpleId
         scalarFunctionName
          functionNameBase
           power
       columnDefinition
        dataType
         decimal
         lengthTwoOptionalDimension
          (
          decimalLiteral
           7
          ,
          decimalLiteral
           2
          )
      ,
      createDefinition
       uid
        simpleId
         callibr
       columnDefinition
        dataType
         decimal
         lengthTwoOptionalDimension
          (
          decimalLiteral
           10
          ,
          decimalLiteral
           3
          )
      )
  ;
  sqlStatement
   ddlStatement
    createTable
     create
     table
     tableName
      fullId
       uid
        simpleId
         ship_class
     createDefinitions
      (
      createDefinition
       uid
        simpleId
         id
       columnDefinition
        dataType
         int
      ,
      createDefinition
       uid
        simpleId
         class_name
       columnDefinition
        dataType
         varchar
         lengthOneDimension
          (
          decimalLiteral
           100
          )
      ,
      createDefinition
       uid
        simpleId
         tonange
       columnDefinition
        dataType
         decimal
         lengthTwoOptionalDimension
          (
          decimalLiteral
           10
          ,
          decimalLiteral
           2
          )
      ,
      createDefinition
       uid
        simpleId
         max_length
       columnDefinition
        dataType
         decimal
         lengthTwoOptionalDimension
          (
          decimalLiteral
           10
          ,
          decimalLiteral
           2
          )
      ,
      createDefinition
       uid
        simpleId
         start_build
       columnDefinition
        dataType
         year
      ,
      createDefinition
       uid
        simpleId
         end_build
       columnDefinition
        dataType
         year
         lengthOneDimension
          (
          decimalLiteral
           4
          )
      ,
      createDefinition
       uid
        simpleId
         max_guns_size
       columnDefinition
        dataType
         int
      )
  ;
  sqlStatement
   ddlStatement
    createTable
     create
     table
     tableName
      fullId
       uid
        `some table $$`
     createDefinitions
      (
      createDefinition
       uid
        simpleId
         id
       columnDefinition
        dataType
         int
        columnConstraint
         auto_increment
        columnConstraint
         key
      ,
      createDefinition
       uid
        simpleId
         class
       columnDefinition
        dataType
         varchar
         lengthOneDimension
          (
          decimalLiteral
           10
          )
      ,
      createDefinition
       uid
        simpleId
         keywordsCanBeId
          data
       columnDefinition
        dataType
         binary
      )
     tableOption
      engine
      =
      engineName
       engineNameBase
        MYISAM
  ;
  sqlStatement
   ddlStatement
    createTable
     create
     table
     tableName
      fullId
       uid
        `parent_table`
     createDefinitions
      (
      createDefinition
       uid
        simpleId
         id
       columnDefinition
        dataType
         int
        columnConstraint
         primary
         key
      ,
      createDefinition
       uid
        simpleId
         column1
       columnDefinition
        dataType
         varchar
         lengthOneDimension
          (
          decimalLiteral
           30
          )
      ,
      createDefinition
       indexColumnDefinition
        index
        uid
         simpleId
          parent_table_i1
        indexColumnNames
         (
         indexColumnName
          uid
           simpleId
            column1
          (
          decimalLiteral
           20
          )
         )
      ,
      createDefinition
       tableConstraint
        check
        (
        expression
         predicate
          predicate
           expressionAtom
            functionCall
             scalarFunctionName
              functionNameBase
               char_length
             (
             functionArgs
              fullColumnName
               uid
                simpleId
                 column1
             )
          comparisonOperator
           >
          predicate
           expressionAtom
            constant
             decimalLiteral
              10
        )
      )
     tableOption
      engine
      engineName
       engineNameBase
        InnoDB
  ;
  sqlStatement
   ddlStatement
    createTable
     create
     table
     tableName
      fullId
       uid
        simpleId
         child_table
     createDefinitions
      (
      createDefinition
       uid
        simpleId
         id
       columnDefinition
        dataType
         int
         unsigned
        columnConstraint
         auto_increment
        columnConstraint
         primary
         key
      ,
      createDefinition
       uid
        simpleId
         id_parent
       columnDefinition
        dataType
         int
        columnConstraint
         referenceDefinition
          references
          tableName
           fullId
            uid
             simpleId
              parent_table
          indexColumnNames
           (
           indexColumnName
            uid
             simpleId
              id
           )
          match
          full
          referenceAction
           on
           update
           referenceControlType
            cascade
           on
           delete
           referenceControlType
            set
            null
      )
     tableOption
      engine
      =
      engineName
       engineNameBase
        InnoDB
  ;
  sqlStatement
   ddlStatement
    createTable
     create
     table
     tableName
      fullId
       uid
        `another some table $$`
     like
     tableName
      fullId
       uid
        `some table $$`
  ;
  sqlStatement
   ddlStatement
    createTable
     create
     table
     tableName
      fullId
       uid
        `actor`
     createDefinitions
      (
      createDefinition
       uid
        `last_update`
       columnDefinition
        dataType
         timestamp
        columnConstraint
         default
         defaultValue
          currentTimestamp
           CURRENT_TIMESTAMP
      ,
      createDefinition
       uid
        `birthday`
       columnDefinition
        dataType
         datetime
        columnConstraint
         default
         defaultValue
          currentTimestamp
           CURRENT_TIMESTAMP
          ON
          UPDATE
          currentTimestamp
           LOCALTIMESTAMP
      )
  ;
  sqlStatement
   ddlStatement
    createTable
     create
     table
     tableName
      fullId
       uid
        simpleId
         boolean_table
     createDefinitions
      (
      createDefinition
       uid
        simpleId
         c1
       columnDefinition
        dataType
         bool
      ,
      createDefinition
       uid
        simpleId
         c2
       columnDefinition
        dataType
         boolean
        columnConstraint
         default
         defaultValue
          constant
           booleanLiteral
            true
      )
  ;
  sqlStatement
   ddlStatement
    createTable
     create
     table
     tableName
      fullId
       uid
        simpleId
         table_with_character_set_eq
     createDefinitions
      (
      createDefinition
       uid
        simpleId
         id
       columnDefinition
        dataType
         int
      ,
      createDefinition
       uid
        simpleId
         keywordsCanBeId
          data
       columnDefinition
        dataType
         varchar
         lengthOneDimension
          (
          decimalLiteral
           50
          )
      )
     tableOption
      charSet
       character
       set
      =
      default
  ;
  sqlStatement
   ddlStatement
    createTable
     create
     table
     tableName
      fullId
       uid
        simpleId
         table_with_character_set
     createDefinitions
      (
      createDefinition
       uid
        simpleId
         id
       columnDefinition
        dataType
         int
      ,
      createDefinition
       uid
        simpleId
         keywordsCanBeId
          data
       columnDefinition
        dataType
         varchar
         lengthOneDimension
          (
          decimalLiteral
           50
          )
      )
     tableOption
      charSet
       character
       set
      default
  ;
  sqlStatement
   ddlStatement
    createTable
     create
     table
     tableName
      fullId
       uid
        simpleId
         table_with_visible_index
     createDefinitions
      (
      createDefinition
       uid
        simpleId
         id
       columnDefinition
        dataType
         int
      ,
      createDefinition
       uid
        simpleId
         keywordsCanBeId
          data
       columnDefinition
        dataType
         varchar
         lengthOneDimension
          (
          decimalLiteral
           50
          )
      ,
      createDefinition
       tableConstraint
        UNIQUE
        INDEX
        uid
         `data_UNIQUE`
        indexColumnNames
         (
         indexColumnName
          uid
           `data`
          ASC
         )
        indexOption
         VISIBLE
      )
  ;
  sqlStatement
   ddlStatement
    createTable
     create
     table
     tableName
      fullId
       uid
        simpleId
         table_with_index
     createDefinitions
      (
      createDefinition
       uid
        simpleId
         id
       columnDefinition
        dataType
         int
      ,
      createDefinition
       uid
        simpleId
         keywordsCanBeId
          data
       columnDefinition
        dataType
         varchar
         lengthOneDimension
          (
          decimalLiteral
           50
          )
      ,
      createDefinition
       tableConstraint
        UNIQUE
        INDEX
        uid
         `data_UNIQUE`
        indexColumnNames
         (
         indexColumnName
          uid
           `data`
          ASC
         )
      )
  ;
  sqlStatement
   ddlStatement
    createTable
     create
     table
     tableName
      fullId
       uid
        simpleId
         transactional_table
     createDefinitions
      (
      createDefinition
       uid
        simpleId
         keywordsCanBeId
          name
       columnDefinition
        dataType
         varchar
         lengthOneDimension
          (
          decimalLiteral
           255
          )
      ,
      createDefinition
       uid
        simpleId
         class_id
       columnDefinition
        dataType
         int
      ,
      createDefinition
       uid
        simpleId
         id
       columnDefinition
        dataType
         int
      )
     tableOption
      transactional
      =
      1
  ;
  sqlStatement
   ddlStatement
    createTable
     create
     table
     tableName
      fullId
       uid
        simpleId
         keywordsCanBeId
          transactional
     createDefinitions
      (
      createDefinition
       uid
        simpleId
         keywordsCanBeId
          name
       columnDefinition
        dataType
         varchar
         lengthOneDimension
          (
          decimalLiteral
           255
          )
      ,
      createDefinition
       uid
        simpleId
         class_id
       columnDefinition
        dataType
         int
      ,
      createDefinition
       uid
        simpleId
         id
       columnDefinition
        dataType
         int
      )
  ;
  sqlStatement
   ddlStatement
    createTable
     create
     table
     tableName
      fullId
       uid
        simpleId
         add_test
     createDefinitions
      (
      createDefinition
       uid
        simpleId
         col1
       columnDefinition
        dataType
         varchar
         lengthOneDimension
          (
          decimalLiteral
           255
          )
      ,
      createDefinition
       uid
        simpleId
         col2
       columnDefinition
        dataType
         int
      ,
      createDefinition
       uid
        simpleId
         col3
       columnDefinition
        dataType
         int
      )
  ;
  sqlStatement
   ddlStatement
    createTable
     create
     table
     tableName
      fullId
       uid
        simpleId
         blob_test
     createDefinitions
      (
      createDefinition
       uid
        simpleId
         id
       columnDefinition
        dataType
         int
      ,
      createDefinition
       uid
        simpleId
         col1
       columnDefinition
        dataType
         blob
         lengthOneDimension
          (
          decimalLiteral
           45
          )
      )
  ;
  sqlStatement
   ddlStatement
    createTable
     CREATE
     TABLE
     tableName
      fullId
       uid
        `user_account`
     createDefinitions
      (
      createDefinition
       uid
        `id1`
       columnDefinition
        dataType
         bigint
         lengthOneDimension
          (
          decimalLiteral
           20
          )
         unsigned
        columnConstraint
         nullNotnull
          NOT
          NULL
        columnConstraint
         DEFAULT
         defaultValue
          nextval
          (
          fullId
           uid
            `useraccount`
           .
           uid
            `user_account_id_seq`
          )
      )
  ;
  sqlStatement
   ddlStatement
    createTable
     create
     table
     tableName
      fullId
       uid
        simpleId
         žluťoučký
     createDefinitions
      (
      createDefinition
       uid
        simpleId
         kůň
       columnDefinition
        dataType
         int
      )
  ;
  sqlStatement
   ddlStatement
    createTable
     CREATE
     TABLE
     tableName
      fullId
       uid
        simpleId
         staff
     createDefinitions
      (
      createDefinition
       tableConstraint
        PRIMARY
        KEY
        indexColumnNames
         (
         indexColumnName
          uid
           simpleId
            staff_num
         )
      ,
      createDefinition
       uid
        simpleId
         staff_num
       columnDefinition
        dataType
         INT
         lengthOneDimension
          (
          decimalLiteral
           5
          )
        columnConstraint
         nullNotnull
          NOT
          NULL
      ,
      createDefinition
       uid
        simpleId
         first_name
       columnDefinition
        dataType
         VARCHAR
         lengthOneDimension
          (
          decimalLiteral
           100
          )
        columnConstraint
         nullNotnull
          NOT
          NULL
      ,
      createDefinition
       uid
        simpleId
         pens_in_drawer
       columnDefinition
        dataType
         INT
         lengthOneDimension
          (
          decimalLiteral
           2
          )
        columnConstraint
         nullNotnull
          NOT
          NULL
      ,
      createDefinition
       tableConstraint
        CONSTRAINT
        uid
         simpleId
          pens_in_drawer_range
        CHECK
        (
        expression
         predicate
          predicate
           expressionAtom
            fullColumnName
             uid
              simpleId
               pens_in_drawer
          BETWEEN
          predicate
           expressionAtom
            constant
             decimalLiteral
              1
          AND
          predicate
           expressionAtom
            constant
             decimalLiteral
              99
        )
      )
  ;
  sqlStatement
   ddlStatement
    createTable
     create
     table
     tableName
      fullId
       uid
        simpleId
         column_names_as_aggr_funcs
     createDefinitions
      (
      createDefinition
       uid
        simpleId
         keywordsCanBeId
          min
       columnDefinition
        dataType
         varchar
         lengthOneDimension
          (
          decimalLiteral
           100
          )
      ,
      createDefinition
       uid
        simpleId
         keywordsCanBeId
          max
       columnDefinition
        dataType
         varchar
         lengthOneDimension
          (
          decimalLiteral
           100
          )
      ,
      createDefinition
       uid
        simpleId
         keywordsCanBeId
          sum
       columnDefinition
        dataType
         varchar
         lengthOneDimension
          (
          decimalLiteral
           100
          )
      ,
      createDefinition
       uid
        simpleId
         keywordsCanBeId
          count
       columnDefinition
        dataType
         varchar
         lengthOneDimension
          (
          decimalLiteral
           100
          )
      )
  ;
  sqlStatement
   ddlStatement
    createTable
     CREATE
     TABLE
     tableName
      fullId
       uid
        simpleId
         char_table
     createDefinitions
      (
      createDefinition
       uid
        simpleId
         c1
       columnDefinition
        dataType
         CHAR
         VARYING
         lengthOneDimension
          (
          decimalLiteral
           10
          )
      ,
      createDefinition
       uid
        simpleId
         c2
       columnDefinition
        dataType
         CHARACTER
         VARYING
         lengthOneDimension
          (
          decimalLiteral
           10
          )
      ,
      createDefinition
       uid
        simpleId
         c3
       columnDefinition
        dataType
         NCHAR
         VARYING
         lengthOneDimension
          (
          decimalLiteral
           10
          )
      )
  ;
  sqlStatement
   ddlStatement
    createTable
     CREATE
     TABLE
     tableName
      fullId
       uid
        simpleId
         generated_persistent
     createDefinitions
      (
      createDefinition
       uid
        simpleId
         id
       columnDefinition
        dataType
         int
        columnConstraint
         nullNotnull
          NOT
          NULL
        columnConstraint
         AUTO_INCREMENT
      ,
      createDefinition
       uid
        simpleId
         ip_hash
       columnDefinition
        dataType
         char
         lengthOneDimension
          (
          decimalLiteral
           64
          )
        columnConstraint
         AS
         (
         expression
          predicate
           expressionAtom
            functionCall
             scalarFunctionName
              functionNameBase
               SHA2
             (
             functionArgs
              functionCall
               scalarFunctionName
                functionNameBase
                 CONCAT
               (
               functionArgs
                constant
                 stringLiteral
                  `token`
                ,
                functionCall
                 fullId
                  uid
                   simpleId
                    keywordsCanBeId
                     COALESCE
                 (
                 functionArgs
                  constant
                   stringLiteral
                    `ip`
                  ,
                  constant
                   stringLiteral
                    ""
                 )
               )
              ,
              constant
               decimalLiteral
                256
             )
         )
         PERSISTENT
      ,
      createDefinition
       uid
        simpleId
         keywordsCanBeId
          persistent
       columnDefinition
        dataType
         int
      ,
      createDefinition
       tableConstraint
        PRIMARY
        KEY
        indexColumnNames
         (
         indexColumnName
          uid
           `id`
         )
      ,
      createDefinition
       tableConstraint
        UNIQUE
        KEY
        uid
         `token_and_ip_hash`
        indexColumnNames
         (
         indexColumnName
          uid
           `ip_hash`
         )
      )
     tableOption
      ENGINE
      =
      engineName
       engineNameBase
        InnoDB
  ;
  sqlStatement
   ddlStatement
    createTable
     create
     table
     tableName
      fullId
       uid
        simpleId
         rack_shelf_bin
     createDefinitions
      (
      createDefinition
       uid
        simpleId
         id
       columnDefinition
        dataType
         int
         unsigned
        columnConstraint
         nullNotnull
          not
          null
        columnConstraint
         auto_increment
        columnConstraint
         unique
        columnConstraint
         primary
         key
      ,
      createDefinition
       uid
        simpleId
         bin_volume
       columnDefinition
        dataType
         decimal
         lengthTwoOptionalDimension
          (
          decimalLiteral
           20
          ,
          decimalLiteral
           4
          )
        columnConstraint
         default
         defaultValue
          (
          expression
           predicate
            expressionAtom
             expressionAtom
              expressionAtom
               fullColumnName
                uid
                 simpleId
                  bin_len
              mathOperator
               *
              expressionAtom
               fullColumnName
                uid
                 simpleId
                  bin_width
             mathOperator
              *
             expressionAtom
              fullColumnName
               uid
                simpleId
                 bin_height
          )
      )
  ;
  sqlStatement
   ddlStatement
    createTable
     CREATE
     TABLE
     tableName
      fullId
       uid
        `tblSRCHjob_desc`
     createDefinitions
      (
      createDefinition
       uid
        `description_id`
       columnDefinition
        dataType
         bigint
         lengthOneDimension
          (
          decimalLiteral
           20
          )
         unsigned
        columnConstraint
         nullNotnull
          NOT
          NULL
        columnConstraint
         AUTO_INCREMENT
      ,
      createDefinition
       uid
        `description`
       columnDefinition
        dataType
         mediumtext
        columnConstraint
         nullNotnull
          NOT
          NULL
      ,
      createDefinition
       tableConstraint
        PRIMARY
        KEY
        indexColumnNames
         (
         indexColumnName
          uid
           `description_id`
         )
      )
     tableOption
      ENGINE
      =
      engineName
       engineNameBase
        TokuDB
     tableOption
      AUTO_INCREMENT
      =
      decimalLiteral
       4095997820
     tableOption
      DEFAULT
      charSet
       CHARSET
      =
      charsetName
       charsetNameBase
        utf8mb4
     tableOption
      ROW_FORMAT
      =
      TOKUDB_QUICKLZ
  ;
  sqlStatement
   ddlStatement
    createTable
     create
     table
     tableName
      fullId
       uid
        simpleId
         invisible_column_test
     createDefinitions
      (
      createDefinition
       uid
        simpleId
         id
       columnDefinition
        dataType
         int
      ,
      createDefinition
       uid
        simpleId
         col1
       columnDefinition
        dataType
         int
        columnConstraint
         INVISIBLE
      )
  ;
  sqlStatement
   ddlStatement
    createTable
     create
     table
     tableName
      fullId
       uid
        simpleId
         visible_column_test
     createDefinitions
      (
      createDefinition
       uid
        simpleId
         id
       columnDefinition
        dataType
         int
      ,
      createDefinition
       uid
        simpleId
         col1
       columnDefinition
        dataType
         int
        columnConstraint
         VISIBLE
      )
  ;
  sqlStatement
   ddlStatement
    createTable
     create
     table
     tableName
      fullId
       uid
        simpleId
         table_with_buckets
     createDefinitions
      (
      createDefinition
       uid
        simpleId
         id
       columnDefinition
        dataType
         int
         lengthOneDimension
          (
          decimalLiteral
           11
          )
        columnConstraint
         auto_increment
        columnConstraint
         nullNotnull
          NOT
          NULL
        columnConstraint
         COMMENT
         'ID'
      ,
      createDefinition
       uid
        simpleId
         keywordsCanBeId
          buckets
       columnDefinition
        dataType
         int
         lengthOneDimension
          (
          decimalLiteral
           11
          )
        columnConstraint
         nullNotnull
          NOT
          NULL
        columnConstraint
         COMMENT
         '分桶数'
      )
  ;
  sqlStatement
   ddlStatement
    createTable
     create
     table
     tableName
      fullId
       uid
        simpleId
         keywordsCanBeId
          statement
     createDefinitions
      (
      createDefinition
       uid
        simpleId
         id
       columnDefinition
        dataType
         int
      )
  ;
  sqlStatement
   ddlStatement
    createTable
     CREATE
     TABLE
     tableName
      fullId
       uid
        simpleId
         table_items
     createDefinitions
      (
      createDefinition
       uid
        simpleId
         id
       columnDefinition
        dataType
         INT
      ,
      createDefinition
       uid
        simpleId
         purchased
       columnDefinition
        dataType
         DATE
      )
     partitionDefinitions
      PARTITION
      BY
      partitionFunctionDefinition
       RANGE
       (
       expression
        predicate
         expressionAtom
          functionCall
           scalarFunctionName
            functionNameBase
             YEAR
           (
           functionArgs
            fullColumnName
             uid
              simpleId
               purchased
           )
       )
      SUBPARTITION
      BY
      subpartitionFunctionDefinition
       HASH
       (
       expression
        predicate
         expressionAtom
          functionCall
           scalarFunctionName
            functionNameBase
             TO_DAYS
           (
           functionArgs
            fullColumnName
             uid
              simpleId
               purchased
           )
       )
      SUBPARTITIONS
      decimalLiteral
       2
      (
      partitionDefinition
       PARTITION
       uid
        simpleId
         p0
       VALUES
       LESS
       THAN
       (
       partitionDefinerAtom
        constant
         decimalLiteral
          1990
       )
      ,
      partitionDefinition
       PARTITION
       uid
        simpleId
         p1
       VALUES
       LESS
       THAN
       (
       partitionDefinerAtom
        constant
         decimalLiteral
          2000
       )
      ,
      partitionDefinition
       PARTITION
       uid
        simpleId
         p2
       VALUES
       LESS
       THAN
       partitionDefinerAtom
        expression
         predicate
          expressionAtom
           fullColumnName
            uid
             simpleId
              keywordsCanBeId
               MAXVALUE
      )
  ;
  sqlStatement
   ddlStatement
    createTable
     CREATE
     TABLE
     tableName
      fullId
       uid
        simpleId
         table_items_with_subpartitions
     createDefinitions
      (
      createDefinition
       uid
        simpleId
         id
       columnDefinition
        dataType
         INT
      ,
      createDefinition
       uid
        simpleId
         purchased
       columnDefinition
        dataType
         DATE
      )
     partitionDefinitions
      PARTITION
      BY
      partitionFunctionDefinition
       RANGE
       (
       expression
        predicate
         expressionAtom
          functionCall
           scalarFunctionName
            functionNameBase
             YEAR
           (
           functionArgs
            fullColumnName
             uid
              simpleId
               purchased
           )
       )
      SUBPARTITION
      BY
      subpartitionFunctionDefinition
       HASH
       (
       expression
        predicate
         expressionAtom
          functionCall
           scalarFunctionName
            functionNameBase
             TO_DAYS
           (
           functionArgs
            fullColumnName
             uid
              simpleId
               purchased
           )
       )
      (
      partitionDefinition
       PARTITION
       uid
        simpleId
         p0
       VALUES
       LESS
       THAN
       (
       partitionDefinerAtom
        constant
         decimalLiteral
          1990
       )
       (
       subpartitionDefinition
        SUBPARTITION
        uid
         simpleId
          s0
       ,
       subpartitionDefinition
        SUBPARTITION
        uid
         simpleId
          s1
       )
      ,
      partitionDefinition
       PARTITION
       uid
        simpleId
         p1
       VALUES
       LESS
       THAN
       (
       partitionDefinerAtom
        constant
         decimalLiteral
          2000
       )
       (
       subpartitionDefinition
        SUBPARTITION
        uid
         simpleId
          s2
       ,
       subpartitionDefinition
        SUBPARTITION
        uid
         simpleId
          keywordsCanBeId
           s3
       )
      ,
      partitionDefinition
       PARTITION
       uid
        simpleId
         p2
       VALUES
       LESS
       THAN
       partitionDefinerAtom
        expression
         predicate
          expressionAtom
           fullColumnName
            uid
             simpleId
              keywordsCanBeId
               MAXVALUE
       (
       subpartitionDefinition
        SUBPARTITION
        uid
         simpleId
          s4
       ,
       subpartitionDefinition
        SUBPARTITION
        uid
         simpleId
          s5
       )
      )
  ;
  sqlStatement
   ddlStatement
    createTable
     CREATE
     TABLE
     tableName
      fullId
       uid
        simpleId
         positions_rollover
     createDefinitions
      (
      createDefinition
       uid
        simpleId
         id
       columnDefinition
        dataType
         bigint
         lengthOneDimension
          (
          decimalLiteral
           20
          )
        columnConstraint
         nullNotnull
          NOT
          NULL
        columnConstraint
         AUTO_INCREMENT
      ,
      createDefinition
       uid
        simpleId
         dataTypeBase
          time
       columnDefinition
        dataType
         datetime
        columnConstraint
         nullNotnull
          NOT
          NULL
      ,
      createDefinition
       uid
        simpleId
         partition_index
       columnDefinition
        dataType
         int
         lengthOneDimension
          (
          decimalLiteral
           10
          )
         unsigned
        columnConstraint
         nullNotnull
          NOT
          NULL
        columnConstraint
         DEFAULT
         defaultValue
          constant
           decimalLiteral
            0
      ,
      createDefinition
       tableConstraint
        PRIMARY
        KEY
        indexColumnNames
         (
         indexColumnName
          uid
           simpleId
            id
         ,
         indexColumnName
          uid
           simpleId
            partition_index
         )
      ,
      createDefinition
       indexColumnDefinition
        KEY
        uid
         simpleId
          dataTypeBase
           time
        indexColumnNames
         (
         indexColumnName
          uid
           simpleId
            dataTypeBase
             time
         )
      )
     tableOption
      ENGINE
      =
      engineName
       engineNameBase
        InnoDB
     tableOption
      DEFAULT
      charSet
       CHARSET
      =
      charsetName
       charsetNameBase
        utf8
     partitionDefinitions
      PARTITION
      BY
      partitionFunctionDefinition
       LIST
       (
       expression
        predicate
         expressionAtom
          fullColumnName
           uid
            simpleId
             partition_index
       )
      (
      partitionDefinition
       PARTITION
       uid
        simpleId
         positions_rollover_partition
       VALUES
       IN
       (
       partitionDefinerAtom
        constant
         decimalLiteral
          0
       )
       partitionOption
        ENGINE
        =
        engineName
         engineNameBase
          InnoDB
      ,
      partitionDefinition
       PARTITION
       uid
        simpleId
         default_positions_rollover_partition
       partitionOption
        DEFAULT
        ENGINE
        =
        engineName
         engineNameBase
          InnoDB
      )
  ;
  sqlStatement
   ddlStatement
    createTable
     CREATE
     TABLE
     tableName
      fullId
       uid
        `tab_with_json_value`
     createDefinitions
      (
      createDefinition
       uid
        `col0`
       columnDefinition
        dataType
         JSON
        columnConstraint
         nullNotnull
          NOT
          NULL
      ,
      createDefinition
       uid
        `col1`
       columnDefinition
        dataType
         VARCHAR
         lengthOneDimension
          (
          decimalLiteral
           36
          )
         COLLATE
         collationName
          uid
           simpleId
            utf8mb4_bin
        columnConstraint
         GENERATED
         ALWAYS
         AS
         (
         expression
          predicate
           expressionAtom
            functionCall
             specificFunction
              JSON_VALUE
              (
              expression
               predicate
                expressionAtom
                 constant
                  stringLiteral
                   `col0`
              ,
              expression
               predicate
                expressionAtom
                 constant
                  stringLiteral
                   _utf8mb4
                   '$._field1'
              RETURNING
              convertedDataType
               CHAR
               lengthOneDimension
                (
                decimalLiteral
                 36
                )
               charSet
                CHARACTER
                SET
               charsetName
                charsetNameBase
                 latin1
              )
         )
         STORED
        columnConstraint
         nullNotnull
          NOT
          NULL
      ,
      createDefinition
       uid
        `col2`
       columnDefinition
        dataType
         VARCHAR
         lengthOneDimension
          (
          decimalLiteral
           36
          )
         COLLATE
         collationName
          uid
           simpleId
            utf8mb4_bin
        columnConstraint
         GENERATED
         ALWAYS
         AS
         (
         expression
          predicate
           expressionAtom
            functionCall
             specificFunction
              JSON_VALUE
              (
              expression
               predicate
                expressionAtom
                 constant
                  stringLiteral
                   `col0`
              ,
              expression
               predicate
                expressionAtom
                 constant
                  stringLiteral
                   _utf8mb4
                   '$._field1'
              jsonOnEmpty
               ERROR
               ON
               EMPTY
              )
         )
         STORED
        columnConstraint
         nullNotnull
          NOT
          NULL
      ,
      createDefinition
       uid
        `col3`
       columnDefinition
        dataType
         VARCHAR
         lengthOneDimension
          (
          decimalLiteral
           36
          )
         COLLATE
         collationName
          uid
           simpleId
            utf8mb4_bin
        columnConstraint
         GENERATED
         ALWAYS
         AS
         (
         expression
          predicate
           expressionAtom
            functionCall
             specificFunction
              JSON_VALUE
              (
              expression
               predicate
                expressionAtom
                 constant
                  stringLiteral
                   `col0`
              ,
              expression
               predicate
                expressionAtom
                 constant
                  stringLiteral
                   _utf8mb4
                   '$._field1'
              jsonOnError
               DEFAULT
               defaultValue
                constant
                 stringLiteral
                  'xx'
               ON
               ERROR
              )
         )
         STORED
        columnConstraint
         nullNotnull
          NOT
          NULL
      ,
      createDefinition
       uid
        `col4`
       columnDefinition
        dataType
         JSON
        columnConstraint
         nullNotnull
          NOT
          NULL
      ,
      createDefinition
       tableConstraint
        PRIMARY
        KEY
        indexColumnNames
         (
         indexColumnName
          uid
           `col1`
         )
      )
     tableOption
      ENGINE
      =
      engineName
       engineNameBase
        InnoDB
     tableOption
      DEFAULT
      charSet
       CHARSET
      =
      charsetName
       charsetNameBase
        utf8mb4
     tableOption
      COLLATE
      =
      collationName
       uid
        simpleId
         utf8mb4_bin
     tableOption
      ROW_FORMAT
      =
      COMPRESSED
  ;
  sqlStatement
   ddlStatement
    createTable
     CREATE
     TABLE
     tableName
      fullId
       uid
        simpleId
         CustomerTable
     createDefinitions
      (
      createDefinition
       uid
        simpleId
         CustomerID
       columnDefinition
        dataType
         varchar
         lengthOneDimension
          (
          decimalLiteral
           5
          )
      ,
      createDefinition
       uid
        simpleId
         CompanyName
       columnDefinition
        dataType
         varchar
         lengthOneDimension
          (
          decimalLiteral
           40
          )
      ,
      createDefinition
       uid
        simpleId
         ContactName
       columnDefinition
        dataType
         varchar
         lengthOneDimension
          (
          decimalLiteral
           30
          )
      ,
      createDefinition
       uid
        simpleId
         Address
       columnDefinition
        dataType
         varchar
         lengthOneDimension
          (
          decimalLiteral
           60
          )
      ,
      createDefinition
       uid
        simpleId
         Phone
       columnDefinition
        dataType
         varchar
         lengthOneDimension
          (
          decimalLiteral
           24
          )
      )
     tableOption
      ENGINE
      =
      engineName
       engineNameBase
        CONNECT
     tableOption
      TABLE_TYPE
      =
      tableType
       ODBC
  ;
  sqlStatement
   ddlStatement
    createTable
     CREATE
     TABLE
     tableName
      fullId
       uid
        simpleId
         CustomerTable
     createDefinitions
      (
      createDefinition
       uid
        simpleId
         keywordsCanBeId
          table_type
       columnDefinition
        dataType
         varchar
         lengthOneDimension
          (
          decimalLiteral
           5
          )
      )
  ;
  sqlStatement
   ddlStatement
    createTable
     CREATE
     TABLE
     tableName
      fullId
       uid
        `daily_intelligences`
     createDefinitions
      (
      createDefinition
       uid
        `id`
       columnDefinition
        dataType
         bigint
         lengthOneDimension
          (
          decimalLiteral
           20
          )
        columnConstraint
         nullNotnull
          NOT
          NULL
        columnConstraint
         AUTO_INCREMENT
        columnConstraint
         COMMENT
         ''
      ,
      createDefinition
       uid
        `partner_code`
       columnDefinition
        dataType
         varchar
         lengthOneDimension
          (
          decimalLiteral
           32
          )
        columnConstraint
         DEFAULT
         defaultValue
          NULL
        columnConstraint
         COMMENT
         ''
      ,
      createDefinition
       uid
        `text`
       columnDefinition
        dataType
         LONGTEXT
        columnConstraint
         DEFAULT
         defaultValue
          NULL
        columnConstraint
         COMMENT
         ''
      ,
      createDefinition
       uid
        `monitor_time`
       columnDefinition
        dataType
         TIMESTAMP
        columnConstraint
         DEFAULT
         defaultValue
          NULL
        columnConstraint
         COMMENT
         ''
      ,
      createDefinition
       uid
        `gmt_modify`
       columnDefinition
        dataType
         TIMESTAMP
        columnConstraint
         nullNotnull
          NOT
          NULL
        columnConstraint
         DEFAULT
         defaultValue
          currentTimestamp
           CURRENT_TIMESTAMP
          ON
          UPDATE
          currentTimestamp
           CURRENT_TIMESTAMP
        columnConstraint
         COMMENT
         ''
      ,
      createDefinition
       uid
        `gmt_create`
       columnDefinition
        dataType
         TIMESTAMP
        columnConstraint
         nullNotnull
          NOT
          NULL
        columnConstraint
         DEFAULT
         defaultValue
          currentTimestamp
           CURRENT_TIMESTAMP
        columnConstraint
         COMMENT
         ''
      ,
      createDefinition
       tableConstraint
        PRIMARY
        KEY
        indexColumnNames
         (
         indexColumnName
          uid
           `id`
         )
      )
     tableOption
      ENGINE
      =
      engineName
       engineNameBase
        innodb
     tableOption
      DEFAULT
      charSet
       CHAR
       SET
      =
      charsetName
       charsetNameBase
        utf8
     tableOption
      COMMENT
      ''
  ;
  sqlStatement
   ddlStatement
    createTable
     CREATE
     TABLE
     tableName
      fullId
       uid
        `t_test_curdate`
     createDefinitions
      (
      createDefinition
       uid
        `id`
       columnDefinition
        dataType
         int
         lengthOneDimension
          (
          decimalLiteral
           11
          )
        columnConstraint
         nullNotnull
          NOT
          NULL
        columnConstraint
         AUTO_INCREMENT
      ,
      createDefinition
       uid
        `c1`
       columnDefinition
        dataType
         datetime
        columnConstraint
         nullNotnull
          NOT
          NULL
        columnConstraint
         DEFAULT
         defaultValue
          CAST
          (
          expression
           predicate
            expressionAtom
             functionCall
              specificFunction
               CURRENT_TIMESTAMP
               (
               )
          as
          convertedDataType
           DATE
          )
        columnConstraint
         COMMENT
         'error test'
      ,
      createDefinition
       tableConstraint
        PRIMARY
        KEY
        indexColumnNames
         (
         indexColumnName
          uid
           `id`
         )
      )
     tableOption
      ENGINE
      =
      engineName
       engineNameBase
        InnoDB
     tableOption
      DEFAULT
      charSet
       CHARSET
      =
      charsetName
       charsetNameBase
        utf8mb4
  ;
  sqlStatement
   ddlStatement
    createTable
     CREATE
     TABLE
     tableName
      fullId
       uid
        `t_test_curdate`
     createDefinitions
      (
      createDefinition
       uid
        `id`
       columnDefinition
        dataType
         int
         lengthOneDimension
          (
          decimalLiteral
           11
          )
        columnConstraint
         nullNotnull
          NOT
          NULL
        columnConstraint
         AUTO_INCREMENT
      ,
      createDefinition
       uid
        `c1`
       columnDefinition
        dataType
         datetime
        columnConstraint
         nullNotnull
          NOT
          NULL
        columnConstraint
         DEFAULT
         defaultValue
          currentTimestamp
           CURDATE
           (
           )
        columnConstraint
         COMMENT
         'error test'
      ,
      createDefinition
       tableConstraint
        PRIMARY
        KEY
        indexColumnNames
         (
         indexColumnName
          uid
           `id`
         )
      )
     tableOption
      ENGINE
      =
      engineName
       engineNameBase
        InnoDB
     tableOption
      DEFAULT
      charSet
       CHARSET
      =
      charsetName
       charsetNameBase
        utf8mb4
  ;
  sqlStatement
   ddlStatement
    createTable
     CREATE
     orReplace
      OR
      REPLACE
     TABLE
     tableName
      fullId
       uid
        `t_table`
     createDefinitions
      (
      createDefinition
       uid
        `info_no`
       columnDefinition
        dataType
         int
         lengthOneDimension
          (
          decimalLiteral
           11
          )
         unsigned
        columnConstraint
         nullNotnull
          NOT
          NULL
        columnConstraint
         AUTO_INCREMENT
      ,
      createDefinition
       uid
        `product_no`
       columnDefinition
        dataType
         int
         lengthOneDimension
          (
          decimalLiteral
           11
          )
         unsigned
        columnConstraint
         nullNotnull
          NOT
          NULL
      ,
      createDefinition
       uid
        `member_id`
       columnDefinition
        dataType
         varchar
         lengthOneDimension
          (
          decimalLiteral
           30
          )
         COLLATE
         collationName
          uid
           simpleId
            utf8mb4_unicode_ci
        columnConstraint
         nullNotnull
          NOT
          NULL
      ,
      createDefinition
       uid
        `app_url`
       columnDefinition
        dataType
         varchar
         lengthOneDimension
          (
          decimalLiteral
           500
          )
         COLLATE
         collationName
          uid
           simpleId
            utf8mb4_unicode_ci
        columnConstraint
         DEFAULT
         defaultValue
          NULL
      ,
      createDefinition
       uid
        `redirect_url`
       columnDefinition
        dataType
         varchar
         lengthOneDimension
          (
          decimalLiteral
           200
          )
         COLLATE
         collationName
          uid
           simpleId
            utf8mb4_unicode_ci
        columnConstraint
         DEFAULT
         defaultValue
          NULL
      ,
      createDefinition
       uid
        `scope`
       columnDefinition
        dataType
         varchar
         lengthOneDimension
          (
          decimalLiteral
           200
          )
         COLLATE
         collationName
          uid
           simpleId
            utf8mb4_unicode_ci
        columnConstraint
         DEFAULT
         defaultValue
          NULL
      ,
      createDefinition
       tableConstraint
        PRIMARY
        KEY
        indexColumnNames
         (
         indexColumnName
          uid
           `info_no`
         )
      ,
      createDefinition
       tableConstraint
        UNIQUE
        KEY
        uid
         `UN_member_id`
        indexColumnNames
         (
         indexColumnName
          uid
           `member_id`
         )
        indexOption
         indexType
          USING
          BTREE
      ,
      createDefinition
       tableConstraint
        UNIQUE
        KEY
        uid
         `UN_product_no`
        indexColumnNames
         (
         indexColumnName
          uid
           `product_no`
         )
        indexOption
         indexType
          USING
          BTREE
      )
     tableOption
      ENGINE
      =
      engineName
       engineNameBase
        InnoDB
     tableOption
      DEFAULT
      charSet
       CHARSET
      =
      charsetName
       charsetNameBase
        utf8mb4
     tableOption
      COLLATE
      =
      collationName
       uid
        simpleId
         utf8mb4_unicode_ci
     tableOption
      ROW_FORMAT
      =
      DYNAMIC
  ;
  sqlStatement
   ddlStatement
    createTable
     CREATE
     TABLE
     tableName
      fullId
       uid
        `table_default_fn`
     createDefinitions
      (
      createDefinition
       uid
        `quote_id`
       columnDefinition
        dataType
         varchar
         lengthOneDimension
          (
          decimalLiteral
           32
          )
        columnConstraint
         nullNotnull
          NOT
          NULL
      ,
      createDefinition
       uid
        `created_at`
       columnDefinition
        dataType
         bigint
         lengthOneDimension
          (
          decimalLiteral
           20
          )
        columnConstraint
         nullNotnull
          NOT
          NULL
        columnConstraint
         DEFAULT
         defaultValue
          expression
           predicate
            expressionAtom
             functionCall
              scalarFunctionName
               functionNameBase
                unix_timestamp
              (
              )
      )
  ;
  sqlStatement
   ddlStatement
    createTable
     CREATE
     TABLE
     ifNotExists
      IF
      NOT
      EXISTS
     tableName
      fullId
       uid
        `contract_center`
       .
       uid
        `ent_folder_letter_relationship`
     createDefinitions
      (
      createDefinition
       uid
        `id`
       columnDefinition
        dataType
         BIGINT
         lengthOneDimension
          (
          decimalLiteral
           19
          )
         UNSIGNED
        columnConstraint
         nullNotnull
          NOT
          NULL
        columnConstraint
         COMMENT
         '唯一标识'
      ,
      createDefinition
       uid
        `layer`
       columnDefinition
        dataType
         TINYINT
         lengthOneDimension
          (
          decimalLiteral
           4
          )
         UNSIGNED
        columnConstraint
         DEFAULT
         defaultValue
          constant
           stringLiteral
            _UTF8MB4
            '0'
        columnConstraint
         COMMENT
         '文档所属层级，0-主关联文档， 1-次关联文档'
      ,
      createDefinition
       uid
        `deleted`
       columnDefinition
        dataType
         TINYINT
         lengthOneDimension
          (
          decimalLiteral
           1
          )
        columnConstraint
         nullNotnull
          NOT
          NULL
        columnConstraint
         DEFAULT
         defaultValue
          constant
           stringLiteral
            _UTF8MB4
            '0'
        columnConstraint
         COMMENT
         '0-有效记录, 1-删除'
      ,
      createDefinition
       uid
        `data_create_time`
       columnDefinition
        dataType
         DATETIME
        columnConstraint
         nullNotnull
          NOT
          NULL
        columnConstraint
         DEFAULT
         defaultValue
          currentTimestamp
           CURRENT_TIMESTAMP
           (
           )
        columnConstraint
         COMMENT
         '创建时间'
      ,
      createDefinition
       uid
        `data_update_time`
       columnDefinition
        dataType
         DATETIME
        columnConstraint
         nullNotnull
          NOT
          NULL
        columnConstraint
         DEFAULT
         defaultValue
          currentTimestamp
           CURRENT_TIMESTAMP
           (
           )
          ON
          UPDATE
          currentTimestamp
           CURRENT_TIMESTAMP
           (
           )
        columnConstraint
         COMMENT
         '更新时间'
      ,
      createDefinition
       tableConstraint
        PRIMARY
        KEY
        indexColumnNames
         (
         indexColumnName
          uid
           `id`
         )
      )
     tableOption
      ENGINE
      =
      engineName
       engineNameBase
        InnoDB
     tableOption
      DEFAULT
      charSet
       CHARACTER
       SET
      =
      charsetName
       charsetNameBase
        UTF8MB4
  ;
  sqlStatement
   ddlStatement
    createTable
     CREATE
     TABLE
     tableName
      fullId
       uid
        `auth_realm_clients`
     createDefinitions
      (
      createDefinition
       uid
        `pk_realm`
       columnDefinition
        dataType
         int
         unsigned
        columnConstraint
         nullNotnull
          NOT
          NULL
        columnConstraint
         DEFAULT
         defaultValue
          constant
           stringLiteral
            '0'
      ,
      createDefinition
       uid
        `fk_realm`
       columnDefinition
        dataType
         int
         unsigned
        columnConstraint
         DEFAULT
         defaultValue
          NULL
      ,
      createDefinition
       uid
        `client_id`
       columnDefinition
        dataType
         varchar
         lengthOneDimension
          (
          decimalLiteral
           150
          )
        columnConstraint
         nullNotnull
          NOT
          NULL
      ,
      createDefinition
       uid
        `client_secret`
       columnDefinition
        dataType
         blob
        columnConstraint
         nullNotnull
          NOT
          NULL
      ,
      createDefinition
       tableConstraint
        PRIMARY
        KEY
        indexColumnNames
         (
         indexColumnName
          uid
           `pk_realm`
         )
      ,
      createDefinition
       indexColumnDefinition
        KEY
        uid
         `auth_realms_auth_realm_clients`
        indexColumnNames
         (
         indexColumnName
          uid
           `fk_realm`
         )
      )
     tableOption
      START
      TRANSACTION
     tableOption
      ENGINE
      =
      engineName
       engineNameBase
        InnoDB
     tableOption
      DEFAULT
      charSet
       CHARSET
      =
      charsetName
       charsetNameBase
        latin1
  ;
  sqlStatement
   ddlStatement
    createTable
     create
     table
     tableName
      fullId
       uid
        `site_checker_b_sonet_group_favorites`
     createDefinitions
      (
      createDefinition
       uid
        simpleId
         USER_ID
       columnDefinition
        dataType
         int
         lengthOneDimension
          (
          decimalLiteral
           11
          )
        columnConstraint
         nullNotnull
          not
          null
      ,
      createDefinition
       uid
        simpleId
         GROUP_ID
       columnDefinition
        dataType
         int
         lengthOneDimension
          (
          decimalLiteral
           11
          )
        columnConstraint
         nullNotnull
          not
          null
      ,
      createDefinition
       uid
        simpleId
         scalarFunctionName
          DATE_ADD
       columnDefinition
        dataType
         datetime
        columnConstraint
         DEFAULT
         defaultValue
          NULL
      ,
      createDefinition
       tableConstraint
        primary
        key
        indexColumnNames
         (
         indexColumnName
          uid
           simpleId
            USER_ID
         ,
         indexColumnName
          uid
           simpleId
            GROUP_ID
         )
      )
  ;
  sqlStatement
   ddlStatement
    createTable
     CREATE
     TABLE
     tableName
      fullId
       uid
        `test_table\\`
     createDefinitions
      (
      createDefinition
       uid
        simpleId
         id
       columnDefinition
        dataType
         INT
         lengthOneDimension
          (
          decimalLiteral
           11
          )
        columnConstraint
         nullNotnull
          NOT
          NULL
      ,
      createDefinition
       tableConstraint
        PRIMARY
        KEY
        indexColumnNames
         (
         indexColumnName
          uid
           `id`
         )
      )
     tableOption
      ENGINE
      =
      engineName
       engineNameBase
        INNODB
  ;
  sqlStatement
   ddlStatement
    createTable
     CREATE
     TABLE
     tableName
      fullId
       uid
        `\\test_table`
     createDefinitions
      (
      createDefinition
       uid
        simpleId
         id
       columnDefinition
        dataType
         INT
         lengthOneDimension
          (
          decimalLiteral
           11
          )
        columnConstraint
         nullNotnull
          NOT
          NULL
      ,
      createDefinition
       tableConstraint
        PRIMARY
        KEY
        indexColumnNames
         (
         indexColumnName
          uid
           `id`
         )
      )
     tableOption
      ENGINE
      =
      engineName
       engineNameBase
        INNODB
  ;
  sqlStatement
   ddlStatement
    createTable
     CREATE
     TABLE
     tableName
      fullId
       uid
        `\\test\\_table\\`
     createDefinitions
      (
      createDefinition
       uid
        simpleId
         id
       columnDefinition
        dataType
         INT
         lengthOneDimension
          (
          decimalLiteral
           11
          )
        columnConstraint
         nullNotnull
          NOT
          NULL
      ,
      createDefinition
       tableConstraint
        PRIMARY
        KEY
        indexColumnNames
         (
         indexColumnName
          uid
           `id`
         )
      )
     tableOption
      ENGINE
      =
      engineName
       engineNameBase
        INNODB
  ;
  sqlStatement
   ddlStatement
    renameTable
     RENAME
     TABLE
     renameTableClause
      tableName
       fullId
        uid
         simpleId
          old_table
      TO
      tableName
       fullId
        uid
         simpleId
          tmp_table
     ,
     renameTableClause
      tableName
       fullId
        uid
         simpleId
          new_table
      TO
      tableName
       fullId
        uid
         simpleId
          old_table
     ,
     renameTableClause
      tableName
       fullId
        uid
         simpleId
          tmp_table
      TO
      tableName
       fullId
        uid
         simpleId
          new_table
  ;
  sqlStatement
   ddlStatement
    renameTable
     RENAME
     TABLE
     renameTableClause
      tableName
       fullId
        uid
         simpleId
          table_b
      TO
      tableName
       fullId
        uid
         simpleId
          table_a
  ;
  sqlStatement
   ddlStatement
    renameTable
     RENAME
     TABLE
     renameTableClause
      tableName
       fullId
        uid
         simpleId
          current_db
        .tbl_name
      TO
      tableName
       fullId
        uid
         simpleId
          other_db
        .tbl_name
  ;
  sqlStatement
   ddlStatement
    renameTable
     rename
     table
     renameTableClause
      tableName
       fullId
        uid
         simpleId
          debezium_all_types_old
      to
      tableName
       fullId
        uid
         simpleId
          debezium_all_types
     ,
     renameTableClause
      tableName
       fullId
        uid
         simpleId
          test_json_object_old
      waitNowaitClause
       wait
       decimalLiteral
        10
      to
      tableName
       fullId
        uid
         simpleId
          test_json_object
  ;
  sqlStatement
   ddlStatement
    renameTable
     RENAME
     TABLE
     ifExists
      IF
      EXISTS
     renameTableClause
      tableName
       fullId
        uid
         simpleId
          EMPLOYEE
      TO
      tableName
       fullId
        uid
         simpleId
          employee
  ;
  sqlStatement
   ddlStatement
    truncateTable
     truncate
     table
     tableName
      fullId
       uid
        simpleId
         t1
  ;
  sqlStatement
   ddlStatement
    truncateTable
     truncate
     tableName
      fullId
       uid
        simpleId
         parent_table
  ;
  sqlStatement
   ddlStatement
    truncateTable
     truncate
     tableName
      fullId
       uid
        `#`
  ;
  sqlStatement
   ddlStatement
    truncateTable
     truncate
     tableName
      fullId
       uid
        `#!^%$`
  ;
  sqlStatement
   ddlStatement
    truncateTable
     truncate
     table
     tableName
      fullId
       uid
        simpleId
         tbl_without_pk
     waitNowaitClause
      nowait
  ;
  sqlStatement
   ddlStatement
    createDatabase
     create
     database
     uid
      simpleId
       somedb
  ;
  sqlStatement
   ddlStatement
    createDatabase
     create
     schema
     ifNotExists
      if
      not
      exists
     uid
      simpleId
       myschema
  ;
  sqlStatement
   ddlStatement
    createDatabase
     create
     schema
     uid
      `select`
     createDatabaseOption
      default
      charSet
       character
       set
      =
      charsetName
       charsetNameBase
        utf8
  ;
  sqlStatement
   ddlStatement
    createDatabase
     create
     database
     ifNotExists
      if
      not
      exists
     uid
      `current_date`
     createDatabaseOption
      charSet
       character
       set
      charsetName
       charsetNameBase
        cp1251
  ;
  sqlStatement
   ddlStatement
    createDatabase
     create
     database
     uid
      simpleId
       privilegesBase
        super
     createDatabaseOption
      default
      charSet
       character
       set
      charsetName
       charsetNameBase
        utf8
     createDatabaseOption
      collate
      =
      collationName
       uid
        simpleId
         utf8_bin
     createDatabaseOption
      charSet
       character
       set
      charsetName
       charsetNameBase
        utf8
     createDatabaseOption
      collate
      collationName
       uid
        simpleId
         utf8_bin
  ;
  sqlStatement
   ddlStatement
    createDatabase
     create
     database
     uid
      simpleId
       db_with_character_set_eq
     createDatabaseOption
      charSet
       character
       set
      =
      DEFAULT
  ;
  sqlStatement
   ddlStatement
    createDatabase
     create
     database
     uid
      simpleId
       db_with_character_set
     createDatabaseOption
      charSet
       character
       set
      default
  ;
  sqlStatement
   ddlStatement
    createEvent
     create
     ownerStatement
      definer
      =
      userName
       simpleUserName
        keywordsCanBeId
         current_user
     event
     ifNotExists
      if
      not
      exists
     fullId
      uid
       simpleId
        someevent
     on
     schedule
     scheduleExpression
      at
      timestampValue
       current_timestamp
      intervalExpr
       +
       interval
       decimalLiteral
        30
       intervalType
        intervalTypeBase
         minute
     on
     completion
     preserve
     do
     routineBody
      blockStatement
       begin
       procedureSqlStatement
        sqlStatement
         dmlStatement
          insertStatement
           insert
           into
           tableName
            fullId
             uid
              simpleId
               test
             .t1
           insertStatementValue
            values
            (
            expressionsWithDefaults
             expressionOrDefault
              expression
               predicate
                expressionAtom
                 constant
                  decimalLiteral
                   33
            )
            ,
            (
            expressionsWithDefaults
             expressionOrDefault
              expression
               predicate
                expressionAtom
                 constant
                  decimalLiteral
                   111
            )
        ;
       procedureSqlStatement
        sqlStatement
         dmlStatement
          selectStatement
           querySpecification
            select
            selectElements
             *
            fromClause
             from
             tableSources
              tableSource
               tableSourceItem
                tableName
                 fullId
                  uid
                   simpleId
                    test
                  .t1
        ;
       end
  ;
  sqlStatement
   ddlStatement
    createEvent
     create
     ownerStatement
      definer
      =
      userName
       simpleUserName
        'ivan'
       hostName
        @'%'
     event
     fullId
      uid
       simpleId
        testevent1
     on
     schedule
     scheduleExpression
      every
      decimalLiteral
       1
      intervalType
       intervalTypeBase
        hour
      ends
      timestampValue
       stringLiteral
        '2016-11-05 23:59:00'
     do
     routineBody
      blockStatement
       begin
       procedureSqlStatement
        sqlStatement
         dmlStatement
          selectStatement
           querySpecification
            select
            selectElements
             *
            fromClause
             from
             tableSources
              tableSource
               tableSourceItem
                tableName
                 fullId
                  uid
                   simpleId
                    test
                  .t2
        ;
       end
  ;
  sqlStatement
   ddlStatement
    createEvent
     create
     ownerStatement
      definer
      =
      userName
       currentUserExpression
        current_user
        (
        )
     event
     fullId
      uid
       simpleId
        testevent2
     on
     schedule
     scheduleExpression
      at
      timestampValue
       stringLiteral
        '2016-11-03 23:59:00'
     do
     routineBody
      blockStatement
       begin
       procedureSqlStatement
        sqlStatement
         dmlStatement
          updateStatement
           singleUpdateStatement
            update
            tableName
             fullId
              uid
               simpleId
                test
              .t2
            set
            updatedElement
             fullColumnName
              uid
               simpleId
                1c
             =
             expression
              predicate
               expressionAtom
                expressionAtom
                 fullColumnName
                  uid
                   simpleId
                    1c
                mathOperator
                 +
                expressionAtom
                 constant
                  decimalLiteral
                   1
        ;
       end
  ;
  sqlStatement
   ddlStatement
    createIndex
     create
     index
     uid
      simpleId
       index1
     on
     tableName
      fullId
       uid
        simpleId
         t1
     indexColumnNames
      (
      indexColumnName
       uid
        simpleId
         col1
      )
     indexOption
      comment
      'test index'
     indexOption
      comment
      'some test'
     indexOption
      indexType
       using
       btree
  ;
  sqlStatement
   ddlStatement
    createIndex
     create
     unique
     index
     uid
      simpleId
       index2
     indexType
      using
      btree
     on
     tableName
      fullId
       uid
        simpleId
         t2
     indexColumnNames
      (
      indexColumnName
       uid
        simpleId
         1c
       desc
      ,
      indexColumnName
       uid
        `_`
       asc
      )
  ;
  sqlStatement
   ddlStatement
    createIndex
     create
     index
     uid
      simpleId
       index3
     indexType
      using
      hash
     on
     tableName
      fullId
       uid
        simpleId
         antlr_tokens
     indexColumnNames
      (
      indexColumnName
       uid
        simpleId
         token
       (
       decimalLiteral
        30
       )
       asc
      )
  ;
  sqlStatement
   ddlStatement
    createIndex
     create
     index
     uid
      simpleId
       index4
     on
     tableName
      fullId
       uid
        simpleId
         t1
     indexColumnNames
      (
      indexColumnName
       uid
        simpleId
         col1
      )
     waitNowaitClause
      nowait
     indexOption
      comment
      'test index'
     indexOption
      indexType
       using
       btree
  ;
  sqlStatement
   ddlStatement
    createIndex
     create
     index
     uid
      simpleId
       ix_add_test_col1
     on
     tableName
      fullId
       uid
        simpleId
         add_test
     indexColumnNames
      (
      indexColumnName
       uid
        simpleId
         col1
      )
     indexOption
      comment
      'test index'
     indexOption
      indexType
       using
       btree
  ;
  sqlStatement
   ddlStatement
    createIndex
     create
     index
     uid
      simpleId
       myindex
     on
     tableName
      fullId
       uid
        simpleId
         t1
     indexColumnNames
      (
      indexColumnName
       uid
        simpleId
         col1
      )
     indexOption
      comment
      'test index'
     indexOption
      comment
      'some test'
     indexOption
      indexType
       using
       btree
  ;
  sqlStatement
   ddlStatement
    createIndex
     create
     orReplace
      or
      replace
     index
     uid
      simpleId
       myindex
     on
     tableName
      fullId
       uid
        simpleId
         t1
     indexColumnNames
      (
      indexColumnName
       uid
        simpleId
         col1
      )
     indexOption
      comment
      'test index'
     indexOption
      comment
      'some test'
     indexOption
      indexType
       using
       btree
  ;
  sqlStatement
   ddlStatement
    createLogfileGroup
     CREATE
     LOGFILE
     GROUP
     uid
      simpleId
       lg1
     ADD
     UNDOFILE
     'undo.dat'
     INITIAL_SIZE
     =
     fileSizeLiteral
      10M
     ENGINE
     =
     engineName
      engineNameBase
       InnoDB
  ;
  sqlStatement
   ddlStatement
    createLogfileGroup
     CREATE
     LOGFILE
     GROUP
     uid
      simpleId
       lg1
     ADD
     UNDOFILE
     'undo.dat'
     INITIAL_SIZE
     =
     fileSizeLiteral
      decimalLiteral
       10000000
     ENGINE
     =
     engineName
      engineNameBase
       NDB
  ;
  sqlStatement
   ddlStatement
    createServer
     CREATE
     SERVER
     uid
      simpleId
       s
     FOREIGN
     DATA
     WRAPPER
     mysql
     OPTIONS
     (
     serverOption
      USER
      'Remote'
     ,
     serverOption
      HOST
      '192.168.1.106'
     ,
     serverOption
      DATABASE
      'test'
     )
  ;
  sqlStatement
   ddlStatement
    createTablespaceNdb
     create
     tablespace
     uid
      simpleId
       tblsp1
     add
     datafile
     'tblsp_work1'
     use
     logfile
     group
     uid
      simpleId
       lg_1
     initial_size
     =
     fileSizeLiteral
      4G
     engine
     engineName
      engineNameBase
       MYISAM
  ;
  sqlStatement
   ddlStatement
    createTablespaceNdb
     create
     tablespace
     uid
      simpleId
       tblsp2
     add
     datafile
     'tblsp_proj1'
     use
     logfile
     group
     uid
      simpleId
       lg_6
     autoextend_size
     =
     fileSizeLiteral
      decimalLiteral
       4294
     max_size
     =
     fileSizeLiteral
      decimalLiteral
       2294967296
     engine
     engineName
      engineNameBase
       NDB
  ;
  sqlStatement
   ddlStatement
    createTrigger
     create
     trigger
     fullId
      uid
       simpleId
        trg_my1
     before
     delete
     on
     tableName
      fullId
       uid
        simpleId
         test
       .t1
     for
     each
     row
     routineBody
      blockStatement
       begin
       procedureSqlStatement
        sqlStatement
         dmlStatement
          insertStatement
           insert
           into
           tableName
            fullId
             uid
              simpleId
               log_table
           insertStatementValue
            values
            (
            expressionsWithDefaults
             expressionOrDefault
              expression
               predicate
                expressionAtom
                 constant
                  stringLiteral
                   "delete row from test.t1"
            )
        ;
       procedureSqlStatement
        sqlStatement
         dmlStatement
          insertStatement
           insert
           into
           tableName
            fullId
             uid
              simpleId
               t4
           insertStatementValue
            values
            (
            expressionsWithDefaults
             expressionOrDefault
              expression
               predicate
                expressionAtom
                 fullColumnName
                  uid
                   simpleId
                    old
                  dottedId
                   .col1
             ,
             expressionOrDefault
              expression
               predicate
                expressionAtom
                 expressionAtom
                  fullColumnName
                   uid
                    simpleId
                     old
                   dottedId
                    .col1
                 mathOperator
                  +
                 expressionAtom
                  constant
                   decimalLiteral
                    5
             ,
             expressionOrDefault
              expression
               predicate
                expressionAtom
                 expressionAtom
                  fullColumnName
                   uid
                    simpleId
                     old
                   dottedId
                    .col1
                 mathOperator
                  +
                 expressionAtom
                  constant
                   decimalLiteral
                    7
            )
        ;
       end
  ;
  sqlStatement
   ddlStatement
    createTrigger
     create
     ownerStatement
      definer
      =
      userName
       currentUserExpression
        current_user
        (
        )
     trigger
     fullId
      uid
       simpleId
        trg_my2
     after
     insert
     on
     tableName
      fullId
       uid
        simpleId
         test
       .t2
     for
     each
     row
     routineBody
      sqlStatement
       dmlStatement
        insertStatement
         insert
         into
         tableName
          fullId
           uid
            simpleId
             log_table
         insertStatementValue
          values
          (
          expressionsWithDefaults
           expressionOrDefault
            expression
             predicate
              expressionAtom
               functionCall
                scalarFunctionName
                 functionNameBase
                  concat
                (
                functionArgs
                 constant
                  stringLiteral
                   "inserted into table test.t2 values: (1c, _) = ("
                 ,
                 functionCall
                  specificFunction
                   cast
                   (
                   expression
                    predicate
                     expressionAtom
                      fullColumnName
                       uid
                        simpleId
                         NEW
                       dottedId
                        .col1
                   as
                   convertedDataType
                    char
                    lengthOneDimension
                     (
                     decimalLiteral
                      100
                     )
                   )
                 ,
                 constant
                  stringLiteral
                   ", "
                 ,
                 functionCall
                  specificFunction
                   convert
                   (
                   expression
                    predicate
                     expressionAtom
                      fullColumnName
                       uid
                        simpleId
                         new
                       dottedId
                        .
                        uid
                         `_`
                   ,
                   convertedDataType
                    char
                    lengthOneDimension
                     (
                     decimalLiteral
                      100
                     )
                   )
                 ,
                 constant
                  stringLiteral
                   ")"
                )
          )
  ;
  sqlStatement
   ddlStatement
    createTrigger
     CREATE
     TRIGGER
     fullId
      uid
       simpleId
        mask_private_data
     BEFORE
     INSERT
     ON
     tableName
      fullId
       uid
        simpleId
         users
     FOR
     EACH
     ROW
     routineBody
      blockStatement
       BEGIN
       procedureSqlStatement
        sqlStatement
         administrationStatement
          setStatement
           SET
           fullId
            uid
             simpleId
              NEW
            .phone
           =
           expression
            predicate
             expressionAtom
              functionCall
               scalarFunctionName
                functionNameBase
                 CONCAT
               (
               functionArgs
                constant
                 stringLiteral
                  '555'
                ,
                fullColumnName
                 uid
                  simpleId
                   NEW
                 dottedId
                  .id
               )
        ;
       END
  ;
  sqlStatement
   ddlStatement
    createTrigger
     CREATE
     ownerStatement
      DEFINER
      =
      userName
       simpleUserName
        `ctlplane`
       hostName
        @`%`
     TRIGGER
     fullId
      uid
       `write_key_add`
     AFTER
     INSERT
     ON
     tableName
      fullId
       uid
        `sources`
     FOR
     EACH
     ROW
     routineBody
      blockStatement
       BEGIN
       declareVariable
        DECLARE
        uidList
         uid
          simpleId
           i
         ,
         uid
          simpleId
           n
        dataType
         INT
        DEFAULT
        expression
         predicate
          expressionAtom
           constant
            decimalLiteral
             0
       ;
       procedureSqlStatement
        sqlStatement
         administrationStatement
          setStatement
           SET
           variableClause
            uid
             simpleId
              n
           =
           expression
            predicate
             expressionAtom
              functionCall
               scalarFunctionName
                functionNameBase
                 JSON_LENGTH
               (
               functionArgs
                functionCall
                 specificFunction
                  CAST
                  (
                  expression
                   predicate
                    expressionAtom
                     functionCall
                      specificFunction
                       CONVERT
                       (
                       expression
                        predicate
                         expressionAtom
                          fullColumnName
                           uid
                            simpleId
                             NEW
                           dottedId
                            .write_keys
                       USING
                       charsetName
                        charsetNameBase
                         utf8mb4
                       )
                  AS
                  convertedDataType
                   JSON
                  )
               )
        ;
       procedureSqlStatement
        sqlStatement
         administrationStatement
          setStatement
           SET
           variableClause
            uid
             simpleId
              campaign_id
           =
           expression
            predicate
             expressionAtom
              expressionAtom
               fullColumnName
                uid
                 simpleId
                  NEW
                dottedId
                 .write_keys
              jsonOperator
               -
               >
               >
              expressionAtom
               constant
                stringLiteral
                 '$.campaign_id'
        ;
       procedureSqlStatement
        compoundStatement
         whileStatement
          WHILE
          expression
           predicate
            predicate
             expressionAtom
              fullColumnName
               uid
                simpleId
                 i
            comparisonOperator
             <
            predicate
             expressionAtom
              fullColumnName
               uid
                simpleId
                 n
          DO
          procedureSqlStatement
           sqlStatement
            dmlStatement
             insertStatement
              INSERT
              INTO
              tableName
               fullId
                uid
                 simpleId
                  source_id_write_key_mapping
              (
              uidList
               uid
                simpleId
                 source_id
               ,
               uid
                simpleId
                 write_key
              )
              insertStatementValue
               VALUES
               (
               expressionsWithDefaults
                expressionOrDefault
                 expression
                  predicate
                   expressionAtom
                    fullColumnName
                     uid
                      simpleId
                       NEW
                     dottedId
                      .id
                ,
                expressionOrDefault
                 expression
                  predicate
                   expressionAtom
                    functionCall
                     scalarFunctionName
                      functionNameBase
                       JSON_UNQUOTE
                     (
                     functionArgs
                      functionCall
                       scalarFunctionName
                        functionNameBase
                         JSON_EXTRACT
                       (
                       functionArgs
                        functionCall
                         specificFunction
                          CAST
                          (
                          expression
                           predicate
                            expressionAtom
                             functionCall
                              specificFunction
                               CONVERT
                               (
                               expression
                                predicate
                                 expressionAtom
                                  fullColumnName
                                   uid
                                    simpleId
                                     NEW
                                   dottedId
                                    .write_keys
                               USING
                               charsetName
                                charsetNameBase
                                 utf8mb4
                               )
                          AS
                          convertedDataType
                           JSON
                          )
                        ,
                        functionCall
                         scalarFunctionName
                          functionNameBase
                           CONCAT
                         (
                         functionArgs
                          constant
                           stringLiteral
                            '$['
                          ,
                          fullColumnName
                           uid
                            simpleId
                             i
                          ,
                          constant
                           stringLiteral
                            ']'
                         )
                       )
                     )
               )
              ON
              DUPLICATE
              KEY
              UPDATE
              updatedElement
               fullColumnName
                uid
                 simpleId
                  source_id
               =
               expression
                predicate
                 expressionAtom
                  fullColumnName
                   uid
                    simpleId
                     NEW
                   dottedId
                    .ID
              ,
              updatedElement
               fullColumnName
                uid
                 simpleId
                  write_key
               =
               expression
                predicate
                 expressionAtom
                  functionCall
                   scalarFunctionName
                    functionNameBase
                     JSON_UNQUOTE
                   (
                   functionArgs
                    functionCall
                     scalarFunctionName
                      functionNameBase
                       JSON_EXTRACT
                     (
                     functionArgs
                      functionCall
                       specificFunction
                        CAST
                        (
                        expression
                         predicate
                          expressionAtom
                           functionCall
                            specificFunction
                             CONVERT
                             (
                             expression
                              predicate
                               expressionAtom
                                fullColumnName
                                 uid
                                  simpleId
                                   NEW
                                 dottedId
                                  .write_keys
                             USING
                             charsetName
                              charsetNameBase
                               utf8mb4
                             )
                        AS
                        convertedDataType
                         JSON
                        )
                      ,
                      functionCall
                       scalarFunctionName
                        functionNameBase
                         CONCAT
                       (
                       functionArgs
                        constant
                         stringLiteral
                          '$['
                        ,
                        fullColumnName
                         uid
                          simpleId
                           i
                        ,
                        constant
                         stringLiteral
                          ']'
                       )
                     )
                   )
           ;
          procedureSqlStatement
           sqlStatement
            administrationStatement
             setStatement
              SET
              variableClause
               uid
                simpleId
                 i
              =
              expression
               predicate
                expressionAtom
                 expressionAtom
                  fullColumnName
                   uid
                    simpleId
                     i
                 mathOperator
                  +
                 expressionAtom
                  constant
                   decimalLiteral
                    1
           ;
          END
          WHILE
        ;
       END
  sqlStatement
   ddlStatement
    createTrigger
     CREATE
     TRIGGER
     fullId
      uid
       `rtl_trigger_before_update`
     BEFORE
     UPDATE
     ON
     tableName
      fullId
       uid
        simpleId
         all_student_educator
     FOR
     EACH
     ROW
     routineBody
      blockStatement
       BEGIN
       procedureSqlStatement
        compoundStatement
         ifStatement
          IF
          expression
           expression
            expression
             predicate
              predicate
               expressionAtom
                fullColumnName
                 uid
                  simpleId
                   NEW
                 dottedId
                  .student_words_read_total
              is
              nullNotnull
               not
               null
            logicalOperator
             AND
            expression
             predicate
              predicate
               expressionAtom
                fullColumnName
                 uid
                  simpleId
                   NEW
                 dottedId
                  .student_words_read_total
              comparisonOperator
               >
               =
              predicate
               expressionAtom
                constant
                 decimalLiteral
                  3
           logicalOperator
            AND
           expression
            predicate
             predicate
              expressionAtom
               fullColumnName
                uid
                 simpleId
                  NEW
                dottedId
                 .badge_3_words_read_flag
             comparisonOperator
              =
             predicate
              expressionAtom
               constant
                decimalLiteral
                 0
          THEN
          procedureSqlStatement
           sqlStatement
            administrationStatement
             setStatement
              SET
              fullId
               uid
                simpleId
                 NEW
               .badge_flag
              =
              expression
               predicate
                expressionAtom
                 constant
                  decimalLiteral
                   1
              ,
              fullId
               uid
                simpleId
                 NEW
               .badge_student_total
              =
              expression
               predicate
                expressionAtom
                 expressionAtom
                  fullColumnName
                   uid
                    simpleId
                     NEW
                   dottedId
                    .badge_student_total
                 mathOperator
                  +
                 expressionAtom
                  constant
                   decimalLiteral
                    1
              ,
              fullId
               uid
                simpleId
                 NEW
               .badge_datetime
              =
              expression
               predicate
                expressionAtom
                 functionCall
                  scalarFunctionName
                   now
                  (
                  )
           ;
          procedureSqlStatement
           sqlStatement
            dmlStatement
             insertStatement
              INSERT
              IGNORE
              INTO
              tableName
               fullId
                uid
                 simpleId
                  user_platform_badge
              (
              uidList
               uid
                simpleId
                 platform_badge_id
               ,
               uid
                simpleId
                 user_id
              )
              insertStatementValue
               VALUES
               (
               expressionsWithDefaults
                expressionOrDefault
                 expression
                  predicate
                   expressionAtom
                    constant
                     decimalLiteral
                      3
                ,
                expressionOrDefault
                 expression
                  predicate
                   expressionAtom
                    fullColumnName
                     uid
                      simpleId
                       NEW
                     dottedId
                      .student_id
               )
           ;
          END
          IF
        ;
       END
  sqlStatement
   ddlStatement
    createTrigger
     create
     orReplace
      or
      replace
     trigger
     fullId
      uid
       simpleId
        trg_my1
     before
     delete
     on
     tableName
      fullId
       uid
        simpleId
         test
       .t1
     for
     each
     row
     routineBody
      blockStatement
       begin
       procedureSqlStatement
        sqlStatement
         dmlStatement
          insertStatement
           insert
           into
           tableName
            fullId
             uid
              simpleId
               log_table
           insertStatementValue
            values
            (
            expressionsWithDefaults
             expressionOrDefault
              expression
               predicate
                expressionAtom
                 constant
                  stringLiteral
                   "delete row from test.t1"
            )
        ;
       procedureSqlStatement
        sqlStatement
         dmlStatement
          insertStatement
           insert
           into
           tableName
            fullId
             uid
              simpleId
               t4
           insertStatementValue
            values
            (
            expressionsWithDefaults
             expressionOrDefault
              expression
               predicate
                expressionAtom
                 fullColumnName
                  uid
                   simpleId
                    old
                  dottedId
                   .col1
             ,
             expressionOrDefault
              expression
               predicate
                expressionAtom
                 expressionAtom
                  fullColumnName
                   uid
                    simpleId
                     old
                   dottedId
                    .col1
                 mathOperator
                  +
                 expressionAtom
                  constant
                   decimalLiteral
                    5
             ,
             expressionOrDefault
              expression
               predicate
                expressionAtom
                 expressionAtom
                  fullColumnName
                   uid
                    simpleId
                     old
                   dottedId
                    .col1
                 mathOperator
                  +
                 expressionAtom
                  constant
                   decimalLiteral
                    7
            )
        ;
       end
  ;
  sqlStatement
   ddlStatement
    createView
     create
     orReplace
      or
      replace
     view
     fullId
      uid
       simpleId
        my_view1
     as
     selectStatement
      querySpecificationNointo
       select
       selectElements
        selectElement
         expression
          predicate
           expressionAtom
            constant
             decimalLiteral
              1
       fromClause
      unionStatement
       union
       querySpecificationNointo
        select
        selectElements
         selectElement
          expression
           predicate
            expressionAtom
             constant
              decimalLiteral
               2
        fromClause
        limitClause
         limit
         limitClauseAtom
          decimalLiteral
           0
         ,
         limitClauseAtom
          decimalLiteral
           5
  ;
  sqlStatement
   ddlStatement
    createView
     create
     algorithm
     =
     merge
     view
     fullId
      uid
       simpleId
        my_view2
     (
     uidList
      uid
       simpleId
        col1
      ,
      uid
       simpleId
        col2
     )
     as
     selectStatement
      querySpecification
       select
       selectElements
        *
       fromClause
        from
        tableSources
         tableSource
          tableSourceItem
           tableName
            fullId
             uid
              simpleId
               t2
     with
     check
     option
  ;
  sqlStatement
   ddlStatement
    createView
     create
     orReplace
      or
      replace
     ownerStatement
      definer
      =
      userName
       simpleUserName
        'ivan'
       hostName
        @'%'
     view
     fullId
      uid
       simpleId
        my_view3
     as
     selectStatement
      querySpecification
       select
       selectElements
        selectElement
         functionCall
          aggregateWindowedFunction
           count
           (
           *
           )
       fromClause
        from
        tableSources
         tableSource
          tableSourceItem
           tableName
            fullId
             uid
              simpleId
               t3
  ;
  sqlStatement
   ddlStatement
    createView
     create
     orReplace
      or
      replace
     ownerStatement
      definer
      =
      userName
       simpleUserName
        keywordsCanBeId
         current_user
     sql
     security
     invoker
     view
     fullId
      uid
       simpleId
        my_view4
     (
     uidList
      uid
       simpleId
        c1
      ,
      uid
       simpleId
        1c
      ,
      uid
       simpleId
        _
      ,
      uid
       simpleId
        c1_2
     )
     as
     selectStatement
      querySpecification
       select
       selectElements
        *
       fromClause
        from
        tableSources
         tableSource
          tableSourceItem
           (
           tableSources
            tableSource
             tableSourceItem
              tableName
               fullId
                uid
                 simpleId
                  t1
              as
              uid
               simpleId
                tt1
            ,
            tableSource
             tableSourceItem
              tableName
               fullId
                uid
                 simpleId
                  t2
              as
              uid
               simpleId
                tt2
           )
          joinPart
           inner
           join
           tableSourceItem
            tableName
             fullId
              uid
               simpleId
                t1
           on
           expression
            predicate
             predicate
              expressionAtom
               fullColumnName
                uid
                 simpleId
                  t1
                dottedId
                 .col1
             comparisonOperator
              =
             predicate
              expressionAtom
               fullColumnName
                uid
                 simpleId
                  tt1
                dottedId
                 .col1
  ;
  sqlStatement
   ddlStatement
    createView
     create
     view
     fullId
      uid
       simpleId
        v_some_table
     as
     (
     withClause
      with
      commonTableExpressions
       cteName
        uid
         simpleId
          a
       as
       (
       dmlStatement
        selectStatement
         querySpecification
          select
          selectElements
           *
          fromClause
           from
           tableSources
            tableSource
             tableSourceItem
              tableName
               fullId
                uid
                 simpleId
                  some_table
       )
     selectStatement
      querySpecification
       select
       selectElements
        *
       fromClause
        from
        tableSources
         tableSource
          tableSourceItem
           tableName
            fullId
             uid
              simpleId
               a
     )
  ;
  sqlStatement
   ddlStatement
    createFunction
     CREATE
     orReplace
      OR
      REPLACE
     FUNCTION
     fullId
      uid
       `func1`
     (
     )
     RETURNS
     dataType
      varchar
      lengthOneDimension
       (
       decimalLiteral
        5
       )
      charSet
       CHARSET
      charsetName
       charsetNameBase
        utf8
      COLLATE
      collationName
       uid
        simpleId
         utf8_unicode_ci
     routineBody
      blockStatement
       BEGIN
       procedureSqlStatement
        compoundStatement
         returnStatement
          RETURN
          expression
           predicate
            expressionAtom
             constant
              stringLiteral
               '12345'
        ;
       END
  ;
  sqlStatement
   ddlStatement
    createFunction
     CREATE
     FUNCTION
     fullId
      uid
       `uuidToBinary`
     (
     functionParameter
      uid
       simpleId
        _uuid
      dataType
       BINARY
       lengthOneDimension
        (
        decimalLiteral
         36
        )
     )
     RETURNS
     dataType
      binary
      lengthOneDimension
       (
       decimalLiteral
        16
       )
     routineOption
      DETERMINISTIC
     routineOption
      SQL
      SECURITY
      INVOKER
     returnStatement
      RETURN
      expression
       predicate
        expressionAtom
         functionCall
          scalarFunctionName
           functionNameBase
            UNHEX
          (
          functionArgs
           functionCall
            scalarFunctionName
             functionNameBase
              CONCAT
            (
            functionArgs
             functionCall
              scalarFunctionName
               SUBSTR
              (
              functionArgs
               fullColumnName
                uid
                 simpleId
                  _uuid
               ,
               constant
                decimalLiteral
                 15
               ,
               constant
                decimalLiteral
                 4
              )
             ,
             functionCall
              scalarFunctionName
               SUBSTR
              (
              functionArgs
               fullColumnName
                uid
                 simpleId
                  _uuid
               ,
               constant
                decimalLiteral
                 10
               ,
               constant
                decimalLiteral
                 4
              )
             ,
             functionCall
              scalarFunctionName
               SUBSTR
              (
              functionArgs
               fullColumnName
                uid
                 simpleId
                  _uuid
               ,
               constant
                decimalLiteral
                 1
               ,
               constant
                decimalLiteral
                 8
              )
             ,
             functionCall
              scalarFunctionName
               SUBSTR
              (
              functionArgs
               fullColumnName
                uid
                 simpleId
                  _uuid
               ,
               constant
                decimalLiteral
                 20
               ,
               constant
                decimalLiteral
                 4
              )
             ,
             functionCall
              scalarFunctionName
               SUBSTR
              (
              functionArgs
               fullColumnName
                uid
                 simpleId
                  _uuid
               ,
               constant
                decimalLiteral
                 25
              )
            )
          )
  sqlStatement
   ddlStatement
    createFunction
     CREATE
     FUNCTION
     ifNotExists
      IF
      NOT
      EXISTS
     fullId
      uid
       simpleId
        myfunc
     (
     functionParameter
      uid
       simpleId
        a
      dataType
       INT
     )
     RETURNS
     dataType
      INT
     routineBody
      blockStatement
       BEGIN
       declareVariable
        DECLARE
        uidList
         uid
          simpleId
           result
        dataType
         INT
       ;
       procedureSqlStatement
        sqlStatement
         administrationStatement
          setStatement
           SET
           variableClause
            uid
             simpleId
              result
           =
           expression
            predicate
             expressionAtom
              fullColumnName
               uid
                simpleId
                 scalarFunctionName
                  UTC_TIMESTAMP
        ;
       procedureSqlStatement
        compoundStatement
         returnStatement
          RETURN
          expression
           predicate
            expressionAtom
             fullColumnName
              uid
               simpleId
                result
        ;
       END
  ;
  sqlStatement
   ddlStatement
    createTable
     CREATE
     TABLE
     tableName
      fullId
       uid
        `global_priv`
     createDefinitions
      (
      createDefinition
       uid
        `Host`
       columnDefinition
        dataType
         CHAR
         lengthOneDimension
          (
          decimalLiteral
           60
          )
         COLLATE
         collationName
          uid
           simpleId
            utf8_bin
        columnConstraint
         nullNotnull
          NOT
          NULL
        columnConstraint
         DEFAULT
         defaultValue
          constant
           stringLiteral
            ''
      ,
      createDefinition
       uid
        `User`
       columnDefinition
        dataType
         CHAR
         lengthOneDimension
          (
          decimalLiteral
           80
          )
         COLLATE
         collationName
          uid
           simpleId
            utf8_bin
        columnConstraint
         nullNotnull
          NOT
          NULL
        columnConstraint
         DEFAULT
         defaultValue
          constant
           stringLiteral
            ''
      ,
      createDefinition
       uid
        `Privilege`
       columnDefinition
        dataType
         LONGTEXT
         charSet
          CHARACTER
          SET
         charsetName
          charsetNameBase
           utf8mb4
         COLLATE
         collationName
          uid
           simpleId
            utf8mb4_bin
        columnConstraint
         nullNotnull
          NOT
          NULL
        columnConstraint
         DEFAULT
         defaultValue
          constant
           stringLiteral
            '{}'
        columnConstraint
         CHECK
         (
         expression
          predicate
           expressionAtom
            functionCall
             scalarFunctionName
              functionNameBase
               json_valid
             (
             functionArgs
              constant
               stringLiteral
                `Privilege`
             )
         )
      ,
      createDefinition
       tableConstraint
        PRIMARY
        KEY
        indexColumnNames
         (
         indexColumnName
          uid
           `Host`
         ,
         indexColumnName
          uid
           `User`
         )
      )
     tableOption
      ENGINE
      =
      engineName
       Aria
     tableOption
      DEFAULT
      charSet
       CHARSET
      =
      charsetName
       charsetNameBase
        utf8
     tableOption
      COLLATE
      =
      collationName
       uid
        simpleId
         utf8_bin
     tableOption
      PAGE_CHECKSUM
      =
      1
     tableOption
      TRANSACTIONAL
      =
      1
     tableOption
      COMMENT
      =
      'Users and global privileges'
  ;
  sqlStatement
   ddlStatement
    createTable
     CREATE
     TABLE
     tableName
      fullId
       uid
        simpleId
         geo
     createDefinitions
      (
      createDefinition
       uid
        simpleId
         coordinate
       columnDefinition
        dataType
         JSON
      ,
      createDefinition
       tableConstraint
        CHECK
        (
        expression
         predicate
          expressionAtom
           functionCall
            scalarFunctionName
             functionNameBase
              JSON_SCHEMA_VALID
            (
            functionArgs
             constant
              stringLiteral
               '{\n               "type":"object",\n               "properties":{\n                 "latitude":{"type":"number", "minimum":-90, "maximum":90},\n                 "longitude":{"type":"number", "minimum":-180, "maximum":180}\n               },\n               "required": ["latitude", "longitude"]\n           }'
             ,
             fullColumnName
              uid
               simpleId
                coordinate
            )
        )
      )
  ;
  sqlStatement
   ddlStatement
    createTable
     CREATE
     TABLE
     tableName
      fullId
       uid
        `tab1`
     createDefinitions
      (
      createDefinition
       uid
        simpleId
         f4
       columnDefinition
        dataType
         FLOAT4
      ,
      createDefinition
       uid
        simpleId
         f8
       columnDefinition
        dataType
         FLOAT8
      ,
      createDefinition
       uid
        simpleId
         i1
       columnDefinition
        dataType
         INT1
      ,
      createDefinition
       uid
        simpleId
         i2
       columnDefinition
        dataType
         INT2
      ,
      createDefinition
       uid
        simpleId
         i3
       columnDefinition
        dataType
         INT3
      ,
      createDefinition
       uid
        simpleId
         i4
       columnDefinition
        dataType
         INT4
      ,
      createDefinition
       uid
        simpleId
         i8
       columnDefinition
        dataType
         INT8
      ,
      createDefinition
       uid
        simpleId
         lvb
       columnDefinition
        dataType
         LONG
         VARBINARY
      ,
      createDefinition
       uid
        simpleId
         lvc
       columnDefinition
        dataType
         LONG
         VARCHAR
      ,
      createDefinition
       uid
        simpleId
         lvcfull
       columnDefinition
        dataType
         LONG
         BINARY
         charSet
          CHARSET
         charsetName
          charsetNameBase
           utf8
         COLLATE
         collationName
          uid
           simpleId
            utf8_bin
      ,
      createDefinition
       uid
        simpleId
         l
       columnDefinition
        dataType
         LONG
      ,
      createDefinition
       uid
        simpleId
         mi
       columnDefinition
        dataType
         MIDDLEINT
      )
     tableOption
      ENGINE
      =
      engineName
       engineNameBase
        InnoDB
     tableOption
      DEFAULT
      charSet
       CHARSET
      =
      charsetName
       charsetNameBase
        utf8
  ;
  sqlStatement
   ddlStatement
    createProcedure
     CREATE
     PROCEDURE
     fullId
      uid
       simpleId
        procedure1
     (
     )
     routineBody
      blockStatement
       BEGIN
       declareVariable
        DECLARE
        uidList
         uid
          simpleId
           var1
        dataType
         INT
         unsigned
        default
        expression
         predicate
          expressionAtom
           constant
            decimalLiteral
             1
       ;
       declareVariable
        DECLARE
        uidList
         uid
          simpleId
           var2
        dataType
         TIMESTAMP
        default
        expression
         predicate
          expressionAtom
           fullColumnName
            uid
             simpleId
              scalarFunctionName
               CURRENT_TIMESTAMP
       ;
       declareVariable
        DECLARE
        uidList
         uid
          simpleId
           var3
        dataType
         INT
         unsigned
        default
        expression
         predicate
          expressionAtom
           expressionAtom
            constant
             decimalLiteral
              2
           mathOperator
            +
           expressionAtom
            fullColumnName
             uid
              simpleId
               var1
       ;
       END
  sqlStatement
   ddlStatement
    createProcedure
     CREATE
     PROCEDURE
     fullId
      uid
       simpleId
        doiterate
     (
     procedureParameter
      uid
       simpleId
        p1
      dataType
       INT
     )
     routineBody
      blockStatement
       uid
        simpleId
         label2
       :
       BEGIN
       procedureSqlStatement
        compoundStatement
         loopStatement
          uid
           simpleId
            label1
          :
          LOOP
          procedureSqlStatement
           sqlStatement
            administrationStatement
             setStatement
              SET
              variableClause
               uid
                simpleId
                 p1
              =
              expression
               predicate
                expressionAtom
                 expressionAtom
                  fullColumnName
                   uid
                    simpleId
                     p1
                 mathOperator
                  +
                 expressionAtom
                  constant
                   decimalLiteral
                    1
           ;
          procedureSqlStatement
           compoundStatement
            ifStatement
             IF
             expression
              predicate
               predicate
                expressionAtom
                 fullColumnName
                  uid
                   simpleId
                    p1
               comparisonOperator
                <
               predicate
                expressionAtom
                 constant
                  decimalLiteral
                   10
             THEN
             procedureSqlStatement
              compoundStatement
               iterateStatement
                ITERATE
                uid
                 simpleId
                  label1
              ;
             END
             IF
           ;
          procedureSqlStatement
           compoundStatement
            leaveStatement
             LEAVE
             uid
              simpleId
               label1
           ;
          END
          LOOP
          uid
           simpleId
            label1
        ;
       END
  sqlStatement
   ddlStatement
    createProcedure
     CREATE
     PROCEDURE
     fullId
      uid
       simpleId
        makesignal
     (
     procedureParameter
      uid
       simpleId
        p1
      dataType
       INT
     )
     routineBody
      blockStatement
       BEGIN
       declareVariable
        DECLARE
        uidList
         uid
          simpleId
           error_text
        dataType
         VARCHAR
         lengthOneDimension
          (
          decimalLiteral
           255
          )
       ;
       procedureSqlStatement
        compoundStatement
         ifStatement
          IF
          expression
           predicate
            expressionAtom
             (
             expression
              predicate
               predicate
                expressionAtom
                 fullColumnName
                  uid
                   simpleId
                    error_text
               comparisonOperator
                !
                =
               predicate
                expressionAtom
                 constant
                  stringLiteral
                   'OK'
             )
          THEN
          procedureSqlStatement
           sqlStatement
            utilityStatement
             signalStatement
              SIGNAL
              SQLSTATE
              stringLiteral
               '45000'
              SET
              signalConditionInformation
               MESSAGE_TEXT
               =
               simpleId
                error_text
           ;
          END
          IF
        ;
       END
  sqlStatement
   ddlStatement
    createProcedure
     CREATE
     ownerStatement
      DEFINER
      =
      userName
       simpleUserName
        `bettingservice`
       hostName
        @`stage-us-nj-app%`
     PROCEDURE
     fullId
      uid
       `AggregatePlayerFactDaily`
     (
     )
     routineBody
      blockStatement
       BEGIN
       declareVariable
        DECLARE
        uidList
         uid
          simpleId
           CID_min
        dataType
         BIGINT
       ;
       declareVariable
        DECLARE
        uidList
         uid
          simpleId
           CID_max
        dataType
         BIGINT
       ;
       declareHandler
        DECLARE
        EXIT
        HANDLER
        FOR
        handlerConditionValue
         SQLEXCEPTION
        routineBody
         blockStatement
          BEGIN
          procedureSqlStatement
           sqlStatement
            administrationStatement
             showStatement
              SHOW
              ERRORS
           ;
          procedureSqlStatement
           sqlStatement
            transactionStatement
             rollbackWork
              ROLLBACK
           ;
          END
       ;
       procedureSqlStatement
        sqlStatement
         dmlStatement
          selectStatement
           querySpecification
            SELECT
            selectElements
             selectElement
              expression
               predicate
                expressionAtom
                 expressionAtom
                  fullColumnName
                   uid
                    simpleId
                     LastID
                 mathOperator
                  +
                 expressionAtom
                  constant
                   decimalLiteral
                    1
            selectIntoExpression
             INTO
             assignmentField
              uid
               simpleId
                CID_min
            fromClause
             FROM
             tableSources
              tableSource
               tableSourceItem
                tableName
                 fullId
                  uid
                   simpleId
                    AggregateStatus
             WHERE
             expression
              predicate
               predicate
                expressionAtom
                 fullColumnName
                  uid
                   simpleId
                    TableName
               comparisonOperator
                =
               predicate
                expressionAtom
                 constant
                  stringLiteral
                   'Combination_Transaction_Player_Fact'
        ;
       procedureSqlStatement
        sqlStatement
         dmlStatement
          selectStatement
           querySpecification
            SELECT
            selectElements
             selectElement
              fullColumnName
               uid
                simpleId
                 Id
            selectIntoExpression
             INTO
             assignmentField
              uid
               simpleId
                CID_max
            fromClause
             FROM
             tableSources
              tableSource
               tableSourceItem
                tableName
                 fullId
                  uid
                   simpleId
                    Combination_Transaction
            orderByClause
             ORDER
             BY
             orderByExpression
              expression
               predicate
                expressionAtom
                 fullColumnName
                  uid
                   simpleId
                    Id
              DESC
            limitClause
             LIMIT
             limitClauseAtom
              decimalLiteral
               1
        ;
       procedureSqlStatement
        sqlStatement
         transactionStatement
          startTransaction
           START
           TRANSACTION
        ;
       procedureSqlStatement
        sqlStatement
         dmlStatement
          updateStatement
           singleUpdateStatement
            UPDATE
            tableName
             fullId
              uid
               simpleId
                AggregateStatus
            SET
            updatedElement
             fullColumnName
              uid
               simpleId
                LastId
             =
             expression
              predicate
               expressionAtom
                fullColumnName
                 uid
                  simpleId
                   CID_max
            ,
            updatedElement
             fullColumnName
              uid
               simpleId
                LastUpdated
             =
             expression
              predicate
               expressionAtom
                fullColumnName
                 uid
                  simpleId
                   scalarFunctionName
                    CURRENT_TIMESTAMP
            WHERE
            expression
             predicate
              predicate
               expressionAtom
                fullColumnName
                 uid
                  simpleId
                   TableName
              comparisonOperator
               =
              predicate
               expressionAtom
                constant
                 stringLiteral
                  'Combination_Transaction_Player_Fact'
        ;
       procedureSqlStatement
        sqlStatement
         dmlStatement
          insertStatement
           INSERT
           INTO
           tableName
            fullId
             uid
              simpleId
               Combination_Transaction_Player_Fact
           insertStatementValue
            selectStatement
             querySpecification
              SELECT
              selectElements
               selectElement
                expression
                 predicate
                  expressionAtom
                   constant
                    NULL
                uid
                 `Id`
               ,
               selectElement
                fullColumnName
                 uid
                  simpleId
                   CT
                 dottedId
                  .Player_UID
               ,
               selectElement
                fullColumnName
                 uid
                  simpleId
                   CT
                 dottedId
                  .Tx_Type
                uid
                 `Type`
               ,
               selectElement
                functionCall
                 scalarFunctionName
                  functionNameBase
                   DATE
                 (
                 functionArgs
                  fullColumnName
                   uid
                    simpleId
                     BT
                   dottedId
                    .Timestamp
                 )
                uid
                 `Date`
               ,
               selectElement
                functionCall
                 aggregateWindowedFunction
                  SUM
                  (
                  functionArg
                   fullColumnName
                    uid
                     simpleId
                      CT
                    dottedId
                     .Real_Amount
                  )
                uid
                 `Real_Amount`
               ,
               selectElement
                functionCall
                 aggregateWindowedFunction
                  SUM
                  (
                  functionArg
                   fullColumnName
                    uid
                     simpleId
                      CT
                    dottedId
                     .Bonus_Amount
                  )
                uid
                 `Bonus_Amount`
               ,
               selectElement
                fullColumnName
                 uid
                  simpleId
                   BT
                 dottedId
                  .Currency_UID
               ,
               selectElement
                functionCall
                 aggregateWindowedFunction
                  COUNT
                  (
                  functionArg
                   fullColumnName
                    uid
                     simpleId
                      CT
                    dottedId
                     .Id
                  )
                uid
                 simpleId
                  Tx_Count
               ,
               selectElement
                functionCall
                 aggregateWindowedFunction
                  SUM
                  (
                  functionArg
                   functionCall
                    scalarFunctionName
                     IF
                    (
                    functionArgs
                     expression
                      predicate
                       predicate
                        expressionAtom
                         fullColumnName
                          uid
                           simpleId
                            CT
                          dottedId
                           .Real_Amount
                       comparisonOperator
                        >
                       predicate
                        expressionAtom
                         constant
                          decimalLiteral
                           0
                     ,
                     constant
                      decimalLiteral
                       1
                     ,
                     constant
                      decimalLiteral
                       0
                    )
                  )
                uid
                 `Real_Count`
               ,
               selectElement
                functionCall
                 aggregateWindowedFunction
                  SUM
                  (
                  functionArg
                   functionCall
                    scalarFunctionName
                     IF
                    (
                    functionArgs
                     expression
                      predicate
                       predicate
                        expressionAtom
                         fullColumnName
                          uid
                           simpleId
                            CT
                          dottedId
                           .Bonus_Amount
                       comparisonOperator
                        >
                       predicate
                        expressionAtom
                         constant
                          decimalLiteral
                           0
                     ,
                     constant
                      decimalLiteral
                       1
                     ,
                     constant
                      decimalLiteral
                       0
                    )
                  )
                uid
                 `Bonus_Count`
              fromClause
               FROM
               tableSources
                tableSource
                 tableSourceItem
                  tableName
                   fullId
                    uid
                     simpleId
                      Combination_Transaction
                  uid
                   simpleId
                    CT
                 joinPart
                  LEFT
                  JOIN
                  tableSourceItem
                   tableName
                    fullId
                     uid
                      simpleId
                       Betting_Transaction
                   uid
                    simpleId
                     BT
                  ON
                  expression
                   predicate
                    predicate
                     expressionAtom
                      fullColumnName
                       uid
                        simpleId
                         CT
                       dottedId
                        .Betting_Tx_ID
                    comparisonOperator
                     =
                    predicate
                     expressionAtom
                      fullColumnName
                       uid
                        simpleId
                         BT
                       dottedId
                        .ID
               WHERE
               expression
                predicate
                 predicate
                  expressionAtom
                   fullColumnName
                    uid
                     simpleId
                      CT
                    dottedId
                     .Id
                 BETWEEN
                 predicate
                  expressionAtom
                   fullColumnName
                    uid
                     simpleId
                      CID_min
                 AND
                 predicate
                  expressionAtom
                   fullColumnName
                    uid
                     simpleId
                      CID_max
              groupByClause
               GROUP
               BY
               groupByItem
                expression
                 predicate
                  expressionAtom
                   fullColumnName
                    uid
                     simpleId
                      CT
                    dottedId
                     .Player_UID
               ,
               groupByItem
                expression
                 predicate
                  expressionAtom
                   fullColumnName
                    uid
                     simpleId
                      CT
                    dottedId
                     .Tx_Type
               ,
               groupByItem
                expression
                 predicate
                  expressionAtom
                   functionCall
                    scalarFunctionName
                     functionNameBase
                      DATE
                    (
                    functionArgs
                     fullColumnName
                      uid
                       simpleId
                        BT
                      dottedId
                       .Timestamp
                    )
           ON
           DUPLICATE
           KEY
           UPDATE
           updatedElement
            fullColumnName
             uid
              simpleId
               Currency_UID
            =
            expression
             predicate
              expressionAtom
               functionCall
                specificFunction
                 VALUES
                 (
                 fullColumnName
                  uid
                   simpleId
                    Currency_UID
                 )
           ,
           updatedElement
            fullColumnName
             uid
              simpleId
               Tx_Count
            =
            expression
             predicate
              expressionAtom
               expressionAtom
                fullColumnName
                 uid
                  simpleId
                   Tx_Count
               mathOperator
                +
               expressionAtom
                functionCall
                 specificFunction
                  VALUES
                  (
                  fullColumnName
                   uid
                    simpleId
                     Tx_Count
                  )
           ,
           updatedElement
            fullColumnName
             uid
              simpleId
               Real_Amount
            =
            expression
             predicate
              expressionAtom
               expressionAtom
                fullColumnName
                 uid
                  simpleId
                   Real_Amount
               mathOperator
                +
               expressionAtom
                functionCall
                 specificFunction
                  VALUES
                  (
                  fullColumnName
                   uid
                    simpleId
                     Real_Amount
                  )
           ,
           updatedElement
            fullColumnName
             uid
              simpleId
               Bonus_Amount
            =
            expression
             predicate
              expressionAtom
               expressionAtom
                fullColumnName
                 uid
                  simpleId
                   Bonus_Amount
               mathOperator
                +
               expressionAtom
                functionCall
                 specificFunction
                  VALUES
                  (
                  fullColumnName
                   uid
                    simpleId
                     Bonus_Amount
                  )
           ,
           updatedElement
            fullColumnName
             uid
              simpleId
               Real_Count
            =
            expression
             predicate
              expressionAtom
               expressionAtom
                fullColumnName
                 uid
                  simpleId
                   Real_Count
               mathOperator
                +
               expressionAtom
                functionCall
                 specificFunction
                  VALUES
                  (
                  fullColumnName
                   uid
                    simpleId
                     Real_Count
                  )
           ,
           updatedElement
            fullColumnName
             uid
              simpleId
               Bonus_Count
            =
            expression
             predicate
              expressionAtom
               expressionAtom
                fullColumnName
                 uid
                  simpleId
                   Bonus_Count
               mathOperator
                +
               expressionAtom
                functionCall
                 specificFunction
                  VALUES
                  (
                  fullColumnName
                   uid
                    simpleId
                     Bonus_Count
                  )
        ;
       procedureSqlStatement
        sqlStatement
         transactionStatement
          commitWork
           COMMIT
        ;
       END
  sqlStatement
   ddlStatement
    createProcedure
     CREATE
     PROCEDURE
     fullId
      uid
       simpleId
        set_unique_check
     (
     )
     routineBody
      blockStatement
       BEGIN
       procedureSqlStatement
        sqlStatement
         administrationStatement
          setStatement
           SET
           variableClause
            uid
             simpleId
              unique_checks
           =
           expression
            predicate
             expressionAtom
              fullColumnName
               uid
                simpleId
                 off
        ;
       procedureSqlStatement
        sqlStatement
         administrationStatement
          setStatement
           SET
           variableClause
            uid
             simpleId
              unique_checks
           =
           on
        ;
       END
  ;
  sqlStatement
   ddlStatement
    createProcedure
     CREATE
     ownerStatement
      DEFINER
      =
      userName
       simpleUserName
        `prod_migrations`
       hostName
        @`%`
     PROCEDURE
     fullId
      uid
       `upsert_virtual_item`
     (
     procedureParameter
      IN
      uid
       simpleId
        keywordsCanBeId
         name
      dataType
       VARCHAR
       lengthOneDimension
        (
        decimalLiteral
         45
        )
     ,
     procedureParameter
      IN
      uid
       simpleId
        type
      dataType
       TINYINT
       UNSIGNED
     )
     routineBody
      blockStatement
       BEGIN
       procedureSqlStatement
        sqlStatement
         administrationStatement
          setStatement
           SET
           variableClause
            @merchantId
           :=
           expression
            predicate
             expressionAtom
              (
              selectStatement
               querySpecification
                SELECT
                selectElements
                 selectElement
                  fullColumnName
                   uid
                    simpleId
                     merchant_id
                fromClause
                 FROM
                 tableSources
                  tableSource
                   tableSourceItem
                    tableName
                     fullId
                      uid
                       simpleId
                        merchant
                limitClause
                 LIMIT
                 limitClauseAtom
                  decimalLiteral
                   1
              )
        ;
       procedureSqlStatement
        compoundStatement
         ifStatement
          IF
          expression
           predicate
            predicate
             expressionAtom
              mysqlVariable
               @merchantId
            comparisonOperator
             >
            predicate
             expressionAtom
              constant
               decimalLiteral
                0
          THEN
          procedureSqlStatement
           sqlStatement
            administrationStatement
             setStatement
              SET
              variableClause
               @rows
              :=
              expression
               predicate
                expressionAtom
                 (
                 selectStatement
                  querySpecification
                   SELECT
                   selectElements
                    selectElement
                     functionCall
                      aggregateWindowedFunction
                       COUNT
                       (
                       *
                       )
                   fromClause
                    FROM
                    tableSources
                     tableSource
                      tableSourceItem
                       tableName
                        fullId
                         uid
                          simpleId
                           item
                    WHERE
                    expression
                     predicate
                      predicate
                       expressionAtom
                        fullColumnName
                         uid
                          simpleId
                           item_type
                      comparisonOperator
                       =
                      predicate
                       expressionAtom
                        fullColumnName
                         uid
                          simpleId
                           type
                 )
           ;
          procedureSqlStatement
           compoundStatement
            ifStatement
             IF
             expression
              predicate
               predicate
                expressionAtom
                 mysqlVariable
                  @rows
               comparisonOperator
                >
               predicate
                expressionAtom
                 constant
                  decimalLiteral
                   0
             THEN
             procedureSqlStatement
              sqlStatement
               dmlStatement
                updateStatement
                 singleUpdateStatement
                  UPDATE
                  tableName
                   fullId
                    uid
                     simpleId
                      item
                  SET
                  updatedElement
                   fullColumnName
                    uid
                     simpleId
                      merchant_id
                   =
                   expression
                    predicate
                     expressionAtom
                      mysqlVariable
                       @merchantId
                  ,
                  updatedElement
                   fullColumnName
                    uid
                     simpleId
                      cz_title
                   =
                   expression
                    predicate
                     expressionAtom
                      fullColumnName
                       uid
                        simpleId
                         keywordsCanBeId
                          name
                  ,
                  updatedElement
                   fullColumnName
                    uid
                     simpleId
                      price
                   =
                   expression
                    predicate
                     expressionAtom
                      constant
                       decimalLiteral
                        0
                  ,
                  updatedElement
                   fullColumnName
                    uid
                     simpleId
                      orderer
                   =
                   expression
                    predicate
                     expressionAtom
                      constant
                       decimalLiteral
                        2
                  ,
                  updatedElement
                   fullColumnName
                    uid
                     simpleId
                      takeaway
                   =
                   expression
                    predicate
                     expressionAtom
                      constant
                       decimalLiteral
                        0
                  ,
                  updatedElement
                   fullColumnName
                    uid
                     simpleId
                      currency_id
                   =
                   expression
                    predicate
                     expressionAtom
                      (
                      selectStatement
                       querySpecification
                        SELECT
                        selectElements
                         selectElement
                          fullColumnName
                           uid
                            simpleId
                             currency_currency_id
                        fromClause
                         FROM
                         tableSources
                          tableSource
                           tableSourceItem
                            tableName
                             fullId
                              uid
                               simpleId
                                merchant
                         WHERE
                         expression
                          predicate
                           predicate
                            expressionAtom
                             fullColumnName
                              uid
                               simpleId
                                merchant_id
                           comparisonOperator
                            =
                           predicate
                            expressionAtom
                             mysqlVariable
                              @merchantId
                      )
                  ,
                  updatedElement
                   fullColumnName
                    uid
                     simpleId
                      tax_vat_id
                   =
                   expression
                    predicate
                     expressionAtom
                      (
                      selectStatement
                       querySpecification
                        SELECT
                        selectElements
                         selectElement
                          fullColumnName
                           uid
                            simpleId
                             tax_vat
                           dottedId
                            .tax_vat_id
                        fromClause
                         FROM
                         tableSources
                          tableSource
                           tableSourceItem
                            tableName
                             fullId
                              uid
                               simpleId
                                tax_vat
                           joinPart
                            JOIN
                            tableSourceItem
                             tableName
                              fullId
                               uid
                                simpleId
                                 merchant
                            ON
                            expression
                             expression
                              predicate
                               predicate
                                expressionAtom
                                 fullColumnName
                                  uid
                                   simpleId
                                    merchant
                                  dottedId
                                   .place_country_id
                               comparisonOperator
                                =
                               predicate
                                expressionAtom
                                 fullColumnName
                                  uid
                                   simpleId
                                    tax_vat
                                  dottedId
                                   .country_id
                             logicalOperator
                              AND
                             expression
                              predicate
                               predicate
                                expressionAtom
                                 fullColumnName
                                  uid
                                   simpleId
                                    merchant
                                  dottedId
                                   .merchant_id
                               comparisonOperator
                                =
                               predicate
                                expressionAtom
                                 mysqlVariable
                                  @merchantId
                         WHERE
                         expression
                          predicate
                           predicate
                            expressionAtom
                             fullColumnName
                              uid
                               simpleId
                                tax_vat
                              dottedId
                               .default
                           comparisonOperator
                            =
                           predicate
                            expressionAtom
                             constant
                              decimalLiteral
                               1
                      )
                  ,
                  updatedElement
                   fullColumnName
                    uid
                     simpleId
                      item_measure_id
                   =
                   expression
                    predicate
                     expressionAtom
                      constant
                       decimalLiteral
                        1
                  ,
                  updatedElement
                   fullColumnName
                    uid
                     simpleId
                      kitchen_print
                   =
                   expression
                    predicate
                     expressionAtom
                      constant
                       decimalLiteral
                        0
                  ,
                  updatedElement
                   fullColumnName
                    uid
                     simpleId
                      deleted
                   =
                   expression
                    predicate
                     expressionAtom
                      constant
                       decimalLiteral
                        0
                  ,
                  updatedElement
                   fullColumnName
                    uid
                     simpleId
                      keywordsCanBeId
                       virtual
                   =
                   expression
                    predicate
                     expressionAtom
                      constant
                       decimalLiteral
                        1
                  WHERE
                  expression
                   predicate
                    predicate
                     expressionAtom
                      fullColumnName
                       uid
                        simpleId
                         item_type
                    comparisonOperator
                     =
                    predicate
                     expressionAtom
                      fullColumnName
                       uid
                        simpleId
                         type
              ;
             ELSE
             procedureSqlStatement
              sqlStatement
               dmlStatement
                insertStatement
                 INSERT
                 INTO
                 tableName
                  fullId
                   uid
                    simpleId
                     item
                 SET
                 updatedElement
                  fullColumnName
                   uid
                    simpleId
                     merchant_id
                  =
                  expression
                   predicate
                    expressionAtom
                     mysqlVariable
                      @merchantId
                 ,
                 updatedElement
                  fullColumnName
                   uid
                    simpleId
                     cz_title
                  =
                  expression
                   predicate
                    expressionAtom
                     fullColumnName
                      uid
                       simpleId
                        keywordsCanBeId
                         name
                 ,
                 updatedElement
                  fullColumnName
                   uid
                    simpleId
                     price
                  =
                  expression
                   predicate
                    expressionAtom
                     constant
                      decimalLiteral
                       0
                 ,
                 updatedElement
                  fullColumnName
                   uid
                    simpleId
                     orderer
                  =
                  expression
                   predicate
                    expressionAtom
                     constant
                      decimalLiteral
                       2
                 ,
                 updatedElement
                  fullColumnName
                   uid
                    simpleId
                     takeaway
                  =
                  expression
                   predicate
                    expressionAtom
                     constant
                      decimalLiteral
                       0
                 ,
                 updatedElement
                  fullColumnName
                   uid
                    simpleId
                     currency_id
                  =
                  expression
                   predicate
                    expressionAtom
                     (
                     selectStatement
                      querySpecification
                       SELECT
                       selectElements
                        selectElement
                         fullColumnName
                          uid
                           simpleId
                            currency_currency_id
                       fromClause
                        FROM
                        tableSources
                         tableSource
                          tableSourceItem
                           tableName
                            fullId
                             uid
                              simpleId
                               merchant
                        WHERE
                        expression
                         predicate
                          predicate
                           expressionAtom
                            fullColumnName
                             uid
                              simpleId
                               merchant_id
                          comparisonOperator
                           =
                          predicate
                           expressionAtom
                            mysqlVariable
                             @merchantId
                     )
                 ,
                 updatedElement
                  fullColumnName
                   uid
                    simpleId
                     tax_vat_id
                  =
                  expression
                   predicate
                    expressionAtom
                     (
                     selectStatement
                      querySpecification
                       SELECT
                       selectElements
                        selectElement
                         fullColumnName
                          uid
                           simpleId
                            tax_vat
                          dottedId
                           .tax_vat_id
                       fromClause
                        FROM
                        tableSources
                         tableSource
                          tableSourceItem
                           tableName
                            fullId
                             uid
                              simpleId
                               tax_vat
                          joinPart
                           JOIN
                           tableSourceItem
                            tableName
                             fullId
                              uid
                               simpleId
                                merchant
                           ON
                           expression
                            expression
                             predicate
                              predicate
                               expressionAtom
                                fullColumnName
                                 uid
                                  simpleId
                                   merchant
                                 dottedId
                                  .place_country_id
                              comparisonOperator
                               =
                              predicate
                               expressionAtom
                                fullColumnName
                                 uid
                                  simpleId
                                   tax_vat
                                 dottedId
                                  .country_id
                            logicalOperator
                             AND
                            expression
                             predicate
                              predicate
                               expressionAtom
                                fullColumnName
                                 uid
                                  simpleId
                                   merchant
                                 dottedId
                                  .merchant_id
                              comparisonOperator
                               =
                              predicate
                               expressionAtom
                                mysqlVariable
                                 @merchantId
                        WHERE
                        expression
                         predicate
                          predicate
                           expressionAtom
                            fullColumnName
                             uid
                              simpleId
                               tax_vat
                             dottedId
                              .default
                          comparisonOperator
                           =
                          predicate
                           expressionAtom
                            constant
                             decimalLiteral
                              1
                     )
                 ,
                 updatedElement
                  fullColumnName
                   uid
                    simpleId
                     item_measure_id
                  =
                  expression
                   predicate
                    expressionAtom
                     constant
                      decimalLiteral
                       1
                 ,
                 updatedElement
                  fullColumnName
                   uid
                    simpleId
                     kitchen_print
                  =
                  expression
                   predicate
                    expressionAtom
                     constant
                      decimalLiteral
                       0
                 ,
                 updatedElement
                  fullColumnName
                   uid
                    simpleId
                     deleted
                  =
                  expression
                   predicate
                    expressionAtom
                     constant
                      decimalLiteral
                       0
                 ,
                 updatedElement
                  fullColumnName
                   uid
                    simpleId
                     keywordsCanBeId
                      virtual
                  =
                  expression
                   predicate
                    expressionAtom
                     constant
                      decimalLiteral
                       1
                 ,
                 updatedElement
                  fullColumnName
                   uid
                    simpleId
                     item_type
                  =
                  expression
                   predicate
                    expressionAtom
                     fullColumnName
                      uid
                       simpleId
                        type
              ;
             END
             IF
           ;
          END
          IF
        ;
       END
  sqlStatement
   ddlStatement
    createProcedure
     CREATE
     ownerStatement
      DEFINER
      =
      userName
       simpleUserName
        `reportwriter`
       hostName
        @`%`
     PROCEDURE
     fullId
      uid
       `sp_ds_DAL_TX_Impoundment`
     (
     procedureParameter
      IN
      uid
       simpleId
        pDateFrom
      dataType
       datetime
     ,
     procedureParameter
      IN
      uid
       simpleId
        pDateTo
      dataType
       datetime
     )
     routineBody
      blockStatement
       BEGIN
       procedureSqlStatement
        sqlStatement
         administrationStatement
          setStatement
           SET
           variableClause
            @goliveDate
           =
           expression
            predicate
             expressionAtom
              constant
               stringLiteral
                '2023-05-02 02:00:00'
        ;
       procedureSqlStatement
        sqlStatement
         administrationStatement
          setStatement
           set
           variableClause
            @pRegion
           =
           expression
            predicate
             expressionAtom
              constant
               stringLiteral
                'DAL-TX'
        ;
       procedureSqlStatement
        sqlStatement
         administrationStatement
          setStatement
           set
           variableClause
            @pDateFrom
           =
           expression
            predicate
             expressionAtom
              fullColumnName
               uid
                simpleId
                 pDateFrom
        ;
       procedureSqlStatement
        sqlStatement
         administrationStatement
          setStatement
           set
           variableClause
            @pDateTo
           =
           expression
            predicate
             expressionAtom
              fullColumnName
               uid
                simpleId
                 pDateTo
        ;
       procedureSqlStatement
        sqlStatement
         administrationStatement
          setStatement
           set
           variableClause
            @contractAmount
           =
           expression
            predicate
             expressionAtom
              constant
               decimalLiteral
                21.03
        ;
       procedureSqlStatement
        compoundStatement
         withClause
          with
          commonTableExpressions
           cteName
            uid
             simpleId
              Temp1
           as
           (
           dmlStatement
            selectStatement
             querySpecification
              select
              selectElements
               selectElement
                fullColumnName
                 uid
                  simpleId
                   l
                 dottedId
                  .code
                as
                uid
                 simpleId
                  lotCode
               ,
               selectElement
                fullColumnName
                 uid
                  simpleId
                   fi
                 dottedId
                  .Id
                AS
                uid
                 simpleId
                  FeeItemID
               ,
               selectElement
                fullColumnName
                 uid
                  simpleId
                   fi
                 dottedId
                  .unitBillingPrice
                as
                uid
                 simpleId
                  billingPrice
               ,
               selectElement
                fullColumnName
                 uid
                  simpleId
                   eq
                 dottedId
                  .equipmentClass
               ,
               selectElement
                fullColumnName
                 uid
                  simpleId
                   a
                 dottedId
                  .customerCode
               ,
               selectElement
                fullColumnName
                 uid
                  simpleId
                   v
                 dottedId
                  .impoundStatus
               ,
               selectElement
                fullColumnName
                 uid
                  simpleId
                   tc
                 dottedId
                  .companyCode
                AS
                uid
                 simpleId
                  impoundCompany
               ,
               selectElement
                fullColumnName
                 uid
                  simpleId
                   b
                 dottedId
                  .companyCode
                AS
                uid
                 simpleId
                  towOperator
               ,
               selectElement
                fullColumnName
                 uid
                  simpleId
                   v
                 dottedId
                  .id
                AS
                uid
                 simpleId
                  vehicleId
               ,
               selectElement
                fullColumnName
                 uid
                  simpleId
                   re
                 dottedId
                  .reasoncode
               ,
               selectElement
                fullColumnName
                 uid
                  simpleId
                   v
                 dottedId
                  .towReferenceNumber
               ,
               selectElement
                functionCall
                 fullId
                  uid
                   simpleId
                    fn_CalculateTimeZoneOffset
                 (
                 functionArgs
                  fullColumnName
                   uid
                    simpleId
                     regionCode
                  ,
                  fullColumnName
                   uid
                    simpleId
                     v
                   dottedId
                    .clearedDate
                  ,
                  constant
                   stringLiteral
                    'DISPLAY'
                 )
                AS
                uid
                 simpleId
                  towDate
               ,
               selectElement
                functionCall
                 fullId
                  uid
                   simpleId
                    fn_CalculateTimeZoneOffset
                 (
                 functionArgs
                  fullColumnName
                   uid
                    simpleId
                     regionCode
                  ,
                  fullColumnName
                   uid
                    simpleId
                     v
                   dottedId
                    .releaseDate
                  ,
                  constant
                   stringLiteral
                    'DISPLAY'
                 )
                AS
                uid
                 simpleId
                  releaseDate
               ,
               selectElement
                functionCall
                 fullId
                  uid
                   simpleId
                    fn_CalculateTimeZoneOffset
                 (
                 functionArgs
                  fullColumnName
                   uid
                    simpleId
                     regionCode
                  ,
                  fullColumnName
                   uid
                    simpleId
                     fi
                   dottedId
                    .createdDate
                  ,
                  constant
                   stringLiteral
                    'DISPLAY'
                 )
                AS
                uid
                 simpleId
                  feeDate
               ,
               selectElement
                fullColumnName
                 uid
                  simpleId
                   f
                 dottedId
                  .code
               ,
               selectElement
                fullColumnName
                 uid
                  simpleId
                   fi
                 dottedId
                  .totalBillingPricePretax
              fromClause
               from
               tableSources
                tableSource
                 tableSourceItem
                  tableName
                   fullId
                    uid
                     simpleId
                      ims_vehicle
                  uid
                   simpleId
                    v
                 joinPart
                  join
                  tableSourceItem
                   tableName
                    fullId
                     uid
                      simpleId
                       ref_region
                   uid
                    simpleId
                     r
                  on
                  expression
                   predicate
                    predicate
                     expressionAtom
                      fullColumnName
                       uid
                        simpleId
                         v
                       dottedId
                        .regionId
                    comparisonOperator
                     =
                    predicate
                     expressionAtom
                      fullColumnName
                       uid
                        simpleId
                         r
                       dottedId
                        .regionId
                 joinPart
                  INNER
                  JOIN
                  tableSourceItem
                   tableName
                    fullId
                     uid
                      simpleId
                       ims_fee_event
                   uid
                    simpleId
                     fe
                  ON
                  expression
                   predicate
                    predicate
                     expressionAtom
                      fullColumnName
                       uid
                        simpleId
                         v
                       dottedId
                        .id
                    comparisonOperator
                     =
                    predicate
                     expressionAtom
                      fullColumnName
                       uid
                        simpleId
                         fe
                       dottedId
                        .vehicleId
                 joinPart
                  INNER
                  JOIN
                  tableSourceItem
                   tableName
                    fullId
                     uid
                      simpleId
                       ims_fee_item
                   uid
                    simpleId
                     fi
                  ON
                  expression
                   predicate
                    predicate
                     expressionAtom
                      fullColumnName
                       uid
                        simpleId
                         fe
                       dottedId
                        .id
                    comparisonOperator
                     =
                    predicate
                     expressionAtom
                      fullColumnName
                       uid
                        simpleId
                         fi
                       dottedId
                        .feeEventId
                 joinPart
                  INNER
                  JOIN
                  tableSourceItem
                   tableName
                    fullId
                     uid
                      simpleId
                       ims_fee
                   uid
                    simpleId
                     f
                  ON
                  expression
                   predicate
                    predicate
                     expressionAtom
                      fullColumnName
                       uid
                        simpleId
                         fi
                       dottedId
                        .feeId
                    comparisonOperator
                     =
                    predicate
                     expressionAtom
                      fullColumnName
                       uid
                        simpleId
                         f
                       dottedId
                        .id
                 joinPart
                  INNER
                  JOIN
                  tableSourceItem
                   tableName
                    fullId
                     uid
                      simpleId
                       ims_fee_category
                   uid
                    simpleId
                     fc
                  ON
                  expression
                   predicate
                    predicate
                     expressionAtom
                      fullColumnName
                       uid
                        simpleId
                         f
                       dottedId
                        .feeCategoryEnumCode
                    comparisonOperator
                     =
                    predicate
                     expressionAtom
                      fullColumnName
                       uid
                        simpleId
                         fc
                       dottedId
                        .enumcode
                 joinPart
                  INNER
                  JOIN
                  tableSourceItem
                   tableName
                    fullId
                     uid
                      simpleId
                       ref_customer
                   uid
                    simpleId
                     a
                  ON
                  expression
                   predicate
                    predicate
                     expressionAtom
                      fullColumnName
                       uid
                        simpleId
                         v
                       dottedId
                        .accountId
                    comparisonOperator
                     =
                    predicate
                     expressionAtom
                      fullColumnName
                       uid
                        simpleId
                         a
                       dottedId
                        .customerId
                 joinPart
                  INNER
                  JOIN
                  tableSourceItem
                   tableName
                    fullId
                     uid
                      simpleId
                       ref_reason
                   uid
                    simpleId
                     re
                  ON
                  expression
                   predicate
                    predicate
                     expressionAtom
                      fullColumnName
                       uid
                        simpleId
                         v
                       dottedId
                        .reasonId
                    comparisonOperator
                     =
                    predicate
                     expressionAtom
                      fullColumnName
                       uid
                        simpleId
                         re
                       dottedId
                        .reasonId
                 joinPart
                  INNER
                  JOIN
                  tableSourceItem
                   tableName
                    fullId
                     uid
                      simpleId
                       ref_tow_company
                   uid
                    simpleId
                     tc
                  ON
                  expression
                   predicate
                    predicate
                     expressionAtom
                      fullColumnName
                       uid
                        simpleId
                         v
                       dottedId
                        .currentImpoundOperatorId
                    comparisonOperator
                     =
                    predicate
                     expressionAtom
                      fullColumnName
                       uid
                        simpleId
                         tc
                       dottedId
                        .towCompanyId
                 joinPart
                  JOIN
                  tableSourceItem
                   tableName
                    fullId
                     uid
                      simpleId
                       ref_tow_company
                   uid
                    simpleId
                     b
                  ON
                  expression
                   predicate
                    predicate
                     expressionAtom
                      fullColumnName
                       uid
                        simpleId
                         v
                       dottedId
                        .towOperatorId
                    comparisonOperator
                     =
                    predicate
                     expressionAtom
                      fullColumnName
                       uid
                        simpleId
                         b
                       dottedId
                        .towCompanyId
                 joinPart
                  left
                  join
                  tableSourceItem
                   tableName
                    fullId
                     uid
                      simpleId
                       ref_lot
                   uid
                    simpleId
                     l
                  on
                  expression
                   predicate
                    predicate
                     expressionAtom
                      fullColumnName
                       uid
                        simpleId
                         v
                       dottedId
                        .currentLotId
                    comparisonOperator
                     =
                    predicate
                     expressionAtom
                      fullColumnName
                       uid
                        simpleId
                         l
                       dottedId
                        .id
                 joinPart
                  join
                  tableSourceItem
                   tableName
                    fullId
                     uid
                      simpleId
                       ref_equipment
                   uid
                    simpleId
                     eq
                  on
                  expression
                   predicate
                    predicate
                     expressionAtom
                      fullColumnName
                       uid
                        simpleId
                         v
                       dottedId
                        .equipmentId
                    comparisonOperator
                     =
                    predicate
                     expressionAtom
                      fullColumnName
                       uid
                        simpleId
                         eq
                       dottedId
                        .id
               where
               expression
                expression
                 expression
                  expression
                   expression
                    expression
                     predicate
                      predicate
                       expressionAtom
                        fullColumnName
                         uid
                          simpleId
                           r
                         dottedId
                          .regionCode
                      comparisonOperator
                       =
                      predicate
                       expressionAtom
                        mysqlVariable
                         @pRegion
                    logicalOperator
                     and
                    expression
                     predicate
                      predicate
                       expressionAtom
                        fullColumnName
                         uid
                          simpleId
                           v
                         dottedId
                          .releaseDate
                      comparisonOperator
                       >
                       =
                      predicate
                       expressionAtom
                        mysqlVariable
                         @pDateFrom
                   logicalOperator
                    and
                   expression
                    predicate
                     predicate
                      expressionAtom
                       fullColumnName
                        uid
                         simpleId
                          v
                        dottedId
                         .releaseDate
                     comparisonOperator
                      <
                     predicate
                      expressionAtom
                       mysqlVariable
                        @pDateTo
                  logicalOperator
                   and
                  expression
                   predicate
                    predicate
                     expressionAtom
                      fullColumnName
                       uid
                        simpleId
                         v
                       dottedId
                        .clearedDate
                    comparisonOperator
                     >
                     =
                    predicate
                     expressionAtom
                      mysqlVariable
                       @goliveDate
                 logicalOperator
                  and
                 expression
                  predicate
                   predicate
                    expressionAtom
                     fullColumnName
                      uid
                       simpleId
                        b
                      dottedId
                       .companyCode
                   comparisonOperator
                    !
                    =
                   predicate
                    expressionAtom
                     constant
                      stringLiteral
                       'ART-DAL-TX'
                logicalOperator
                 and
                expression
                 predicate
                  predicate
                   expressionAtom
                    fullColumnName
                     uid
                      simpleId
                       v
                     dottedId
                      .impoundStatus
                  comparisonOperator
                   =
                  predicate
                   expressionAtom
                    constant
                     stringLiteral
                      'RELEASED'
           )
         dmlStatement
          selectStatement
           querySpecification
            select
            selectElements
             selectElement
              fullColumnName
               uid
                simpleId
                 lotCode
             ,
             selectElement
              fullColumnName
               uid
                simpleId
                 Temp1
               dottedId
                .vehicleId
              as
              uid
               "Vehicle ID"
             ,
             selectElement
              fullColumnName
               uid
                simpleId
                 towReferenceNumber
              as
              uid
               "Tow Reference Number"
             ,
             selectElement
              fullColumnName
               uid
                simpleId
                 equipmentClass
              as
              uid
               "Class"
             ,
             selectElement
              fullColumnName
               uid
                simpleId
                 impoundStatus
              as
              uid
               "Status"
             ,
             selectElement
              fullColumnName
               uid
                simpleId
                 customerCode
              as
              uid
               "Customer"
             ,
             selectElement
              fullColumnName
               uid
                simpleId
                 impoundCompany
              as
              uid
               "Impound Company"
             ,
             selectElement
              fullColumnName
               uid
                simpleId
                 towOperator
              as
              uid
               "Tow Operator"
             ,
             selectElement
              fullColumnName
               uid
                simpleId
                 towDate
              as
              uid
               "Tow Date"
             ,
             selectElement
              fullColumnName
               uid
                simpleId
                 releaseDate
              as
              uid
               "Release Date"
             ,
             selectElement
              fullColumnName
               uid
                simpleId
                 billingPrice
              as
              uid
               "Auto Pound Authorized Fee"
             ,
             selectElement
              expression
               predicate
                expressionAtom
                 expressionAtom
                  fullColumnName
                   uid
                    simpleId
                     billingPrice
                 mathOperator
                  -
                 expressionAtom
                  mysqlVariable
                   @contractAmount
              as
              uid
               "rev threshold"
             ,
             selectElement
              expression
               predicate
                expressionAtom
                 constant
                  null
              as
              uid
               "Storage Days"
             ,
             selectElement
              expression
               predicate
                expressionAtom
                 constant
                  null
              as
              uid
               simpleId
                timeFrom
             ,
             selectElement
              expression
               predicate
                expressionAtom
                 constant
                  null
              as
              uid
               simpleId
                timeTo
             ,
             selectElement
              fullColumnName
               uid
                simpleId
                 billingPrice
              as
              uid
               "Authorized Impoundment Fee"
             ,
             selectElement
              expression
               predicate
                expressionAtom
                 expressionAtom
                  expressionAtom
                   (
                   expression
                    predicate
                     expressionAtom
                      expressionAtom
                       fullColumnName
                        uid
                         simpleId
                          billingPrice
                      mathOperator
                       -
                      expressionAtom
                       mysqlVariable
                        @contractAmount
                   )
                  mathOperator
                   /
                  expressionAtom
                   constant
                    decimalLiteral
                     2
                 mathOperator
                  +
                 expressionAtom
                  mysqlVariable
                   @contractAmount
              as
              uid
               "rev share amount"
            fromClause
             from
             tableSources
              tableSource
               tableSourceItem
                tableName
                 fullId
                  uid
                   simpleId
                    Temp1
             where
             expression
              expression
               predicate
                predicate
                 expressionAtom
                  fullColumnName
                   uid
                    simpleId
                     keywordsCanBeId
                      code
                in
                (
                expressions
                 expression
                  predicate
                   expressionAtom
                    constant
                     stringLiteral
                      'ImpoundmentFee'
                )
              logicalOperator
               and
              expression
               predicate
                predicate
                 expressionAtom
                  fullColumnName
                   uid
                    simpleId
                     lotCode
                like
                predicate
                 expressionAtom
                  constant
                   stringLiteral
                    '%PEAKA%'
        ;
       END
  ;
  sqlStatement
   ddlStatement
    createRole
     create
     role
     roleName
      userName
       simpleUserName
        'RL_COMPLIANCE_NSA'
  ;
  sqlStatement
   ddlStatement
    createRole
     create
     role
     ifNotExists
      if
      not
      exists
     roleName
      userName
       simpleUserName
        'RL_COMPLIANCE_NSA'
  ;
  sqlStatement
   ddlStatement
    createRole
     CREATE
     ROLE
     roleName
      userName
       simpleUserName
        'admin'
     ,
     roleName
      userName
       simpleUserName
        'developer'
  ;
  sqlStatement
   ddlStatement
    createRole
     CREATE
     ROLE
     roleName
      userName
       simpleUserName
        'webapp'
       hostName
        @'localhost'
  ;
  sqlStatement
   ddlStatement
    createView
     CREATE
     VIEW
     fullId
      uid
       simpleId
        view_with_cte1
     AS
     withClause
      WITH
      commonTableExpressions
       cteName
        uid
         simpleId
          cte1
       AS
       (
       dmlStatement
        selectStatement
         querySpecification
          SELECT
          selectElements
           selectElement
            fullColumnName
             uid
              simpleId
               column_1
            AS
            uid
             simpleId
              a
           ,
           selectElement
            fullColumnName
             uid
              simpleId
               column_2
            AS
            uid
             simpleId
              b
          fromClause
           FROM
           tableSources
            tableSource
             tableSourceItem
              tableName
               fullId
                uid
                 simpleId
                  table1
       )
     selectStatement
      querySpecification
       SELECT
       selectElements
        selectElement
         fullColumnName
          uid
           simpleId
            a
        ,
        selectElement
         fullColumnName
          uid
           simpleId
            b
       fromClause
        FROM
        tableSources
         tableSource
          tableSourceItem
           tableName
            fullId
             uid
              simpleId
               cte1
  ;
  sqlStatement
   ddlStatement
    createView
     CREATE
     VIEW
     fullId
      uid
       simpleId
        view_with_cte2
     AS
     withClause
      WITH
      commonTableExpressions
       cteName
        uid
         simpleId
          cte1
       (
       cteColumnName
        uid
         simpleId
          col1
       ,
       cteColumnName
        uid
         simpleId
          col2
       )
       AS
       (
       dmlStatement
        selectStatement
         querySpecificationNointo
          SELECT
          selectElements
           selectElement
            expression
             predicate
              expressionAtom
               constant
                decimalLiteral
                 1
           ,
           selectElement
            expression
             predicate
              expressionAtom
               constant
                decimalLiteral
                 2
          fromClause
         unionStatement
          UNION
          ALL
          querySpecificationNointo
           SELECT
           selectElements
            selectElement
             expression
              predicate
               expressionAtom
                constant
                 decimalLiteral
                  3
            ,
            selectElement
             expression
              predicate
               expressionAtom
                constant
                 decimalLiteral
                  4
           fromClause
       )
       ,
       commonTableExpressions
        cteName
         uid
          simpleId
           cte2
        (
        cteColumnName
         uid
          simpleId
           col1
        ,
        cteColumnName
         uid
          simpleId
           col2
        )
        AS
        (
        dmlStatement
         selectStatement
          querySpecificationNointo
           SELECT
           selectElements
            selectElement
             expression
              predicate
               expressionAtom
                constant
                 decimalLiteral
                  5
            ,
            selectElement
             expression
              predicate
               expressionAtom
                constant
                 decimalLiteral
                  6
           fromClause
          unionStatement
           UNION
           ALL
           querySpecificationNointo
            SELECT
            selectElements
             selectElement
              expression
               predicate
                expressionAtom
                 constant
                  decimalLiteral
                   7
             ,
             selectElement
              expression
               predicate
                expressionAtom
                 constant
                  decimalLiteral
                   8
            fromClause
        )
     selectStatement
      querySpecification
       SELECT
       selectElements
        selectElement
         fullColumnName
          uid
           simpleId
            col1
        ,
        selectElement
         fullColumnName
          uid
           simpleId
            col2
       fromClause
        FROM
        tableSources
         tableSource
          tableSourceItem
           tableName
            fullId
             uid
              simpleId
               cte
  ;
  sqlStatement
   ddlStatement
    createView
     CREATE
     VIEW
     fullId
      uid
       simpleId
        view_with_cte3
     AS
     withClause
      WITH
      commonTableExpressions
       cteName
        uid
         simpleId
          cte
       (
       cteColumnName
        uid
         simpleId
          col1
       ,
       cteColumnName
        uid
         simpleId
          col2
       )
       AS
       (
       dmlStatement
        selectStatement
         querySpecificationNointo
          SELECT
          selectElements
           selectElement
            expression
             predicate
              expressionAtom
               constant
                decimalLiteral
                 1
           ,
           selectElement
            expression
             predicate
              expressionAtom
               constant
                decimalLiteral
                 2
          fromClause
         unionStatement
          UNION
          ALL
          querySpecificationNointo
           SELECT
           selectElements
            selectElement
             expression
              predicate
               expressionAtom
                constant
                 decimalLiteral
                  3
            ,
            selectElement
             expression
              predicate
               expressionAtom
                constant
                 decimalLiteral
                  4
           fromClause
       )
     selectStatement
      querySpecification
       SELECT
       selectElements
        selectElement
         fullColumnName
          uid
           simpleId
            col1
        ,
        selectElement
         fullColumnName
          uid
           simpleId
            col2
       fromClause
        FROM
        tableSources
         tableSource
          tableSourceItem
           tableName
            fullId
             uid
              simpleId
               cte
  ;
  sqlStatement
   ddlStatement
    createView
     CREATE
     VIEW
     fullId
      uid
       simpleId
        view_with_cte4
     AS
     withClause
      WITH
      RECURSIVE
      commonTableExpressions
       cteName
        uid
         simpleId
          cte
       (
       cteColumnName
        uid
         simpleId
          n
       )
       AS
       (
       dmlStatement
        selectStatement
         querySpecificationNointo
          SELECT
          selectElements
           selectElement
            expression
             predicate
              expressionAtom
               constant
                decimalLiteral
                 1
          fromClause
         unionStatement
          UNION
          ALL
          querySpecificationNointo
           SELECT
           selectElements
            selectElement
             expression
              predicate
               expressionAtom
                expressionAtom
                 fullColumnName
                  uid
                   simpleId
                    n
                mathOperator
                 +
                expressionAtom
                 constant
                  decimalLiteral
                   1
           fromClause
            FROM
            tableSources
             tableSource
              tableSourceItem
               tableName
                fullId
                 uid
                  simpleId
                   cte
            WHERE
            expression
             predicate
              predicate
               expressionAtom
                fullColumnName
                 uid
                  simpleId
                   n
              comparisonOperator
               <
              predicate
               expressionAtom
                constant
                 decimalLiteral
                  5
       )
     selectStatement
      querySpecification
       SELECT
       selectElements
        *
       fromClause
        FROM
        tableSources
         tableSource
          tableSourceItem
           tableName
            fullId
             uid
              simpleId
               cte
  ;
  sqlStatement
   ddlStatement
    createView
     CREATE
     VIEW
     fullId
      uid
       `invoice_payments_stats`
     AS
     selectStatement
      querySpecification
       SELECT
       selectElements
        selectElement
         fullColumnName
          uid
           `i`
          dottedId
           .
           uid
            `id`
         AS
         uid
          `id`
       fromClause
        FROM
        tableSources
         tableSource
          tableSourceItem
           (
           tableSources
            tableSource
             tableSourceItem
              tableName
               fullId
                uid
                 `invoices`
              uid
               `i`
             joinPart
              JOIN
              lateral
              tableSourceItem
               selectStatement
                queryExpression
                 (
                 querySpecification
                  SELECT
                  selectElements
                   selectElement
                    functionCall
                     aggregateWindowedFunction
                      MAX
                      (
                      functionArg
                       fullColumnName
                        uid
                         `ip`
                        dottedId
                         .
                         uid
                          `date`
                      )
                    AS
                    uid
                     `latest_payment`
                  fromClause
                   FROM
                   tableSources
                    tableSource
                     tableSourceItem
                      tableName
                       fullId
                        uid
                         `invoice_payments`
                      uid
                       `ip`
                 )
               uid
                `ps`
           )
  ;
  sqlStatement
   transactionStatement
    lockTables
     lock
     tables
     lockTableElement
      tableName
       fullId
        uid
         simpleId
          t1
      lockAction
       read
     waitNowaitClause
      nowait
  ;
  sqlStatement
   transactionStatement
    lockTables
     lock
     table
     lockTableElement
      tableName
       fullId
        uid
         simpleId
          t1
      lockAction
       read
       local
     waitNowaitClause
      wait
      decimalLiteral
       100
  ;
  sqlStatement
   ddlStatement
    createSequence
     CREATE
     SEQUENCE
     ifNotExists
      if
      NOT
      EXISTS
     fullId
      uid
       simpleId
        workdb
      .s2
     sequenceSpec
      START
      =
      decimalLiteral
       1
     sequenceSpec
      CYCLE
     sequenceSpec
      MINVALUE
      =
      decimalLiteral
       10000
     sequenceSpec
      MAXVALUE
      =
      decimalLiteral
       999999999999
  ;
  sqlStatement
   ddlStatement
    createSequence
     CREATE
     orReplace
      OR
      REPLACE
     SEQUENCE
     ifNotExists
      if
      NOT
      EXISTS
     fullId
      uid
       simpleId
        s2
     sequenceSpec
      START
      =
      decimalLiteral
       100
     sequenceSpec
      CACHE
      decimalLiteral
       1000
  ;
  sqlStatement
   ddlStatement
    createSequence
     CREATE
     SEQUENCE
     fullId
      uid
       `seq_8b4d1cdf-377e-4021-aef3-f7c9846903fc`
     sequenceSpec
      INCREMENT
      BY
      decimalLiteral
       1
     sequenceSpec
      START
      WITH
      decimalLiteral
       1
  ;
  sqlStatement
   setStatementFor
    SET
    STATEMENT
    max_statement_time
    =
    constant
     decimalLiteral
      60
    FOR
   ddlStatement
    createTable
     CREATE
     TABLE
     tableName
      fullId
       uid
        simpleId
         some_table
     createDefinitions
      (
      createDefinition
       uid
        simpleId
         val
       columnDefinition
        dataType
         int
      )
  ;
  sqlStatement
   ddlStatement
    createView
     CREATE
     orReplace
      OR
      REPLACE
     VIEW
     fullId
      uid
       simpleId
        view_name
     AS
     withClause
      WITH
      commonTableExpressions
       cteName
        uid
         simpleId
          my_values
       (
       cteColumnName
        uid
         simpleId
          val1
       ,
       cteColumnName
        uid
         simpleId
          val2
       )
       AS
       (
       dmlStatement
        valuesStatement
         VALUES
         (
         expressionsWithDefaults
          expressionOrDefault
           expression
            predicate
             expressionAtom
              constant
               decimalLiteral
                1
          ,
          expressionOrDefault
           expression
            predicate
             expressionAtom
              constant
               stringLiteral
                'One'
         )
         ,
         (
         expressionsWithDefaults
          expressionOrDefault
           expression
            predicate
             expressionAtom
              constant
               decimalLiteral
                2
          ,
          expressionOrDefault
           expression
            predicate
             expressionAtom
              constant
               stringLiteral
                'Two'
         )
       )
     selectStatement
      querySpecification
       SELECT
       selectElements
        selectElement
         fullColumnName
          uid
           simpleId
            v
          dottedId
           .val1
        ,
        selectElement
         fullColumnName
          uid
           simpleId
            v
          dottedId
           .val2
       fromClause
        FROM
        tableSources
         tableSource
          tableSourceItem
           tableName
            fullId
             uid
              simpleId
               my_values
           uid
            simpleId
             v
  ;
  sqlStatement
   ddlStatement
    createProcedure
     CREATE
     ownerStatement
      DEFINER
      =
      userName
       simpleUserName
        `peuser`
       hostName
        @`%`
     PROCEDURE
     fullId
      uid
       `test_utf`
     (
     )
     routineBody
      blockStatement
       BEGIN
       procedureSqlStatement
        sqlStatement
         administrationStatement
          setStatement
           SET
           variableClause
            @Ν_greece
           :=
           expression
            predicate
             expressionAtom
              constant
               decimalLiteral
                1
           ,
           variableClause
            @N_latin
           :=
           expression
            predicate
             expressionAtom
              constant
               stringLiteral
                'test'
        ;
       procedureSqlStatement
        sqlStatement
         dmlStatement
          selectStatement
           querySpecification
            SELECT
            selectElements
             selectElement
              expression
               predicate
                expressionAtom
                 mysqlVariable
                  @Ν_greece
             ,
             selectElement
              expression
               predicate
                expressionAtom
                 mysqlVariable
                  @N_latin
            fromClause
        ;
       END
 <EOF>
