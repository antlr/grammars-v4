(tsql_file (batch (sql_clauses (dml_clause (select_statement_standalone (select_statement (query_expression (query_specification SELECT (select_list (select_list_elem (expression_elem (expression (primitive_expression (constant 1))) (as_column_alias as (column_alias (id_ tag))))) , (select_list_elem (column_elem NULL (as_column_alias as (column_alias (id_ Parent))))) , (select_list_elem (expression_elem (expression (primitive_expression (constant 3))) (as_column_alias as (column_alias (id_ [Baz!1!Qux!CDATA])))))))) (for_clause FOR XML EXPLICIT (xml_common_directives , BINARY BASE64) (xml_common_directives , TYPE)))))) (go_statement GO)) (batch (sql_clauses ;) (sql_clauses (another_statement (declare_statement DECLARE @xml (table_name (id_ (keyword xml)))))) (sql_clauses (dml_clause (select_statement_standalone (select_statement (query_expression (query_specification SELECT (select_list (select_list_elem @xml = (expression (bracket_expression ( (subquery (select_statement (query_expression (query_specification SELECT (select_list (select_list_elem (expression_elem (expression (primitive_expression (constant 'foo'))) (as_column_alias AS (column_alias 'foo')))) , (select_list_elem (expression_elem (expression (bracket_expression ( (subquery (select_statement (query_expression (query_specification SELECT (select_list (select_list_elem (expression_elem (expression (primitive_expression (constant 1))) (as_column_alias as (column_alias (id_ tag))))) , (select_list_elem (column_elem NULL (as_column_alias as (column_alias (id_ Parent))))) , (select_list_elem (expression_elem (expression (primitive_expression (constant 3))) (as_column_alias as (column_alias (id_ [Baz!1!Qux!CDATA])))))))) (for_clause FOR XML EXPLICIT (xml_common_directives , BINARY BASE64) (xml_common_directives , TYPE)))) )))))))) (for_clause FOR XML PATH ( 'Test' )))) ))))))) ;)))) (go_statement GO)) (batch (sql_clauses ;) (sql_clauses (ddl_clause (create_table CREATE TABLE (table_name (id_ MyTable)) ( (column_def_table_constraints (column_def_table_constraint (column_definition (id_ Col1) (data_type (id_ (keyword int))) (column_definition_element (column_constraint PRIMARY KEY primary_key_options)))) , (column_def_table_constraint (column_definition (id_ Col2) (data_type (id_ (keyword binary)))))) )))) (sql_clauses (dml_clause (insert_statement INSERT INTO (ddl_object (full_table_name (id_ MyTable))) (insert_statement_value (table_value_constructor VALUES ( (expression_list (expression (primitive_expression (constant 1))) , (expression (primitive_expression (constant 0x7)))) ))) ;))) (sql_clauses (dml_clause (select_statement_standalone (select_statement (query_expression (query_specification SELECT (select_list (select_list_elem (column_elem (full_column_name (id_ Col1)))) , (select_list_elem (expression_elem (expression (function_call (built_in_functions CAST ( (expression (full_column_name (id_ Col2))) as (data_type (id_ image)) )))) (as_column_alias as (column_alias (id_ Col2)))))) FROM (table_sources (table_source (table_source_item_joined (table_source_item (full_table_name (id_ MyTable)))))))) (for_clause FOR XML AUTO (xml_common_directives , BINARY BASE64)) ;)))) (go_statement GO)) (batch (sql_clauses ;) (sql_clauses (another_statement (declare_statement DECLARE @x (xml_type_definition xml ( (xml_schema_collection Sales . StoreSurveySchemaCollection) ))))) (go_statement GO)) (batch (sql_clauses ;) (sql_clauses (another_statement (declare_statement declare @myDoc (table_name (id_ (keyword xml)))))) (sql_clauses (another_statement (set_statement set @myDoc = (expression (primitive_expression (constant '<Root>\n<ProductDescription ProductID="1" ProductName="Road Bike">\n<Features>\n  <Warranty>1 year parts and labor</Warranty>\n  <Maintenance>3 year parts and labor extended maintenance is available</Maintenance>\n</Features>\n</ProductDescription>\n</Root>')))))) (sql_clauses (dml_clause (select_statement_standalone (select_statement (query_expression (query_specification SELECT (select_list (select_list_elem (expression_elem (expression (expression (primitive_expression @myDoc)) . (query_call query ( '/Root/ProductDescription/Features' ))) (as_column_alias (column_alias (id_ (keyword GO))))))))) ;)))) (sql_clauses (dml_clause (select_statement_standalone (select_statement (query_expression (query_specification SELECT (select_list (select_list_elem (udt_elem (id_ CatalogDescription) . (id_ (keyword query)) (udt_method_arguments ( (execute_var_string '\ndeclare namespace PD="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription";\n<Product ProductModelID="{ /PD:ProductDescription[1]/@ProductModelID }" />\n') )) (as_column_alias as (column_alias (id_ Result)))))) FROM (table_sources (table_source (table_source_item_joined (table_source_item (full_table_name (id_ Production) . (id_ ProductModel)))))) where (search_condition (predicate (expression (function_call (built_in_functions (xml_data_type_methods (exist_method (full_column_name (id_ CatalogDescription)) . (exist_call exist ( '\ndeclare namespace PD="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription";\ndeclare namespace wm="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelWarrAndMain";\n     /PD:ProductDescription/PD:Features/wm:Warranty ' ))))))) (comparison_operator =) (expression (primitive_expression (constant 1))))))))))) (go_statement GO)) (batch (sql_clauses ;) (sql_clauses (another_statement (declare_statement DECLARE @myDoc (table_name (id_ (keyword xml)))))) (sql_clauses (another_statement (declare_statement DECLARE @ProdID (table_name (id_ (keyword int)))))) (sql_clauses (another_statement (set_statement SET @myDoc = (expression (primitive_expression (constant '<Root>\n<ProductDescription ProductID="1" ProductName="Road Bike">\n<Features>\n  <Warranty>1 year parts and labor</Warranty>\n  <Maintenance>3 year parts and labor extended maintenance is available</Maintenance>\n</Features>\n</ProductDescription>\n</Root>')))))) (sql_clauses (another_statement (set_statement SET @ProdID = (expression (expression (primitive_expression @myDoc)) . (value_call value ( '(/Root/ProductDescription/@ProductID)[1]' , 'int' )))))) (sql_clauses (dml_clause (select_statement_standalone (select_statement (query_expression (query_specification SELECT (select_list (select_list_elem (expression_elem (expression (primitive_expression @ProdID)) (as_column_alias (column_alias (id_ (keyword GO))))))))) ;)))) (sql_clauses (another_statement (declare_statement declare @x (table_name (id_ (keyword xml))) ;))) (sql_clauses (another_statement (declare_statement declare @f (table_name (id_ bit)) ;))) (sql_clauses (another_statement (set_statement set @x = (expression (primitive_expression (constant '<root Somedate = "2002-01-01Z"/>'))) ;))) (sql_clauses (another_statement (set_statement set @f = (expression (expression (primitive_expression @x)) . (exist_call exist ( '/root[(@Somedate cast as xs:date?) eq xs:date("2002-01-01Z")]' ))) ;))) (sql_clauses (dml_clause (select_statement_standalone (select_statement (query_expression (query_specification select (select_list (select_list_elem (expression_elem (expression (primitive_expression @f))))))) ;)))) (go_statement GO)) (batch (sql_clauses ;) (sql_clauses (another_statement (declare_statement DECLARE @x (table_name (id_ (keyword xml))) ;))) (sql_clauses (another_statement (declare_statement DECLARE @f (table_name (id_ bit)) ;))) (sql_clauses (another_statement (set_statement SET @x = (expression (primitive_expression (constant '<Somedate>2002-01-01Z</Somedate>'))) ;))) (sql_clauses (another_statement (set_statement SET @f = (expression (expression (primitive_expression @x)) . (exist_call exist ( '/Somedate[(text()[1] cast as xs:date ?) = xs:date("2002-01-01Z") ]' )))))) (sql_clauses (dml_clause (select_statement_standalone (select_statement (query_expression (query_specification SELECT (select_list (select_list_elem (expression_elem (expression (primitive_expression @f))))))) ;)))) (go_statement GO)) (batch (sql_clauses ;) (sql_clauses (another_statement (declare_statement DECLARE @x (xml_type_definition xml ( (xml_schema_collection Production . ManuInstructionsSchemaCollection) )) ;))) (sql_clauses (dml_clause (select_statement_standalone (select_statement (query_expression (query_specification SELECT (select_list (select_list_elem @x = (expression (full_column_name (id_ Instructions))))) FROM (table_sources (table_source (table_source_item_joined (table_source_item (full_table_name (id_ Production) . (id_ ProductModel)))))) WHERE (search_condition (predicate (expression (full_column_name (id_ ProductModelID))) (comparison_operator =) (expression (primitive_expression (constant 67))))))) ;)))) (sql_clauses (another_statement (declare_statement DECLARE @f (table_name (id_ (keyword int))) ;))) (sql_clauses (another_statement (set_statement SET @f = (expression (expression (primitive_expression @x)) . (exist_call exist ( ' declare namespace AWMI="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelManuInstructions";\n    /AWMI:root/AWMI:Location[@LocationID=50]\n' ))) ;))) (sql_clauses (dml_clause (select_statement_standalone (select_statement (query_expression (query_specification SELECT (select_list (select_list_elem (expression_elem (expression (primitive_expression @f))))))) ;)))) (go_statement GO)) (batch (sql_clauses ;) (sql_clauses (dml_clause (select_statement_standalone (select_statement (query_expression (query_specification SELECT (select_list (select_list_elem (column_elem (full_column_name (id_ ProductModelID)))) , (select_list_elem (udt_elem (id_ CatalogDescription) . (id_ (keyword query)) (udt_method_arguments ( (execute_var_string '\ndeclare namespace pd="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription";\n    <Product\n        ProductModelID= "{ sql:column("ProductModelID") }"\n        />\n') )) (as_column_alias AS (column_alias (id_ Result)))))) FROM (table_sources (table_source (table_source_item_joined (table_source_item (full_table_name (id_ Production) . (id_ ProductModel)))))) WHERE (search_condition (predicate (expression (function_call (built_in_functions (xml_data_type_methods (exist_method (full_column_name (id_ CatalogDescription)) . (exist_call exist ( '\n    declare namespace  pd="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription";\n     /pd:ProductDescription[not(pd:Specifications)]' ))))))) (comparison_operator =) (expression (primitive_expression (constant 1))))))) ;)))) (go_statement GO)) (batch (sql_clauses ;) (sql_clauses (another_statement (declare_statement WITH XMLNAMESPACES ( (xml_declaration 'http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription' AS (id_ pd)) )))) (sql_clauses (dml_clause (select_statement_standalone (select_statement (query_expression (query_specification SELECT (select_list (select_list_elem (column_elem (full_column_name (id_ ProductModelID)))) , (select_list_elem (udt_elem (id_ CatalogDescription) . (id_ (keyword query)) (udt_method_arguments ( (execute_var_string '\n    <Product\n        ProductModelID= "{ sql:column("ProductModelID") }"\n        />\n') )) (as_column_alias AS (column_alias (id_ Result)))))) FROM (table_sources (table_source (table_source_item_joined (table_source_item (full_table_name (id_ Production) . (id_ ProductModel)))))) WHERE (search_condition (predicate (expression (function_call (built_in_functions (xml_data_type_methods (exist_method (full_column_name (id_ CatalogDescription)) . (exist_call exist ( '\n     /pd:ProductDescription[not(pd:Specifications)]' ))))))) (comparison_operator =) (expression (primitive_expression (constant 1))))))) ;)))) (go_statement GO)) (batch (sql_clauses ;) (sql_clauses (another_statement (declare_statement DECLARE @myDoc (table_name (id_ (keyword xml))) ;))) (sql_clauses (another_statement (set_statement SET @myDoc = (expression (primitive_expression (constant '<Root>\n<Location LocationID="10"\n            LaborHours="1.1"\n            MachineHours=".2" >Manufacturing steps are described here.\n<step>Manufacturing step 1 at this work center</step>\n<step>Manufacturing step 2 at this work center</step>\n</Location>\n</Root>'))) ;))) (sql_clauses (another_statement (set_statement (set_special SET (modify_method @myDoc . (modify_call modify ( '\n  replace value of (/Root/Location/step[1]/text())[1]\n  with     "new text describing the manu step"\n' )))))) ;) (sql_clauses (dml_clause (select_statement_standalone (select_statement (query_expression (query_specification SELECT (select_list (select_list_elem (expression_elem (expression (primitive_expression @myDoc))))))) ;)))) (go_statement GO)) (batch (sql_clauses ;) (sql_clauses (dml_clause (select_statement_standalone (select_statement (query_expression (query_specification SELECT (select_list (select_list_elem (expression_elem (expression (function_call (built_in_functions (xml_data_type_methods (query_method (full_column_name (id_ T2) . (id_ Loc)) . (query_call query ( '.' )))))))))) FROM (table_sources (table_source (table_source_item_joined (table_source_item (full_table_name (id_ T))) (join_part (apply_ CROSS APPLY (table_source (table_source_item_joined (table_source_item (nodes_method (full_column_name (id_ Instructions)) . nodes ( '/root/Location' )) (as_table_alias as (table_alias (id_ T2))) (column_alias_list ( (column_alias (id_ Loc)) )))))))))))))))) (sql_clauses (another_statement (declare_statement DECLARE @x (table_name (id_ (keyword xml)))))) (sql_clauses (another_statement (set_statement SET @x = (expression (primitive_expression (constant '<Root>\n    <row id="1"><name>Larry</name><oflw>some text</oflw></row>\n    <row id="2"><name>moe</name></row>\n    <row id="3" />\n</Root>')))))) (sql_clauses (dml_clause (select_statement_standalone (select_statement (query_expression (query_specification SELECT (select_list (select_list_elem (expression_elem (expression (function_call (built_in_functions (xml_data_type_methods (query_method (full_column_name (id_ T) . (id_ c)) . (query_call query ( '.' ))))))) (as_column_alias AS (column_alias (id_ result)))))) FROM (table_sources (table_source (table_source_item_joined (table_source_item (nodes_method @x . nodes ( '/Root/row' )) (as_table_alias (table_alias (id_ T))) (column_alias_list ( (column_alias (id_ c)) )))))))) (option_clause OPTION ( (option OPTIMIZE FOR ( (optimize_for_arg @xml = NULL) )) )) ;)))) (go_statement GO)) (batch (sql_clauses ;) (sql_clauses (dml_clause (select_statement_standalone (select_statement (query_expression (query_specification SELECT (select_list (select_list_elem (udt_elem (id_ C) . (id_ (keyword query)) (udt_method_arguments ( (execute_var_string '.') )) (as_column_alias as (column_alias (id_ result)))))) FROM (table_sources (table_source (table_source_item_joined (table_source_item (full_table_name (id_ Production) . (id_ ProductModel))) (join_part (apply_ CROSS APPLY (table_source (table_source_item_joined (table_source_item (nodes_method (full_column_name (id_ Instructions)) . nodes ( '\ndeclare namespace MI="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelManuInstructions";\n/MI:root/MI:Location' )) (as_table_alias as (table_alias (id_ T))) (column_alias_list ( (column_alias (id_ C)) )))))))))) WHERE (search_condition (predicate (expression (full_column_name (id_ ProductModelID))) (comparison_operator =) (expression (primitive_expression (constant 7))))))))))) (go_statement GO)) (batch (sql_clauses ;) (sql_clauses (dml_clause (select_statement_standalone (select_statement (query_expression (query_specification SELECT (select_list (select_list_elem (expression_elem (expression (expression (function_call (built_in_functions CAST ( (expression (primitive_expression (constant N''))) as (data_type (id_ (keyword xml))) )))) . (value_call value ( 'xs:base64Binary(sql:variable("@str"))' , 'varbinary(MAX)' )))))))))))) (sql_clauses (dml_clause (select_statement_standalone (select_statement (query_expression (query_specification SELECT (select_list (select_list_elem (column_elem (full_column_name (id_ ProductModelID)))) , (select_list_elem (udt_elem (id_ Locations) . (id_ (keyword value)) (udt_method_arguments ( (execute_var_string './@LocationID') , (execute_var_string 'int') )) (as_column_alias AS (column_alias (id_ LocID))))) , (select_list_elem (udt_elem (id_ steps) . (id_ (keyword query)) (udt_method_arguments ( (execute_var_string '.') )) (as_column_alias AS (column_alias (id_ Step)))))) FROM (table_sources (table_source (table_source_item_joined (table_source_item (full_table_name (id_ Production) . (id_ ProductModel))) (join_part (apply_ CROSS APPLY (table_source (table_source_item_joined (table_source_item (nodes_method (full_column_name (id_ Instructions)) . nodes ( '\ndeclare namespace MI="https://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelManuInstructions";\n/MI:root/MI:Location' )) (as_table_alias AS (table_alias (id_ T1))) (column_alias_list ( (column_alias (id_ Locations)) ))) (join_part (apply_ CROSS APPLY (table_source (table_source_item_joined (table_source_item (nodes_method (full_column_name (id_ T1) . (id_ Locations)) . nodes ( '\ndeclare namespace MI="https://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelManuInstructions";\n./MI:step ' )) (as_table_alias AS (table_alias (id_ T2))) (column_alias_list ( (column_alias (id_ steps)) )))))))))))))) WHERE (search_condition (predicate (expression (full_column_name (id_ ProductModelID))) (comparison_operator =) (expression (primitive_expression (constant 7))))))))))) (go_statement GO)) <EOF>)