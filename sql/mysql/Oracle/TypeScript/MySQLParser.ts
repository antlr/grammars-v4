// Generated from ../MySQLParser.g4 by ANTLR 4.13.1

import * as antlr from "antlr4ng";
import { Token } from "antlr4ng";

// for running tests with parameters, TODO: discuss strategy for typed parameters in CI
// eslint-disable-next-line no-unused-vars
type int = number;

/* Copyright (c) 2020, 2024, Oracle and/or its affiliates. */

/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable no-useless-escape, no-lone-blocks */

import { MySQLBaseRecognizer } from "./MySQLBaseRecognizer.js";
import { SqlMode } from "./MySQLBaseLexer.js";


export class MySQLParser extends MySQLBaseRecognizer {
    public static readonly NOT2_SYMBOL = 1;
    public static readonly CONCAT_PIPES_SYMBOL = 2;
    public static readonly INT_NUMBER = 3;
    public static readonly LONG_NUMBER = 4;
    public static readonly ULONGLONG_NUMBER = 5;
    public static readonly EQUAL_OPERATOR = 6;
    public static readonly ASSIGN_OPERATOR = 7;
    public static readonly NULL_SAFE_EQUAL_OPERATOR = 8;
    public static readonly GREATER_OR_EQUAL_OPERATOR = 9;
    public static readonly GREATER_THAN_OPERATOR = 10;
    public static readonly LESS_OR_EQUAL_OPERATOR = 11;
    public static readonly LESS_THAN_OPERATOR = 12;
    public static readonly NOT_EQUAL_OPERATOR = 13;
    public static readonly PLUS_OPERATOR = 14;
    public static readonly MINUS_OPERATOR = 15;
    public static readonly MULT_OPERATOR = 16;
    public static readonly DIV_OPERATOR = 17;
    public static readonly MOD_OPERATOR = 18;
    public static readonly LOGICAL_NOT_OPERATOR = 19;
    public static readonly BITWISE_NOT_OPERATOR = 20;
    public static readonly SHIFT_LEFT_OPERATOR = 21;
    public static readonly SHIFT_RIGHT_OPERATOR = 22;
    public static readonly LOGICAL_AND_OPERATOR = 23;
    public static readonly BITWISE_AND_OPERATOR = 24;
    public static readonly BITWISE_XOR_OPERATOR = 25;
    public static readonly LOGICAL_OR_OPERATOR = 26;
    public static readonly BITWISE_OR_OPERATOR = 27;
    public static readonly DOT_SYMBOL = 28;
    public static readonly COMMA_SYMBOL = 29;
    public static readonly SEMICOLON_SYMBOL = 30;
    public static readonly COLON_SYMBOL = 31;
    public static readonly OPEN_PAR_SYMBOL = 32;
    public static readonly CLOSE_PAR_SYMBOL = 33;
    public static readonly OPEN_CURLY_SYMBOL = 34;
    public static readonly CLOSE_CURLY_SYMBOL = 35;
    public static readonly UNDERLINE_SYMBOL = 36;
    public static readonly JSON_SEPARATOR_SYMBOL = 37;
    public static readonly JSON_UNQUOTED_SEPARATOR_SYMBOL = 38;
    public static readonly AT_SIGN_SYMBOL = 39;
    public static readonly AT_TEXT_SUFFIX = 40;
    public static readonly AT_AT_SIGN_SYMBOL = 41;
    public static readonly NULL2_SYMBOL = 42;
    public static readonly PARAM_MARKER = 43;
    public static readonly HEX_NUMBER = 44;
    public static readonly BIN_NUMBER = 45;
    public static readonly DECIMAL_NUMBER = 46;
    public static readonly FLOAT_NUMBER = 47;
    public static readonly ACCESSIBLE_SYMBOL = 48;
    public static readonly ACCOUNT_SYMBOL = 49;
    public static readonly ACTION_SYMBOL = 50;
    public static readonly ADD_SYMBOL = 51;
    public static readonly ADDDATE_SYMBOL = 52;
    public static readonly AFTER_SYMBOL = 53;
    public static readonly AGAINST_SYMBOL = 54;
    public static readonly AGGREGATE_SYMBOL = 55;
    public static readonly ALGORITHM_SYMBOL = 56;
    public static readonly ALL_SYMBOL = 57;
    public static readonly ALTER_SYMBOL = 58;
    public static readonly ALWAYS_SYMBOL = 59;
    public static readonly ANALYZE_SYMBOL = 60;
    public static readonly AND_SYMBOL = 61;
    public static readonly ANY_SYMBOL = 62;
    public static readonly AS_SYMBOL = 63;
    public static readonly ASC_SYMBOL = 64;
    public static readonly ASCII_SYMBOL = 65;
    public static readonly ASENSITIVE_SYMBOL = 66;
    public static readonly AT_SYMBOL = 67;
    public static readonly AUTOEXTEND_SIZE_SYMBOL = 68;
    public static readonly AUTO_INCREMENT_SYMBOL = 69;
    public static readonly AVG_ROW_LENGTH_SYMBOL = 70;
    public static readonly AVG_SYMBOL = 71;
    public static readonly BACKUP_SYMBOL = 72;
    public static readonly BEFORE_SYMBOL = 73;
    public static readonly BEGIN_SYMBOL = 74;
    public static readonly BETWEEN_SYMBOL = 75;
    public static readonly BIGINT_SYMBOL = 76;
    public static readonly BINARY_SYMBOL = 77;
    public static readonly BINLOG_SYMBOL = 78;
    public static readonly BIT_AND_SYMBOL = 79;
    public static readonly BIT_OR_SYMBOL = 80;
    public static readonly BIT_SYMBOL = 81;
    public static readonly BIT_XOR_SYMBOL = 82;
    public static readonly BLOB_SYMBOL = 83;
    public static readonly BLOCK_SYMBOL = 84;
    public static readonly BOOLEAN_SYMBOL = 85;
    public static readonly BOOL_SYMBOL = 86;
    public static readonly BOTH_SYMBOL = 87;
    public static readonly BTREE_SYMBOL = 88;
    public static readonly BY_SYMBOL = 89;
    public static readonly BYTE_SYMBOL = 90;
    public static readonly CACHE_SYMBOL = 91;
    public static readonly CALL_SYMBOL = 92;
    public static readonly CASCADE_SYMBOL = 93;
    public static readonly CASCADED_SYMBOL = 94;
    public static readonly CASE_SYMBOL = 95;
    public static readonly CAST_SYMBOL = 96;
    public static readonly CATALOG_NAME_SYMBOL = 97;
    public static readonly CHAIN_SYMBOL = 98;
    public static readonly CHANGE_SYMBOL = 99;
    public static readonly CHANGED_SYMBOL = 100;
    public static readonly CHANNEL_SYMBOL = 101;
    public static readonly CHARSET_SYMBOL = 102;
    public static readonly CHAR_SYMBOL = 103;
    public static readonly CHECKSUM_SYMBOL = 104;
    public static readonly CHECK_SYMBOL = 105;
    public static readonly CIPHER_SYMBOL = 106;
    public static readonly CLASS_ORIGIN_SYMBOL = 107;
    public static readonly CLIENT_SYMBOL = 108;
    public static readonly CLOSE_SYMBOL = 109;
    public static readonly COALESCE_SYMBOL = 110;
    public static readonly CODE_SYMBOL = 111;
    public static readonly COLLATE_SYMBOL = 112;
    public static readonly COLLATION_SYMBOL = 113;
    public static readonly COLUMNS_SYMBOL = 114;
    public static readonly COLUMN_SYMBOL = 115;
    public static readonly COLUMN_NAME_SYMBOL = 116;
    public static readonly COLUMN_FORMAT_SYMBOL = 117;
    public static readonly COMMENT_SYMBOL = 118;
    public static readonly COMMITTED_SYMBOL = 119;
    public static readonly COMMIT_SYMBOL = 120;
    public static readonly COMPACT_SYMBOL = 121;
    public static readonly COMPLETION_SYMBOL = 122;
    public static readonly COMPRESSED_SYMBOL = 123;
    public static readonly COMPRESSION_SYMBOL = 124;
    public static readonly CONCURRENT_SYMBOL = 125;
    public static readonly CONDITION_SYMBOL = 126;
    public static readonly CONNECTION_SYMBOL = 127;
    public static readonly CONSISTENT_SYMBOL = 128;
    public static readonly CONSTRAINT_SYMBOL = 129;
    public static readonly CONSTRAINT_CATALOG_SYMBOL = 130;
    public static readonly CONSTRAINT_NAME_SYMBOL = 131;
    public static readonly CONSTRAINT_SCHEMA_SYMBOL = 132;
    public static readonly CONTAINS_SYMBOL = 133;
    public static readonly CONTEXT_SYMBOL = 134;
    public static readonly CONTINUE_SYMBOL = 135;
    public static readonly CONVERT_SYMBOL = 136;
    public static readonly COUNT_SYMBOL = 137;
    public static readonly CPU_SYMBOL = 138;
    public static readonly CREATE_SYMBOL = 139;
    public static readonly CROSS_SYMBOL = 140;
    public static readonly CUBE_SYMBOL = 141;
    public static readonly CURDATE_SYMBOL = 142;
    public static readonly CURRENT_SYMBOL = 143;
    public static readonly CURRENT_DATE_SYMBOL = 144;
    public static readonly CURRENT_TIME_SYMBOL = 145;
    public static readonly CURRENT_USER_SYMBOL = 146;
    public static readonly CURSOR_SYMBOL = 147;
    public static readonly CURSOR_NAME_SYMBOL = 148;
    public static readonly CURTIME_SYMBOL = 149;
    public static readonly DATABASE_SYMBOL = 150;
    public static readonly DATABASES_SYMBOL = 151;
    public static readonly DATAFILE_SYMBOL = 152;
    public static readonly DATA_SYMBOL = 153;
    public static readonly DATETIME_SYMBOL = 154;
    public static readonly DATE_ADD_SYMBOL = 155;
    public static readonly DATE_SUB_SYMBOL = 156;
    public static readonly DATE_SYMBOL = 157;
    public static readonly DAY_HOUR_SYMBOL = 158;
    public static readonly DAY_MICROSECOND_SYMBOL = 159;
    public static readonly DAY_MINUTE_SYMBOL = 160;
    public static readonly DAY_SECOND_SYMBOL = 161;
    public static readonly DAY_SYMBOL = 162;
    public static readonly DEALLOCATE_SYMBOL = 163;
    public static readonly DECIMAL_SYMBOL = 164;
    public static readonly DECLARE_SYMBOL = 165;
    public static readonly DEFAULT_SYMBOL = 166;
    public static readonly DEFAULT_AUTH_SYMBOL = 167;
    public static readonly DEFINER_SYMBOL = 168;
    public static readonly DELAYED_SYMBOL = 169;
    public static readonly DELAY_KEY_WRITE_SYMBOL = 170;
    public static readonly DELETE_SYMBOL = 171;
    public static readonly DESC_SYMBOL = 172;
    public static readonly DESCRIBE_SYMBOL = 173;
    public static readonly DETERMINISTIC_SYMBOL = 174;
    public static readonly DIAGNOSTICS_SYMBOL = 175;
    public static readonly DIRECTORY_SYMBOL = 176;
    public static readonly DISABLE_SYMBOL = 177;
    public static readonly DISCARD_SYMBOL = 178;
    public static readonly DISK_SYMBOL = 179;
    public static readonly DISTINCT_SYMBOL = 180;
    public static readonly DIV_SYMBOL = 181;
    public static readonly DOUBLE_SYMBOL = 182;
    public static readonly DO_SYMBOL = 183;
    public static readonly DROP_SYMBOL = 184;
    public static readonly DUAL_SYMBOL = 185;
    public static readonly DUMPFILE_SYMBOL = 186;
    public static readonly DUPLICATE_SYMBOL = 187;
    public static readonly DYNAMIC_SYMBOL = 188;
    public static readonly EACH_SYMBOL = 189;
    public static readonly ELSE_SYMBOL = 190;
    public static readonly ELSEIF_SYMBOL = 191;
    public static readonly ENABLE_SYMBOL = 192;
    public static readonly ENCLOSED_SYMBOL = 193;
    public static readonly ENCRYPTION_SYMBOL = 194;
    public static readonly END_SYMBOL = 195;
    public static readonly ENDS_SYMBOL = 196;
    public static readonly ENGINES_SYMBOL = 197;
    public static readonly ENGINE_SYMBOL = 198;
    public static readonly ENUM_SYMBOL = 199;
    public static readonly ERROR_SYMBOL = 200;
    public static readonly ERRORS_SYMBOL = 201;
    public static readonly ESCAPED_SYMBOL = 202;
    public static readonly ESCAPE_SYMBOL = 203;
    public static readonly EVENTS_SYMBOL = 204;
    public static readonly EVENT_SYMBOL = 205;
    public static readonly EVERY_SYMBOL = 206;
    public static readonly EXCHANGE_SYMBOL = 207;
    public static readonly EXECUTE_SYMBOL = 208;
    public static readonly EXISTS_SYMBOL = 209;
    public static readonly EXIT_SYMBOL = 210;
    public static readonly EXPANSION_SYMBOL = 211;
    public static readonly EXPIRE_SYMBOL = 212;
    public static readonly EXPLAIN_SYMBOL = 213;
    public static readonly EXPORT_SYMBOL = 214;
    public static readonly EXTENDED_SYMBOL = 215;
    public static readonly EXTENT_SIZE_SYMBOL = 216;
    public static readonly EXTRACT_SYMBOL = 217;
    public static readonly FALSE_SYMBOL = 218;
    public static readonly FAST_SYMBOL = 219;
    public static readonly FAULTS_SYMBOL = 220;
    public static readonly FETCH_SYMBOL = 221;
    public static readonly FILE_SYMBOL = 222;
    public static readonly FILE_BLOCK_SIZE_SYMBOL = 223;
    public static readonly FILTER_SYMBOL = 224;
    public static readonly FIRST_SYMBOL = 225;
    public static readonly FIXED_SYMBOL = 226;
    public static readonly FLOAT_SYMBOL = 227;
    public static readonly FLUSH_SYMBOL = 228;
    public static readonly FOLLOWS_SYMBOL = 229;
    public static readonly FORCE_SYMBOL = 230;
    public static readonly FOREIGN_SYMBOL = 231;
    public static readonly FOR_SYMBOL = 232;
    public static readonly FORMAT_SYMBOL = 233;
    public static readonly FOUND_SYMBOL = 234;
    public static readonly FROM_SYMBOL = 235;
    public static readonly FULL_SYMBOL = 236;
    public static readonly FULLTEXT_SYMBOL = 237;
    public static readonly FUNCTION_SYMBOL = 238;
    public static readonly GET_SYMBOL = 239;
    public static readonly GENERAL_SYMBOL = 240;
    public static readonly GENERATED_SYMBOL = 241;
    public static readonly GROUP_REPLICATION_SYMBOL = 242;
    public static readonly GEOMETRYCOLLECTION_SYMBOL = 243;
    public static readonly GEOMETRY_SYMBOL = 244;
    public static readonly GET_FORMAT_SYMBOL = 245;
    public static readonly GLOBAL_SYMBOL = 246;
    public static readonly GRANT_SYMBOL = 247;
    public static readonly GRANTS_SYMBOL = 248;
    public static readonly GROUP_SYMBOL = 249;
    public static readonly GROUP_CONCAT_SYMBOL = 250;
    public static readonly HANDLER_SYMBOL = 251;
    public static readonly HASH_SYMBOL = 252;
    public static readonly HAVING_SYMBOL = 253;
    public static readonly HELP_SYMBOL = 254;
    public static readonly HIGH_PRIORITY_SYMBOL = 255;
    public static readonly HOST_SYMBOL = 256;
    public static readonly HOSTS_SYMBOL = 257;
    public static readonly HOUR_MICROSECOND_SYMBOL = 258;
    public static readonly HOUR_MINUTE_SYMBOL = 259;
    public static readonly HOUR_SECOND_SYMBOL = 260;
    public static readonly HOUR_SYMBOL = 261;
    public static readonly IDENTIFIED_SYMBOL = 262;
    public static readonly IF_SYMBOL = 263;
    public static readonly IGNORE_SYMBOL = 264;
    public static readonly IGNORE_SERVER_IDS_SYMBOL = 265;
    public static readonly IMPORT_SYMBOL = 266;
    public static readonly INDEXES_SYMBOL = 267;
    public static readonly INDEX_SYMBOL = 268;
    public static readonly INFILE_SYMBOL = 269;
    public static readonly INITIAL_SIZE_SYMBOL = 270;
    public static readonly INNER_SYMBOL = 271;
    public static readonly INOUT_SYMBOL = 272;
    public static readonly INSENSITIVE_SYMBOL = 273;
    public static readonly INSERT_SYMBOL = 274;
    public static readonly INSERT_METHOD_SYMBOL = 275;
    public static readonly INSTANCE_SYMBOL = 276;
    public static readonly INSTALL_SYMBOL = 277;
    public static readonly INTERVAL_SYMBOL = 278;
    public static readonly INTO_SYMBOL = 279;
    public static readonly INT_SYMBOL = 280;
    public static readonly INVOKER_SYMBOL = 281;
    public static readonly IN_SYMBOL = 282;
    public static readonly IO_AFTER_GTIDS_SYMBOL = 283;
    public static readonly IO_BEFORE_GTIDS_SYMBOL = 284;
    public static readonly IO_SYMBOL = 285;
    public static readonly IPC_SYMBOL = 286;
    public static readonly IS_SYMBOL = 287;
    public static readonly ISOLATION_SYMBOL = 288;
    public static readonly ISSUER_SYMBOL = 289;
    public static readonly ITERATE_SYMBOL = 290;
    public static readonly JOIN_SYMBOL = 291;
    public static readonly JSON_SYMBOL = 292;
    public static readonly KEYS_SYMBOL = 293;
    public static readonly KEY_BLOCK_SIZE_SYMBOL = 294;
    public static readonly KEY_SYMBOL = 295;
    public static readonly KILL_SYMBOL = 296;
    public static readonly LANGUAGE_SYMBOL = 297;
    public static readonly LAST_SYMBOL = 298;
    public static readonly LEADING_SYMBOL = 299;
    public static readonly LEAVES_SYMBOL = 300;
    public static readonly LEAVE_SYMBOL = 301;
    public static readonly LEFT_SYMBOL = 302;
    public static readonly LESS_SYMBOL = 303;
    public static readonly LEVEL_SYMBOL = 304;
    public static readonly LIKE_SYMBOL = 305;
    public static readonly LIMIT_SYMBOL = 306;
    public static readonly LINEAR_SYMBOL = 307;
    public static readonly LINES_SYMBOL = 308;
    public static readonly LINESTRING_SYMBOL = 309;
    public static readonly LIST_SYMBOL = 310;
    public static readonly LOAD_SYMBOL = 311;
    public static readonly LOCAL_SYMBOL = 312;
    public static readonly LOCKS_SYMBOL = 313;
    public static readonly LOCK_SYMBOL = 314;
    public static readonly LOGFILE_SYMBOL = 315;
    public static readonly LOGS_SYMBOL = 316;
    public static readonly LONGBLOB_SYMBOL = 317;
    public static readonly LONGTEXT_SYMBOL = 318;
    public static readonly LONG_SYMBOL = 319;
    public static readonly LOOP_SYMBOL = 320;
    public static readonly LOW_PRIORITY_SYMBOL = 321;
    public static readonly MASTER_AUTO_POSITION_SYMBOL = 322;
    public static readonly MASTER_BIND_SYMBOL = 323;
    public static readonly MASTER_CONNECT_RETRY_SYMBOL = 324;
    public static readonly MASTER_DELAY_SYMBOL = 325;
    public static readonly MASTER_HOST_SYMBOL = 326;
    public static readonly MASTER_LOG_FILE_SYMBOL = 327;
    public static readonly MASTER_LOG_POS_SYMBOL = 328;
    public static readonly MASTER_PASSWORD_SYMBOL = 329;
    public static readonly MASTER_PORT_SYMBOL = 330;
    public static readonly MASTER_RETRY_COUNT_SYMBOL = 331;
    public static readonly MASTER_SSL_CAPATH_SYMBOL = 332;
    public static readonly MASTER_SSL_CA_SYMBOL = 333;
    public static readonly MASTER_SSL_CERT_SYMBOL = 334;
    public static readonly MASTER_SSL_CIPHER_SYMBOL = 335;
    public static readonly MASTER_SSL_CRL_SYMBOL = 336;
    public static readonly MASTER_SSL_CRLPATH_SYMBOL = 337;
    public static readonly MASTER_SSL_KEY_SYMBOL = 338;
    public static readonly MASTER_SSL_SYMBOL = 339;
    public static readonly MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL = 340;
    public static readonly MASTER_SYMBOL = 341;
    public static readonly MASTER_TLS_VERSION_SYMBOL = 342;
    public static readonly MASTER_USER_SYMBOL = 343;
    public static readonly MASTER_HEARTBEAT_PERIOD_SYMBOL = 344;
    public static readonly MATCH_SYMBOL = 345;
    public static readonly MAX_CONNECTIONS_PER_HOUR_SYMBOL = 346;
    public static readonly MAX_QUERIES_PER_HOUR_SYMBOL = 347;
    public static readonly MAX_ROWS_SYMBOL = 348;
    public static readonly MAX_SIZE_SYMBOL = 349;
    public static readonly MAX_SYMBOL = 350;
    public static readonly MAX_UPDATES_PER_HOUR_SYMBOL = 351;
    public static readonly MAX_USER_CONNECTIONS_SYMBOL = 352;
    public static readonly MAXVALUE_SYMBOL = 353;
    public static readonly MEDIUMBLOB_SYMBOL = 354;
    public static readonly MEDIUMINT_SYMBOL = 355;
    public static readonly MEDIUMTEXT_SYMBOL = 356;
    public static readonly MEDIUM_SYMBOL = 357;
    public static readonly MEMORY_SYMBOL = 358;
    public static readonly MERGE_SYMBOL = 359;
    public static readonly MESSAGE_TEXT_SYMBOL = 360;
    public static readonly MICROSECOND_SYMBOL = 361;
    public static readonly MID_SYMBOL = 362;
    public static readonly MIGRATE_SYMBOL = 363;
    public static readonly MINUTE_MICROSECOND_SYMBOL = 364;
    public static readonly MINUTE_SECOND_SYMBOL = 365;
    public static readonly MINUTE_SYMBOL = 366;
    public static readonly MIN_ROWS_SYMBOL = 367;
    public static readonly MIN_SYMBOL = 368;
    public static readonly MODE_SYMBOL = 369;
    public static readonly MODIFIES_SYMBOL = 370;
    public static readonly MODIFY_SYMBOL = 371;
    public static readonly MOD_SYMBOL = 372;
    public static readonly MONTH_SYMBOL = 373;
    public static readonly MULTILINESTRING_SYMBOL = 374;
    public static readonly MULTIPOINT_SYMBOL = 375;
    public static readonly MULTIPOLYGON_SYMBOL = 376;
    public static readonly MUTEX_SYMBOL = 377;
    public static readonly MYSQL_ERRNO_SYMBOL = 378;
    public static readonly NAMES_SYMBOL = 379;
    public static readonly NAME_SYMBOL = 380;
    public static readonly NATIONAL_SYMBOL = 381;
    public static readonly NATURAL_SYMBOL = 382;
    public static readonly NCHAR_SYMBOL = 383;
    public static readonly NDBCLUSTER_SYMBOL = 384;
    public static readonly NEVER_SYMBOL = 385;
    public static readonly NEW_SYMBOL = 386;
    public static readonly NEXT_SYMBOL = 387;
    public static readonly NODEGROUP_SYMBOL = 388;
    public static readonly NONE_SYMBOL = 389;
    public static readonly NOT_SYMBOL = 390;
    public static readonly NOW_SYMBOL = 391;
    public static readonly NO_SYMBOL = 392;
    public static readonly NO_WAIT_SYMBOL = 393;
    public static readonly NO_WRITE_TO_BINLOG_SYMBOL = 394;
    public static readonly NULL_SYMBOL = 395;
    public static readonly NUMBER_SYMBOL = 396;
    public static readonly NUMERIC_SYMBOL = 397;
    public static readonly NVARCHAR_SYMBOL = 398;
    public static readonly OFFLINE_SYMBOL = 399;
    public static readonly OFFSET_SYMBOL = 400;
    public static readonly ON_SYMBOL = 401;
    public static readonly ONE_SYMBOL = 402;
    public static readonly ONLINE_SYMBOL = 403;
    public static readonly ONLY_SYMBOL = 404;
    public static readonly OPEN_SYMBOL = 405;
    public static readonly OPTIMIZE_SYMBOL = 406;
    public static readonly OPTIMIZER_COSTS_SYMBOL = 407;
    public static readonly OPTIONS_SYMBOL = 408;
    public static readonly OPTION_SYMBOL = 409;
    public static readonly OPTIONALLY_SYMBOL = 410;
    public static readonly ORDER_SYMBOL = 411;
    public static readonly OR_SYMBOL = 412;
    public static readonly OUTER_SYMBOL = 413;
    public static readonly OUTFILE_SYMBOL = 414;
    public static readonly OUT_SYMBOL = 415;
    public static readonly OWNER_SYMBOL = 416;
    public static readonly PACK_KEYS_SYMBOL = 417;
    public static readonly PAGE_SYMBOL = 418;
    public static readonly PARSER_SYMBOL = 419;
    public static readonly PARTIAL_SYMBOL = 420;
    public static readonly PARTITIONING_SYMBOL = 421;
    public static readonly PARTITIONS_SYMBOL = 422;
    public static readonly PARTITION_SYMBOL = 423;
    public static readonly PASSWORD_SYMBOL = 424;
    public static readonly PHASE_SYMBOL = 425;
    public static readonly PLUGINS_SYMBOL = 426;
    public static readonly PLUGIN_DIR_SYMBOL = 427;
    public static readonly PLUGIN_SYMBOL = 428;
    public static readonly POINT_SYMBOL = 429;
    public static readonly POLYGON_SYMBOL = 430;
    public static readonly PORT_SYMBOL = 431;
    public static readonly POSITION_SYMBOL = 432;
    public static readonly PRECEDES_SYMBOL = 433;
    public static readonly PRECISION_SYMBOL = 434;
    public static readonly PREPARE_SYMBOL = 435;
    public static readonly PRESERVE_SYMBOL = 436;
    public static readonly PREV_SYMBOL = 437;
    public static readonly PRIMARY_SYMBOL = 438;
    public static readonly PRIVILEGES_SYMBOL = 439;
    public static readonly PROCEDURE_SYMBOL = 440;
    public static readonly PROCESS_SYMBOL = 441;
    public static readonly PROCESSLIST_SYMBOL = 442;
    public static readonly PROFILE_SYMBOL = 443;
    public static readonly PROFILES_SYMBOL = 444;
    public static readonly PROXY_SYMBOL = 445;
    public static readonly PURGE_SYMBOL = 446;
    public static readonly QUARTER_SYMBOL = 447;
    public static readonly QUERY_SYMBOL = 448;
    public static readonly QUICK_SYMBOL = 449;
    public static readonly RANGE_SYMBOL = 450;
    public static readonly READS_SYMBOL = 451;
    public static readonly READ_ONLY_SYMBOL = 452;
    public static readonly READ_SYMBOL = 453;
    public static readonly READ_WRITE_SYMBOL = 454;
    public static readonly REAL_SYMBOL = 455;
    public static readonly REBUILD_SYMBOL = 456;
    public static readonly RECOVER_SYMBOL = 457;
    public static readonly REDO_BUFFER_SIZE_SYMBOL = 458;
    public static readonly REDUNDANT_SYMBOL = 459;
    public static readonly REFERENCES_SYMBOL = 460;
    public static readonly REGEXP_SYMBOL = 461;
    public static readonly RELAY_SYMBOL = 462;
    public static readonly RELAYLOG_SYMBOL = 463;
    public static readonly RELAY_LOG_FILE_SYMBOL = 464;
    public static readonly RELAY_LOG_POS_SYMBOL = 465;
    public static readonly RELAY_THREAD_SYMBOL = 466;
    public static readonly RELEASE_SYMBOL = 467;
    public static readonly RELOAD_SYMBOL = 468;
    public static readonly REMOVE_SYMBOL = 469;
    public static readonly RENAME_SYMBOL = 470;
    public static readonly REORGANIZE_SYMBOL = 471;
    public static readonly REPAIR_SYMBOL = 472;
    public static readonly REPEATABLE_SYMBOL = 473;
    public static readonly REPEAT_SYMBOL = 474;
    public static readonly REPLACE_SYMBOL = 475;
    public static readonly REPLICATION_SYMBOL = 476;
    public static readonly REPLICATE_DO_DB_SYMBOL = 477;
    public static readonly REPLICATE_IGNORE_DB_SYMBOL = 478;
    public static readonly REPLICATE_DO_TABLE_SYMBOL = 479;
    public static readonly REPLICATE_IGNORE_TABLE_SYMBOL = 480;
    public static readonly REPLICATE_WILD_DO_TABLE_SYMBOL = 481;
    public static readonly REPLICATE_WILD_IGNORE_TABLE_SYMBOL = 482;
    public static readonly REPLICATE_REWRITE_DB_SYMBOL = 483;
    public static readonly REQUIRE_SYMBOL = 484;
    public static readonly RESET_SYMBOL = 485;
    public static readonly RESIGNAL_SYMBOL = 486;
    public static readonly RESTORE_SYMBOL = 487;
    public static readonly RESTRICT_SYMBOL = 488;
    public static readonly RESUME_SYMBOL = 489;
    public static readonly RETURNED_SQLSTATE_SYMBOL = 490;
    public static readonly RETURNS_SYMBOL = 491;
    public static readonly RETURN_SYMBOL = 492;
    public static readonly REVERSE_SYMBOL = 493;
    public static readonly REVOKE_SYMBOL = 494;
    public static readonly RIGHT_SYMBOL = 495;
    public static readonly ROLLBACK_SYMBOL = 496;
    public static readonly ROLLUP_SYMBOL = 497;
    public static readonly ROTATE_SYMBOL = 498;
    public static readonly ROUTINE_SYMBOL = 499;
    public static readonly ROWS_SYMBOL = 500;
    public static readonly ROW_COUNT_SYMBOL = 501;
    public static readonly ROW_FORMAT_SYMBOL = 502;
    public static readonly ROW_SYMBOL = 503;
    public static readonly RTREE_SYMBOL = 504;
    public static readonly SAVEPOINT_SYMBOL = 505;
    public static readonly SCHEDULE_SYMBOL = 506;
    public static readonly SCHEMA_NAME_SYMBOL = 507;
    public static readonly SECOND_MICROSECOND_SYMBOL = 508;
    public static readonly SECOND_SYMBOL = 509;
    public static readonly SECURITY_SYMBOL = 510;
    public static readonly SELECT_SYMBOL = 511;
    public static readonly SENSITIVE_SYMBOL = 512;
    public static readonly SEPARATOR_SYMBOL = 513;
    public static readonly SERIALIZABLE_SYMBOL = 514;
    public static readonly SERIAL_SYMBOL = 515;
    public static readonly SESSION_SYMBOL = 516;
    public static readonly SERVER_SYMBOL = 517;
    public static readonly SESSION_USER_SYMBOL = 518;
    public static readonly SET_SYMBOL = 519;
    public static readonly SHARE_SYMBOL = 520;
    public static readonly SHOW_SYMBOL = 521;
    public static readonly SHUTDOWN_SYMBOL = 522;
    public static readonly SIGNAL_SYMBOL = 523;
    public static readonly SIGNED_SYMBOL = 524;
    public static readonly SIMPLE_SYMBOL = 525;
    public static readonly SLAVE_SYMBOL = 526;
    public static readonly SLOW_SYMBOL = 527;
    public static readonly SMALLINT_SYMBOL = 528;
    public static readonly SNAPSHOT_SYMBOL = 529;
    public static readonly SOCKET_SYMBOL = 530;
    public static readonly SONAME_SYMBOL = 531;
    public static readonly SOUNDS_SYMBOL = 532;
    public static readonly SOURCE_SYMBOL = 533;
    public static readonly SPATIAL_SYMBOL = 534;
    public static readonly SPECIFIC_SYMBOL = 535;
    public static readonly SQLEXCEPTION_SYMBOL = 536;
    public static readonly SQLSTATE_SYMBOL = 537;
    public static readonly SQLWARNING_SYMBOL = 538;
    public static readonly SQL_AFTER_GTIDS_SYMBOL = 539;
    public static readonly SQL_AFTER_MTS_GAPS_SYMBOL = 540;
    public static readonly SQL_BEFORE_GTIDS_SYMBOL = 541;
    public static readonly SQL_BIG_RESULT_SYMBOL = 542;
    public static readonly SQL_BUFFER_RESULT_SYMBOL = 543;
    public static readonly SQL_CALC_FOUND_ROWS_SYMBOL = 544;
    public static readonly SQL_NO_CACHE_SYMBOL = 545;
    public static readonly SQL_SMALL_RESULT_SYMBOL = 546;
    public static readonly SQL_SYMBOL = 547;
    public static readonly SQL_THREAD_SYMBOL = 548;
    public static readonly SSL_SYMBOL = 549;
    public static readonly STACKED_SYMBOL = 550;
    public static readonly STARTING_SYMBOL = 551;
    public static readonly STARTS_SYMBOL = 552;
    public static readonly START_SYMBOL = 553;
    public static readonly STATS_AUTO_RECALC_SYMBOL = 554;
    public static readonly STATS_PERSISTENT_SYMBOL = 555;
    public static readonly STATS_SAMPLE_PAGES_SYMBOL = 556;
    public static readonly STATUS_SYMBOL = 557;
    public static readonly STDDEV_SAMP_SYMBOL = 558;
    public static readonly STDDEV_SYMBOL = 559;
    public static readonly STDDEV_POP_SYMBOL = 560;
    public static readonly STD_SYMBOL = 561;
    public static readonly STOP_SYMBOL = 562;
    public static readonly STORAGE_SYMBOL = 563;
    public static readonly STORED_SYMBOL = 564;
    public static readonly STRAIGHT_JOIN_SYMBOL = 565;
    public static readonly STRING_SYMBOL = 566;
    public static readonly SUBCLASS_ORIGIN_SYMBOL = 567;
    public static readonly SUBDATE_SYMBOL = 568;
    public static readonly SUBJECT_SYMBOL = 569;
    public static readonly SUBPARTITIONS_SYMBOL = 570;
    public static readonly SUBPARTITION_SYMBOL = 571;
    public static readonly SUBSTR_SYMBOL = 572;
    public static readonly SUBSTRING_SYMBOL = 573;
    public static readonly SUM_SYMBOL = 574;
    public static readonly SUPER_SYMBOL = 575;
    public static readonly SUSPEND_SYMBOL = 576;
    public static readonly SWAPS_SYMBOL = 577;
    public static readonly SWITCHES_SYMBOL = 578;
    public static readonly SYSDATE_SYMBOL = 579;
    public static readonly SYSTEM_USER_SYMBOL = 580;
    public static readonly TABLES_SYMBOL = 581;
    public static readonly TABLESPACE_SYMBOL = 582;
    public static readonly TABLE_SYMBOL = 583;
    public static readonly TABLE_CHECKSUM_SYMBOL = 584;
    public static readonly TABLE_NAME_SYMBOL = 585;
    public static readonly TEMPORARY_SYMBOL = 586;
    public static readonly TEMPTABLE_SYMBOL = 587;
    public static readonly TERMINATED_SYMBOL = 588;
    public static readonly TEXT_SYMBOL = 589;
    public static readonly THAN_SYMBOL = 590;
    public static readonly THEN_SYMBOL = 591;
    public static readonly TIMESTAMP_SYMBOL = 592;
    public static readonly TIMESTAMPADD_SYMBOL = 593;
    public static readonly TIMESTAMPDIFF_SYMBOL = 594;
    public static readonly TIME_SYMBOL = 595;
    public static readonly TINYBLOB_SYMBOL = 596;
    public static readonly TINYINT_SYMBOL = 597;
    public static readonly TINYTEXT_SYMBOL = 598;
    public static readonly TO_SYMBOL = 599;
    public static readonly TRAILING_SYMBOL = 600;
    public static readonly TRANSACTION_SYMBOL = 601;
    public static readonly TRIGGERS_SYMBOL = 602;
    public static readonly TRIGGER_SYMBOL = 603;
    public static readonly TRIM_SYMBOL = 604;
    public static readonly TRUE_SYMBOL = 605;
    public static readonly TRUNCATE_SYMBOL = 606;
    public static readonly TYPES_SYMBOL = 607;
    public static readonly TYPE_SYMBOL = 608;
    public static readonly UDF_RETURNS_SYMBOL = 609;
    public static readonly UNCOMMITTED_SYMBOL = 610;
    public static readonly UNDEFINED_SYMBOL = 611;
    public static readonly UNDOFILE_SYMBOL = 612;
    public static readonly UNDO_BUFFER_SIZE_SYMBOL = 613;
    public static readonly UNDO_SYMBOL = 614;
    public static readonly UNICODE_SYMBOL = 615;
    public static readonly UNINSTALL_SYMBOL = 616;
    public static readonly UNION_SYMBOL = 617;
    public static readonly UNIQUE_SYMBOL = 618;
    public static readonly UNKNOWN_SYMBOL = 619;
    public static readonly UNLOCK_SYMBOL = 620;
    public static readonly UNSIGNED_SYMBOL = 621;
    public static readonly UNTIL_SYMBOL = 622;
    public static readonly UPDATE_SYMBOL = 623;
    public static readonly UPGRADE_SYMBOL = 624;
    public static readonly USAGE_SYMBOL = 625;
    public static readonly USER_RESOURCES_SYMBOL = 626;
    public static readonly USER_SYMBOL = 627;
    public static readonly USE_FRM_SYMBOL = 628;
    public static readonly USE_SYMBOL = 629;
    public static readonly USING_SYMBOL = 630;
    public static readonly UTC_DATE_SYMBOL = 631;
    public static readonly UTC_TIMESTAMP_SYMBOL = 632;
    public static readonly UTC_TIME_SYMBOL = 633;
    public static readonly VALIDATION_SYMBOL = 634;
    public static readonly VALUES_SYMBOL = 635;
    public static readonly VALUE_SYMBOL = 636;
    public static readonly VARBINARY_SYMBOL = 637;
    public static readonly VARCHAR_SYMBOL = 638;
    public static readonly VARIABLES_SYMBOL = 639;
    public static readonly VARIANCE_SYMBOL = 640;
    public static readonly VARYING_SYMBOL = 641;
    public static readonly VAR_POP_SYMBOL = 642;
    public static readonly VAR_SAMP_SYMBOL = 643;
    public static readonly VIEW_SYMBOL = 644;
    public static readonly VIRTUAL_SYMBOL = 645;
    public static readonly WAIT_SYMBOL = 646;
    public static readonly WARNINGS_SYMBOL = 647;
    public static readonly WEEK_SYMBOL = 648;
    public static readonly WEIGHT_STRING_SYMBOL = 649;
    public static readonly WHEN_SYMBOL = 650;
    public static readonly WHERE_SYMBOL = 651;
    public static readonly WHILE_SYMBOL = 652;
    public static readonly WITH_SYMBOL = 653;
    public static readonly WITHOUT_SYMBOL = 654;
    public static readonly WORK_SYMBOL = 655;
    public static readonly WRAPPER_SYMBOL = 656;
    public static readonly WRITE_SYMBOL = 657;
    public static readonly X509_SYMBOL = 658;
    public static readonly XA_SYMBOL = 659;
    public static readonly XID_SYMBOL = 660;
    public static readonly XML_SYMBOL = 661;
    public static readonly XOR_SYMBOL = 662;
    public static readonly YEAR_MONTH_SYMBOL = 663;
    public static readonly YEAR_SYMBOL = 664;
    public static readonly ZEROFILL_SYMBOL = 665;
    public static readonly PERSIST_SYMBOL = 666;
    public static readonly ROLE_SYMBOL = 667;
    public static readonly ADMIN_SYMBOL = 668;
    public static readonly INVISIBLE_SYMBOL = 669;
    public static readonly VISIBLE_SYMBOL = 670;
    public static readonly EXCEPT_SYMBOL = 671;
    public static readonly COMPONENT_SYMBOL = 672;
    public static readonly RECURSIVE_SYMBOL = 673;
    public static readonly JSON_OBJECTAGG_SYMBOL = 674;
    public static readonly JSON_ARRAYAGG_SYMBOL = 675;
    public static readonly OF_SYMBOL = 676;
    public static readonly SKIP_SYMBOL = 677;
    public static readonly LOCKED_SYMBOL = 678;
    public static readonly NOWAIT_SYMBOL = 679;
    public static readonly GROUPING_SYMBOL = 680;
    public static readonly PERSIST_ONLY_SYMBOL = 681;
    public static readonly HISTOGRAM_SYMBOL = 682;
    public static readonly BUCKETS_SYMBOL = 683;
    public static readonly REMOTE_SYMBOL = 684;
    public static readonly CLONE_SYMBOL = 685;
    public static readonly CUME_DIST_SYMBOL = 686;
    public static readonly DENSE_RANK_SYMBOL = 687;
    public static readonly EXCLUDE_SYMBOL = 688;
    public static readonly FIRST_VALUE_SYMBOL = 689;
    public static readonly FOLLOWING_SYMBOL = 690;
    public static readonly GROUPS_SYMBOL = 691;
    public static readonly LAG_SYMBOL = 692;
    public static readonly LAST_VALUE_SYMBOL = 693;
    public static readonly LEAD_SYMBOL = 694;
    public static readonly NTH_VALUE_SYMBOL = 695;
    public static readonly NTILE_SYMBOL = 696;
    public static readonly NULLS_SYMBOL = 697;
    public static readonly OTHERS_SYMBOL = 698;
    public static readonly OVER_SYMBOL = 699;
    public static readonly PERCENT_RANK_SYMBOL = 700;
    public static readonly PRECEDING_SYMBOL = 701;
    public static readonly RANK_SYMBOL = 702;
    public static readonly RESPECT_SYMBOL = 703;
    public static readonly ROW_NUMBER_SYMBOL = 704;
    public static readonly TIES_SYMBOL = 705;
    public static readonly UNBOUNDED_SYMBOL = 706;
    public static readonly WINDOW_SYMBOL = 707;
    public static readonly EMPTY_SYMBOL = 708;
    public static readonly JSON_TABLE_SYMBOL = 709;
    public static readonly NESTED_SYMBOL = 710;
    public static readonly ORDINALITY_SYMBOL = 711;
    public static readonly PATH_SYMBOL = 712;
    public static readonly HISTORY_SYMBOL = 713;
    public static readonly REUSE_SYMBOL = 714;
    public static readonly SRID_SYMBOL = 715;
    public static readonly THREAD_PRIORITY_SYMBOL = 716;
    public static readonly RESOURCE_SYMBOL = 717;
    public static readonly SYSTEM_SYMBOL = 718;
    public static readonly VCPU_SYMBOL = 719;
    public static readonly MASTER_PUBLIC_KEY_PATH_SYMBOL = 720;
    public static readonly GET_MASTER_PUBLIC_KEY_SYMBOL = 721;
    public static readonly RESTART_SYMBOL = 722;
    public static readonly DEFINITION_SYMBOL = 723;
    public static readonly DESCRIPTION_SYMBOL = 724;
    public static readonly ORGANIZATION_SYMBOL = 725;
    public static readonly REFERENCE_SYMBOL = 726;
    public static readonly OPTIONAL_SYMBOL = 727;
    public static readonly SECONDARY_SYMBOL = 728;
    public static readonly SECONDARY_ENGINE_SYMBOL = 729;
    public static readonly SECONDARY_LOAD_SYMBOL = 730;
    public static readonly SECONDARY_UNLOAD_SYMBOL = 731;
    public static readonly ACTIVE_SYMBOL = 732;
    public static readonly INACTIVE_SYMBOL = 733;
    public static readonly LATERAL_SYMBOL = 734;
    public static readonly RETAIN_SYMBOL = 735;
    public static readonly OLD_SYMBOL = 736;
    public static readonly NETWORK_NAMESPACE_SYMBOL = 737;
    public static readonly ENFORCED_SYMBOL = 738;
    public static readonly ARRAY_SYMBOL = 739;
    public static readonly OJ_SYMBOL = 740;
    public static readonly MEMBER_SYMBOL = 741;
    public static readonly RANDOM_SYMBOL = 742;
    public static readonly MASTER_COMPRESSION_ALGORITHM_SYMBOL = 743;
    public static readonly MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL = 744;
    public static readonly PRIVILEGE_CHECKS_USER_SYMBOL = 745;
    public static readonly MASTER_TLS_CIPHERSUITES_SYMBOL = 746;
    public static readonly REQUIRE_ROW_FORMAT_SYMBOL = 747;
    public static readonly PASSWORD_LOCK_TIME_SYMBOL = 748;
    public static readonly FAILED_LOGIN_ATTEMPTS_SYMBOL = 749;
    public static readonly REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL = 750;
    public static readonly STREAM_SYMBOL = 751;
    public static readonly OFF_SYMBOL = 752;
    public static readonly RETURNING_SYMBOL = 753;
    public static readonly JSON_VALUE_SYMBOL = 754;
    public static readonly TLS_SYMBOL = 755;
    public static readonly ATTRIBUTE_SYMBOL = 756;
    public static readonly ENGINE_ATTRIBUTE_SYMBOL = 757;
    public static readonly SECONDARY_ENGINE_ATTRIBUTE_SYMBOL = 758;
    public static readonly SOURCE_CONNECTION_AUTO_FAILOVER_SYMBOL = 759;
    public static readonly ZONE_SYMBOL = 760;
    public static readonly GRAMMAR_SELECTOR_DERIVED_EXPR = 761;
    public static readonly REPLICA_SYMBOL = 762;
    public static readonly REPLICAS_SYMBOL = 763;
    public static readonly ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_SYMBOL = 764;
    public static readonly GET_SOURCE_PUBLIC_KEY_SYMBOL = 765;
    public static readonly SOURCE_AUTO_POSITION_SYMBOL = 766;
    public static readonly SOURCE_BIND_SYMBOL = 767;
    public static readonly SOURCE_COMPRESSION_ALGORITHM_SYMBOL = 768;
    public static readonly SOURCE_CONNECT_RETRY_SYMBOL = 769;
    public static readonly SOURCE_DELAY_SYMBOL = 770;
    public static readonly SOURCE_HEARTBEAT_PERIOD_SYMBOL = 771;
    public static readonly SOURCE_HOST_SYMBOL = 772;
    public static readonly SOURCE_LOG_FILE_SYMBOL = 773;
    public static readonly SOURCE_LOG_POS_SYMBOL = 774;
    public static readonly SOURCE_PASSWORD_SYMBOL = 775;
    public static readonly SOURCE_PORT_SYMBOL = 776;
    public static readonly SOURCE_PUBLIC_KEY_PATH_SYMBOL = 777;
    public static readonly SOURCE_RETRY_COUNT_SYMBOL = 778;
    public static readonly SOURCE_SSL_SYMBOL = 779;
    public static readonly SOURCE_SSL_CA_SYMBOL = 780;
    public static readonly SOURCE_SSL_CAPATH_SYMBOL = 781;
    public static readonly SOURCE_SSL_CERT_SYMBOL = 782;
    public static readonly SOURCE_SSL_CIPHER_SYMBOL = 783;
    public static readonly SOURCE_SSL_CRL_SYMBOL = 784;
    public static readonly SOURCE_SSL_CRLPATH_SYMBOL = 785;
    public static readonly SOURCE_SSL_KEY_SYMBOL = 786;
    public static readonly SOURCE_SSL_VERIFY_SERVER_CERT_SYMBOL = 787;
    public static readonly SOURCE_TLS_CIPHERSUITES_SYMBOL = 788;
    public static readonly SOURCE_TLS_VERSION_SYMBOL = 789;
    public static readonly SOURCE_USER_SYMBOL = 790;
    public static readonly SOURCE_ZSTD_COMPRESSION_LEVEL_SYMBOL = 791;
    public static readonly ST_COLLECT_SYMBOL = 792;
    public static readonly KEYRING_SYMBOL = 793;
    public static readonly AUTHENTICATION_SYMBOL = 794;
    public static readonly FACTOR_SYMBOL = 795;
    public static readonly FINISH_SYMBOL = 796;
    public static readonly INITIATE_SYMBOL = 797;
    public static readonly REGISTRATION_SYMBOL = 798;
    public static readonly UNREGISTER_SYMBOL = 799;
    public static readonly INITIAL_SYMBOL = 800;
    public static readonly CHALLENGE_RESPONSE_SYMBOL = 801;
    public static readonly GTID_ONLY_SYMBOL = 802;
    public static readonly INTERSECT_SYMBOL = 803;
    public static readonly BULK_SYMBOL = 804;
    public static readonly URL_SYMBOL = 805;
    public static readonly GENERATE_SYMBOL = 806;
    public static readonly PARSE_TREE_SYMBOL = 807;
    public static readonly LOG_SYMBOL = 808;
    public static readonly GTIDS_SYMBOL = 809;
    public static readonly PARALLEL_SYMBOL = 810;
    public static readonly S3_SYMBOL = 811;
    public static readonly QUALIFY_SYMBOL = 812;
    public static readonly AUTO_SYMBOL = 813;
    public static readonly MANUAL_SYMBOL = 814;
    public static readonly BERNOULLI_SYMBOL = 815;
    public static readonly TABLESAMPLE_SYMBOL = 816;
    public static readonly WHITESPACE = 817;
    public static readonly INVALID_INPUT = 818;
    public static readonly UNDERSCORE_CHARSET = 819;
    public static readonly IDENTIFIER = 820;
    public static readonly NCHAR_TEXT = 821;
    public static readonly BACK_TICK_QUOTED_ID = 822;
    public static readonly DOUBLE_QUOTED_TEXT = 823;
    public static readonly SINGLE_QUOTED_TEXT = 824;
    public static readonly DOLLAR_QUOTED_STRING_TEXT = 825;
    public static readonly VERSION_COMMENT_START = 826;
    public static readonly MYSQL_COMMENT_START = 827;
    public static readonly VERSION_COMMENT_END = 828;
    public static readonly BLOCK_COMMENT = 829;
    public static readonly INVALID_BLOCK_COMMENT = 830;
    public static readonly POUND_COMMENT = 831;
    public static readonly DASHDASH_COMMENT = 832;
    public static readonly NOT_EQUAL2_OPERATOR = 833;
    public static readonly RULE_query = 0;
    public static readonly RULE_simpleStatement = 1;
    public static readonly RULE_alterStatement = 2;
    public static readonly RULE_alterDatabase = 3;
    public static readonly RULE_alterDatabaseOption = 4;
    public static readonly RULE_alterEvent = 5;
    public static readonly RULE_alterLogfileGroup = 6;
    public static readonly RULE_alterLogfileGroupOptions = 7;
    public static readonly RULE_alterLogfileGroupOption = 8;
    public static readonly RULE_alterServer = 9;
    public static readonly RULE_alterTable = 10;
    public static readonly RULE_alterTableActions = 11;
    public static readonly RULE_alterCommandList = 12;
    public static readonly RULE_alterCommandsModifierList = 13;
    public static readonly RULE_standaloneAlterCommands = 14;
    public static readonly RULE_alterPartition = 15;
    public static readonly RULE_alterList = 16;
    public static readonly RULE_alterCommandsModifier = 17;
    public static readonly RULE_alterListItem = 18;
    public static readonly RULE_place = 19;
    public static readonly RULE_restrict = 20;
    public static readonly RULE_alterOrderList = 21;
    public static readonly RULE_alterAlgorithmOption = 22;
    public static readonly RULE_alterLockOption = 23;
    public static readonly RULE_indexLockAndAlgorithm = 24;
    public static readonly RULE_withValidation = 25;
    public static readonly RULE_removePartitioning = 26;
    public static readonly RULE_allOrPartitionNameList = 27;
    public static readonly RULE_alterTablespace = 28;
    public static readonly RULE_alterUndoTablespace = 29;
    public static readonly RULE_undoTableSpaceOptions = 30;
    public static readonly RULE_undoTableSpaceOption = 31;
    public static readonly RULE_alterTablespaceOptions = 32;
    public static readonly RULE_alterTablespaceOption = 33;
    public static readonly RULE_changeTablespaceOption = 34;
    public static readonly RULE_alterView = 35;
    public static readonly RULE_viewTail = 36;
    public static readonly RULE_viewQueryBlock = 37;
    public static readonly RULE_viewCheckOption = 38;
    public static readonly RULE_alterInstanceStatement = 39;
    public static readonly RULE_createStatement = 40;
    public static readonly RULE_createDatabase = 41;
    public static readonly RULE_createDatabaseOption = 42;
    public static readonly RULE_createTable = 43;
    public static readonly RULE_tableElementList = 44;
    public static readonly RULE_tableElement = 45;
    public static readonly RULE_duplicateAsQe = 46;
    public static readonly RULE_asCreateQueryExpression = 47;
    public static readonly RULE_queryExpressionOrParens = 48;
    public static readonly RULE_queryExpressionWithOptLockingClauses = 49;
    public static readonly RULE_createRoutine = 50;
    public static readonly RULE_createProcedure = 51;
    public static readonly RULE_routineString = 52;
    public static readonly RULE_storedRoutineBody = 53;
    public static readonly RULE_createFunction = 54;
    public static readonly RULE_createUdf = 55;
    public static readonly RULE_routineCreateOption = 56;
    public static readonly RULE_routineAlterOptions = 57;
    public static readonly RULE_routineOption = 58;
    public static readonly RULE_createIndex = 59;
    public static readonly RULE_indexNameAndType = 60;
    public static readonly RULE_createIndexTarget = 61;
    public static readonly RULE_createLogfileGroup = 62;
    public static readonly RULE_logfileGroupOptions = 63;
    public static readonly RULE_logfileGroupOption = 64;
    public static readonly RULE_createServer = 65;
    public static readonly RULE_serverOptions = 66;
    public static readonly RULE_serverOption = 67;
    public static readonly RULE_createTablespace = 68;
    public static readonly RULE_createUndoTablespace = 69;
    public static readonly RULE_tsDataFileName = 70;
    public static readonly RULE_tsDataFile = 71;
    public static readonly RULE_tablespaceOptions = 72;
    public static readonly RULE_tablespaceOption = 73;
    public static readonly RULE_tsOptionInitialSize = 74;
    public static readonly RULE_tsOptionUndoRedoBufferSize = 75;
    public static readonly RULE_tsOptionAutoextendSize = 76;
    public static readonly RULE_tsOptionMaxSize = 77;
    public static readonly RULE_tsOptionExtentSize = 78;
    public static readonly RULE_tsOptionNodegroup = 79;
    public static readonly RULE_tsOptionEngine = 80;
    public static readonly RULE_tsOptionWait = 81;
    public static readonly RULE_tsOptionComment = 82;
    public static readonly RULE_tsOptionFileblockSize = 83;
    public static readonly RULE_tsOptionEncryption = 84;
    public static readonly RULE_tsOptionEngineAttribute = 85;
    public static readonly RULE_createView = 86;
    public static readonly RULE_viewReplaceOrAlgorithm = 87;
    public static readonly RULE_viewAlgorithm = 88;
    public static readonly RULE_viewSuid = 89;
    public static readonly RULE_createTrigger = 90;
    public static readonly RULE_triggerFollowsPrecedesClause = 91;
    public static readonly RULE_createEvent = 92;
    public static readonly RULE_createRole = 93;
    public static readonly RULE_createSpatialReference = 94;
    public static readonly RULE_srsAttribute = 95;
    public static readonly RULE_dropStatement = 96;
    public static readonly RULE_dropDatabase = 97;
    public static readonly RULE_dropEvent = 98;
    public static readonly RULE_dropFunction = 99;
    public static readonly RULE_dropProcedure = 100;
    public static readonly RULE_dropIndex = 101;
    public static readonly RULE_dropLogfileGroup = 102;
    public static readonly RULE_dropLogfileGroupOption = 103;
    public static readonly RULE_dropServer = 104;
    public static readonly RULE_dropTable = 105;
    public static readonly RULE_dropTableSpace = 106;
    public static readonly RULE_dropTrigger = 107;
    public static readonly RULE_dropView = 108;
    public static readonly RULE_dropRole = 109;
    public static readonly RULE_dropSpatialReference = 110;
    public static readonly RULE_dropUndoTablespace = 111;
    public static readonly RULE_renameTableStatement = 112;
    public static readonly RULE_renamePair = 113;
    public static readonly RULE_truncateTableStatement = 114;
    public static readonly RULE_importStatement = 115;
    public static readonly RULE_callStatement = 116;
    public static readonly RULE_deleteStatement = 117;
    public static readonly RULE_partitionDelete = 118;
    public static readonly RULE_deleteStatementOption = 119;
    public static readonly RULE_doStatement = 120;
    public static readonly RULE_handlerStatement = 121;
    public static readonly RULE_handlerReadOrScan = 122;
    public static readonly RULE_insertStatement = 123;
    public static readonly RULE_insertLockOption = 124;
    public static readonly RULE_insertFromConstructor = 125;
    public static readonly RULE_fields = 126;
    public static readonly RULE_insertValues = 127;
    public static readonly RULE_insertQueryExpression = 128;
    public static readonly RULE_valueList = 129;
    public static readonly RULE_values = 130;
    public static readonly RULE_valuesReference = 131;
    public static readonly RULE_insertUpdateList = 132;
    public static readonly RULE_loadStatement = 133;
    public static readonly RULE_dataOrXml = 134;
    public static readonly RULE_loadDataLock = 135;
    public static readonly RULE_loadFrom = 136;
    public static readonly RULE_loadSourceType = 137;
    public static readonly RULE_sourceCount = 138;
    public static readonly RULE_sourceOrder = 139;
    public static readonly RULE_xmlRowsIdentifiedBy = 140;
    public static readonly RULE_loadDataFileTail = 141;
    public static readonly RULE_loadDataFileTargetList = 142;
    public static readonly RULE_fieldOrVariableList = 143;
    public static readonly RULE_loadAlgorithm = 144;
    public static readonly RULE_loadParallel = 145;
    public static readonly RULE_loadMemory = 146;
    public static readonly RULE_replaceStatement = 147;
    public static readonly RULE_selectStatement = 148;
    public static readonly RULE_selectStatementWithInto = 149;
    public static readonly RULE_queryExpression = 150;
    public static readonly RULE_queryExpressionBody = 151;
    public static readonly RULE_queryExpressionParens = 152;
    public static readonly RULE_queryPrimary = 153;
    public static readonly RULE_querySpecification = 154;
    public static readonly RULE_subquery = 155;
    public static readonly RULE_querySpecOption = 156;
    public static readonly RULE_limitClause = 157;
    public static readonly RULE_simpleLimitClause = 158;
    public static readonly RULE_limitOptions = 159;
    public static readonly RULE_limitOption = 160;
    public static readonly RULE_intoClause = 161;
    public static readonly RULE_procedureAnalyseClause = 162;
    public static readonly RULE_havingClause = 163;
    public static readonly RULE_qualifyClause = 164;
    public static readonly RULE_windowClause = 165;
    public static readonly RULE_windowDefinition = 166;
    public static readonly RULE_windowSpec = 167;
    public static readonly RULE_windowSpecDetails = 168;
    public static readonly RULE_windowFrameClause = 169;
    public static readonly RULE_windowFrameUnits = 170;
    public static readonly RULE_windowFrameExtent = 171;
    public static readonly RULE_windowFrameStart = 172;
    public static readonly RULE_windowFrameBetween = 173;
    public static readonly RULE_windowFrameBound = 174;
    public static readonly RULE_windowFrameExclusion = 175;
    public static readonly RULE_withClause = 176;
    public static readonly RULE_commonTableExpression = 177;
    public static readonly RULE_groupByClause = 178;
    public static readonly RULE_olapOption = 179;
    public static readonly RULE_orderClause = 180;
    public static readonly RULE_direction = 181;
    public static readonly RULE_fromClause = 182;
    public static readonly RULE_tableReferenceList = 183;
    public static readonly RULE_tableValueConstructor = 184;
    public static readonly RULE_explicitTable = 185;
    public static readonly RULE_rowValueExplicit = 186;
    public static readonly RULE_selectOption = 187;
    public static readonly RULE_lockingClauseList = 188;
    public static readonly RULE_lockingClause = 189;
    public static readonly RULE_lockStrengh = 190;
    public static readonly RULE_lockedRowAction = 191;
    public static readonly RULE_selectItemList = 192;
    public static readonly RULE_selectItem = 193;
    public static readonly RULE_selectAlias = 194;
    public static readonly RULE_whereClause = 195;
    public static readonly RULE_tableReference = 196;
    public static readonly RULE_escapedTableReference = 197;
    public static readonly RULE_joinedTable = 198;
    public static readonly RULE_naturalJoinType = 199;
    public static readonly RULE_innerJoinType = 200;
    public static readonly RULE_outerJoinType = 201;
    public static readonly RULE_tableFactor = 202;
    public static readonly RULE_singleTable = 203;
    public static readonly RULE_singleTableParens = 204;
    public static readonly RULE_derivedTable = 205;
    public static readonly RULE_tableReferenceListParens = 206;
    public static readonly RULE_tableFunction = 207;
    public static readonly RULE_columnsClause = 208;
    public static readonly RULE_jtColumn = 209;
    public static readonly RULE_onEmptyOrError = 210;
    public static readonly RULE_onEmptyOrErrorJsonTable = 211;
    public static readonly RULE_onEmpty = 212;
    public static readonly RULE_onError = 213;
    public static readonly RULE_jsonOnResponse = 214;
    public static readonly RULE_unionOption = 215;
    public static readonly RULE_tableAlias = 216;
    public static readonly RULE_indexHintList = 217;
    public static readonly RULE_indexHint = 218;
    public static readonly RULE_indexHintType = 219;
    public static readonly RULE_keyOrIndex = 220;
    public static readonly RULE_constraintKeyType = 221;
    public static readonly RULE_indexHintClause = 222;
    public static readonly RULE_indexList = 223;
    public static readonly RULE_indexListElement = 224;
    public static readonly RULE_updateStatement = 225;
    public static readonly RULE_transactionOrLockingStatement = 226;
    public static readonly RULE_transactionStatement = 227;
    public static readonly RULE_beginWork = 228;
    public static readonly RULE_startTransactionOptionList = 229;
    public static readonly RULE_savepointStatement = 230;
    public static readonly RULE_lockStatement = 231;
    public static readonly RULE_lockItem = 232;
    public static readonly RULE_lockOption = 233;
    public static readonly RULE_xaStatement = 234;
    public static readonly RULE_xaConvert = 235;
    public static readonly RULE_xid = 236;
    public static readonly RULE_replicationStatement = 237;
    public static readonly RULE_purgeOptions = 238;
    public static readonly RULE_resetOption = 239;
    public static readonly RULE_masterOrBinaryLogsAndGtids = 240;
    public static readonly RULE_sourceResetOptions = 241;
    public static readonly RULE_replicationLoad = 242;
    public static readonly RULE_changeReplicationSource = 243;
    public static readonly RULE_changeSource = 244;
    public static readonly RULE_sourceDefinitions = 245;
    public static readonly RULE_sourceDefinition = 246;
    public static readonly RULE_changeReplicationSourceAutoPosition = 247;
    public static readonly RULE_changeReplicationSourceHost = 248;
    public static readonly RULE_changeReplicationSourceBind = 249;
    public static readonly RULE_changeReplicationSourceUser = 250;
    public static readonly RULE_changeReplicationSourcePassword = 251;
    public static readonly RULE_changeReplicationSourcePort = 252;
    public static readonly RULE_changeReplicationSourceConnectRetry = 253;
    public static readonly RULE_changeReplicationSourceRetryCount = 254;
    public static readonly RULE_changeReplicationSourceDelay = 255;
    public static readonly RULE_changeReplicationSourceSSL = 256;
    public static readonly RULE_changeReplicationSourceSSLCA = 257;
    public static readonly RULE_changeReplicationSourceSSLCApath = 258;
    public static readonly RULE_changeReplicationSourceSSLCipher = 259;
    public static readonly RULE_changeReplicationSourceSSLCLR = 260;
    public static readonly RULE_changeReplicationSourceSSLCLRpath = 261;
    public static readonly RULE_changeReplicationSourceSSLKey = 262;
    public static readonly RULE_changeReplicationSourceSSLVerifyServerCert = 263;
    public static readonly RULE_changeReplicationSourceTLSVersion = 264;
    public static readonly RULE_changeReplicationSourceTLSCiphersuites = 265;
    public static readonly RULE_changeReplicationSourceSSLCert = 266;
    public static readonly RULE_changeReplicationSourcePublicKey = 267;
    public static readonly RULE_changeReplicationSourceGetSourcePublicKey = 268;
    public static readonly RULE_changeReplicationSourceHeartbeatPeriod = 269;
    public static readonly RULE_changeReplicationSourceCompressionAlgorithm = 270;
    public static readonly RULE_changeReplicationSourceZstdCompressionLevel = 271;
    public static readonly RULE_privilegeCheckDef = 272;
    public static readonly RULE_tablePrimaryKeyCheckDef = 273;
    public static readonly RULE_assignGtidsToAnonymousTransactionsDefinition = 274;
    public static readonly RULE_sourceTlsCiphersuitesDef = 275;
    public static readonly RULE_sourceFileDef = 276;
    public static readonly RULE_sourceLogFile = 277;
    public static readonly RULE_sourceLogPos = 278;
    public static readonly RULE_serverIdList = 279;
    public static readonly RULE_changeReplication = 280;
    public static readonly RULE_filterDefinition = 281;
    public static readonly RULE_filterDbList = 282;
    public static readonly RULE_filterTableList = 283;
    public static readonly RULE_filterStringList = 284;
    public static readonly RULE_filterWildDbTableString = 285;
    public static readonly RULE_filterDbPairList = 286;
    public static readonly RULE_startReplicaStatement = 287;
    public static readonly RULE_stopReplicaStatement = 288;
    public static readonly RULE_replicaUntil = 289;
    public static readonly RULE_userOption = 290;
    public static readonly RULE_passwordOption = 291;
    public static readonly RULE_defaultAuthOption = 292;
    public static readonly RULE_pluginDirOption = 293;
    public static readonly RULE_replicaThreadOptions = 294;
    public static readonly RULE_replicaThreadOption = 295;
    public static readonly RULE_groupReplication = 296;
    public static readonly RULE_groupReplicationStartOptions = 297;
    public static readonly RULE_groupReplicationStartOption = 298;
    public static readonly RULE_groupReplicationUser = 299;
    public static readonly RULE_groupReplicationPassword = 300;
    public static readonly RULE_groupReplicationPluginAuth = 301;
    public static readonly RULE_replica = 302;
    public static readonly RULE_preparedStatement = 303;
    public static readonly RULE_executeStatement = 304;
    public static readonly RULE_executeVarList = 305;
    public static readonly RULE_cloneStatement = 306;
    public static readonly RULE_dataDirSSL = 307;
    public static readonly RULE_ssl = 308;
    public static readonly RULE_accountManagementStatement = 309;
    public static readonly RULE_alterUserStatement = 310;
    public static readonly RULE_alterUserList = 311;
    public static readonly RULE_alterUser = 312;
    public static readonly RULE_oldAlterUser = 313;
    public static readonly RULE_userFunction = 314;
    public static readonly RULE_createUserStatement = 315;
    public static readonly RULE_createUserTail = 316;
    public static readonly RULE_userAttributes = 317;
    public static readonly RULE_defaultRoleClause = 318;
    public static readonly RULE_requireClause = 319;
    public static readonly RULE_connectOptions = 320;
    public static readonly RULE_accountLockPasswordExpireOptions = 321;
    public static readonly RULE_userAttribute = 322;
    public static readonly RULE_dropUserStatement = 323;
    public static readonly RULE_grantStatement = 324;
    public static readonly RULE_grantTargetList = 325;
    public static readonly RULE_grantOptions = 326;
    public static readonly RULE_exceptRoleList = 327;
    public static readonly RULE_withRoles = 328;
    public static readonly RULE_grantAs = 329;
    public static readonly RULE_versionedRequireClause = 330;
    public static readonly RULE_renameUserStatement = 331;
    public static readonly RULE_revokeStatement = 332;
    public static readonly RULE_aclType = 333;
    public static readonly RULE_roleOrPrivilegesList = 334;
    public static readonly RULE_roleOrPrivilege = 335;
    public static readonly RULE_grantIdentifier = 336;
    public static readonly RULE_requireList = 337;
    public static readonly RULE_requireListElement = 338;
    public static readonly RULE_grantOption = 339;
    public static readonly RULE_setRoleStatement = 340;
    public static readonly RULE_roleList = 341;
    public static readonly RULE_role = 342;
    public static readonly RULE_tableAdministrationStatement = 343;
    public static readonly RULE_histogramAutoUpdate = 344;
    public static readonly RULE_histogramUpdateParam = 345;
    public static readonly RULE_histogramNumBuckets = 346;
    public static readonly RULE_histogram = 347;
    public static readonly RULE_checkOption = 348;
    public static readonly RULE_repairType = 349;
    public static readonly RULE_uninstallStatement = 350;
    public static readonly RULE_installStatement = 351;
    public static readonly RULE_installOptionType = 352;
    public static readonly RULE_installSetRvalue = 353;
    public static readonly RULE_installSetValue = 354;
    public static readonly RULE_installSetValueList = 355;
    public static readonly RULE_setStatement = 356;
    public static readonly RULE_startOptionValueList = 357;
    public static readonly RULE_transactionCharacteristics = 358;
    public static readonly RULE_transactionAccessMode = 359;
    public static readonly RULE_isolationLevel = 360;
    public static readonly RULE_optionValueListContinued = 361;
    public static readonly RULE_optionValueNoOptionType = 362;
    public static readonly RULE_optionValue = 363;
    public static readonly RULE_setSystemVariable = 364;
    public static readonly RULE_startOptionValueListFollowingOptionType = 365;
    public static readonly RULE_optionValueFollowingOptionType = 366;
    public static readonly RULE_setExprOrDefault = 367;
    public static readonly RULE_showDatabasesStatement = 368;
    public static readonly RULE_showTablesStatement = 369;
    public static readonly RULE_showTriggersStatement = 370;
    public static readonly RULE_showEventsStatement = 371;
    public static readonly RULE_showTableStatusStatement = 372;
    public static readonly RULE_showOpenTablesStatement = 373;
    public static readonly RULE_showParseTreeStatement = 374;
    public static readonly RULE_showPluginsStatement = 375;
    public static readonly RULE_showEngineLogsStatement = 376;
    public static readonly RULE_showEngineMutexStatement = 377;
    public static readonly RULE_showEngineStatusStatement = 378;
    public static readonly RULE_showColumnsStatement = 379;
    public static readonly RULE_showBinaryLogsStatement = 380;
    public static readonly RULE_showBinaryLogStatusStatement = 381;
    public static readonly RULE_showReplicasStatement = 382;
    public static readonly RULE_showBinlogEventsStatement = 383;
    public static readonly RULE_showRelaylogEventsStatement = 384;
    public static readonly RULE_showKeysStatement = 385;
    public static readonly RULE_showEnginesStatement = 386;
    public static readonly RULE_showCountWarningsStatement = 387;
    public static readonly RULE_showCountErrorsStatement = 388;
    public static readonly RULE_showWarningsStatement = 389;
    public static readonly RULE_showErrorsStatement = 390;
    public static readonly RULE_showProfilesStatement = 391;
    public static readonly RULE_showProfileStatement = 392;
    public static readonly RULE_showStatusStatement = 393;
    public static readonly RULE_showProcessListStatement = 394;
    public static readonly RULE_showVariablesStatement = 395;
    public static readonly RULE_showCharacterSetStatement = 396;
    public static readonly RULE_showCollationStatement = 397;
    public static readonly RULE_showPrivilegesStatement = 398;
    public static readonly RULE_showGrantsStatement = 399;
    public static readonly RULE_showCreateDatabaseStatement = 400;
    public static readonly RULE_showCreateTableStatement = 401;
    public static readonly RULE_showCreateViewStatement = 402;
    public static readonly RULE_showMasterStatusStatement = 403;
    public static readonly RULE_showReplicaStatusStatement = 404;
    public static readonly RULE_showCreateProcedureStatement = 405;
    public static readonly RULE_showCreateFunctionStatement = 406;
    public static readonly RULE_showCreateTriggerStatement = 407;
    public static readonly RULE_showCreateProcedureStatusStatement = 408;
    public static readonly RULE_showCreateFunctionStatusStatement = 409;
    public static readonly RULE_showCreateProcedureCodeStatement = 410;
    public static readonly RULE_showCreateFunctionCodeStatement = 411;
    public static readonly RULE_showCreateEventStatement = 412;
    public static readonly RULE_showCreateUserStatement = 413;
    public static readonly RULE_showCommandType = 414;
    public static readonly RULE_engineOrAll = 415;
    public static readonly RULE_fromOrIn = 416;
    public static readonly RULE_inDb = 417;
    public static readonly RULE_profileDefinitions = 418;
    public static readonly RULE_profileDefinition = 419;
    public static readonly RULE_otherAdministrativeStatement = 420;
    public static readonly RULE_keyCacheListOrParts = 421;
    public static readonly RULE_keyCacheList = 422;
    public static readonly RULE_assignToKeycache = 423;
    public static readonly RULE_assignToKeycachePartition = 424;
    public static readonly RULE_cacheKeyList = 425;
    public static readonly RULE_keyUsageElement = 426;
    public static readonly RULE_keyUsageList = 427;
    public static readonly RULE_flushOption = 428;
    public static readonly RULE_logType = 429;
    public static readonly RULE_flushTables = 430;
    public static readonly RULE_flushTablesOptions = 431;
    public static readonly RULE_preloadTail = 432;
    public static readonly RULE_preloadList = 433;
    public static readonly RULE_preloadKeys = 434;
    public static readonly RULE_adminPartition = 435;
    public static readonly RULE_resourceGroupManagement = 436;
    public static readonly RULE_createResourceGroup = 437;
    public static readonly RULE_resourceGroupVcpuList = 438;
    public static readonly RULE_vcpuNumOrRange = 439;
    public static readonly RULE_resourceGroupPriority = 440;
    public static readonly RULE_resourceGroupEnableDisable = 441;
    public static readonly RULE_alterResourceGroup = 442;
    public static readonly RULE_setResourceGroup = 443;
    public static readonly RULE_threadIdList = 444;
    public static readonly RULE_dropResourceGroup = 445;
    public static readonly RULE_utilityStatement = 446;
    public static readonly RULE_describeStatement = 447;
    public static readonly RULE_explainStatement = 448;
    public static readonly RULE_explainOptions = 449;
    public static readonly RULE_explainableStatement = 450;
    public static readonly RULE_explainInto = 451;
    public static readonly RULE_helpCommand = 452;
    public static readonly RULE_useCommand = 453;
    public static readonly RULE_restartServer = 454;
    public static readonly RULE_expr = 455;
    public static readonly RULE_boolPri = 456;
    public static readonly RULE_compOp = 457;
    public static readonly RULE_predicate = 458;
    public static readonly RULE_predicateOperations = 459;
    public static readonly RULE_bitExpr = 460;
    public static readonly RULE_simpleExpr = 461;
    public static readonly RULE_arrayCast = 462;
    public static readonly RULE_jsonOperator = 463;
    public static readonly RULE_sumExpr = 464;
    public static readonly RULE_groupingOperation = 465;
    public static readonly RULE_windowFunctionCall = 466;
    public static readonly RULE_samplingMethod = 467;
    public static readonly RULE_samplingPercentage = 468;
    public static readonly RULE_tablesampleClause = 469;
    public static readonly RULE_windowingClause = 470;
    public static readonly RULE_leadLagInfo = 471;
    public static readonly RULE_stableInteger = 472;
    public static readonly RULE_paramOrVar = 473;
    public static readonly RULE_nullTreatment = 474;
    public static readonly RULE_jsonFunction = 475;
    public static readonly RULE_inSumExpr = 476;
    public static readonly RULE_identListArg = 477;
    public static readonly RULE_identList = 478;
    public static readonly RULE_fulltextOptions = 479;
    public static readonly RULE_runtimeFunctionCall = 480;
    public static readonly RULE_returningType = 481;
    public static readonly RULE_geometryFunction = 482;
    public static readonly RULE_timeFunctionParameters = 483;
    public static readonly RULE_fractionalPrecision = 484;
    public static readonly RULE_weightStringLevels = 485;
    public static readonly RULE_weightStringLevelListItem = 486;
    public static readonly RULE_dateTimeTtype = 487;
    public static readonly RULE_trimFunction = 488;
    public static readonly RULE_substringFunction = 489;
    public static readonly RULE_functionCall = 490;
    public static readonly RULE_udfExprList = 491;
    public static readonly RULE_udfExpr = 492;
    public static readonly RULE_userVariable = 493;
    public static readonly RULE_inExpressionUserVariableAssignment = 494;
    public static readonly RULE_rvalueSystemOrUserVariable = 495;
    public static readonly RULE_lvalueVariable = 496;
    public static readonly RULE_rvalueSystemVariable = 497;
    public static readonly RULE_whenExpression = 498;
    public static readonly RULE_thenExpression = 499;
    public static readonly RULE_elseExpression = 500;
    public static readonly RULE_castType = 501;
    public static readonly RULE_exprList = 502;
    public static readonly RULE_charset = 503;
    public static readonly RULE_notRule = 504;
    public static readonly RULE_not2Rule = 505;
    public static readonly RULE_interval = 506;
    public static readonly RULE_intervalTimeStamp = 507;
    public static readonly RULE_exprListWithParentheses = 508;
    public static readonly RULE_exprWithParentheses = 509;
    public static readonly RULE_simpleExprWithParentheses = 510;
    public static readonly RULE_orderList = 511;
    public static readonly RULE_orderExpression = 512;
    public static readonly RULE_groupList = 513;
    public static readonly RULE_groupingExpression = 514;
    public static readonly RULE_channel = 515;
    public static readonly RULE_compoundStatement = 516;
    public static readonly RULE_returnStatement = 517;
    public static readonly RULE_ifStatement = 518;
    public static readonly RULE_ifBody = 519;
    public static readonly RULE_thenStatement = 520;
    public static readonly RULE_compoundStatementList = 521;
    public static readonly RULE_caseStatement = 522;
    public static readonly RULE_elseStatement = 523;
    public static readonly RULE_labeledBlock = 524;
    public static readonly RULE_unlabeledBlock = 525;
    public static readonly RULE_label = 526;
    public static readonly RULE_beginEndBlock = 527;
    public static readonly RULE_labeledControl = 528;
    public static readonly RULE_unlabeledControl = 529;
    public static readonly RULE_loopBlock = 530;
    public static readonly RULE_whileDoBlock = 531;
    public static readonly RULE_repeatUntilBlock = 532;
    public static readonly RULE_spDeclarations = 533;
    public static readonly RULE_spDeclaration = 534;
    public static readonly RULE_variableDeclaration = 535;
    public static readonly RULE_conditionDeclaration = 536;
    public static readonly RULE_spCondition = 537;
    public static readonly RULE_sqlstate = 538;
    public static readonly RULE_handlerDeclaration = 539;
    public static readonly RULE_handlerCondition = 540;
    public static readonly RULE_cursorDeclaration = 541;
    public static readonly RULE_iterateStatement = 542;
    public static readonly RULE_leaveStatement = 543;
    public static readonly RULE_getDiagnosticsStatement = 544;
    public static readonly RULE_signalAllowedExpr = 545;
    public static readonly RULE_statementInformationItem = 546;
    public static readonly RULE_conditionInformationItem = 547;
    public static readonly RULE_signalInformationItemName = 548;
    public static readonly RULE_signalStatement = 549;
    public static readonly RULE_resignalStatement = 550;
    public static readonly RULE_signalInformationItem = 551;
    public static readonly RULE_cursorOpen = 552;
    public static readonly RULE_cursorClose = 553;
    public static readonly RULE_cursorFetch = 554;
    public static readonly RULE_schedule = 555;
    public static readonly RULE_columnDefinition = 556;
    public static readonly RULE_checkOrReferences = 557;
    public static readonly RULE_checkConstraint = 558;
    public static readonly RULE_constraintEnforcement = 559;
    public static readonly RULE_tableConstraintDef = 560;
    public static readonly RULE_constraintName = 561;
    public static readonly RULE_fieldDefinition = 562;
    public static readonly RULE_columnAttribute = 563;
    public static readonly RULE_columnFormat = 564;
    public static readonly RULE_storageMedia = 565;
    public static readonly RULE_now = 566;
    public static readonly RULE_nowOrSignedLiteral = 567;
    public static readonly RULE_gcolAttribute = 568;
    public static readonly RULE_references = 569;
    public static readonly RULE_deleteOption = 570;
    public static readonly RULE_keyList = 571;
    public static readonly RULE_keyPart = 572;
    public static readonly RULE_keyListWithExpression = 573;
    public static readonly RULE_keyPartOrExpression = 574;
    public static readonly RULE_indexType = 575;
    public static readonly RULE_indexOption = 576;
    public static readonly RULE_commonIndexOption = 577;
    public static readonly RULE_visibility = 578;
    public static readonly RULE_indexTypeClause = 579;
    public static readonly RULE_fulltextIndexOption = 580;
    public static readonly RULE_spatialIndexOption = 581;
    public static readonly RULE_dataTypeDefinition = 582;
    public static readonly RULE_dataType = 583;
    public static readonly RULE_nchar = 584;
    public static readonly RULE_realType = 585;
    public static readonly RULE_fieldLength = 586;
    public static readonly RULE_fieldOptions = 587;
    public static readonly RULE_charsetWithOptBinary = 588;
    public static readonly RULE_ascii = 589;
    public static readonly RULE_unicode = 590;
    public static readonly RULE_wsNumCodepoints = 591;
    public static readonly RULE_typeDatetimePrecision = 592;
    public static readonly RULE_functionDatetimePrecision = 593;
    public static readonly RULE_charsetName = 594;
    public static readonly RULE_collationName = 595;
    public static readonly RULE_createTableOptions = 596;
    public static readonly RULE_createTableOptionsEtc = 597;
    public static readonly RULE_createPartitioningEtc = 598;
    public static readonly RULE_createTableOptionsSpaceSeparated = 599;
    public static readonly RULE_createTableOption = 600;
    public static readonly RULE_ternaryOption = 601;
    public static readonly RULE_defaultCollation = 602;
    public static readonly RULE_defaultEncryption = 603;
    public static readonly RULE_defaultCharset = 604;
    public static readonly RULE_partitionClause = 605;
    public static readonly RULE_partitionTypeDef = 606;
    public static readonly RULE_subPartitions = 607;
    public static readonly RULE_partitionKeyAlgorithm = 608;
    public static readonly RULE_partitionDefinitions = 609;
    public static readonly RULE_partitionDefinition = 610;
    public static readonly RULE_partitionValuesIn = 611;
    public static readonly RULE_partitionOption = 612;
    public static readonly RULE_subpartitionDefinition = 613;
    public static readonly RULE_partitionValueItemListParen = 614;
    public static readonly RULE_partitionValueItem = 615;
    public static readonly RULE_definerClause = 616;
    public static readonly RULE_ifExists = 617;
    public static readonly RULE_ifExistsIdentifier = 618;
    public static readonly RULE_persistedVariableIdentifier = 619;
    public static readonly RULE_ifNotExists = 620;
    public static readonly RULE_ignoreUnknownUser = 621;
    public static readonly RULE_procedureParameter = 622;
    public static readonly RULE_functionParameter = 623;
    public static readonly RULE_collate = 624;
    public static readonly RULE_typeWithOptCollate = 625;
    public static readonly RULE_schemaIdentifierPair = 626;
    public static readonly RULE_viewRefList = 627;
    public static readonly RULE_updateList = 628;
    public static readonly RULE_updateElement = 629;
    public static readonly RULE_charsetClause = 630;
    public static readonly RULE_fieldsClause = 631;
    public static readonly RULE_fieldTerm = 632;
    public static readonly RULE_linesClause = 633;
    public static readonly RULE_lineTerm = 634;
    public static readonly RULE_userList = 635;
    public static readonly RULE_createUserList = 636;
    public static readonly RULE_createUser = 637;
    public static readonly RULE_createUserWithMfa = 638;
    public static readonly RULE_identification = 639;
    public static readonly RULE_identifiedByPassword = 640;
    public static readonly RULE_identifiedByRandomPassword = 641;
    public static readonly RULE_identifiedWithPlugin = 642;
    public static readonly RULE_identifiedWithPluginAsAuth = 643;
    public static readonly RULE_identifiedWithPluginByPassword = 644;
    public static readonly RULE_identifiedWithPluginByRandomPassword = 645;
    public static readonly RULE_initialAuth = 646;
    public static readonly RULE_retainCurrentPassword = 647;
    public static readonly RULE_discardOldPassword = 648;
    public static readonly RULE_userRegistration = 649;
    public static readonly RULE_factor = 650;
    public static readonly RULE_replacePassword = 651;
    public static readonly RULE_userIdentifierOrText = 652;
    public static readonly RULE_user = 653;
    public static readonly RULE_likeClause = 654;
    public static readonly RULE_likeOrWhere = 655;
    public static readonly RULE_onlineOption = 656;
    public static readonly RULE_noWriteToBinLog = 657;
    public static readonly RULE_usePartition = 658;
    public static readonly RULE_fieldIdentifier = 659;
    public static readonly RULE_columnName = 660;
    public static readonly RULE_columnInternalRef = 661;
    public static readonly RULE_columnInternalRefList = 662;
    public static readonly RULE_columnRef = 663;
    public static readonly RULE_insertIdentifier = 664;
    public static readonly RULE_indexName = 665;
    public static readonly RULE_indexRef = 666;
    public static readonly RULE_tableWild = 667;
    public static readonly RULE_schemaName = 668;
    public static readonly RULE_schemaRef = 669;
    public static readonly RULE_procedureName = 670;
    public static readonly RULE_procedureRef = 671;
    public static readonly RULE_functionName = 672;
    public static readonly RULE_functionRef = 673;
    public static readonly RULE_triggerName = 674;
    public static readonly RULE_triggerRef = 675;
    public static readonly RULE_viewName = 676;
    public static readonly RULE_viewRef = 677;
    public static readonly RULE_tablespaceName = 678;
    public static readonly RULE_tablespaceRef = 679;
    public static readonly RULE_logfileGroupName = 680;
    public static readonly RULE_logfileGroupRef = 681;
    public static readonly RULE_eventName = 682;
    public static readonly RULE_eventRef = 683;
    public static readonly RULE_udfName = 684;
    public static readonly RULE_serverName = 685;
    public static readonly RULE_serverRef = 686;
    public static readonly RULE_engineRef = 687;
    public static readonly RULE_tableName = 688;
    public static readonly RULE_filterTableRef = 689;
    public static readonly RULE_tableRefWithWildcard = 690;
    public static readonly RULE_tableRef = 691;
    public static readonly RULE_tableRefList = 692;
    public static readonly RULE_tableAliasRefList = 693;
    public static readonly RULE_parameterName = 694;
    public static readonly RULE_labelIdentifier = 695;
    public static readonly RULE_labelRef = 696;
    public static readonly RULE_roleIdentifier = 697;
    public static readonly RULE_pluginRef = 698;
    public static readonly RULE_componentRef = 699;
    public static readonly RULE_resourceGroupRef = 700;
    public static readonly RULE_windowName = 701;
    public static readonly RULE_pureIdentifier = 702;
    public static readonly RULE_identifier = 703;
    public static readonly RULE_identifierList = 704;
    public static readonly RULE_identifierListWithParentheses = 705;
    public static readonly RULE_qualifiedIdentifier = 706;
    public static readonly RULE_simpleIdentifier = 707;
    public static readonly RULE_dotIdentifier = 708;
    public static readonly RULE_ulong_number = 709;
    public static readonly RULE_real_ulong_number = 710;
    public static readonly RULE_ulonglongNumber = 711;
    public static readonly RULE_real_ulonglong_number = 712;
    public static readonly RULE_signedLiteral = 713;
    public static readonly RULE_signedLiteralOrNull = 714;
    public static readonly RULE_literal = 715;
    public static readonly RULE_literalOrNull = 716;
    public static readonly RULE_nullAsLiteral = 717;
    public static readonly RULE_stringList = 718;
    public static readonly RULE_textStringLiteral = 719;
    public static readonly RULE_textString = 720;
    public static readonly RULE_textStringHash = 721;
    public static readonly RULE_textLiteral = 722;
    public static readonly RULE_textStringNoLinebreak = 723;
    public static readonly RULE_textStringLiteralList = 724;
    public static readonly RULE_numLiteral = 725;
    public static readonly RULE_boolLiteral = 726;
    public static readonly RULE_nullLiteral = 727;
    public static readonly RULE_int64Literal = 728;
    public static readonly RULE_temporalLiteral = 729;
    public static readonly RULE_floatOptions = 730;
    public static readonly RULE_standardFloatOptions = 731;
    public static readonly RULE_precision = 732;
    public static readonly RULE_textOrIdentifier = 733;
    public static readonly RULE_lValueIdentifier = 734;
    public static readonly RULE_roleIdentifierOrText = 735;
    public static readonly RULE_sizeNumber = 736;
    public static readonly RULE_parentheses = 737;
    public static readonly RULE_equal = 738;
    public static readonly RULE_optionType = 739;
    public static readonly RULE_rvalueSystemVariableType = 740;
    public static readonly RULE_setVarIdentType = 741;
    public static readonly RULE_jsonAttribute = 742;
    public static readonly RULE_identifierKeyword = 743;
    public static readonly RULE_identifierKeywordsAmbiguous1RolesAndLabels = 744;
    public static readonly RULE_identifierKeywordsAmbiguous2Labels = 745;
    public static readonly RULE_labelKeyword = 746;
    public static readonly RULE_identifierKeywordsAmbiguous3Roles = 747;
    public static readonly RULE_identifierKeywordsUnambiguous = 748;
    public static readonly RULE_roleKeyword = 749;
    public static readonly RULE_lValueKeyword = 750;
    public static readonly RULE_identifierKeywordsAmbiguous4SystemVariables = 751;
    public static readonly RULE_roleOrIdentifierKeyword = 752;
    public static readonly RULE_roleOrLabelKeyword = 753;

    public static readonly literalNames = [
        null, null, null, null, null, null, "'='", "':='", "'<=>'", "'>='", 
        "'>'", "'<='", "'<'", "'!='", "'+'", "'-'", "'*'", "'/'", "'%'", 
        "'!'", "'~'", "'<<'", "'>>'", "'&&'", "'&'", "'^'", "'||'", "'|'", 
        "'.'", "','", "';'", "':'", "'('", "')'", "'{'", "'}'", "'_'", "'->'", 
        "'->>'", "'@'", null, "'@@'", "'\\N'", "'?'", null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, "'<>'"
    ];

    public static readonly symbolicNames = [
        null, "NOT2_SYMBOL", "CONCAT_PIPES_SYMBOL", "INT_NUMBER", "LONG_NUMBER", 
        "ULONGLONG_NUMBER", "EQUAL_OPERATOR", "ASSIGN_OPERATOR", "NULL_SAFE_EQUAL_OPERATOR", 
        "GREATER_OR_EQUAL_OPERATOR", "GREATER_THAN_OPERATOR", "LESS_OR_EQUAL_OPERATOR", 
        "LESS_THAN_OPERATOR", "NOT_EQUAL_OPERATOR", "PLUS_OPERATOR", "MINUS_OPERATOR", 
        "MULT_OPERATOR", "DIV_OPERATOR", "MOD_OPERATOR", "LOGICAL_NOT_OPERATOR", 
        "BITWISE_NOT_OPERATOR", "SHIFT_LEFT_OPERATOR", "SHIFT_RIGHT_OPERATOR", 
        "LOGICAL_AND_OPERATOR", "BITWISE_AND_OPERATOR", "BITWISE_XOR_OPERATOR", 
        "LOGICAL_OR_OPERATOR", "BITWISE_OR_OPERATOR", "DOT_SYMBOL", "COMMA_SYMBOL", 
        "SEMICOLON_SYMBOL", "COLON_SYMBOL", "OPEN_PAR_SYMBOL", "CLOSE_PAR_SYMBOL", 
        "OPEN_CURLY_SYMBOL", "CLOSE_CURLY_SYMBOL", "UNDERLINE_SYMBOL", "JSON_SEPARATOR_SYMBOL", 
        "JSON_UNQUOTED_SEPARATOR_SYMBOL", "AT_SIGN_SYMBOL", "AT_TEXT_SUFFIX", 
        "AT_AT_SIGN_SYMBOL", "NULL2_SYMBOL", "PARAM_MARKER", "HEX_NUMBER", 
        "BIN_NUMBER", "DECIMAL_NUMBER", "FLOAT_NUMBER", "ACCESSIBLE_SYMBOL", 
        "ACCOUNT_SYMBOL", "ACTION_SYMBOL", "ADD_SYMBOL", "ADDDATE_SYMBOL", 
        "AFTER_SYMBOL", "AGAINST_SYMBOL", "AGGREGATE_SYMBOL", "ALGORITHM_SYMBOL", 
        "ALL_SYMBOL", "ALTER_SYMBOL", "ALWAYS_SYMBOL", "ANALYZE_SYMBOL", 
        "AND_SYMBOL", "ANY_SYMBOL", "AS_SYMBOL", "ASC_SYMBOL", "ASCII_SYMBOL", 
        "ASENSITIVE_SYMBOL", "AT_SYMBOL", "AUTOEXTEND_SIZE_SYMBOL", "AUTO_INCREMENT_SYMBOL", 
        "AVG_ROW_LENGTH_SYMBOL", "AVG_SYMBOL", "BACKUP_SYMBOL", "BEFORE_SYMBOL", 
        "BEGIN_SYMBOL", "BETWEEN_SYMBOL", "BIGINT_SYMBOL", "BINARY_SYMBOL", 
        "BINLOG_SYMBOL", "BIT_AND_SYMBOL", "BIT_OR_SYMBOL", "BIT_SYMBOL", 
        "BIT_XOR_SYMBOL", "BLOB_SYMBOL", "BLOCK_SYMBOL", "BOOLEAN_SYMBOL", 
        "BOOL_SYMBOL", "BOTH_SYMBOL", "BTREE_SYMBOL", "BY_SYMBOL", "BYTE_SYMBOL", 
        "CACHE_SYMBOL", "CALL_SYMBOL", "CASCADE_SYMBOL", "CASCADED_SYMBOL", 
        "CASE_SYMBOL", "CAST_SYMBOL", "CATALOG_NAME_SYMBOL", "CHAIN_SYMBOL", 
        "CHANGE_SYMBOL", "CHANGED_SYMBOL", "CHANNEL_SYMBOL", "CHARSET_SYMBOL", 
        "CHAR_SYMBOL", "CHECKSUM_SYMBOL", "CHECK_SYMBOL", "CIPHER_SYMBOL", 
        "CLASS_ORIGIN_SYMBOL", "CLIENT_SYMBOL", "CLOSE_SYMBOL", "COALESCE_SYMBOL", 
        "CODE_SYMBOL", "COLLATE_SYMBOL", "COLLATION_SYMBOL", "COLUMNS_SYMBOL", 
        "COLUMN_SYMBOL", "COLUMN_NAME_SYMBOL", "COLUMN_FORMAT_SYMBOL", "COMMENT_SYMBOL", 
        "COMMITTED_SYMBOL", "COMMIT_SYMBOL", "COMPACT_SYMBOL", "COMPLETION_SYMBOL", 
        "COMPRESSED_SYMBOL", "COMPRESSION_SYMBOL", "CONCURRENT_SYMBOL", 
        "CONDITION_SYMBOL", "CONNECTION_SYMBOL", "CONSISTENT_SYMBOL", "CONSTRAINT_SYMBOL", 
        "CONSTRAINT_CATALOG_SYMBOL", "CONSTRAINT_NAME_SYMBOL", "CONSTRAINT_SCHEMA_SYMBOL", 
        "CONTAINS_SYMBOL", "CONTEXT_SYMBOL", "CONTINUE_SYMBOL", "CONVERT_SYMBOL", 
        "COUNT_SYMBOL", "CPU_SYMBOL", "CREATE_SYMBOL", "CROSS_SYMBOL", "CUBE_SYMBOL", 
        "CURDATE_SYMBOL", "CURRENT_SYMBOL", "CURRENT_DATE_SYMBOL", "CURRENT_TIME_SYMBOL", 
        "CURRENT_USER_SYMBOL", "CURSOR_SYMBOL", "CURSOR_NAME_SYMBOL", "CURTIME_SYMBOL", 
        "DATABASE_SYMBOL", "DATABASES_SYMBOL", "DATAFILE_SYMBOL", "DATA_SYMBOL", 
        "DATETIME_SYMBOL", "DATE_ADD_SYMBOL", "DATE_SUB_SYMBOL", "DATE_SYMBOL", 
        "DAY_HOUR_SYMBOL", "DAY_MICROSECOND_SYMBOL", "DAY_MINUTE_SYMBOL", 
        "DAY_SECOND_SYMBOL", "DAY_SYMBOL", "DEALLOCATE_SYMBOL", "DECIMAL_SYMBOL", 
        "DECLARE_SYMBOL", "DEFAULT_SYMBOL", "DEFAULT_AUTH_SYMBOL", "DEFINER_SYMBOL", 
        "DELAYED_SYMBOL", "DELAY_KEY_WRITE_SYMBOL", "DELETE_SYMBOL", "DESC_SYMBOL", 
        "DESCRIBE_SYMBOL", "DETERMINISTIC_SYMBOL", "DIAGNOSTICS_SYMBOL", 
        "DIRECTORY_SYMBOL", "DISABLE_SYMBOL", "DISCARD_SYMBOL", "DISK_SYMBOL", 
        "DISTINCT_SYMBOL", "DIV_SYMBOL", "DOUBLE_SYMBOL", "DO_SYMBOL", "DROP_SYMBOL", 
        "DUAL_SYMBOL", "DUMPFILE_SYMBOL", "DUPLICATE_SYMBOL", "DYNAMIC_SYMBOL", 
        "EACH_SYMBOL", "ELSE_SYMBOL", "ELSEIF_SYMBOL", "ENABLE_SYMBOL", 
        "ENCLOSED_SYMBOL", "ENCRYPTION_SYMBOL", "END_SYMBOL", "ENDS_SYMBOL", 
        "ENGINES_SYMBOL", "ENGINE_SYMBOL", "ENUM_SYMBOL", "ERROR_SYMBOL", 
        "ERRORS_SYMBOL", "ESCAPED_SYMBOL", "ESCAPE_SYMBOL", "EVENTS_SYMBOL", 
        "EVENT_SYMBOL", "EVERY_SYMBOL", "EXCHANGE_SYMBOL", "EXECUTE_SYMBOL", 
        "EXISTS_SYMBOL", "EXIT_SYMBOL", "EXPANSION_SYMBOL", "EXPIRE_SYMBOL", 
        "EXPLAIN_SYMBOL", "EXPORT_SYMBOL", "EXTENDED_SYMBOL", "EXTENT_SIZE_SYMBOL", 
        "EXTRACT_SYMBOL", "FALSE_SYMBOL", "FAST_SYMBOL", "FAULTS_SYMBOL", 
        "FETCH_SYMBOL", "FILE_SYMBOL", "FILE_BLOCK_SIZE_SYMBOL", "FILTER_SYMBOL", 
        "FIRST_SYMBOL", "FIXED_SYMBOL", "FLOAT_SYMBOL", "FLUSH_SYMBOL", 
        "FOLLOWS_SYMBOL", "FORCE_SYMBOL", "FOREIGN_SYMBOL", "FOR_SYMBOL", 
        "FORMAT_SYMBOL", "FOUND_SYMBOL", "FROM_SYMBOL", "FULL_SYMBOL", "FULLTEXT_SYMBOL", 
        "FUNCTION_SYMBOL", "GET_SYMBOL", "GENERAL_SYMBOL", "GENERATED_SYMBOL", 
        "GROUP_REPLICATION_SYMBOL", "GEOMETRYCOLLECTION_SYMBOL", "GEOMETRY_SYMBOL", 
        "GET_FORMAT_SYMBOL", "GLOBAL_SYMBOL", "GRANT_SYMBOL", "GRANTS_SYMBOL", 
        "GROUP_SYMBOL", "GROUP_CONCAT_SYMBOL", "HANDLER_SYMBOL", "HASH_SYMBOL", 
        "HAVING_SYMBOL", "HELP_SYMBOL", "HIGH_PRIORITY_SYMBOL", "HOST_SYMBOL", 
        "HOSTS_SYMBOL", "HOUR_MICROSECOND_SYMBOL", "HOUR_MINUTE_SYMBOL", 
        "HOUR_SECOND_SYMBOL", "HOUR_SYMBOL", "IDENTIFIED_SYMBOL", "IF_SYMBOL", 
        "IGNORE_SYMBOL", "IGNORE_SERVER_IDS_SYMBOL", "IMPORT_SYMBOL", "INDEXES_SYMBOL", 
        "INDEX_SYMBOL", "INFILE_SYMBOL", "INITIAL_SIZE_SYMBOL", "INNER_SYMBOL", 
        "INOUT_SYMBOL", "INSENSITIVE_SYMBOL", "INSERT_SYMBOL", "INSERT_METHOD_SYMBOL", 
        "INSTANCE_SYMBOL", "INSTALL_SYMBOL", "INTERVAL_SYMBOL", "INTO_SYMBOL", 
        "INT_SYMBOL", "INVOKER_SYMBOL", "IN_SYMBOL", "IO_AFTER_GTIDS_SYMBOL", 
        "IO_BEFORE_GTIDS_SYMBOL", "IO_SYMBOL", "IPC_SYMBOL", "IS_SYMBOL", 
        "ISOLATION_SYMBOL", "ISSUER_SYMBOL", "ITERATE_SYMBOL", "JOIN_SYMBOL", 
        "JSON_SYMBOL", "KEYS_SYMBOL", "KEY_BLOCK_SIZE_SYMBOL", "KEY_SYMBOL", 
        "KILL_SYMBOL", "LANGUAGE_SYMBOL", "LAST_SYMBOL", "LEADING_SYMBOL", 
        "LEAVES_SYMBOL", "LEAVE_SYMBOL", "LEFT_SYMBOL", "LESS_SYMBOL", "LEVEL_SYMBOL", 
        "LIKE_SYMBOL", "LIMIT_SYMBOL", "LINEAR_SYMBOL", "LINES_SYMBOL", 
        "LINESTRING_SYMBOL", "LIST_SYMBOL", "LOAD_SYMBOL", "LOCAL_SYMBOL", 
        "LOCKS_SYMBOL", "LOCK_SYMBOL", "LOGFILE_SYMBOL", "LOGS_SYMBOL", 
        "LONGBLOB_SYMBOL", "LONGTEXT_SYMBOL", "LONG_SYMBOL", "LOOP_SYMBOL", 
        "LOW_PRIORITY_SYMBOL", "MASTER_AUTO_POSITION_SYMBOL", "MASTER_BIND_SYMBOL", 
        "MASTER_CONNECT_RETRY_SYMBOL", "MASTER_DELAY_SYMBOL", "MASTER_HOST_SYMBOL", 
        "MASTER_LOG_FILE_SYMBOL", "MASTER_LOG_POS_SYMBOL", "MASTER_PASSWORD_SYMBOL", 
        "MASTER_PORT_SYMBOL", "MASTER_RETRY_COUNT_SYMBOL", "MASTER_SSL_CAPATH_SYMBOL", 
        "MASTER_SSL_CA_SYMBOL", "MASTER_SSL_CERT_SYMBOL", "MASTER_SSL_CIPHER_SYMBOL", 
        "MASTER_SSL_CRL_SYMBOL", "MASTER_SSL_CRLPATH_SYMBOL", "MASTER_SSL_KEY_SYMBOL", 
        "MASTER_SSL_SYMBOL", "MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL", "MASTER_SYMBOL", 
        "MASTER_TLS_VERSION_SYMBOL", "MASTER_USER_SYMBOL", "MASTER_HEARTBEAT_PERIOD_SYMBOL", 
        "MATCH_SYMBOL", "MAX_CONNECTIONS_PER_HOUR_SYMBOL", "MAX_QUERIES_PER_HOUR_SYMBOL", 
        "MAX_ROWS_SYMBOL", "MAX_SIZE_SYMBOL", "MAX_SYMBOL", "MAX_UPDATES_PER_HOUR_SYMBOL", 
        "MAX_USER_CONNECTIONS_SYMBOL", "MAXVALUE_SYMBOL", "MEDIUMBLOB_SYMBOL", 
        "MEDIUMINT_SYMBOL", "MEDIUMTEXT_SYMBOL", "MEDIUM_SYMBOL", "MEMORY_SYMBOL", 
        "MERGE_SYMBOL", "MESSAGE_TEXT_SYMBOL", "MICROSECOND_SYMBOL", "MID_SYMBOL", 
        "MIGRATE_SYMBOL", "MINUTE_MICROSECOND_SYMBOL", "MINUTE_SECOND_SYMBOL", 
        "MINUTE_SYMBOL", "MIN_ROWS_SYMBOL", "MIN_SYMBOL", "MODE_SYMBOL", 
        "MODIFIES_SYMBOL", "MODIFY_SYMBOL", "MOD_SYMBOL", "MONTH_SYMBOL", 
        "MULTILINESTRING_SYMBOL", "MULTIPOINT_SYMBOL", "MULTIPOLYGON_SYMBOL", 
        "MUTEX_SYMBOL", "MYSQL_ERRNO_SYMBOL", "NAMES_SYMBOL", "NAME_SYMBOL", 
        "NATIONAL_SYMBOL", "NATURAL_SYMBOL", "NCHAR_SYMBOL", "NDBCLUSTER_SYMBOL", 
        "NEVER_SYMBOL", "NEW_SYMBOL", "NEXT_SYMBOL", "NODEGROUP_SYMBOL", 
        "NONE_SYMBOL", "NOT_SYMBOL", "NOW_SYMBOL", "NO_SYMBOL", "NO_WAIT_SYMBOL", 
        "NO_WRITE_TO_BINLOG_SYMBOL", "NULL_SYMBOL", "NUMBER_SYMBOL", "NUMERIC_SYMBOL", 
        "NVARCHAR_SYMBOL", "OFFLINE_SYMBOL", "OFFSET_SYMBOL", "ON_SYMBOL", 
        "ONE_SYMBOL", "ONLINE_SYMBOL", "ONLY_SYMBOL", "OPEN_SYMBOL", "OPTIMIZE_SYMBOL", 
        "OPTIMIZER_COSTS_SYMBOL", "OPTIONS_SYMBOL", "OPTION_SYMBOL", "OPTIONALLY_SYMBOL", 
        "ORDER_SYMBOL", "OR_SYMBOL", "OUTER_SYMBOL", "OUTFILE_SYMBOL", "OUT_SYMBOL", 
        "OWNER_SYMBOL", "PACK_KEYS_SYMBOL", "PAGE_SYMBOL", "PARSER_SYMBOL", 
        "PARTIAL_SYMBOL", "PARTITIONING_SYMBOL", "PARTITIONS_SYMBOL", "PARTITION_SYMBOL", 
        "PASSWORD_SYMBOL", "PHASE_SYMBOL", "PLUGINS_SYMBOL", "PLUGIN_DIR_SYMBOL", 
        "PLUGIN_SYMBOL", "POINT_SYMBOL", "POLYGON_SYMBOL", "PORT_SYMBOL", 
        "POSITION_SYMBOL", "PRECEDES_SYMBOL", "PRECISION_SYMBOL", "PREPARE_SYMBOL", 
        "PRESERVE_SYMBOL", "PREV_SYMBOL", "PRIMARY_SYMBOL", "PRIVILEGES_SYMBOL", 
        "PROCEDURE_SYMBOL", "PROCESS_SYMBOL", "PROCESSLIST_SYMBOL", "PROFILE_SYMBOL", 
        "PROFILES_SYMBOL", "PROXY_SYMBOL", "PURGE_SYMBOL", "QUARTER_SYMBOL", 
        "QUERY_SYMBOL", "QUICK_SYMBOL", "RANGE_SYMBOL", "READS_SYMBOL", 
        "READ_ONLY_SYMBOL", "READ_SYMBOL", "READ_WRITE_SYMBOL", "REAL_SYMBOL", 
        "REBUILD_SYMBOL", "RECOVER_SYMBOL", "REDO_BUFFER_SIZE_SYMBOL", "REDUNDANT_SYMBOL", 
        "REFERENCES_SYMBOL", "REGEXP_SYMBOL", "RELAY_SYMBOL", "RELAYLOG_SYMBOL", 
        "RELAY_LOG_FILE_SYMBOL", "RELAY_LOG_POS_SYMBOL", "RELAY_THREAD_SYMBOL", 
        "RELEASE_SYMBOL", "RELOAD_SYMBOL", "REMOVE_SYMBOL", "RENAME_SYMBOL", 
        "REORGANIZE_SYMBOL", "REPAIR_SYMBOL", "REPEATABLE_SYMBOL", "REPEAT_SYMBOL", 
        "REPLACE_SYMBOL", "REPLICATION_SYMBOL", "REPLICATE_DO_DB_SYMBOL", 
        "REPLICATE_IGNORE_DB_SYMBOL", "REPLICATE_DO_TABLE_SYMBOL", "REPLICATE_IGNORE_TABLE_SYMBOL", 
        "REPLICATE_WILD_DO_TABLE_SYMBOL", "REPLICATE_WILD_IGNORE_TABLE_SYMBOL", 
        "REPLICATE_REWRITE_DB_SYMBOL", "REQUIRE_SYMBOL", "RESET_SYMBOL", 
        "RESIGNAL_SYMBOL", "RESTORE_SYMBOL", "RESTRICT_SYMBOL", "RESUME_SYMBOL", 
        "RETURNED_SQLSTATE_SYMBOL", "RETURNS_SYMBOL", "RETURN_SYMBOL", "REVERSE_SYMBOL", 
        "REVOKE_SYMBOL", "RIGHT_SYMBOL", "ROLLBACK_SYMBOL", "ROLLUP_SYMBOL", 
        "ROTATE_SYMBOL", "ROUTINE_SYMBOL", "ROWS_SYMBOL", "ROW_COUNT_SYMBOL", 
        "ROW_FORMAT_SYMBOL", "ROW_SYMBOL", "RTREE_SYMBOL", "SAVEPOINT_SYMBOL", 
        "SCHEDULE_SYMBOL", "SCHEMA_NAME_SYMBOL", "SECOND_MICROSECOND_SYMBOL", 
        "SECOND_SYMBOL", "SECURITY_SYMBOL", "SELECT_SYMBOL", "SENSITIVE_SYMBOL", 
        "SEPARATOR_SYMBOL", "SERIALIZABLE_SYMBOL", "SERIAL_SYMBOL", "SESSION_SYMBOL", 
        "SERVER_SYMBOL", "SESSION_USER_SYMBOL", "SET_SYMBOL", "SHARE_SYMBOL", 
        "SHOW_SYMBOL", "SHUTDOWN_SYMBOL", "SIGNAL_SYMBOL", "SIGNED_SYMBOL", 
        "SIMPLE_SYMBOL", "SLAVE_SYMBOL", "SLOW_SYMBOL", "SMALLINT_SYMBOL", 
        "SNAPSHOT_SYMBOL", "SOCKET_SYMBOL", "SONAME_SYMBOL", "SOUNDS_SYMBOL", 
        "SOURCE_SYMBOL", "SPATIAL_SYMBOL", "SPECIFIC_SYMBOL", "SQLEXCEPTION_SYMBOL", 
        "SQLSTATE_SYMBOL", "SQLWARNING_SYMBOL", "SQL_AFTER_GTIDS_SYMBOL", 
        "SQL_AFTER_MTS_GAPS_SYMBOL", "SQL_BEFORE_GTIDS_SYMBOL", "SQL_BIG_RESULT_SYMBOL", 
        "SQL_BUFFER_RESULT_SYMBOL", "SQL_CALC_FOUND_ROWS_SYMBOL", "SQL_NO_CACHE_SYMBOL", 
        "SQL_SMALL_RESULT_SYMBOL", "SQL_SYMBOL", "SQL_THREAD_SYMBOL", "SSL_SYMBOL", 
        "STACKED_SYMBOL", "STARTING_SYMBOL", "STARTS_SYMBOL", "START_SYMBOL", 
        "STATS_AUTO_RECALC_SYMBOL", "STATS_PERSISTENT_SYMBOL", "STATS_SAMPLE_PAGES_SYMBOL", 
        "STATUS_SYMBOL", "STDDEV_SAMP_SYMBOL", "STDDEV_SYMBOL", "STDDEV_POP_SYMBOL", 
        "STD_SYMBOL", "STOP_SYMBOL", "STORAGE_SYMBOL", "STORED_SYMBOL", 
        "STRAIGHT_JOIN_SYMBOL", "STRING_SYMBOL", "SUBCLASS_ORIGIN_SYMBOL", 
        "SUBDATE_SYMBOL", "SUBJECT_SYMBOL", "SUBPARTITIONS_SYMBOL", "SUBPARTITION_SYMBOL", 
        "SUBSTR_SYMBOL", "SUBSTRING_SYMBOL", "SUM_SYMBOL", "SUPER_SYMBOL", 
        "SUSPEND_SYMBOL", "SWAPS_SYMBOL", "SWITCHES_SYMBOL", "SYSDATE_SYMBOL", 
        "SYSTEM_USER_SYMBOL", "TABLES_SYMBOL", "TABLESPACE_SYMBOL", "TABLE_SYMBOL", 
        "TABLE_CHECKSUM_SYMBOL", "TABLE_NAME_SYMBOL", "TEMPORARY_SYMBOL", 
        "TEMPTABLE_SYMBOL", "TERMINATED_SYMBOL", "TEXT_SYMBOL", "THAN_SYMBOL", 
        "THEN_SYMBOL", "TIMESTAMP_SYMBOL", "TIMESTAMPADD_SYMBOL", "TIMESTAMPDIFF_SYMBOL", 
        "TIME_SYMBOL", "TINYBLOB_SYMBOL", "TINYINT_SYMBOL", "TINYTEXT_SYMBOL", 
        "TO_SYMBOL", "TRAILING_SYMBOL", "TRANSACTION_SYMBOL", "TRIGGERS_SYMBOL", 
        "TRIGGER_SYMBOL", "TRIM_SYMBOL", "TRUE_SYMBOL", "TRUNCATE_SYMBOL", 
        "TYPES_SYMBOL", "TYPE_SYMBOL", "UDF_RETURNS_SYMBOL", "UNCOMMITTED_SYMBOL", 
        "UNDEFINED_SYMBOL", "UNDOFILE_SYMBOL", "UNDO_BUFFER_SIZE_SYMBOL", 
        "UNDO_SYMBOL", "UNICODE_SYMBOL", "UNINSTALL_SYMBOL", "UNION_SYMBOL", 
        "UNIQUE_SYMBOL", "UNKNOWN_SYMBOL", "UNLOCK_SYMBOL", "UNSIGNED_SYMBOL", 
        "UNTIL_SYMBOL", "UPDATE_SYMBOL", "UPGRADE_SYMBOL", "USAGE_SYMBOL", 
        "USER_RESOURCES_SYMBOL", "USER_SYMBOL", "USE_FRM_SYMBOL", "USE_SYMBOL", 
        "USING_SYMBOL", "UTC_DATE_SYMBOL", "UTC_TIMESTAMP_SYMBOL", "UTC_TIME_SYMBOL", 
        "VALIDATION_SYMBOL", "VALUES_SYMBOL", "VALUE_SYMBOL", "VARBINARY_SYMBOL", 
        "VARCHAR_SYMBOL", "VARIABLES_SYMBOL", "VARIANCE_SYMBOL", "VARYING_SYMBOL", 
        "VAR_POP_SYMBOL", "VAR_SAMP_SYMBOL", "VIEW_SYMBOL", "VIRTUAL_SYMBOL", 
        "WAIT_SYMBOL", "WARNINGS_SYMBOL", "WEEK_SYMBOL", "WEIGHT_STRING_SYMBOL", 
        "WHEN_SYMBOL", "WHERE_SYMBOL", "WHILE_SYMBOL", "WITH_SYMBOL", "WITHOUT_SYMBOL", 
        "WORK_SYMBOL", "WRAPPER_SYMBOL", "WRITE_SYMBOL", "X509_SYMBOL", 
        "XA_SYMBOL", "XID_SYMBOL", "XML_SYMBOL", "XOR_SYMBOL", "YEAR_MONTH_SYMBOL", 
        "YEAR_SYMBOL", "ZEROFILL_SYMBOL", "PERSIST_SYMBOL", "ROLE_SYMBOL", 
        "ADMIN_SYMBOL", "INVISIBLE_SYMBOL", "VISIBLE_SYMBOL", "EXCEPT_SYMBOL", 
        "COMPONENT_SYMBOL", "RECURSIVE_SYMBOL", "JSON_OBJECTAGG_SYMBOL", 
        "JSON_ARRAYAGG_SYMBOL", "OF_SYMBOL", "SKIP_SYMBOL", "LOCKED_SYMBOL", 
        "NOWAIT_SYMBOL", "GROUPING_SYMBOL", "PERSIST_ONLY_SYMBOL", "HISTOGRAM_SYMBOL", 
        "BUCKETS_SYMBOL", "REMOTE_SYMBOL", "CLONE_SYMBOL", "CUME_DIST_SYMBOL", 
        "DENSE_RANK_SYMBOL", "EXCLUDE_SYMBOL", "FIRST_VALUE_SYMBOL", "FOLLOWING_SYMBOL", 
        "GROUPS_SYMBOL", "LAG_SYMBOL", "LAST_VALUE_SYMBOL", "LEAD_SYMBOL", 
        "NTH_VALUE_SYMBOL", "NTILE_SYMBOL", "NULLS_SYMBOL", "OTHERS_SYMBOL", 
        "OVER_SYMBOL", "PERCENT_RANK_SYMBOL", "PRECEDING_SYMBOL", "RANK_SYMBOL", 
        "RESPECT_SYMBOL", "ROW_NUMBER_SYMBOL", "TIES_SYMBOL", "UNBOUNDED_SYMBOL", 
        "WINDOW_SYMBOL", "EMPTY_SYMBOL", "JSON_TABLE_SYMBOL", "NESTED_SYMBOL", 
        "ORDINALITY_SYMBOL", "PATH_SYMBOL", "HISTORY_SYMBOL", "REUSE_SYMBOL", 
        "SRID_SYMBOL", "THREAD_PRIORITY_SYMBOL", "RESOURCE_SYMBOL", "SYSTEM_SYMBOL", 
        "VCPU_SYMBOL", "MASTER_PUBLIC_KEY_PATH_SYMBOL", "GET_MASTER_PUBLIC_KEY_SYMBOL", 
        "RESTART_SYMBOL", "DEFINITION_SYMBOL", "DESCRIPTION_SYMBOL", "ORGANIZATION_SYMBOL", 
        "REFERENCE_SYMBOL", "OPTIONAL_SYMBOL", "SECONDARY_SYMBOL", "SECONDARY_ENGINE_SYMBOL", 
        "SECONDARY_LOAD_SYMBOL", "SECONDARY_UNLOAD_SYMBOL", "ACTIVE_SYMBOL", 
        "INACTIVE_SYMBOL", "LATERAL_SYMBOL", "RETAIN_SYMBOL", "OLD_SYMBOL", 
        "NETWORK_NAMESPACE_SYMBOL", "ENFORCED_SYMBOL", "ARRAY_SYMBOL", "OJ_SYMBOL", 
        "MEMBER_SYMBOL", "RANDOM_SYMBOL", "MASTER_COMPRESSION_ALGORITHM_SYMBOL", 
        "MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL", "PRIVILEGE_CHECKS_USER_SYMBOL", 
        "MASTER_TLS_CIPHERSUITES_SYMBOL", "REQUIRE_ROW_FORMAT_SYMBOL", "PASSWORD_LOCK_TIME_SYMBOL", 
        "FAILED_LOGIN_ATTEMPTS_SYMBOL", "REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL", 
        "STREAM_SYMBOL", "OFF_SYMBOL", "RETURNING_SYMBOL", "JSON_VALUE_SYMBOL", 
        "TLS_SYMBOL", "ATTRIBUTE_SYMBOL", "ENGINE_ATTRIBUTE_SYMBOL", "SECONDARY_ENGINE_ATTRIBUTE_SYMBOL", 
        "SOURCE_CONNECTION_AUTO_FAILOVER_SYMBOL", "ZONE_SYMBOL", "GRAMMAR_SELECTOR_DERIVED_EXPR", 
        "REPLICA_SYMBOL", "REPLICAS_SYMBOL", "ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_SYMBOL", 
        "GET_SOURCE_PUBLIC_KEY_SYMBOL", "SOURCE_AUTO_POSITION_SYMBOL", "SOURCE_BIND_SYMBOL", 
        "SOURCE_COMPRESSION_ALGORITHM_SYMBOL", "SOURCE_CONNECT_RETRY_SYMBOL", 
        "SOURCE_DELAY_SYMBOL", "SOURCE_HEARTBEAT_PERIOD_SYMBOL", "SOURCE_HOST_SYMBOL", 
        "SOURCE_LOG_FILE_SYMBOL", "SOURCE_LOG_POS_SYMBOL", "SOURCE_PASSWORD_SYMBOL", 
        "SOURCE_PORT_SYMBOL", "SOURCE_PUBLIC_KEY_PATH_SYMBOL", "SOURCE_RETRY_COUNT_SYMBOL", 
        "SOURCE_SSL_SYMBOL", "SOURCE_SSL_CA_SYMBOL", "SOURCE_SSL_CAPATH_SYMBOL", 
        "SOURCE_SSL_CERT_SYMBOL", "SOURCE_SSL_CIPHER_SYMBOL", "SOURCE_SSL_CRL_SYMBOL", 
        "SOURCE_SSL_CRLPATH_SYMBOL", "SOURCE_SSL_KEY_SYMBOL", "SOURCE_SSL_VERIFY_SERVER_CERT_SYMBOL", 
        "SOURCE_TLS_CIPHERSUITES_SYMBOL", "SOURCE_TLS_VERSION_SYMBOL", "SOURCE_USER_SYMBOL", 
        "SOURCE_ZSTD_COMPRESSION_LEVEL_SYMBOL", "ST_COLLECT_SYMBOL", "KEYRING_SYMBOL", 
        "AUTHENTICATION_SYMBOL", "FACTOR_SYMBOL", "FINISH_SYMBOL", "INITIATE_SYMBOL", 
        "REGISTRATION_SYMBOL", "UNREGISTER_SYMBOL", "INITIAL_SYMBOL", "CHALLENGE_RESPONSE_SYMBOL", 
        "GTID_ONLY_SYMBOL", "INTERSECT_SYMBOL", "BULK_SYMBOL", "URL_SYMBOL", 
        "GENERATE_SYMBOL", "PARSE_TREE_SYMBOL", "LOG_SYMBOL", "GTIDS_SYMBOL", 
        "PARALLEL_SYMBOL", "S3_SYMBOL", "QUALIFY_SYMBOL", "AUTO_SYMBOL", 
        "MANUAL_SYMBOL", "BERNOULLI_SYMBOL", "TABLESAMPLE_SYMBOL", "WHITESPACE", 
        "INVALID_INPUT", "UNDERSCORE_CHARSET", "IDENTIFIER", "NCHAR_TEXT", 
        "BACK_TICK_QUOTED_ID", "DOUBLE_QUOTED_TEXT", "SINGLE_QUOTED_TEXT", 
        "DOLLAR_QUOTED_STRING_TEXT", "VERSION_COMMENT_START", "MYSQL_COMMENT_START", 
        "VERSION_COMMENT_END", "BLOCK_COMMENT", "INVALID_BLOCK_COMMENT", 
        "POUND_COMMENT", "DASHDASH_COMMENT", "NOT_EQUAL2_OPERATOR"
    ];
    public static readonly ruleNames = [
        "query", "simpleStatement", "alterStatement", "alterDatabase", "alterDatabaseOption", 
        "alterEvent", "alterLogfileGroup", "alterLogfileGroupOptions", "alterLogfileGroupOption", 
        "alterServer", "alterTable", "alterTableActions", "alterCommandList", 
        "alterCommandsModifierList", "standaloneAlterCommands", "alterPartition", 
        "alterList", "alterCommandsModifier", "alterListItem", "place", 
        "restrict", "alterOrderList", "alterAlgorithmOption", "alterLockOption", 
        "indexLockAndAlgorithm", "withValidation", "removePartitioning", 
        "allOrPartitionNameList", "alterTablespace", "alterUndoTablespace", 
        "undoTableSpaceOptions", "undoTableSpaceOption", "alterTablespaceOptions", 
        "alterTablespaceOption", "changeTablespaceOption", "alterView", 
        "viewTail", "viewQueryBlock", "viewCheckOption", "alterInstanceStatement", 
        "createStatement", "createDatabase", "createDatabaseOption", "createTable", 
        "tableElementList", "tableElement", "duplicateAsQe", "asCreateQueryExpression", 
        "queryExpressionOrParens", "queryExpressionWithOptLockingClauses", 
        "createRoutine", "createProcedure", "routineString", "storedRoutineBody", 
        "createFunction", "createUdf", "routineCreateOption", "routineAlterOptions", 
        "routineOption", "createIndex", "indexNameAndType", "createIndexTarget", 
        "createLogfileGroup", "logfileGroupOptions", "logfileGroupOption", 
        "createServer", "serverOptions", "serverOption", "createTablespace", 
        "createUndoTablespace", "tsDataFileName", "tsDataFile", "tablespaceOptions", 
        "tablespaceOption", "tsOptionInitialSize", "tsOptionUndoRedoBufferSize", 
        "tsOptionAutoextendSize", "tsOptionMaxSize", "tsOptionExtentSize", 
        "tsOptionNodegroup", "tsOptionEngine", "tsOptionWait", "tsOptionComment", 
        "tsOptionFileblockSize", "tsOptionEncryption", "tsOptionEngineAttribute", 
        "createView", "viewReplaceOrAlgorithm", "viewAlgorithm", "viewSuid", 
        "createTrigger", "triggerFollowsPrecedesClause", "createEvent", 
        "createRole", "createSpatialReference", "srsAttribute", "dropStatement", 
        "dropDatabase", "dropEvent", "dropFunction", "dropProcedure", "dropIndex", 
        "dropLogfileGroup", "dropLogfileGroupOption", "dropServer", "dropTable", 
        "dropTableSpace", "dropTrigger", "dropView", "dropRole", "dropSpatialReference", 
        "dropUndoTablespace", "renameTableStatement", "renamePair", "truncateTableStatement", 
        "importStatement", "callStatement", "deleteStatement", "partitionDelete", 
        "deleteStatementOption", "doStatement", "handlerStatement", "handlerReadOrScan", 
        "insertStatement", "insertLockOption", "insertFromConstructor", 
        "fields", "insertValues", "insertQueryExpression", "valueList", 
        "values", "valuesReference", "insertUpdateList", "loadStatement", 
        "dataOrXml", "loadDataLock", "loadFrom", "loadSourceType", "sourceCount", 
        "sourceOrder", "xmlRowsIdentifiedBy", "loadDataFileTail", "loadDataFileTargetList", 
        "fieldOrVariableList", "loadAlgorithm", "loadParallel", "loadMemory", 
        "replaceStatement", "selectStatement", "selectStatementWithInto", 
        "queryExpression", "queryExpressionBody", "queryExpressionParens", 
        "queryPrimary", "querySpecification", "subquery", "querySpecOption", 
        "limitClause", "simpleLimitClause", "limitOptions", "limitOption", 
        "intoClause", "procedureAnalyseClause", "havingClause", "qualifyClause", 
        "windowClause", "windowDefinition", "windowSpec", "windowSpecDetails", 
        "windowFrameClause", "windowFrameUnits", "windowFrameExtent", "windowFrameStart", 
        "windowFrameBetween", "windowFrameBound", "windowFrameExclusion", 
        "withClause", "commonTableExpression", "groupByClause", "olapOption", 
        "orderClause", "direction", "fromClause", "tableReferenceList", 
        "tableValueConstructor", "explicitTable", "rowValueExplicit", "selectOption", 
        "lockingClauseList", "lockingClause", "lockStrengh", "lockedRowAction", 
        "selectItemList", "selectItem", "selectAlias", "whereClause", "tableReference", 
        "escapedTableReference", "joinedTable", "naturalJoinType", "innerJoinType", 
        "outerJoinType", "tableFactor", "singleTable", "singleTableParens", 
        "derivedTable", "tableReferenceListParens", "tableFunction", "columnsClause", 
        "jtColumn", "onEmptyOrError", "onEmptyOrErrorJsonTable", "onEmpty", 
        "onError", "jsonOnResponse", "unionOption", "tableAlias", "indexHintList", 
        "indexHint", "indexHintType", "keyOrIndex", "constraintKeyType", 
        "indexHintClause", "indexList", "indexListElement", "updateStatement", 
        "transactionOrLockingStatement", "transactionStatement", "beginWork", 
        "startTransactionOptionList", "savepointStatement", "lockStatement", 
        "lockItem", "lockOption", "xaStatement", "xaConvert", "xid", "replicationStatement", 
        "purgeOptions", "resetOption", "masterOrBinaryLogsAndGtids", "sourceResetOptions", 
        "replicationLoad", "changeReplicationSource", "changeSource", "sourceDefinitions", 
        "sourceDefinition", "changeReplicationSourceAutoPosition", "changeReplicationSourceHost", 
        "changeReplicationSourceBind", "changeReplicationSourceUser", "changeReplicationSourcePassword", 
        "changeReplicationSourcePort", "changeReplicationSourceConnectRetry", 
        "changeReplicationSourceRetryCount", "changeReplicationSourceDelay", 
        "changeReplicationSourceSSL", "changeReplicationSourceSSLCA", "changeReplicationSourceSSLCApath", 
        "changeReplicationSourceSSLCipher", "changeReplicationSourceSSLCLR", 
        "changeReplicationSourceSSLCLRpath", "changeReplicationSourceSSLKey", 
        "changeReplicationSourceSSLVerifyServerCert", "changeReplicationSourceTLSVersion", 
        "changeReplicationSourceTLSCiphersuites", "changeReplicationSourceSSLCert", 
        "changeReplicationSourcePublicKey", "changeReplicationSourceGetSourcePublicKey", 
        "changeReplicationSourceHeartbeatPeriod", "changeReplicationSourceCompressionAlgorithm", 
        "changeReplicationSourceZstdCompressionLevel", "privilegeCheckDef", 
        "tablePrimaryKeyCheckDef", "assignGtidsToAnonymousTransactionsDefinition", 
        "sourceTlsCiphersuitesDef", "sourceFileDef", "sourceLogFile", "sourceLogPos", 
        "serverIdList", "changeReplication", "filterDefinition", "filterDbList", 
        "filterTableList", "filterStringList", "filterWildDbTableString", 
        "filterDbPairList", "startReplicaStatement", "stopReplicaStatement", 
        "replicaUntil", "userOption", "passwordOption", "defaultAuthOption", 
        "pluginDirOption", "replicaThreadOptions", "replicaThreadOption", 
        "groupReplication", "groupReplicationStartOptions", "groupReplicationStartOption", 
        "groupReplicationUser", "groupReplicationPassword", "groupReplicationPluginAuth", 
        "replica", "preparedStatement", "executeStatement", "executeVarList", 
        "cloneStatement", "dataDirSSL", "ssl", "accountManagementStatement", 
        "alterUserStatement", "alterUserList", "alterUser", "oldAlterUser", 
        "userFunction", "createUserStatement", "createUserTail", "userAttributes", 
        "defaultRoleClause", "requireClause", "connectOptions", "accountLockPasswordExpireOptions", 
        "userAttribute", "dropUserStatement", "grantStatement", "grantTargetList", 
        "grantOptions", "exceptRoleList", "withRoles", "grantAs", "versionedRequireClause", 
        "renameUserStatement", "revokeStatement", "aclType", "roleOrPrivilegesList", 
        "roleOrPrivilege", "grantIdentifier", "requireList", "requireListElement", 
        "grantOption", "setRoleStatement", "roleList", "role", "tableAdministrationStatement", 
        "histogramAutoUpdate", "histogramUpdateParam", "histogramNumBuckets", 
        "histogram", "checkOption", "repairType", "uninstallStatement", 
        "installStatement", "installOptionType", "installSetRvalue", "installSetValue", 
        "installSetValueList", "setStatement", "startOptionValueList", "transactionCharacteristics", 
        "transactionAccessMode", "isolationLevel", "optionValueListContinued", 
        "optionValueNoOptionType", "optionValue", "setSystemVariable", "startOptionValueListFollowingOptionType", 
        "optionValueFollowingOptionType", "setExprOrDefault", "showDatabasesStatement", 
        "showTablesStatement", "showTriggersStatement", "showEventsStatement", 
        "showTableStatusStatement", "showOpenTablesStatement", "showParseTreeStatement", 
        "showPluginsStatement", "showEngineLogsStatement", "showEngineMutexStatement", 
        "showEngineStatusStatement", "showColumnsStatement", "showBinaryLogsStatement", 
        "showBinaryLogStatusStatement", "showReplicasStatement", "showBinlogEventsStatement", 
        "showRelaylogEventsStatement", "showKeysStatement", "showEnginesStatement", 
        "showCountWarningsStatement", "showCountErrorsStatement", "showWarningsStatement", 
        "showErrorsStatement", "showProfilesStatement", "showProfileStatement", 
        "showStatusStatement", "showProcessListStatement", "showVariablesStatement", 
        "showCharacterSetStatement", "showCollationStatement", "showPrivilegesStatement", 
        "showGrantsStatement", "showCreateDatabaseStatement", "showCreateTableStatement", 
        "showCreateViewStatement", "showMasterStatusStatement", "showReplicaStatusStatement", 
        "showCreateProcedureStatement", "showCreateFunctionStatement", "showCreateTriggerStatement", 
        "showCreateProcedureStatusStatement", "showCreateFunctionStatusStatement", 
        "showCreateProcedureCodeStatement", "showCreateFunctionCodeStatement", 
        "showCreateEventStatement", "showCreateUserStatement", "showCommandType", 
        "engineOrAll", "fromOrIn", "inDb", "profileDefinitions", "profileDefinition", 
        "otherAdministrativeStatement", "keyCacheListOrParts", "keyCacheList", 
        "assignToKeycache", "assignToKeycachePartition", "cacheKeyList", 
        "keyUsageElement", "keyUsageList", "flushOption", "logType", "flushTables", 
        "flushTablesOptions", "preloadTail", "preloadList", "preloadKeys", 
        "adminPartition", "resourceGroupManagement", "createResourceGroup", 
        "resourceGroupVcpuList", "vcpuNumOrRange", "resourceGroupPriority", 
        "resourceGroupEnableDisable", "alterResourceGroup", "setResourceGroup", 
        "threadIdList", "dropResourceGroup", "utilityStatement", "describeStatement", 
        "explainStatement", "explainOptions", "explainableStatement", "explainInto", 
        "helpCommand", "useCommand", "restartServer", "expr", "boolPri", 
        "compOp", "predicate", "predicateOperations", "bitExpr", "simpleExpr", 
        "arrayCast", "jsonOperator", "sumExpr", "groupingOperation", "windowFunctionCall", 
        "samplingMethod", "samplingPercentage", "tablesampleClause", "windowingClause", 
        "leadLagInfo", "stableInteger", "paramOrVar", "nullTreatment", "jsonFunction", 
        "inSumExpr", "identListArg", "identList", "fulltextOptions", "runtimeFunctionCall", 
        "returningType", "geometryFunction", "timeFunctionParameters", "fractionalPrecision", 
        "weightStringLevels", "weightStringLevelListItem", "dateTimeTtype", 
        "trimFunction", "substringFunction", "functionCall", "udfExprList", 
        "udfExpr", "userVariable", "inExpressionUserVariableAssignment", 
        "rvalueSystemOrUserVariable", "lvalueVariable", "rvalueSystemVariable", 
        "whenExpression", "thenExpression", "elseExpression", "castType", 
        "exprList", "charset", "notRule", "not2Rule", "interval", "intervalTimeStamp", 
        "exprListWithParentheses", "exprWithParentheses", "simpleExprWithParentheses", 
        "orderList", "orderExpression", "groupList", "groupingExpression", 
        "channel", "compoundStatement", "returnStatement", "ifStatement", 
        "ifBody", "thenStatement", "compoundStatementList", "caseStatement", 
        "elseStatement", "labeledBlock", "unlabeledBlock", "label", "beginEndBlock", 
        "labeledControl", "unlabeledControl", "loopBlock", "whileDoBlock", 
        "repeatUntilBlock", "spDeclarations", "spDeclaration", "variableDeclaration", 
        "conditionDeclaration", "spCondition", "sqlstate", "handlerDeclaration", 
        "handlerCondition", "cursorDeclaration", "iterateStatement", "leaveStatement", 
        "getDiagnosticsStatement", "signalAllowedExpr", "statementInformationItem", 
        "conditionInformationItem", "signalInformationItemName", "signalStatement", 
        "resignalStatement", "signalInformationItem", "cursorOpen", "cursorClose", 
        "cursorFetch", "schedule", "columnDefinition", "checkOrReferences", 
        "checkConstraint", "constraintEnforcement", "tableConstraintDef", 
        "constraintName", "fieldDefinition", "columnAttribute", "columnFormat", 
        "storageMedia", "now", "nowOrSignedLiteral", "gcolAttribute", "references", 
        "deleteOption", "keyList", "keyPart", "keyListWithExpression", "keyPartOrExpression", 
        "indexType", "indexOption", "commonIndexOption", "visibility", "indexTypeClause", 
        "fulltextIndexOption", "spatialIndexOption", "dataTypeDefinition", 
        "dataType", "nchar", "realType", "fieldLength", "fieldOptions", 
        "charsetWithOptBinary", "ascii", "unicode", "wsNumCodepoints", "typeDatetimePrecision", 
        "functionDatetimePrecision", "charsetName", "collationName", "createTableOptions", 
        "createTableOptionsEtc", "createPartitioningEtc", "createTableOptionsSpaceSeparated", 
        "createTableOption", "ternaryOption", "defaultCollation", "defaultEncryption", 
        "defaultCharset", "partitionClause", "partitionTypeDef", "subPartitions", 
        "partitionKeyAlgorithm", "partitionDefinitions", "partitionDefinition", 
        "partitionValuesIn", "partitionOption", "subpartitionDefinition", 
        "partitionValueItemListParen", "partitionValueItem", "definerClause", 
        "ifExists", "ifExistsIdentifier", "persistedVariableIdentifier", 
        "ifNotExists", "ignoreUnknownUser", "procedureParameter", "functionParameter", 
        "collate", "typeWithOptCollate", "schemaIdentifierPair", "viewRefList", 
        "updateList", "updateElement", "charsetClause", "fieldsClause", 
        "fieldTerm", "linesClause", "lineTerm", "userList", "createUserList", 
        "createUser", "createUserWithMfa", "identification", "identifiedByPassword", 
        "identifiedByRandomPassword", "identifiedWithPlugin", "identifiedWithPluginAsAuth", 
        "identifiedWithPluginByPassword", "identifiedWithPluginByRandomPassword", 
        "initialAuth", "retainCurrentPassword", "discardOldPassword", "userRegistration", 
        "factor", "replacePassword", "userIdentifierOrText", "user", "likeClause", 
        "likeOrWhere", "onlineOption", "noWriteToBinLog", "usePartition", 
        "fieldIdentifier", "columnName", "columnInternalRef", "columnInternalRefList", 
        "columnRef", "insertIdentifier", "indexName", "indexRef", "tableWild", 
        "schemaName", "schemaRef", "procedureName", "procedureRef", "functionName", 
        "functionRef", "triggerName", "triggerRef", "viewName", "viewRef", 
        "tablespaceName", "tablespaceRef", "logfileGroupName", "logfileGroupRef", 
        "eventName", "eventRef", "udfName", "serverName", "serverRef", "engineRef", 
        "tableName", "filterTableRef", "tableRefWithWildcard", "tableRef", 
        "tableRefList", "tableAliasRefList", "parameterName", "labelIdentifier", 
        "labelRef", "roleIdentifier", "pluginRef", "componentRef", "resourceGroupRef", 
        "windowName", "pureIdentifier", "identifier", "identifierList", 
        "identifierListWithParentheses", "qualifiedIdentifier", "simpleIdentifier", 
        "dotIdentifier", "ulong_number", "real_ulong_number", "ulonglongNumber", 
        "real_ulonglong_number", "signedLiteral", "signedLiteralOrNull", 
        "literal", "literalOrNull", "nullAsLiteral", "stringList", "textStringLiteral", 
        "textString", "textStringHash", "textLiteral", "textStringNoLinebreak", 
        "textStringLiteralList", "numLiteral", "boolLiteral", "nullLiteral", 
        "int64Literal", "temporalLiteral", "floatOptions", "standardFloatOptions", 
        "precision", "textOrIdentifier", "lValueIdentifier", "roleIdentifierOrText", 
        "sizeNumber", "parentheses", "equal", "optionType", "rvalueSystemVariableType", 
        "setVarIdentType", "jsonAttribute", "identifierKeyword", "identifierKeywordsAmbiguous1RolesAndLabels", 
        "identifierKeywordsAmbiguous2Labels", "labelKeyword", "identifierKeywordsAmbiguous3Roles", 
        "identifierKeywordsUnambiguous", "roleKeyword", "lValueKeyword", 
        "identifierKeywordsAmbiguous4SystemVariables", "roleOrIdentifierKeyword", 
        "roleOrLabelKeyword",
    ];

    public get grammarFileName(): string { return "MySQLParser.g4"; }
    public get literalNames(): (string | null)[] { return MySQLParser.literalNames; }
    public get symbolicNames(): (string | null)[] { return MySQLParser.symbolicNames; }
    public get ruleNames(): string[] { return MySQLParser.ruleNames; }
    public get serializedATN(): number[] { return MySQLParser._serializedATN; }

    protected createFailedPredicateException(predicate?: string, message?: string): antlr.FailedPredicateException {
        return new antlr.FailedPredicateException(this, predicate, message);
    }

    public constructor(input: antlr.TokenStream) {
        super(input);
        this.interpreter = new antlr.ParserATNSimulator(this, MySQLParser._ATN, MySQLParser.decisionsToDFA, new antlr.PredictionContextCache());
    }
    public query(): QueryContext {
        let localContext = new QueryContext(this.context, this.state);
        this.enterRule(localContext, 0, MySQLParser.RULE_query);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1515;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 2, this.context) ) {
            case 1:
                {
                this.state = 1510;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 0, this.context) ) {
                case 1:
                    {
                    this.state = 1508;
                    this.simpleStatement();
                    }
                    break;
                case 2:
                    {
                    this.state = 1509;
                    this.beginWork();
                    }
                    break;
                }
                this.state = 1513;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 30) {
                    {
                    this.state = 1512;
                    this.match(MySQLParser.SEMICOLON_SYMBOL);
                    }
                }

                }
                break;
            }
            this.state = 1517;
            this.match(MySQLParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simpleStatement(): SimpleStatementContext {
        let localContext = new SimpleStatementContext(this.context, this.state);
        this.enterRule(localContext, 2, MySQLParser.RULE_simpleStatement);
        try {
            this.state = 1595;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 3, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1519;
                this.alterStatement();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1520;
                this.createStatement();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1521;
                this.dropStatement();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1522;
                this.renameTableStatement();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1523;
                this.truncateTableStatement();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1524;
                this.importStatement();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1525;
                this.callStatement();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1526;
                this.deleteStatement();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1527;
                this.doStatement();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 1528;
                this.handlerStatement();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 1529;
                this.insertStatement();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 1530;
                this.loadStatement();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 1531;
                this.replaceStatement();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 1532;
                this.selectStatement();
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 1533;
                this.updateStatement();
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 1534;
                this.transactionOrLockingStatement();
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 1535;
                this.replicationStatement();
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 1536;
                this.preparedStatement();
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 1537;
                this.cloneStatement();
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 1538;
                this.accountManagementStatement();
                }
                break;
            case 21:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 1539;
                this.tableAdministrationStatement();
                }
                break;
            case 22:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 1540;
                this.uninstallStatement();
                }
                break;
            case 23:
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 1541;
                this.installStatement();
                }
                break;
            case 24:
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 1542;
                this.setStatement();
                }
                break;
            case 25:
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 1543;
                this.showDatabasesStatement();
                }
                break;
            case 26:
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 1544;
                this.showTablesStatement();
                }
                break;
            case 27:
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 1545;
                this.showTriggersStatement();
                }
                break;
            case 28:
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 1546;
                this.showEventsStatement();
                }
                break;
            case 29:
                this.enterOuterAlt(localContext, 29);
                {
                this.state = 1547;
                this.showTableStatusStatement();
                }
                break;
            case 30:
                this.enterOuterAlt(localContext, 30);
                {
                this.state = 1548;
                this.showOpenTablesStatement();
                }
                break;
            case 31:
                this.enterOuterAlt(localContext, 31);
                {
                this.state = 1549;
                this.showParseTreeStatement();
                }
                break;
            case 32:
                this.enterOuterAlt(localContext, 32);
                {
                this.state = 1550;
                this.showPluginsStatement();
                }
                break;
            case 33:
                this.enterOuterAlt(localContext, 33);
                {
                this.state = 1551;
                this.showEngineLogsStatement();
                }
                break;
            case 34:
                this.enterOuterAlt(localContext, 34);
                {
                this.state = 1552;
                this.showEngineMutexStatement();
                }
                break;
            case 35:
                this.enterOuterAlt(localContext, 35);
                {
                this.state = 1553;
                this.showEngineStatusStatement();
                }
                break;
            case 36:
                this.enterOuterAlt(localContext, 36);
                {
                this.state = 1554;
                this.showColumnsStatement();
                }
                break;
            case 37:
                this.enterOuterAlt(localContext, 37);
                {
                this.state = 1555;
                this.showBinaryLogsStatement();
                }
                break;
            case 38:
                this.enterOuterAlt(localContext, 38);
                {
                this.state = 1556;
                this.showBinaryLogStatusStatement();
                }
                break;
            case 39:
                this.enterOuterAlt(localContext, 39);
                {
                this.state = 1557;
                this.showReplicasStatement();
                }
                break;
            case 40:
                this.enterOuterAlt(localContext, 40);
                {
                this.state = 1558;
                this.showBinlogEventsStatement();
                }
                break;
            case 41:
                this.enterOuterAlt(localContext, 41);
                {
                this.state = 1559;
                this.showRelaylogEventsStatement();
                }
                break;
            case 42:
                this.enterOuterAlt(localContext, 42);
                {
                this.state = 1560;
                this.showKeysStatement();
                }
                break;
            case 43:
                this.enterOuterAlt(localContext, 43);
                {
                this.state = 1561;
                this.showEnginesStatement();
                }
                break;
            case 44:
                this.enterOuterAlt(localContext, 44);
                {
                this.state = 1562;
                this.showCountWarningsStatement();
                }
                break;
            case 45:
                this.enterOuterAlt(localContext, 45);
                {
                this.state = 1563;
                this.showCountErrorsStatement();
                }
                break;
            case 46:
                this.enterOuterAlt(localContext, 46);
                {
                this.state = 1564;
                this.showWarningsStatement();
                }
                break;
            case 47:
                this.enterOuterAlt(localContext, 47);
                {
                this.state = 1565;
                this.showErrorsStatement();
                }
                break;
            case 48:
                this.enterOuterAlt(localContext, 48);
                {
                this.state = 1566;
                this.showProfilesStatement();
                }
                break;
            case 49:
                this.enterOuterAlt(localContext, 49);
                {
                this.state = 1567;
                this.showProfileStatement();
                }
                break;
            case 50:
                this.enterOuterAlt(localContext, 50);
                {
                this.state = 1568;
                this.showStatusStatement();
                }
                break;
            case 51:
                this.enterOuterAlt(localContext, 51);
                {
                this.state = 1569;
                this.showProcessListStatement();
                }
                break;
            case 52:
                this.enterOuterAlt(localContext, 52);
                {
                this.state = 1570;
                this.showVariablesStatement();
                }
                break;
            case 53:
                this.enterOuterAlt(localContext, 53);
                {
                this.state = 1571;
                this.showCharacterSetStatement();
                }
                break;
            case 54:
                this.enterOuterAlt(localContext, 54);
                {
                this.state = 1572;
                this.showCollationStatement();
                }
                break;
            case 55:
                this.enterOuterAlt(localContext, 55);
                {
                this.state = 1573;
                this.showPrivilegesStatement();
                }
                break;
            case 56:
                this.enterOuterAlt(localContext, 56);
                {
                this.state = 1574;
                this.showGrantsStatement();
                }
                break;
            case 57:
                this.enterOuterAlt(localContext, 57);
                {
                this.state = 1575;
                this.showCreateDatabaseStatement();
                }
                break;
            case 58:
                this.enterOuterAlt(localContext, 58);
                {
                this.state = 1576;
                this.showCreateTableStatement();
                }
                break;
            case 59:
                this.enterOuterAlt(localContext, 59);
                {
                this.state = 1577;
                this.showCreateViewStatement();
                }
                break;
            case 60:
                this.enterOuterAlt(localContext, 60);
                {
                this.state = 1578;
                this.showMasterStatusStatement();
                }
                break;
            case 61:
                this.enterOuterAlt(localContext, 61);
                {
                this.state = 1579;
                this.showReplicaStatusStatement();
                }
                break;
            case 62:
                this.enterOuterAlt(localContext, 62);
                {
                this.state = 1580;
                this.showCreateProcedureStatement();
                }
                break;
            case 63:
                this.enterOuterAlt(localContext, 63);
                {
                this.state = 1581;
                this.showCreateFunctionStatement();
                }
                break;
            case 64:
                this.enterOuterAlt(localContext, 64);
                {
                this.state = 1582;
                this.showCreateTriggerStatement();
                }
                break;
            case 65:
                this.enterOuterAlt(localContext, 65);
                {
                this.state = 1583;
                this.showCreateProcedureStatusStatement();
                }
                break;
            case 66:
                this.enterOuterAlt(localContext, 66);
                {
                this.state = 1584;
                this.showCreateFunctionStatusStatement();
                }
                break;
            case 67:
                this.enterOuterAlt(localContext, 67);
                {
                this.state = 1585;
                this.showCreateProcedureCodeStatement();
                }
                break;
            case 68:
                this.enterOuterAlt(localContext, 68);
                {
                this.state = 1586;
                this.showCreateFunctionCodeStatement();
                }
                break;
            case 69:
                this.enterOuterAlt(localContext, 69);
                {
                this.state = 1587;
                this.showCreateEventStatement();
                }
                break;
            case 70:
                this.enterOuterAlt(localContext, 70);
                {
                this.state = 1588;
                this.showCreateUserStatement();
                }
                break;
            case 71:
                this.enterOuterAlt(localContext, 71);
                {
                this.state = 1589;
                this.resourceGroupManagement();
                }
                break;
            case 72:
                this.enterOuterAlt(localContext, 72);
                {
                this.state = 1590;
                this.otherAdministrativeStatement();
                }
                break;
            case 73:
                this.enterOuterAlt(localContext, 73);
                {
                this.state = 1591;
                this.utilityStatement();
                }
                break;
            case 74:
                this.enterOuterAlt(localContext, 74);
                {
                this.state = 1592;
                this.getDiagnosticsStatement();
                }
                break;
            case 75:
                this.enterOuterAlt(localContext, 75);
                {
                this.state = 1593;
                this.signalStatement();
                }
                break;
            case 76:
                this.enterOuterAlt(localContext, 76);
                {
                this.state = 1594;
                this.resignalStatement();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterStatement(): AlterStatementContext {
        let localContext = new AlterStatementContext(this.context, this.state);
        this.enterRule(localContext, 4, MySQLParser.RULE_alterStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1597;
            this.match(MySQLParser.ALTER_SYMBOL);
            this.state = 1618;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 6, this.context) ) {
            case 1:
                {
                this.state = 1598;
                this.alterTable();
                }
                break;
            case 2:
                {
                this.state = 1599;
                this.alterDatabase();
                }
                break;
            case 3:
                {
                this.state = 1600;
                this.match(MySQLParser.PROCEDURE_SYMBOL);
                this.state = 1601;
                this.procedureRef();
                this.state = 1603;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 118 || _la === 133 || _la === 174 || _la === 297 || ((((_la - 370)) & ~0x1F) === 0 && ((1 << (_la - 370)) & 5242881) !== 0) || _la === 451 || _la === 547) {
                    {
                    this.state = 1602;
                    this.routineAlterOptions();
                    }
                }

                }
                break;
            case 4:
                {
                this.state = 1605;
                this.match(MySQLParser.FUNCTION_SYMBOL);
                this.state = 1606;
                this.functionRef();
                this.state = 1608;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 118 || _la === 133 || _la === 174 || _la === 297 || ((((_la - 370)) & ~0x1F) === 0 && ((1 << (_la - 370)) & 5242881) !== 0) || _la === 451 || _la === 547) {
                    {
                    this.state = 1607;
                    this.routineAlterOptions();
                    }
                }

                }
                break;
            case 5:
                {
                this.state = 1610;
                this.alterView();
                }
                break;
            case 6:
                {
                this.state = 1611;
                this.alterEvent();
                }
                break;
            case 7:
                {
                this.state = 1612;
                this.alterTablespace();
                }
                break;
            case 8:
                {
                this.state = 1613;
                if (!(this.serverVersion >= 80014)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80014");
                }
                this.state = 1614;
                this.alterUndoTablespace();
                }
                break;
            case 9:
                {
                this.state = 1615;
                this.alterLogfileGroup();
                }
                break;
            case 10:
                {
                this.state = 1616;
                this.alterServer();
                }
                break;
            case 11:
                {
                this.state = 1617;
                this.alterInstanceStatement();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterDatabase(): AlterDatabaseContext {
        let localContext = new AlterDatabaseContext(this.context, this.state);
        this.enterRule(localContext, 6, MySQLParser.RULE_alterDatabase);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1620;
            this.match(MySQLParser.DATABASE_SYMBOL);
            this.state = 1621;
            this.schemaRef();
            this.state = 1623;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    {
                    this.state = 1622;
                    this.alterDatabaseOption();
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 1625;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 7, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterDatabaseOption(): AlterDatabaseOptionContext {
        let localContext = new AlterDatabaseOptionContext(this.context, this.state);
        this.enterRule(localContext, 8, MySQLParser.RULE_alterDatabaseOption);
        let _la: number;
        try {
            this.state = 1634;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 9, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1627;
                this.createDatabaseOption();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1628;
                this.match(MySQLParser.READ_SYMBOL);
                this.state = 1629;
                this.match(MySQLParser.ONLY_SYMBOL);
                this.state = 1631;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 6) {
                    {
                    this.state = 1630;
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                }

                this.state = 1633;
                this.ternaryOption();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterEvent(): AlterEventContext {
        let localContext = new AlterEventContext(this.context, this.state);
        this.enterRule(localContext, 10, MySQLParser.RULE_alterEvent);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1637;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 168) {
                {
                this.state = 1636;
                this.definerClause();
                }
            }

            this.state = 1639;
            this.match(MySQLParser.EVENT_SYMBOL);
            this.state = 1640;
            this.eventRef();
            this.state = 1644;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 11, this.context) ) {
            case 1:
                {
                this.state = 1641;
                this.match(MySQLParser.ON_SYMBOL);
                this.state = 1642;
                this.match(MySQLParser.SCHEDULE_SYMBOL);
                this.state = 1643;
                this.schedule();
                }
                break;
            }
            this.state = 1652;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 401) {
                {
                this.state = 1646;
                this.match(MySQLParser.ON_SYMBOL);
                this.state = 1647;
                this.match(MySQLParser.COMPLETION_SYMBOL);
                this.state = 1649;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 390) {
                    {
                    this.state = 1648;
                    this.match(MySQLParser.NOT_SYMBOL);
                    }
                }

                this.state = 1651;
                this.match(MySQLParser.PRESERVE_SYMBOL);
                }
            }

            this.state = 1657;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 470) {
                {
                this.state = 1654;
                this.match(MySQLParser.RENAME_SYMBOL);
                this.state = 1655;
                this.match(MySQLParser.TO_SYMBOL);
                this.state = 1656;
                this.identifier();
                }
            }

            this.state = 1665;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.ENABLE_SYMBOL:
                {
                this.state = 1659;
                this.match(MySQLParser.ENABLE_SYMBOL);
                }
                break;
            case MySQLParser.DISABLE_SYMBOL:
                {
                this.state = 1660;
                this.match(MySQLParser.DISABLE_SYMBOL);
                this.state = 1663;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 401) {
                    {
                    this.state = 1661;
                    this.match(MySQLParser.ON_SYMBOL);
                    this.state = 1662;
                    this.replica();
                    }
                }

                }
                break;
            case MySQLParser.EOF:
            case MySQLParser.SEMICOLON_SYMBOL:
            case MySQLParser.COMMENT_SYMBOL:
            case MySQLParser.DO_SYMBOL:
                break;
            default:
                break;
            }
            this.state = 1669;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 118) {
                {
                this.state = 1667;
                this.match(MySQLParser.COMMENT_SYMBOL);
                this.state = 1668;
                this.textLiteral();
                }
            }

            this.state = 1673;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 183) {
                {
                this.state = 1671;
                this.match(MySQLParser.DO_SYMBOL);
                this.state = 1672;
                this.compoundStatement();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterLogfileGroup(): AlterLogfileGroupContext {
        let localContext = new AlterLogfileGroupContext(this.context, this.state);
        this.enterRule(localContext, 12, MySQLParser.RULE_alterLogfileGroup);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1675;
            this.match(MySQLParser.LOGFILE_SYMBOL);
            this.state = 1676;
            this.match(MySQLParser.GROUP_SYMBOL);
            this.state = 1677;
            this.logfileGroupRef();
            this.state = 1678;
            this.match(MySQLParser.ADD_SYMBOL);
            this.state = 1679;
            this.match(MySQLParser.UNDOFILE_SYMBOL);
            this.state = 1680;
            this.textLiteral();
            this.state = 1682;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 198 || _la === 270 || _la === 393 || _la === 563 || _la === 646) {
                {
                this.state = 1681;
                this.alterLogfileGroupOptions();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterLogfileGroupOptions(): AlterLogfileGroupOptionsContext {
        let localContext = new AlterLogfileGroupOptionsContext(this.context, this.state);
        this.enterRule(localContext, 14, MySQLParser.RULE_alterLogfileGroupOptions);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1684;
            this.alterLogfileGroupOption();
            this.state = 1691;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 29 || _la === 198 || _la === 270 || _la === 393 || _la === 563 || _la === 646) {
                {
                {
                this.state = 1686;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 29) {
                    {
                    this.state = 1685;
                    this.match(MySQLParser.COMMA_SYMBOL);
                    }
                }

                this.state = 1688;
                this.alterLogfileGroupOption();
                }
                }
                this.state = 1693;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterLogfileGroupOption(): AlterLogfileGroupOptionContext {
        let localContext = new AlterLogfileGroupOptionContext(this.context, this.state);
        this.enterRule(localContext, 16, MySQLParser.RULE_alterLogfileGroupOption);
        try {
            this.state = 1697;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.INITIAL_SIZE_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1694;
                this.tsOptionInitialSize();
                }
                break;
            case MySQLParser.ENGINE_SYMBOL:
            case MySQLParser.STORAGE_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1695;
                this.tsOptionEngine();
                }
                break;
            case MySQLParser.NO_WAIT_SYMBOL:
            case MySQLParser.WAIT_SYMBOL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1696;
                this.tsOptionWait();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterServer(): AlterServerContext {
        let localContext = new AlterServerContext(this.context, this.state);
        this.enterRule(localContext, 18, MySQLParser.RULE_alterServer);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1699;
            this.match(MySQLParser.SERVER_SYMBOL);
            this.state = 1700;
            this.serverRef();
            this.state = 1701;
            this.serverOptions();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterTable(): AlterTableContext {
        let localContext = new AlterTableContext(this.context, this.state);
        this.enterRule(localContext, 20, MySQLParser.RULE_alterTable);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1704;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 399 || _la === 403) {
                {
                this.state = 1703;
                this.onlineOption();
                }
            }

            this.state = 1706;
            this.match(MySQLParser.TABLE_SYMBOL);
            this.state = 1707;
            this.tableRef();
            this.state = 1709;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 24, this.context) ) {
            case 1:
                {
                this.state = 1708;
                this.alterTableActions();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterTableActions(): AlterTableActionsContext {
        let localContext = new AlterTableActionsContext(this.context, this.state);
        this.enterRule(localContext, 22, MySQLParser.RULE_alterTableActions);
        try {
            this.state = 1724;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 27, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1711;
                this.alterCommandList();
                this.state = 1714;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySQLParser.PARTITION_SYMBOL:
                    {
                    this.state = 1712;
                    this.partitionClause();
                    }
                    break;
                case MySQLParser.REMOVE_SYMBOL:
                    {
                    this.state = 1713;
                    this.removePartitioning();
                    }
                    break;
                case MySQLParser.EOF:
                case MySQLParser.SEMICOLON_SYMBOL:
                    break;
                default:
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1716;
                this.partitionClause();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1717;
                this.removePartitioning();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1721;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 26, this.context) ) {
                case 1:
                    {
                    this.state = 1718;
                    this.alterCommandsModifierList();
                    this.state = 1719;
                    this.match(MySQLParser.COMMA_SYMBOL);
                    }
                    break;
                }
                this.state = 1723;
                this.standaloneAlterCommands();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterCommandList(): AlterCommandListContext {
        let localContext = new AlterCommandListContext(this.context, this.state);
        this.enterRule(localContext, 24, MySQLParser.RULE_alterCommandList);
        try {
            this.state = 1733;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 29, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1726;
                this.alterCommandsModifierList();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1730;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 28, this.context) ) {
                case 1:
                    {
                    this.state = 1727;
                    this.alterCommandsModifierList();
                    this.state = 1728;
                    this.match(MySQLParser.COMMA_SYMBOL);
                    }
                    break;
                }
                this.state = 1732;
                this.alterList();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterCommandsModifierList(): AlterCommandsModifierListContext {
        let localContext = new AlterCommandsModifierListContext(this.context, this.state);
        this.enterRule(localContext, 26, MySQLParser.RULE_alterCommandsModifierList);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1735;
            this.alterCommandsModifier();
            this.state = 1740;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 30, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1736;
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.state = 1737;
                    this.alterCommandsModifier();
                    }
                    }
                }
                this.state = 1742;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 30, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public standaloneAlterCommands(): StandaloneAlterCommandsContext {
        let localContext = new StandaloneAlterCommandsContext(this.context, this.state);
        this.enterRule(localContext, 28, MySQLParser.RULE_standaloneAlterCommands);
        let _la: number;
        try {
            this.state = 1750;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 31, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1743;
                this.match(MySQLParser.DISCARD_SYMBOL);
                this.state = 1744;
                this.match(MySQLParser.TABLESPACE_SYMBOL);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1745;
                this.match(MySQLParser.IMPORT_SYMBOL);
                this.state = 1746;
                this.match(MySQLParser.TABLESPACE_SYMBOL);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1747;
                this.alterPartition();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1748;
                if (!(this.serverVersion >= 80014)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80014");
                }
                this.state = 1749;
                _la = this.tokenStream.LA(1);
                if(!(_la === 730 || _la === 731)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterPartition(): AlterPartitionContext {
        let localContext = new AlterPartitionContext(this.context, this.state);
        this.enterRule(localContext, 30, MySQLParser.RULE_alterPartition);
        let _la: number;
        try {
            this.state = 1846;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.ADD_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1752;
                this.match(MySQLParser.ADD_SYMBOL);
                this.state = 1753;
                this.match(MySQLParser.PARTITION_SYMBOL);
                this.state = 1755;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 312 || _la === 394) {
                    {
                    this.state = 1754;
                    this.noWriteToBinLog();
                    }
                }

                this.state = 1760;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySQLParser.OPEN_PAR_SYMBOL:
                    {
                    this.state = 1757;
                    this.partitionDefinitions();
                    }
                    break;
                case MySQLParser.PARTITIONS_SYMBOL:
                    {
                    this.state = 1758;
                    this.match(MySQLParser.PARTITIONS_SYMBOL);
                    this.state = 1759;
                    this.real_ulong_number();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case MySQLParser.DROP_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1762;
                this.match(MySQLParser.DROP_SYMBOL);
                this.state = 1763;
                this.match(MySQLParser.PARTITION_SYMBOL);
                this.state = 1764;
                this.identifierList();
                }
                break;
            case MySQLParser.REBUILD_SYMBOL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1765;
                this.match(MySQLParser.REBUILD_SYMBOL);
                this.state = 1766;
                this.match(MySQLParser.PARTITION_SYMBOL);
                this.state = 1768;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 34, this.context) ) {
                case 1:
                    {
                    this.state = 1767;
                    this.noWriteToBinLog();
                    }
                    break;
                }
                this.state = 1770;
                this.allOrPartitionNameList();
                }
                break;
            case MySQLParser.OPTIMIZE_SYMBOL:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1771;
                this.match(MySQLParser.OPTIMIZE_SYMBOL);
                this.state = 1772;
                this.match(MySQLParser.PARTITION_SYMBOL);
                this.state = 1774;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 35, this.context) ) {
                case 1:
                    {
                    this.state = 1773;
                    this.noWriteToBinLog();
                    }
                    break;
                }
                this.state = 1776;
                this.allOrPartitionNameList();
                this.state = 1778;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 312 || _la === 394) {
                    {
                    this.state = 1777;
                    this.noWriteToBinLog();
                    }
                }

                }
                break;
            case MySQLParser.ANALYZE_SYMBOL:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1780;
                this.match(MySQLParser.ANALYZE_SYMBOL);
                this.state = 1781;
                this.match(MySQLParser.PARTITION_SYMBOL);
                this.state = 1783;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 37, this.context) ) {
                case 1:
                    {
                    this.state = 1782;
                    this.noWriteToBinLog();
                    }
                    break;
                }
                this.state = 1785;
                this.allOrPartitionNameList();
                }
                break;
            case MySQLParser.CHECK_SYMBOL:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1786;
                this.match(MySQLParser.CHECK_SYMBOL);
                this.state = 1787;
                this.match(MySQLParser.PARTITION_SYMBOL);
                this.state = 1788;
                this.allOrPartitionNameList();
                this.state = 1792;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 100 || ((((_la - 215)) & ~0x1F) === 0 && ((1 << (_la - 215)) & 131089) !== 0) || _la === 357 || _la === 449) {
                    {
                    {
                    this.state = 1789;
                    this.checkOption();
                    }
                    }
                    this.state = 1794;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case MySQLParser.REPAIR_SYMBOL:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1795;
                this.match(MySQLParser.REPAIR_SYMBOL);
                this.state = 1796;
                this.match(MySQLParser.PARTITION_SYMBOL);
                this.state = 1798;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 39, this.context) ) {
                case 1:
                    {
                    this.state = 1797;
                    this.noWriteToBinLog();
                    }
                    break;
                }
                this.state = 1800;
                this.allOrPartitionNameList();
                this.state = 1804;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 215 || _la === 449 || _la === 628) {
                    {
                    {
                    this.state = 1801;
                    this.repairType();
                    }
                    }
                    this.state = 1806;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case MySQLParser.COALESCE_SYMBOL:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1807;
                this.match(MySQLParser.COALESCE_SYMBOL);
                this.state = 1808;
                this.match(MySQLParser.PARTITION_SYMBOL);
                this.state = 1810;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 312 || _la === 394) {
                    {
                    this.state = 1809;
                    this.noWriteToBinLog();
                    }
                }

                this.state = 1812;
                this.real_ulong_number();
                }
                break;
            case MySQLParser.TRUNCATE_SYMBOL:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1813;
                this.match(MySQLParser.TRUNCATE_SYMBOL);
                this.state = 1814;
                this.match(MySQLParser.PARTITION_SYMBOL);
                this.state = 1815;
                this.allOrPartitionNameList();
                }
                break;
            case MySQLParser.REORGANIZE_SYMBOL:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 1816;
                this.match(MySQLParser.REORGANIZE_SYMBOL);
                this.state = 1817;
                this.match(MySQLParser.PARTITION_SYMBOL);
                this.state = 1819;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 42, this.context) ) {
                case 1:
                    {
                    this.state = 1818;
                    this.noWriteToBinLog();
                    }
                    break;
                }
                this.state = 1825;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 43, this.context) ) {
                case 1:
                    {
                    this.state = 1821;
                    this.identifierList();
                    this.state = 1822;
                    this.match(MySQLParser.INTO_SYMBOL);
                    this.state = 1823;
                    this.partitionDefinitions();
                    }
                    break;
                }
                }
                break;
            case MySQLParser.EXCHANGE_SYMBOL:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 1827;
                this.match(MySQLParser.EXCHANGE_SYMBOL);
                this.state = 1828;
                this.match(MySQLParser.PARTITION_SYMBOL);
                this.state = 1829;
                this.identifier();
                this.state = 1830;
                this.match(MySQLParser.WITH_SYMBOL);
                this.state = 1831;
                this.match(MySQLParser.TABLE_SYMBOL);
                this.state = 1832;
                this.tableRef();
                this.state = 1834;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 653 || _la === 654) {
                    {
                    this.state = 1833;
                    this.withValidation();
                    }
                }

                }
                break;
            case MySQLParser.DISCARD_SYMBOL:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 1836;
                this.match(MySQLParser.DISCARD_SYMBOL);
                this.state = 1837;
                this.match(MySQLParser.PARTITION_SYMBOL);
                this.state = 1838;
                this.allOrPartitionNameList();
                this.state = 1839;
                this.match(MySQLParser.TABLESPACE_SYMBOL);
                }
                break;
            case MySQLParser.IMPORT_SYMBOL:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 1841;
                this.match(MySQLParser.IMPORT_SYMBOL);
                this.state = 1842;
                this.match(MySQLParser.PARTITION_SYMBOL);
                this.state = 1843;
                this.allOrPartitionNameList();
                this.state = 1844;
                this.match(MySQLParser.TABLESPACE_SYMBOL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterList(): AlterListContext {
        let localContext = new AlterListContext(this.context, this.state);
        this.enterRule(localContext, 32, MySQLParser.RULE_alterList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1850;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 46, this.context) ) {
            case 1:
                {
                this.state = 1848;
                this.alterListItem();
                }
                break;
            case 2:
                {
                this.state = 1849;
                this.createTableOptionsSpaceSeparated();
                }
                break;
            }
            this.state = 1860;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 29) {
                {
                {
                this.state = 1852;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 1856;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 47, this.context) ) {
                case 1:
                    {
                    this.state = 1853;
                    this.alterListItem();
                    }
                    break;
                case 2:
                    {
                    this.state = 1854;
                    this.alterCommandsModifier();
                    }
                    break;
                case 3:
                    {
                    this.state = 1855;
                    this.createTableOptionsSpaceSeparated();
                    }
                    break;
                }
                }
                }
                this.state = 1862;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterCommandsModifier(): AlterCommandsModifierContext {
        let localContext = new AlterCommandsModifierContext(this.context, this.state);
        this.enterRule(localContext, 34, MySQLParser.RULE_alterCommandsModifier);
        try {
            this.state = 1866;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.ALGORITHM_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1863;
                this.alterAlgorithmOption();
                }
                break;
            case MySQLParser.LOCK_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1864;
                this.alterLockOption();
                }
                break;
            case MySQLParser.WITH_SYMBOL:
            case MySQLParser.WITHOUT_SYMBOL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1865;
                this.withValidation();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterListItem(): AlterListItemContext {
        let localContext = new AlterListItemContext(this.context, this.state);
        this.enterRule(localContext, 36, MySQLParser.RULE_alterListItem);
        let _la: number;
        try {
            this.state = 2003;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 67, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1868;
                this.match(MySQLParser.ADD_SYMBOL);
                this.state = 1870;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 50, this.context) ) {
                case 1:
                    {
                    this.state = 1869;
                    this.match(MySQLParser.COLUMN_SYMBOL);
                    }
                    break;
                }
                this.state = 1884;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 53, this.context) ) {
                case 1:
                    {
                    this.state = 1872;
                    this.identifier();
                    this.state = 1873;
                    this.fieldDefinition();
                    this.state = 1875;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 51, this.context) ) {
                    case 1:
                        {
                        this.state = 1874;
                        this.checkOrReferences();
                        }
                        break;
                    }
                    this.state = 1878;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 53 || _la === 225) {
                        {
                        this.state = 1877;
                        this.place();
                        }
                    }

                    }
                    break;
                case 2:
                    {
                    this.state = 1880;
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.state = 1881;
                    this.tableElementList();
                    this.state = 1882;
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1886;
                this.match(MySQLParser.ADD_SYMBOL);
                this.state = 1887;
                this.tableConstraintDef();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1888;
                this.match(MySQLParser.CHANGE_SYMBOL);
                this.state = 1890;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 54, this.context) ) {
                case 1:
                    {
                    this.state = 1889;
                    this.match(MySQLParser.COLUMN_SYMBOL);
                    }
                    break;
                }
                this.state = 1892;
                this.columnInternalRef();
                this.state = 1893;
                this.identifier();
                this.state = 1894;
                this.fieldDefinition();
                this.state = 1896;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 53 || _la === 225) {
                    {
                    this.state = 1895;
                    this.place();
                    }
                }

                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1898;
                this.match(MySQLParser.MODIFY_SYMBOL);
                this.state = 1900;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 56, this.context) ) {
                case 1:
                    {
                    this.state = 1899;
                    this.match(MySQLParser.COLUMN_SYMBOL);
                    }
                    break;
                }
                this.state = 1902;
                this.columnInternalRef();
                this.state = 1903;
                this.fieldDefinition();
                this.state = 1905;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 53 || _la === 225) {
                    {
                    this.state = 1904;
                    this.place();
                    }
                }

                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1907;
                this.match(MySQLParser.DROP_SYMBOL);
                this.state = 1929;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 60, this.context) ) {
                case 1:
                    {
                    this.state = 1909;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 58, this.context) ) {
                    case 1:
                        {
                        this.state = 1908;
                        this.match(MySQLParser.COLUMN_SYMBOL);
                        }
                        break;
                    }
                    this.state = 1911;
                    this.columnInternalRef();
                    this.state = 1913;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 93 || _la === 488) {
                        {
                        this.state = 1912;
                        this.restrict();
                        }
                    }

                    }
                    break;
                case 2:
                    {
                    this.state = 1915;
                    this.match(MySQLParser.FOREIGN_SYMBOL);
                    this.state = 1916;
                    this.match(MySQLParser.KEY_SYMBOL);
                    this.state = 1917;
                    this.columnInternalRef();
                    }
                    break;
                case 3:
                    {
                    this.state = 1918;
                    this.match(MySQLParser.PRIMARY_SYMBOL);
                    this.state = 1919;
                    this.match(MySQLParser.KEY_SYMBOL);
                    }
                    break;
                case 4:
                    {
                    this.state = 1920;
                    this.keyOrIndex();
                    this.state = 1921;
                    this.indexRef();
                    }
                    break;
                case 5:
                    {
                    this.state = 1923;
                    if (!(this.serverVersion >= 80017)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80017");
                    }
                    this.state = 1924;
                    this.match(MySQLParser.CHECK_SYMBOL);
                    this.state = 1925;
                    this.identifier();
                    }
                    break;
                case 6:
                    {
                    this.state = 1926;
                    if (!(this.serverVersion >= 80019)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80019");
                    }
                    this.state = 1927;
                    this.match(MySQLParser.CONSTRAINT_SYMBOL);
                    this.state = 1928;
                    this.identifier();
                    }
                    break;
                }
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1931;
                this.match(MySQLParser.DISABLE_SYMBOL);
                this.state = 1932;
                this.match(MySQLParser.KEYS_SYMBOL);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1933;
                this.match(MySQLParser.ENABLE_SYMBOL);
                this.state = 1934;
                this.match(MySQLParser.KEYS_SYMBOL);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1935;
                this.match(MySQLParser.ALTER_SYMBOL);
                this.state = 1937;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 61, this.context) ) {
                case 1:
                    {
                    this.state = 1936;
                    this.match(MySQLParser.COLUMN_SYMBOL);
                    }
                    break;
                }
                this.state = 1939;
                this.columnInternalRef();
                this.state = 1952;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 63, this.context) ) {
                case 1:
                    {
                    this.state = 1940;
                    this.match(MySQLParser.SET_SYMBOL);
                    this.state = 1941;
                    this.match(MySQLParser.DEFAULT_SYMBOL);
                    this.state = 1945;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 62, this.context) ) {
                    case 1:
                        {
                        this.state = 1942;
                        if (!(this.serverVersion >= 80014)) {
                            throw this.createFailedPredicateException("this.serverVersion >= 80014");
                        }
                        this.state = 1943;
                        this.exprWithParentheses();
                        }
                        break;
                    case 2:
                        {
                        this.state = 1944;
                        this.signedLiteralOrNull();
                        }
                        break;
                    }
                    }
                    break;
                case 2:
                    {
                    this.state = 1947;
                    this.match(MySQLParser.DROP_SYMBOL);
                    this.state = 1948;
                    this.match(MySQLParser.DEFAULT_SYMBOL);
                    }
                    break;
                case 3:
                    {
                    this.state = 1949;
                    if (!(this.serverVersion >= 80024)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80024");
                    }
                    this.state = 1950;
                    this.match(MySQLParser.SET_SYMBOL);
                    this.state = 1951;
                    this.visibility();
                    }
                    break;
                }
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1954;
                this.match(MySQLParser.ALTER_SYMBOL);
                this.state = 1955;
                this.match(MySQLParser.INDEX_SYMBOL);
                this.state = 1956;
                this.indexRef();
                this.state = 1957;
                this.visibility();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 1959;
                if (!(this.serverVersion >= 80017)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80017");
                }
                this.state = 1960;
                this.match(MySQLParser.ALTER_SYMBOL);
                this.state = 1961;
                this.match(MySQLParser.CHECK_SYMBOL);
                this.state = 1962;
                this.identifier();
                this.state = 1963;
                this.constraintEnforcement();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 1965;
                if (!(this.serverVersion >= 80019)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80019");
                }
                this.state = 1966;
                this.match(MySQLParser.ALTER_SYMBOL);
                this.state = 1967;
                this.match(MySQLParser.CONSTRAINT_SYMBOL);
                this.state = 1968;
                this.identifier();
                this.state = 1969;
                this.constraintEnforcement();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 1971;
                this.match(MySQLParser.RENAME_SYMBOL);
                this.state = 1972;
                this.match(MySQLParser.COLUMN_SYMBOL);
                this.state = 1973;
                this.columnInternalRef();
                this.state = 1974;
                this.match(MySQLParser.TO_SYMBOL);
                this.state = 1975;
                this.identifier();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 1977;
                this.match(MySQLParser.RENAME_SYMBOL);
                this.state = 1979;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 64, this.context) ) {
                case 1:
                    {
                    this.state = 1978;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 63 || _la === 599)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                }
                this.state = 1981;
                this.tableName();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 1982;
                this.match(MySQLParser.RENAME_SYMBOL);
                this.state = 1983;
                this.keyOrIndex();
                this.state = 1984;
                this.indexRef();
                this.state = 1985;
                this.match(MySQLParser.TO_SYMBOL);
                this.state = 1986;
                this.indexName();
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 1988;
                this.match(MySQLParser.CONVERT_SYMBOL);
                this.state = 1989;
                this.match(MySQLParser.TO_SYMBOL);
                this.state = 1990;
                this.charset();
                this.state = 1994;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 65, this.context) ) {
                case 1:
                    {
                    this.state = 1991;
                    if (!(this.serverVersion >= 80014)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80014");
                    }
                    this.state = 1992;
                    this.match(MySQLParser.DEFAULT_SYMBOL);
                    }
                    break;
                case 2:
                    {
                    this.state = 1993;
                    this.charsetName();
                    }
                    break;
                }
                this.state = 1997;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 112) {
                    {
                    this.state = 1996;
                    this.collate();
                    }
                }

                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 1999;
                this.match(MySQLParser.FORCE_SYMBOL);
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 2000;
                this.match(MySQLParser.ORDER_SYMBOL);
                this.state = 2001;
                this.match(MySQLParser.BY_SYMBOL);
                this.state = 2002;
                this.alterOrderList();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public place(): PlaceContext {
        let localContext = new PlaceContext(this.context, this.state);
        this.enterRule(localContext, 38, MySQLParser.RULE_place);
        try {
            this.state = 2008;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.AFTER_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2005;
                this.match(MySQLParser.AFTER_SYMBOL);
                this.state = 2006;
                this.identifier();
                }
                break;
            case MySQLParser.FIRST_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2007;
                this.match(MySQLParser.FIRST_SYMBOL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public restrict(): RestrictContext {
        let localContext = new RestrictContext(this.context, this.state);
        this.enterRule(localContext, 40, MySQLParser.RULE_restrict);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2010;
            _la = this.tokenStream.LA(1);
            if(!(_la === 93 || _la === 488)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterOrderList(): AlterOrderListContext {
        let localContext = new AlterOrderListContext(this.context, this.state);
        this.enterRule(localContext, 42, MySQLParser.RULE_alterOrderList);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2012;
            this.identifier();
            this.state = 2014;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 64 || _la === 172) {
                {
                this.state = 2013;
                this.direction();
                }
            }

            this.state = 2023;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 71, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 2016;
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.state = 2017;
                    this.identifier();
                    this.state = 2019;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 64 || _la === 172) {
                        {
                        this.state = 2018;
                        this.direction();
                        }
                    }

                    }
                    }
                }
                this.state = 2025;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 71, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterAlgorithmOption(): AlterAlgorithmOptionContext {
        let localContext = new AlterAlgorithmOptionContext(this.context, this.state);
        this.enterRule(localContext, 44, MySQLParser.RULE_alterAlgorithmOption);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2026;
            this.match(MySQLParser.ALGORITHM_SYMBOL);
            this.state = 2028;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 72, this.context) ) {
            case 1:
                {
                this.state = 2027;
                this.match(MySQLParser.EQUAL_OPERATOR);
                }
                break;
            }
            this.state = 2032;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 73, this.context) ) {
            case 1:
                {
                this.state = 2030;
                this.match(MySQLParser.DEFAULT_SYMBOL);
                }
                break;
            case 2:
                {
                this.state = 2031;
                this.identifier();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterLockOption(): AlterLockOptionContext {
        let localContext = new AlterLockOptionContext(this.context, this.state);
        this.enterRule(localContext, 46, MySQLParser.RULE_alterLockOption);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2034;
            this.match(MySQLParser.LOCK_SYMBOL);
            this.state = 2036;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 74, this.context) ) {
            case 1:
                {
                this.state = 2035;
                this.match(MySQLParser.EQUAL_OPERATOR);
                }
                break;
            }
            this.state = 2040;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 75, this.context) ) {
            case 1:
                {
                this.state = 2038;
                this.match(MySQLParser.DEFAULT_SYMBOL);
                }
                break;
            case 2:
                {
                this.state = 2039;
                this.identifier();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public indexLockAndAlgorithm(): IndexLockAndAlgorithmContext {
        let localContext = new IndexLockAndAlgorithmContext(this.context, this.state);
        this.enterRule(localContext, 48, MySQLParser.RULE_indexLockAndAlgorithm);
        let _la: number;
        try {
            this.state = 2050;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.ALGORITHM_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2042;
                this.alterAlgorithmOption();
                this.state = 2044;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 314) {
                    {
                    this.state = 2043;
                    this.alterLockOption();
                    }
                }

                }
                break;
            case MySQLParser.LOCK_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2046;
                this.alterLockOption();
                this.state = 2048;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 56) {
                    {
                    this.state = 2047;
                    this.alterAlgorithmOption();
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public withValidation(): WithValidationContext {
        let localContext = new WithValidationContext(this.context, this.state);
        this.enterRule(localContext, 50, MySQLParser.RULE_withValidation);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2052;
            _la = this.tokenStream.LA(1);
            if(!(_la === 653 || _la === 654)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2053;
            this.match(MySQLParser.VALIDATION_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public removePartitioning(): RemovePartitioningContext {
        let localContext = new RemovePartitioningContext(this.context, this.state);
        this.enterRule(localContext, 52, MySQLParser.RULE_removePartitioning);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2055;
            this.match(MySQLParser.REMOVE_SYMBOL);
            this.state = 2056;
            this.match(MySQLParser.PARTITIONING_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public allOrPartitionNameList(): AllOrPartitionNameListContext {
        let localContext = new AllOrPartitionNameListContext(this.context, this.state);
        this.enterRule(localContext, 54, MySQLParser.RULE_allOrPartitionNameList);
        try {
            this.state = 2060;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 79, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2058;
                this.match(MySQLParser.ALL_SYMBOL);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2059;
                this.identifierList();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterTablespace(): AlterTablespaceContext {
        let localContext = new AlterTablespaceContext(this.context, this.state);
        this.enterRule(localContext, 56, MySQLParser.RULE_alterTablespace);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2062;
            this.match(MySQLParser.TABLESPACE_SYMBOL);
            this.state = 2063;
            this.tablespaceRef();
            this.state = 2075;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 81, this.context) ) {
            case 1:
                {
                this.state = 2064;
                _la = this.tokenStream.LA(1);
                if(!(_la === 51 || _la === 184)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2065;
                this.match(MySQLParser.DATAFILE_SYMBOL);
                this.state = 2066;
                this.textLiteral();
                this.state = 2068;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 80, this.context) ) {
                case 1:
                    {
                    this.state = 2067;
                    this.alterTablespaceOptions();
                    }
                    break;
                }
                }
                break;
            case 2:
                {
                this.state = 2070;
                this.match(MySQLParser.RENAME_SYMBOL);
                this.state = 2071;
                this.match(MySQLParser.TO_SYMBOL);
                this.state = 2072;
                this.identifier();
                }
                break;
            case 3:
                {
                this.state = 2073;
                if (!(this.serverVersion >= 80014)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80014");
                }
                this.state = 2074;
                this.alterTablespaceOptions();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterUndoTablespace(): AlterUndoTablespaceContext {
        let localContext = new AlterUndoTablespaceContext(this.context, this.state);
        this.enterRule(localContext, 58, MySQLParser.RULE_alterUndoTablespace);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2077;
            this.match(MySQLParser.UNDO_SYMBOL);
            this.state = 2078;
            this.match(MySQLParser.TABLESPACE_SYMBOL);
            this.state = 2079;
            this.tablespaceRef();
            this.state = 2080;
            this.match(MySQLParser.SET_SYMBOL);
            this.state = 2081;
            _la = this.tokenStream.LA(1);
            if(!(_la === 732 || _la === 733)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2083;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 198 || _la === 563) {
                {
                this.state = 2082;
                this.undoTableSpaceOptions();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public undoTableSpaceOptions(): UndoTableSpaceOptionsContext {
        let localContext = new UndoTableSpaceOptionsContext(this.context, this.state);
        this.enterRule(localContext, 60, MySQLParser.RULE_undoTableSpaceOptions);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2085;
            this.undoTableSpaceOption();
            this.state = 2092;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 29 || _la === 198 || _la === 563) {
                {
                {
                this.state = 2087;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 29) {
                    {
                    this.state = 2086;
                    this.match(MySQLParser.COMMA_SYMBOL);
                    }
                }

                this.state = 2089;
                this.undoTableSpaceOption();
                }
                }
                this.state = 2094;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public undoTableSpaceOption(): UndoTableSpaceOptionContext {
        let localContext = new UndoTableSpaceOptionContext(this.context, this.state);
        this.enterRule(localContext, 62, MySQLParser.RULE_undoTableSpaceOption);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2095;
            this.tsOptionEngine();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterTablespaceOptions(): AlterTablespaceOptionsContext {
        let localContext = new AlterTablespaceOptionsContext(this.context, this.state);
        this.enterRule(localContext, 64, MySQLParser.RULE_alterTablespaceOptions);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2097;
            this.alterTablespaceOption();
            this.state = 2104;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 86, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 2099;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 85, this.context) ) {
                    case 1:
                        {
                        this.state = 2098;
                        this.match(MySQLParser.COMMA_SYMBOL);
                        }
                        break;
                    }
                    this.state = 2101;
                    this.alterTablespaceOption();
                    }
                    }
                }
                this.state = 2106;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 86, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterTablespaceOption(): AlterTablespaceOptionContext {
        let localContext = new AlterTablespaceOptionContext(this.context, this.state);
        this.enterRule(localContext, 66, MySQLParser.RULE_alterTablespaceOption);
        try {
            this.state = 2119;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 88, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2107;
                this.match(MySQLParser.INITIAL_SIZE_SYMBOL);
                this.state = 2109;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 87, this.context) ) {
                case 1:
                    {
                    this.state = 2108;
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                    break;
                }
                this.state = 2111;
                this.sizeNumber();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2112;
                this.tsOptionAutoextendSize();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2113;
                this.tsOptionMaxSize();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2114;
                this.tsOptionEngine();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2115;
                this.tsOptionWait();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2116;
                this.tsOptionEncryption();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 2117;
                if (!(this.serverVersion >= 80024)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80024");
                }
                this.state = 2118;
                this.tsOptionEngineAttribute();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public changeTablespaceOption(): ChangeTablespaceOptionContext {
        let localContext = new ChangeTablespaceOptionContext(this.context, this.state);
        this.enterRule(localContext, 68, MySQLParser.RULE_changeTablespaceOption);
        try {
            this.state = 2128;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.INITIAL_SIZE_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2121;
                this.match(MySQLParser.INITIAL_SIZE_SYMBOL);
                this.state = 2123;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 89, this.context) ) {
                case 1:
                    {
                    this.state = 2122;
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                    break;
                }
                this.state = 2125;
                this.sizeNumber();
                }
                break;
            case MySQLParser.AUTOEXTEND_SIZE_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2126;
                this.tsOptionAutoextendSize();
                }
                break;
            case MySQLParser.MAX_SIZE_SYMBOL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2127;
                this.tsOptionMaxSize();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterView(): AlterViewContext {
        let localContext = new AlterViewContext(this.context, this.state);
        this.enterRule(localContext, 70, MySQLParser.RULE_alterView);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2131;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 56) {
                {
                this.state = 2130;
                this.viewAlgorithm();
                }
            }

            this.state = 2134;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 168) {
                {
                this.state = 2133;
                this.definerClause();
                }
            }

            this.state = 2137;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 547) {
                {
                this.state = 2136;
                this.viewSuid();
                }
            }

            this.state = 2139;
            this.match(MySQLParser.VIEW_SYMBOL);
            this.state = 2140;
            this.viewRef();
            this.state = 2141;
            this.viewTail();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public viewTail(): ViewTailContext {
        let localContext = new ViewTailContext(this.context, this.state);
        this.enterRule(localContext, 72, MySQLParser.RULE_viewTail);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2144;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 32) {
                {
                this.state = 2143;
                this.columnInternalRefList();
                }
            }

            this.state = 2146;
            this.match(MySQLParser.AS_SYMBOL);
            this.state = 2147;
            this.viewQueryBlock();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public viewQueryBlock(): ViewQueryBlockContext {
        let localContext = new ViewQueryBlockContext(this.context, this.state);
        this.enterRule(localContext, 74, MySQLParser.RULE_viewQueryBlock);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2149;
            this.queryExpressionWithOptLockingClauses();
            this.state = 2151;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 653) {
                {
                this.state = 2150;
                this.viewCheckOption();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public viewCheckOption(): ViewCheckOptionContext {
        let localContext = new ViewCheckOptionContext(this.context, this.state);
        this.enterRule(localContext, 76, MySQLParser.RULE_viewCheckOption);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2153;
            this.match(MySQLParser.WITH_SYMBOL);
            this.state = 2155;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 94 || _la === 312) {
                {
                this.state = 2154;
                _la = this.tokenStream.LA(1);
                if(!(_la === 94 || _la === 312)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 2157;
            this.match(MySQLParser.CHECK_SYMBOL);
            this.state = 2158;
            this.match(MySQLParser.OPTION_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterInstanceStatement(): AlterInstanceStatementContext {
        let localContext = new AlterInstanceStatementContext(this.context, this.state);
        this.enterRule(localContext, 78, MySQLParser.RULE_alterInstanceStatement);
        let _la: number;
        try {
            this.state = 2192;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 100, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2160;
                this.match(MySQLParser.INSTANCE_SYMBOL);
                this.state = 2161;
                this.match(MySQLParser.ROTATE_SYMBOL);
                this.state = 2162;
                this.textOrIdentifier();
                this.state = 2163;
                this.match(MySQLParser.MASTER_SYMBOL);
                this.state = 2164;
                this.match(MySQLParser.KEY_SYMBOL);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2166;
                if (!(this.serverVersion >= 80024)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80024");
                }
                this.state = 2190;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 99, this.context) ) {
                case 1:
                    {
                    this.state = 2167;
                    this.match(MySQLParser.RELOAD_SYMBOL);
                    this.state = 2168;
                    this.match(MySQLParser.TLS_SYMBOL);
                    this.state = 2182;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case MySQLParser.NO_SYMBOL:
                        {
                        this.state = 2169;
                        this.match(MySQLParser.NO_SYMBOL);
                        this.state = 2170;
                        this.match(MySQLParser.ROLLBACK_SYMBOL);
                        this.state = 2171;
                        this.match(MySQLParser.ON_SYMBOL);
                        this.state = 2172;
                        this.match(MySQLParser.ERROR_SYMBOL);
                        }
                        break;
                    case MySQLParser.FOR_SYMBOL:
                        {
                        this.state = 2173;
                        this.match(MySQLParser.FOR_SYMBOL);
                        this.state = 2174;
                        this.match(MySQLParser.CHANNEL_SYMBOL);
                        this.state = 2175;
                        this.identifier();
                        this.state = 2180;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 392) {
                            {
                            this.state = 2176;
                            this.match(MySQLParser.NO_SYMBOL);
                            this.state = 2177;
                            this.match(MySQLParser.ROLLBACK_SYMBOL);
                            this.state = 2178;
                            this.match(MySQLParser.ON_SYMBOL);
                            this.state = 2179;
                            this.match(MySQLParser.ERROR_SYMBOL);
                            }
                        }

                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                    break;
                case 2:
                    {
                    this.state = 2184;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 177 || _la === 192)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 2185;
                    this.identifier();
                    this.state = 2186;
                    this.identifier();
                    }
                    break;
                case 3:
                    {
                    this.state = 2188;
                    this.match(MySQLParser.RELOAD_SYMBOL);
                    this.state = 2189;
                    this.match(MySQLParser.KEYRING_SYMBOL);
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createStatement(): CreateStatementContext {
        let localContext = new CreateStatementContext(this.context, this.state);
        this.enterRule(localContext, 80, MySQLParser.RULE_createStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2194;
            this.match(MySQLParser.CREATE_SYMBOL);
            this.state = 2212;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 101, this.context) ) {
            case 1:
                {
                this.state = 2195;
                this.createDatabase();
                }
                break;
            case 2:
                {
                this.state = 2196;
                this.createTable();
                }
                break;
            case 3:
                {
                this.state = 2197;
                this.createFunction();
                }
                break;
            case 4:
                {
                this.state = 2198;
                this.createProcedure();
                }
                break;
            case 5:
                {
                this.state = 2199;
                this.createUdf();
                }
                break;
            case 6:
                {
                this.state = 2200;
                this.createLogfileGroup();
                }
                break;
            case 7:
                {
                this.state = 2201;
                this.createView();
                }
                break;
            case 8:
                {
                this.state = 2202;
                this.createTrigger();
                }
                break;
            case 9:
                {
                this.state = 2203;
                this.createIndex();
                }
                break;
            case 10:
                {
                this.state = 2204;
                this.createServer();
                }
                break;
            case 11:
                {
                this.state = 2205;
                this.createTablespace();
                }
                break;
            case 12:
                {
                this.state = 2206;
                this.createEvent();
                }
                break;
            case 13:
                {
                this.state = 2207;
                this.createRole();
                }
                break;
            case 14:
                {
                this.state = 2208;
                if (!(this.serverVersion >= 80011)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80011");
                }
                this.state = 2209;
                this.createSpatialReference();
                }
                break;
            case 15:
                {
                this.state = 2210;
                if (!(this.serverVersion >= 80014)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80014");
                }
                this.state = 2211;
                this.createUndoTablespace();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createDatabase(): CreateDatabaseContext {
        let localContext = new CreateDatabaseContext(this.context, this.state);
        this.enterRule(localContext, 82, MySQLParser.RULE_createDatabase);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2214;
            this.match(MySQLParser.DATABASE_SYMBOL);
            this.state = 2216;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 102, this.context) ) {
            case 1:
                {
                this.state = 2215;
                this.ifNotExists();
                }
                break;
            }
            this.state = 2218;
            this.schemaName();
            this.state = 2222;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 103, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 2219;
                    this.createDatabaseOption();
                    }
                    }
                }
                this.state = 2224;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 103, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createDatabaseOption(): CreateDatabaseOptionContext {
        let localContext = new CreateDatabaseOptionContext(this.context, this.state);
        this.enterRule(localContext, 84, MySQLParser.RULE_createDatabaseOption);
        try {
            this.state = 2229;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 104, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2225;
                this.defaultCharset();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2226;
                this.defaultCollation();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2227;
                if (!(this.serverVersion >= 80016)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80016");
                }
                this.state = 2228;
                this.defaultEncryption();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createTable(): CreateTableContext {
        let localContext = new CreateTableContext(this.context, this.state);
        this.enterRule(localContext, 86, MySQLParser.RULE_createTable);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2232;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 586) {
                {
                this.state = 2231;
                this.match(MySQLParser.TEMPORARY_SYMBOL);
                }
            }

            this.state = 2234;
            this.match(MySQLParser.TABLE_SYMBOL);
            this.state = 2236;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 106, this.context) ) {
            case 1:
                {
                this.state = 2235;
                this.ifNotExists();
                }
                break;
            }
            this.state = 2238;
            this.tableName();
            this.state = 2255;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 109, this.context) ) {
            case 1:
                {
                this.state = 2243;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 107, this.context) ) {
                case 1:
                    {
                    this.state = 2239;
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.state = 2240;
                    this.tableElementList();
                    this.state = 2241;
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                }
                this.state = 2246;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 108, this.context) ) {
                case 1:
                    {
                    this.state = 2245;
                    this.createTableOptionsEtc();
                    }
                    break;
                }
                }
                break;
            case 2:
                {
                this.state = 2248;
                this.match(MySQLParser.LIKE_SYMBOL);
                this.state = 2249;
                this.tableRef();
                }
                break;
            case 3:
                {
                this.state = 2250;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 2251;
                this.match(MySQLParser.LIKE_SYMBOL);
                this.state = 2252;
                this.tableRef();
                this.state = 2253;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableElementList(): TableElementListContext {
        let localContext = new TableElementListContext(this.context, this.state);
        this.enterRule(localContext, 88, MySQLParser.RULE_tableElementList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2257;
            this.tableElement();
            this.state = 2262;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 29) {
                {
                {
                this.state = 2258;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 2259;
                this.tableElement();
                }
                }
                this.state = 2264;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableElement(): TableElementContext {
        let localContext = new TableElementContext(this.context, this.state);
        this.enterRule(localContext, 90, MySQLParser.RULE_tableElement);
        try {
            this.state = 2267;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 111, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2265;
                this.columnDefinition();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2266;
                this.tableConstraintDef();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public duplicateAsQe(): DuplicateAsQeContext {
        let localContext = new DuplicateAsQeContext(this.context, this.state);
        this.enterRule(localContext, 92, MySQLParser.RULE_duplicateAsQe);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2270;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 112, this.context) ) {
            case 1:
                {
                this.state = 2269;
                _la = this.tokenStream.LA(1);
                if(!(_la === 264 || _la === 475)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
            this.state = 2272;
            this.asCreateQueryExpression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public asCreateQueryExpression(): AsCreateQueryExpressionContext {
        let localContext = new AsCreateQueryExpressionContext(this.context, this.state);
        this.enterRule(localContext, 94, MySQLParser.RULE_asCreateQueryExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2275;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 113, this.context) ) {
            case 1:
                {
                this.state = 2274;
                this.match(MySQLParser.AS_SYMBOL);
                }
                break;
            }
            this.state = 2277;
            this.queryExpressionWithOptLockingClauses();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public queryExpressionOrParens(): QueryExpressionOrParensContext {
        let localContext = new QueryExpressionOrParensContext(this.context, this.state);
        this.enterRule(localContext, 96, MySQLParser.RULE_queryExpressionOrParens);
        try {
            this.state = 2284;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 115, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2279;
                this.queryExpression();
                this.state = 2281;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 114, this.context) ) {
                case 1:
                    {
                    this.state = 2280;
                    this.lockingClauseList();
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2283;
                this.queryExpressionParens();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public queryExpressionWithOptLockingClauses(): QueryExpressionWithOptLockingClausesContext {
        let localContext = new QueryExpressionWithOptLockingClausesContext(this.context, this.state);
        this.enterRule(localContext, 98, MySQLParser.RULE_queryExpressionWithOptLockingClauses);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2286;
            this.queryExpression();
            this.state = 2288;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 116, this.context) ) {
            case 1:
                {
                this.state = 2287;
                this.lockingClauseList();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createRoutine(): CreateRoutineContext {
        let localContext = new CreateRoutineContext(this.context, this.state);
        this.enterRule(localContext, 100, MySQLParser.RULE_createRoutine);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2290;
            this.match(MySQLParser.CREATE_SYMBOL);
            this.state = 2294;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 117, this.context) ) {
            case 1:
                {
                this.state = 2291;
                this.createProcedure();
                }
                break;
            case 2:
                {
                this.state = 2292;
                this.createFunction();
                }
                break;
            case 3:
                {
                this.state = 2293;
                this.createUdf();
                }
                break;
            }
            this.state = 2297;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 30) {
                {
                this.state = 2296;
                this.match(MySQLParser.SEMICOLON_SYMBOL);
                }
            }

            this.state = 2299;
            this.match(MySQLParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createProcedure(): CreateProcedureContext {
        let localContext = new CreateProcedureContext(this.context, this.state);
        this.enterRule(localContext, 102, MySQLParser.RULE_createProcedure);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2302;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 168) {
                {
                this.state = 2301;
                this.definerClause();
                }
            }

            this.state = 2304;
            this.match(MySQLParser.PROCEDURE_SYMBOL);
            this.state = 2306;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 120, this.context) ) {
            case 1:
                {
                this.state = 2305;
                this.ifNotExists();
                }
                break;
            }
            this.state = 2308;
            this.procedureName();
            this.state = 2309;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 2318;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 122, this.context) ) {
            case 1:
                {
                this.state = 2310;
                this.procedureParameter();
                this.state = 2315;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 29) {
                    {
                    {
                    this.state = 2311;
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.state = 2312;
                    this.procedureParameter();
                    }
                    }
                    this.state = 2317;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            }
            this.state = 2320;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            this.state = 2324;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 123, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 2321;
                    this.routineCreateOption();
                    }
                    }
                }
                this.state = 2326;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 123, this.context);
            }
            this.state = 2327;
            this.storedRoutineBody();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public routineString(): RoutineStringContext {
        let localContext = new RoutineStringContext(this.context, this.state);
        this.enterRule(localContext, 104, MySQLParser.RULE_routineString);
        try {
            this.state = 2331;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 124, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2329;
                this.textStringLiteral();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2330;
                this.match(MySQLParser.DOLLAR_QUOTED_STRING_TEXT);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public storedRoutineBody(): StoredRoutineBodyContext {
        let localContext = new StoredRoutineBodyContext(this.context, this.state);
        this.enterRule(localContext, 106, MySQLParser.RULE_storedRoutineBody);
        try {
            this.state = 2337;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 125, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2333;
                this.compoundStatement();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2334;
                if (!(this.serverVersion >= 80032 && this.supportMle)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80032 && this.supportMle");
                }
                this.state = 2335;
                this.match(MySQLParser.AS_SYMBOL);
                this.state = 2336;
                this.routineString();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createFunction(): CreateFunctionContext {
        let localContext = new CreateFunctionContext(this.context, this.state);
        this.enterRule(localContext, 108, MySQLParser.RULE_createFunction);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2340;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 168) {
                {
                this.state = 2339;
                this.definerClause();
                }
            }

            this.state = 2342;
            this.match(MySQLParser.FUNCTION_SYMBOL);
            this.state = 2344;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 127, this.context) ) {
            case 1:
                {
                this.state = 2343;
                this.ifNotExists();
                }
                break;
            }
            this.state = 2346;
            this.functionName();
            this.state = 2347;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 2356;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 129, this.context) ) {
            case 1:
                {
                this.state = 2348;
                this.functionParameter();
                this.state = 2353;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 29) {
                    {
                    {
                    this.state = 2349;
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.state = 2350;
                    this.functionParameter();
                    }
                    }
                    this.state = 2355;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            }
            this.state = 2358;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            this.state = 2359;
            this.match(MySQLParser.RETURNS_SYMBOL);
            this.state = 2360;
            this.typeWithOptCollate();
            this.state = 2364;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 130, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 2361;
                    this.routineCreateOption();
                    }
                    }
                }
                this.state = 2366;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 130, this.context);
            }
            this.state = 2367;
            this.storedRoutineBody();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createUdf(): CreateUdfContext {
        let localContext = new CreateUdfContext(this.context, this.state);
        this.enterRule(localContext, 110, MySQLParser.RULE_createUdf);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2370;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 55) {
                {
                this.state = 2369;
                this.match(MySQLParser.AGGREGATE_SYMBOL);
                }
            }

            this.state = 2372;
            this.match(MySQLParser.FUNCTION_SYMBOL);
            this.state = 2374;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 132, this.context) ) {
            case 1:
                {
                this.state = 2373;
                this.ifNotExists();
                }
                break;
            }
            this.state = 2376;
            this.udfName();
            this.state = 2377;
            this.match(MySQLParser.RETURNS_SYMBOL);
            this.state = 2378;
            localContext._type_ = this.tokenStream.LT(1);
            _la = this.tokenStream.LA(1);
            if(!(_la === 164 || _la === 280 || _la === 455 || _la === 566)) {
                localContext._type_ = this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2379;
            this.match(MySQLParser.SONAME_SYMBOL);
            this.state = 2380;
            this.textLiteral();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public routineCreateOption(): RoutineCreateOptionContext {
        let localContext = new RoutineCreateOptionContext(this.context, this.state);
        this.enterRule(localContext, 112, MySQLParser.RULE_routineCreateOption);
        let _la: number;
        try {
            this.state = 2387;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.COMMENT_SYMBOL:
            case MySQLParser.CONTAINS_SYMBOL:
            case MySQLParser.LANGUAGE_SYMBOL:
            case MySQLParser.MODIFIES_SYMBOL:
            case MySQLParser.NO_SYMBOL:
            case MySQLParser.READS_SYMBOL:
            case MySQLParser.SQL_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2382;
                this.routineOption();
                }
                break;
            case MySQLParser.DETERMINISTIC_SYMBOL:
            case MySQLParser.NOT_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2384;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 390) {
                    {
                    this.state = 2383;
                    this.match(MySQLParser.NOT_SYMBOL);
                    }
                }

                this.state = 2386;
                this.match(MySQLParser.DETERMINISTIC_SYMBOL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public routineAlterOptions(): RoutineAlterOptionsContext {
        let localContext = new RoutineAlterOptionsContext(this.context, this.state);
        this.enterRule(localContext, 114, MySQLParser.RULE_routineAlterOptions);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2390;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 2389;
                this.routineCreateOption();
                }
                }
                this.state = 2392;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 118 || _la === 133 || _la === 174 || _la === 297 || ((((_la - 370)) & ~0x1F) === 0 && ((1 << (_la - 370)) & 5242881) !== 0) || _la === 451 || _la === 547);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public routineOption(): RoutineOptionContext {
        let localContext = new RoutineOptionContext(this.context, this.state);
        this.enterRule(localContext, 116, MySQLParser.RULE_routineOption);
        let _la: number;
        try {
            this.state = 2415;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.COMMENT_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2394;
                localContext._option = this.match(MySQLParser.COMMENT_SYMBOL);
                this.state = 2395;
                this.textLiteral();
                }
                break;
            case MySQLParser.LANGUAGE_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2396;
                localContext._option = this.match(MySQLParser.LANGUAGE_SYMBOL);
                this.state = 2400;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 136, this.context) ) {
                case 1:
                    {
                    this.state = 2397;
                    this.match(MySQLParser.SQL_SYMBOL);
                    }
                    break;
                case 2:
                    {
                    this.state = 2398;
                    if (!(this.serverVersion >= 80032)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80032");
                    }
                    this.state = 2399;
                    this.identifier();
                    }
                    break;
                }
                }
                break;
            case MySQLParser.NO_SYMBOL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2402;
                localContext._option = this.match(MySQLParser.NO_SYMBOL);
                this.state = 2403;
                this.match(MySQLParser.SQL_SYMBOL);
                }
                break;
            case MySQLParser.CONTAINS_SYMBOL:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2404;
                localContext._option = this.match(MySQLParser.CONTAINS_SYMBOL);
                this.state = 2405;
                this.match(MySQLParser.SQL_SYMBOL);
                }
                break;
            case MySQLParser.READS_SYMBOL:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2406;
                localContext._option = this.match(MySQLParser.READS_SYMBOL);
                this.state = 2407;
                this.match(MySQLParser.SQL_SYMBOL);
                this.state = 2408;
                this.match(MySQLParser.DATA_SYMBOL);
                }
                break;
            case MySQLParser.MODIFIES_SYMBOL:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2409;
                localContext._option = this.match(MySQLParser.MODIFIES_SYMBOL);
                this.state = 2410;
                this.match(MySQLParser.SQL_SYMBOL);
                this.state = 2411;
                this.match(MySQLParser.DATA_SYMBOL);
                }
                break;
            case MySQLParser.SQL_SYMBOL:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 2412;
                localContext._option = this.match(MySQLParser.SQL_SYMBOL);
                this.state = 2413;
                this.match(MySQLParser.SECURITY_SYMBOL);
                this.state = 2414;
                localContext._security = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 168 || _la === 281)) {
                    localContext._security = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createIndex(): CreateIndexContext {
        let localContext = new CreateIndexContext(this.context, this.state);
        this.enterRule(localContext, 118, MySQLParser.RULE_createIndex);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2418;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 399 || _la === 403) {
                {
                this.state = 2417;
                this.onlineOption();
                }
            }

            this.state = 2455;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.INDEX_SYMBOL:
            case MySQLParser.UNIQUE_SYMBOL:
                {
                this.state = 2421;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 618) {
                    {
                    this.state = 2420;
                    this.match(MySQLParser.UNIQUE_SYMBOL);
                    }
                }

                this.state = 2423;
                localContext._type_ = this.match(MySQLParser.INDEX_SYMBOL);
                this.state = 2424;
                this.indexName();
                this.state = 2426;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 608 || _la === 630) {
                    {
                    this.state = 2425;
                    this.indexTypeClause();
                    }
                }

                this.state = 2428;
                this.createIndexTarget();
                this.state = 2432;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 141, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 2429;
                        this.indexOption();
                        }
                        }
                    }
                    this.state = 2434;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 141, this.context);
                }
                }
                break;
            case MySQLParser.FULLTEXT_SYMBOL:
                {
                this.state = 2435;
                localContext._type_ = this.match(MySQLParser.FULLTEXT_SYMBOL);
                this.state = 2436;
                this.match(MySQLParser.INDEX_SYMBOL);
                this.state = 2437;
                this.indexName();
                this.state = 2438;
                this.createIndexTarget();
                this.state = 2442;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 142, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 2439;
                        this.fulltextIndexOption();
                        }
                        }
                    }
                    this.state = 2444;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 142, this.context);
                }
                }
                break;
            case MySQLParser.SPATIAL_SYMBOL:
                {
                this.state = 2445;
                localContext._type_ = this.match(MySQLParser.SPATIAL_SYMBOL);
                this.state = 2446;
                this.match(MySQLParser.INDEX_SYMBOL);
                this.state = 2447;
                this.indexName();
                this.state = 2448;
                this.createIndexTarget();
                this.state = 2452;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 143, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 2449;
                        this.spatialIndexOption();
                        }
                        }
                    }
                    this.state = 2454;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 143, this.context);
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 2458;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 56 || _la === 314) {
                {
                this.state = 2457;
                this.indexLockAndAlgorithm();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public indexNameAndType(): IndexNameAndTypeContext {
        let localContext = new IndexNameAndTypeContext(this.context, this.state);
        this.enterRule(localContext, 120, MySQLParser.RULE_indexNameAndType);
        try {
            this.state = 2470;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 147, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2460;
                this.indexName();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2462;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 146, this.context) ) {
                case 1:
                    {
                    this.state = 2461;
                    this.indexName();
                    }
                    break;
                }
                this.state = 2464;
                this.match(MySQLParser.USING_SYMBOL);
                this.state = 2465;
                this.indexType();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2466;
                this.indexName();
                this.state = 2467;
                this.match(MySQLParser.TYPE_SYMBOL);
                this.state = 2468;
                this.indexType();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createIndexTarget(): CreateIndexTargetContext {
        let localContext = new CreateIndexTargetContext(this.context, this.state);
        this.enterRule(localContext, 122, MySQLParser.RULE_createIndexTarget);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2472;
            this.match(MySQLParser.ON_SYMBOL);
            this.state = 2473;
            this.tableRef();
            this.state = 2474;
            this.keyListWithExpression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createLogfileGroup(): CreateLogfileGroupContext {
        let localContext = new CreateLogfileGroupContext(this.context, this.state);
        this.enterRule(localContext, 124, MySQLParser.RULE_createLogfileGroup);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2476;
            this.match(MySQLParser.LOGFILE_SYMBOL);
            this.state = 2477;
            this.match(MySQLParser.GROUP_SYMBOL);
            this.state = 2478;
            this.logfileGroupName();
            this.state = 2479;
            this.match(MySQLParser.ADD_SYMBOL);
            this.state = 2480;
            this.match(MySQLParser.UNDOFILE_SYMBOL);
            this.state = 2481;
            this.textLiteral();
            this.state = 2483;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 118 || _la === 198 || _la === 270 || _la === 388 || _la === 393 || _la === 458 || _la === 563 || _la === 613 || _la === 646) {
                {
                this.state = 2482;
                this.logfileGroupOptions();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public logfileGroupOptions(): LogfileGroupOptionsContext {
        let localContext = new LogfileGroupOptionsContext(this.context, this.state);
        this.enterRule(localContext, 126, MySQLParser.RULE_logfileGroupOptions);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2485;
            this.logfileGroupOption();
            this.state = 2492;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 29 || _la === 118 || _la === 198 || _la === 270 || _la === 388 || _la === 393 || _la === 458 || _la === 563 || _la === 613 || _la === 646) {
                {
                {
                this.state = 2487;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 29) {
                    {
                    this.state = 2486;
                    this.match(MySQLParser.COMMA_SYMBOL);
                    }
                }

                this.state = 2489;
                this.logfileGroupOption();
                }
                }
                this.state = 2494;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public logfileGroupOption(): LogfileGroupOptionContext {
        let localContext = new LogfileGroupOptionContext(this.context, this.state);
        this.enterRule(localContext, 128, MySQLParser.RULE_logfileGroupOption);
        try {
            this.state = 2501;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.INITIAL_SIZE_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2495;
                this.tsOptionInitialSize();
                }
                break;
            case MySQLParser.REDO_BUFFER_SIZE_SYMBOL:
            case MySQLParser.UNDO_BUFFER_SIZE_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2496;
                this.tsOptionUndoRedoBufferSize();
                }
                break;
            case MySQLParser.NODEGROUP_SYMBOL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2497;
                this.tsOptionNodegroup();
                }
                break;
            case MySQLParser.ENGINE_SYMBOL:
            case MySQLParser.STORAGE_SYMBOL:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2498;
                this.tsOptionEngine();
                }
                break;
            case MySQLParser.NO_WAIT_SYMBOL:
            case MySQLParser.WAIT_SYMBOL:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2499;
                this.tsOptionWait();
                }
                break;
            case MySQLParser.COMMENT_SYMBOL:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2500;
                this.tsOptionComment();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createServer(): CreateServerContext {
        let localContext = new CreateServerContext(this.context, this.state);
        this.enterRule(localContext, 130, MySQLParser.RULE_createServer);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2503;
            this.match(MySQLParser.SERVER_SYMBOL);
            this.state = 2504;
            this.serverName();
            this.state = 2505;
            this.match(MySQLParser.FOREIGN_SYMBOL);
            this.state = 2506;
            this.match(MySQLParser.DATA_SYMBOL);
            this.state = 2507;
            this.match(MySQLParser.WRAPPER_SYMBOL);
            this.state = 2508;
            this.textOrIdentifier();
            this.state = 2509;
            this.serverOptions();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public serverOptions(): ServerOptionsContext {
        let localContext = new ServerOptionsContext(this.context, this.state);
        this.enterRule(localContext, 132, MySQLParser.RULE_serverOptions);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2511;
            this.match(MySQLParser.OPTIONS_SYMBOL);
            this.state = 2512;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 2513;
            this.serverOption();
            this.state = 2518;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 29) {
                {
                {
                this.state = 2514;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 2515;
                this.serverOption();
                }
                }
                this.state = 2520;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2521;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public serverOption(): ServerOptionContext {
        let localContext = new ServerOptionContext(this.context, this.state);
        this.enterRule(localContext, 134, MySQLParser.RULE_serverOption);
        try {
            this.state = 2537;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.HOST_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2523;
                localContext._option = this.match(MySQLParser.HOST_SYMBOL);
                this.state = 2524;
                this.textLiteral();
                }
                break;
            case MySQLParser.DATABASE_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2525;
                localContext._option = this.match(MySQLParser.DATABASE_SYMBOL);
                this.state = 2526;
                this.textLiteral();
                }
                break;
            case MySQLParser.USER_SYMBOL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2527;
                localContext._option = this.match(MySQLParser.USER_SYMBOL);
                this.state = 2528;
                this.textLiteral();
                }
                break;
            case MySQLParser.PASSWORD_SYMBOL:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2529;
                localContext._option = this.match(MySQLParser.PASSWORD_SYMBOL);
                this.state = 2530;
                this.textLiteral();
                }
                break;
            case MySQLParser.SOCKET_SYMBOL:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2531;
                localContext._option = this.match(MySQLParser.SOCKET_SYMBOL);
                this.state = 2532;
                this.textLiteral();
                }
                break;
            case MySQLParser.OWNER_SYMBOL:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2533;
                localContext._option = this.match(MySQLParser.OWNER_SYMBOL);
                this.state = 2534;
                this.textLiteral();
                }
                break;
            case MySQLParser.PORT_SYMBOL:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 2535;
                localContext._option = this.match(MySQLParser.PORT_SYMBOL);
                this.state = 2536;
                this.ulong_number();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createTablespace(): CreateTablespaceContext {
        let localContext = new CreateTablespaceContext(this.context, this.state);
        this.enterRule(localContext, 136, MySQLParser.RULE_createTablespace);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2539;
            this.match(MySQLParser.TABLESPACE_SYMBOL);
            this.state = 2540;
            this.tablespaceName();
            this.state = 2541;
            this.tsDataFileName();
            this.state = 2546;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 154, this.context) ) {
            case 1:
                {
                this.state = 2542;
                this.match(MySQLParser.USE_SYMBOL);
                this.state = 2543;
                this.match(MySQLParser.LOGFILE_SYMBOL);
                this.state = 2544;
                this.match(MySQLParser.GROUP_SYMBOL);
                this.state = 2545;
                this.logfileGroupRef();
                }
                break;
            }
            this.state = 2549;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 155, this.context) ) {
            case 1:
                {
                this.state = 2548;
                this.tablespaceOptions();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createUndoTablespace(): CreateUndoTablespaceContext {
        let localContext = new CreateUndoTablespaceContext(this.context, this.state);
        this.enterRule(localContext, 138, MySQLParser.RULE_createUndoTablespace);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2551;
            this.match(MySQLParser.UNDO_SYMBOL);
            this.state = 2552;
            this.match(MySQLParser.TABLESPACE_SYMBOL);
            this.state = 2553;
            this.tablespaceName();
            this.state = 2554;
            this.match(MySQLParser.ADD_SYMBOL);
            this.state = 2555;
            this.tsDataFile();
            this.state = 2557;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 198 || _la === 563) {
                {
                this.state = 2556;
                this.undoTableSpaceOptions();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tsDataFileName(): TsDataFileNameContext {
        let localContext = new TsDataFileNameContext(this.context, this.state);
        this.enterRule(localContext, 140, MySQLParser.RULE_tsDataFileName);
        try {
            this.state = 2566;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 158, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2559;
                this.match(MySQLParser.ADD_SYMBOL);
                this.state = 2560;
                this.tsDataFile();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2561;
                if (!(this.serverVersion >= 80014)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80014");
                }
                this.state = 2564;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 157, this.context) ) {
                case 1:
                    {
                    this.state = 2562;
                    this.match(MySQLParser.ADD_SYMBOL);
                    this.state = 2563;
                    this.tsDataFile();
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tsDataFile(): TsDataFileContext {
        let localContext = new TsDataFileContext(this.context, this.state);
        this.enterRule(localContext, 142, MySQLParser.RULE_tsDataFile);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2568;
            this.match(MySQLParser.DATAFILE_SYMBOL);
            this.state = 2569;
            this.textLiteral();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tablespaceOptions(): TablespaceOptionsContext {
        let localContext = new TablespaceOptionsContext(this.context, this.state);
        this.enterRule(localContext, 144, MySQLParser.RULE_tablespaceOptions);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2571;
            this.tablespaceOption();
            this.state = 2578;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 160, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 2573;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 159, this.context) ) {
                    case 1:
                        {
                        this.state = 2572;
                        this.match(MySQLParser.COMMA_SYMBOL);
                        }
                        break;
                    }
                    this.state = 2575;
                    this.tablespaceOption();
                    }
                    }
                }
                this.state = 2580;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 160, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tablespaceOption(): TablespaceOptionContext {
        let localContext = new TablespaceOptionContext(this.context, this.state);
        this.enterRule(localContext, 146, MySQLParser.RULE_tablespaceOption);
        try {
            this.state = 2592;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 161, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2581;
                this.tsOptionInitialSize();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2582;
                this.tsOptionAutoextendSize();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2583;
                this.tsOptionMaxSize();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2584;
                this.tsOptionExtentSize();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2585;
                this.tsOptionNodegroup();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2586;
                this.tsOptionEngine();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 2587;
                this.tsOptionWait();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 2588;
                this.tsOptionComment();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 2589;
                this.tsOptionFileblockSize();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 2590;
                if (!(this.serverVersion >= 80014)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80014");
                }
                this.state = 2591;
                this.tsOptionEncryption();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tsOptionInitialSize(): TsOptionInitialSizeContext {
        let localContext = new TsOptionInitialSizeContext(this.context, this.state);
        this.enterRule(localContext, 148, MySQLParser.RULE_tsOptionInitialSize);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2594;
            this.match(MySQLParser.INITIAL_SIZE_SYMBOL);
            this.state = 2596;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 162, this.context) ) {
            case 1:
                {
                this.state = 2595;
                this.match(MySQLParser.EQUAL_OPERATOR);
                }
                break;
            }
            this.state = 2598;
            this.sizeNumber();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tsOptionUndoRedoBufferSize(): TsOptionUndoRedoBufferSizeContext {
        let localContext = new TsOptionUndoRedoBufferSizeContext(this.context, this.state);
        this.enterRule(localContext, 150, MySQLParser.RULE_tsOptionUndoRedoBufferSize);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2600;
            _la = this.tokenStream.LA(1);
            if(!(_la === 458 || _la === 613)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2602;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 163, this.context) ) {
            case 1:
                {
                this.state = 2601;
                this.match(MySQLParser.EQUAL_OPERATOR);
                }
                break;
            }
            this.state = 2604;
            this.sizeNumber();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tsOptionAutoextendSize(): TsOptionAutoextendSizeContext {
        let localContext = new TsOptionAutoextendSizeContext(this.context, this.state);
        this.enterRule(localContext, 152, MySQLParser.RULE_tsOptionAutoextendSize);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2606;
            this.match(MySQLParser.AUTOEXTEND_SIZE_SYMBOL);
            this.state = 2608;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 164, this.context) ) {
            case 1:
                {
                this.state = 2607;
                this.match(MySQLParser.EQUAL_OPERATOR);
                }
                break;
            }
            this.state = 2610;
            this.sizeNumber();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tsOptionMaxSize(): TsOptionMaxSizeContext {
        let localContext = new TsOptionMaxSizeContext(this.context, this.state);
        this.enterRule(localContext, 154, MySQLParser.RULE_tsOptionMaxSize);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2612;
            this.match(MySQLParser.MAX_SIZE_SYMBOL);
            this.state = 2614;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 165, this.context) ) {
            case 1:
                {
                this.state = 2613;
                this.match(MySQLParser.EQUAL_OPERATOR);
                }
                break;
            }
            this.state = 2616;
            this.sizeNumber();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tsOptionExtentSize(): TsOptionExtentSizeContext {
        let localContext = new TsOptionExtentSizeContext(this.context, this.state);
        this.enterRule(localContext, 156, MySQLParser.RULE_tsOptionExtentSize);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2618;
            this.match(MySQLParser.EXTENT_SIZE_SYMBOL);
            this.state = 2620;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 166, this.context) ) {
            case 1:
                {
                this.state = 2619;
                this.match(MySQLParser.EQUAL_OPERATOR);
                }
                break;
            }
            this.state = 2622;
            this.sizeNumber();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tsOptionNodegroup(): TsOptionNodegroupContext {
        let localContext = new TsOptionNodegroupContext(this.context, this.state);
        this.enterRule(localContext, 158, MySQLParser.RULE_tsOptionNodegroup);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2624;
            this.match(MySQLParser.NODEGROUP_SYMBOL);
            this.state = 2626;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 6) {
                {
                this.state = 2625;
                this.match(MySQLParser.EQUAL_OPERATOR);
                }
            }

            this.state = 2628;
            this.real_ulong_number();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tsOptionEngine(): TsOptionEngineContext {
        let localContext = new TsOptionEngineContext(this.context, this.state);
        this.enterRule(localContext, 160, MySQLParser.RULE_tsOptionEngine);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2631;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 563) {
                {
                this.state = 2630;
                this.match(MySQLParser.STORAGE_SYMBOL);
                }
            }

            this.state = 2633;
            this.match(MySQLParser.ENGINE_SYMBOL);
            this.state = 2635;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 169, this.context) ) {
            case 1:
                {
                this.state = 2634;
                this.match(MySQLParser.EQUAL_OPERATOR);
                }
                break;
            }
            this.state = 2637;
            this.engineRef();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tsOptionWait(): TsOptionWaitContext {
        let localContext = new TsOptionWaitContext(this.context, this.state);
        this.enterRule(localContext, 162, MySQLParser.RULE_tsOptionWait);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2639;
            _la = this.tokenStream.LA(1);
            if(!(_la === 393 || _la === 646)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tsOptionComment(): TsOptionCommentContext {
        let localContext = new TsOptionCommentContext(this.context, this.state);
        this.enterRule(localContext, 164, MySQLParser.RULE_tsOptionComment);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2641;
            this.match(MySQLParser.COMMENT_SYMBOL);
            this.state = 2643;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 170, this.context) ) {
            case 1:
                {
                this.state = 2642;
                this.match(MySQLParser.EQUAL_OPERATOR);
                }
                break;
            }
            this.state = 2645;
            this.textLiteral();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tsOptionFileblockSize(): TsOptionFileblockSizeContext {
        let localContext = new TsOptionFileblockSizeContext(this.context, this.state);
        this.enterRule(localContext, 166, MySQLParser.RULE_tsOptionFileblockSize);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2647;
            this.match(MySQLParser.FILE_BLOCK_SIZE_SYMBOL);
            this.state = 2649;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 171, this.context) ) {
            case 1:
                {
                this.state = 2648;
                this.match(MySQLParser.EQUAL_OPERATOR);
                }
                break;
            }
            this.state = 2651;
            this.sizeNumber();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tsOptionEncryption(): TsOptionEncryptionContext {
        let localContext = new TsOptionEncryptionContext(this.context, this.state);
        this.enterRule(localContext, 168, MySQLParser.RULE_tsOptionEncryption);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2653;
            this.match(MySQLParser.ENCRYPTION_SYMBOL);
            this.state = 2655;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 172, this.context) ) {
            case 1:
                {
                this.state = 2654;
                this.match(MySQLParser.EQUAL_OPERATOR);
                }
                break;
            }
            this.state = 2657;
            this.textStringLiteral();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tsOptionEngineAttribute(): TsOptionEngineAttributeContext {
        let localContext = new TsOptionEngineAttributeContext(this.context, this.state);
        this.enterRule(localContext, 170, MySQLParser.RULE_tsOptionEngineAttribute);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2659;
            this.match(MySQLParser.ENGINE_SYMBOL);
            this.state = 2661;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 173, this.context) ) {
            case 1:
                {
                this.state = 2660;
                this.match(MySQLParser.EQUAL_OPERATOR);
                }
                break;
            }
            this.state = 2663;
            this.jsonAttribute();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createView(): CreateViewContext {
        let localContext = new CreateViewContext(this.context, this.state);
        this.enterRule(localContext, 172, MySQLParser.RULE_createView);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2666;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 56 || _la === 412) {
                {
                this.state = 2665;
                this.viewReplaceOrAlgorithm();
                }
            }

            this.state = 2669;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 168) {
                {
                this.state = 2668;
                this.definerClause();
                }
            }

            this.state = 2672;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 547) {
                {
                this.state = 2671;
                this.viewSuid();
                }
            }

            this.state = 2674;
            this.match(MySQLParser.VIEW_SYMBOL);
            this.state = 2675;
            this.viewName();
            this.state = 2676;
            this.viewTail();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public viewReplaceOrAlgorithm(): ViewReplaceOrAlgorithmContext {
        let localContext = new ViewReplaceOrAlgorithmContext(this.context, this.state);
        this.enterRule(localContext, 174, MySQLParser.RULE_viewReplaceOrAlgorithm);
        let _la: number;
        try {
            this.state = 2684;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.OR_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2678;
                this.match(MySQLParser.OR_SYMBOL);
                this.state = 2679;
                this.match(MySQLParser.REPLACE_SYMBOL);
                this.state = 2681;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 56) {
                    {
                    this.state = 2680;
                    this.viewAlgorithm();
                    }
                }

                }
                break;
            case MySQLParser.ALGORITHM_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2683;
                this.viewAlgorithm();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public viewAlgorithm(): ViewAlgorithmContext {
        let localContext = new ViewAlgorithmContext(this.context, this.state);
        this.enterRule(localContext, 176, MySQLParser.RULE_viewAlgorithm);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2686;
            this.match(MySQLParser.ALGORITHM_SYMBOL);
            this.state = 2687;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 2688;
            localContext._algorithm = this.tokenStream.LT(1);
            _la = this.tokenStream.LA(1);
            if(!(_la === 359 || _la === 587 || _la === 611)) {
                localContext._algorithm = this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public viewSuid(): ViewSuidContext {
        let localContext = new ViewSuidContext(this.context, this.state);
        this.enterRule(localContext, 178, MySQLParser.RULE_viewSuid);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2690;
            this.match(MySQLParser.SQL_SYMBOL);
            this.state = 2691;
            this.match(MySQLParser.SECURITY_SYMBOL);
            this.state = 2692;
            _la = this.tokenStream.LA(1);
            if(!(_la === 168 || _la === 281)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createTrigger(): CreateTriggerContext {
        let localContext = new CreateTriggerContext(this.context, this.state);
        this.enterRule(localContext, 180, MySQLParser.RULE_createTrigger);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2695;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 168) {
                {
                this.state = 2694;
                this.definerClause();
                }
            }

            this.state = 2697;
            this.match(MySQLParser.TRIGGER_SYMBOL);
            this.state = 2699;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 180, this.context) ) {
            case 1:
                {
                this.state = 2698;
                this.ifNotExists();
                }
                break;
            }
            this.state = 2701;
            this.triggerName();
            this.state = 2702;
            localContext._timing = this.tokenStream.LT(1);
            _la = this.tokenStream.LA(1);
            if(!(_la === 53 || _la === 73)) {
                localContext._timing = this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2703;
            localContext._event = this.tokenStream.LT(1);
            _la = this.tokenStream.LA(1);
            if(!(_la === 171 || _la === 274 || _la === 623)) {
                localContext._event = this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2704;
            this.match(MySQLParser.ON_SYMBOL);
            this.state = 2705;
            this.tableRef();
            this.state = 2706;
            this.match(MySQLParser.FOR_SYMBOL);
            this.state = 2707;
            this.match(MySQLParser.EACH_SYMBOL);
            this.state = 2708;
            this.match(MySQLParser.ROW_SYMBOL);
            this.state = 2710;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 181, this.context) ) {
            case 1:
                {
                this.state = 2709;
                this.triggerFollowsPrecedesClause();
                }
                break;
            }
            this.state = 2712;
            this.compoundStatement();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public triggerFollowsPrecedesClause(): TriggerFollowsPrecedesClauseContext {
        let localContext = new TriggerFollowsPrecedesClauseContext(this.context, this.state);
        this.enterRule(localContext, 182, MySQLParser.RULE_triggerFollowsPrecedesClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2714;
            localContext._ordering = this.tokenStream.LT(1);
            _la = this.tokenStream.LA(1);
            if(!(_la === 229 || _la === 433)) {
                localContext._ordering = this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2715;
            this.textOrIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createEvent(): CreateEventContext {
        let localContext = new CreateEventContext(this.context, this.state);
        this.enterRule(localContext, 184, MySQLParser.RULE_createEvent);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2718;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 168) {
                {
                this.state = 2717;
                this.definerClause();
                }
            }

            this.state = 2720;
            this.match(MySQLParser.EVENT_SYMBOL);
            this.state = 2722;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 183, this.context) ) {
            case 1:
                {
                this.state = 2721;
                this.ifNotExists();
                }
                break;
            }
            this.state = 2724;
            this.eventName();
            this.state = 2725;
            this.match(MySQLParser.ON_SYMBOL);
            this.state = 2726;
            this.match(MySQLParser.SCHEDULE_SYMBOL);
            this.state = 2727;
            this.schedule();
            this.state = 2734;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 401) {
                {
                this.state = 2728;
                this.match(MySQLParser.ON_SYMBOL);
                this.state = 2729;
                this.match(MySQLParser.COMPLETION_SYMBOL);
                this.state = 2731;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 390) {
                    {
                    this.state = 2730;
                    this.match(MySQLParser.NOT_SYMBOL);
                    }
                }

                this.state = 2733;
                this.match(MySQLParser.PRESERVE_SYMBOL);
                }
            }

            this.state = 2742;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.ENABLE_SYMBOL:
                {
                this.state = 2736;
                this.match(MySQLParser.ENABLE_SYMBOL);
                }
                break;
            case MySQLParser.DISABLE_SYMBOL:
                {
                this.state = 2737;
                this.match(MySQLParser.DISABLE_SYMBOL);
                this.state = 2740;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 401) {
                    {
                    this.state = 2738;
                    this.match(MySQLParser.ON_SYMBOL);
                    this.state = 2739;
                    this.replica();
                    }
                }

                }
                break;
            case MySQLParser.COMMENT_SYMBOL:
            case MySQLParser.DO_SYMBOL:
                break;
            default:
                break;
            }
            this.state = 2746;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 118) {
                {
                this.state = 2744;
                this.match(MySQLParser.COMMENT_SYMBOL);
                this.state = 2745;
                this.textLiteral();
                }
            }

            this.state = 2748;
            this.match(MySQLParser.DO_SYMBOL);
            this.state = 2749;
            this.compoundStatement();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createRole(): CreateRoleContext {
        let localContext = new CreateRoleContext(this.context, this.state);
        this.enterRule(localContext, 186, MySQLParser.RULE_createRole);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2751;
            this.match(MySQLParser.ROLE_SYMBOL);
            this.state = 2753;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 189, this.context) ) {
            case 1:
                {
                this.state = 2752;
                this.ifNotExists();
                }
                break;
            }
            this.state = 2755;
            this.roleList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createSpatialReference(): CreateSpatialReferenceContext {
        let localContext = new CreateSpatialReferenceContext(this.context, this.state);
        this.enterRule(localContext, 188, MySQLParser.RULE_createSpatialReference);
        let _la: number;
        try {
            this.state = 2782;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.OR_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2757;
                this.match(MySQLParser.OR_SYMBOL);
                this.state = 2758;
                this.match(MySQLParser.REPLACE_SYMBOL);
                this.state = 2759;
                this.match(MySQLParser.SPATIAL_SYMBOL);
                this.state = 2760;
                this.match(MySQLParser.REFERENCE_SYMBOL);
                this.state = 2761;
                this.match(MySQLParser.SYSTEM_SYMBOL);
                this.state = 2762;
                this.real_ulonglong_number();
                this.state = 2766;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 380 || ((((_la - 723)) & ~0x1F) === 0 && ((1 << (_la - 723)) & 7) !== 0)) {
                    {
                    {
                    this.state = 2763;
                    this.srsAttribute();
                    }
                    }
                    this.state = 2768;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case MySQLParser.SPATIAL_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2769;
                this.match(MySQLParser.SPATIAL_SYMBOL);
                this.state = 2770;
                this.match(MySQLParser.REFERENCE_SYMBOL);
                this.state = 2771;
                this.match(MySQLParser.SYSTEM_SYMBOL);
                this.state = 2773;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 191, this.context) ) {
                case 1:
                    {
                    this.state = 2772;
                    this.ifNotExists();
                    }
                    break;
                }
                this.state = 2775;
                this.real_ulonglong_number();
                this.state = 2779;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 380 || ((((_la - 723)) & ~0x1F) === 0 && ((1 << (_la - 723)) & 7) !== 0)) {
                    {
                    {
                    this.state = 2776;
                    this.srsAttribute();
                    }
                    }
                    this.state = 2781;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public srsAttribute(): SrsAttributeContext {
        let localContext = new SrsAttributeContext(this.context, this.state);
        this.enterRule(localContext, 190, MySQLParser.RULE_srsAttribute);
        try {
            this.state = 2799;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.NAME_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2784;
                this.match(MySQLParser.NAME_SYMBOL);
                this.state = 2785;
                this.match(MySQLParser.TEXT_SYMBOL);
                this.state = 2786;
                this.textStringNoLinebreak();
                }
                break;
            case MySQLParser.DEFINITION_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2787;
                this.match(MySQLParser.DEFINITION_SYMBOL);
                this.state = 2788;
                this.match(MySQLParser.TEXT_SYMBOL);
                this.state = 2789;
                this.textStringNoLinebreak();
                }
                break;
            case MySQLParser.ORGANIZATION_SYMBOL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2790;
                this.match(MySQLParser.ORGANIZATION_SYMBOL);
                this.state = 2791;
                this.textStringNoLinebreak();
                this.state = 2792;
                this.match(MySQLParser.IDENTIFIED_SYMBOL);
                this.state = 2793;
                this.match(MySQLParser.BY_SYMBOL);
                this.state = 2794;
                this.real_ulonglong_number();
                }
                break;
            case MySQLParser.DESCRIPTION_SYMBOL:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2796;
                this.match(MySQLParser.DESCRIPTION_SYMBOL);
                this.state = 2797;
                this.match(MySQLParser.TEXT_SYMBOL);
                this.state = 2798;
                this.textStringNoLinebreak();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropStatement(): DropStatementContext {
        let localContext = new DropStatementContext(this.context, this.state);
        this.enterRule(localContext, 192, MySQLParser.RULE_dropStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2801;
            this.match(MySQLParser.DROP_SYMBOL);
            this.state = 2818;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 195, this.context) ) {
            case 1:
                {
                this.state = 2802;
                this.dropDatabase();
                }
                break;
            case 2:
                {
                this.state = 2803;
                this.dropEvent();
                }
                break;
            case 3:
                {
                this.state = 2804;
                this.dropFunction();
                }
                break;
            case 4:
                {
                this.state = 2805;
                this.dropProcedure();
                }
                break;
            case 5:
                {
                this.state = 2806;
                this.dropIndex();
                }
                break;
            case 6:
                {
                this.state = 2807;
                this.dropLogfileGroup();
                }
                break;
            case 7:
                {
                this.state = 2808;
                this.dropServer();
                }
                break;
            case 8:
                {
                this.state = 2809;
                this.dropTable();
                }
                break;
            case 9:
                {
                this.state = 2810;
                this.dropTableSpace();
                }
                break;
            case 10:
                {
                this.state = 2811;
                this.dropTrigger();
                }
                break;
            case 11:
                {
                this.state = 2812;
                this.dropView();
                }
                break;
            case 12:
                {
                this.state = 2813;
                this.dropRole();
                }
                break;
            case 13:
                {
                this.state = 2814;
                if (!(this.serverVersion >= 80011)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80011");
                }
                this.state = 2815;
                this.dropSpatialReference();
                }
                break;
            case 14:
                {
                this.state = 2816;
                if (!(this.serverVersion >= 80014)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80014");
                }
                this.state = 2817;
                this.dropUndoTablespace();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropDatabase(): DropDatabaseContext {
        let localContext = new DropDatabaseContext(this.context, this.state);
        this.enterRule(localContext, 194, MySQLParser.RULE_dropDatabase);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2820;
            this.match(MySQLParser.DATABASE_SYMBOL);
            this.state = 2822;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 196, this.context) ) {
            case 1:
                {
                this.state = 2821;
                this.ifExists();
                }
                break;
            }
            this.state = 2824;
            this.schemaRef();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropEvent(): DropEventContext {
        let localContext = new DropEventContext(this.context, this.state);
        this.enterRule(localContext, 196, MySQLParser.RULE_dropEvent);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2826;
            this.match(MySQLParser.EVENT_SYMBOL);
            this.state = 2828;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 197, this.context) ) {
            case 1:
                {
                this.state = 2827;
                this.ifExists();
                }
                break;
            }
            this.state = 2830;
            this.eventRef();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropFunction(): DropFunctionContext {
        let localContext = new DropFunctionContext(this.context, this.state);
        this.enterRule(localContext, 198, MySQLParser.RULE_dropFunction);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2832;
            this.match(MySQLParser.FUNCTION_SYMBOL);
            this.state = 2834;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 198, this.context) ) {
            case 1:
                {
                this.state = 2833;
                this.ifExists();
                }
                break;
            }
            this.state = 2836;
            this.functionRef();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropProcedure(): DropProcedureContext {
        let localContext = new DropProcedureContext(this.context, this.state);
        this.enterRule(localContext, 200, MySQLParser.RULE_dropProcedure);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2838;
            this.match(MySQLParser.PROCEDURE_SYMBOL);
            this.state = 2840;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 199, this.context) ) {
            case 1:
                {
                this.state = 2839;
                this.ifExists();
                }
                break;
            }
            this.state = 2842;
            this.procedureRef();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropIndex(): DropIndexContext {
        let localContext = new DropIndexContext(this.context, this.state);
        this.enterRule(localContext, 202, MySQLParser.RULE_dropIndex);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2845;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 399 || _la === 403) {
                {
                this.state = 2844;
                this.onlineOption();
                }
            }

            this.state = 2847;
            localContext._type_ = this.match(MySQLParser.INDEX_SYMBOL);
            this.state = 2848;
            this.indexRef();
            this.state = 2849;
            this.match(MySQLParser.ON_SYMBOL);
            this.state = 2850;
            this.tableRef();
            this.state = 2852;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 56 || _la === 314) {
                {
                this.state = 2851;
                this.indexLockAndAlgorithm();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropLogfileGroup(): DropLogfileGroupContext {
        let localContext = new DropLogfileGroupContext(this.context, this.state);
        this.enterRule(localContext, 204, MySQLParser.RULE_dropLogfileGroup);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2854;
            this.match(MySQLParser.LOGFILE_SYMBOL);
            this.state = 2855;
            this.match(MySQLParser.GROUP_SYMBOL);
            this.state = 2856;
            this.logfileGroupRef();
            this.state = 2867;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 198 || _la === 393 || _la === 563 || _la === 646) {
                {
                this.state = 2857;
                this.dropLogfileGroupOption();
                this.state = 2864;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 29 || _la === 198 || _la === 393 || _la === 563 || _la === 646) {
                    {
                    {
                    this.state = 2859;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 29) {
                        {
                        this.state = 2858;
                        this.match(MySQLParser.COMMA_SYMBOL);
                        }
                    }

                    this.state = 2861;
                    this.dropLogfileGroupOption();
                    }
                    }
                    this.state = 2866;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropLogfileGroupOption(): DropLogfileGroupOptionContext {
        let localContext = new DropLogfileGroupOptionContext(this.context, this.state);
        this.enterRule(localContext, 206, MySQLParser.RULE_dropLogfileGroupOption);
        try {
            this.state = 2871;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.NO_WAIT_SYMBOL:
            case MySQLParser.WAIT_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2869;
                this.tsOptionWait();
                }
                break;
            case MySQLParser.ENGINE_SYMBOL:
            case MySQLParser.STORAGE_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2870;
                this.tsOptionEngine();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropServer(): DropServerContext {
        let localContext = new DropServerContext(this.context, this.state);
        this.enterRule(localContext, 208, MySQLParser.RULE_dropServer);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2873;
            this.match(MySQLParser.SERVER_SYMBOL);
            this.state = 2875;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 206, this.context) ) {
            case 1:
                {
                this.state = 2874;
                this.ifExists();
                }
                break;
            }
            this.state = 2877;
            this.serverRef();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropTable(): DropTableContext {
        let localContext = new DropTableContext(this.context, this.state);
        this.enterRule(localContext, 210, MySQLParser.RULE_dropTable);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2880;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 586) {
                {
                this.state = 2879;
                this.match(MySQLParser.TEMPORARY_SYMBOL);
                }
            }

            this.state = 2882;
            localContext._type_ = this.tokenStream.LT(1);
            _la = this.tokenStream.LA(1);
            if(!(_la === 581 || _la === 583)) {
                localContext._type_ = this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2884;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 208, this.context) ) {
            case 1:
                {
                this.state = 2883;
                this.ifExists();
                }
                break;
            }
            this.state = 2886;
            this.tableRefList();
            this.state = 2888;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 93 || _la === 488) {
                {
                this.state = 2887;
                _la = this.tokenStream.LA(1);
                if(!(_la === 93 || _la === 488)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropTableSpace(): DropTableSpaceContext {
        let localContext = new DropTableSpaceContext(this.context, this.state);
        this.enterRule(localContext, 212, MySQLParser.RULE_dropTableSpace);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2890;
            this.match(MySQLParser.TABLESPACE_SYMBOL);
            this.state = 2891;
            this.tablespaceRef();
            this.state = 2902;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 198 || _la === 393 || _la === 563 || _la === 646) {
                {
                this.state = 2892;
                this.dropLogfileGroupOption();
                this.state = 2899;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 29 || _la === 198 || _la === 393 || _la === 563 || _la === 646) {
                    {
                    {
                    this.state = 2894;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 29) {
                        {
                        this.state = 2893;
                        this.match(MySQLParser.COMMA_SYMBOL);
                        }
                    }

                    this.state = 2896;
                    this.dropLogfileGroupOption();
                    }
                    }
                    this.state = 2901;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropTrigger(): DropTriggerContext {
        let localContext = new DropTriggerContext(this.context, this.state);
        this.enterRule(localContext, 214, MySQLParser.RULE_dropTrigger);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2904;
            this.match(MySQLParser.TRIGGER_SYMBOL);
            this.state = 2906;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 213, this.context) ) {
            case 1:
                {
                this.state = 2905;
                this.ifExists();
                }
                break;
            }
            this.state = 2908;
            this.triggerRef();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropView(): DropViewContext {
        let localContext = new DropViewContext(this.context, this.state);
        this.enterRule(localContext, 216, MySQLParser.RULE_dropView);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2910;
            this.match(MySQLParser.VIEW_SYMBOL);
            this.state = 2912;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 214, this.context) ) {
            case 1:
                {
                this.state = 2911;
                this.ifExists();
                }
                break;
            }
            this.state = 2914;
            this.viewRefList();
            this.state = 2916;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 93 || _la === 488) {
                {
                this.state = 2915;
                _la = this.tokenStream.LA(1);
                if(!(_la === 93 || _la === 488)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropRole(): DropRoleContext {
        let localContext = new DropRoleContext(this.context, this.state);
        this.enterRule(localContext, 218, MySQLParser.RULE_dropRole);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2918;
            this.match(MySQLParser.ROLE_SYMBOL);
            this.state = 2920;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 216, this.context) ) {
            case 1:
                {
                this.state = 2919;
                this.ifExists();
                }
                break;
            }
            this.state = 2922;
            this.roleList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropSpatialReference(): DropSpatialReferenceContext {
        let localContext = new DropSpatialReferenceContext(this.context, this.state);
        this.enterRule(localContext, 220, MySQLParser.RULE_dropSpatialReference);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2924;
            this.match(MySQLParser.SPATIAL_SYMBOL);
            this.state = 2925;
            this.match(MySQLParser.REFERENCE_SYMBOL);
            this.state = 2926;
            this.match(MySQLParser.SYSTEM_SYMBOL);
            this.state = 2928;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 217, this.context) ) {
            case 1:
                {
                this.state = 2927;
                this.ifExists();
                }
                break;
            }
            this.state = 2930;
            this.real_ulonglong_number();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropUndoTablespace(): DropUndoTablespaceContext {
        let localContext = new DropUndoTablespaceContext(this.context, this.state);
        this.enterRule(localContext, 222, MySQLParser.RULE_dropUndoTablespace);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2932;
            this.match(MySQLParser.UNDO_SYMBOL);
            this.state = 2933;
            this.match(MySQLParser.TABLESPACE_SYMBOL);
            this.state = 2934;
            this.tablespaceRef();
            this.state = 2936;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 198 || _la === 563) {
                {
                this.state = 2935;
                this.undoTableSpaceOptions();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public renameTableStatement(): RenameTableStatementContext {
        let localContext = new RenameTableStatementContext(this.context, this.state);
        this.enterRule(localContext, 224, MySQLParser.RULE_renameTableStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2938;
            this.match(MySQLParser.RENAME_SYMBOL);
            this.state = 2939;
            _la = this.tokenStream.LA(1);
            if(!(_la === 581 || _la === 583)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2940;
            this.renamePair();
            this.state = 2945;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 29) {
                {
                {
                this.state = 2941;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 2942;
                this.renamePair();
                }
                }
                this.state = 2947;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public renamePair(): RenamePairContext {
        let localContext = new RenamePairContext(this.context, this.state);
        this.enterRule(localContext, 226, MySQLParser.RULE_renamePair);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2948;
            this.tableRef();
            this.state = 2949;
            this.match(MySQLParser.TO_SYMBOL);
            this.state = 2950;
            this.tableName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public truncateTableStatement(): TruncateTableStatementContext {
        let localContext = new TruncateTableStatementContext(this.context, this.state);
        this.enterRule(localContext, 228, MySQLParser.RULE_truncateTableStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2952;
            this.match(MySQLParser.TRUNCATE_SYMBOL);
            this.state = 2954;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 220, this.context) ) {
            case 1:
                {
                this.state = 2953;
                this.match(MySQLParser.TABLE_SYMBOL);
                }
                break;
            }
            this.state = 2956;
            this.tableRef();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public importStatement(): ImportStatementContext {
        let localContext = new ImportStatementContext(this.context, this.state);
        this.enterRule(localContext, 230, MySQLParser.RULE_importStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2958;
            this.match(MySQLParser.IMPORT_SYMBOL);
            this.state = 2959;
            this.match(MySQLParser.TABLE_SYMBOL);
            this.state = 2960;
            this.match(MySQLParser.FROM_SYMBOL);
            this.state = 2961;
            this.textStringLiteralList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public callStatement(): CallStatementContext {
        let localContext = new CallStatementContext(this.context, this.state);
        this.enterRule(localContext, 232, MySQLParser.RULE_callStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2963;
            this.match(MySQLParser.CALL_SYMBOL);
            this.state = 2964;
            this.procedureRef();
            this.state = 2970;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 32) {
                {
                this.state = 2965;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 2967;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 221, this.context) ) {
                case 1:
                    {
                    this.state = 2966;
                    this.exprList();
                    }
                    break;
                }
                this.state = 2969;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public deleteStatement(): DeleteStatementContext {
        let localContext = new DeleteStatementContext(this.context, this.state);
        this.enterRule(localContext, 234, MySQLParser.RULE_deleteStatement);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2973;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 653) {
                {
                this.state = 2972;
                this.withClause();
                }
            }

            this.state = 2975;
            this.match(MySQLParser.DELETE_SYMBOL);
            this.state = 2979;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 224, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 2976;
                    this.deleteStatementOption();
                    }
                    }
                }
                this.state = 2981;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 224, this.context);
            }
            this.state = 3014;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 233, this.context) ) {
            case 1:
                {
                this.state = 2982;
                this.match(MySQLParser.FROM_SYMBOL);
                this.state = 3006;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 231, this.context) ) {
                case 1:
                    {
                    this.state = 2983;
                    this.tableAliasRefList();
                    this.state = 2984;
                    this.match(MySQLParser.USING_SYMBOL);
                    this.state = 2985;
                    this.tableReferenceList();
                    this.state = 2987;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 651) {
                        {
                        this.state = 2986;
                        this.whereClause();
                        }
                    }

                    }
                    break;
                case 2:
                    {
                    this.state = 2989;
                    this.tableRef();
                    this.state = 2992;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 226, this.context) ) {
                    case 1:
                        {
                        this.state = 2990;
                        if (!(this.serverVersion >= 80017)) {
                            throw this.createFailedPredicateException("this.serverVersion >= 80017");
                        }
                        this.state = 2991;
                        this.tableAlias();
                        }
                        break;
                    }
                    this.state = 2995;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 423) {
                        {
                        this.state = 2994;
                        this.partitionDelete();
                        }
                    }

                    this.state = 2998;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 651) {
                        {
                        this.state = 2997;
                        this.whereClause();
                        }
                    }

                    this.state = 3001;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 411) {
                        {
                        this.state = 3000;
                        this.orderClause();
                        }
                    }

                    this.state = 3004;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 306) {
                        {
                        this.state = 3003;
                        this.simpleLimitClause();
                        }
                    }

                    }
                    break;
                }
                }
                break;
            case 2:
                {
                this.state = 3008;
                this.tableAliasRefList();
                this.state = 3009;
                this.match(MySQLParser.FROM_SYMBOL);
                this.state = 3010;
                this.tableReferenceList();
                this.state = 3012;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 651) {
                    {
                    this.state = 3011;
                    this.whereClause();
                    }
                }

                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionDelete(): PartitionDeleteContext {
        let localContext = new PartitionDeleteContext(this.context, this.state);
        this.enterRule(localContext, 236, MySQLParser.RULE_partitionDelete);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3016;
            this.match(MySQLParser.PARTITION_SYMBOL);
            this.state = 3017;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 3018;
            this.identifierList();
            this.state = 3019;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public deleteStatementOption(): DeleteStatementOptionContext {
        let localContext = new DeleteStatementOptionContext(this.context, this.state);
        this.enterRule(localContext, 238, MySQLParser.RULE_deleteStatementOption);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3021;
            _la = this.tokenStream.LA(1);
            if(!(_la === 264 || _la === 321 || _la === 449)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public doStatement(): DoStatementContext {
        let localContext = new DoStatementContext(this.context, this.state);
        this.enterRule(localContext, 240, MySQLParser.RULE_doStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3023;
            this.match(MySQLParser.DO_SYMBOL);
            this.state = 3024;
            this.selectItemList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public handlerStatement(): HandlerStatementContext {
        let localContext = new HandlerStatementContext(this.context, this.state);
        this.enterRule(localContext, 242, MySQLParser.RULE_handlerStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3026;
            this.match(MySQLParser.HANDLER_SYMBOL);
            this.state = 3044;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 238, this.context) ) {
            case 1:
                {
                this.state = 3027;
                this.tableRef();
                this.state = 3028;
                this.match(MySQLParser.OPEN_SYMBOL);
                this.state = 3030;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 234, this.context) ) {
                case 1:
                    {
                    this.state = 3029;
                    this.tableAlias();
                    }
                    break;
                }
                }
                break;
            case 2:
                {
                this.state = 3032;
                this.identifier();
                this.state = 3042;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySQLParser.CLOSE_SYMBOL:
                    {
                    this.state = 3033;
                    this.match(MySQLParser.CLOSE_SYMBOL);
                    }
                    break;
                case MySQLParser.READ_SYMBOL:
                    {
                    this.state = 3034;
                    this.match(MySQLParser.READ_SYMBOL);
                    this.state = 3035;
                    this.handlerReadOrScan();
                    this.state = 3037;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 651) {
                        {
                        this.state = 3036;
                        this.whereClause();
                        }
                    }

                    this.state = 3040;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 306) {
                        {
                        this.state = 3039;
                        this.limitClause();
                        }
                    }

                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public handlerReadOrScan(): HandlerReadOrScanContext {
        let localContext = new HandlerReadOrScanContext(this.context, this.state);
        this.enterRule(localContext, 244, MySQLParser.RULE_handlerReadOrScan);
        let _la: number;
        try {
            this.state = 3056;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 240, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3046;
                _la = this.tokenStream.LA(1);
                if(!(_la === 225 || _la === 387)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3047;
                this.identifier();
                this.state = 3054;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySQLParser.FIRST_SYMBOL:
                case MySQLParser.LAST_SYMBOL:
                case MySQLParser.NEXT_SYMBOL:
                case MySQLParser.PREV_SYMBOL:
                    {
                    this.state = 3048;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 225 || _la === 298 || _la === 387 || _la === 437)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                case MySQLParser.EQUAL_OPERATOR:
                case MySQLParser.GREATER_OR_EQUAL_OPERATOR:
                case MySQLParser.GREATER_THAN_OPERATOR:
                case MySQLParser.LESS_OR_EQUAL_OPERATOR:
                case MySQLParser.LESS_THAN_OPERATOR:
                    {
                    this.state = 3049;
                    _la = this.tokenStream.LA(1);
                    if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 7744) !== 0))) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 3050;
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.state = 3051;
                    this.values();
                    this.state = 3052;
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertStatement(): InsertStatementContext {
        let localContext = new InsertStatementContext(this.context, this.state);
        this.enterRule(localContext, 246, MySQLParser.RULE_insertStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3058;
            this.match(MySQLParser.INSERT_SYMBOL);
            this.state = 3060;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 241, this.context) ) {
            case 1:
                {
                this.state = 3059;
                this.insertLockOption();
                }
                break;
            }
            this.state = 3063;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 242, this.context) ) {
            case 1:
                {
                this.state = 3062;
                this.match(MySQLParser.IGNORE_SYMBOL);
                }
                break;
            }
            this.state = 3066;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 243, this.context) ) {
            case 1:
                {
                this.state = 3065;
                this.match(MySQLParser.INTO_SYMBOL);
                }
                break;
            }
            this.state = 3068;
            this.tableRef();
            this.state = 3070;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 244, this.context) ) {
            case 1:
                {
                this.state = 3069;
                this.usePartition();
                }
                break;
            }
            this.state = 3082;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 247, this.context) ) {
            case 1:
                {
                this.state = 3072;
                this.insertFromConstructor();
                this.state = 3074;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 245, this.context) ) {
                case 1:
                    {
                    this.state = 3073;
                    this.valuesReference();
                    }
                    break;
                }
                }
                break;
            case 2:
                {
                this.state = 3076;
                this.match(MySQLParser.SET_SYMBOL);
                this.state = 3077;
                this.updateList();
                this.state = 3079;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 246, this.context) ) {
                case 1:
                    {
                    this.state = 3078;
                    this.valuesReference();
                    }
                    break;
                }
                }
                break;
            case 3:
                {
                this.state = 3081;
                this.insertQueryExpression();
                }
                break;
            }
            this.state = 3085;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 401) {
                {
                this.state = 3084;
                this.insertUpdateList();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertLockOption(): InsertLockOptionContext {
        let localContext = new InsertLockOptionContext(this.context, this.state);
        this.enterRule(localContext, 248, MySQLParser.RULE_insertLockOption);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3087;
            _la = this.tokenStream.LA(1);
            if(!(_la === 169 || _la === 255 || _la === 321)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertFromConstructor(): InsertFromConstructorContext {
        let localContext = new InsertFromConstructorContext(this.context, this.state);
        this.enterRule(localContext, 250, MySQLParser.RULE_insertFromConstructor);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3094;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 32) {
                {
                this.state = 3089;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 3091;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 249, this.context) ) {
                case 1:
                    {
                    this.state = 3090;
                    this.fields();
                    }
                    break;
                }
                this.state = 3093;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
            }

            this.state = 3096;
            this.insertValues();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fields(): FieldsContext {
        let localContext = new FieldsContext(this.context, this.state);
        this.enterRule(localContext, 252, MySQLParser.RULE_fields);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3098;
            this.insertIdentifier();
            this.state = 3103;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 29) {
                {
                {
                this.state = 3099;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 3100;
                this.insertIdentifier();
                }
                }
                this.state = 3105;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertValues(): InsertValuesContext {
        let localContext = new InsertValuesContext(this.context, this.state);
        this.enterRule(localContext, 254, MySQLParser.RULE_insertValues);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3106;
            _la = this.tokenStream.LA(1);
            if(!(_la === 635 || _la === 636)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3107;
            this.valueList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertQueryExpression(): InsertQueryExpressionContext {
        let localContext = new InsertQueryExpressionContext(this.context, this.state);
        this.enterRule(localContext, 256, MySQLParser.RULE_insertQueryExpression);
        try {
            this.state = 3119;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 254, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3109;
                this.queryExpression();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3110;
                this.queryExpressionParens();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3116;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 253, this.context) ) {
                case 1:
                    {
                    this.state = 3111;
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.state = 3113;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 252, this.context) ) {
                    case 1:
                        {
                        this.state = 3112;
                        this.fields();
                        }
                        break;
                    }
                    this.state = 3115;
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                }
                this.state = 3118;
                this.queryExpressionWithOptLockingClauses();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public valueList(): ValueListContext {
        let localContext = new ValueListContext(this.context, this.state);
        this.enterRule(localContext, 258, MySQLParser.RULE_valueList);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3121;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 3123;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 255, this.context) ) {
            case 1:
                {
                this.state = 3122;
                this.values();
                }
                break;
            }
            this.state = 3125;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            this.state = 3134;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 257, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3126;
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.state = 3127;
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.state = 3129;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 256, this.context) ) {
                    case 1:
                        {
                        this.state = 3128;
                        this.values();
                        }
                        break;
                    }
                    this.state = 3131;
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    }
                }
                this.state = 3136;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 257, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public values(): ValuesContext {
        let localContext = new ValuesContext(this.context, this.state);
        this.enterRule(localContext, 260, MySQLParser.RULE_values);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3139;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 258, this.context) ) {
            case 1:
                {
                this.state = 3137;
                this.expr(0);
                }
                break;
            case 2:
                {
                this.state = 3138;
                this.match(MySQLParser.DEFAULT_SYMBOL);
                }
                break;
            }
            this.state = 3148;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 29) {
                {
                {
                this.state = 3141;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 3144;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 259, this.context) ) {
                case 1:
                    {
                    this.state = 3142;
                    this.expr(0);
                    }
                    break;
                case 2:
                    {
                    this.state = 3143;
                    this.match(MySQLParser.DEFAULT_SYMBOL);
                    }
                    break;
                }
                }
                }
                this.state = 3150;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public valuesReference(): ValuesReferenceContext {
        let localContext = new ValuesReferenceContext(this.context, this.state);
        this.enterRule(localContext, 262, MySQLParser.RULE_valuesReference);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3151;
            if (!( this.serverVersion >= 80018)) {
                throw this.createFailedPredicateException(" this.serverVersion >= 80018");
            }
            this.state = 3152;
            this.match(MySQLParser.AS_SYMBOL);
            this.state = 3153;
            this.identifier();
            this.state = 3155;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 32) {
                {
                this.state = 3154;
                this.columnInternalRefList();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertUpdateList(): InsertUpdateListContext {
        let localContext = new InsertUpdateListContext(this.context, this.state);
        this.enterRule(localContext, 264, MySQLParser.RULE_insertUpdateList);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3157;
            this.match(MySQLParser.ON_SYMBOL);
            this.state = 3158;
            this.match(MySQLParser.DUPLICATE_SYMBOL);
            this.state = 3159;
            this.match(MySQLParser.KEY_SYMBOL);
            this.state = 3160;
            this.match(MySQLParser.UPDATE_SYMBOL);
            this.state = 3161;
            this.updateList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public loadStatement(): LoadStatementContext {
        let localContext = new LoadStatementContext(this.context, this.state);
        this.enterRule(localContext, 266, MySQLParser.RULE_loadStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3163;
            this.match(MySQLParser.LOAD_SYMBOL);
            this.state = 3164;
            this.dataOrXml();
            this.state = 3166;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 262, this.context) ) {
            case 1:
                {
                this.state = 3165;
                this.loadDataLock();
                }
                break;
            }
            this.state = 3169;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 263, this.context) ) {
            case 1:
                {
                this.state = 3168;
                this.loadFrom();
                }
                break;
            }
            this.state = 3172;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 264, this.context) ) {
            case 1:
                {
                this.state = 3171;
                this.match(MySQLParser.LOCAL_SYMBOL);
                }
                break;
            }
            this.state = 3175;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 265, this.context) ) {
            case 1:
                {
                this.state = 3174;
                this.loadSourceType();
                }
                break;
            }
            this.state = 3177;
            this.textStringLiteral();
            this.state = 3179;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 266, this.context) ) {
            case 1:
                {
                this.state = 3178;
                this.sourceCount();
                }
                break;
            }
            this.state = 3182;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 267, this.context) ) {
            case 1:
                {
                this.state = 3181;
                this.sourceOrder();
                }
                break;
            }
            this.state = 3185;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 264 || _la === 475) {
                {
                this.state = 3184;
                _la = this.tokenStream.LA(1);
                if(!(_la === 264 || _la === 475)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 3187;
            this.match(MySQLParser.INTO_SYMBOL);
            this.state = 3188;
            this.match(MySQLParser.TABLE_SYMBOL);
            this.state = 3189;
            this.tableRef();
            this.state = 3191;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 269, this.context) ) {
            case 1:
                {
                this.state = 3190;
                this.usePartition();
                }
                break;
            }
            this.state = 3194;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 270, this.context) ) {
            case 1:
                {
                this.state = 3193;
                this.charsetClause();
                }
                break;
            }
            this.state = 3197;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 271, this.context) ) {
            case 1:
                {
                this.state = 3196;
                this.xmlRowsIdentifiedBy();
                }
                break;
            }
            this.state = 3200;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 272, this.context) ) {
            case 1:
                {
                this.state = 3199;
                this.fieldsClause();
                }
                break;
            }
            this.state = 3203;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 273, this.context) ) {
            case 1:
                {
                this.state = 3202;
                this.linesClause();
                }
                break;
            }
            this.state = 3205;
            this.loadDataFileTail();
            this.state = 3207;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 274, this.context) ) {
            case 1:
                {
                this.state = 3206;
                this.loadParallel();
                }
                break;
            }
            this.state = 3210;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 275, this.context) ) {
            case 1:
                {
                this.state = 3209;
                this.loadMemory();
                }
                break;
            }
            this.state = 3213;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 276, this.context) ) {
            case 1:
                {
                this.state = 3212;
                this.loadAlgorithm();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dataOrXml(): DataOrXmlContext {
        let localContext = new DataOrXmlContext(this.context, this.state);
        this.enterRule(localContext, 268, MySQLParser.RULE_dataOrXml);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3215;
            _la = this.tokenStream.LA(1);
            if(!(_la === 153 || _la === 661)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public loadDataLock(): LoadDataLockContext {
        let localContext = new LoadDataLockContext(this.context, this.state);
        this.enterRule(localContext, 270, MySQLParser.RULE_loadDataLock);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3217;
            _la = this.tokenStream.LA(1);
            if(!(_la === 125 || _la === 321)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public loadFrom(): LoadFromContext {
        let localContext = new LoadFromContext(this.context, this.state);
        this.enterRule(localContext, 272, MySQLParser.RULE_loadFrom);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3219;
            if (!(this.serverVersion >= 80200)) {
                throw this.createFailedPredicateException("this.serverVersion >= 80200");
            }
            this.state = 3220;
            this.match(MySQLParser.FROM_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public loadSourceType(): LoadSourceTypeContext {
        let localContext = new LoadSourceTypeContext(this.context, this.state);
        this.enterRule(localContext, 274, MySQLParser.RULE_loadSourceType);
        let _la: number;
        try {
            this.state = 3225;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 277, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3222;
                this.match(MySQLParser.INFILE_SYMBOL);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3223;
                if (!(this.serverVersion >= 80200)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80200");
                }
                this.state = 3224;
                _la = this.tokenStream.LA(1);
                if(!(_la === 805 || _la === 811)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sourceCount(): SourceCountContext {
        let localContext = new SourceCountContext(this.context, this.state);
        this.enterRule(localContext, 276, MySQLParser.RULE_sourceCount);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3227;
            if (!(this.serverVersion >= 80200)) {
                throw this.createFailedPredicateException("this.serverVersion >= 80200");
            }
            this.state = 3233;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 278, this.context) ) {
            case 1:
                {
                this.state = 3228;
                this.match(MySQLParser.COUNT_SYMBOL);
                this.state = 3229;
                this.match(MySQLParser.INT_NUMBER);
                }
                break;
            case 2:
                {
                this.state = 3230;
                this.pureIdentifier();
                this.state = 3231;
                this.match(MySQLParser.INT_NUMBER);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sourceOrder(): SourceOrderContext {
        let localContext = new SourceOrderContext(this.context, this.state);
        this.enterRule(localContext, 278, MySQLParser.RULE_sourceOrder);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3235;
            if (!(this.serverVersion >= 80200)) {
                throw this.createFailedPredicateException("this.serverVersion >= 80200");
            }
            this.state = 3236;
            this.match(MySQLParser.IN_SYMBOL);
            this.state = 3237;
            this.match(MySQLParser.PRIMARY_SYMBOL);
            this.state = 3238;
            this.match(MySQLParser.KEY_SYMBOL);
            this.state = 3239;
            this.match(MySQLParser.ORDER_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xmlRowsIdentifiedBy(): XmlRowsIdentifiedByContext {
        let localContext = new XmlRowsIdentifiedByContext(this.context, this.state);
        this.enterRule(localContext, 280, MySQLParser.RULE_xmlRowsIdentifiedBy);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3241;
            this.match(MySQLParser.ROWS_SYMBOL);
            this.state = 3242;
            this.match(MySQLParser.IDENTIFIED_SYMBOL);
            this.state = 3243;
            this.match(MySQLParser.BY_SYMBOL);
            this.state = 3244;
            this.textString();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public loadDataFileTail(): LoadDataFileTailContext {
        let localContext = new LoadDataFileTailContext(this.context, this.state);
        this.enterRule(localContext, 282, MySQLParser.RULE_loadDataFileTail);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3249;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 279, this.context) ) {
            case 1:
                {
                this.state = 3246;
                this.match(MySQLParser.IGNORE_SYMBOL);
                this.state = 3247;
                this.match(MySQLParser.INT_NUMBER);
                this.state = 3248;
                _la = this.tokenStream.LA(1);
                if(!(_la === 308 || _la === 500)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
            this.state = 3252;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 280, this.context) ) {
            case 1:
                {
                this.state = 3251;
                this.loadDataFileTargetList();
                }
                break;
            }
            this.state = 3256;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 281, this.context) ) {
            case 1:
                {
                this.state = 3254;
                this.match(MySQLParser.SET_SYMBOL);
                this.state = 3255;
                this.updateList();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public loadDataFileTargetList(): LoadDataFileTargetListContext {
        let localContext = new LoadDataFileTargetListContext(this.context, this.state);
        this.enterRule(localContext, 284, MySQLParser.RULE_loadDataFileTargetList);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3258;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 3260;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 282, this.context) ) {
            case 1:
                {
                this.state = 3259;
                this.fieldOrVariableList();
                }
                break;
            }
            this.state = 3262;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fieldOrVariableList(): FieldOrVariableListContext {
        let localContext = new FieldOrVariableListContext(this.context, this.state);
        this.enterRule(localContext, 286, MySQLParser.RULE_fieldOrVariableList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3268;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 283, this.context) ) {
            case 1:
                {
                this.state = 3264;
                this.columnRef();
                }
                break;
            case 2:
                {
                this.state = 3265;
                this.match(MySQLParser.AT_SIGN_SYMBOL);
                this.state = 3266;
                this.textOrIdentifier();
                }
                break;
            case 3:
                {
                this.state = 3267;
                this.match(MySQLParser.AT_AT_SIGN_SYMBOL);
                }
                break;
            }
            this.state = 3280;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 29) {
                {
                {
                this.state = 3270;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 3276;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 284, this.context) ) {
                case 1:
                    {
                    this.state = 3271;
                    this.columnRef();
                    }
                    break;
                case 2:
                    {
                    this.state = 3272;
                    this.match(MySQLParser.AT_SIGN_SYMBOL);
                    this.state = 3273;
                    this.textOrIdentifier();
                    }
                    break;
                case 3:
                    {
                    this.state = 3274;
                    this.match(MySQLParser.AT_TEXT_SUFFIX);
                    }
                    break;
                case 4:
                    {
                    this.state = 3275;
                    this.match(MySQLParser.AT_AT_SIGN_SYMBOL);
                    }
                    break;
                }
                }
                }
                this.state = 3282;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public loadAlgorithm(): LoadAlgorithmContext {
        let localContext = new LoadAlgorithmContext(this.context, this.state);
        this.enterRule(localContext, 288, MySQLParser.RULE_loadAlgorithm);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3283;
            if (!(this.serverVersion >= 80200)) {
                throw this.createFailedPredicateException("this.serverVersion >= 80200");
            }
            this.state = 3284;
            this.match(MySQLParser.ALGORITHM_SYMBOL);
            this.state = 3285;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 3286;
            this.match(MySQLParser.BULK_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public loadParallel(): LoadParallelContext {
        let localContext = new LoadParallelContext(this.context, this.state);
        this.enterRule(localContext, 290, MySQLParser.RULE_loadParallel);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3288;
            if (!(this.serverVersion >= 80200)) {
                throw this.createFailedPredicateException("this.serverVersion >= 80200");
            }
            this.state = 3289;
            this.match(MySQLParser.PARALLEL_SYMBOL);
            this.state = 3290;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 3291;
            this.match(MySQLParser.INT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public loadMemory(): LoadMemoryContext {
        let localContext = new LoadMemoryContext(this.context, this.state);
        this.enterRule(localContext, 292, MySQLParser.RULE_loadMemory);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3293;
            if (!(this.serverVersion >= 80200)) {
                throw this.createFailedPredicateException("this.serverVersion >= 80200");
            }
            this.state = 3294;
            this.match(MySQLParser.MEMORY_SYMBOL);
            this.state = 3295;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 3296;
            this.sizeNumber();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replaceStatement(): ReplaceStatementContext {
        let localContext = new ReplaceStatementContext(this.context, this.state);
        this.enterRule(localContext, 294, MySQLParser.RULE_replaceStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3298;
            this.match(MySQLParser.REPLACE_SYMBOL);
            this.state = 3300;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 286, this.context) ) {
            case 1:
                {
                this.state = 3299;
                _la = this.tokenStream.LA(1);
                if(!(_la === 169 || _la === 321)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
            this.state = 3303;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 287, this.context) ) {
            case 1:
                {
                this.state = 3302;
                this.match(MySQLParser.INTO_SYMBOL);
                }
                break;
            }
            this.state = 3305;
            this.tableRef();
            this.state = 3307;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 288, this.context) ) {
            case 1:
                {
                this.state = 3306;
                this.usePartition();
                }
                break;
            }
            this.state = 3313;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 289, this.context) ) {
            case 1:
                {
                this.state = 3309;
                this.insertFromConstructor();
                }
                break;
            case 2:
                {
                this.state = 3310;
                this.match(MySQLParser.SET_SYMBOL);
                this.state = 3311;
                this.updateList();
                }
                break;
            case 3:
                {
                this.state = 3312;
                this.insertQueryExpression();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectStatement(): SelectStatementContext {
        let localContext = new SelectStatementContext(this.context, this.state);
        this.enterRule(localContext, 296, MySQLParser.RULE_selectStatement);
        try {
            this.state = 3320;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 291, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3315;
                this.queryExpression();
                this.state = 3317;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 290, this.context) ) {
                case 1:
                    {
                    this.state = 3316;
                    this.lockingClauseList();
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3319;
                this.selectStatementWithInto();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectStatementWithInto(): SelectStatementWithIntoContext {
        let localContext = new SelectStatementWithIntoContext(this.context, this.state);
        this.enterRule(localContext, 298, MySQLParser.RULE_selectStatementWithInto);
        try {
            this.state = 3339;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 293, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3322;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 3323;
                this.selectStatementWithInto();
                this.state = 3324;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3326;
                this.queryExpression();
                this.state = 3327;
                this.intoClause();
                this.state = 3329;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 292, this.context) ) {
                case 1:
                    {
                    this.state = 3328;
                    this.lockingClauseList();
                    }
                    break;
                }
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3331;
                this.queryExpression();
                this.state = 3332;
                this.lockingClauseList();
                this.state = 3333;
                this.intoClause();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3335;
                if (!(this.serverVersion >= 80024 && this.serverVersion < 80031)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80024 && this.serverVersion < 80031");
                }
                this.state = 3336;
                this.queryExpressionParens();
                this.state = 3337;
                this.intoClause();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public queryExpression(): QueryExpressionContext {
        let localContext = new QueryExpressionContext(this.context, this.state);
        this.enterRule(localContext, 300, MySQLParser.RULE_queryExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3342;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 294, this.context) ) {
            case 1:
                {
                this.state = 3341;
                this.withClause();
                }
                break;
            }
            this.state = 3344;
            this.queryExpressionBody();
            this.state = 3346;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 295, this.context) ) {
            case 1:
                {
                this.state = 3345;
                this.orderClause();
                }
                break;
            }
            this.state = 3349;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 296, this.context) ) {
            case 1:
                {
                this.state = 3348;
                this.limitClause();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public queryExpressionBody(): QueryExpressionBodyContext {
        let localContext = new QueryExpressionBodyContext(this.context, this.state);
        this.enterRule(localContext, 302, MySQLParser.RULE_queryExpressionBody);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3353;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 297, this.context) ) {
            case 1:
                {
                this.state = 3351;
                this.queryPrimary();
                }
                break;
            case 2:
                {
                this.state = 3352;
                this.queryExpressionParens();
                }
                break;
            }
            this.state = 3366;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 300, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3358;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 298, this.context) ) {
                    case 1:
                        {
                        this.state = 3355;
                        this.match(MySQLParser.UNION_SYMBOL);
                        }
                        break;
                    case 2:
                        {
                        this.state = 3356;
                        if (!(this.serverVersion >= 80031)) {
                            throw this.createFailedPredicateException("this.serverVersion >= 80031");
                        }
                        this.state = 3357;
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 671 || _la === 803)) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        }
                        break;
                    }
                    this.state = 3361;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 299, this.context) ) {
                    case 1:
                        {
                        this.state = 3360;
                        this.unionOption();
                        }
                        break;
                    }
                    this.state = 3363;
                    this.queryExpressionBody();
                    }
                    }
                }
                this.state = 3368;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 300, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public queryExpressionParens(): QueryExpressionParensContext {
        let localContext = new QueryExpressionParensContext(this.context, this.state);
        this.enterRule(localContext, 304, MySQLParser.RULE_queryExpressionParens);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3369;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 3372;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 301, this.context) ) {
            case 1:
                {
                this.state = 3370;
                this.queryExpressionParens();
                }
                break;
            case 2:
                {
                this.state = 3371;
                this.queryExpressionWithOptLockingClauses();
                }
                break;
            }
            this.state = 3374;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public queryPrimary(): QueryPrimaryContext {
        let localContext = new QueryPrimaryContext(this.context, this.state);
        this.enterRule(localContext, 306, MySQLParser.RULE_queryPrimary);
        try {
            this.state = 3381;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 302, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3376;
                this.querySpecification();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3377;
                if (!(this.serverVersion >= 80019)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80019");
                }
                this.state = 3378;
                this.tableValueConstructor();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3379;
                if (!(this.serverVersion >= 80019)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80019");
                }
                this.state = 3380;
                this.explicitTable();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public querySpecification(): QuerySpecificationContext {
        let localContext = new QuerySpecificationContext(this.context, this.state);
        this.enterRule(localContext, 308, MySQLParser.RULE_querySpecification);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3383;
            this.match(MySQLParser.SELECT_SYMBOL);
            this.state = 3387;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 303, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3384;
                    this.selectOption();
                    }
                    }
                }
                this.state = 3389;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 303, this.context);
            }
            this.state = 3390;
            this.selectItemList();
            this.state = 3392;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 304, this.context) ) {
            case 1:
                {
                this.state = 3391;
                this.intoClause();
                }
                break;
            }
            this.state = 3395;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 305, this.context) ) {
            case 1:
                {
                this.state = 3394;
                this.fromClause();
                }
                break;
            }
            this.state = 3398;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 306, this.context) ) {
            case 1:
                {
                this.state = 3397;
                this.whereClause();
                }
                break;
            }
            this.state = 3401;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 307, this.context) ) {
            case 1:
                {
                this.state = 3400;
                this.groupByClause();
                }
                break;
            }
            this.state = 3404;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 308, this.context) ) {
            case 1:
                {
                this.state = 3403;
                this.havingClause();
                }
                break;
            }
            this.state = 3407;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 309, this.context) ) {
            case 1:
                {
                this.state = 3406;
                this.windowClause();
                }
                break;
            }
            this.state = 3410;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 310, this.context) ) {
            case 1:
                {
                this.state = 3409;
                this.qualifyClause();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public subquery(): SubqueryContext {
        let localContext = new SubqueryContext(this.context, this.state);
        this.enterRule(localContext, 310, MySQLParser.RULE_subquery);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3412;
            this.queryExpressionParens();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public querySpecOption(): QuerySpecOptionContext {
        let localContext = new QuerySpecOptionContext(this.context, this.state);
        this.enterRule(localContext, 312, MySQLParser.RULE_querySpecOption);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3414;
            _la = this.tokenStream.LA(1);
            if(!(_la === 57 || _la === 180 || _la === 255 || ((((_la - 542)) & ~0x1F) === 0 && ((1 << (_la - 542)) & 8388631) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public limitClause(): LimitClauseContext {
        let localContext = new LimitClauseContext(this.context, this.state);
        this.enterRule(localContext, 314, MySQLParser.RULE_limitClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3416;
            this.match(MySQLParser.LIMIT_SYMBOL);
            this.state = 3417;
            this.limitOptions();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simpleLimitClause(): SimpleLimitClauseContext {
        let localContext = new SimpleLimitClauseContext(this.context, this.state);
        this.enterRule(localContext, 316, MySQLParser.RULE_simpleLimitClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3419;
            this.match(MySQLParser.LIMIT_SYMBOL);
            this.state = 3420;
            this.limitOption();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public limitOptions(): LimitOptionsContext {
        let localContext = new LimitOptionsContext(this.context, this.state);
        this.enterRule(localContext, 318, MySQLParser.RULE_limitOptions);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3422;
            this.limitOption();
            this.state = 3425;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 311, this.context) ) {
            case 1:
                {
                this.state = 3423;
                _la = this.tokenStream.LA(1);
                if(!(_la === 29 || _la === 400)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3424;
                this.limitOption();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public limitOption(): LimitOptionContext {
        let localContext = new LimitOptionContext(this.context, this.state);
        this.enterRule(localContext, 320, MySQLParser.RULE_limitOption);
        let _la: number;
        try {
            this.state = 3429;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 312, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3427;
                this.identifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3428;
                _la = this.tokenStream.LA(1);
                if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 56) !== 0) || _la === 43)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public intoClause(): IntoClauseContext {
        let localContext = new IntoClauseContext(this.context, this.state);
        this.enterRule(localContext, 322, MySQLParser.RULE_intoClause);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3431;
            this.match(MySQLParser.INTO_SYMBOL);
            this.state = 3459;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 319, this.context) ) {
            case 1:
                {
                this.state = 3432;
                this.match(MySQLParser.OUTFILE_SYMBOL);
                this.state = 3433;
                this.textStringLiteral();
                this.state = 3435;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 313, this.context) ) {
                case 1:
                    {
                    this.state = 3434;
                    this.charsetClause();
                    }
                    break;
                }
                this.state = 3438;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 314, this.context) ) {
                case 1:
                    {
                    this.state = 3437;
                    this.fieldsClause();
                    }
                    break;
                }
                this.state = 3441;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 315, this.context) ) {
                case 1:
                    {
                    this.state = 3440;
                    this.linesClause();
                    }
                    break;
                }
                }
                break;
            case 2:
                {
                this.state = 3443;
                this.match(MySQLParser.DUMPFILE_SYMBOL);
                this.state = 3444;
                this.textStringLiteral();
                }
                break;
            case 3:
                {
                this.state = 3447;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 316, this.context) ) {
                case 1:
                    {
                    this.state = 3445;
                    this.textOrIdentifier();
                    }
                    break;
                case 2:
                    {
                    this.state = 3446;
                    this.userVariable();
                    }
                    break;
                }
                this.state = 3456;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 318, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 3449;
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.state = 3452;
                        this.errorHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this.tokenStream, 317, this.context) ) {
                        case 1:
                            {
                            this.state = 3450;
                            this.textOrIdentifier();
                            }
                            break;
                        case 2:
                            {
                            this.state = 3451;
                            this.userVariable();
                            }
                            break;
                        }
                        }
                        }
                    }
                    this.state = 3458;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 318, this.context);
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public procedureAnalyseClause(): ProcedureAnalyseClauseContext {
        let localContext = new ProcedureAnalyseClauseContext(this.context, this.state);
        this.enterRule(localContext, 324, MySQLParser.RULE_procedureAnalyseClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3461;
            this.match(MySQLParser.PROCEDURE_SYMBOL);
            this.state = 3462;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 3468;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 3) {
                {
                this.state = 3463;
                this.match(MySQLParser.INT_NUMBER);
                this.state = 3466;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 29) {
                    {
                    this.state = 3464;
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.state = 3465;
                    this.match(MySQLParser.INT_NUMBER);
                    }
                }

                }
            }

            this.state = 3470;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public havingClause(): HavingClauseContext {
        let localContext = new HavingClauseContext(this.context, this.state);
        this.enterRule(localContext, 326, MySQLParser.RULE_havingClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3472;
            this.match(MySQLParser.HAVING_SYMBOL);
            this.state = 3473;
            this.expr(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public qualifyClause(): QualifyClauseContext {
        let localContext = new QualifyClauseContext(this.context, this.state);
        this.enterRule(localContext, 328, MySQLParser.RULE_qualifyClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3475;
            if (!(this.serverVersion >= 80200)) {
                throw this.createFailedPredicateException("this.serverVersion >= 80200");
            }
            this.state = 3476;
            this.match(MySQLParser.QUALIFY_SYMBOL);
            this.state = 3477;
            this.expr(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowClause(): WindowClauseContext {
        let localContext = new WindowClauseContext(this.context, this.state);
        this.enterRule(localContext, 330, MySQLParser.RULE_windowClause);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3479;
            this.match(MySQLParser.WINDOW_SYMBOL);
            this.state = 3480;
            this.windowDefinition();
            this.state = 3485;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 322, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3481;
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.state = 3482;
                    this.windowDefinition();
                    }
                    }
                }
                this.state = 3487;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 322, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowDefinition(): WindowDefinitionContext {
        let localContext = new WindowDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 332, MySQLParser.RULE_windowDefinition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3488;
            this.windowName();
            this.state = 3489;
            this.match(MySQLParser.AS_SYMBOL);
            this.state = 3490;
            this.windowSpec();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowSpec(): WindowSpecContext {
        let localContext = new WindowSpecContext(this.context, this.state);
        this.enterRule(localContext, 334, MySQLParser.RULE_windowSpec);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3492;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 3493;
            this.windowSpecDetails();
            this.state = 3494;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowSpecDetails(): WindowSpecDetailsContext {
        let localContext = new WindowSpecDetailsContext(this.context, this.state);
        this.enterRule(localContext, 336, MySQLParser.RULE_windowSpecDetails);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3497;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 323, this.context) ) {
            case 1:
                {
                this.state = 3496;
                this.windowName();
                }
                break;
            }
            this.state = 3502;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 423) {
                {
                this.state = 3499;
                this.match(MySQLParser.PARTITION_SYMBOL);
                this.state = 3500;
                this.match(MySQLParser.BY_SYMBOL);
                this.state = 3501;
                this.orderList();
                }
            }

            this.state = 3505;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 411) {
                {
                this.state = 3504;
                this.orderClause();
                }
            }

            this.state = 3508;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 450 || _la === 500 || _la === 691) {
                {
                this.state = 3507;
                this.windowFrameClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowFrameClause(): WindowFrameClauseContext {
        let localContext = new WindowFrameClauseContext(this.context, this.state);
        this.enterRule(localContext, 338, MySQLParser.RULE_windowFrameClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3510;
            this.windowFrameUnits();
            this.state = 3511;
            this.windowFrameExtent();
            this.state = 3513;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 688) {
                {
                this.state = 3512;
                this.windowFrameExclusion();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowFrameUnits(): WindowFrameUnitsContext {
        let localContext = new WindowFrameUnitsContext(this.context, this.state);
        this.enterRule(localContext, 340, MySQLParser.RULE_windowFrameUnits);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3515;
            _la = this.tokenStream.LA(1);
            if(!(_la === 450 || _la === 500 || _la === 691)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowFrameExtent(): WindowFrameExtentContext {
        let localContext = new WindowFrameExtentContext(this.context, this.state);
        this.enterRule(localContext, 342, MySQLParser.RULE_windowFrameExtent);
        try {
            this.state = 3519;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.INT_NUMBER:
            case MySQLParser.LONG_NUMBER:
            case MySQLParser.ULONGLONG_NUMBER:
            case MySQLParser.PARAM_MARKER:
            case MySQLParser.DECIMAL_NUMBER:
            case MySQLParser.FLOAT_NUMBER:
            case MySQLParser.CURRENT_SYMBOL:
            case MySQLParser.INTERVAL_SYMBOL:
            case MySQLParser.UNBOUNDED_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3517;
                this.windowFrameStart();
                }
                break;
            case MySQLParser.BETWEEN_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3518;
                this.windowFrameBetween();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowFrameStart(): WindowFrameStartContext {
        let localContext = new WindowFrameStartContext(this.context, this.state);
        this.enterRule(localContext, 344, MySQLParser.RULE_windowFrameStart);
        try {
            this.state = 3535;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.UNBOUNDED_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3521;
                this.match(MySQLParser.UNBOUNDED_SYMBOL);
                this.state = 3522;
                this.match(MySQLParser.PRECEDING_SYMBOL);
                }
                break;
            case MySQLParser.INT_NUMBER:
            case MySQLParser.LONG_NUMBER:
            case MySQLParser.ULONGLONG_NUMBER:
            case MySQLParser.DECIMAL_NUMBER:
            case MySQLParser.FLOAT_NUMBER:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3523;
                this.ulonglongNumber();
                this.state = 3524;
                this.match(MySQLParser.PRECEDING_SYMBOL);
                }
                break;
            case MySQLParser.PARAM_MARKER:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3526;
                this.match(MySQLParser.PARAM_MARKER);
                this.state = 3527;
                this.match(MySQLParser.PRECEDING_SYMBOL);
                }
                break;
            case MySQLParser.INTERVAL_SYMBOL:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3528;
                this.match(MySQLParser.INTERVAL_SYMBOL);
                this.state = 3529;
                this.expr(0);
                this.state = 3530;
                this.interval();
                this.state = 3531;
                this.match(MySQLParser.PRECEDING_SYMBOL);
                }
                break;
            case MySQLParser.CURRENT_SYMBOL:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3533;
                this.match(MySQLParser.CURRENT_SYMBOL);
                this.state = 3534;
                this.match(MySQLParser.ROW_SYMBOL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowFrameBetween(): WindowFrameBetweenContext {
        let localContext = new WindowFrameBetweenContext(this.context, this.state);
        this.enterRule(localContext, 346, MySQLParser.RULE_windowFrameBetween);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3537;
            this.match(MySQLParser.BETWEEN_SYMBOL);
            this.state = 3538;
            this.windowFrameBound();
            this.state = 3539;
            this.match(MySQLParser.AND_SYMBOL);
            this.state = 3540;
            this.windowFrameBound();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowFrameBound(): WindowFrameBoundContext {
        let localContext = new WindowFrameBoundContext(this.context, this.state);
        this.enterRule(localContext, 348, MySQLParser.RULE_windowFrameBound);
        try {
            this.state = 3555;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 330, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3542;
                this.windowFrameStart();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3543;
                this.match(MySQLParser.UNBOUNDED_SYMBOL);
                this.state = 3544;
                this.match(MySQLParser.FOLLOWING_SYMBOL);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3545;
                this.ulonglongNumber();
                this.state = 3546;
                this.match(MySQLParser.FOLLOWING_SYMBOL);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3548;
                this.match(MySQLParser.PARAM_MARKER);
                this.state = 3549;
                this.match(MySQLParser.FOLLOWING_SYMBOL);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3550;
                this.match(MySQLParser.INTERVAL_SYMBOL);
                this.state = 3551;
                this.expr(0);
                this.state = 3552;
                this.interval();
                this.state = 3553;
                this.match(MySQLParser.FOLLOWING_SYMBOL);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowFrameExclusion(): WindowFrameExclusionContext {
        let localContext = new WindowFrameExclusionContext(this.context, this.state);
        this.enterRule(localContext, 350, MySQLParser.RULE_windowFrameExclusion);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3557;
            this.match(MySQLParser.EXCLUDE_SYMBOL);
            this.state = 3564;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.CURRENT_SYMBOL:
                {
                this.state = 3558;
                this.match(MySQLParser.CURRENT_SYMBOL);
                this.state = 3559;
                this.match(MySQLParser.ROW_SYMBOL);
                }
                break;
            case MySQLParser.GROUP_SYMBOL:
                {
                this.state = 3560;
                this.match(MySQLParser.GROUP_SYMBOL);
                }
                break;
            case MySQLParser.TIES_SYMBOL:
                {
                this.state = 3561;
                this.match(MySQLParser.TIES_SYMBOL);
                }
                break;
            case MySQLParser.NO_SYMBOL:
                {
                this.state = 3562;
                this.match(MySQLParser.NO_SYMBOL);
                this.state = 3563;
                this.match(MySQLParser.OTHERS_SYMBOL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public withClause(): WithClauseContext {
        let localContext = new WithClauseContext(this.context, this.state);
        this.enterRule(localContext, 352, MySQLParser.RULE_withClause);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3566;
            this.match(MySQLParser.WITH_SYMBOL);
            this.state = 3568;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 332, this.context) ) {
            case 1:
                {
                this.state = 3567;
                this.match(MySQLParser.RECURSIVE_SYMBOL);
                }
                break;
            }
            this.state = 3570;
            this.commonTableExpression();
            this.state = 3575;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 333, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3571;
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.state = 3572;
                    this.commonTableExpression();
                    }
                    }
                }
                this.state = 3577;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 333, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public commonTableExpression(): CommonTableExpressionContext {
        let localContext = new CommonTableExpressionContext(this.context, this.state);
        this.enterRule(localContext, 354, MySQLParser.RULE_commonTableExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3578;
            this.identifier();
            this.state = 3580;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 32) {
                {
                this.state = 3579;
                this.columnInternalRefList();
                }
            }

            this.state = 3582;
            this.match(MySQLParser.AS_SYMBOL);
            this.state = 3583;
            this.subquery();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupByClause(): GroupByClauseContext {
        let localContext = new GroupByClauseContext(this.context, this.state);
        this.enterRule(localContext, 356, MySQLParser.RULE_groupByClause);
        let _la: number;
        try {
            this.state = 3599;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 336, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3585;
                this.match(MySQLParser.GROUP_SYMBOL);
                this.state = 3586;
                this.match(MySQLParser.BY_SYMBOL);
                this.state = 3587;
                this.orderList();
                this.state = 3589;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 335, this.context) ) {
                case 1:
                    {
                    this.state = 3588;
                    this.olapOption();
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3591;
                if (!(this.serverVersion >= 80032)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80032");
                }
                this.state = 3592;
                this.match(MySQLParser.GROUP_SYMBOL);
                this.state = 3593;
                this.match(MySQLParser.BY_SYMBOL);
                this.state = 3594;
                _la = this.tokenStream.LA(1);
                if(!(_la === 141 || _la === 497)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3595;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 3596;
                this.groupList();
                this.state = 3597;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public olapOption(): OlapOptionContext {
        let localContext = new OlapOptionContext(this.context, this.state);
        this.enterRule(localContext, 358, MySQLParser.RULE_olapOption);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3601;
            this.match(MySQLParser.WITH_SYMBOL);
            this.state = 3602;
            this.match(MySQLParser.ROLLUP_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public orderClause(): OrderClauseContext {
        let localContext = new OrderClauseContext(this.context, this.state);
        this.enterRule(localContext, 360, MySQLParser.RULE_orderClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3604;
            this.match(MySQLParser.ORDER_SYMBOL);
            this.state = 3605;
            this.match(MySQLParser.BY_SYMBOL);
            this.state = 3606;
            this.orderList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public direction(): DirectionContext {
        let localContext = new DirectionContext(this.context, this.state);
        this.enterRule(localContext, 362, MySQLParser.RULE_direction);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3608;
            _la = this.tokenStream.LA(1);
            if(!(_la === 64 || _la === 172)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fromClause(): FromClauseContext {
        let localContext = new FromClauseContext(this.context, this.state);
        this.enterRule(localContext, 364, MySQLParser.RULE_fromClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3610;
            this.match(MySQLParser.FROM_SYMBOL);
            this.state = 3613;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 337, this.context) ) {
            case 1:
                {
                this.state = 3611;
                this.match(MySQLParser.DUAL_SYMBOL);
                }
                break;
            case 2:
                {
                this.state = 3612;
                this.tableReferenceList();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableReferenceList(): TableReferenceListContext {
        let localContext = new TableReferenceListContext(this.context, this.state);
        this.enterRule(localContext, 366, MySQLParser.RULE_tableReferenceList);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3615;
            this.tableReference();
            this.state = 3620;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 338, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3616;
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.state = 3617;
                    this.tableReference();
                    }
                    }
                }
                this.state = 3622;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 338, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableValueConstructor(): TableValueConstructorContext {
        let localContext = new TableValueConstructorContext(this.context, this.state);
        this.enterRule(localContext, 368, MySQLParser.RULE_tableValueConstructor);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3623;
            this.match(MySQLParser.VALUES_SYMBOL);
            this.state = 3624;
            this.rowValueExplicit();
            this.state = 3629;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 339, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3625;
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.state = 3626;
                    this.rowValueExplicit();
                    }
                    }
                }
                this.state = 3631;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 339, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public explicitTable(): ExplicitTableContext {
        let localContext = new ExplicitTableContext(this.context, this.state);
        this.enterRule(localContext, 370, MySQLParser.RULE_explicitTable);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3632;
            this.match(MySQLParser.TABLE_SYMBOL);
            this.state = 3633;
            this.tableRef();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rowValueExplicit(): RowValueExplicitContext {
        let localContext = new RowValueExplicitContext(this.context, this.state);
        this.enterRule(localContext, 372, MySQLParser.RULE_rowValueExplicit);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3635;
            this.match(MySQLParser.ROW_SYMBOL);
            this.state = 3636;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 3638;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 340, this.context) ) {
            case 1:
                {
                this.state = 3637;
                this.values();
                }
                break;
            }
            this.state = 3640;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectOption(): SelectOptionContext {
        let localContext = new SelectOptionContext(this.context, this.state);
        this.enterRule(localContext, 374, MySQLParser.RULE_selectOption);
        try {
            this.state = 3644;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.ALL_SYMBOL:
            case MySQLParser.DISTINCT_SYMBOL:
            case MySQLParser.HIGH_PRIORITY_SYMBOL:
            case MySQLParser.SQL_BIG_RESULT_SYMBOL:
            case MySQLParser.SQL_BUFFER_RESULT_SYMBOL:
            case MySQLParser.SQL_CALC_FOUND_ROWS_SYMBOL:
            case MySQLParser.SQL_SMALL_RESULT_SYMBOL:
            case MySQLParser.STRAIGHT_JOIN_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3642;
                this.querySpecOption();
                }
                break;
            case MySQLParser.SQL_NO_CACHE_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3643;
                this.match(MySQLParser.SQL_NO_CACHE_SYMBOL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lockingClauseList(): LockingClauseListContext {
        let localContext = new LockingClauseListContext(this.context, this.state);
        this.enterRule(localContext, 376, MySQLParser.RULE_lockingClauseList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3646;
            if (!(this.serverVersion >= 80031)) {
                throw this.createFailedPredicateException("this.serverVersion >= 80031");
            }
            this.state = 3648;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 3647;
                this.lockingClause();
                }
                }
                this.state = 3650;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 232 || _la === 314);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lockingClause(): LockingClauseContext {
        let localContext = new LockingClauseContext(this.context, this.state);
        this.enterRule(localContext, 378, MySQLParser.RULE_lockingClause);
        let _la: number;
        try {
            this.state = 3665;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.FOR_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3652;
                this.match(MySQLParser.FOR_SYMBOL);
                this.state = 3653;
                this.lockStrengh();
                this.state = 3656;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 676) {
                    {
                    this.state = 3654;
                    this.match(MySQLParser.OF_SYMBOL);
                    this.state = 3655;
                    this.tableAliasRefList();
                    }
                }

                this.state = 3659;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 677 || _la === 679) {
                    {
                    this.state = 3658;
                    this.lockedRowAction();
                    }
                }

                }
                break;
            case MySQLParser.LOCK_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3661;
                this.match(MySQLParser.LOCK_SYMBOL);
                this.state = 3662;
                this.match(MySQLParser.IN_SYMBOL);
                this.state = 3663;
                this.match(MySQLParser.SHARE_SYMBOL);
                this.state = 3664;
                this.match(MySQLParser.MODE_SYMBOL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lockStrengh(): LockStrenghContext {
        let localContext = new LockStrenghContext(this.context, this.state);
        this.enterRule(localContext, 380, MySQLParser.RULE_lockStrengh);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3667;
            _la = this.tokenStream.LA(1);
            if(!(_la === 520 || _la === 623)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lockedRowAction(): LockedRowActionContext {
        let localContext = new LockedRowActionContext(this.context, this.state);
        this.enterRule(localContext, 382, MySQLParser.RULE_lockedRowAction);
        try {
            this.state = 3672;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.SKIP_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3669;
                this.match(MySQLParser.SKIP_SYMBOL);
                this.state = 3670;
                this.match(MySQLParser.LOCKED_SYMBOL);
                }
                break;
            case MySQLParser.NOWAIT_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3671;
                this.match(MySQLParser.NOWAIT_SYMBOL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectItemList(): SelectItemListContext {
        let localContext = new SelectItemListContext(this.context, this.state);
        this.enterRule(localContext, 384, MySQLParser.RULE_selectItemList);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3676;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 347, this.context) ) {
            case 1:
                {
                this.state = 3674;
                this.selectItem();
                }
                break;
            case 2:
                {
                this.state = 3675;
                this.match(MySQLParser.MULT_OPERATOR);
                }
                break;
            }
            this.state = 3682;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 348, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3678;
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.state = 3679;
                    this.selectItem();
                    }
                    }
                }
                this.state = 3684;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 348, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectItem(): SelectItemContext {
        let localContext = new SelectItemContext(this.context, this.state);
        this.enterRule(localContext, 386, MySQLParser.RULE_selectItem);
        try {
            this.state = 3690;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 350, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3685;
                this.tableWild();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3686;
                this.expr(0);
                this.state = 3688;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 349, this.context) ) {
                case 1:
                    {
                    this.state = 3687;
                    this.selectAlias();
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectAlias(): SelectAliasContext {
        let localContext = new SelectAliasContext(this.context, this.state);
        this.enterRule(localContext, 388, MySQLParser.RULE_selectAlias);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3693;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 351, this.context) ) {
            case 1:
                {
                this.state = 3692;
                this.match(MySQLParser.AS_SYMBOL);
                }
                break;
            }
            this.state = 3697;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 352, this.context) ) {
            case 1:
                {
                this.state = 3695;
                this.identifier();
                }
                break;
            case 2:
                {
                this.state = 3696;
                this.textStringLiteral();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public whereClause(): WhereClauseContext {
        let localContext = new WhereClauseContext(this.context, this.state);
        this.enterRule(localContext, 390, MySQLParser.RULE_whereClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3699;
            this.match(MySQLParser.WHERE_SYMBOL);
            this.state = 3700;
            this.expr(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableReference(): TableReferenceContext {
        let localContext = new TableReferenceContext(this.context, this.state);
        this.enterRule(localContext, 392, MySQLParser.RULE_tableReference);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3712;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 354, this.context) ) {
            case 1:
                {
                this.state = 3702;
                this.tableFactor();
                }
                break;
            case 2:
                {
                this.state = 3703;
                this.match(MySQLParser.OPEN_CURLY_SYMBOL);
                this.state = 3707;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 353, this.context) ) {
                case 1:
                    {
                    this.state = 3704;
                    if (!(this.serverVersion < 80017)) {
                        throw this.createFailedPredicateException("this.serverVersion < 80017");
                    }
                    this.state = 3705;
                    this.identifier();
                    }
                    break;
                case 2:
                    {
                    this.state = 3706;
                    this.match(MySQLParser.OJ_SYMBOL);
                    }
                    break;
                }
                this.state = 3709;
                this.escapedTableReference();
                this.state = 3710;
                this.match(MySQLParser.CLOSE_CURLY_SYMBOL);
                }
                break;
            }
            this.state = 3717;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 355, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3714;
                    this.joinedTable();
                    }
                    }
                }
                this.state = 3719;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 355, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public escapedTableReference(): EscapedTableReferenceContext {
        let localContext = new EscapedTableReferenceContext(this.context, this.state);
        this.enterRule(localContext, 394, MySQLParser.RULE_escapedTableReference);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3720;
            this.tableFactor();
            this.state = 3724;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 140 || ((((_la - 271)) & ~0x1F) === 0 && ((1 << (_la - 271)) & 2148532225) !== 0) || _la === 382 || _la === 495 || _la === 565) {
                {
                {
                this.state = 3721;
                this.joinedTable();
                }
                }
                this.state = 3726;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public joinedTable(): JoinedTableContext {
        let localContext = new JoinedTableContext(this.context, this.state);
        this.enterRule(localContext, 396, MySQLParser.RULE_joinedTable);
        try {
            this.state = 3746;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.CROSS_SYMBOL:
            case MySQLParser.INNER_SYMBOL:
            case MySQLParser.JOIN_SYMBOL:
            case MySQLParser.STRAIGHT_JOIN_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3727;
                this.innerJoinType();
                this.state = 3728;
                this.tableReference();
                this.state = 3733;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 357, this.context) ) {
                case 1:
                    {
                    this.state = 3729;
                    this.match(MySQLParser.ON_SYMBOL);
                    this.state = 3730;
                    this.expr(0);
                    }
                    break;
                case 2:
                    {
                    this.state = 3731;
                    this.match(MySQLParser.USING_SYMBOL);
                    this.state = 3732;
                    this.identifierListWithParentheses();
                    }
                    break;
                }
                }
                break;
            case MySQLParser.LEFT_SYMBOL:
            case MySQLParser.RIGHT_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3735;
                this.outerJoinType();
                this.state = 3736;
                this.tableReference();
                this.state = 3741;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySQLParser.ON_SYMBOL:
                    {
                    this.state = 3737;
                    this.match(MySQLParser.ON_SYMBOL);
                    this.state = 3738;
                    this.expr(0);
                    }
                    break;
                case MySQLParser.USING_SYMBOL:
                    {
                    this.state = 3739;
                    this.match(MySQLParser.USING_SYMBOL);
                    this.state = 3740;
                    this.identifierListWithParentheses();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case MySQLParser.NATURAL_SYMBOL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3743;
                this.naturalJoinType();
                this.state = 3744;
                this.tableFactor();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public naturalJoinType(): NaturalJoinTypeContext {
        let localContext = new NaturalJoinTypeContext(this.context, this.state);
        this.enterRule(localContext, 398, MySQLParser.RULE_naturalJoinType);
        let _la: number;
        try {
            this.state = 3759;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 362, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3748;
                this.match(MySQLParser.NATURAL_SYMBOL);
                this.state = 3750;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 271) {
                    {
                    this.state = 3749;
                    this.match(MySQLParser.INNER_SYMBOL);
                    }
                }

                this.state = 3752;
                this.match(MySQLParser.JOIN_SYMBOL);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3753;
                this.match(MySQLParser.NATURAL_SYMBOL);
                this.state = 3754;
                _la = this.tokenStream.LA(1);
                if(!(_la === 302 || _la === 495)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3756;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 413) {
                    {
                    this.state = 3755;
                    this.match(MySQLParser.OUTER_SYMBOL);
                    }
                }

                this.state = 3758;
                this.match(MySQLParser.JOIN_SYMBOL);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public innerJoinType(): InnerJoinTypeContext {
        let localContext = new InnerJoinTypeContext(this.context, this.state);
        this.enterRule(localContext, 400, MySQLParser.RULE_innerJoinType);
        let _la: number;
        try {
            this.state = 3766;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.CROSS_SYMBOL:
            case MySQLParser.INNER_SYMBOL:
            case MySQLParser.JOIN_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3762;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 140 || _la === 271) {
                    {
                    this.state = 3761;
                    localContext._type_ = this.tokenStream.LT(1);
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 140 || _la === 271)) {
                        localContext._type_ = this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 3764;
                this.match(MySQLParser.JOIN_SYMBOL);
                }
                break;
            case MySQLParser.STRAIGHT_JOIN_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3765;
                localContext._type_ = this.match(MySQLParser.STRAIGHT_JOIN_SYMBOL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public outerJoinType(): OuterJoinTypeContext {
        let localContext = new OuterJoinTypeContext(this.context, this.state);
        this.enterRule(localContext, 402, MySQLParser.RULE_outerJoinType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3768;
            localContext._type_ = this.tokenStream.LT(1);
            _la = this.tokenStream.LA(1);
            if(!(_la === 302 || _la === 495)) {
                localContext._type_ = this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3770;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 413) {
                {
                this.state = 3769;
                this.match(MySQLParser.OUTER_SYMBOL);
                }
            }

            this.state = 3772;
            this.match(MySQLParser.JOIN_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableFactor(): TableFactorContext {
        let localContext = new TableFactorContext(this.context, this.state);
        this.enterRule(localContext, 404, MySQLParser.RULE_tableFactor);
        try {
            this.state = 3780;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 366, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3774;
                this.singleTable();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3775;
                this.singleTableParens();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3776;
                this.derivedTable();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3777;
                this.tableReferenceListParens();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3778;
                if (!(this.serverVersion >= 80004)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80004");
                }
                this.state = 3779;
                this.tableFunction();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public singleTable(): SingleTableContext {
        let localContext = new SingleTableContext(this.context, this.state);
        this.enterRule(localContext, 406, MySQLParser.RULE_singleTable);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3782;
            this.tableRef();
            this.state = 3784;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 367, this.context) ) {
            case 1:
                {
                this.state = 3783;
                this.usePartition();
                }
                break;
            }
            this.state = 3787;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 368, this.context) ) {
            case 1:
                {
                this.state = 3786;
                this.tableAlias();
                }
                break;
            }
            this.state = 3790;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 369, this.context) ) {
            case 1:
                {
                this.state = 3789;
                this.indexHintList();
                }
                break;
            }
            this.state = 3793;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 370, this.context) ) {
            case 1:
                {
                this.state = 3792;
                this.tablesampleClause();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public singleTableParens(): SingleTableParensContext {
        let localContext = new SingleTableParensContext(this.context, this.state);
        this.enterRule(localContext, 408, MySQLParser.RULE_singleTableParens);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3795;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 3798;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 371, this.context) ) {
            case 1:
                {
                this.state = 3796;
                this.singleTable();
                }
                break;
            case 2:
                {
                this.state = 3797;
                this.singleTableParens();
                }
                break;
            }
            this.state = 3800;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public derivedTable(): DerivedTableContext {
        let localContext = new DerivedTableContext(this.context, this.state);
        this.enterRule(localContext, 410, MySQLParser.RULE_derivedTable);
        try {
            this.state = 3818;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 376, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3802;
                this.subquery();
                this.state = 3804;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 372, this.context) ) {
                case 1:
                    {
                    this.state = 3803;
                    this.tableAlias();
                    }
                    break;
                }
                this.state = 3807;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 373, this.context) ) {
                case 1:
                    {
                    this.state = 3806;
                    this.columnInternalRefList();
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3809;
                if (!(this.serverVersion >= 80014)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80014");
                }
                this.state = 3810;
                this.match(MySQLParser.LATERAL_SYMBOL);
                this.state = 3811;
                this.subquery();
                this.state = 3813;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 374, this.context) ) {
                case 1:
                    {
                    this.state = 3812;
                    this.tableAlias();
                    }
                    break;
                }
                this.state = 3816;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 375, this.context) ) {
                case 1:
                    {
                    this.state = 3815;
                    this.columnInternalRefList();
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableReferenceListParens(): TableReferenceListParensContext {
        let localContext = new TableReferenceListParensContext(this.context, this.state);
        this.enterRule(localContext, 412, MySQLParser.RULE_tableReferenceListParens);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3820;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 3823;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 377, this.context) ) {
            case 1:
                {
                this.state = 3821;
                this.tableReferenceList();
                }
                break;
            case 2:
                {
                this.state = 3822;
                this.tableReferenceListParens();
                }
                break;
            }
            this.state = 3825;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableFunction(): TableFunctionContext {
        let localContext = new TableFunctionContext(this.context, this.state);
        this.enterRule(localContext, 414, MySQLParser.RULE_tableFunction);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3827;
            this.match(MySQLParser.JSON_TABLE_SYMBOL);
            this.state = 3828;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 3829;
            this.expr(0);
            this.state = 3830;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 3831;
            this.textStringLiteral();
            this.state = 3832;
            this.columnsClause();
            this.state = 3833;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            this.state = 3835;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 378, this.context) ) {
            case 1:
                {
                this.state = 3834;
                this.tableAlias();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnsClause(): ColumnsClauseContext {
        let localContext = new ColumnsClauseContext(this.context, this.state);
        this.enterRule(localContext, 416, MySQLParser.RULE_columnsClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3837;
            this.match(MySQLParser.COLUMNS_SYMBOL);
            this.state = 3838;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 3839;
            this.jtColumn();
            this.state = 3844;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 29) {
                {
                {
                this.state = 3840;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 3841;
                this.jtColumn();
                }
                }
                this.state = 3846;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 3847;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jtColumn(): JtColumnContext {
        let localContext = new JtColumnContext(this.context, this.state);
        this.enterRule(localContext, 418, MySQLParser.RULE_jtColumn);
        let _la: number;
        try {
            this.state = 3872;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 383, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3849;
                this.identifier();
                this.state = 3850;
                this.match(MySQLParser.FOR_SYMBOL);
                this.state = 3851;
                this.match(MySQLParser.ORDINALITY_SYMBOL);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3853;
                this.identifier();
                this.state = 3854;
                this.dataType();
                this.state = 3857;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 380, this.context) ) {
                case 1:
                    {
                    this.state = 3855;
                    if (!(this.serverVersion >= 80014)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80014");
                    }
                    this.state = 3856;
                    this.collate();
                    }
                    break;
                }
                this.state = 3860;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 209) {
                    {
                    this.state = 3859;
                    this.match(MySQLParser.EXISTS_SYMBOL);
                    }
                }

                this.state = 3862;
                this.match(MySQLParser.PATH_SYMBOL);
                this.state = 3863;
                this.textStringLiteral();
                this.state = 3865;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 166 || _la === 200 || _la === 395) {
                    {
                    this.state = 3864;
                    this.onEmptyOrErrorJsonTable();
                    }
                }

                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3867;
                this.match(MySQLParser.NESTED_SYMBOL);
                this.state = 3868;
                this.match(MySQLParser.PATH_SYMBOL);
                this.state = 3869;
                this.textStringLiteral();
                this.state = 3870;
                this.columnsClause();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public onEmptyOrError(): OnEmptyOrErrorContext {
        let localContext = new OnEmptyOrErrorContext(this.context, this.state);
        this.enterRule(localContext, 420, MySQLParser.RULE_onEmptyOrError);
        let _la: number;
        try {
            this.state = 3879;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 385, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3874;
                this.onEmpty();
                this.state = 3876;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 166 || _la === 200 || _la === 395) {
                    {
                    this.state = 3875;
                    this.onError();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3878;
                this.onError();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public onEmptyOrErrorJsonTable(): OnEmptyOrErrorJsonTableContext {
        let localContext = new OnEmptyOrErrorJsonTableContext(this.context, this.state);
        this.enterRule(localContext, 422, MySQLParser.RULE_onEmptyOrErrorJsonTable);
        try {
            this.state = 3885;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 386, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3881;
                this.onEmptyOrError();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3882;
                this.onError();
                this.state = 3883;
                this.onEmpty();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public onEmpty(): OnEmptyContext {
        let localContext = new OnEmptyContext(this.context, this.state);
        this.enterRule(localContext, 424, MySQLParser.RULE_onEmpty);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3887;
            this.jsonOnResponse();
            this.state = 3888;
            this.match(MySQLParser.ON_SYMBOL);
            this.state = 3889;
            this.match(MySQLParser.EMPTY_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public onError(): OnErrorContext {
        let localContext = new OnErrorContext(this.context, this.state);
        this.enterRule(localContext, 426, MySQLParser.RULE_onError);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3891;
            this.jsonOnResponse();
            this.state = 3892;
            this.match(MySQLParser.ON_SYMBOL);
            this.state = 3893;
            this.match(MySQLParser.ERROR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonOnResponse(): JsonOnResponseContext {
        let localContext = new JsonOnResponseContext(this.context, this.state);
        this.enterRule(localContext, 428, MySQLParser.RULE_jsonOnResponse);
        try {
            this.state = 3899;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.ERROR_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3895;
                this.match(MySQLParser.ERROR_SYMBOL);
                }
                break;
            case MySQLParser.NULL_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3896;
                this.match(MySQLParser.NULL_SYMBOL);
                }
                break;
            case MySQLParser.DEFAULT_SYMBOL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3897;
                this.match(MySQLParser.DEFAULT_SYMBOL);
                this.state = 3898;
                this.textStringLiteral();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unionOption(): UnionOptionContext {
        let localContext = new UnionOptionContext(this.context, this.state);
        this.enterRule(localContext, 430, MySQLParser.RULE_unionOption);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3901;
            _la = this.tokenStream.LA(1);
            if(!(_la === 57 || _la === 180)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableAlias(): TableAliasContext {
        let localContext = new TableAliasContext(this.context, this.state);
        this.enterRule(localContext, 432, MySQLParser.RULE_tableAlias);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3906;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 388, this.context) ) {
            case 1:
                {
                this.state = 3903;
                this.match(MySQLParser.AS_SYMBOL);
                }
                break;
            case 2:
                {
                this.state = 3904;
                if (!(this.serverVersion < 80017)) {
                    throw this.createFailedPredicateException("this.serverVersion < 80017");
                }
                this.state = 3905;
                this.match(MySQLParser.EQUAL_OPERATOR);
                }
                break;
            }
            this.state = 3908;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public indexHintList(): IndexHintListContext {
        let localContext = new IndexHintListContext(this.context, this.state);
        this.enterRule(localContext, 434, MySQLParser.RULE_indexHintList);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3910;
            this.indexHint();
            this.state = 3915;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 389, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3911;
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.state = 3912;
                    this.indexHint();
                    }
                    }
                }
                this.state = 3917;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 389, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public indexHint(): IndexHintContext {
        let localContext = new IndexHintContext(this.context, this.state);
        this.enterRule(localContext, 436, MySQLParser.RULE_indexHint);
        let _la: number;
        try {
            this.state = 3938;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.FORCE_SYMBOL:
            case MySQLParser.IGNORE_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3918;
                this.indexHintType();
                this.state = 3919;
                this.keyOrIndex();
                this.state = 3921;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 232) {
                    {
                    this.state = 3920;
                    this.indexHintClause();
                    }
                }

                this.state = 3923;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 3924;
                this.indexList();
                this.state = 3925;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case MySQLParser.USE_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3927;
                this.match(MySQLParser.USE_SYMBOL);
                this.state = 3928;
                this.keyOrIndex();
                this.state = 3930;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 232) {
                    {
                    this.state = 3929;
                    this.indexHintClause();
                    }
                }

                this.state = 3932;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 3934;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 392, this.context) ) {
                case 1:
                    {
                    this.state = 3933;
                    this.indexList();
                    }
                    break;
                }
                this.state = 3936;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public indexHintType(): IndexHintTypeContext {
        let localContext = new IndexHintTypeContext(this.context, this.state);
        this.enterRule(localContext, 438, MySQLParser.RULE_indexHintType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3940;
            _la = this.tokenStream.LA(1);
            if(!(_la === 230 || _la === 264)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyOrIndex(): KeyOrIndexContext {
        let localContext = new KeyOrIndexContext(this.context, this.state);
        this.enterRule(localContext, 440, MySQLParser.RULE_keyOrIndex);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3942;
            _la = this.tokenStream.LA(1);
            if(!(_la === 268 || _la === 295)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public constraintKeyType(): ConstraintKeyTypeContext {
        let localContext = new ConstraintKeyTypeContext(this.context, this.state);
        this.enterRule(localContext, 442, MySQLParser.RULE_constraintKeyType);
        let _la: number;
        try {
            this.state = 3950;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.PRIMARY_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3944;
                this.match(MySQLParser.PRIMARY_SYMBOL);
                this.state = 3945;
                this.match(MySQLParser.KEY_SYMBOL);
                }
                break;
            case MySQLParser.UNIQUE_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3946;
                this.match(MySQLParser.UNIQUE_SYMBOL);
                this.state = 3948;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 268 || _la === 295) {
                    {
                    this.state = 3947;
                    this.keyOrIndex();
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public indexHintClause(): IndexHintClauseContext {
        let localContext = new IndexHintClauseContext(this.context, this.state);
        this.enterRule(localContext, 444, MySQLParser.RULE_indexHintClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3952;
            this.match(MySQLParser.FOR_SYMBOL);
            this.state = 3958;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.JOIN_SYMBOL:
                {
                this.state = 3953;
                this.match(MySQLParser.JOIN_SYMBOL);
                }
                break;
            case MySQLParser.ORDER_SYMBOL:
                {
                this.state = 3954;
                this.match(MySQLParser.ORDER_SYMBOL);
                this.state = 3955;
                this.match(MySQLParser.BY_SYMBOL);
                }
                break;
            case MySQLParser.GROUP_SYMBOL:
                {
                this.state = 3956;
                this.match(MySQLParser.GROUP_SYMBOL);
                this.state = 3957;
                this.match(MySQLParser.BY_SYMBOL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public indexList(): IndexListContext {
        let localContext = new IndexListContext(this.context, this.state);
        this.enterRule(localContext, 446, MySQLParser.RULE_indexList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3960;
            this.indexListElement();
            this.state = 3965;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 29) {
                {
                {
                this.state = 3961;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 3962;
                this.indexListElement();
                }
                }
                this.state = 3967;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public indexListElement(): IndexListElementContext {
        let localContext = new IndexListElementContext(this.context, this.state);
        this.enterRule(localContext, 448, MySQLParser.RULE_indexListElement);
        try {
            this.state = 3970;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 398, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3968;
                this.identifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3969;
                this.match(MySQLParser.PRIMARY_SYMBOL);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public updateStatement(): UpdateStatementContext {
        let localContext = new UpdateStatementContext(this.context, this.state);
        this.enterRule(localContext, 450, MySQLParser.RULE_updateStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3973;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 653) {
                {
                this.state = 3972;
                this.withClause();
                }
            }

            this.state = 3975;
            this.match(MySQLParser.UPDATE_SYMBOL);
            this.state = 3977;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 400, this.context) ) {
            case 1:
                {
                this.state = 3976;
                this.match(MySQLParser.LOW_PRIORITY_SYMBOL);
                }
                break;
            }
            this.state = 3980;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 401, this.context) ) {
            case 1:
                {
                this.state = 3979;
                this.match(MySQLParser.IGNORE_SYMBOL);
                }
                break;
            }
            this.state = 3982;
            this.tableReferenceList();
            this.state = 3983;
            this.match(MySQLParser.SET_SYMBOL);
            this.state = 3984;
            this.updateList();
            this.state = 3986;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 651) {
                {
                this.state = 3985;
                this.whereClause();
                }
            }

            this.state = 3989;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 411) {
                {
                this.state = 3988;
                this.orderClause();
                }
            }

            this.state = 3992;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 306) {
                {
                this.state = 3991;
                this.simpleLimitClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transactionOrLockingStatement(): TransactionOrLockingStatementContext {
        let localContext = new TransactionOrLockingStatementContext(this.context, this.state);
        this.enterRule(localContext, 452, MySQLParser.RULE_transactionOrLockingStatement);
        try {
            this.state = 3998;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.COMMIT_SYMBOL:
            case MySQLParser.START_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3994;
                this.transactionStatement();
                }
                break;
            case MySQLParser.RELEASE_SYMBOL:
            case MySQLParser.ROLLBACK_SYMBOL:
            case MySQLParser.SAVEPOINT_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3995;
                this.savepointStatement();
                }
                break;
            case MySQLParser.LOCK_SYMBOL:
            case MySQLParser.UNLOCK_SYMBOL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3996;
                this.lockStatement();
                }
                break;
            case MySQLParser.XA_SYMBOL:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3997;
                this.xaStatement();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transactionStatement(): TransactionStatementContext {
        let localContext = new TransactionStatementContext(this.context, this.state);
        this.enterRule(localContext, 454, MySQLParser.RULE_transactionStatement);
        let _la: number;
        try {
            this.state = 4025;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.START_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4000;
                this.match(MySQLParser.START_SYMBOL);
                this.state = 4001;
                this.match(MySQLParser.TRANSACTION_SYMBOL);
                this.state = 4005;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 453 || _la === 653) {
                    {
                    {
                    this.state = 4002;
                    this.startTransactionOptionList();
                    }
                    }
                    this.state = 4007;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case MySQLParser.COMMIT_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4008;
                this.match(MySQLParser.COMMIT_SYMBOL);
                this.state = 4010;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 655) {
                    {
                    this.state = 4009;
                    this.match(MySQLParser.WORK_SYMBOL);
                    }
                }

                this.state = 4017;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 61) {
                    {
                    this.state = 4012;
                    this.match(MySQLParser.AND_SYMBOL);
                    this.state = 4014;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 392) {
                        {
                        this.state = 4013;
                        this.match(MySQLParser.NO_SYMBOL);
                        }
                    }

                    this.state = 4016;
                    this.match(MySQLParser.CHAIN_SYMBOL);
                    }
                }

                this.state = 4023;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 392 || _la === 467) {
                    {
                    this.state = 4020;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 392) {
                        {
                        this.state = 4019;
                        this.match(MySQLParser.NO_SYMBOL);
                        }
                    }

                    this.state = 4022;
                    this.match(MySQLParser.RELEASE_SYMBOL);
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public beginWork(): BeginWorkContext {
        let localContext = new BeginWorkContext(this.context, this.state);
        this.enterRule(localContext, 456, MySQLParser.RULE_beginWork);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4027;
            this.match(MySQLParser.BEGIN_SYMBOL);
            this.state = 4029;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 655) {
                {
                this.state = 4028;
                this.match(MySQLParser.WORK_SYMBOL);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public startTransactionOptionList(): StartTransactionOptionListContext {
        let localContext = new StartTransactionOptionListContext(this.context, this.state);
        this.enterRule(localContext, 458, MySQLParser.RULE_startTransactionOptionList);
        let _la: number;
        try {
            this.state = 4036;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.WITH_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4031;
                this.match(MySQLParser.WITH_SYMBOL);
                this.state = 4032;
                this.match(MySQLParser.CONSISTENT_SYMBOL);
                this.state = 4033;
                this.match(MySQLParser.SNAPSHOT_SYMBOL);
                }
                break;
            case MySQLParser.READ_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4034;
                this.match(MySQLParser.READ_SYMBOL);
                this.state = 4035;
                _la = this.tokenStream.LA(1);
                if(!(_la === 404 || _la === 657)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public savepointStatement(): SavepointStatementContext {
        let localContext = new SavepointStatementContext(this.context, this.state);
        this.enterRule(localContext, 460, MySQLParser.RULE_savepointStatement);
        let _la: number;
        try {
            this.state = 4067;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.SAVEPOINT_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4038;
                this.match(MySQLParser.SAVEPOINT_SYMBOL);
                this.state = 4039;
                this.identifier();
                }
                break;
            case MySQLParser.ROLLBACK_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4040;
                this.match(MySQLParser.ROLLBACK_SYMBOL);
                this.state = 4042;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 655) {
                    {
                    this.state = 4041;
                    this.match(MySQLParser.WORK_SYMBOL);
                    }
                }

                this.state = 4062;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySQLParser.TO_SYMBOL:
                    {
                    this.state = 4044;
                    this.match(MySQLParser.TO_SYMBOL);
                    this.state = 4046;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 416, this.context) ) {
                    case 1:
                        {
                        this.state = 4045;
                        this.match(MySQLParser.SAVEPOINT_SYMBOL);
                        }
                        break;
                    }
                    this.state = 4048;
                    this.identifier();
                    }
                    break;
                case MySQLParser.EOF:
                case MySQLParser.SEMICOLON_SYMBOL:
                case MySQLParser.AND_SYMBOL:
                case MySQLParser.NO_SYMBOL:
                case MySQLParser.RELEASE_SYMBOL:
                    {
                    this.state = 4054;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 61) {
                        {
                        this.state = 4049;
                        this.match(MySQLParser.AND_SYMBOL);
                        this.state = 4051;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 392) {
                            {
                            this.state = 4050;
                            this.match(MySQLParser.NO_SYMBOL);
                            }
                        }

                        this.state = 4053;
                        this.match(MySQLParser.CHAIN_SYMBOL);
                        }
                    }

                    this.state = 4060;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 392 || _la === 467) {
                        {
                        this.state = 4057;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 392) {
                            {
                            this.state = 4056;
                            this.match(MySQLParser.NO_SYMBOL);
                            }
                        }

                        this.state = 4059;
                        this.match(MySQLParser.RELEASE_SYMBOL);
                        }
                    }

                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case MySQLParser.RELEASE_SYMBOL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4064;
                this.match(MySQLParser.RELEASE_SYMBOL);
                this.state = 4065;
                this.match(MySQLParser.SAVEPOINT_SYMBOL);
                this.state = 4066;
                this.identifier();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lockStatement(): LockStatementContext {
        let localContext = new LockStatementContext(this.context, this.state);
        this.enterRule(localContext, 462, MySQLParser.RULE_lockStatement);
        let _la: number;
        try {
            this.state = 4085;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 424, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4069;
                this.match(MySQLParser.LOCK_SYMBOL);
                this.state = 4070;
                _la = this.tokenStream.LA(1);
                if(!(_la === 581 || _la === 583)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4071;
                this.lockItem();
                this.state = 4076;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 29) {
                    {
                    {
                    this.state = 4072;
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.state = 4073;
                    this.lockItem();
                    }
                    }
                    this.state = 4078;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4079;
                this.match(MySQLParser.LOCK_SYMBOL);
                this.state = 4080;
                this.match(MySQLParser.INSTANCE_SYMBOL);
                this.state = 4081;
                this.match(MySQLParser.FOR_SYMBOL);
                this.state = 4082;
                this.match(MySQLParser.BACKUP_SYMBOL);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4083;
                this.match(MySQLParser.UNLOCK_SYMBOL);
                this.state = 4084;
                _la = this.tokenStream.LA(1);
                if(!(_la === 276 || _la === 581 || _la === 583)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lockItem(): LockItemContext {
        let localContext = new LockItemContext(this.context, this.state);
        this.enterRule(localContext, 464, MySQLParser.RULE_lockItem);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4087;
            this.tableRef();
            this.state = 4089;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 425, this.context) ) {
            case 1:
                {
                this.state = 4088;
                this.tableAlias();
                }
                break;
            }
            this.state = 4091;
            this.lockOption();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lockOption(): LockOptionContext {
        let localContext = new LockOptionContext(this.context, this.state);
        this.enterRule(localContext, 466, MySQLParser.RULE_lockOption);
        let _la: number;
        try {
            this.state = 4101;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.READ_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4093;
                this.match(MySQLParser.READ_SYMBOL);
                this.state = 4095;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 312) {
                    {
                    this.state = 4094;
                    this.match(MySQLParser.LOCAL_SYMBOL);
                    }
                }

                }
                break;
            case MySQLParser.LOW_PRIORITY_SYMBOL:
            case MySQLParser.WRITE_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4098;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 321) {
                    {
                    this.state = 4097;
                    this.match(MySQLParser.LOW_PRIORITY_SYMBOL);
                    }
                }

                this.state = 4100;
                this.match(MySQLParser.WRITE_SYMBOL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xaStatement(): XaStatementContext {
        let localContext = new XaStatementContext(this.context, this.state);
        this.enterRule(localContext, 468, MySQLParser.RULE_xaStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4103;
            this.match(MySQLParser.XA_SYMBOL);
            this.state = 4132;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.BEGIN_SYMBOL:
            case MySQLParser.START_SYMBOL:
                {
                this.state = 4104;
                _la = this.tokenStream.LA(1);
                if(!(_la === 74 || _la === 553)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4105;
                this.xid();
                this.state = 4107;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 291 || _la === 489) {
                    {
                    this.state = 4106;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 291 || _la === 489)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            case MySQLParser.END_SYMBOL:
                {
                this.state = 4109;
                this.match(MySQLParser.END_SYMBOL);
                this.state = 4110;
                this.xid();
                this.state = 4116;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 576) {
                    {
                    this.state = 4111;
                    this.match(MySQLParser.SUSPEND_SYMBOL);
                    this.state = 4114;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 232) {
                        {
                        this.state = 4112;
                        this.match(MySQLParser.FOR_SYMBOL);
                        this.state = 4113;
                        this.match(MySQLParser.MIGRATE_SYMBOL);
                        }
                    }

                    }
                }

                }
                break;
            case MySQLParser.PREPARE_SYMBOL:
                {
                this.state = 4118;
                this.match(MySQLParser.PREPARE_SYMBOL);
                this.state = 4119;
                this.xid();
                }
                break;
            case MySQLParser.COMMIT_SYMBOL:
                {
                this.state = 4120;
                this.match(MySQLParser.COMMIT_SYMBOL);
                this.state = 4121;
                this.xid();
                this.state = 4124;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 402) {
                    {
                    this.state = 4122;
                    this.match(MySQLParser.ONE_SYMBOL);
                    this.state = 4123;
                    this.match(MySQLParser.PHASE_SYMBOL);
                    }
                }

                }
                break;
            case MySQLParser.ROLLBACK_SYMBOL:
                {
                this.state = 4126;
                this.match(MySQLParser.ROLLBACK_SYMBOL);
                this.state = 4127;
                this.xid();
                }
                break;
            case MySQLParser.RECOVER_SYMBOL:
                {
                this.state = 4128;
                this.match(MySQLParser.RECOVER_SYMBOL);
                this.state = 4130;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 136) {
                    {
                    this.state = 4129;
                    this.xaConvert();
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xaConvert(): XaConvertContext {
        let localContext = new XaConvertContext(this.context, this.state);
        this.enterRule(localContext, 470, MySQLParser.RULE_xaConvert);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4134;
            this.match(MySQLParser.CONVERT_SYMBOL);
            this.state = 4135;
            this.match(MySQLParser.XID_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xid(): XidContext {
        let localContext = new XidContext(this.context, this.state);
        this.enterRule(localContext, 472, MySQLParser.RULE_xid);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4137;
            this.textString();
            this.state = 4144;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 29) {
                {
                this.state = 4138;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 4139;
                this.textString();
                this.state = 4142;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 29) {
                    {
                    this.state = 4140;
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.state = 4141;
                    this.ulong_number();
                    }
                }

                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replicationStatement(): ReplicationStatementContext {
        let localContext = new ReplicationStatementContext(this.context, this.state);
        this.enterRule(localContext, 474, MySQLParser.RULE_replicationStatement);
        let _la: number;
        try {
            this.state = 4168;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 439, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4146;
                this.match(MySQLParser.PURGE_SYMBOL);
                this.state = 4147;
                this.purgeOptions();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4148;
                this.changeSource();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4149;
                this.match(MySQLParser.RESET_SYMBOL);
                this.state = 4150;
                this.resetOption();
                this.state = 4155;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 29) {
                    {
                    {
                    this.state = 4151;
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.state = 4152;
                    this.resetOption();
                    }
                    }
                    this.state = 4157;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4158;
                this.match(MySQLParser.RESET_SYMBOL);
                this.state = 4159;
                this.match(MySQLParser.PERSIST_SYMBOL);
                this.state = 4161;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 263) {
                    {
                    this.state = 4160;
                    this.ifExistsIdentifier();
                    }
                }

                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4163;
                this.startReplicaStatement();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4164;
                this.stopReplicaStatement();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4165;
                this.changeReplication();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 4166;
                this.replicationLoad();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 4167;
                this.groupReplication();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public purgeOptions(): PurgeOptionsContext {
        let localContext = new PurgeOptionsContext(this.context, this.state);
        this.enterRule(localContext, 476, MySQLParser.RULE_purgeOptions);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4170;
            _la = this.tokenStream.LA(1);
            if(!(_la === 77 || _la === 341)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4171;
            this.match(MySQLParser.LOGS_SYMBOL);
            this.state = 4176;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.TO_SYMBOL:
                {
                this.state = 4172;
                this.match(MySQLParser.TO_SYMBOL);
                this.state = 4173;
                this.textLiteral();
                }
                break;
            case MySQLParser.BEFORE_SYMBOL:
                {
                this.state = 4174;
                this.match(MySQLParser.BEFORE_SYMBOL);
                this.state = 4175;
                this.expr(0);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public resetOption(): ResetOptionContext {
        let localContext = new ResetOptionContext(this.context, this.state);
        this.enterRule(localContext, 478, MySQLParser.RULE_resetOption);
        let _la: number;
        try {
            this.state = 4189;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 444, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4178;
                this.masterOrBinaryLogsAndGtids();
                this.state = 4180;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 599) {
                    {
                    this.state = 4179;
                    this.sourceResetOptions();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4182;
                this.replica();
                this.state = 4184;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 57) {
                    {
                    this.state = 4183;
                    this.match(MySQLParser.ALL_SYMBOL);
                    }
                }

                this.state = 4187;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 232) {
                    {
                    this.state = 4186;
                    this.channel();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public masterOrBinaryLogsAndGtids(): MasterOrBinaryLogsAndGtidsContext {
        let localContext = new MasterOrBinaryLogsAndGtidsContext(this.context, this.state);
        this.enterRule(localContext, 480, MySQLParser.RULE_masterOrBinaryLogsAndGtids);
        try {
            this.state = 4197;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 445, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4191;
                this.match(MySQLParser.MASTER_SYMBOL);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4192;
                if (!(this.serverVersion >= 80032)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80032");
                }
                this.state = 4193;
                this.match(MySQLParser.BINARY_SYMBOL);
                this.state = 4194;
                this.match(MySQLParser.LOGS_SYMBOL);
                this.state = 4195;
                this.match(MySQLParser.AND_SYMBOL);
                this.state = 4196;
                this.match(MySQLParser.GTIDS_SYMBOL);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sourceResetOptions(): SourceResetOptionsContext {
        let localContext = new SourceResetOptionsContext(this.context, this.state);
        this.enterRule(localContext, 482, MySQLParser.RULE_sourceResetOptions);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4199;
            this.match(MySQLParser.TO_SYMBOL);
            this.state = 4200;
            this.real_ulonglong_number();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replicationLoad(): ReplicationLoadContext {
        let localContext = new ReplicationLoadContext(this.context, this.state);
        this.enterRule(localContext, 484, MySQLParser.RULE_replicationLoad);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4202;
            this.match(MySQLParser.LOAD_SYMBOL);
            this.state = 4206;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.DATA_SYMBOL:
                {
                this.state = 4203;
                this.match(MySQLParser.DATA_SYMBOL);
                }
                break;
            case MySQLParser.TABLE_SYMBOL:
                {
                this.state = 4204;
                this.match(MySQLParser.TABLE_SYMBOL);
                this.state = 4205;
                this.tableRef();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 4208;
            this.match(MySQLParser.FROM_SYMBOL);
            this.state = 4209;
            this.match(MySQLParser.MASTER_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public changeReplicationSource(): ChangeReplicationSourceContext {
        let localContext = new ChangeReplicationSourceContext(this.context, this.state);
        this.enterRule(localContext, 486, MySQLParser.RULE_changeReplicationSource);
        try {
            this.state = 4215;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 447, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4211;
                this.match(MySQLParser.MASTER_SYMBOL);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4212;
                if (!(this.serverVersion >= 80024)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80024");
                }
                this.state = 4213;
                this.match(MySQLParser.REPLICATION_SYMBOL);
                this.state = 4214;
                this.match(MySQLParser.SOURCE_SYMBOL);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public changeSource(): ChangeSourceContext {
        let localContext = new ChangeSourceContext(this.context, this.state);
        this.enterRule(localContext, 488, MySQLParser.RULE_changeSource);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4217;
            this.match(MySQLParser.CHANGE_SYMBOL);
            this.state = 4218;
            this.changeReplicationSource();
            this.state = 4219;
            this.match(MySQLParser.TO_SYMBOL);
            this.state = 4220;
            this.sourceDefinitions();
            this.state = 4222;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 232) {
                {
                this.state = 4221;
                this.channel();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sourceDefinitions(): SourceDefinitionsContext {
        let localContext = new SourceDefinitionsContext(this.context, this.state);
        this.enterRule(localContext, 490, MySQLParser.RULE_sourceDefinitions);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4224;
            this.sourceDefinition();
            this.state = 4229;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 29) {
                {
                {
                this.state = 4225;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 4226;
                this.sourceDefinition();
                }
                }
                this.state = 4231;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sourceDefinition(): SourceDefinitionContext {
        let localContext = new SourceDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 492, MySQLParser.RULE_sourceDefinition);
        try {
            this.state = 4360;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 450, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4232;
                this.changeReplicationSourceHost();
                this.state = 4233;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 4234;
                this.textStringNoLinebreak();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4236;
                this.match(MySQLParser.NETWORK_NAMESPACE_SYMBOL);
                this.state = 4237;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 4238;
                this.textStringNoLinebreak();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4239;
                this.changeReplicationSourceBind();
                this.state = 4240;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 4241;
                this.textStringNoLinebreak();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4243;
                this.changeReplicationSourceUser();
                this.state = 4244;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 4245;
                this.textStringNoLinebreak();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4247;
                this.changeReplicationSourcePassword();
                this.state = 4248;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 4249;
                this.textStringNoLinebreak();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4251;
                this.changeReplicationSourcePort();
                this.state = 4252;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 4253;
                this.ulong_number();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4255;
                this.changeReplicationSourceConnectRetry();
                this.state = 4256;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 4257;
                this.ulong_number();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 4259;
                this.changeReplicationSourceRetryCount();
                this.state = 4260;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 4261;
                this.ulong_number();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 4263;
                this.changeReplicationSourceDelay();
                this.state = 4264;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 4265;
                this.ulong_number();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 4267;
                this.changeReplicationSourceSSL();
                this.state = 4268;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 4269;
                this.ulong_number();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 4271;
                this.changeReplicationSourceSSLCA();
                this.state = 4272;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 4273;
                this.textStringNoLinebreak();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 4275;
                this.changeReplicationSourceSSLCApath();
                this.state = 4276;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 4277;
                this.textStringNoLinebreak();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 4279;
                this.changeReplicationSourceTLSVersion();
                this.state = 4280;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 4281;
                this.textStringNoLinebreak();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 4283;
                this.changeReplicationSourceSSLCert();
                this.state = 4284;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 4285;
                this.textStringNoLinebreak();
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 4287;
                this.changeReplicationSourceTLSCiphersuites();
                this.state = 4288;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 4289;
                this.sourceTlsCiphersuitesDef();
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 4291;
                this.changeReplicationSourceSSLCipher();
                this.state = 4292;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 4293;
                this.textStringNoLinebreak();
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 4295;
                this.changeReplicationSourceSSLKey();
                this.state = 4296;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 4297;
                this.textStringNoLinebreak();
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 4299;
                this.changeReplicationSourceSSLVerifyServerCert();
                this.state = 4300;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 4301;
                this.ulong_number();
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 4303;
                this.changeReplicationSourceSSLCLR();
                this.state = 4304;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 4305;
                this.textLiteral();
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 4307;
                this.changeReplicationSourceSSLCLRpath();
                this.state = 4308;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 4309;
                this.textStringNoLinebreak();
                }
                break;
            case 21:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 4311;
                this.changeReplicationSourcePublicKey();
                this.state = 4312;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 4313;
                this.textStringNoLinebreak();
                }
                break;
            case 22:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 4315;
                this.changeReplicationSourceGetSourcePublicKey();
                this.state = 4316;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 4317;
                this.ulong_number();
                }
                break;
            case 23:
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 4319;
                this.changeReplicationSourceHeartbeatPeriod();
                this.state = 4320;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 4321;
                this.ulong_number();
                }
                break;
            case 24:
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 4323;
                this.match(MySQLParser.IGNORE_SERVER_IDS_SYMBOL);
                this.state = 4324;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 4325;
                this.serverIdList();
                }
                break;
            case 25:
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 4326;
                this.changeReplicationSourceCompressionAlgorithm();
                this.state = 4327;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 4328;
                this.textStringLiteral();
                }
                break;
            case 26:
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 4330;
                this.changeReplicationSourceZstdCompressionLevel();
                this.state = 4331;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 4332;
                this.ulong_number();
                }
                break;
            case 27:
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 4334;
                this.changeReplicationSourceAutoPosition();
                this.state = 4335;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 4336;
                this.ulong_number();
                }
                break;
            case 28:
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 4338;
                this.match(MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL);
                this.state = 4339;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 4340;
                this.privilegeCheckDef();
                }
                break;
            case 29:
                this.enterOuterAlt(localContext, 29);
                {
                this.state = 4341;
                this.match(MySQLParser.REQUIRE_ROW_FORMAT_SYMBOL);
                this.state = 4342;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 4343;
                this.ulong_number();
                }
                break;
            case 30:
                this.enterOuterAlt(localContext, 30);
                {
                this.state = 4344;
                this.match(MySQLParser.REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL);
                this.state = 4345;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 4346;
                this.tablePrimaryKeyCheckDef();
                }
                break;
            case 31:
                this.enterOuterAlt(localContext, 31);
                {
                this.state = 4347;
                if (!(this.serverVersion >= 80024)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80024");
                }
                this.state = 4348;
                this.match(MySQLParser.SOURCE_CONNECTION_AUTO_FAILOVER_SYMBOL);
                this.state = 4349;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 4350;
                this.real_ulong_number();
                }
                break;
            case 32:
                this.enterOuterAlt(localContext, 32);
                {
                this.state = 4351;
                if (!(this.serverVersion >= 80024)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80024");
                }
                this.state = 4352;
                this.match(MySQLParser.ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_SYMBOL);
                this.state = 4353;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 4354;
                this.assignGtidsToAnonymousTransactionsDefinition();
                }
                break;
            case 33:
                this.enterOuterAlt(localContext, 33);
                {
                this.state = 4355;
                if (!(this.serverVersion >= 80027)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80027");
                }
                this.state = 4356;
                this.match(MySQLParser.GTID_ONLY_SYMBOL);
                this.state = 4357;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 4358;
                this.real_ulong_number();
                }
                break;
            case 34:
                this.enterOuterAlt(localContext, 34);
                {
                this.state = 4359;
                this.sourceFileDef();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public changeReplicationSourceAutoPosition(): ChangeReplicationSourceAutoPositionContext {
        let localContext = new ChangeReplicationSourceAutoPositionContext(this.context, this.state);
        this.enterRule(localContext, 494, MySQLParser.RULE_changeReplicationSourceAutoPosition);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4362;
            _la = this.tokenStream.LA(1);
            if(!(_la === 322 || _la === 766)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public changeReplicationSourceHost(): ChangeReplicationSourceHostContext {
        let localContext = new ChangeReplicationSourceHostContext(this.context, this.state);
        this.enterRule(localContext, 496, MySQLParser.RULE_changeReplicationSourceHost);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4364;
            _la = this.tokenStream.LA(1);
            if(!(_la === 326 || _la === 772)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public changeReplicationSourceBind(): ChangeReplicationSourceBindContext {
        let localContext = new ChangeReplicationSourceBindContext(this.context, this.state);
        this.enterRule(localContext, 498, MySQLParser.RULE_changeReplicationSourceBind);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4366;
            _la = this.tokenStream.LA(1);
            if(!(_la === 323 || _la === 767)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public changeReplicationSourceUser(): ChangeReplicationSourceUserContext {
        let localContext = new ChangeReplicationSourceUserContext(this.context, this.state);
        this.enterRule(localContext, 500, MySQLParser.RULE_changeReplicationSourceUser);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4368;
            _la = this.tokenStream.LA(1);
            if(!(_la === 343 || _la === 790)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public changeReplicationSourcePassword(): ChangeReplicationSourcePasswordContext {
        let localContext = new ChangeReplicationSourcePasswordContext(this.context, this.state);
        this.enterRule(localContext, 502, MySQLParser.RULE_changeReplicationSourcePassword);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4370;
            _la = this.tokenStream.LA(1);
            if(!(_la === 329 || _la === 775)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public changeReplicationSourcePort(): ChangeReplicationSourcePortContext {
        let localContext = new ChangeReplicationSourcePortContext(this.context, this.state);
        this.enterRule(localContext, 504, MySQLParser.RULE_changeReplicationSourcePort);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4372;
            _la = this.tokenStream.LA(1);
            if(!(_la === 330 || _la === 776)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public changeReplicationSourceConnectRetry(): ChangeReplicationSourceConnectRetryContext {
        let localContext = new ChangeReplicationSourceConnectRetryContext(this.context, this.state);
        this.enterRule(localContext, 506, MySQLParser.RULE_changeReplicationSourceConnectRetry);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4374;
            _la = this.tokenStream.LA(1);
            if(!(_la === 324 || _la === 769)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public changeReplicationSourceRetryCount(): ChangeReplicationSourceRetryCountContext {
        let localContext = new ChangeReplicationSourceRetryCountContext(this.context, this.state);
        this.enterRule(localContext, 508, MySQLParser.RULE_changeReplicationSourceRetryCount);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4376;
            _la = this.tokenStream.LA(1);
            if(!(_la === 331 || _la === 778)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public changeReplicationSourceDelay(): ChangeReplicationSourceDelayContext {
        let localContext = new ChangeReplicationSourceDelayContext(this.context, this.state);
        this.enterRule(localContext, 510, MySQLParser.RULE_changeReplicationSourceDelay);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4378;
            _la = this.tokenStream.LA(1);
            if(!(_la === 325 || _la === 770)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public changeReplicationSourceSSL(): ChangeReplicationSourceSSLContext {
        let localContext = new ChangeReplicationSourceSSLContext(this.context, this.state);
        this.enterRule(localContext, 512, MySQLParser.RULE_changeReplicationSourceSSL);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4380;
            _la = this.tokenStream.LA(1);
            if(!(_la === 339 || _la === 779)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public changeReplicationSourceSSLCA(): ChangeReplicationSourceSSLCAContext {
        let localContext = new ChangeReplicationSourceSSLCAContext(this.context, this.state);
        this.enterRule(localContext, 514, MySQLParser.RULE_changeReplicationSourceSSLCA);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4382;
            _la = this.tokenStream.LA(1);
            if(!(_la === 333 || _la === 780)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public changeReplicationSourceSSLCApath(): ChangeReplicationSourceSSLCApathContext {
        let localContext = new ChangeReplicationSourceSSLCApathContext(this.context, this.state);
        this.enterRule(localContext, 516, MySQLParser.RULE_changeReplicationSourceSSLCApath);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4384;
            _la = this.tokenStream.LA(1);
            if(!(_la === 332 || _la === 781)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public changeReplicationSourceSSLCipher(): ChangeReplicationSourceSSLCipherContext {
        let localContext = new ChangeReplicationSourceSSLCipherContext(this.context, this.state);
        this.enterRule(localContext, 518, MySQLParser.RULE_changeReplicationSourceSSLCipher);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4386;
            _la = this.tokenStream.LA(1);
            if(!(_la === 335 || _la === 783)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public changeReplicationSourceSSLCLR(): ChangeReplicationSourceSSLCLRContext {
        let localContext = new ChangeReplicationSourceSSLCLRContext(this.context, this.state);
        this.enterRule(localContext, 520, MySQLParser.RULE_changeReplicationSourceSSLCLR);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4388;
            _la = this.tokenStream.LA(1);
            if(!(_la === 336 || _la === 784)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public changeReplicationSourceSSLCLRpath(): ChangeReplicationSourceSSLCLRpathContext {
        let localContext = new ChangeReplicationSourceSSLCLRpathContext(this.context, this.state);
        this.enterRule(localContext, 522, MySQLParser.RULE_changeReplicationSourceSSLCLRpath);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4390;
            _la = this.tokenStream.LA(1);
            if(!(_la === 337 || _la === 785)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public changeReplicationSourceSSLKey(): ChangeReplicationSourceSSLKeyContext {
        let localContext = new ChangeReplicationSourceSSLKeyContext(this.context, this.state);
        this.enterRule(localContext, 524, MySQLParser.RULE_changeReplicationSourceSSLKey);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4392;
            _la = this.tokenStream.LA(1);
            if(!(_la === 338 || _la === 786)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public changeReplicationSourceSSLVerifyServerCert(): ChangeReplicationSourceSSLVerifyServerCertContext {
        let localContext = new ChangeReplicationSourceSSLVerifyServerCertContext(this.context, this.state);
        this.enterRule(localContext, 526, MySQLParser.RULE_changeReplicationSourceSSLVerifyServerCert);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4394;
            _la = this.tokenStream.LA(1);
            if(!(_la === 340 || _la === 787)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public changeReplicationSourceTLSVersion(): ChangeReplicationSourceTLSVersionContext {
        let localContext = new ChangeReplicationSourceTLSVersionContext(this.context, this.state);
        this.enterRule(localContext, 528, MySQLParser.RULE_changeReplicationSourceTLSVersion);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4396;
            _la = this.tokenStream.LA(1);
            if(!(_la === 342 || _la === 789)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public changeReplicationSourceTLSCiphersuites(): ChangeReplicationSourceTLSCiphersuitesContext {
        let localContext = new ChangeReplicationSourceTLSCiphersuitesContext(this.context, this.state);
        this.enterRule(localContext, 530, MySQLParser.RULE_changeReplicationSourceTLSCiphersuites);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4398;
            _la = this.tokenStream.LA(1);
            if(!(_la === 746 || _la === 788)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public changeReplicationSourceSSLCert(): ChangeReplicationSourceSSLCertContext {
        let localContext = new ChangeReplicationSourceSSLCertContext(this.context, this.state);
        this.enterRule(localContext, 532, MySQLParser.RULE_changeReplicationSourceSSLCert);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4400;
            _la = this.tokenStream.LA(1);
            if(!(_la === 334 || _la === 782)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public changeReplicationSourcePublicKey(): ChangeReplicationSourcePublicKeyContext {
        let localContext = new ChangeReplicationSourcePublicKeyContext(this.context, this.state);
        this.enterRule(localContext, 534, MySQLParser.RULE_changeReplicationSourcePublicKey);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4402;
            _la = this.tokenStream.LA(1);
            if(!(_la === 720 || _la === 777)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public changeReplicationSourceGetSourcePublicKey(): ChangeReplicationSourceGetSourcePublicKeyContext {
        let localContext = new ChangeReplicationSourceGetSourcePublicKeyContext(this.context, this.state);
        this.enterRule(localContext, 536, MySQLParser.RULE_changeReplicationSourceGetSourcePublicKey);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4404;
            _la = this.tokenStream.LA(1);
            if(!(_la === 721 || _la === 765)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public changeReplicationSourceHeartbeatPeriod(): ChangeReplicationSourceHeartbeatPeriodContext {
        let localContext = new ChangeReplicationSourceHeartbeatPeriodContext(this.context, this.state);
        this.enterRule(localContext, 538, MySQLParser.RULE_changeReplicationSourceHeartbeatPeriod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4406;
            _la = this.tokenStream.LA(1);
            if(!(_la === 344 || _la === 771)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public changeReplicationSourceCompressionAlgorithm(): ChangeReplicationSourceCompressionAlgorithmContext {
        let localContext = new ChangeReplicationSourceCompressionAlgorithmContext(this.context, this.state);
        this.enterRule(localContext, 540, MySQLParser.RULE_changeReplicationSourceCompressionAlgorithm);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4408;
            _la = this.tokenStream.LA(1);
            if(!(_la === 743 || _la === 768)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public changeReplicationSourceZstdCompressionLevel(): ChangeReplicationSourceZstdCompressionLevelContext {
        let localContext = new ChangeReplicationSourceZstdCompressionLevelContext(this.context, this.state);
        this.enterRule(localContext, 542, MySQLParser.RULE_changeReplicationSourceZstdCompressionLevel);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4410;
            _la = this.tokenStream.LA(1);
            if(!(_la === 744 || _la === 791)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public privilegeCheckDef(): PrivilegeCheckDefContext {
        let localContext = new PrivilegeCheckDefContext(this.context, this.state);
        this.enterRule(localContext, 544, MySQLParser.RULE_privilegeCheckDef);
        try {
            this.state = 4414;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 451, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4412;
                this.userIdentifierOrText();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4413;
                this.match(MySQLParser.NULL_SYMBOL);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tablePrimaryKeyCheckDef(): TablePrimaryKeyCheckDefContext {
        let localContext = new TablePrimaryKeyCheckDefContext(this.context, this.state);
        this.enterRule(localContext, 546, MySQLParser.RULE_tablePrimaryKeyCheckDef);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4416;
            _la = this.tokenStream.LA(1);
            if(!(_la === 401 || _la === 751 || _la === 752 || _la === 806)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public assignGtidsToAnonymousTransactionsDefinition(): AssignGtidsToAnonymousTransactionsDefinitionContext {
        let localContext = new AssignGtidsToAnonymousTransactionsDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 548, MySQLParser.RULE_assignGtidsToAnonymousTransactionsDefinition);
        try {
            this.state = 4421;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 452, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4418;
                this.match(MySQLParser.OFF_SYMBOL);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4419;
                this.match(MySQLParser.LOCAL_SYMBOL);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4420;
                this.textStringLiteral();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sourceTlsCiphersuitesDef(): SourceTlsCiphersuitesDefContext {
        let localContext = new SourceTlsCiphersuitesDefContext(this.context, this.state);
        this.enterRule(localContext, 550, MySQLParser.RULE_sourceTlsCiphersuitesDef);
        try {
            this.state = 4425;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 453, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4423;
                this.textStringNoLinebreak();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4424;
                this.match(MySQLParser.NULL_SYMBOL);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sourceFileDef(): SourceFileDefContext {
        let localContext = new SourceFileDefContext(this.context, this.state);
        this.enterRule(localContext, 552, MySQLParser.RULE_sourceFileDef);
        try {
            this.state = 4441;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.MASTER_LOG_FILE_SYMBOL:
            case MySQLParser.SOURCE_LOG_FILE_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4427;
                this.sourceLogFile();
                this.state = 4428;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 4429;
                this.textStringNoLinebreak();
                }
                break;
            case MySQLParser.MASTER_LOG_POS_SYMBOL:
            case MySQLParser.SOURCE_LOG_POS_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4431;
                this.sourceLogPos();
                this.state = 4432;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 4433;
                this.ulonglongNumber();
                }
                break;
            case MySQLParser.RELAY_LOG_FILE_SYMBOL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4435;
                this.match(MySQLParser.RELAY_LOG_FILE_SYMBOL);
                this.state = 4436;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 4437;
                this.textStringNoLinebreak();
                }
                break;
            case MySQLParser.RELAY_LOG_POS_SYMBOL:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4438;
                this.match(MySQLParser.RELAY_LOG_POS_SYMBOL);
                this.state = 4439;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 4440;
                this.ulong_number();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sourceLogFile(): SourceLogFileContext {
        let localContext = new SourceLogFileContext(this.context, this.state);
        this.enterRule(localContext, 554, MySQLParser.RULE_sourceLogFile);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4443;
            _la = this.tokenStream.LA(1);
            if(!(_la === 327 || _la === 773)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sourceLogPos(): SourceLogPosContext {
        let localContext = new SourceLogPosContext(this.context, this.state);
        this.enterRule(localContext, 556, MySQLParser.RULE_sourceLogPos);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4445;
            _la = this.tokenStream.LA(1);
            if(!(_la === 328 || _la === 774)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public serverIdList(): ServerIdListContext {
        let localContext = new ServerIdListContext(this.context, this.state);
        this.enterRule(localContext, 558, MySQLParser.RULE_serverIdList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4447;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 4456;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 56) !== 0) || ((((_la - 44)) & ~0x1F) === 0 && ((1 << (_la - 44)) & 13) !== 0)) {
                {
                this.state = 4448;
                this.ulong_number();
                this.state = 4453;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 29) {
                    {
                    {
                    this.state = 4449;
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.state = 4450;
                    this.ulong_number();
                    }
                    }
                    this.state = 4455;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 4458;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public changeReplication(): ChangeReplicationContext {
        let localContext = new ChangeReplicationContext(this.context, this.state);
        this.enterRule(localContext, 560, MySQLParser.RULE_changeReplication);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4460;
            this.match(MySQLParser.CHANGE_SYMBOL);
            this.state = 4461;
            this.match(MySQLParser.REPLICATION_SYMBOL);
            this.state = 4462;
            this.match(MySQLParser.FILTER_SYMBOL);
            this.state = 4463;
            this.filterDefinition();
            this.state = 4468;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 29) {
                {
                {
                this.state = 4464;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 4465;
                this.filterDefinition();
                }
                }
                this.state = 4470;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 4472;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 232) {
                {
                this.state = 4471;
                this.channel();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public filterDefinition(): FilterDefinitionContext {
        let localContext = new FilterDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 562, MySQLParser.RULE_filterDefinition);
        let _la: number;
        try {
            this.state = 4523;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.REPLICATE_DO_DB_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4474;
                this.match(MySQLParser.REPLICATE_DO_DB_SYMBOL);
                this.state = 4475;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 4476;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 4478;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 459, this.context) ) {
                case 1:
                    {
                    this.state = 4477;
                    this.filterDbList();
                    }
                    break;
                }
                this.state = 4480;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case MySQLParser.REPLICATE_IGNORE_DB_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4481;
                this.match(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL);
                this.state = 4482;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 4483;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 4485;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 460, this.context) ) {
                case 1:
                    {
                    this.state = 4484;
                    this.filterDbList();
                    }
                    break;
                }
                this.state = 4487;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case MySQLParser.REPLICATE_DO_TABLE_SYMBOL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4488;
                this.match(MySQLParser.REPLICATE_DO_TABLE_SYMBOL);
                this.state = 4489;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 4490;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 4492;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 461, this.context) ) {
                case 1:
                    {
                    this.state = 4491;
                    this.filterTableList();
                    }
                    break;
                }
                this.state = 4494;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4495;
                this.match(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL);
                this.state = 4496;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 4497;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 4499;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 462, this.context) ) {
                case 1:
                    {
                    this.state = 4498;
                    this.filterTableList();
                    }
                    break;
                }
                this.state = 4501;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4502;
                this.match(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL);
                this.state = 4503;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 4504;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 4506;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 463, this.context) ) {
                case 1:
                    {
                    this.state = 4505;
                    this.filterStringList();
                    }
                    break;
                }
                this.state = 4508;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4509;
                this.match(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL);
                this.state = 4510;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 4511;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 4513;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 464, this.context) ) {
                case 1:
                    {
                    this.state = 4512;
                    this.filterStringList();
                    }
                    break;
                }
                this.state = 4515;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case MySQLParser.REPLICATE_REWRITE_DB_SYMBOL:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4516;
                this.match(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL);
                this.state = 4517;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 4518;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 4520;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 32) {
                    {
                    this.state = 4519;
                    this.filterDbPairList();
                    }
                }

                this.state = 4522;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public filterDbList(): FilterDbListContext {
        let localContext = new FilterDbListContext(this.context, this.state);
        this.enterRule(localContext, 564, MySQLParser.RULE_filterDbList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4525;
            this.schemaRef();
            this.state = 4530;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 29) {
                {
                {
                this.state = 4526;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 4527;
                this.schemaRef();
                }
                }
                this.state = 4532;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public filterTableList(): FilterTableListContext {
        let localContext = new FilterTableListContext(this.context, this.state);
        this.enterRule(localContext, 566, MySQLParser.RULE_filterTableList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4533;
            this.filterTableRef();
            this.state = 4538;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 29) {
                {
                {
                this.state = 4534;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 4535;
                this.filterTableRef();
                }
                }
                this.state = 4540;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public filterStringList(): FilterStringListContext {
        let localContext = new FilterStringListContext(this.context, this.state);
        this.enterRule(localContext, 568, MySQLParser.RULE_filterStringList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4541;
            this.filterWildDbTableString();
            this.state = 4546;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 29) {
                {
                {
                this.state = 4542;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 4543;
                this.filterWildDbTableString();
                }
                }
                this.state = 4548;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public filterWildDbTableString(): FilterWildDbTableStringContext {
        let localContext = new FilterWildDbTableStringContext(this.context, this.state);
        this.enterRule(localContext, 570, MySQLParser.RULE_filterWildDbTableString);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4549;
            this.textStringNoLinebreak();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public filterDbPairList(): FilterDbPairListContext {
        let localContext = new FilterDbPairListContext(this.context, this.state);
        this.enterRule(localContext, 572, MySQLParser.RULE_filterDbPairList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4551;
            this.schemaIdentifierPair();
            this.state = 4556;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 29) {
                {
                {
                this.state = 4552;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 4553;
                this.schemaIdentifierPair();
                }
                }
                this.state = 4558;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public startReplicaStatement(): StartReplicaStatementContext {
        let localContext = new StartReplicaStatementContext(this.context, this.state);
        this.enterRule(localContext, 574, MySQLParser.RULE_startReplicaStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4559;
            this.match(MySQLParser.START_SYMBOL);
            this.state = 4560;
            this.replica();
            this.state = 4562;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 466 || _la === 548) {
                {
                this.state = 4561;
                this.replicaThreadOptions();
                }
            }

            this.state = 4566;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 622) {
                {
                this.state = 4564;
                this.match(MySQLParser.UNTIL_SYMBOL);
                this.state = 4565;
                this.replicaUntil();
                }
            }

            this.state = 4569;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 627) {
                {
                this.state = 4568;
                this.userOption();
                }
            }

            this.state = 4572;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 424) {
                {
                this.state = 4571;
                this.passwordOption();
                }
            }

            this.state = 4575;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 167) {
                {
                this.state = 4574;
                this.defaultAuthOption();
                }
            }

            this.state = 4578;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 427) {
                {
                this.state = 4577;
                this.pluginDirOption();
                }
            }

            this.state = 4581;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 232) {
                {
                this.state = 4580;
                this.channel();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stopReplicaStatement(): StopReplicaStatementContext {
        let localContext = new StopReplicaStatementContext(this.context, this.state);
        this.enterRule(localContext, 576, MySQLParser.RULE_stopReplicaStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4583;
            this.match(MySQLParser.STOP_SYMBOL);
            this.state = 4584;
            this.replica();
            this.state = 4586;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 466 || _la === 548) {
                {
                this.state = 4585;
                this.replicaThreadOptions();
                }
            }

            this.state = 4589;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 232) {
                {
                this.state = 4588;
                this.channel();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replicaUntil(): ReplicaUntilContext {
        let localContext = new ReplicaUntilContext(this.context, this.state);
        this.enterRule(localContext, 578, MySQLParser.RULE_replicaUntil);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4596;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.MASTER_LOG_FILE_SYMBOL:
            case MySQLParser.MASTER_LOG_POS_SYMBOL:
            case MySQLParser.RELAY_LOG_FILE_SYMBOL:
            case MySQLParser.RELAY_LOG_POS_SYMBOL:
            case MySQLParser.SOURCE_LOG_FILE_SYMBOL:
            case MySQLParser.SOURCE_LOG_POS_SYMBOL:
                {
                this.state = 4591;
                this.sourceFileDef();
                }
                break;
            case MySQLParser.SQL_AFTER_GTIDS_SYMBOL:
            case MySQLParser.SQL_BEFORE_GTIDS_SYMBOL:
                {
                this.state = 4592;
                _la = this.tokenStream.LA(1);
                if(!(_la === 539 || _la === 541)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4593;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 4594;
                this.textString();
                }
                break;
            case MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL:
                {
                this.state = 4595;
                this.match(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 4602;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 29) {
                {
                {
                this.state = 4598;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 4599;
                this.sourceFileDef();
                }
                }
                this.state = 4604;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public userOption(): UserOptionContext {
        let localContext = new UserOptionContext(this.context, this.state);
        this.enterRule(localContext, 580, MySQLParser.RULE_userOption);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4605;
            this.match(MySQLParser.USER_SYMBOL);
            this.state = 4606;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 4607;
            this.textString();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public passwordOption(): PasswordOptionContext {
        let localContext = new PasswordOptionContext(this.context, this.state);
        this.enterRule(localContext, 582, MySQLParser.RULE_passwordOption);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4609;
            this.match(MySQLParser.PASSWORD_SYMBOL);
            this.state = 4610;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 4611;
            this.textString();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public defaultAuthOption(): DefaultAuthOptionContext {
        let localContext = new DefaultAuthOptionContext(this.context, this.state);
        this.enterRule(localContext, 584, MySQLParser.RULE_defaultAuthOption);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4613;
            this.match(MySQLParser.DEFAULT_AUTH_SYMBOL);
            this.state = 4614;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 4615;
            this.textString();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pluginDirOption(): PluginDirOptionContext {
        let localContext = new PluginDirOptionContext(this.context, this.state);
        this.enterRule(localContext, 586, MySQLParser.RULE_pluginDirOption);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4617;
            this.match(MySQLParser.PLUGIN_DIR_SYMBOL);
            this.state = 4618;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 4619;
            this.textString();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replicaThreadOptions(): ReplicaThreadOptionsContext {
        let localContext = new ReplicaThreadOptionsContext(this.context, this.state);
        this.enterRule(localContext, 588, MySQLParser.RULE_replicaThreadOptions);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4621;
            this.replicaThreadOption();
            this.state = 4626;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 29) {
                {
                {
                this.state = 4622;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 4623;
                this.replicaThreadOption();
                }
                }
                this.state = 4628;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replicaThreadOption(): ReplicaThreadOptionContext {
        let localContext = new ReplicaThreadOptionContext(this.context, this.state);
        this.enterRule(localContext, 590, MySQLParser.RULE_replicaThreadOption);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4629;
            _la = this.tokenStream.LA(1);
            if(!(_la === 466 || _la === 548)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupReplication(): GroupReplicationContext {
        let localContext = new GroupReplicationContext(this.context, this.state);
        this.enterRule(localContext, 592, MySQLParser.RULE_groupReplication);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4636;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.START_SYMBOL:
                {
                this.state = 4631;
                this.match(MySQLParser.START_SYMBOL);
                this.state = 4633;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 167 || _la === 424 || _la === 627) {
                    {
                    this.state = 4632;
                    this.groupReplicationStartOptions();
                    }
                }

                }
                break;
            case MySQLParser.STOP_SYMBOL:
                {
                this.state = 4635;
                this.match(MySQLParser.STOP_SYMBOL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 4638;
            this.match(MySQLParser.GROUP_REPLICATION_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupReplicationStartOptions(): GroupReplicationStartOptionsContext {
        let localContext = new GroupReplicationStartOptionsContext(this.context, this.state);
        this.enterRule(localContext, 594, MySQLParser.RULE_groupReplicationStartOptions);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4640;
            this.groupReplicationStartOption();
            this.state = 4645;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 29) {
                {
                {
                this.state = 4641;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 4642;
                this.groupReplicationStartOption();
                }
                }
                this.state = 4647;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupReplicationStartOption(): GroupReplicationStartOptionContext {
        let localContext = new GroupReplicationStartOptionContext(this.context, this.state);
        this.enterRule(localContext, 596, MySQLParser.RULE_groupReplicationStartOption);
        try {
            this.state = 4651;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.USER_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4648;
                this.groupReplicationUser();
                }
                break;
            case MySQLParser.PASSWORD_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4649;
                this.groupReplicationPassword();
                }
                break;
            case MySQLParser.DEFAULT_AUTH_SYMBOL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4650;
                this.groupReplicationPluginAuth();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupReplicationUser(): GroupReplicationUserContext {
        let localContext = new GroupReplicationUserContext(this.context, this.state);
        this.enterRule(localContext, 598, MySQLParser.RULE_groupReplicationUser);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4653;
            this.match(MySQLParser.USER_SYMBOL);
            this.state = 4654;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 4655;
            this.textStringNoLinebreak();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupReplicationPassword(): GroupReplicationPasswordContext {
        let localContext = new GroupReplicationPasswordContext(this.context, this.state);
        this.enterRule(localContext, 600, MySQLParser.RULE_groupReplicationPassword);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4657;
            this.match(MySQLParser.PASSWORD_SYMBOL);
            this.state = 4658;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 4659;
            this.textStringNoLinebreak();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupReplicationPluginAuth(): GroupReplicationPluginAuthContext {
        let localContext = new GroupReplicationPluginAuthContext(this.context, this.state);
        this.enterRule(localContext, 602, MySQLParser.RULE_groupReplicationPluginAuth);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4661;
            this.match(MySQLParser.DEFAULT_AUTH_SYMBOL);
            this.state = 4662;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 4663;
            this.textStringNoLinebreak();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replica(): ReplicaContext {
        let localContext = new ReplicaContext(this.context, this.state);
        this.enterRule(localContext, 604, MySQLParser.RULE_replica);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4665;
            _la = this.tokenStream.LA(1);
            if(!(_la === 526 || _la === 762)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public preparedStatement(): PreparedStatementContext {
        let localContext = new PreparedStatementContext(this.context, this.state);
        this.enterRule(localContext, 606, MySQLParser.RULE_preparedStatement);
        let _la: number;
        try {
            this.state = 4678;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.PREPARE_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4667;
                localContext._type_ = this.match(MySQLParser.PREPARE_SYMBOL);
                this.state = 4668;
                this.identifier();
                this.state = 4669;
                this.match(MySQLParser.FROM_SYMBOL);
                this.state = 4672;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 487, this.context) ) {
                case 1:
                    {
                    this.state = 4670;
                    this.textLiteral();
                    }
                    break;
                case 2:
                    {
                    this.state = 4671;
                    this.userVariable();
                    }
                    break;
                }
                }
                break;
            case MySQLParser.EXECUTE_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4674;
                this.executeStatement();
                }
                break;
            case MySQLParser.DEALLOCATE_SYMBOL:
            case MySQLParser.DROP_SYMBOL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4675;
                localContext._type_ = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 163 || _la === 184)) {
                    localContext._type_ = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4676;
                this.match(MySQLParser.PREPARE_SYMBOL);
                this.state = 4677;
                this.identifier();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public executeStatement(): ExecuteStatementContext {
        let localContext = new ExecuteStatementContext(this.context, this.state);
        this.enterRule(localContext, 608, MySQLParser.RULE_executeStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4680;
            this.match(MySQLParser.EXECUTE_SYMBOL);
            this.state = 4681;
            this.identifier();
            this.state = 4684;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 630) {
                {
                this.state = 4682;
                this.match(MySQLParser.USING_SYMBOL);
                this.state = 4683;
                this.executeVarList();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public executeVarList(): ExecuteVarListContext {
        let localContext = new ExecuteVarListContext(this.context, this.state);
        this.enterRule(localContext, 610, MySQLParser.RULE_executeVarList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4686;
            this.userVariable();
            this.state = 4691;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 29) {
                {
                {
                this.state = 4687;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 4688;
                this.userVariable();
                }
                }
                this.state = 4693;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public cloneStatement(): CloneStatementContext {
        let localContext = new CloneStatementContext(this.context, this.state);
        this.enterRule(localContext, 612, MySQLParser.RULE_cloneStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4694;
            this.match(MySQLParser.CLONE_SYMBOL);
            this.state = 4719;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 494, this.context) ) {
            case 1:
                {
                this.state = 4695;
                this.match(MySQLParser.LOCAL_SYMBOL);
                this.state = 4696;
                this.match(MySQLParser.DATA_SYMBOL);
                this.state = 4697;
                this.match(MySQLParser.DIRECTORY_SYMBOL);
                this.state = 4699;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 491, this.context) ) {
                case 1:
                    {
                    this.state = 4698;
                    this.equal();
                    }
                    break;
                }
                this.state = 4701;
                this.textStringLiteral();
                }
                break;
            case 2:
                {
                this.state = 4702;
                this.match(MySQLParser.REMOTE_SYMBOL);
                this.state = 4705;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 232) {
                    {
                    this.state = 4703;
                    this.match(MySQLParser.FOR_SYMBOL);
                    this.state = 4704;
                    this.match(MySQLParser.REPLICATION_SYMBOL);
                    }
                }

                }
                break;
            case 3:
                {
                this.state = 4707;
                if (!(this.serverVersion >= 80014)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80014");
                }
                this.state = 4708;
                this.match(MySQLParser.INSTANCE_SYMBOL);
                this.state = 4709;
                this.match(MySQLParser.FROM_SYMBOL);
                this.state = 4710;
                this.user();
                this.state = 4711;
                this.match(MySQLParser.COLON_SYMBOL);
                this.state = 4712;
                this.ulong_number();
                this.state = 4713;
                this.match(MySQLParser.IDENTIFIED_SYMBOL);
                this.state = 4714;
                this.match(MySQLParser.BY_SYMBOL);
                this.state = 4715;
                this.textStringLiteral();
                this.state = 4717;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 153 || _la === 484) {
                    {
                    this.state = 4716;
                    this.dataDirSSL();
                    }
                }

                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dataDirSSL(): DataDirSSLContext {
        let localContext = new DataDirSSLContext(this.context, this.state);
        this.enterRule(localContext, 614, MySQLParser.RULE_dataDirSSL);
        let _la: number;
        try {
            this.state = 4731;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.REQUIRE_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4721;
                this.ssl();
                }
                break;
            case MySQLParser.DATA_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4722;
                this.match(MySQLParser.DATA_SYMBOL);
                this.state = 4723;
                this.match(MySQLParser.DIRECTORY_SYMBOL);
                this.state = 4725;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 495, this.context) ) {
                case 1:
                    {
                    this.state = 4724;
                    this.equal();
                    }
                    break;
                }
                this.state = 4727;
                this.textStringLiteral();
                this.state = 4729;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 484) {
                    {
                    this.state = 4728;
                    this.ssl();
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ssl(): SslContext {
        let localContext = new SslContext(this.context, this.state);
        this.enterRule(localContext, 616, MySQLParser.RULE_ssl);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4733;
            this.match(MySQLParser.REQUIRE_SYMBOL);
            this.state = 4735;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 392) {
                {
                this.state = 4734;
                this.match(MySQLParser.NO_SYMBOL);
                }
            }

            this.state = 4737;
            this.match(MySQLParser.SSL_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public accountManagementStatement(): AccountManagementStatementContext {
        let localContext = new AccountManagementStatementContext(this.context, this.state);
        this.enterRule(localContext, 618, MySQLParser.RULE_accountManagementStatement);
        try {
            this.state = 4746;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.ALTER_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4739;
                this.alterUserStatement();
                }
                break;
            case MySQLParser.CREATE_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4740;
                this.createUserStatement();
                }
                break;
            case MySQLParser.DROP_SYMBOL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4741;
                this.dropUserStatement();
                }
                break;
            case MySQLParser.GRANT_SYMBOL:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4742;
                this.grantStatement();
                }
                break;
            case MySQLParser.RENAME_SYMBOL:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4743;
                this.renameUserStatement();
                }
                break;
            case MySQLParser.REVOKE_SYMBOL:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4744;
                this.revokeStatement();
                }
                break;
            case MySQLParser.SET_SYMBOL:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4745;
                this.setRoleStatement();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterUserStatement(): AlterUserStatementContext {
        let localContext = new AlterUserStatementContext(this.context, this.state);
        this.enterRule(localContext, 620, MySQLParser.RULE_alterUserStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4748;
            this.match(MySQLParser.ALTER_SYMBOL);
            this.state = 4749;
            this.match(MySQLParser.USER_SYMBOL);
            this.state = 4751;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 500, this.context) ) {
            case 1:
                {
                this.state = 4750;
                this.ifExists();
                }
                break;
            }
            this.state = 4793;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 510, this.context) ) {
            case 1:
                {
                this.state = 4757;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 501, this.context) ) {
                case 1:
                    {
                    this.state = 4753;
                    if (!(this.serverVersion < 80014)) {
                        throw this.createFailedPredicateException("this.serverVersion < 80014");
                    }
                    this.state = 4754;
                    this.createUserList();
                    }
                    break;
                case 2:
                    {
                    this.state = 4755;
                    if (!(this.serverVersion >= 80014)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80014");
                    }
                    this.state = 4756;
                    this.alterUserList();
                    }
                    break;
                }
                this.state = 4759;
                this.createUserTail();
                }
                break;
            case 2:
                {
                this.state = 4761;
                this.userFunction();
                this.state = 4778;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySQLParser.IDENTIFIED_SYMBOL:
                    {
                    this.state = 4764;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 502, this.context) ) {
                    case 1:
                        {
                        this.state = 4762;
                        this.identifiedByRandomPassword();
                        }
                        break;
                    case 2:
                        {
                        this.state = 4763;
                        this.identifiedByPassword();
                        }
                        break;
                    }
                    this.state = 4767;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 475) {
                        {
                        this.state = 4766;
                        this.replacePassword();
                        }
                    }

                    this.state = 4770;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 735) {
                        {
                        this.state = 4769;
                        this.retainCurrentPassword();
                        }
                    }

                    }
                    break;
                case MySQLParser.DISCARD_SYMBOL:
                    {
                    this.state = 4772;
                    this.match(MySQLParser.DISCARD_SYMBOL);
                    this.state = 4773;
                    this.match(MySQLParser.OLD_SYMBOL);
                    this.state = 4774;
                    this.match(MySQLParser.PASSWORD_SYMBOL);
                    }
                    break;
                case MySQLParser.EOF:
                case MySQLParser.INT_NUMBER:
                case MySQLParser.LONG_NUMBER:
                case MySQLParser.ULONGLONG_NUMBER:
                case MySQLParser.SEMICOLON_SYMBOL:
                case MySQLParser.DECIMAL_NUMBER:
                case MySQLParser.FLOAT_NUMBER:
                    {
                    this.state = 4776;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 56) !== 0) || _la === 46 || _la === 47) {
                        {
                        this.state = 4775;
                        this.userRegistration();
                        }
                    }

                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 3:
                {
                this.state = 4780;
                this.user();
                this.state = 4791;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySQLParser.DEFAULT_SYMBOL:
                    {
                    this.state = 4781;
                    this.match(MySQLParser.DEFAULT_SYMBOL);
                    this.state = 4782;
                    this.match(MySQLParser.ROLE_SYMBOL);
                    this.state = 4786;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 507, this.context) ) {
                    case 1:
                        {
                        this.state = 4783;
                        this.match(MySQLParser.ALL_SYMBOL);
                        }
                        break;
                    case 2:
                        {
                        this.state = 4784;
                        this.match(MySQLParser.NONE_SYMBOL);
                        }
                        break;
                    case 3:
                        {
                        this.state = 4785;
                        this.roleList();
                        }
                        break;
                    }
                    }
                    break;
                case MySQLParser.EOF:
                case MySQLParser.INT_NUMBER:
                case MySQLParser.LONG_NUMBER:
                case MySQLParser.ULONGLONG_NUMBER:
                case MySQLParser.SEMICOLON_SYMBOL:
                case MySQLParser.DECIMAL_NUMBER:
                case MySQLParser.FLOAT_NUMBER:
                    {
                    this.state = 4789;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 56) !== 0) || _la === 46 || _la === 47) {
                        {
                        this.state = 4788;
                        this.userRegistration();
                        }
                    }

                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterUserList(): AlterUserListContext {
        let localContext = new AlterUserListContext(this.context, this.state);
        this.enterRule(localContext, 622, MySQLParser.RULE_alterUserList);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4795;
            this.alterUser();
            this.state = 4800;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 511, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 4796;
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.state = 4797;
                    this.alterUser();
                    }
                    }
                }
                this.state = 4802;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 511, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterUser(): AlterUserContext {
        let localContext = new AlterUserContext(this.context, this.state);
        this.enterRule(localContext, 624, MySQLParser.RULE_alterUser);
        try {
            this.state = 4878;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 528, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4803;
                if (!(this.serverVersion < 80025)) {
                    throw this.createFailedPredicateException("this.serverVersion < 80025");
                }
                this.state = 4804;
                this.oldAlterUser();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4805;
                if (!(this.serverVersion >= 80025)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80025");
                }
                {
                this.state = 4806;
                this.user();
                this.state = 4876;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 527, this.context) ) {
                case 1:
                    {
                    this.state = 4807;
                    this.identifiedByPassword();
                    this.state = 4816;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 514, this.context) ) {
                    case 1:
                        {
                        this.state = 4808;
                        this.match(MySQLParser.REPLACE_SYMBOL);
                        this.state = 4809;
                        this.textStringLiteral();
                        this.state = 4811;
                        this.errorHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this.tokenStream, 512, this.context) ) {
                        case 1:
                            {
                            this.state = 4810;
                            this.retainCurrentPassword();
                            }
                            break;
                        }
                        }
                        break;
                    case 2:
                        {
                        this.state = 4814;
                        this.errorHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this.tokenStream, 513, this.context) ) {
                        case 1:
                            {
                            this.state = 4813;
                            this.retainCurrentPassword();
                            }
                            break;
                        }
                        }
                        break;
                    }
                    }
                    break;
                case 2:
                    {
                    this.state = 4818;
                    this.identifiedByRandomPassword();
                    this.state = 4827;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 517, this.context) ) {
                    case 1:
                        {
                        this.state = 4820;
                        this.errorHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this.tokenStream, 515, this.context) ) {
                        case 1:
                            {
                            this.state = 4819;
                            this.retainCurrentPassword();
                            }
                            break;
                        }
                        }
                        break;
                    case 2:
                        {
                        this.state = 4822;
                        this.match(MySQLParser.REPLACE_SYMBOL);
                        this.state = 4823;
                        this.textStringLiteral();
                        this.state = 4825;
                        this.errorHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this.tokenStream, 516, this.context) ) {
                        case 1:
                            {
                            this.state = 4824;
                            this.retainCurrentPassword();
                            }
                            break;
                        }
                        }
                        break;
                    }
                    }
                    break;
                case 3:
                    {
                    this.state = 4829;
                    this.identifiedWithPlugin();
                    }
                    break;
                case 4:
                    {
                    this.state = 4830;
                    this.identifiedWithPluginAsAuth();
                    this.state = 4832;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 518, this.context) ) {
                    case 1:
                        {
                        this.state = 4831;
                        this.retainCurrentPassword();
                        }
                        break;
                    }
                    }
                    break;
                case 5:
                    {
                    this.state = 4834;
                    this.identifiedWithPluginByPassword();
                    this.state = 4843;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 521, this.context) ) {
                    case 1:
                        {
                        this.state = 4835;
                        this.match(MySQLParser.REPLACE_SYMBOL);
                        this.state = 4836;
                        this.textStringLiteral();
                        this.state = 4838;
                        this.errorHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this.tokenStream, 519, this.context) ) {
                        case 1:
                            {
                            this.state = 4837;
                            this.retainCurrentPassword();
                            }
                            break;
                        }
                        }
                        break;
                    case 2:
                        {
                        this.state = 4841;
                        this.errorHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this.tokenStream, 520, this.context) ) {
                        case 1:
                            {
                            this.state = 4840;
                            this.retainCurrentPassword();
                            }
                            break;
                        }
                        }
                        break;
                    }
                    }
                    break;
                case 6:
                    {
                    this.state = 4845;
                    this.identifiedWithPluginByRandomPassword();
                    this.state = 4847;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 522, this.context) ) {
                    case 1:
                        {
                        this.state = 4846;
                        this.retainCurrentPassword();
                        }
                        break;
                    }
                    }
                    break;
                case 7:
                    {
                    this.state = 4850;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 523, this.context) ) {
                    case 1:
                        {
                        this.state = 4849;
                        this.discardOldPassword();
                        }
                        break;
                    }
                    }
                    break;
                case 8:
                    {
                    this.state = 4852;
                    this.match(MySQLParser.ADD_SYMBOL);
                    this.state = 4853;
                    this.factor();
                    this.state = 4854;
                    this.identification();
                    this.state = 4859;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 524, this.context) ) {
                    case 1:
                        {
                        this.state = 4855;
                        this.match(MySQLParser.ADD_SYMBOL);
                        this.state = 4856;
                        this.factor();
                        this.state = 4857;
                        this.identification();
                        }
                        break;
                    }
                    }
                    break;
                case 9:
                    {
                    this.state = 4861;
                    this.match(MySQLParser.MODIFY_SYMBOL);
                    this.state = 4862;
                    this.factor();
                    this.state = 4863;
                    this.identification();
                    this.state = 4868;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 525, this.context) ) {
                    case 1:
                        {
                        this.state = 4864;
                        this.match(MySQLParser.MODIFY_SYMBOL);
                        this.state = 4865;
                        this.factor();
                        this.state = 4866;
                        this.identification();
                        }
                        break;
                    }
                    }
                    break;
                case 10:
                    {
                    this.state = 4870;
                    this.match(MySQLParser.DROP_SYMBOL);
                    this.state = 4871;
                    this.factor();
                    this.state = 4874;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 526, this.context) ) {
                    case 1:
                        {
                        this.state = 4872;
                        this.match(MySQLParser.DROP_SYMBOL);
                        this.state = 4873;
                        this.factor();
                        }
                        break;
                    }
                    }
                    break;
                }
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public oldAlterUser(): OldAlterUserContext {
        let localContext = new OldAlterUserContext(this.context, this.state);
        this.enterRule(localContext, 626, MySQLParser.RULE_oldAlterUser);
        try {
            this.state = 4937;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 540, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4880;
                this.user();
                this.state = 4881;
                this.match(MySQLParser.IDENTIFIED_SYMBOL);
                this.state = 4882;
                this.match(MySQLParser.BY_SYMBOL);
                this.state = 4902;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 533, this.context) ) {
                case 1:
                    {
                    this.state = 4883;
                    this.textString();
                    this.state = 4884;
                    this.match(MySQLParser.REPLACE_SYMBOL);
                    this.state = 4885;
                    this.textString();
                    this.state = 4887;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 529, this.context) ) {
                    case 1:
                        {
                        this.state = 4886;
                        this.retainCurrentPassword();
                        }
                        break;
                    }
                    }
                    break;
                case 2:
                    {
                    this.state = 4889;
                    this.textString();
                    this.state = 4891;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 530, this.context) ) {
                    case 1:
                        {
                        this.state = 4890;
                        this.retainCurrentPassword();
                        }
                        break;
                    }
                    }
                    break;
                case 3:
                    {
                    this.state = 4893;
                    this.match(MySQLParser.RANDOM_SYMBOL);
                    this.state = 4894;
                    this.match(MySQLParser.PASSWORD_SYMBOL);
                    this.state = 4897;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 531, this.context) ) {
                    case 1:
                        {
                        this.state = 4895;
                        this.match(MySQLParser.REPLACE_SYMBOL);
                        this.state = 4896;
                        this.textString();
                        }
                        break;
                    }
                    this.state = 4900;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 532, this.context) ) {
                    case 1:
                        {
                        this.state = 4899;
                        this.retainCurrentPassword();
                        }
                        break;
                    }
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4904;
                this.user();
                this.state = 4905;
                this.match(MySQLParser.IDENTIFIED_SYMBOL);
                this.state = 4906;
                this.match(MySQLParser.WITH_SYMBOL);
                {
                this.state = 4907;
                this.textOrIdentifier();
                this.state = 4931;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 538, this.context) ) {
                case 1:
                    {
                    this.state = 4908;
                    this.match(MySQLParser.BY_SYMBOL);
                    this.state = 4909;
                    this.textString();
                    this.state = 4910;
                    this.match(MySQLParser.REPLACE_SYMBOL);
                    this.state = 4911;
                    this.textString();
                    this.state = 4913;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 534, this.context) ) {
                    case 1:
                        {
                        this.state = 4912;
                        this.retainCurrentPassword();
                        }
                        break;
                    }
                    }
                    break;
                case 2:
                    {
                    this.state = 4915;
                    this.match(MySQLParser.AS_SYMBOL);
                    this.state = 4916;
                    this.textStringHash();
                    this.state = 4918;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 535, this.context) ) {
                    case 1:
                        {
                        this.state = 4917;
                        this.retainCurrentPassword();
                        }
                        break;
                    }
                    }
                    break;
                case 3:
                    {
                    this.state = 4920;
                    this.match(MySQLParser.BY_SYMBOL);
                    this.state = 4921;
                    this.textString();
                    this.state = 4923;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 536, this.context) ) {
                    case 1:
                        {
                        this.state = 4922;
                        this.retainCurrentPassword();
                        }
                        break;
                    }
                    }
                    break;
                case 4:
                    {
                    this.state = 4925;
                    this.match(MySQLParser.BY_SYMBOL);
                    this.state = 4926;
                    this.match(MySQLParser.RANDOM_SYMBOL);
                    this.state = 4927;
                    this.match(MySQLParser.PASSWORD_SYMBOL);
                    this.state = 4929;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 537, this.context) ) {
                    case 1:
                        {
                        this.state = 4928;
                        this.retainCurrentPassword();
                        }
                        break;
                    }
                    }
                    break;
                }
                }
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4933;
                this.user();
                this.state = 4935;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 539, this.context) ) {
                case 1:
                    {
                    this.state = 4934;
                    this.discardOldPassword();
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public userFunction(): UserFunctionContext {
        let localContext = new UserFunctionContext(this.context, this.state);
        this.enterRule(localContext, 628, MySQLParser.RULE_userFunction);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4939;
            this.match(MySQLParser.USER_SYMBOL);
            this.state = 4940;
            this.parentheses();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createUserStatement(): CreateUserStatementContext {
        let localContext = new CreateUserStatementContext(this.context, this.state);
        this.enterRule(localContext, 630, MySQLParser.RULE_createUserStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4942;
            this.match(MySQLParser.CREATE_SYMBOL);
            this.state = 4943;
            this.match(MySQLParser.USER_SYMBOL);
            this.state = 4945;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 541, this.context) ) {
            case 1:
                {
                this.state = 4944;
                this.ifNotExists();
                }
                break;
            }
            this.state = 4947;
            this.createUserList();
            this.state = 4949;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 542, this.context) ) {
            case 1:
                {
                this.state = 4948;
                this.defaultRoleClause();
                }
                break;
            }
            this.state = 4951;
            this.createUserTail();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createUserTail(): CreateUserTailContext {
        let localContext = new CreateUserTailContext(this.context, this.state);
        this.enterRule(localContext, 632, MySQLParser.RULE_createUserTail);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4954;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 543, this.context) ) {
            case 1:
                {
                this.state = 4953;
                this.requireClause();
                }
                break;
            }
            this.state = 4957;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 544, this.context) ) {
            case 1:
                {
                this.state = 4956;
                this.connectOptions();
                }
                break;
            }
            this.state = 4962;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 545, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 4959;
                    this.accountLockPasswordExpireOptions();
                    }
                    }
                }
                this.state = 4964;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 545, this.context);
            }
            this.state = 4967;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 546, this.context) ) {
            case 1:
                {
                this.state = 4965;
                if (!(this.serverVersion >= 80024)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80024");
                }
                this.state = 4966;
                this.userAttributes();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public userAttributes(): UserAttributesContext {
        let localContext = new UserAttributesContext(this.context, this.state);
        this.enterRule(localContext, 634, MySQLParser.RULE_userAttributes);
        try {
            this.state = 4973;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.ATTRIBUTE_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4969;
                this.match(MySQLParser.ATTRIBUTE_SYMBOL);
                this.state = 4970;
                this.textStringLiteral();
                }
                break;
            case MySQLParser.COMMENT_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4971;
                this.match(MySQLParser.COMMENT_SYMBOL);
                this.state = 4972;
                this.textStringLiteral();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public defaultRoleClause(): DefaultRoleClauseContext {
        let localContext = new DefaultRoleClauseContext(this.context, this.state);
        this.enterRule(localContext, 636, MySQLParser.RULE_defaultRoleClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4975;
            this.match(MySQLParser.DEFAULT_SYMBOL);
            this.state = 4976;
            this.match(MySQLParser.ROLE_SYMBOL);
            this.state = 4977;
            this.roleList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public requireClause(): RequireClauseContext {
        let localContext = new RequireClauseContext(this.context, this.state);
        this.enterRule(localContext, 638, MySQLParser.RULE_requireClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4979;
            this.match(MySQLParser.REQUIRE_SYMBOL);
            this.state = 4982;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.CIPHER_SYMBOL:
            case MySQLParser.ISSUER_SYMBOL:
            case MySQLParser.SUBJECT_SYMBOL:
                {
                this.state = 4980;
                this.requireList();
                }
                break;
            case MySQLParser.NONE_SYMBOL:
            case MySQLParser.SSL_SYMBOL:
            case MySQLParser.X509_SYMBOL:
                {
                this.state = 4981;
                localContext._option = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 389 || _la === 549 || _la === 658)) {
                    localContext._option = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public connectOptions(): ConnectOptionsContext {
        let localContext = new ConnectOptionsContext(this.context, this.state);
        this.enterRule(localContext, 640, MySQLParser.RULE_connectOptions);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4984;
            this.match(MySQLParser.WITH_SYMBOL);
            this.state = 4993;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    this.state = 4993;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL:
                        {
                        this.state = 4985;
                        this.match(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL);
                        this.state = 4986;
                        this.ulong_number();
                        }
                        break;
                    case MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL:
                        {
                        this.state = 4987;
                        this.match(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL);
                        this.state = 4988;
                        this.ulong_number();
                        }
                        break;
                    case MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL:
                        {
                        this.state = 4989;
                        this.match(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL);
                        this.state = 4990;
                        this.ulong_number();
                        }
                        break;
                    case MySQLParser.MAX_USER_CONNECTIONS_SYMBOL:
                        {
                        this.state = 4991;
                        this.match(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL);
                        this.state = 4992;
                        this.ulong_number();
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 4995;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 550, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public accountLockPasswordExpireOptions(): AccountLockPasswordExpireOptionsContext {
        let localContext = new AccountLockPasswordExpireOptionsContext(this.context, this.state);
        this.enterRule(localContext, 642, MySQLParser.RULE_accountLockPasswordExpireOptions);
        let _la: number;
        try {
            this.state = 5037;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.ACCOUNT_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4997;
                this.match(MySQLParser.ACCOUNT_SYMBOL);
                this.state = 4998;
                _la = this.tokenStream.LA(1);
                if(!(_la === 314 || _la === 620)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case MySQLParser.PASSWORD_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4999;
                this.match(MySQLParser.PASSWORD_SYMBOL);
                this.state = 5028;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 555, this.context) ) {
                case 1:
                    {
                    this.state = 5000;
                    this.match(MySQLParser.EXPIRE_SYMBOL);
                    this.state = 5007;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 551, this.context) ) {
                    case 1:
                        {
                        this.state = 5001;
                        this.match(MySQLParser.INTERVAL_SYMBOL);
                        this.state = 5002;
                        this.real_ulong_number();
                        this.state = 5003;
                        this.match(MySQLParser.DAY_SYMBOL);
                        }
                        break;
                    case 2:
                        {
                        this.state = 5005;
                        this.match(MySQLParser.NEVER_SYMBOL);
                        }
                        break;
                    case 3:
                        {
                        this.state = 5006;
                        this.match(MySQLParser.DEFAULT_SYMBOL);
                        }
                        break;
                    }
                    }
                    break;
                case 2:
                    {
                    this.state = 5009;
                    this.match(MySQLParser.HISTORY_SYMBOL);
                    this.state = 5012;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case MySQLParser.INT_NUMBER:
                    case MySQLParser.LONG_NUMBER:
                    case MySQLParser.ULONGLONG_NUMBER:
                    case MySQLParser.HEX_NUMBER:
                        {
                        this.state = 5010;
                        this.real_ulong_number();
                        }
                        break;
                    case MySQLParser.DEFAULT_SYMBOL:
                        {
                        this.state = 5011;
                        this.match(MySQLParser.DEFAULT_SYMBOL);
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                    break;
                case 3:
                    {
                    this.state = 5014;
                    this.match(MySQLParser.REUSE_SYMBOL);
                    this.state = 5015;
                    this.match(MySQLParser.INTERVAL_SYMBOL);
                    this.state = 5020;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case MySQLParser.INT_NUMBER:
                    case MySQLParser.LONG_NUMBER:
                    case MySQLParser.ULONGLONG_NUMBER:
                    case MySQLParser.HEX_NUMBER:
                        {
                        this.state = 5016;
                        this.real_ulong_number();
                        this.state = 5017;
                        this.match(MySQLParser.DAY_SYMBOL);
                        }
                        break;
                    case MySQLParser.DEFAULT_SYMBOL:
                        {
                        this.state = 5019;
                        this.match(MySQLParser.DEFAULT_SYMBOL);
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                    break;
                case 4:
                    {
                    this.state = 5022;
                    if (!(this.serverVersion >= 80014)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80014");
                    }
                    this.state = 5023;
                    this.match(MySQLParser.REQUIRE_SYMBOL);
                    this.state = 5024;
                    this.match(MySQLParser.CURRENT_SYMBOL);
                    this.state = 5026;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 554, this.context) ) {
                    case 1:
                        {
                        this.state = 5025;
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 166 || _la === 727)) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        }
                        break;
                    }
                    }
                    break;
                }
                }
                break;
            case MySQLParser.FAILED_LOGIN_ATTEMPTS_SYMBOL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5030;
                this.match(MySQLParser.FAILED_LOGIN_ATTEMPTS_SYMBOL);
                this.state = 5031;
                this.real_ulong_number();
                }
                break;
            case MySQLParser.PASSWORD_LOCK_TIME_SYMBOL:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5032;
                this.match(MySQLParser.PASSWORD_LOCK_TIME_SYMBOL);
                this.state = 5035;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySQLParser.INT_NUMBER:
                case MySQLParser.LONG_NUMBER:
                case MySQLParser.ULONGLONG_NUMBER:
                case MySQLParser.HEX_NUMBER:
                    {
                    this.state = 5033;
                    this.real_ulong_number();
                    }
                    break;
                case MySQLParser.UNBOUNDED_SYMBOL:
                    {
                    this.state = 5034;
                    this.match(MySQLParser.UNBOUNDED_SYMBOL);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public userAttribute(): UserAttributeContext {
        let localContext = new UserAttributeContext(this.context, this.state);
        this.enterRule(localContext, 644, MySQLParser.RULE_userAttribute);
        try {
            this.state = 5044;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.EOF:
                this.enterOuterAlt(localContext, 1);
                // tslint:disable-next-line:no-empty
                {
                }
                break;
            case MySQLParser.ATTRIBUTE_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5040;
                this.match(MySQLParser.ATTRIBUTE_SYMBOL);
                this.state = 5041;
                this.textStringLiteral();
                }
                break;
            case MySQLParser.COMMENT_SYMBOL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5042;
                this.match(MySQLParser.COMMENT_SYMBOL);
                this.state = 5043;
                this.textStringLiteral();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropUserStatement(): DropUserStatementContext {
        let localContext = new DropUserStatementContext(this.context, this.state);
        this.enterRule(localContext, 646, MySQLParser.RULE_dropUserStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5046;
            this.match(MySQLParser.DROP_SYMBOL);
            this.state = 5047;
            this.match(MySQLParser.USER_SYMBOL);
            this.state = 5049;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 559, this.context) ) {
            case 1:
                {
                this.state = 5048;
                this.ifExists();
                }
                break;
            }
            this.state = 5051;
            this.userList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grantStatement(): GrantStatementContext {
        let localContext = new GrantStatementContext(this.context, this.state);
        this.enterRule(localContext, 648, MySQLParser.RULE_grantStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5053;
            this.match(MySQLParser.GRANT_SYMBOL);
            this.state = 5095;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 568, this.context) ) {
            case 1:
                {
                this.state = 5054;
                this.roleOrPrivilegesList();
                this.state = 5055;
                this.match(MySQLParser.TO_SYMBOL);
                this.state = 5056;
                this.userList();
                this.state = 5060;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 653) {
                    {
                    this.state = 5057;
                    this.match(MySQLParser.WITH_SYMBOL);
                    this.state = 5058;
                    this.match(MySQLParser.ADMIN_SYMBOL);
                    this.state = 5059;
                    this.match(MySQLParser.OPTION_SYMBOL);
                    }
                }

                }
                break;
            case 2:
                {
                this.state = 5067;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 562, this.context) ) {
                case 1:
                    {
                    this.state = 5062;
                    this.roleOrPrivilegesList();
                    }
                    break;
                case 2:
                    {
                    this.state = 5063;
                    this.match(MySQLParser.ALL_SYMBOL);
                    this.state = 5065;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 439) {
                        {
                        this.state = 5064;
                        this.match(MySQLParser.PRIVILEGES_SYMBOL);
                        }
                    }

                    }
                    break;
                }
                this.state = 5069;
                this.match(MySQLParser.ON_SYMBOL);
                this.state = 5071;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 563, this.context) ) {
                case 1:
                    {
                    this.state = 5070;
                    this.aclType();
                    }
                    break;
                }
                this.state = 5073;
                this.grantIdentifier();
                this.state = 5074;
                this.match(MySQLParser.TO_SYMBOL);
                this.state = 5075;
                this.grantTargetList();
                this.state = 5077;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 564, this.context) ) {
                case 1:
                    {
                    this.state = 5076;
                    this.versionedRequireClause();
                    }
                    break;
                }
                this.state = 5080;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 653) {
                    {
                    this.state = 5079;
                    this.grantOptions();
                    }
                }

                this.state = 5083;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 63) {
                    {
                    this.state = 5082;
                    this.grantAs();
                    }
                }

                }
                break;
            case 3:
                {
                this.state = 5085;
                this.match(MySQLParser.PROXY_SYMBOL);
                this.state = 5086;
                this.match(MySQLParser.ON_SYMBOL);
                this.state = 5087;
                this.user();
                this.state = 5088;
                this.match(MySQLParser.TO_SYMBOL);
                this.state = 5089;
                this.grantTargetList();
                this.state = 5093;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 653) {
                    {
                    this.state = 5090;
                    this.match(MySQLParser.WITH_SYMBOL);
                    this.state = 5091;
                    this.match(MySQLParser.GRANT_SYMBOL);
                    this.state = 5092;
                    this.match(MySQLParser.OPTION_SYMBOL);
                    }
                }

                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grantTargetList(): GrantTargetListContext {
        let localContext = new GrantTargetListContext(this.context, this.state);
        this.enterRule(localContext, 650, MySQLParser.RULE_grantTargetList);
        try {
            this.state = 5101;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 569, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5097;
                if (!(this.serverVersion < 80011)) {
                    throw this.createFailedPredicateException("this.serverVersion < 80011");
                }
                this.state = 5098;
                this.createUserList();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5099;
                if (!(this.serverVersion >= 80011)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80011");
                }
                this.state = 5100;
                this.userList();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grantOptions(): GrantOptionsContext {
        let localContext = new GrantOptionsContext(this.context, this.state);
        this.enterRule(localContext, 652, MySQLParser.RULE_grantOptions);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5103;
            this.match(MySQLParser.WITH_SYMBOL);
            this.state = 5104;
            this.grantOption();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public exceptRoleList(): ExceptRoleListContext {
        let localContext = new ExceptRoleListContext(this.context, this.state);
        this.enterRule(localContext, 654, MySQLParser.RULE_exceptRoleList);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5106;
            this.match(MySQLParser.EXCEPT_SYMBOL);
            this.state = 5107;
            this.roleList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public withRoles(): WithRolesContext {
        let localContext = new WithRolesContext(this.context, this.state);
        this.enterRule(localContext, 656, MySQLParser.RULE_withRoles);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5109;
            this.match(MySQLParser.WITH_SYMBOL);
            this.state = 5110;
            this.match(MySQLParser.ROLE_SYMBOL);
            this.state = 5118;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 571, this.context) ) {
            case 1:
                {
                this.state = 5111;
                this.roleList();
                }
                break;
            case 2:
                {
                this.state = 5112;
                this.match(MySQLParser.ALL_SYMBOL);
                this.state = 5114;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 671) {
                    {
                    this.state = 5113;
                    this.exceptRoleList();
                    }
                }

                }
                break;
            case 3:
                {
                this.state = 5116;
                this.match(MySQLParser.NONE_SYMBOL);
                }
                break;
            case 4:
                {
                this.state = 5117;
                this.match(MySQLParser.DEFAULT_SYMBOL);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grantAs(): GrantAsContext {
        let localContext = new GrantAsContext(this.context, this.state);
        this.enterRule(localContext, 658, MySQLParser.RULE_grantAs);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5120;
            this.match(MySQLParser.AS_SYMBOL);
            this.state = 5121;
            this.match(MySQLParser.USER_SYMBOL);
            this.state = 5123;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 653) {
                {
                this.state = 5122;
                this.withRoles();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public versionedRequireClause(): VersionedRequireClauseContext {
        let localContext = new VersionedRequireClauseContext(this.context, this.state);
        this.enterRule(localContext, 660, MySQLParser.RULE_versionedRequireClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5125;
            if (!(this.serverVersion < 80011)) {
                throw this.createFailedPredicateException("this.serverVersion < 80011");
            }
            this.state = 5126;
            this.requireClause();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public renameUserStatement(): RenameUserStatementContext {
        let localContext = new RenameUserStatementContext(this.context, this.state);
        this.enterRule(localContext, 662, MySQLParser.RULE_renameUserStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5128;
            this.match(MySQLParser.RENAME_SYMBOL);
            this.state = 5129;
            this.match(MySQLParser.USER_SYMBOL);
            this.state = 5130;
            this.user();
            this.state = 5131;
            this.match(MySQLParser.TO_SYMBOL);
            this.state = 5132;
            this.user();
            this.state = 5140;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 29) {
                {
                {
                this.state = 5133;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 5134;
                this.user();
                this.state = 5135;
                this.match(MySQLParser.TO_SYMBOL);
                this.state = 5136;
                this.user();
                }
                }
                this.state = 5142;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public revokeStatement(): RevokeStatementContext {
        let localContext = new RevokeStatementContext(this.context, this.state);
        this.enterRule(localContext, 664, MySQLParser.RULE_revokeStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5143;
            this.match(MySQLParser.REVOKE_SYMBOL);
            this.state = 5146;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 574, this.context) ) {
            case 1:
                {
                this.state = 5144;
                if (!(this.serverVersion >= 80031)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80031");
                }
                this.state = 5145;
                this.ifExists();
                }
                break;
            }
            this.state = 5183;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 579, this.context) ) {
            case 1:
                {
                this.state = 5148;
                this.roleOrPrivilegesList();
                this.state = 5149;
                this.match(MySQLParser.FROM_SYMBOL);
                this.state = 5150;
                this.userList();
                }
                break;
            case 2:
                {
                this.state = 5152;
                this.roleOrPrivilegesList();
                this.state = 5153;
                this.match(MySQLParser.ON_SYMBOL);
                this.state = 5155;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 575, this.context) ) {
                case 1:
                    {
                    this.state = 5154;
                    this.aclType();
                    }
                    break;
                }
                this.state = 5157;
                this.grantIdentifier();
                this.state = 5158;
                this.match(MySQLParser.FROM_SYMBOL);
                this.state = 5159;
                this.userList();
                }
                break;
            case 3:
                {
                this.state = 5161;
                this.match(MySQLParser.ALL_SYMBOL);
                this.state = 5163;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 439) {
                    {
                    this.state = 5162;
                    this.match(MySQLParser.PRIVILEGES_SYMBOL);
                    }
                }

                this.state = 5173;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySQLParser.ON_SYMBOL:
                    {
                    this.state = 5165;
                    this.match(MySQLParser.ON_SYMBOL);
                    this.state = 5167;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 577, this.context) ) {
                    case 1:
                        {
                        this.state = 5166;
                        this.aclType();
                        }
                        break;
                    }
                    this.state = 5169;
                    this.grantIdentifier();
                    }
                    break;
                case MySQLParser.COMMA_SYMBOL:
                    {
                    this.state = 5170;
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.state = 5171;
                    this.match(MySQLParser.GRANT_SYMBOL);
                    this.state = 5172;
                    this.match(MySQLParser.OPTION_SYMBOL);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 5175;
                this.match(MySQLParser.FROM_SYMBOL);
                this.state = 5176;
                this.userList();
                }
                break;
            case 4:
                {
                this.state = 5177;
                this.match(MySQLParser.PROXY_SYMBOL);
                this.state = 5178;
                this.match(MySQLParser.ON_SYMBOL);
                this.state = 5179;
                this.user();
                this.state = 5180;
                this.match(MySQLParser.FROM_SYMBOL);
                this.state = 5181;
                this.userList();
                }
                break;
            }
            this.state = 5187;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 580, this.context) ) {
            case 1:
                {
                this.state = 5185;
                if (!(this.serverVersion >= 80031)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80031");
                }
                this.state = 5186;
                this.ignoreUnknownUser();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public aclType(): AclTypeContext {
        let localContext = new AclTypeContext(this.context, this.state);
        this.enterRule(localContext, 666, MySQLParser.RULE_aclType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5189;
            _la = this.tokenStream.LA(1);
            if(!(_la === 238 || _la === 440 || _la === 583)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public roleOrPrivilegesList(): RoleOrPrivilegesListContext {
        let localContext = new RoleOrPrivilegesListContext(this.context, this.state);
        this.enterRule(localContext, 668, MySQLParser.RULE_roleOrPrivilegesList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5191;
            this.roleOrPrivilege();
            this.state = 5196;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 29) {
                {
                {
                this.state = 5192;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 5193;
                this.roleOrPrivilege();
                }
                }
                this.state = 5198;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public roleOrPrivilege(): RoleOrPrivilegeContext {
        let localContext = new RoleOrPrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 670, MySQLParser.RULE_roleOrPrivilege);
        let _la: number;
        try {
            this.state = 5241;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 589, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5209;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 584, this.context) ) {
                case 1:
                    {
                    this.state = 5199;
                    this.roleIdentifierOrText();
                    this.state = 5201;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 32) {
                        {
                        this.state = 5200;
                        this.columnInternalRefList();
                        }
                    }

                    }
                    break;
                case 2:
                    {
                    this.state = 5203;
                    this.roleIdentifierOrText();
                    this.state = 5207;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case MySQLParser.AT_TEXT_SUFFIX:
                        {
                        this.state = 5204;
                        this.match(MySQLParser.AT_TEXT_SUFFIX);
                        }
                        break;
                    case MySQLParser.AT_SIGN_SYMBOL:
                        {
                        this.state = 5205;
                        this.match(MySQLParser.AT_SIGN_SYMBOL);
                        this.state = 5206;
                        this.textOrIdentifier();
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5211;
                _la = this.tokenStream.LA(1);
                if(!(_la === 274 || _la === 460 || _la === 511 || _la === 623)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5213;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 32) {
                    {
                    this.state = 5212;
                    this.columnInternalRefList();
                    }
                }

                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5215;
                _la = this.tokenStream.LA(1);
                if(!(_la === 171 || _la === 184 || ((((_la - 205)) & ~0x1F) === 0 && ((1 << (_la - 205)) & 131081) !== 0) || _la === 268 || ((((_la - 441)) & ~0x1F) === 0 && ((1 << (_la - 441)) & 134217745) !== 0) || _la === 522 || _la === 575 || _la === 603 || _la === 625)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5216;
                this.match(MySQLParser.GRANT_SYMBOL);
                this.state = 5217;
                this.match(MySQLParser.OPTION_SYMBOL);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 5218;
                this.match(MySQLParser.SHOW_SYMBOL);
                this.state = 5219;
                this.match(MySQLParser.DATABASES_SYMBOL);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 5220;
                this.match(MySQLParser.CREATE_SYMBOL);
                this.state = 5224;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySQLParser.TEMPORARY_SYMBOL:
                    {
                    this.state = 5221;
                    this.match(MySQLParser.TEMPORARY_SYMBOL);
                    this.state = 5222;
                    localContext._object = this.match(MySQLParser.TABLES_SYMBOL);
                    }
                    break;
                case MySQLParser.ROUTINE_SYMBOL:
                case MySQLParser.TABLESPACE_SYMBOL:
                case MySQLParser.USER_SYMBOL:
                case MySQLParser.VIEW_SYMBOL:
                    {
                    this.state = 5223;
                    localContext._object = this.tokenStream.LT(1);
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 499 || _la === 582 || _la === 627 || _la === 644)) {
                        localContext._object = this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                case MySQLParser.COMMA_SYMBOL:
                case MySQLParser.FROM_SYMBOL:
                case MySQLParser.ON_SYMBOL:
                case MySQLParser.TO_SYMBOL:
                    break;
                default:
                    break;
                }
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 5226;
                this.match(MySQLParser.LOCK_SYMBOL);
                this.state = 5227;
                this.match(MySQLParser.TABLES_SYMBOL);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 5228;
                this.match(MySQLParser.REPLICATION_SYMBOL);
                this.state = 5231;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySQLParser.CLIENT_SYMBOL:
                    {
                    this.state = 5229;
                    this.match(MySQLParser.CLIENT_SYMBOL);
                    }
                    break;
                case MySQLParser.SLAVE_SYMBOL:
                case MySQLParser.REPLICA_SYMBOL:
                    {
                    this.state = 5230;
                    this.replica();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 5233;
                this.match(MySQLParser.SHOW_SYMBOL);
                this.state = 5234;
                this.match(MySQLParser.VIEW_SYMBOL);
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 5235;
                this.match(MySQLParser.ALTER_SYMBOL);
                this.state = 5237;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 499) {
                    {
                    this.state = 5236;
                    this.match(MySQLParser.ROUTINE_SYMBOL);
                    }
                }

                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 5239;
                _la = this.tokenStream.LA(1);
                if(!(_la === 139 || _la === 184)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5240;
                this.match(MySQLParser.ROLE_SYMBOL);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grantIdentifier(): GrantIdentifierContext {
        let localContext = new GrantIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 672, MySQLParser.RULE_grantIdentifier);
        let _la: number;
        try {
            this.state = 5259;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 592, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5243;
                this.match(MySQLParser.MULT_OPERATOR);
                this.state = 5246;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 28) {
                    {
                    this.state = 5244;
                    this.match(MySQLParser.DOT_SYMBOL);
                    this.state = 5245;
                    this.match(MySQLParser.MULT_OPERATOR);
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5248;
                this.schemaRef();
                this.state = 5251;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 28) {
                    {
                    this.state = 5249;
                    this.match(MySQLParser.DOT_SYMBOL);
                    this.state = 5250;
                    this.match(MySQLParser.MULT_OPERATOR);
                    }
                }

                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5253;
                this.tableRef();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5254;
                if (!(this.serverVersion >= 80017)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80017");
                }
                this.state = 5255;
                this.schemaRef();
                this.state = 5256;
                this.match(MySQLParser.DOT_SYMBOL);
                this.state = 5257;
                this.tableRef();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public requireList(): RequireListContext {
        let localContext = new RequireListContext(this.context, this.state);
        this.enterRule(localContext, 674, MySQLParser.RULE_requireList);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5261;
            this.requireListElement();
            this.state = 5268;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 594, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 5263;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 61) {
                        {
                        this.state = 5262;
                        this.match(MySQLParser.AND_SYMBOL);
                        }
                    }

                    this.state = 5265;
                    this.requireListElement();
                    }
                    }
                }
                this.state = 5270;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 594, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public requireListElement(): RequireListElementContext {
        let localContext = new RequireListElementContext(this.context, this.state);
        this.enterRule(localContext, 676, MySQLParser.RULE_requireListElement);
        try {
            this.state = 5277;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.CIPHER_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5271;
                localContext._element = this.match(MySQLParser.CIPHER_SYMBOL);
                this.state = 5272;
                this.textString();
                }
                break;
            case MySQLParser.ISSUER_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5273;
                localContext._element = this.match(MySQLParser.ISSUER_SYMBOL);
                this.state = 5274;
                this.textString();
                }
                break;
            case MySQLParser.SUBJECT_SYMBOL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5275;
                localContext._element = this.match(MySQLParser.SUBJECT_SYMBOL);
                this.state = 5276;
                this.textString();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grantOption(): GrantOptionContext {
        let localContext = new GrantOptionContext(this.context, this.state);
        this.enterRule(localContext, 678, MySQLParser.RULE_grantOption);
        try {
            this.state = 5292;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 597, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5279;
                localContext._option = this.match(MySQLParser.GRANT_SYMBOL);
                this.state = 5280;
                this.match(MySQLParser.OPTION_SYMBOL);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5281;
                if (!(this.serverVersion < 80011)) {
                    throw this.createFailedPredicateException("this.serverVersion < 80011");
                }
                this.state = 5290;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL:
                    {
                    this.state = 5282;
                    localContext._option = this.match(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL);
                    this.state = 5283;
                    this.ulong_number();
                    }
                    break;
                case MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL:
                    {
                    this.state = 5284;
                    localContext._option = this.match(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL);
                    this.state = 5285;
                    this.ulong_number();
                    }
                    break;
                case MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL:
                    {
                    this.state = 5286;
                    localContext._option = this.match(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL);
                    this.state = 5287;
                    this.ulong_number();
                    }
                    break;
                case MySQLParser.MAX_USER_CONNECTIONS_SYMBOL:
                    {
                    this.state = 5288;
                    localContext._option = this.match(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL);
                    this.state = 5289;
                    this.ulong_number();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setRoleStatement(): SetRoleStatementContext {
        let localContext = new SetRoleStatementContext(this.context, this.state);
        this.enterRule(localContext, 680, MySQLParser.RULE_setRoleStatement);
        let _la: number;
        try {
            this.state = 5317;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 600, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5294;
                this.match(MySQLParser.SET_SYMBOL);
                this.state = 5295;
                this.match(MySQLParser.ROLE_SYMBOL);
                this.state = 5296;
                this.roleList();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5297;
                this.match(MySQLParser.SET_SYMBOL);
                this.state = 5298;
                this.match(MySQLParser.ROLE_SYMBOL);
                this.state = 5299;
                _la = this.tokenStream.LA(1);
                if(!(_la === 166 || _la === 389)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5300;
                this.match(MySQLParser.SET_SYMBOL);
                this.state = 5301;
                this.match(MySQLParser.DEFAULT_SYMBOL);
                this.state = 5302;
                this.match(MySQLParser.ROLE_SYMBOL);
                this.state = 5306;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 598, this.context) ) {
                case 1:
                    {
                    this.state = 5303;
                    this.roleList();
                    }
                    break;
                case 2:
                    {
                    this.state = 5304;
                    this.match(MySQLParser.NONE_SYMBOL);
                    }
                    break;
                case 3:
                    {
                    this.state = 5305;
                    this.match(MySQLParser.ALL_SYMBOL);
                    }
                    break;
                }
                this.state = 5308;
                this.match(MySQLParser.TO_SYMBOL);
                this.state = 5309;
                this.roleList();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5310;
                this.match(MySQLParser.SET_SYMBOL);
                this.state = 5311;
                this.match(MySQLParser.ROLE_SYMBOL);
                this.state = 5312;
                this.match(MySQLParser.ALL_SYMBOL);
                this.state = 5315;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 671) {
                    {
                    this.state = 5313;
                    this.match(MySQLParser.EXCEPT_SYMBOL);
                    this.state = 5314;
                    this.roleList();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public roleList(): RoleListContext {
        let localContext = new RoleListContext(this.context, this.state);
        this.enterRule(localContext, 682, MySQLParser.RULE_roleList);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5319;
            this.role();
            this.state = 5324;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 601, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 5320;
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.state = 5321;
                    this.role();
                    }
                    }
                }
                this.state = 5326;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 601, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public role(): RoleContext {
        let localContext = new RoleContext(this.context, this.state);
        this.enterRule(localContext, 684, MySQLParser.RULE_role);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5327;
            this.roleIdentifierOrText();
            this.state = 5329;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 602, this.context) ) {
            case 1:
                {
                this.state = 5328;
                this.userVariable();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableAdministrationStatement(): TableAdministrationStatementContext {
        let localContext = new TableAdministrationStatementContext(this.context, this.state);
        this.enterRule(localContext, 686, MySQLParser.RULE_tableAdministrationStatement);
        let _la: number;
        try {
            this.state = 5373;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.ANALYZE_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5331;
                localContext._type_ = this.match(MySQLParser.ANALYZE_SYMBOL);
                this.state = 5333;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 312 || _la === 394) {
                    {
                    this.state = 5332;
                    this.noWriteToBinLog();
                    }
                }

                this.state = 5335;
                this.match(MySQLParser.TABLE_SYMBOL);
                this.state = 5336;
                this.tableRefList();
                this.state = 5338;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 184 || _la === 623) {
                    {
                    this.state = 5337;
                    this.histogram();
                    }
                }

                }
                break;
            case MySQLParser.CHECK_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5340;
                localContext._type_ = this.match(MySQLParser.CHECK_SYMBOL);
                this.state = 5341;
                this.match(MySQLParser.TABLE_SYMBOL);
                this.state = 5342;
                this.tableRefList();
                this.state = 5346;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 100 || ((((_la - 215)) & ~0x1F) === 0 && ((1 << (_la - 215)) & 131089) !== 0) || _la === 357 || _la === 449) {
                    {
                    {
                    this.state = 5343;
                    this.checkOption();
                    }
                    }
                    this.state = 5348;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case MySQLParser.CHECKSUM_SYMBOL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5349;
                localContext._type_ = this.match(MySQLParser.CHECKSUM_SYMBOL);
                this.state = 5350;
                this.match(MySQLParser.TABLE_SYMBOL);
                this.state = 5351;
                this.tableRefList();
                this.state = 5353;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 215 || _la === 449) {
                    {
                    this.state = 5352;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 215 || _la === 449)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            case MySQLParser.OPTIMIZE_SYMBOL:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5355;
                localContext._type_ = this.match(MySQLParser.OPTIMIZE_SYMBOL);
                this.state = 5357;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 312 || _la === 394) {
                    {
                    this.state = 5356;
                    this.noWriteToBinLog();
                    }
                }

                this.state = 5359;
                this.match(MySQLParser.TABLE_SYMBOL);
                this.state = 5360;
                this.tableRefList();
                }
                break;
            case MySQLParser.REPAIR_SYMBOL:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 5361;
                localContext._type_ = this.match(MySQLParser.REPAIR_SYMBOL);
                this.state = 5363;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 312 || _la === 394) {
                    {
                    this.state = 5362;
                    this.noWriteToBinLog();
                    }
                }

                this.state = 5365;
                this.match(MySQLParser.TABLE_SYMBOL);
                this.state = 5366;
                this.tableRefList();
                this.state = 5370;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 215 || _la === 449 || _la === 628) {
                    {
                    {
                    this.state = 5367;
                    this.repairType();
                    }
                    }
                    this.state = 5372;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public histogramAutoUpdate(): HistogramAutoUpdateContext {
        let localContext = new HistogramAutoUpdateContext(this.context, this.state);
        this.enterRule(localContext, 688, MySQLParser.RULE_histogramAutoUpdate);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5375;
            if (!(this.serverVersion >= 80200)) {
                throw this.createFailedPredicateException("this.serverVersion >= 80200");
            }
            this.state = 5376;
            _la = this.tokenStream.LA(1);
            if(!(_la === 813 || _la === 814)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 5377;
            this.match(MySQLParser.UPDATE_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public histogramUpdateParam(): HistogramUpdateParamContext {
        let localContext = new HistogramUpdateParamContext(this.context, this.state);
        this.enterRule(localContext, 690, MySQLParser.RULE_histogramUpdateParam);
        try {
            this.state = 5389;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 613, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5380;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 611, this.context) ) {
                case 1:
                    {
                    this.state = 5379;
                    this.histogramNumBuckets();
                    }
                    break;
                }
                this.state = 5383;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 612, this.context) ) {
                case 1:
                    {
                    this.state = 5382;
                    this.histogramAutoUpdate();
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5385;
                if (!(this.serverVersion >= 80031)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80031");
                }
                this.state = 5386;
                this.match(MySQLParser.USING_SYMBOL);
                this.state = 5387;
                this.match(MySQLParser.DATA_SYMBOL);
                this.state = 5388;
                this.textStringLiteral();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public histogramNumBuckets(): HistogramNumBucketsContext {
        let localContext = new HistogramNumBucketsContext(this.context, this.state);
        this.enterRule(localContext, 692, MySQLParser.RULE_histogramNumBuckets);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5391;
            if (!(this.serverVersion >= 80200)) {
                throw this.createFailedPredicateException("this.serverVersion >= 80200");
            }
            this.state = 5392;
            this.match(MySQLParser.WITH_SYMBOL);
            this.state = 5393;
            this.match(MySQLParser.INT_NUMBER);
            this.state = 5394;
            this.match(MySQLParser.BUCKETS_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public histogram(): HistogramContext {
        let localContext = new HistogramContext(this.context, this.state);
        this.enterRule(localContext, 694, MySQLParser.RULE_histogram);
        try {
            this.state = 5406;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.UPDATE_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5396;
                this.match(MySQLParser.UPDATE_SYMBOL);
                this.state = 5397;
                this.match(MySQLParser.HISTOGRAM_SYMBOL);
                this.state = 5398;
                this.match(MySQLParser.ON_SYMBOL);
                this.state = 5399;
                this.identifierList();
                this.state = 5400;
                this.histogramUpdateParam();
                }
                break;
            case MySQLParser.DROP_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5402;
                this.match(MySQLParser.DROP_SYMBOL);
                this.state = 5403;
                this.match(MySQLParser.HISTOGRAM_SYMBOL);
                this.state = 5404;
                this.match(MySQLParser.ON_SYMBOL);
                this.state = 5405;
                this.identifierList();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public checkOption(): CheckOptionContext {
        let localContext = new CheckOptionContext(this.context, this.state);
        this.enterRule(localContext, 696, MySQLParser.RULE_checkOption);
        let _la: number;
        try {
            this.state = 5411;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.FOR_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5408;
                this.match(MySQLParser.FOR_SYMBOL);
                this.state = 5409;
                this.match(MySQLParser.UPGRADE_SYMBOL);
                }
                break;
            case MySQLParser.CHANGED_SYMBOL:
            case MySQLParser.EXTENDED_SYMBOL:
            case MySQLParser.FAST_SYMBOL:
            case MySQLParser.MEDIUM_SYMBOL:
            case MySQLParser.QUICK_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5410;
                _la = this.tokenStream.LA(1);
                if(!(_la === 100 || _la === 215 || _la === 219 || _la === 357 || _la === 449)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public repairType(): RepairTypeContext {
        let localContext = new RepairTypeContext(this.context, this.state);
        this.enterRule(localContext, 698, MySQLParser.RULE_repairType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5413;
            _la = this.tokenStream.LA(1);
            if(!(_la === 215 || _la === 449 || _la === 628)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public uninstallStatement(): UninstallStatementContext {
        let localContext = new UninstallStatementContext(this.context, this.state);
        this.enterRule(localContext, 700, MySQLParser.RULE_uninstallStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5415;
            this.match(MySQLParser.UNINSTALL_SYMBOL);
            this.state = 5427;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.PLUGIN_SYMBOL:
                {
                this.state = 5416;
                this.match(MySQLParser.PLUGIN_SYMBOL);
                this.state = 5417;
                this.pluginRef();
                }
                break;
            case MySQLParser.COMPONENT_SYMBOL:
                {
                this.state = 5418;
                this.match(MySQLParser.COMPONENT_SYMBOL);
                this.state = 5419;
                this.componentRef();
                this.state = 5424;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 29) {
                    {
                    {
                    this.state = 5420;
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.state = 5421;
                    this.componentRef();
                    }
                    }
                    this.state = 5426;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public installStatement(): InstallStatementContext {
        let localContext = new InstallStatementContext(this.context, this.state);
        this.enterRule(localContext, 702, MySQLParser.RULE_installStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5429;
            this.match(MySQLParser.INSTALL_SYMBOL);
            this.state = 5440;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.PLUGIN_SYMBOL:
                {
                this.state = 5430;
                this.match(MySQLParser.PLUGIN_SYMBOL);
                this.state = 5431;
                this.identifier();
                this.state = 5432;
                this.match(MySQLParser.SONAME_SYMBOL);
                this.state = 5433;
                this.textStringLiteral();
                }
                break;
            case MySQLParser.COMPONENT_SYMBOL:
                {
                this.state = 5435;
                this.match(MySQLParser.COMPONENT_SYMBOL);
                this.state = 5436;
                this.textStringLiteralList();
                this.state = 5438;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 618, this.context) ) {
                case 1:
                    {
                    this.state = 5437;
                    this.installSetValueList();
                    }
                    break;
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public installOptionType(): InstallOptionTypeContext {
        let localContext = new InstallOptionTypeContext(this.context, this.state);
        this.enterRule(localContext, 704, MySQLParser.RULE_installOptionType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5442;
            _la = this.tokenStream.LA(1);
            if(!(_la === 246 || _la === 666)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public installSetRvalue(): InstallSetRvalueContext {
        let localContext = new InstallSetRvalueContext(this.context, this.state);
        this.enterRule(localContext, 706, MySQLParser.RULE_installSetRvalue);
        try {
            this.state = 5446;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 620, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5444;
                this.expr(0);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5445;
                this.match(MySQLParser.ON_SYMBOL);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public installSetValue(): InstallSetValueContext {
        let localContext = new InstallSetValueContext(this.context, this.state);
        this.enterRule(localContext, 708, MySQLParser.RULE_installSetValue);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5448;
            this.installOptionType();
            this.state = 5449;
            this.lvalueVariable();
            this.state = 5450;
            this.equal();
            this.state = 5451;
            this.installSetRvalue();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public installSetValueList(): InstallSetValueListContext {
        let localContext = new InstallSetValueListContext(this.context, this.state);
        this.enterRule(localContext, 710, MySQLParser.RULE_installSetValueList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5453;
            if (!(this.serverVersion >= 80032)) {
                throw this.createFailedPredicateException("this.serverVersion >= 80032");
            }
            this.state = 5454;
            this.match(MySQLParser.SET_SYMBOL);
            this.state = 5455;
            this.installSetValue();
            this.state = 5460;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 29) {
                {
                {
                this.state = 5456;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 5457;
                this.installSetValue();
                }
                }
                this.state = 5462;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setStatement(): SetStatementContext {
        let localContext = new SetStatementContext(this.context, this.state);
        this.enterRule(localContext, 712, MySQLParser.RULE_setStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5463;
            this.match(MySQLParser.SET_SYMBOL);
            this.state = 5464;
            this.startOptionValueList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public startOptionValueList(): StartOptionValueListContext {
        let localContext = new StartOptionValueListContext(this.context, this.state);
        this.enterRule(localContext, 714, MySQLParser.RULE_startOptionValueList);
        let _la: number;
        try {
            this.state = 5516;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 631, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5466;
                this.optionValueNoOptionType();
                this.state = 5467;
                this.optionValueListContinued();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5469;
                this.match(MySQLParser.TRANSACTION_SYMBOL);
                this.state = 5470;
                this.transactionCharacteristics();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5471;
                this.optionType();
                this.state = 5472;
                this.startOptionValueListFollowingOptionType();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5474;
                this.match(MySQLParser.PASSWORD_SYMBOL);
                this.state = 5477;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 232) {
                    {
                    this.state = 5475;
                    this.match(MySQLParser.FOR_SYMBOL);
                    this.state = 5476;
                    this.user();
                    }
                }

                this.state = 5479;
                this.equal();
                this.state = 5500;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 627, this.context) ) {
                case 1:
                    {
                    this.state = 5480;
                    this.textString();
                    this.state = 5482;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 475) {
                        {
                        this.state = 5481;
                        this.replacePassword();
                        }
                    }

                    this.state = 5485;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 735) {
                        {
                        this.state = 5484;
                        this.retainCurrentPassword();
                        }
                    }

                    }
                    break;
                case 2:
                    {
                    this.state = 5487;
                    this.textString();
                    this.state = 5489;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 475) {
                        {
                        this.state = 5488;
                        this.replacePassword();
                        }
                    }

                    this.state = 5492;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 735) {
                        {
                        this.state = 5491;
                        this.retainCurrentPassword();
                        }
                    }

                    }
                    break;
                case 3:
                    {
                    this.state = 5494;
                    if (!(this.serverVersion < 80014)) {
                        throw this.createFailedPredicateException("this.serverVersion < 80014");
                    }
                    this.state = 5495;
                    this.match(MySQLParser.PASSWORD_SYMBOL);
                    this.state = 5496;
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.state = 5497;
                    this.textString();
                    this.state = 5498;
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                }
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 5502;
                if (!(this.serverVersion >= 80018)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80018");
                }
                this.state = 5503;
                this.match(MySQLParser.PASSWORD_SYMBOL);
                this.state = 5506;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 232) {
                    {
                    this.state = 5504;
                    this.match(MySQLParser.FOR_SYMBOL);
                    this.state = 5505;
                    this.user();
                    }
                }

                this.state = 5508;
                this.match(MySQLParser.TO_SYMBOL);
                this.state = 5509;
                this.match(MySQLParser.RANDOM_SYMBOL);
                this.state = 5511;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 475) {
                    {
                    this.state = 5510;
                    this.replacePassword();
                    }
                }

                this.state = 5514;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 735) {
                    {
                    this.state = 5513;
                    this.retainCurrentPassword();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transactionCharacteristics(): TransactionCharacteristicsContext {
        let localContext = new TransactionCharacteristicsContext(this.context, this.state);
        this.enterRule(localContext, 716, MySQLParser.RULE_transactionCharacteristics);
        let _la: number;
        try {
            this.state = 5527;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.READ_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5518;
                this.transactionAccessMode();
                this.state = 5520;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 288) {
                    {
                    this.state = 5519;
                    this.isolationLevel();
                    }
                }

                }
                break;
            case MySQLParser.ISOLATION_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5522;
                this.isolationLevel();
                this.state = 5525;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 29) {
                    {
                    this.state = 5523;
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.state = 5524;
                    this.transactionAccessMode();
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transactionAccessMode(): TransactionAccessModeContext {
        let localContext = new TransactionAccessModeContext(this.context, this.state);
        this.enterRule(localContext, 718, MySQLParser.RULE_transactionAccessMode);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5529;
            this.match(MySQLParser.READ_SYMBOL);
            this.state = 5530;
            _la = this.tokenStream.LA(1);
            if(!(_la === 404 || _la === 657)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public isolationLevel(): IsolationLevelContext {
        let localContext = new IsolationLevelContext(this.context, this.state);
        this.enterRule(localContext, 720, MySQLParser.RULE_isolationLevel);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5532;
            this.match(MySQLParser.ISOLATION_SYMBOL);
            this.state = 5533;
            this.match(MySQLParser.LEVEL_SYMBOL);
            this.state = 5539;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.REPEATABLE_SYMBOL:
                {
                this.state = 5534;
                this.match(MySQLParser.REPEATABLE_SYMBOL);
                this.state = 5535;
                this.match(MySQLParser.READ_SYMBOL);
                }
                break;
            case MySQLParser.READ_SYMBOL:
                {
                this.state = 5536;
                this.match(MySQLParser.READ_SYMBOL);
                this.state = 5537;
                _la = this.tokenStream.LA(1);
                if(!(_la === 119 || _la === 610)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case MySQLParser.SERIALIZABLE_SYMBOL:
                {
                this.state = 5538;
                this.match(MySQLParser.SERIALIZABLE_SYMBOL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optionValueListContinued(): OptionValueListContinuedContext {
        let localContext = new OptionValueListContinuedContext(this.context, this.state);
        this.enterRule(localContext, 722, MySQLParser.RULE_optionValueListContinued);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5545;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 29) {
                {
                {
                this.state = 5541;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 5542;
                this.optionValue();
                }
                }
                this.state = 5547;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optionValueNoOptionType(): OptionValueNoOptionTypeContext {
        let localContext = new OptionValueNoOptionTypeContext(this.context, this.state);
        this.enterRule(localContext, 724, MySQLParser.RULE_optionValueNoOptionType);
        let _la: number;
        try {
            this.state = 5577;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 640, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5548;
                this.lvalueVariable();
                this.state = 5549;
                this.equal();
                this.state = 5550;
                this.setExprOrDefault();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5552;
                this.charsetClause();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5553;
                this.userVariable();
                this.state = 5554;
                this.equal();
                this.state = 5555;
                this.expr(0);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5557;
                this.match(MySQLParser.AT_AT_SIGN_SYMBOL);
                this.state = 5559;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 637, this.context) ) {
                case 1:
                    {
                    this.state = 5558;
                    this.setVarIdentType();
                    }
                    break;
                }
                this.state = 5561;
                this.lvalueVariable();
                this.state = 5562;
                this.equal();
                this.state = 5563;
                this.setExprOrDefault();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 5565;
                this.match(MySQLParser.NAMES_SYMBOL);
                this.state = 5575;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 639, this.context) ) {
                case 1:
                    {
                    this.state = 5566;
                    this.equal();
                    this.state = 5567;
                    this.expr(0);
                    }
                    break;
                case 2:
                    {
                    this.state = 5569;
                    this.charsetName();
                    this.state = 5571;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 112) {
                        {
                        this.state = 5570;
                        this.collate();
                        }
                    }

                    }
                    break;
                case 3:
                    {
                    this.state = 5573;
                    if (!(this.serverVersion >= 80011)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80011");
                    }
                    this.state = 5574;
                    this.match(MySQLParser.DEFAULT_SYMBOL);
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optionValue(): OptionValueContext {
        let localContext = new OptionValueContext(this.context, this.state);
        this.enterRule(localContext, 726, MySQLParser.RULE_optionValue);
        try {
            this.state = 5585;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 641, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5579;
                this.optionType();
                this.state = 5580;
                this.lvalueVariable();
                this.state = 5581;
                this.equal();
                this.state = 5582;
                this.setExprOrDefault();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5584;
                this.optionValueNoOptionType();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setSystemVariable(): SetSystemVariableContext {
        let localContext = new SetSystemVariableContext(this.context, this.state);
        this.enterRule(localContext, 728, MySQLParser.RULE_setSystemVariable);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5587;
            this.match(MySQLParser.AT_AT_SIGN_SYMBOL);
            this.state = 5589;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 642, this.context) ) {
            case 1:
                {
                this.state = 5588;
                this.setVarIdentType();
                }
                break;
            }
            this.state = 5591;
            this.lvalueVariable();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public startOptionValueListFollowingOptionType(): StartOptionValueListFollowingOptionTypeContext {
        let localContext = new StartOptionValueListFollowingOptionTypeContext(this.context, this.state);
        this.enterRule(localContext, 730, MySQLParser.RULE_startOptionValueListFollowingOptionType);
        try {
            this.state = 5598;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 643, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5593;
                this.optionValueFollowingOptionType();
                this.state = 5594;
                this.optionValueListContinued();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5596;
                this.match(MySQLParser.TRANSACTION_SYMBOL);
                this.state = 5597;
                this.transactionCharacteristics();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optionValueFollowingOptionType(): OptionValueFollowingOptionTypeContext {
        let localContext = new OptionValueFollowingOptionTypeContext(this.context, this.state);
        this.enterRule(localContext, 732, MySQLParser.RULE_optionValueFollowingOptionType);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5600;
            this.lvalueVariable();
            this.state = 5601;
            this.equal();
            this.state = 5602;
            this.setExprOrDefault();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setExprOrDefault(): SetExprOrDefaultContext {
        let localContext = new SetExprOrDefaultContext(this.context, this.state);
        this.enterRule(localContext, 734, MySQLParser.RULE_setExprOrDefault);
        try {
            this.state = 5611;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 644, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5604;
                this.expr(0);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5605;
                this.match(MySQLParser.DEFAULT_SYMBOL);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5606;
                this.match(MySQLParser.ON_SYMBOL);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5607;
                this.match(MySQLParser.ALL_SYMBOL);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 5608;
                this.match(MySQLParser.BINARY_SYMBOL);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 5609;
                this.match(MySQLParser.ROW_SYMBOL);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 5610;
                this.match(MySQLParser.SYSTEM_SYMBOL);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showDatabasesStatement(): ShowDatabasesStatementContext {
        let localContext = new ShowDatabasesStatementContext(this.context, this.state);
        this.enterRule(localContext, 736, MySQLParser.RULE_showDatabasesStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5613;
            this.match(MySQLParser.SHOW_SYMBOL);
            this.state = 5614;
            this.match(MySQLParser.DATABASES_SYMBOL);
            this.state = 5616;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 305 || _la === 651) {
                {
                this.state = 5615;
                this.likeOrWhere();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showTablesStatement(): ShowTablesStatementContext {
        let localContext = new ShowTablesStatementContext(this.context, this.state);
        this.enterRule(localContext, 738, MySQLParser.RULE_showTablesStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5618;
            this.match(MySQLParser.SHOW_SYMBOL);
            this.state = 5620;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 215 || _la === 236) {
                {
                this.state = 5619;
                this.showCommandType();
                }
            }

            this.state = 5622;
            localContext._value = this.match(MySQLParser.TABLES_SYMBOL);
            this.state = 5624;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 235 || _la === 282) {
                {
                this.state = 5623;
                this.inDb();
                }
            }

            this.state = 5627;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 305 || _la === 651) {
                {
                this.state = 5626;
                this.likeOrWhere();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showTriggersStatement(): ShowTriggersStatementContext {
        let localContext = new ShowTriggersStatementContext(this.context, this.state);
        this.enterRule(localContext, 740, MySQLParser.RULE_showTriggersStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5629;
            this.match(MySQLParser.SHOW_SYMBOL);
            this.state = 5631;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 236) {
                {
                this.state = 5630;
                this.match(MySQLParser.FULL_SYMBOL);
                }
            }

            this.state = 5633;
            this.match(MySQLParser.TRIGGERS_SYMBOL);
            this.state = 5635;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 235 || _la === 282) {
                {
                this.state = 5634;
                this.inDb();
                }
            }

            this.state = 5638;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 305 || _la === 651) {
                {
                this.state = 5637;
                this.likeOrWhere();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showEventsStatement(): ShowEventsStatementContext {
        let localContext = new ShowEventsStatementContext(this.context, this.state);
        this.enterRule(localContext, 742, MySQLParser.RULE_showEventsStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5640;
            this.match(MySQLParser.SHOW_SYMBOL);
            this.state = 5641;
            this.match(MySQLParser.EVENTS_SYMBOL);
            this.state = 5643;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 235 || _la === 282) {
                {
                this.state = 5642;
                this.inDb();
                }
            }

            this.state = 5646;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 305 || _la === 651) {
                {
                this.state = 5645;
                this.likeOrWhere();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showTableStatusStatement(): ShowTableStatusStatementContext {
        let localContext = new ShowTableStatusStatementContext(this.context, this.state);
        this.enterRule(localContext, 744, MySQLParser.RULE_showTableStatusStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5648;
            this.match(MySQLParser.SHOW_SYMBOL);
            this.state = 5649;
            this.match(MySQLParser.TABLE_SYMBOL);
            this.state = 5650;
            this.match(MySQLParser.STATUS_SYMBOL);
            this.state = 5652;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 235 || _la === 282) {
                {
                this.state = 5651;
                this.inDb();
                }
            }

            this.state = 5655;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 305 || _la === 651) {
                {
                this.state = 5654;
                this.likeOrWhere();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showOpenTablesStatement(): ShowOpenTablesStatementContext {
        let localContext = new ShowOpenTablesStatementContext(this.context, this.state);
        this.enterRule(localContext, 746, MySQLParser.RULE_showOpenTablesStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5657;
            this.match(MySQLParser.SHOW_SYMBOL);
            this.state = 5658;
            this.match(MySQLParser.OPEN_SYMBOL);
            this.state = 5659;
            this.match(MySQLParser.TABLES_SYMBOL);
            this.state = 5661;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 235 || _la === 282) {
                {
                this.state = 5660;
                this.inDb();
                }
            }

            this.state = 5664;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 305 || _la === 651) {
                {
                this.state = 5663;
                this.likeOrWhere();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showParseTreeStatement(): ShowParseTreeStatementContext {
        let localContext = new ShowParseTreeStatementContext(this.context, this.state);
        this.enterRule(localContext, 748, MySQLParser.RULE_showParseTreeStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5666;
            if (!(this.serverVersion >= 80100)) {
                throw this.createFailedPredicateException("this.serverVersion >= 80100");
            }
            this.state = 5667;
            this.match(MySQLParser.SHOW_SYMBOL);
            this.state = 5668;
            this.match(MySQLParser.PARSE_TREE_SYMBOL);
            this.state = 5669;
            this.simpleStatement();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showPluginsStatement(): ShowPluginsStatementContext {
        let localContext = new ShowPluginsStatementContext(this.context, this.state);
        this.enterRule(localContext, 750, MySQLParser.RULE_showPluginsStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5671;
            this.match(MySQLParser.SHOW_SYMBOL);
            this.state = 5672;
            this.match(MySQLParser.PLUGINS_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showEngineLogsStatement(): ShowEngineLogsStatementContext {
        let localContext = new ShowEngineLogsStatementContext(this.context, this.state);
        this.enterRule(localContext, 752, MySQLParser.RULE_showEngineLogsStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5674;
            this.match(MySQLParser.SHOW_SYMBOL);
            this.state = 5675;
            this.match(MySQLParser.ENGINE_SYMBOL);
            this.state = 5676;
            this.engineOrAll();
            this.state = 5677;
            this.match(MySQLParser.LOGS_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showEngineMutexStatement(): ShowEngineMutexStatementContext {
        let localContext = new ShowEngineMutexStatementContext(this.context, this.state);
        this.enterRule(localContext, 754, MySQLParser.RULE_showEngineMutexStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5679;
            this.match(MySQLParser.SHOW_SYMBOL);
            this.state = 5680;
            this.match(MySQLParser.ENGINE_SYMBOL);
            this.state = 5681;
            this.engineOrAll();
            this.state = 5682;
            this.match(MySQLParser.MUTEX_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showEngineStatusStatement(): ShowEngineStatusStatementContext {
        let localContext = new ShowEngineStatusStatementContext(this.context, this.state);
        this.enterRule(localContext, 756, MySQLParser.RULE_showEngineStatusStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5684;
            this.match(MySQLParser.SHOW_SYMBOL);
            this.state = 5685;
            this.match(MySQLParser.ENGINE_SYMBOL);
            this.state = 5686;
            this.engineOrAll();
            this.state = 5687;
            this.match(MySQLParser.STATUS_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showColumnsStatement(): ShowColumnsStatementContext {
        let localContext = new ShowColumnsStatementContext(this.context, this.state);
        this.enterRule(localContext, 758, MySQLParser.RULE_showColumnsStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5689;
            this.match(MySQLParser.SHOW_SYMBOL);
            this.state = 5691;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 215 || _la === 236) {
                {
                this.state = 5690;
                this.showCommandType();
                }
            }

            this.state = 5693;
            this.match(MySQLParser.COLUMNS_SYMBOL);
            this.state = 5694;
            _la = this.tokenStream.LA(1);
            if(!(_la === 235 || _la === 282)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 5695;
            this.tableRef();
            this.state = 5697;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 235 || _la === 282) {
                {
                this.state = 5696;
                this.inDb();
                }
            }

            this.state = 5700;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 305 || _la === 651) {
                {
                this.state = 5699;
                this.likeOrWhere();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showBinaryLogsStatement(): ShowBinaryLogsStatementContext {
        let localContext = new ShowBinaryLogsStatementContext(this.context, this.state);
        this.enterRule(localContext, 760, MySQLParser.RULE_showBinaryLogsStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5702;
            this.match(MySQLParser.SHOW_SYMBOL);
            this.state = 5703;
            _la = this.tokenStream.LA(1);
            if(!(_la === 77 || _la === 341)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 5704;
            localContext._value = this.match(MySQLParser.LOGS_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showBinaryLogStatusStatement(): ShowBinaryLogStatusStatementContext {
        let localContext = new ShowBinaryLogStatusStatementContext(this.context, this.state);
        this.enterRule(localContext, 762, MySQLParser.RULE_showBinaryLogStatusStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5706;
            this.match(MySQLParser.SHOW_SYMBOL);
            this.state = 5707;
            this.match(MySQLParser.BINARY_SYMBOL);
            this.state = 5708;
            this.match(MySQLParser.LOG_SYMBOL);
            this.state = 5709;
            this.match(MySQLParser.STATUS_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showReplicasStatement(): ShowReplicasStatementContext {
        let localContext = new ShowReplicasStatementContext(this.context, this.state);
        this.enterRule(localContext, 764, MySQLParser.RULE_showReplicasStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5711;
            this.match(MySQLParser.SHOW_SYMBOL);
            this.state = 5716;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.SLAVE_SYMBOL:
            case MySQLParser.REPLICA_SYMBOL:
                {
                this.state = 5712;
                this.replica();
                this.state = 5713;
                this.match(MySQLParser.HOSTS_SYMBOL);
                }
                break;
            case MySQLParser.REPLICAS_SYMBOL:
                {
                this.state = 5715;
                this.match(MySQLParser.REPLICAS_SYMBOL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showBinlogEventsStatement(): ShowBinlogEventsStatementContext {
        let localContext = new ShowBinlogEventsStatementContext(this.context, this.state);
        this.enterRule(localContext, 766, MySQLParser.RULE_showBinlogEventsStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5718;
            this.match(MySQLParser.SHOW_SYMBOL);
            this.state = 5719;
            this.match(MySQLParser.BINLOG_SYMBOL);
            this.state = 5720;
            this.match(MySQLParser.EVENTS_SYMBOL);
            this.state = 5723;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 282) {
                {
                this.state = 5721;
                this.match(MySQLParser.IN_SYMBOL);
                this.state = 5722;
                this.textString();
                }
            }

            this.state = 5727;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 235) {
                {
                this.state = 5725;
                this.match(MySQLParser.FROM_SYMBOL);
                this.state = 5726;
                this.ulonglongNumber();
                }
            }

            this.state = 5730;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 306) {
                {
                this.state = 5729;
                this.limitClause();
                }
            }

            this.state = 5733;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 232) {
                {
                this.state = 5732;
                this.channel();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showRelaylogEventsStatement(): ShowRelaylogEventsStatementContext {
        let localContext = new ShowRelaylogEventsStatementContext(this.context, this.state);
        this.enterRule(localContext, 768, MySQLParser.RULE_showRelaylogEventsStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5735;
            this.match(MySQLParser.SHOW_SYMBOL);
            this.state = 5736;
            this.match(MySQLParser.RELAYLOG_SYMBOL);
            this.state = 5737;
            this.match(MySQLParser.EVENTS_SYMBOL);
            this.state = 5740;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 282) {
                {
                this.state = 5738;
                this.match(MySQLParser.IN_SYMBOL);
                this.state = 5739;
                this.textString();
                }
            }

            this.state = 5744;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 235) {
                {
                this.state = 5742;
                this.match(MySQLParser.FROM_SYMBOL);
                this.state = 5743;
                this.ulonglongNumber();
                }
            }

            this.state = 5747;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 306) {
                {
                this.state = 5746;
                this.limitClause();
                }
            }

            this.state = 5750;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 232) {
                {
                this.state = 5749;
                this.channel();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showKeysStatement(): ShowKeysStatementContext {
        let localContext = new ShowKeysStatementContext(this.context, this.state);
        this.enterRule(localContext, 770, MySQLParser.RULE_showKeysStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5752;
            this.match(MySQLParser.SHOW_SYMBOL);
            this.state = 5754;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 215) {
                {
                this.state = 5753;
                this.match(MySQLParser.EXTENDED_SYMBOL);
                }
            }

            this.state = 5756;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 267)) & ~0x1F) === 0 && ((1 << (_la - 267)) & 67108867) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 5757;
            this.fromOrIn();
            this.state = 5758;
            this.tableRef();
            this.state = 5760;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 235 || _la === 282) {
                {
                this.state = 5759;
                this.inDb();
                }
            }

            this.state = 5763;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 651) {
                {
                this.state = 5762;
                this.whereClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showEnginesStatement(): ShowEnginesStatementContext {
        let localContext = new ShowEnginesStatementContext(this.context, this.state);
        this.enterRule(localContext, 772, MySQLParser.RULE_showEnginesStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5765;
            this.match(MySQLParser.SHOW_SYMBOL);
            this.state = 5767;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 563) {
                {
                this.state = 5766;
                this.match(MySQLParser.STORAGE_SYMBOL);
                }
            }

            this.state = 5769;
            localContext._value = this.match(MySQLParser.ENGINES_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showCountWarningsStatement(): ShowCountWarningsStatementContext {
        let localContext = new ShowCountWarningsStatementContext(this.context, this.state);
        this.enterRule(localContext, 774, MySQLParser.RULE_showCountWarningsStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5771;
            this.match(MySQLParser.SHOW_SYMBOL);
            this.state = 5772;
            this.match(MySQLParser.COUNT_SYMBOL);
            this.state = 5773;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 5774;
            this.match(MySQLParser.MULT_OPERATOR);
            this.state = 5775;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            this.state = 5776;
            this.match(MySQLParser.WARNINGS_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showCountErrorsStatement(): ShowCountErrorsStatementContext {
        let localContext = new ShowCountErrorsStatementContext(this.context, this.state);
        this.enterRule(localContext, 776, MySQLParser.RULE_showCountErrorsStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5778;
            this.match(MySQLParser.SHOW_SYMBOL);
            this.state = 5779;
            this.match(MySQLParser.COUNT_SYMBOL);
            this.state = 5780;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 5781;
            this.match(MySQLParser.MULT_OPERATOR);
            this.state = 5782;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            this.state = 5783;
            this.match(MySQLParser.ERRORS_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showWarningsStatement(): ShowWarningsStatementContext {
        let localContext = new ShowWarningsStatementContext(this.context, this.state);
        this.enterRule(localContext, 778, MySQLParser.RULE_showWarningsStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5785;
            this.match(MySQLParser.SHOW_SYMBOL);
            this.state = 5786;
            this.match(MySQLParser.WARNINGS_SYMBOL);
            this.state = 5788;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 306) {
                {
                this.state = 5787;
                this.limitClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showErrorsStatement(): ShowErrorsStatementContext {
        let localContext = new ShowErrorsStatementContext(this.context, this.state);
        this.enterRule(localContext, 780, MySQLParser.RULE_showErrorsStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5790;
            this.match(MySQLParser.SHOW_SYMBOL);
            this.state = 5791;
            this.match(MySQLParser.ERRORS_SYMBOL);
            this.state = 5793;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 306) {
                {
                this.state = 5792;
                this.limitClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showProfilesStatement(): ShowProfilesStatementContext {
        let localContext = new ShowProfilesStatementContext(this.context, this.state);
        this.enterRule(localContext, 782, MySQLParser.RULE_showProfilesStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5795;
            this.match(MySQLParser.SHOW_SYMBOL);
            this.state = 5796;
            this.match(MySQLParser.PROFILES_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showProfileStatement(): ShowProfileStatementContext {
        let localContext = new ShowProfileStatementContext(this.context, this.state);
        this.enterRule(localContext, 784, MySQLParser.RULE_showProfileStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5798;
            this.match(MySQLParser.SHOW_SYMBOL);
            this.state = 5799;
            this.match(MySQLParser.PROFILE_SYMBOL);
            this.state = 5801;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 57 || _la === 84 || _la === 134 || _la === 138 || _la === 286 || _la === 358 || _la === 418 || _la === 533 || _la === 577) {
                {
                this.state = 5800;
                this.profileDefinitions();
                }
            }

            this.state = 5806;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 232) {
                {
                this.state = 5803;
                this.match(MySQLParser.FOR_SYMBOL);
                this.state = 5804;
                this.match(MySQLParser.QUERY_SYMBOL);
                this.state = 5805;
                this.match(MySQLParser.INT_NUMBER);
                }
            }

            this.state = 5809;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 306) {
                {
                this.state = 5808;
                this.limitClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showStatusStatement(): ShowStatusStatementContext {
        let localContext = new ShowStatusStatementContext(this.context, this.state);
        this.enterRule(localContext, 786, MySQLParser.RULE_showStatusStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5811;
            this.match(MySQLParser.SHOW_SYMBOL);
            this.state = 5813;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 246 || _la === 312 || _la === 516 || _la === 666 || _la === 681) {
                {
                this.state = 5812;
                this.optionType();
                }
            }

            this.state = 5815;
            this.match(MySQLParser.STATUS_SYMBOL);
            this.state = 5817;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 305 || _la === 651) {
                {
                this.state = 5816;
                this.likeOrWhere();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showProcessListStatement(): ShowProcessListStatementContext {
        let localContext = new ShowProcessListStatementContext(this.context, this.state);
        this.enterRule(localContext, 788, MySQLParser.RULE_showProcessListStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5819;
            this.match(MySQLParser.SHOW_SYMBOL);
            this.state = 5821;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 236) {
                {
                this.state = 5820;
                this.match(MySQLParser.FULL_SYMBOL);
                }
            }

            this.state = 5823;
            this.match(MySQLParser.PROCESSLIST_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showVariablesStatement(): ShowVariablesStatementContext {
        let localContext = new ShowVariablesStatementContext(this.context, this.state);
        this.enterRule(localContext, 790, MySQLParser.RULE_showVariablesStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5825;
            this.match(MySQLParser.SHOW_SYMBOL);
            this.state = 5827;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 246 || _la === 312 || _la === 516 || _la === 666 || _la === 681) {
                {
                this.state = 5826;
                this.optionType();
                }
            }

            this.state = 5829;
            this.match(MySQLParser.VARIABLES_SYMBOL);
            this.state = 5831;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 305 || _la === 651) {
                {
                this.state = 5830;
                this.likeOrWhere();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showCharacterSetStatement(): ShowCharacterSetStatementContext {
        let localContext = new ShowCharacterSetStatementContext(this.context, this.state);
        this.enterRule(localContext, 792, MySQLParser.RULE_showCharacterSetStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5833;
            this.match(MySQLParser.SHOW_SYMBOL);
            this.state = 5834;
            this.charset();
            this.state = 5836;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 305 || _la === 651) {
                {
                this.state = 5835;
                this.likeOrWhere();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showCollationStatement(): ShowCollationStatementContext {
        let localContext = new ShowCollationStatementContext(this.context, this.state);
        this.enterRule(localContext, 794, MySQLParser.RULE_showCollationStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5838;
            this.match(MySQLParser.SHOW_SYMBOL);
            this.state = 5839;
            this.match(MySQLParser.COLLATION_SYMBOL);
            this.state = 5841;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 305 || _la === 651) {
                {
                this.state = 5840;
                this.likeOrWhere();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showPrivilegesStatement(): ShowPrivilegesStatementContext {
        let localContext = new ShowPrivilegesStatementContext(this.context, this.state);
        this.enterRule(localContext, 796, MySQLParser.RULE_showPrivilegesStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5843;
            this.match(MySQLParser.SHOW_SYMBOL);
            this.state = 5844;
            this.match(MySQLParser.PRIVILEGES_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showGrantsStatement(): ShowGrantsStatementContext {
        let localContext = new ShowGrantsStatementContext(this.context, this.state);
        this.enterRule(localContext, 798, MySQLParser.RULE_showGrantsStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5846;
            this.match(MySQLParser.SHOW_SYMBOL);
            this.state = 5847;
            this.match(MySQLParser.GRANTS_SYMBOL);
            this.state = 5854;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 232) {
                {
                this.state = 5848;
                this.match(MySQLParser.FOR_SYMBOL);
                this.state = 5849;
                this.user();
                this.state = 5852;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 630) {
                    {
                    this.state = 5850;
                    this.match(MySQLParser.USING_SYMBOL);
                    this.state = 5851;
                    this.userList();
                    }
                }

                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showCreateDatabaseStatement(): ShowCreateDatabaseStatementContext {
        let localContext = new ShowCreateDatabaseStatementContext(this.context, this.state);
        this.enterRule(localContext, 800, MySQLParser.RULE_showCreateDatabaseStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5856;
            this.match(MySQLParser.SHOW_SYMBOL);
            this.state = 5857;
            this.match(MySQLParser.CREATE_SYMBOL);
            this.state = 5858;
            this.match(MySQLParser.DATABASE_SYMBOL);
            this.state = 5860;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 688, this.context) ) {
            case 1:
                {
                this.state = 5859;
                this.ifNotExists();
                }
                break;
            }
            this.state = 5862;
            this.schemaRef();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showCreateTableStatement(): ShowCreateTableStatementContext {
        let localContext = new ShowCreateTableStatementContext(this.context, this.state);
        this.enterRule(localContext, 802, MySQLParser.RULE_showCreateTableStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5864;
            this.match(MySQLParser.SHOW_SYMBOL);
            this.state = 5865;
            this.match(MySQLParser.CREATE_SYMBOL);
            this.state = 5866;
            this.match(MySQLParser.TABLE_SYMBOL);
            this.state = 5867;
            this.tableRef();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showCreateViewStatement(): ShowCreateViewStatementContext {
        let localContext = new ShowCreateViewStatementContext(this.context, this.state);
        this.enterRule(localContext, 804, MySQLParser.RULE_showCreateViewStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5869;
            this.match(MySQLParser.SHOW_SYMBOL);
            this.state = 5870;
            this.match(MySQLParser.CREATE_SYMBOL);
            this.state = 5871;
            this.match(MySQLParser.VIEW_SYMBOL);
            this.state = 5872;
            this.viewRef();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showMasterStatusStatement(): ShowMasterStatusStatementContext {
        let localContext = new ShowMasterStatusStatementContext(this.context, this.state);
        this.enterRule(localContext, 806, MySQLParser.RULE_showMasterStatusStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5874;
            this.match(MySQLParser.SHOW_SYMBOL);
            this.state = 5875;
            this.match(MySQLParser.MASTER_SYMBOL);
            this.state = 5876;
            this.match(MySQLParser.STATUS_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showReplicaStatusStatement(): ShowReplicaStatusStatementContext {
        let localContext = new ShowReplicaStatusStatementContext(this.context, this.state);
        this.enterRule(localContext, 808, MySQLParser.RULE_showReplicaStatusStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5878;
            this.match(MySQLParser.SHOW_SYMBOL);
            this.state = 5879;
            this.replica();
            this.state = 5880;
            this.match(MySQLParser.STATUS_SYMBOL);
            this.state = 5882;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 232) {
                {
                this.state = 5881;
                this.channel();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showCreateProcedureStatement(): ShowCreateProcedureStatementContext {
        let localContext = new ShowCreateProcedureStatementContext(this.context, this.state);
        this.enterRule(localContext, 810, MySQLParser.RULE_showCreateProcedureStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5884;
            this.match(MySQLParser.SHOW_SYMBOL);
            this.state = 5885;
            this.match(MySQLParser.CREATE_SYMBOL);
            this.state = 5886;
            this.match(MySQLParser.PROCEDURE_SYMBOL);
            this.state = 5887;
            this.procedureRef();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showCreateFunctionStatement(): ShowCreateFunctionStatementContext {
        let localContext = new ShowCreateFunctionStatementContext(this.context, this.state);
        this.enterRule(localContext, 812, MySQLParser.RULE_showCreateFunctionStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5889;
            this.match(MySQLParser.SHOW_SYMBOL);
            this.state = 5890;
            this.match(MySQLParser.CREATE_SYMBOL);
            this.state = 5891;
            this.match(MySQLParser.FUNCTION_SYMBOL);
            this.state = 5892;
            this.functionRef();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showCreateTriggerStatement(): ShowCreateTriggerStatementContext {
        let localContext = new ShowCreateTriggerStatementContext(this.context, this.state);
        this.enterRule(localContext, 814, MySQLParser.RULE_showCreateTriggerStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5894;
            this.match(MySQLParser.SHOW_SYMBOL);
            this.state = 5895;
            this.match(MySQLParser.CREATE_SYMBOL);
            this.state = 5896;
            this.match(MySQLParser.TRIGGER_SYMBOL);
            this.state = 5897;
            this.triggerRef();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showCreateProcedureStatusStatement(): ShowCreateProcedureStatusStatementContext {
        let localContext = new ShowCreateProcedureStatusStatementContext(this.context, this.state);
        this.enterRule(localContext, 816, MySQLParser.RULE_showCreateProcedureStatusStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5899;
            this.match(MySQLParser.SHOW_SYMBOL);
            this.state = 5900;
            this.match(MySQLParser.CREATE_SYMBOL);
            this.state = 5901;
            this.match(MySQLParser.PROCEDURE_SYMBOL);
            this.state = 5902;
            this.match(MySQLParser.STATUS_SYMBOL);
            this.state = 5904;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 305 || _la === 651) {
                {
                this.state = 5903;
                this.likeOrWhere();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showCreateFunctionStatusStatement(): ShowCreateFunctionStatusStatementContext {
        let localContext = new ShowCreateFunctionStatusStatementContext(this.context, this.state);
        this.enterRule(localContext, 818, MySQLParser.RULE_showCreateFunctionStatusStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5906;
            this.match(MySQLParser.SHOW_SYMBOL);
            this.state = 5907;
            this.match(MySQLParser.CREATE_SYMBOL);
            this.state = 5908;
            this.match(MySQLParser.FUNCTION_SYMBOL);
            this.state = 5909;
            this.match(MySQLParser.STATUS_SYMBOL);
            this.state = 5911;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 305 || _la === 651) {
                {
                this.state = 5910;
                this.likeOrWhere();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showCreateProcedureCodeStatement(): ShowCreateProcedureCodeStatementContext {
        let localContext = new ShowCreateProcedureCodeStatementContext(this.context, this.state);
        this.enterRule(localContext, 820, MySQLParser.RULE_showCreateProcedureCodeStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5913;
            this.match(MySQLParser.SHOW_SYMBOL);
            this.state = 5914;
            this.match(MySQLParser.CREATE_SYMBOL);
            this.state = 5915;
            this.match(MySQLParser.PROCEDURE_SYMBOL);
            this.state = 5916;
            this.match(MySQLParser.CODE_SYMBOL);
            this.state = 5917;
            this.procedureRef();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showCreateFunctionCodeStatement(): ShowCreateFunctionCodeStatementContext {
        let localContext = new ShowCreateFunctionCodeStatementContext(this.context, this.state);
        this.enterRule(localContext, 822, MySQLParser.RULE_showCreateFunctionCodeStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5919;
            this.match(MySQLParser.SHOW_SYMBOL);
            this.state = 5920;
            this.match(MySQLParser.CREATE_SYMBOL);
            this.state = 5921;
            this.match(MySQLParser.FUNCTION_SYMBOL);
            this.state = 5922;
            this.match(MySQLParser.CODE_SYMBOL);
            this.state = 5923;
            this.functionRef();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showCreateEventStatement(): ShowCreateEventStatementContext {
        let localContext = new ShowCreateEventStatementContext(this.context, this.state);
        this.enterRule(localContext, 824, MySQLParser.RULE_showCreateEventStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5925;
            this.match(MySQLParser.SHOW_SYMBOL);
            this.state = 5926;
            this.match(MySQLParser.CREATE_SYMBOL);
            this.state = 5927;
            this.match(MySQLParser.EVENT_SYMBOL);
            this.state = 5928;
            this.eventRef();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showCreateUserStatement(): ShowCreateUserStatementContext {
        let localContext = new ShowCreateUserStatementContext(this.context, this.state);
        this.enterRule(localContext, 826, MySQLParser.RULE_showCreateUserStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5930;
            this.match(MySQLParser.SHOW_SYMBOL);
            this.state = 5931;
            this.match(MySQLParser.CREATE_SYMBOL);
            this.state = 5932;
            this.match(MySQLParser.USER_SYMBOL);
            this.state = 5933;
            this.user();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showCommandType(): ShowCommandTypeContext {
        let localContext = new ShowCommandTypeContext(this.context, this.state);
        this.enterRule(localContext, 828, MySQLParser.RULE_showCommandType);
        let _la: number;
        try {
            this.state = 5940;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.FULL_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5935;
                this.match(MySQLParser.FULL_SYMBOL);
                }
                break;
            case MySQLParser.EXTENDED_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5936;
                this.match(MySQLParser.EXTENDED_SYMBOL);
                this.state = 5938;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 236) {
                    {
                    this.state = 5937;
                    this.match(MySQLParser.FULL_SYMBOL);
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public engineOrAll(): EngineOrAllContext {
        let localContext = new EngineOrAllContext(this.context, this.state);
        this.enterRule(localContext, 830, MySQLParser.RULE_engineOrAll);
        try {
            this.state = 5944;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 694, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5942;
                this.engineRef();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5943;
                this.match(MySQLParser.ALL_SYMBOL);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fromOrIn(): FromOrInContext {
        let localContext = new FromOrInContext(this.context, this.state);
        this.enterRule(localContext, 832, MySQLParser.RULE_fromOrIn);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5946;
            _la = this.tokenStream.LA(1);
            if(!(_la === 235 || _la === 282)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public inDb(): InDbContext {
        let localContext = new InDbContext(this.context, this.state);
        this.enterRule(localContext, 834, MySQLParser.RULE_inDb);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5948;
            this.fromOrIn();
            this.state = 5949;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public profileDefinitions(): ProfileDefinitionsContext {
        let localContext = new ProfileDefinitionsContext(this.context, this.state);
        this.enterRule(localContext, 836, MySQLParser.RULE_profileDefinitions);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5951;
            this.profileDefinition();
            this.state = 5956;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 29) {
                {
                {
                this.state = 5952;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 5953;
                this.profileDefinition();
                }
                }
                this.state = 5958;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public profileDefinition(): ProfileDefinitionContext {
        let localContext = new ProfileDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 838, MySQLParser.RULE_profileDefinition);
        let _la: number;
        try {
            this.state = 5966;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.BLOCK_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5959;
                this.match(MySQLParser.BLOCK_SYMBOL);
                this.state = 5960;
                this.match(MySQLParser.IO_SYMBOL);
                }
                break;
            case MySQLParser.CONTEXT_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5961;
                this.match(MySQLParser.CONTEXT_SYMBOL);
                this.state = 5962;
                this.match(MySQLParser.SWITCHES_SYMBOL);
                }
                break;
            case MySQLParser.PAGE_SYMBOL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5963;
                this.match(MySQLParser.PAGE_SYMBOL);
                this.state = 5964;
                this.match(MySQLParser.FAULTS_SYMBOL);
                }
                break;
            case MySQLParser.ALL_SYMBOL:
            case MySQLParser.CPU_SYMBOL:
            case MySQLParser.IPC_SYMBOL:
            case MySQLParser.MEMORY_SYMBOL:
            case MySQLParser.SOURCE_SYMBOL:
            case MySQLParser.SWAPS_SYMBOL:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5965;
                _la = this.tokenStream.LA(1);
                if(!(_la === 57 || _la === 138 || _la === 286 || _la === 358 || _la === 533 || _la === 577)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public otherAdministrativeStatement(): OtherAdministrativeStatementContext {
        let localContext = new OtherAdministrativeStatementContext(this.context, this.state);
        this.enterRule(localContext, 840, MySQLParser.RULE_otherAdministrativeStatement);
        let _la: number;
        try {
            this.state = 6004;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.BINLOG_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5968;
                localContext._type_ = this.match(MySQLParser.BINLOG_SYMBOL);
                this.state = 5969;
                this.textLiteral();
                }
                break;
            case MySQLParser.CACHE_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5970;
                localContext._type_ = this.match(MySQLParser.CACHE_SYMBOL);
                this.state = 5971;
                this.match(MySQLParser.INDEX_SYMBOL);
                this.state = 5972;
                this.keyCacheListOrParts();
                this.state = 5973;
                this.match(MySQLParser.IN_SYMBOL);
                this.state = 5976;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 697, this.context) ) {
                case 1:
                    {
                    this.state = 5974;
                    this.identifier();
                    }
                    break;
                case 2:
                    {
                    this.state = 5975;
                    this.match(MySQLParser.DEFAULT_SYMBOL);
                    }
                    break;
                }
                }
                break;
            case MySQLParser.FLUSH_SYMBOL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5978;
                localContext._type_ = this.match(MySQLParser.FLUSH_SYMBOL);
                this.state = 5980;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 312 || _la === 394) {
                    {
                    this.state = 5979;
                    this.noWriteToBinLog();
                    }
                }

                this.state = 5991;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySQLParser.TABLES_SYMBOL:
                case MySQLParser.TABLE_SYMBOL:
                    {
                    this.state = 5982;
                    this.flushTables();
                    }
                    break;
                case MySQLParser.BINARY_SYMBOL:
                case MySQLParser.ENGINE_SYMBOL:
                case MySQLParser.ERROR_SYMBOL:
                case MySQLParser.GENERAL_SYMBOL:
                case MySQLParser.HOSTS_SYMBOL:
                case MySQLParser.LOGS_SYMBOL:
                case MySQLParser.OPTIMIZER_COSTS_SYMBOL:
                case MySQLParser.PRIVILEGES_SYMBOL:
                case MySQLParser.RELAY_SYMBOL:
                case MySQLParser.SLOW_SYMBOL:
                case MySQLParser.STATUS_SYMBOL:
                case MySQLParser.USER_RESOURCES_SYMBOL:
                    {
                    this.state = 5983;
                    this.flushOption();
                    this.state = 5988;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 29) {
                        {
                        {
                        this.state = 5984;
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.state = 5985;
                        this.flushOption();
                        }
                        }
                        this.state = 5990;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case MySQLParser.KILL_SYMBOL:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5993;
                localContext._type_ = this.match(MySQLParser.KILL_SYMBOL);
                this.state = 5995;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 701, this.context) ) {
                case 1:
                    {
                    this.state = 5994;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 127 || _la === 448)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                }
                this.state = 5997;
                this.expr(0);
                }
                break;
            case MySQLParser.LOAD_SYMBOL:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 5998;
                localContext._type_ = this.match(MySQLParser.LOAD_SYMBOL);
                this.state = 5999;
                this.match(MySQLParser.INDEX_SYMBOL);
                this.state = 6000;
                this.match(MySQLParser.INTO_SYMBOL);
                this.state = 6001;
                this.match(MySQLParser.CACHE_SYMBOL);
                this.state = 6002;
                this.preloadTail();
                }
                break;
            case MySQLParser.SHUTDOWN_SYMBOL:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 6003;
                localContext._type_ = this.match(MySQLParser.SHUTDOWN_SYMBOL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyCacheListOrParts(): KeyCacheListOrPartsContext {
        let localContext = new KeyCacheListOrPartsContext(this.context, this.state);
        this.enterRule(localContext, 842, MySQLParser.RULE_keyCacheListOrParts);
        try {
            this.state = 6008;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 703, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6006;
                this.keyCacheList();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6007;
                this.assignToKeycachePartition();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyCacheList(): KeyCacheListContext {
        let localContext = new KeyCacheListContext(this.context, this.state);
        this.enterRule(localContext, 844, MySQLParser.RULE_keyCacheList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6010;
            this.assignToKeycache();
            this.state = 6015;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 29) {
                {
                {
                this.state = 6011;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 6012;
                this.assignToKeycache();
                }
                }
                this.state = 6017;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public assignToKeycache(): AssignToKeycacheContext {
        let localContext = new AssignToKeycacheContext(this.context, this.state);
        this.enterRule(localContext, 846, MySQLParser.RULE_assignToKeycache);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6018;
            this.tableRef();
            this.state = 6020;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 268 || _la === 295) {
                {
                this.state = 6019;
                this.cacheKeyList();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public assignToKeycachePartition(): AssignToKeycachePartitionContext {
        let localContext = new AssignToKeycachePartitionContext(this.context, this.state);
        this.enterRule(localContext, 848, MySQLParser.RULE_assignToKeycachePartition);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6022;
            this.tableRef();
            this.state = 6023;
            this.match(MySQLParser.PARTITION_SYMBOL);
            this.state = 6024;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 6025;
            this.allOrPartitionNameList();
            this.state = 6026;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            this.state = 6028;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 268 || _la === 295) {
                {
                this.state = 6027;
                this.cacheKeyList();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public cacheKeyList(): CacheKeyListContext {
        let localContext = new CacheKeyListContext(this.context, this.state);
        this.enterRule(localContext, 850, MySQLParser.RULE_cacheKeyList);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6030;
            this.keyOrIndex();
            this.state = 6031;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 6033;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 707, this.context) ) {
            case 1:
                {
                this.state = 6032;
                this.keyUsageList();
                }
                break;
            }
            this.state = 6035;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyUsageElement(): KeyUsageElementContext {
        let localContext = new KeyUsageElementContext(this.context, this.state);
        this.enterRule(localContext, 852, MySQLParser.RULE_keyUsageElement);
        try {
            this.state = 6039;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 708, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6037;
                this.identifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6038;
                this.match(MySQLParser.PRIMARY_SYMBOL);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyUsageList(): KeyUsageListContext {
        let localContext = new KeyUsageListContext(this.context, this.state);
        this.enterRule(localContext, 854, MySQLParser.RULE_keyUsageList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6041;
            this.keyUsageElement();
            this.state = 6046;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 29) {
                {
                {
                this.state = 6042;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 6043;
                this.keyUsageElement();
                }
                }
                this.state = 6048;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public flushOption(): FlushOptionContext {
        let localContext = new FlushOptionContext(this.context, this.state);
        this.enterRule(localContext, 856, MySQLParser.RULE_flushOption);
        let _la: number;
        try {
            this.state = 6060;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.HOSTS_SYMBOL:
            case MySQLParser.PRIVILEGES_SYMBOL:
            case MySQLParser.STATUS_SYMBOL:
            case MySQLParser.USER_RESOURCES_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6049;
                localContext._option = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 257 || _la === 439 || _la === 557 || _la === 626)) {
                    localContext._option = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case MySQLParser.BINARY_SYMBOL:
            case MySQLParser.ENGINE_SYMBOL:
            case MySQLParser.ERROR_SYMBOL:
            case MySQLParser.GENERAL_SYMBOL:
            case MySQLParser.LOGS_SYMBOL:
            case MySQLParser.SLOW_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6051;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 77 || _la === 198 || _la === 200 || _la === 240 || _la === 527) {
                    {
                    this.state = 6050;
                    this.logType();
                    }
                }

                this.state = 6053;
                localContext._option = this.match(MySQLParser.LOGS_SYMBOL);
                }
                break;
            case MySQLParser.RELAY_SYMBOL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 6054;
                localContext._option = this.match(MySQLParser.RELAY_SYMBOL);
                this.state = 6055;
                this.match(MySQLParser.LOGS_SYMBOL);
                this.state = 6057;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 232) {
                    {
                    this.state = 6056;
                    this.channel();
                    }
                }

                }
                break;
            case MySQLParser.OPTIMIZER_COSTS_SYMBOL:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 6059;
                localContext._option = this.match(MySQLParser.OPTIMIZER_COSTS_SYMBOL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public logType(): LogTypeContext {
        let localContext = new LogTypeContext(this.context, this.state);
        this.enterRule(localContext, 858, MySQLParser.RULE_logType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6062;
            _la = this.tokenStream.LA(1);
            if(!(_la === 77 || _la === 198 || _la === 200 || _la === 240 || _la === 527)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public flushTables(): FlushTablesContext {
        let localContext = new FlushTablesContext(this.context, this.state);
        this.enterRule(localContext, 860, MySQLParser.RULE_flushTables);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6064;
            _la = this.tokenStream.LA(1);
            if(!(_la === 581 || _la === 583)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 6072;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 714, this.context) ) {
            case 1:
                {
                this.state = 6065;
                this.match(MySQLParser.WITH_SYMBOL);
                this.state = 6066;
                this.match(MySQLParser.READ_SYMBOL);
                this.state = 6067;
                this.match(MySQLParser.LOCK_SYMBOL);
                }
                break;
            case 2:
                {
                this.state = 6068;
                this.identifierList();
                this.state = 6070;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 232 || _la === 653) {
                    {
                    this.state = 6069;
                    this.flushTablesOptions();
                    }
                }

                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public flushTablesOptions(): FlushTablesOptionsContext {
        let localContext = new FlushTablesOptionsContext(this.context, this.state);
        this.enterRule(localContext, 862, MySQLParser.RULE_flushTablesOptions);
        try {
            this.state = 6079;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.FOR_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6074;
                this.match(MySQLParser.FOR_SYMBOL);
                this.state = 6075;
                this.match(MySQLParser.EXPORT_SYMBOL);
                }
                break;
            case MySQLParser.WITH_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6076;
                this.match(MySQLParser.WITH_SYMBOL);
                this.state = 6077;
                this.match(MySQLParser.READ_SYMBOL);
                this.state = 6078;
                this.match(MySQLParser.LOCK_SYMBOL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public preloadTail(): PreloadTailContext {
        let localContext = new PreloadTailContext(this.context, this.state);
        this.enterRule(localContext, 864, MySQLParser.RULE_preloadTail);
        let _la: number;
        try {
            this.state = 6091;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 718, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6081;
                this.tableRef();
                this.state = 6082;
                this.adminPartition();
                this.state = 6084;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 268 || _la === 295) {
                    {
                    this.state = 6083;
                    this.cacheKeyList();
                    }
                }

                this.state = 6088;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 264) {
                    {
                    this.state = 6086;
                    this.match(MySQLParser.IGNORE_SYMBOL);
                    this.state = 6087;
                    this.match(MySQLParser.LEAVES_SYMBOL);
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6090;
                this.preloadList();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public preloadList(): PreloadListContext {
        let localContext = new PreloadListContext(this.context, this.state);
        this.enterRule(localContext, 866, MySQLParser.RULE_preloadList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6093;
            this.preloadKeys();
            this.state = 6098;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 29) {
                {
                {
                this.state = 6094;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 6095;
                this.preloadKeys();
                }
                }
                this.state = 6100;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public preloadKeys(): PreloadKeysContext {
        let localContext = new PreloadKeysContext(this.context, this.state);
        this.enterRule(localContext, 868, MySQLParser.RULE_preloadKeys);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6101;
            this.tableRef();
            this.state = 6103;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 268 || _la === 295) {
                {
                this.state = 6102;
                this.cacheKeyList();
                }
            }

            this.state = 6107;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 264) {
                {
                this.state = 6105;
                this.match(MySQLParser.IGNORE_SYMBOL);
                this.state = 6106;
                this.match(MySQLParser.LEAVES_SYMBOL);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public adminPartition(): AdminPartitionContext {
        let localContext = new AdminPartitionContext(this.context, this.state);
        this.enterRule(localContext, 870, MySQLParser.RULE_adminPartition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6109;
            this.match(MySQLParser.PARTITION_SYMBOL);
            this.state = 6110;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 6111;
            this.allOrPartitionNameList();
            this.state = 6112;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public resourceGroupManagement(): ResourceGroupManagementContext {
        let localContext = new ResourceGroupManagementContext(this.context, this.state);
        this.enterRule(localContext, 872, MySQLParser.RULE_resourceGroupManagement);
        try {
            this.state = 6118;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.CREATE_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6114;
                this.createResourceGroup();
                }
                break;
            case MySQLParser.ALTER_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6115;
                this.alterResourceGroup();
                }
                break;
            case MySQLParser.SET_SYMBOL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 6116;
                this.setResourceGroup();
                }
                break;
            case MySQLParser.DROP_SYMBOL:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 6117;
                this.dropResourceGroup();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createResourceGroup(): CreateResourceGroupContext {
        let localContext = new CreateResourceGroupContext(this.context, this.state);
        this.enterRule(localContext, 874, MySQLParser.RULE_createResourceGroup);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6120;
            this.match(MySQLParser.CREATE_SYMBOL);
            this.state = 6121;
            this.match(MySQLParser.RESOURCE_SYMBOL);
            this.state = 6122;
            this.match(MySQLParser.GROUP_SYMBOL);
            this.state = 6123;
            this.identifier();
            this.state = 6124;
            this.match(MySQLParser.TYPE_SYMBOL);
            this.state = 6126;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 6 || _la === 7) {
                {
                this.state = 6125;
                this.equal();
                }
            }

            this.state = 6128;
            _la = this.tokenStream.LA(1);
            if(!(_la === 627 || _la === 718)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 6130;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 719) {
                {
                this.state = 6129;
                this.resourceGroupVcpuList();
                }
            }

            this.state = 6133;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 716) {
                {
                this.state = 6132;
                this.resourceGroupPriority();
                }
            }

            this.state = 6136;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 177 || _la === 192) {
                {
                this.state = 6135;
                this.resourceGroupEnableDisable();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public resourceGroupVcpuList(): ResourceGroupVcpuListContext {
        let localContext = new ResourceGroupVcpuListContext(this.context, this.state);
        this.enterRule(localContext, 876, MySQLParser.RULE_resourceGroupVcpuList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6138;
            this.match(MySQLParser.VCPU_SYMBOL);
            this.state = 6140;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 6 || _la === 7) {
                {
                this.state = 6139;
                this.equal();
                }
            }

            this.state = 6142;
            this.vcpuNumOrRange();
            this.state = 6149;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 3 || _la === 29) {
                {
                {
                this.state = 6144;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 29) {
                    {
                    this.state = 6143;
                    this.match(MySQLParser.COMMA_SYMBOL);
                    }
                }

                this.state = 6146;
                this.vcpuNumOrRange();
                }
                }
                this.state = 6151;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public vcpuNumOrRange(): VcpuNumOrRangeContext {
        let localContext = new VcpuNumOrRangeContext(this.context, this.state);
        this.enterRule(localContext, 878, MySQLParser.RULE_vcpuNumOrRange);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6152;
            this.match(MySQLParser.INT_NUMBER);
            this.state = 6155;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 15) {
                {
                this.state = 6153;
                this.match(MySQLParser.MINUS_OPERATOR);
                this.state = 6154;
                this.match(MySQLParser.INT_NUMBER);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public resourceGroupPriority(): ResourceGroupPriorityContext {
        let localContext = new ResourceGroupPriorityContext(this.context, this.state);
        this.enterRule(localContext, 880, MySQLParser.RULE_resourceGroupPriority);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6157;
            this.match(MySQLParser.THREAD_PRIORITY_SYMBOL);
            this.state = 6159;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 6 || _la === 7) {
                {
                this.state = 6158;
                this.equal();
                }
            }

            this.state = 6161;
            this.match(MySQLParser.INT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public resourceGroupEnableDisable(): ResourceGroupEnableDisableContext {
        let localContext = new ResourceGroupEnableDisableContext(this.context, this.state);
        this.enterRule(localContext, 882, MySQLParser.RULE_resourceGroupEnableDisable);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6163;
            _la = this.tokenStream.LA(1);
            if(!(_la === 177 || _la === 192)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterResourceGroup(): AlterResourceGroupContext {
        let localContext = new AlterResourceGroupContext(this.context, this.state);
        this.enterRule(localContext, 884, MySQLParser.RULE_alterResourceGroup);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6165;
            this.match(MySQLParser.ALTER_SYMBOL);
            this.state = 6166;
            this.match(MySQLParser.RESOURCE_SYMBOL);
            this.state = 6167;
            this.match(MySQLParser.GROUP_SYMBOL);
            this.state = 6168;
            this.resourceGroupRef();
            this.state = 6170;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 719) {
                {
                this.state = 6169;
                this.resourceGroupVcpuList();
                }
            }

            this.state = 6173;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 716) {
                {
                this.state = 6172;
                this.resourceGroupPriority();
                }
            }

            this.state = 6176;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 177 || _la === 192) {
                {
                this.state = 6175;
                this.resourceGroupEnableDisable();
                }
            }

            this.state = 6179;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 230) {
                {
                this.state = 6178;
                this.match(MySQLParser.FORCE_SYMBOL);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setResourceGroup(): SetResourceGroupContext {
        let localContext = new SetResourceGroupContext(this.context, this.state);
        this.enterRule(localContext, 886, MySQLParser.RULE_setResourceGroup);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6181;
            this.match(MySQLParser.SET_SYMBOL);
            this.state = 6182;
            this.match(MySQLParser.RESOURCE_SYMBOL);
            this.state = 6183;
            this.match(MySQLParser.GROUP_SYMBOL);
            this.state = 6184;
            this.identifier();
            this.state = 6187;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 232) {
                {
                this.state = 6185;
                this.match(MySQLParser.FOR_SYMBOL);
                this.state = 6186;
                this.threadIdList();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public threadIdList(): ThreadIdListContext {
        let localContext = new ThreadIdListContext(this.context, this.state);
        this.enterRule(localContext, 888, MySQLParser.RULE_threadIdList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6189;
            this.real_ulong_number();
            this.state = 6196;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while ((((_la) & ~0x1F) === 0 && ((1 << _la) & 536870968) !== 0) || _la === 44) {
                {
                {
                this.state = 6191;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 29) {
                    {
                    this.state = 6190;
                    this.match(MySQLParser.COMMA_SYMBOL);
                    }
                }

                this.state = 6193;
                this.real_ulong_number();
                }
                }
                this.state = 6198;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropResourceGroup(): DropResourceGroupContext {
        let localContext = new DropResourceGroupContext(this.context, this.state);
        this.enterRule(localContext, 890, MySQLParser.RULE_dropResourceGroup);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6199;
            this.match(MySQLParser.DROP_SYMBOL);
            this.state = 6200;
            this.match(MySQLParser.RESOURCE_SYMBOL);
            this.state = 6201;
            this.match(MySQLParser.GROUP_SYMBOL);
            this.state = 6202;
            this.resourceGroupRef();
            this.state = 6204;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 230) {
                {
                this.state = 6203;
                this.match(MySQLParser.FORCE_SYMBOL);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public utilityStatement(): UtilityStatementContext {
        let localContext = new UtilityStatementContext(this.context, this.state);
        this.enterRule(localContext, 892, MySQLParser.RULE_utilityStatement);
        try {
            this.state = 6212;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 740, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6206;
                this.describeStatement();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6207;
                this.explainStatement();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 6208;
                this.helpCommand();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 6209;
                this.useCommand();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 6210;
                if (!(this.serverVersion >= 80011)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80011");
                }
                this.state = 6211;
                this.restartServer();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public describeStatement(): DescribeStatementContext {
        let localContext = new DescribeStatementContext(this.context, this.state);
        this.enterRule(localContext, 894, MySQLParser.RULE_describeStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6214;
            _la = this.tokenStream.LA(1);
            if(!(_la === 172 || _la === 173 || _la === 213)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 6215;
            this.tableRef();
            this.state = 6218;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 741, this.context) ) {
            case 1:
                {
                this.state = 6216;
                this.textString();
                }
                break;
            case 2:
                {
                this.state = 6217;
                this.columnRef();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public explainStatement(): ExplainStatementContext {
        let localContext = new ExplainStatementContext(this.context, this.state);
        this.enterRule(localContext, 896, MySQLParser.RULE_explainStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6220;
            _la = this.tokenStream.LA(1);
            if(!(_la === 172 || _la === 173 || _la === 213)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 6222;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 742, this.context) ) {
            case 1:
                {
                this.state = 6221;
                this.explainOptions();
                }
                break;
            }
            this.state = 6228;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 743, this.context) ) {
            case 1:
                {
                this.state = 6224;
                if (!(this.serverVersion >= 80032)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80032");
                }
                this.state = 6225;
                this.match(MySQLParser.FOR_SYMBOL);
                this.state = 6226;
                this.match(MySQLParser.DATABASE_SYMBOL);
                this.state = 6227;
                this.textOrIdentifier();
                }
                break;
            }
            this.state = 6230;
            this.explainableStatement();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public explainOptions(): ExplainOptionsContext {
        let localContext = new ExplainOptionsContext(this.context, this.state);
        this.enterRule(localContext, 898, MySQLParser.RULE_explainOptions);
        try {
            this.state = 6248;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 745, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6232;
                this.match(MySQLParser.FORMAT_SYMBOL);
                this.state = 6233;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 6234;
                this.textOrIdentifier();
                this.state = 6237;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 744, this.context) ) {
                case 1:
                    {
                    this.state = 6235;
                    if (!(this.serverVersion >= 80032)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80032");
                    }
                    this.state = 6236;
                    this.explainInto();
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6239;
                if (!(this.serverVersion < 80012)) {
                    throw this.createFailedPredicateException("this.serverVersion < 80012");
                }
                this.state = 6240;
                this.match(MySQLParser.EXTENDED_SYMBOL);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 6241;
                if (!(this.serverVersion >= 80018)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80018");
                }
                this.state = 6242;
                this.match(MySQLParser.ANALYZE_SYMBOL);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 6243;
                if (!(this.serverVersion >= 80019)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80019");
                }
                this.state = 6244;
                this.match(MySQLParser.ANALYZE_SYMBOL);
                this.state = 6245;
                this.match(MySQLParser.FORMAT_SYMBOL);
                this.state = 6246;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 6247;
                this.textOrIdentifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public explainableStatement(): ExplainableStatementContext {
        let localContext = new ExplainableStatementContext(this.context, this.state);
        this.enterRule(localContext, 900, MySQLParser.RULE_explainableStatement);
        try {
            this.state = 6258;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 746, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6250;
                this.selectStatement();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6251;
                this.deleteStatement();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 6252;
                this.insertStatement();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 6253;
                this.replaceStatement();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 6254;
                this.updateStatement();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 6255;
                this.match(MySQLParser.FOR_SYMBOL);
                this.state = 6256;
                this.match(MySQLParser.CONNECTION_SYMBOL);
                this.state = 6257;
                this.real_ulong_number();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public explainInto(): ExplainIntoContext {
        let localContext = new ExplainIntoContext(this.context, this.state);
        this.enterRule(localContext, 902, MySQLParser.RULE_explainInto);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6260;
            this.match(MySQLParser.INTO_SYMBOL);
            this.state = 6261;
            this.match(MySQLParser.AT_SIGN_SYMBOL);
            this.state = 6262;
            this.textOrIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public helpCommand(): HelpCommandContext {
        let localContext = new HelpCommandContext(this.context, this.state);
        this.enterRule(localContext, 904, MySQLParser.RULE_helpCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6264;
            this.match(MySQLParser.HELP_SYMBOL);
            this.state = 6265;
            this.textOrIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public useCommand(): UseCommandContext {
        let localContext = new UseCommandContext(this.context, this.state);
        this.enterRule(localContext, 906, MySQLParser.RULE_useCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6267;
            this.match(MySQLParser.USE_SYMBOL);
            this.state = 6268;
            this.schemaRef();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public restartServer(): RestartServerContext {
        let localContext = new RestartServerContext(this.context, this.state);
        this.enterRule(localContext, 908, MySQLParser.RULE_restartServer);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6270;
            this.match(MySQLParser.RESTART_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public expr(): ExprContext;
    public expr(_p: number): ExprContext;
    public expr(_p?: number): ExprContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new ExprContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 910;
        this.enterRecursionRule(localContext, 910, MySQLParser.RULE_expr, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6283;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 749, this.context) ) {
            case 1:
                {
                localContext = new ExprIsContext(localContext);
                this.context = localContext;
                previousContext = localContext;

                this.state = 6273;
                this.boolPri(0);
                this.state = 6279;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 748, this.context) ) {
                case 1:
                    {
                    this.state = 6274;
                    this.match(MySQLParser.IS_SYMBOL);
                    this.state = 6276;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 1 || _la === 390) {
                        {
                        this.state = 6275;
                        this.notRule();
                        }
                    }

                    this.state = 6278;
                    (localContext as ExprIsContext)._type_ = this.tokenStream.LT(1);
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 218 || _la === 605 || _la === 619)) {
                        (localContext as ExprIsContext)._type_ = this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                }
                }
                break;
            case 2:
                {
                localContext = new ExprNotContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 6281;
                this.match(MySQLParser.NOT_SYMBOL);
                this.state = 6282;
                this.expr(4);
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 6296;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 751, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this.parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 6294;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 750, this.context) ) {
                    case 1:
                        {
                        localContext = new ExprAndContext(new ExprContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, MySQLParser.RULE_expr);
                        this.state = 6285;
                        if (!(this.precpred(this.context, 3))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 3)");
                        }
                        this.state = 6286;
                        (localContext as ExprAndContext)._op = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 23 || _la === 61)) {
                            (localContext as ExprAndContext)._op = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 6287;
                        this.expr(4);
                        }
                        break;
                    case 2:
                        {
                        localContext = new ExprXorContext(new ExprContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, MySQLParser.RULE_expr);
                        this.state = 6288;
                        if (!(this.precpred(this.context, 2))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                        }
                        this.state = 6289;
                        this.match(MySQLParser.XOR_SYMBOL);
                        this.state = 6290;
                        this.expr(3);
                        }
                        break;
                    case 3:
                        {
                        localContext = new ExprOrContext(new ExprContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, MySQLParser.RULE_expr);
                        this.state = 6291;
                        if (!(this.precpred(this.context, 1))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                        }
                        this.state = 6292;
                        (localContext as ExprOrContext)._op = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 26 || _la === 412)) {
                            (localContext as ExprOrContext)._op = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 6293;
                        this.expr(2);
                        }
                        break;
                    }
                    }
                }
                this.state = 6298;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 751, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }

    public boolPri(): BoolPriContext;
    public boolPri(_p: number): BoolPriContext;
    public boolPri(_p?: number): BoolPriContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new BoolPriContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 912;
        this.enterRecursionRule(localContext, 912, MySQLParser.RULE_boolPri, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            {
            localContext = new PrimaryExprPredicateContext(localContext);
            this.context = localContext;
            previousContext = localContext;

            this.state = 6300;
            this.predicate();
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 6319;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 754, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this.parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 6317;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 753, this.context) ) {
                    case 1:
                        {
                        localContext = new PrimaryExprIsNullContext(new BoolPriContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, MySQLParser.RULE_boolPri);
                        this.state = 6302;
                        if (!(this.precpred(this.context, 3))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 3)");
                        }
                        this.state = 6303;
                        this.match(MySQLParser.IS_SYMBOL);
                        this.state = 6305;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 1 || _la === 390) {
                            {
                            this.state = 6304;
                            this.notRule();
                            }
                        }

                        this.state = 6307;
                        this.match(MySQLParser.NULL_SYMBOL);
                        }
                        break;
                    case 2:
                        {
                        localContext = new PrimaryExprCompareContext(new BoolPriContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, MySQLParser.RULE_boolPri);
                        this.state = 6308;
                        if (!(this.precpred(this.context, 2))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                        }
                        this.state = 6309;
                        this.compOp();
                        this.state = 6310;
                        this.predicate();
                        }
                        break;
                    case 3:
                        {
                        localContext = new PrimaryExprAllAnyContext(new BoolPriContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, MySQLParser.RULE_boolPri);
                        this.state = 6312;
                        if (!(this.precpred(this.context, 1))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                        }
                        this.state = 6313;
                        this.compOp();
                        this.state = 6314;
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 57 || _la === 62)) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 6315;
                        this.subquery();
                        }
                        break;
                    }
                    }
                }
                this.state = 6321;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 754, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public compOp(): CompOpContext {
        let localContext = new CompOpContext(this.context, this.state);
        this.enterRule(localContext, 914, MySQLParser.RULE_compOp);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6322;
            _la = this.tokenStream.LA(1);
            if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 16192) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public predicate(): PredicateContext {
        let localContext = new PredicateContext(this.context, this.state);
        this.enterRule(localContext, 916, MySQLParser.RULE_predicate);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6324;
            this.bitExpr(0);
            this.state = 6338;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 757, this.context) ) {
            case 1:
                {
                this.state = 6326;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1 || _la === 390) {
                    {
                    this.state = 6325;
                    this.notRule();
                    }
                }

                this.state = 6328;
                this.predicateOperations();
                }
                break;
            case 2:
                {
                this.state = 6329;
                if (!(this.serverVersion >= 80017)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80017");
                }
                this.state = 6330;
                this.match(MySQLParser.MEMBER_SYMBOL);
                this.state = 6332;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 676) {
                    {
                    this.state = 6331;
                    this.match(MySQLParser.OF_SYMBOL);
                    }
                }

                this.state = 6334;
                this.simpleExprWithParentheses();
                }
                break;
            case 3:
                {
                this.state = 6335;
                this.match(MySQLParser.SOUNDS_SYMBOL);
                this.state = 6336;
                this.match(MySQLParser.LIKE_SYMBOL);
                this.state = 6337;
                this.bitExpr(0);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public predicateOperations(): PredicateOperationsContext {
        let localContext = new PredicateOperationsContext(this.context, this.state);
        this.enterRule(localContext, 918, MySQLParser.RULE_predicateOperations);
        try {
            this.state = 6361;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.IN_SYMBOL:
                localContext = new PredicateExprInContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6340;
                this.match(MySQLParser.IN_SYMBOL);
                this.state = 6346;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 758, this.context) ) {
                case 1:
                    {
                    this.state = 6341;
                    this.subquery();
                    }
                    break;
                case 2:
                    {
                    this.state = 6342;
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.state = 6343;
                    this.exprList();
                    this.state = 6344;
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                }
                }
                break;
            case MySQLParser.BETWEEN_SYMBOL:
                localContext = new PredicateExprBetweenContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6348;
                this.match(MySQLParser.BETWEEN_SYMBOL);
                this.state = 6349;
                this.bitExpr(0);
                this.state = 6350;
                this.match(MySQLParser.AND_SYMBOL);
                this.state = 6351;
                this.predicate();
                }
                break;
            case MySQLParser.LIKE_SYMBOL:
                localContext = new PredicateExprLikeContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 6353;
                this.match(MySQLParser.LIKE_SYMBOL);
                this.state = 6354;
                this.simpleExpr(0);
                this.state = 6357;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 759, this.context) ) {
                case 1:
                    {
                    this.state = 6355;
                    this.match(MySQLParser.ESCAPE_SYMBOL);
                    this.state = 6356;
                    this.simpleExpr(0);
                    }
                    break;
                }
                }
                break;
            case MySQLParser.REGEXP_SYMBOL:
                localContext = new PredicateExprRegexContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 6359;
                this.match(MySQLParser.REGEXP_SYMBOL);
                this.state = 6360;
                this.bitExpr(0);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public bitExpr(): BitExprContext;
    public bitExpr(_p: number): BitExprContext;
    public bitExpr(_p?: number): BitExprContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new BitExprContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 920;
        this.enterRecursionRule(localContext, 920, MySQLParser.RULE_bitExpr, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            {
            this.state = 6364;
            this.simpleExpr(0);
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 6392;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 762, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this.parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 6390;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 761, this.context) ) {
                    case 1:
                        {
                        localContext = new BitExprContext(parentContext, parentState);
                        this.pushNewRecursionContext(localContext, _startState, MySQLParser.RULE_bitExpr);
                        this.state = 6366;
                        if (!(this.precpred(this.context, 7))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 7)");
                        }
                        this.state = 6367;
                        localContext._op = this.match(MySQLParser.BITWISE_XOR_OPERATOR);
                        this.state = 6368;
                        this.bitExpr(8);
                        }
                        break;
                    case 2:
                        {
                        localContext = new BitExprContext(parentContext, parentState);
                        this.pushNewRecursionContext(localContext, _startState, MySQLParser.RULE_bitExpr);
                        this.state = 6369;
                        if (!(this.precpred(this.context, 6))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 6)");
                        }
                        this.state = 6370;
                        localContext._op = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 458752) !== 0) || _la === 181 || _la === 372)) {
                            localContext._op = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 6371;
                        this.bitExpr(7);
                        }
                        break;
                    case 3:
                        {
                        localContext = new BitExprContext(parentContext, parentState);
                        this.pushNewRecursionContext(localContext, _startState, MySQLParser.RULE_bitExpr);
                        this.state = 6372;
                        if (!(this.precpred(this.context, 5))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 5)");
                        }
                        this.state = 6373;
                        localContext._op = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 14 || _la === 15)) {
                            localContext._op = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 6374;
                        this.bitExpr(6);
                        }
                        break;
                    case 4:
                        {
                        localContext = new BitExprContext(parentContext, parentState);
                        this.pushNewRecursionContext(localContext, _startState, MySQLParser.RULE_bitExpr);
                        this.state = 6375;
                        if (!(this.precpred(this.context, 3))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 3)");
                        }
                        this.state = 6376;
                        localContext._op = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 21 || _la === 22)) {
                            localContext._op = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 6377;
                        this.bitExpr(4);
                        }
                        break;
                    case 5:
                        {
                        localContext = new BitExprContext(parentContext, parentState);
                        this.pushNewRecursionContext(localContext, _startState, MySQLParser.RULE_bitExpr);
                        this.state = 6378;
                        if (!(this.precpred(this.context, 2))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                        }
                        this.state = 6379;
                        localContext._op = this.match(MySQLParser.BITWISE_AND_OPERATOR);
                        this.state = 6380;
                        this.bitExpr(3);
                        }
                        break;
                    case 6:
                        {
                        localContext = new BitExprContext(parentContext, parentState);
                        this.pushNewRecursionContext(localContext, _startState, MySQLParser.RULE_bitExpr);
                        this.state = 6381;
                        if (!(this.precpred(this.context, 1))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                        }
                        this.state = 6382;
                        localContext._op = this.match(MySQLParser.BITWISE_OR_OPERATOR);
                        this.state = 6383;
                        this.bitExpr(2);
                        }
                        break;
                    case 7:
                        {
                        localContext = new BitExprContext(parentContext, parentState);
                        this.pushNewRecursionContext(localContext, _startState, MySQLParser.RULE_bitExpr);
                        this.state = 6384;
                        if (!(this.precpred(this.context, 4))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 4)");
                        }
                        this.state = 6385;
                        localContext._op = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 14 || _la === 15)) {
                            localContext._op = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 6386;
                        this.match(MySQLParser.INTERVAL_SYMBOL);
                        this.state = 6387;
                        this.expr(0);
                        this.state = 6388;
                        this.interval();
                        }
                        break;
                    }
                    }
                }
                this.state = 6394;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 762, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }

    public simpleExpr(): SimpleExprContext;
    public simpleExpr(_p: number): SimpleExprContext;
    public simpleExpr(_p?: number): SimpleExprContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new SimpleExprContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 922;
        this.enterRecursionRule(localContext, 922, MySQLParser.RULE_simpleExpr, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6517;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 773, this.context) ) {
            case 1:
                {
                localContext = new SimpleExprColumnRefContext(localContext);
                this.context = localContext;
                previousContext = localContext;

                this.state = 6396;
                this.columnRef();
                this.state = 6398;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 763, this.context) ) {
                case 1:
                    {
                    this.state = 6397;
                    this.jsonOperator();
                    }
                    break;
                }
                }
                break;
            case 2:
                {
                localContext = new SimpleExprRuntimeFunctionContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 6400;
                this.runtimeFunctionCall();
                }
                break;
            case 3:
                {
                localContext = new SimpleExprFunctionContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 6401;
                this.functionCall();
                }
                break;
            case 4:
                {
                localContext = new SimpleExprLiteralContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 6402;
                this.literalOrNull();
                }
                break;
            case 5:
                {
                localContext = new SimpleExprParamMarkerContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 6403;
                this.match(MySQLParser.PARAM_MARKER);
                }
                break;
            case 6:
                {
                localContext = new SimpleExpressionRValueContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 6404;
                this.rvalueSystemOrUserVariable();
                }
                break;
            case 7:
                {
                localContext = new SimpleExprUserVariableAssignmentContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 6405;
                this.inExpressionUserVariableAssignment();
                }
                break;
            case 8:
                {
                localContext = new SimpleExprSumContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 6406;
                this.sumExpr();
                }
                break;
            case 9:
                {
                localContext = new SimpleExprGroupingOperationContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 6407;
                this.groupingOperation();
                }
                break;
            case 10:
                {
                localContext = new SimpleExprWindowingFunctionContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 6408;
                this.windowFunctionCall();
                }
                break;
            case 11:
                {
                localContext = new SimpleExprUnaryContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 6409;
                (localContext as SimpleExprUnaryContext)._op = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 1097728) !== 0))) {
                    (localContext as SimpleExprUnaryContext)._op = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6410;
                this.simpleExpr(15);
                }
                break;
            case 12:
                {
                localContext = new SimpleExprNotContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 6411;
                this.not2Rule();
                this.state = 6412;
                this.simpleExpr(14);
                }
                break;
            case 13:
                {
                localContext = new SimpleExprListContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 6415;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 503) {
                    {
                    this.state = 6414;
                    this.match(MySQLParser.ROW_SYMBOL);
                    }
                }

                this.state = 6417;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 6418;
                this.exprList();
                this.state = 6419;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case 14:
                {
                localContext = new SimpleExprSubQueryContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 6422;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 209) {
                    {
                    this.state = 6421;
                    this.match(MySQLParser.EXISTS_SYMBOL);
                    }
                }

                this.state = 6424;
                this.subquery();
                }
                break;
            case 15:
                {
                localContext = new SimpleExprOdbcContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 6425;
                this.match(MySQLParser.OPEN_CURLY_SYMBOL);
                this.state = 6426;
                this.identifier();
                this.state = 6427;
                this.expr(0);
                this.state = 6428;
                this.match(MySQLParser.CLOSE_CURLY_SYMBOL);
                }
                break;
            case 16:
                {
                localContext = new SimpleExprMatchContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 6430;
                this.match(MySQLParser.MATCH_SYMBOL);
                this.state = 6431;
                this.identListArg();
                this.state = 6432;
                this.match(MySQLParser.AGAINST_SYMBOL);
                this.state = 6433;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 6434;
                this.bitExpr(0);
                this.state = 6436;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 282 || _la === 653) {
                    {
                    this.state = 6435;
                    this.fulltextOptions();
                    }
                }

                this.state = 6438;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case 17:
                {
                localContext = new SimpleExprBinaryContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 6440;
                this.match(MySQLParser.BINARY_SYMBOL);
                this.state = 6441;
                this.simpleExpr(9);
                }
                break;
            case 18:
                {
                localContext = new SimpleExprCastContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 6442;
                this.match(MySQLParser.CAST_SYMBOL);
                this.state = 6443;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 6444;
                this.expr(0);
                this.state = 6447;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 67) {
                    {
                    this.state = 6445;
                    this.match(MySQLParser.AT_SYMBOL);
                    this.state = 6446;
                    this.match(MySQLParser.LOCAL_SYMBOL);
                    }
                }

                this.state = 6449;
                this.match(MySQLParser.AS_SYMBOL);
                this.state = 6450;
                this.castType();
                this.state = 6452;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 768, this.context) ) {
                case 1:
                    {
                    this.state = 6451;
                    this.arrayCast();
                    }
                    break;
                }
                this.state = 6454;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case 19:
                {
                localContext = new SimpleExprCastTimeContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 6456;
                this.match(MySQLParser.CAST_SYMBOL);
                this.state = 6457;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 6458;
                this.expr(0);
                this.state = 6459;
                this.match(MySQLParser.AT_SYMBOL);
                this.state = 6460;
                this.match(MySQLParser.TIME_SYMBOL);
                this.state = 6461;
                this.match(MySQLParser.ZONE_SYMBOL);
                this.state = 6463;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 769, this.context) ) {
                case 1:
                    {
                    this.state = 6462;
                    this.match(MySQLParser.INTERVAL_SYMBOL);
                    }
                    break;
                }
                this.state = 6465;
                this.textStringLiteral();
                this.state = 6466;
                this.match(MySQLParser.AS_SYMBOL);
                this.state = 6467;
                this.match(MySQLParser.DATETIME_SYMBOL);
                this.state = 6468;
                this.typeDatetimePrecision();
                this.state = 6469;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case 20:
                {
                localContext = new SimpleExprCaseContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 6471;
                this.match(MySQLParser.CASE_SYMBOL);
                this.state = 6473;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 770, this.context) ) {
                case 1:
                    {
                    this.state = 6472;
                    this.expr(0);
                    }
                    break;
                }
                this.state = 6478;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 6475;
                    this.whenExpression();
                    this.state = 6476;
                    this.thenExpression();
                    }
                    }
                    this.state = 6480;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 650);
                this.state = 6483;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 190) {
                    {
                    this.state = 6482;
                    this.elseExpression();
                    }
                }

                this.state = 6485;
                this.match(MySQLParser.END_SYMBOL);
                }
                break;
            case 21:
                {
                localContext = new SimpleExprConvertContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 6487;
                this.match(MySQLParser.CONVERT_SYMBOL);
                this.state = 6488;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 6489;
                this.expr(0);
                this.state = 6490;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 6491;
                this.castType();
                this.state = 6492;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case 22:
                {
                localContext = new SimpleExprConvertUsingContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 6494;
                this.match(MySQLParser.CONVERT_SYMBOL);
                this.state = 6495;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 6496;
                this.expr(0);
                this.state = 6497;
                this.match(MySQLParser.USING_SYMBOL);
                this.state = 6498;
                this.charsetName();
                this.state = 6499;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case 23:
                {
                localContext = new SimpleExprDefaultContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 6501;
                this.match(MySQLParser.DEFAULT_SYMBOL);
                this.state = 6502;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 6503;
                this.simpleIdentifier();
                this.state = 6504;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case 24:
                {
                localContext = new SimpleExprValuesContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 6506;
                this.match(MySQLParser.VALUES_SYMBOL);
                this.state = 6507;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 6508;
                this.simpleIdentifier();
                this.state = 6509;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case 25:
                {
                localContext = new SimpleExprIntervalContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 6511;
                this.match(MySQLParser.INTERVAL_SYMBOL);
                this.state = 6512;
                this.expr(0);
                this.state = 6513;
                this.interval();
                this.state = 6514;
                this.match(MySQLParser.PLUS_OPERATOR);
                this.state = 6515;
                this.expr(0);
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 6527;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 775, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this.parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 6525;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 774, this.context) ) {
                    case 1:
                        {
                        localContext = new SimpleExprConcatContext(new SimpleExprContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, MySQLParser.RULE_simpleExpr);
                        this.state = 6519;
                        if (!(this.precpred(this.context, 16))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 16)");
                        }
                        this.state = 6520;
                        this.match(MySQLParser.CONCAT_PIPES_SYMBOL);
                        this.state = 6521;
                        this.simpleExpr(17);
                        }
                        break;
                    case 2:
                        {
                        localContext = new SimpleExprCollateContext(new SimpleExprContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, MySQLParser.RULE_simpleExpr);
                        this.state = 6522;
                        if (!(this.precpred(this.context, 24))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 24)");
                        }
                        this.state = 6523;
                        this.match(MySQLParser.COLLATE_SYMBOL);
                        this.state = 6524;
                        this.textOrIdentifier();
                        }
                        break;
                    }
                    }
                }
                this.state = 6529;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 775, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public arrayCast(): ArrayCastContext {
        let localContext = new ArrayCastContext(this.context, this.state);
        this.enterRule(localContext, 924, MySQLParser.RULE_arrayCast);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6530;
            if (!(this.serverVersion >= 80017)) {
                throw this.createFailedPredicateException("this.serverVersion >= 80017");
            }
            this.state = 6531;
            this.match(MySQLParser.ARRAY_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonOperator(): JsonOperatorContext {
        let localContext = new JsonOperatorContext(this.context, this.state);
        this.enterRule(localContext, 926, MySQLParser.RULE_jsonOperator);
        try {
            this.state = 6537;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.JSON_SEPARATOR_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6533;
                this.match(MySQLParser.JSON_SEPARATOR_SYMBOL);
                this.state = 6534;
                this.textStringLiteral();
                }
                break;
            case MySQLParser.JSON_UNQUOTED_SEPARATOR_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6535;
                this.match(MySQLParser.JSON_UNQUOTED_SEPARATOR_SYMBOL);
                this.state = 6536;
                this.textStringLiteral();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sumExpr(): SumExprContext {
        let localContext = new SumExprContext(this.context, this.state);
        this.enterRule(localContext, 928, MySQLParser.RULE_sumExpr);
        let _la: number;
        try {
            this.state = 6624;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 793, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6539;
                localContext._name = this.match(MySQLParser.AVG_SYMBOL);
                this.state = 6540;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 6542;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 777, this.context) ) {
                case 1:
                    {
                    this.state = 6541;
                    this.match(MySQLParser.DISTINCT_SYMBOL);
                    }
                    break;
                }
                this.state = 6544;
                this.inSumExpr();
                this.state = 6545;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                this.state = 6547;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 778, this.context) ) {
                case 1:
                    {
                    this.state = 6546;
                    this.windowingClause();
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6549;
                localContext._name = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 79)) & ~0x1F) === 0 && ((1 << (_la - 79)) & 11) !== 0))) {
                    localContext._name = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6550;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 6551;
                this.inSumExpr();
                this.state = 6552;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                this.state = 6554;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 779, this.context) ) {
                case 1:
                    {
                    this.state = 6553;
                    this.windowingClause();
                    }
                    break;
                }
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 6556;
                this.jsonFunction();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 6557;
                localContext._name = this.match(MySQLParser.ST_COLLECT_SYMBOL);
                this.state = 6558;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 6560;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 780, this.context) ) {
                case 1:
                    {
                    this.state = 6559;
                    this.match(MySQLParser.DISTINCT_SYMBOL);
                    }
                    break;
                }
                this.state = 6562;
                this.inSumExpr();
                this.state = 6563;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                this.state = 6565;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 781, this.context) ) {
                case 1:
                    {
                    this.state = 6564;
                    this.windowingClause();
                    }
                    break;
                }
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 6567;
                localContext._name = this.match(MySQLParser.COUNT_SYMBOL);
                this.state = 6568;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 6576;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 783, this.context) ) {
                case 1:
                    {
                    this.state = 6570;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 57) {
                        {
                        this.state = 6569;
                        this.match(MySQLParser.ALL_SYMBOL);
                        }
                    }

                    this.state = 6572;
                    this.match(MySQLParser.MULT_OPERATOR);
                    }
                    break;
                case 2:
                    {
                    this.state = 6573;
                    this.inSumExpr();
                    }
                    break;
                case 3:
                    {
                    this.state = 6574;
                    this.match(MySQLParser.DISTINCT_SYMBOL);
                    this.state = 6575;
                    this.exprList();
                    }
                    break;
                }
                this.state = 6578;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                this.state = 6580;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 784, this.context) ) {
                case 1:
                    {
                    this.state = 6579;
                    this.windowingClause();
                    }
                    break;
                }
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 6582;
                localContext._name = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 350 || _la === 368)) {
                    localContext._name = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6583;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 6585;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 785, this.context) ) {
                case 1:
                    {
                    this.state = 6584;
                    this.match(MySQLParser.DISTINCT_SYMBOL);
                    }
                    break;
                }
                this.state = 6587;
                this.inSumExpr();
                this.state = 6588;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                this.state = 6590;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 786, this.context) ) {
                case 1:
                    {
                    this.state = 6589;
                    this.windowingClause();
                    }
                    break;
                }
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 6592;
                localContext._name = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 558)) & ~0x1F) === 0 && ((1 << (_la - 558)) & 65545) !== 0) || _la === 640 || _la === 643)) {
                    localContext._name = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6593;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 6594;
                this.inSumExpr();
                this.state = 6595;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                this.state = 6597;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 787, this.context) ) {
                case 1:
                    {
                    this.state = 6596;
                    this.windowingClause();
                    }
                    break;
                }
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 6599;
                localContext._name = this.match(MySQLParser.SUM_SYMBOL);
                this.state = 6600;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 6601;
                this.match(MySQLParser.DISTINCT_SYMBOL);
                this.state = 6602;
                this.inSumExpr();
                this.state = 6603;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                this.state = 6605;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 788, this.context) ) {
                case 1:
                    {
                    this.state = 6604;
                    this.windowingClause();
                    }
                    break;
                }
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 6607;
                localContext._name = this.match(MySQLParser.GROUP_CONCAT_SYMBOL);
                this.state = 6608;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 6610;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 789, this.context) ) {
                case 1:
                    {
                    this.state = 6609;
                    this.match(MySQLParser.DISTINCT_SYMBOL);
                    }
                    break;
                }
                this.state = 6612;
                this.exprList();
                this.state = 6614;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 411) {
                    {
                    this.state = 6613;
                    this.orderClause();
                    }
                }

                this.state = 6618;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 513) {
                    {
                    this.state = 6616;
                    this.match(MySQLParser.SEPARATOR_SYMBOL);
                    this.state = 6617;
                    this.textString();
                    }
                }

                this.state = 6620;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                this.state = 6622;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 792, this.context) ) {
                case 1:
                    {
                    this.state = 6621;
                    this.windowingClause();
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupingOperation(): GroupingOperationContext {
        let localContext = new GroupingOperationContext(this.context, this.state);
        this.enterRule(localContext, 930, MySQLParser.RULE_groupingOperation);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6626;
            this.match(MySQLParser.GROUPING_SYMBOL);
            this.state = 6627;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 6628;
            this.exprList();
            this.state = 6629;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowFunctionCall(): WindowFunctionCallContext {
        let localContext = new WindowFunctionCallContext(this.context, this.state);
        this.enterRule(localContext, 932, MySQLParser.RULE_windowFunctionCall);
        let _la: number;
        try {
            this.state = 6680;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.CUME_DIST_SYMBOL:
            case MySQLParser.DENSE_RANK_SYMBOL:
            case MySQLParser.PERCENT_RANK_SYMBOL:
            case MySQLParser.RANK_SYMBOL:
            case MySQLParser.ROW_NUMBER_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6631;
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 686)) & ~0x1F) === 0 && ((1 << (_la - 686)) & 344067) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6632;
                this.parentheses();
                this.state = 6633;
                this.windowingClause();
                }
                break;
            case MySQLParser.NTILE_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6635;
                this.match(MySQLParser.NTILE_SYMBOL);
                this.state = 6642;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 794, this.context) ) {
                case 1:
                    {
                    this.state = 6636;
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.state = 6637;
                    this.stableInteger();
                    this.state = 6638;
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 2:
                    {
                    this.state = 6640;
                    if (!(this.serverVersion < 80024)) {
                        throw this.createFailedPredicateException("this.serverVersion < 80024");
                    }
                    this.state = 6641;
                    this.simpleExprWithParentheses();
                    }
                    break;
                }
                this.state = 6644;
                this.windowingClause();
                }
                break;
            case MySQLParser.LAG_SYMBOL:
            case MySQLParser.LEAD_SYMBOL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 6646;
                _la = this.tokenStream.LA(1);
                if(!(_la === 692 || _la === 694)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6647;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 6648;
                this.expr(0);
                this.state = 6650;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 29) {
                    {
                    this.state = 6649;
                    this.leadLagInfo();
                    }
                }

                this.state = 6652;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                this.state = 6654;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 264 || _la === 703) {
                    {
                    this.state = 6653;
                    this.nullTreatment();
                    }
                }

                this.state = 6656;
                this.windowingClause();
                }
                break;
            case MySQLParser.FIRST_VALUE_SYMBOL:
            case MySQLParser.LAST_VALUE_SYMBOL:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 6658;
                _la = this.tokenStream.LA(1);
                if(!(_la === 689 || _la === 693)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6659;
                this.exprWithParentheses();
                this.state = 6661;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 264 || _la === 703) {
                    {
                    this.state = 6660;
                    this.nullTreatment();
                    }
                }

                this.state = 6663;
                this.windowingClause();
                }
                break;
            case MySQLParser.NTH_VALUE_SYMBOL:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 6665;
                this.match(MySQLParser.NTH_VALUE_SYMBOL);
                this.state = 6666;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 6667;
                this.expr(0);
                this.state = 6668;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 6669;
                this.simpleExpr(0);
                this.state = 6670;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                this.state = 6673;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 235) {
                    {
                    this.state = 6671;
                    this.match(MySQLParser.FROM_SYMBOL);
                    this.state = 6672;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 225 || _la === 298)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 6676;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 264 || _la === 703) {
                    {
                    this.state = 6675;
                    this.nullTreatment();
                    }
                }

                this.state = 6678;
                this.windowingClause();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public samplingMethod(): SamplingMethodContext {
        let localContext = new SamplingMethodContext(this.context, this.state);
        this.enterRule(localContext, 934, MySQLParser.RULE_samplingMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6682;
            _la = this.tokenStream.LA(1);
            if(!(_la === 718 || _la === 815)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public samplingPercentage(): SamplingPercentageContext {
        let localContext = new SamplingPercentageContext(this.context, this.state);
        this.enterRule(localContext, 936, MySQLParser.RULE_samplingPercentage);
        try {
            this.state = 6688;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.INT_NUMBER:
            case MySQLParser.LONG_NUMBER:
            case MySQLParser.ULONGLONG_NUMBER:
            case MySQLParser.DECIMAL_NUMBER:
            case MySQLParser.FLOAT_NUMBER:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6684;
                this.ulonglongNumber();
                }
                break;
            case MySQLParser.AT_SIGN_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6685;
                this.match(MySQLParser.AT_SIGN_SYMBOL);
                this.state = 6686;
                this.textOrIdentifier();
                }
                break;
            case MySQLParser.PARAM_MARKER:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 6687;
                this.match(MySQLParser.PARAM_MARKER);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tablesampleClause(): TablesampleClauseContext {
        let localContext = new TablesampleClauseContext(this.context, this.state);
        this.enterRule(localContext, 938, MySQLParser.RULE_tablesampleClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6690;
            if (!(this.serverVersion >= 80200)) {
                throw this.createFailedPredicateException("this.serverVersion >= 80200");
            }
            this.state = 6691;
            this.match(MySQLParser.TABLESAMPLE_SYMBOL);
            this.state = 6692;
            this.samplingMethod();
            this.state = 6693;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 6694;
            this.samplingPercentage();
            this.state = 6695;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowingClause(): WindowingClauseContext {
        let localContext = new WindowingClauseContext(this.context, this.state);
        this.enterRule(localContext, 940, MySQLParser.RULE_windowingClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6697;
            this.match(MySQLParser.OVER_SYMBOL);
            this.state = 6700;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 802, this.context) ) {
            case 1:
                {
                this.state = 6698;
                this.windowName();
                }
                break;
            case 2:
                {
                this.state = 6699;
                this.windowSpec();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public leadLagInfo(): LeadLagInfoContext {
        let localContext = new LeadLagInfoContext(this.context, this.state);
        this.enterRule(localContext, 942, MySQLParser.RULE_leadLagInfo);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6702;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 6707;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 803, this.context) ) {
            case 1:
                {
                this.state = 6703;
                this.ulonglongNumber();
                }
                break;
            case 2:
                {
                this.state = 6704;
                this.match(MySQLParser.PARAM_MARKER);
                }
                break;
            case 3:
                {
                this.state = 6705;
                if (!(this.serverVersion >= 80024)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80024");
                }
                this.state = 6706;
                this.stableInteger();
                }
                break;
            }
            this.state = 6711;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 29) {
                {
                this.state = 6709;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 6710;
                this.expr(0);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stableInteger(): StableIntegerContext {
        let localContext = new StableIntegerContext(this.context, this.state);
        this.enterRule(localContext, 944, MySQLParser.RULE_stableInteger);
        try {
            this.state = 6715;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 805, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6713;
                this.int64Literal();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6714;
                this.paramOrVar();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public paramOrVar(): ParamOrVarContext {
        let localContext = new ParamOrVarContext(this.context, this.state);
        this.enterRule(localContext, 946, MySQLParser.RULE_paramOrVar);
        try {
            this.state = 6721;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 806, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6717;
                this.match(MySQLParser.PARAM_MARKER);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6718;
                this.identifier();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 6719;
                this.match(MySQLParser.AT_SIGN_SYMBOL);
                this.state = 6720;
                this.textOrIdentifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nullTreatment(): NullTreatmentContext {
        let localContext = new NullTreatmentContext(this.context, this.state);
        this.enterRule(localContext, 948, MySQLParser.RULE_nullTreatment);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6723;
            _la = this.tokenStream.LA(1);
            if(!(_la === 264 || _la === 703)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 6724;
            this.match(MySQLParser.NULLS_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonFunction(): JsonFunctionContext {
        let localContext = new JsonFunctionContext(this.context, this.state);
        this.enterRule(localContext, 950, MySQLParser.RULE_jsonFunction);
        try {
            this.state = 6742;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.JSON_ARRAYAGG_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6726;
                this.match(MySQLParser.JSON_ARRAYAGG_SYMBOL);
                this.state = 6727;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 6728;
                this.inSumExpr();
                this.state = 6729;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                this.state = 6731;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 807, this.context) ) {
                case 1:
                    {
                    this.state = 6730;
                    this.windowingClause();
                    }
                    break;
                }
                }
                break;
            case MySQLParser.JSON_OBJECTAGG_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6733;
                this.match(MySQLParser.JSON_OBJECTAGG_SYMBOL);
                this.state = 6734;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 6735;
                this.inSumExpr();
                this.state = 6736;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 6737;
                this.inSumExpr();
                this.state = 6738;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                this.state = 6740;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 808, this.context) ) {
                case 1:
                    {
                    this.state = 6739;
                    this.windowingClause();
                    }
                    break;
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public inSumExpr(): InSumExprContext {
        let localContext = new InSumExprContext(this.context, this.state);
        this.enterRule(localContext, 952, MySQLParser.RULE_inSumExpr);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6745;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 810, this.context) ) {
            case 1:
                {
                this.state = 6744;
                this.match(MySQLParser.ALL_SYMBOL);
                }
                break;
            }
            this.state = 6747;
            this.expr(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identListArg(): IdentListArgContext {
        let localContext = new IdentListArgContext(this.context, this.state);
        this.enterRule(localContext, 954, MySQLParser.RULE_identListArg);
        try {
            this.state = 6754;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 811, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6749;
                this.identList();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6750;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 6751;
                this.identList();
                this.state = 6752;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identList(): IdentListContext {
        let localContext = new IdentListContext(this.context, this.state);
        this.enterRule(localContext, 956, MySQLParser.RULE_identList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6756;
            this.simpleIdentifier();
            this.state = 6761;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 29) {
                {
                {
                this.state = 6757;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 6758;
                this.simpleIdentifier();
                }
                }
                this.state = 6763;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fulltextOptions(): FulltextOptionsContext {
        let localContext = new FulltextOptionsContext(this.context, this.state);
        this.enterRule(localContext, 958, MySQLParser.RULE_fulltextOptions);
        let _la: number;
        try {
            this.state = 6779;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 814, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6764;
                this.match(MySQLParser.IN_SYMBOL);
                this.state = 6765;
                this.match(MySQLParser.BOOLEAN_SYMBOL);
                this.state = 6766;
                this.match(MySQLParser.MODE_SYMBOL);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6767;
                this.match(MySQLParser.IN_SYMBOL);
                this.state = 6768;
                this.match(MySQLParser.NATURAL_SYMBOL);
                this.state = 6769;
                this.match(MySQLParser.LANGUAGE_SYMBOL);
                this.state = 6770;
                this.match(MySQLParser.MODE_SYMBOL);
                this.state = 6774;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 653) {
                    {
                    this.state = 6771;
                    this.match(MySQLParser.WITH_SYMBOL);
                    this.state = 6772;
                    this.match(MySQLParser.QUERY_SYMBOL);
                    this.state = 6773;
                    this.match(MySQLParser.EXPANSION_SYMBOL);
                    }
                }

                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 6776;
                this.match(MySQLParser.WITH_SYMBOL);
                this.state = 6777;
                this.match(MySQLParser.QUERY_SYMBOL);
                this.state = 6778;
                this.match(MySQLParser.EXPANSION_SYMBOL);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public runtimeFunctionCall(): RuntimeFunctionCallContext {
        let localContext = new RuntimeFunctionCallContext(this.context, this.state);
        this.enterRule(localContext, 960, MySQLParser.RULE_runtimeFunctionCall);
        let _la: number;
        try {
            this.state = 7064;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 833, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6781;
                this.match(MySQLParser.CHAR_SYMBOL);
                this.state = 6782;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 6783;
                this.exprList();
                this.state = 6786;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 630) {
                    {
                    this.state = 6784;
                    this.match(MySQLParser.USING_SYMBOL);
                    this.state = 6785;
                    this.charsetName();
                    }
                }

                this.state = 6788;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6790;
                this.match(MySQLParser.CURRENT_USER_SYMBOL);
                this.state = 6792;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 816, this.context) ) {
                case 1:
                    {
                    this.state = 6791;
                    this.parentheses();
                    }
                    break;
                }
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 6794;
                this.match(MySQLParser.DATE_SYMBOL);
                this.state = 6795;
                this.exprWithParentheses();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 6796;
                this.match(MySQLParser.DAY_SYMBOL);
                this.state = 6797;
                this.exprWithParentheses();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 6798;
                this.match(MySQLParser.HOUR_SYMBOL);
                this.state = 6799;
                this.exprWithParentheses();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 6800;
                this.match(MySQLParser.INSERT_SYMBOL);
                this.state = 6801;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 6802;
                this.expr(0);
                this.state = 6803;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 6804;
                this.expr(0);
                this.state = 6805;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 6806;
                this.expr(0);
                this.state = 6807;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 6808;
                this.expr(0);
                this.state = 6809;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 6811;
                this.match(MySQLParser.INTERVAL_SYMBOL);
                this.state = 6812;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 6813;
                this.expr(0);
                this.state = 6816;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 6814;
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.state = 6815;
                    this.expr(0);
                    }
                    }
                    this.state = 6818;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 29);
                this.state = 6820;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 6822;
                this.match(MySQLParser.JSON_VALUE_SYMBOL);
                this.state = 6823;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 6824;
                this.simpleExpr(0);
                this.state = 6825;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 6826;
                this.textLiteral();
                this.state = 6828;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 753) {
                    {
                    this.state = 6827;
                    this.returningType();
                    }
                }

                this.state = 6830;
                this.onEmptyOrError();
                this.state = 6831;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 6833;
                this.match(MySQLParser.LEFT_SYMBOL);
                this.state = 6834;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 6835;
                this.expr(0);
                this.state = 6836;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 6837;
                this.expr(0);
                this.state = 6838;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 6840;
                this.match(MySQLParser.MINUTE_SYMBOL);
                this.state = 6841;
                this.exprWithParentheses();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 6842;
                this.match(MySQLParser.MONTH_SYMBOL);
                this.state = 6843;
                this.exprWithParentheses();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 6844;
                this.match(MySQLParser.RIGHT_SYMBOL);
                this.state = 6845;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 6846;
                this.expr(0);
                this.state = 6847;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 6848;
                this.expr(0);
                this.state = 6849;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 6851;
                this.match(MySQLParser.SECOND_SYMBOL);
                this.state = 6852;
                this.exprWithParentheses();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 6853;
                this.match(MySQLParser.TIME_SYMBOL);
                this.state = 6854;
                this.exprWithParentheses();
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 6855;
                this.match(MySQLParser.TIMESTAMP_SYMBOL);
                this.state = 6856;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 6857;
                this.expr(0);
                this.state = 6860;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 29) {
                    {
                    this.state = 6858;
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.state = 6859;
                    this.expr(0);
                    }
                }

                this.state = 6862;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 6864;
                this.trimFunction();
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 6865;
                this.userFunction();
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 6866;
                this.match(MySQLParser.VALUES_SYMBOL);
                this.state = 6867;
                this.exprWithParentheses();
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 6868;
                this.match(MySQLParser.YEAR_SYMBOL);
                this.state = 6869;
                this.exprWithParentheses();
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 6870;
                _la = this.tokenStream.LA(1);
                if(!(_la === 52 || _la === 568)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6871;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 6872;
                this.expr(0);
                this.state = 6873;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 6879;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 820, this.context) ) {
                case 1:
                    {
                    this.state = 6874;
                    this.expr(0);
                    }
                    break;
                case 2:
                    {
                    this.state = 6875;
                    this.match(MySQLParser.INTERVAL_SYMBOL);
                    this.state = 6876;
                    this.expr(0);
                    this.state = 6877;
                    this.interval();
                    }
                    break;
                }
                this.state = 6881;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case 21:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 6883;
                this.match(MySQLParser.CURDATE_SYMBOL);
                this.state = 6885;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 821, this.context) ) {
                case 1:
                    {
                    this.state = 6884;
                    this.parentheses();
                    }
                    break;
                }
                }
                break;
            case 22:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 6887;
                this.match(MySQLParser.CURTIME_SYMBOL);
                this.state = 6889;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 822, this.context) ) {
                case 1:
                    {
                    this.state = 6888;
                    this.timeFunctionParameters();
                    }
                    break;
                }
                }
                break;
            case 23:
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 6891;
                _la = this.tokenStream.LA(1);
                if(!(_la === 155 || _la === 156)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6892;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 6893;
                this.expr(0);
                this.state = 6894;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 6895;
                this.match(MySQLParser.INTERVAL_SYMBOL);
                this.state = 6896;
                this.expr(0);
                this.state = 6897;
                this.interval();
                this.state = 6898;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case 24:
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 6900;
                this.match(MySQLParser.EXTRACT_SYMBOL);
                this.state = 6901;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 6902;
                this.interval();
                this.state = 6903;
                this.match(MySQLParser.FROM_SYMBOL);
                this.state = 6904;
                this.expr(0);
                this.state = 6905;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case 25:
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 6907;
                this.match(MySQLParser.GET_FORMAT_SYMBOL);
                this.state = 6908;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 6909;
                this.dateTimeTtype();
                this.state = 6910;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 6911;
                this.expr(0);
                this.state = 6912;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case 26:
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 6914;
                if (!(this.serverVersion >= 80032)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80032");
                }
                this.state = 6915;
                this.match(MySQLParser.LOG_SYMBOL);
                this.state = 6916;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 6917;
                this.expr(0);
                this.state = 6920;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 29) {
                    {
                    this.state = 6918;
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.state = 6919;
                    this.expr(0);
                    }
                }

                this.state = 6922;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case 27:
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 6924;
                this.match(MySQLParser.NOW_SYMBOL);
                this.state = 6926;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 824, this.context) ) {
                case 1:
                    {
                    this.state = 6925;
                    this.timeFunctionParameters();
                    }
                    break;
                }
                }
                break;
            case 28:
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 6928;
                this.match(MySQLParser.POSITION_SYMBOL);
                this.state = 6929;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 6930;
                this.bitExpr(0);
                this.state = 6931;
                this.match(MySQLParser.IN_SYMBOL);
                this.state = 6932;
                this.expr(0);
                this.state = 6933;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case 29:
                this.enterOuterAlt(localContext, 29);
                {
                this.state = 6935;
                this.substringFunction();
                }
                break;
            case 30:
                this.enterOuterAlt(localContext, 30);
                {
                this.state = 6936;
                this.match(MySQLParser.SYSDATE_SYMBOL);
                this.state = 6938;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 825, this.context) ) {
                case 1:
                    {
                    this.state = 6937;
                    this.timeFunctionParameters();
                    }
                    break;
                }
                }
                break;
            case 31:
                this.enterOuterAlt(localContext, 31);
                {
                this.state = 6940;
                _la = this.tokenStream.LA(1);
                if(!(_la === 593 || _la === 594)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6941;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 6942;
                this.intervalTimeStamp();
                this.state = 6943;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 6944;
                this.expr(0);
                this.state = 6945;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 6946;
                this.expr(0);
                this.state = 6947;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case 32:
                this.enterOuterAlt(localContext, 32);
                {
                this.state = 6949;
                this.match(MySQLParser.UTC_DATE_SYMBOL);
                this.state = 6951;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 826, this.context) ) {
                case 1:
                    {
                    this.state = 6950;
                    this.parentheses();
                    }
                    break;
                }
                }
                break;
            case 33:
                this.enterOuterAlt(localContext, 33);
                {
                this.state = 6953;
                this.match(MySQLParser.UTC_TIME_SYMBOL);
                this.state = 6955;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 827, this.context) ) {
                case 1:
                    {
                    this.state = 6954;
                    this.timeFunctionParameters();
                    }
                    break;
                }
                }
                break;
            case 34:
                this.enterOuterAlt(localContext, 34);
                {
                this.state = 6957;
                this.match(MySQLParser.UTC_TIMESTAMP_SYMBOL);
                this.state = 6959;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 828, this.context) ) {
                case 1:
                    {
                    this.state = 6958;
                    this.timeFunctionParameters();
                    }
                    break;
                }
                }
                break;
            case 35:
                this.enterOuterAlt(localContext, 35);
                {
                this.state = 6961;
                this.match(MySQLParser.ASCII_SYMBOL);
                this.state = 6962;
                this.exprWithParentheses();
                }
                break;
            case 36:
                this.enterOuterAlt(localContext, 36);
                {
                this.state = 6963;
                this.match(MySQLParser.CHARSET_SYMBOL);
                this.state = 6964;
                this.exprWithParentheses();
                }
                break;
            case 37:
                this.enterOuterAlt(localContext, 37);
                {
                this.state = 6965;
                this.match(MySQLParser.COALESCE_SYMBOL);
                this.state = 6966;
                this.exprListWithParentheses();
                }
                break;
            case 38:
                this.enterOuterAlt(localContext, 38);
                {
                this.state = 6967;
                this.match(MySQLParser.COLLATION_SYMBOL);
                this.state = 6968;
                this.exprWithParentheses();
                }
                break;
            case 39:
                this.enterOuterAlt(localContext, 39);
                {
                this.state = 6969;
                this.match(MySQLParser.DATABASE_SYMBOL);
                this.state = 6970;
                this.parentheses();
                }
                break;
            case 40:
                this.enterOuterAlt(localContext, 40);
                {
                this.state = 6971;
                this.match(MySQLParser.IF_SYMBOL);
                this.state = 6972;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 6973;
                this.expr(0);
                this.state = 6974;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 6975;
                this.expr(0);
                this.state = 6976;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 6977;
                this.expr(0);
                this.state = 6978;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case 41:
                this.enterOuterAlt(localContext, 41);
                {
                this.state = 6980;
                this.match(MySQLParser.FORMAT_SYMBOL);
                this.state = 6981;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 6982;
                this.expr(0);
                this.state = 6983;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 6984;
                this.expr(0);
                this.state = 6987;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 29) {
                    {
                    this.state = 6985;
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.state = 6986;
                    this.expr(0);
                    }
                }

                this.state = 6989;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case 42:
                this.enterOuterAlt(localContext, 42);
                {
                this.state = 6991;
                this.match(MySQLParser.MICROSECOND_SYMBOL);
                this.state = 6992;
                this.exprWithParentheses();
                }
                break;
            case 43:
                this.enterOuterAlt(localContext, 43);
                {
                this.state = 6993;
                this.match(MySQLParser.MOD_SYMBOL);
                this.state = 6994;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 6995;
                this.expr(0);
                this.state = 6996;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 6997;
                this.expr(0);
                this.state = 6998;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case 44:
                this.enterOuterAlt(localContext, 44);
                {
                this.state = 7000;
                if (!(this.serverVersion < 80011)) {
                    throw this.createFailedPredicateException("this.serverVersion < 80011");
                }
                this.state = 7001;
                this.match(MySQLParser.PASSWORD_SYMBOL);
                this.state = 7002;
                this.exprWithParentheses();
                }
                break;
            case 45:
                this.enterOuterAlt(localContext, 45);
                {
                this.state = 7003;
                this.match(MySQLParser.QUARTER_SYMBOL);
                this.state = 7004;
                this.exprWithParentheses();
                }
                break;
            case 46:
                this.enterOuterAlt(localContext, 46);
                {
                this.state = 7005;
                this.match(MySQLParser.REPEAT_SYMBOL);
                this.state = 7006;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 7007;
                this.expr(0);
                this.state = 7008;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 7009;
                this.expr(0);
                this.state = 7010;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case 47:
                this.enterOuterAlt(localContext, 47);
                {
                this.state = 7012;
                this.match(MySQLParser.REPLACE_SYMBOL);
                this.state = 7013;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 7014;
                this.expr(0);
                this.state = 7015;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 7016;
                this.expr(0);
                this.state = 7017;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 7018;
                this.expr(0);
                this.state = 7019;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case 48:
                this.enterOuterAlt(localContext, 48);
                {
                this.state = 7021;
                this.match(MySQLParser.REVERSE_SYMBOL);
                this.state = 7022;
                this.exprWithParentheses();
                }
                break;
            case 49:
                this.enterOuterAlt(localContext, 49);
                {
                this.state = 7023;
                this.match(MySQLParser.ROW_COUNT_SYMBOL);
                this.state = 7024;
                this.parentheses();
                }
                break;
            case 50:
                this.enterOuterAlt(localContext, 50);
                {
                this.state = 7025;
                this.match(MySQLParser.TRUNCATE_SYMBOL);
                this.state = 7026;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 7027;
                this.expr(0);
                this.state = 7028;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 7029;
                this.expr(0);
                this.state = 7030;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case 51:
                this.enterOuterAlt(localContext, 51);
                {
                this.state = 7032;
                this.match(MySQLParser.WEEK_SYMBOL);
                this.state = 7033;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 7034;
                this.expr(0);
                this.state = 7037;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 29) {
                    {
                    this.state = 7035;
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.state = 7036;
                    this.expr(0);
                    }
                }

                this.state = 7039;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case 52:
                this.enterOuterAlt(localContext, 52);
                {
                this.state = 7041;
                this.match(MySQLParser.WEIGHT_STRING_SYMBOL);
                this.state = 7042;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 7043;
                this.expr(0);
                this.state = 7059;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 832, this.context) ) {
                case 1:
                    {
                    this.state = 7047;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 63) {
                        {
                        this.state = 7044;
                        this.match(MySQLParser.AS_SYMBOL);
                        this.state = 7045;
                        this.match(MySQLParser.CHAR_SYMBOL);
                        this.state = 7046;
                        this.wsNumCodepoints();
                        }
                    }

                    }
                    break;
                case 2:
                    {
                    this.state = 7049;
                    this.match(MySQLParser.AS_SYMBOL);
                    this.state = 7050;
                    this.match(MySQLParser.BINARY_SYMBOL);
                    this.state = 7051;
                    this.wsNumCodepoints();
                    }
                    break;
                case 3:
                    {
                    this.state = 7052;
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.state = 7053;
                    this.ulong_number();
                    this.state = 7054;
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.state = 7055;
                    this.ulong_number();
                    this.state = 7056;
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.state = 7057;
                    this.ulong_number();
                    }
                    break;
                }
                this.state = 7061;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case 53:
                this.enterOuterAlt(localContext, 53);
                {
                this.state = 7063;
                this.geometryFunction();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public returningType(): ReturningTypeContext {
        let localContext = new ReturningTypeContext(this.context, this.state);
        this.enterRule(localContext, 962, MySQLParser.RULE_returningType);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7066;
            this.match(MySQLParser.RETURNING_SYMBOL);
            this.state = 7067;
            this.castType();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public geometryFunction(): GeometryFunctionContext {
        let localContext = new GeometryFunctionContext(this.context, this.state);
        this.enterRule(localContext, 964, MySQLParser.RULE_geometryFunction);
        try {
            this.state = 7092;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.GEOMETRYCOLLECTION_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7069;
                this.match(MySQLParser.GEOMETRYCOLLECTION_SYMBOL);
                this.state = 7070;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 7072;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 834, this.context) ) {
                case 1:
                    {
                    this.state = 7071;
                    this.exprList();
                    }
                    break;
                }
                this.state = 7074;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case MySQLParser.LINESTRING_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7075;
                this.match(MySQLParser.LINESTRING_SYMBOL);
                this.state = 7076;
                this.exprListWithParentheses();
                }
                break;
            case MySQLParser.MULTILINESTRING_SYMBOL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7077;
                this.match(MySQLParser.MULTILINESTRING_SYMBOL);
                this.state = 7078;
                this.exprListWithParentheses();
                }
                break;
            case MySQLParser.MULTIPOINT_SYMBOL:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 7079;
                this.match(MySQLParser.MULTIPOINT_SYMBOL);
                this.state = 7080;
                this.exprListWithParentheses();
                }
                break;
            case MySQLParser.MULTIPOLYGON_SYMBOL:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 7081;
                this.match(MySQLParser.MULTIPOLYGON_SYMBOL);
                this.state = 7082;
                this.exprListWithParentheses();
                }
                break;
            case MySQLParser.POINT_SYMBOL:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 7083;
                this.match(MySQLParser.POINT_SYMBOL);
                this.state = 7084;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 7085;
                this.expr(0);
                this.state = 7086;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 7087;
                this.expr(0);
                this.state = 7088;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case MySQLParser.POLYGON_SYMBOL:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 7090;
                this.match(MySQLParser.POLYGON_SYMBOL);
                this.state = 7091;
                this.exprListWithParentheses();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public timeFunctionParameters(): TimeFunctionParametersContext {
        let localContext = new TimeFunctionParametersContext(this.context, this.state);
        this.enterRule(localContext, 966, MySQLParser.RULE_timeFunctionParameters);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7094;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 7096;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 3) {
                {
                this.state = 7095;
                this.fractionalPrecision();
                }
            }

            this.state = 7098;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fractionalPrecision(): FractionalPrecisionContext {
        let localContext = new FractionalPrecisionContext(this.context, this.state);
        this.enterRule(localContext, 968, MySQLParser.RULE_fractionalPrecision);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7100;
            this.match(MySQLParser.INT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public weightStringLevels(): WeightStringLevelsContext {
        let localContext = new WeightStringLevelsContext(this.context, this.state);
        this.enterRule(localContext, 970, MySQLParser.RULE_weightStringLevels);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7102;
            this.match(MySQLParser.LEVEL_SYMBOL);
            this.state = 7115;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 838, this.context) ) {
            case 1:
                {
                this.state = 7103;
                this.real_ulong_number();
                this.state = 7104;
                this.match(MySQLParser.MINUS_OPERATOR);
                this.state = 7105;
                this.real_ulong_number();
                }
                break;
            case 2:
                {
                this.state = 7107;
                this.weightStringLevelListItem();
                this.state = 7112;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 29) {
                    {
                    {
                    this.state = 7108;
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.state = 7109;
                    this.weightStringLevelListItem();
                    }
                    }
                    this.state = 7114;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public weightStringLevelListItem(): WeightStringLevelListItemContext {
        let localContext = new WeightStringLevelListItemContext(this.context, this.state);
        this.enterRule(localContext, 972, MySQLParser.RULE_weightStringLevelListItem);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7117;
            this.real_ulong_number();
            this.state = 7123;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.ASC_SYMBOL:
            case MySQLParser.DESC_SYMBOL:
                {
                this.state = 7118;
                _la = this.tokenStream.LA(1);
                if(!(_la === 64 || _la === 172)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 7120;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 493) {
                    {
                    this.state = 7119;
                    this.match(MySQLParser.REVERSE_SYMBOL);
                    }
                }

                }
                break;
            case MySQLParser.REVERSE_SYMBOL:
                {
                this.state = 7122;
                this.match(MySQLParser.REVERSE_SYMBOL);
                }
                break;
            case MySQLParser.EOF:
            case MySQLParser.COMMA_SYMBOL:
                break;
            default:
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dateTimeTtype(): DateTimeTtypeContext {
        let localContext = new DateTimeTtypeContext(this.context, this.state);
        this.enterRule(localContext, 974, MySQLParser.RULE_dateTimeTtype);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7125;
            _la = this.tokenStream.LA(1);
            if(!(_la === 154 || _la === 157 || _la === 592 || _la === 595)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public trimFunction(): TrimFunctionContext {
        let localContext = new TrimFunctionContext(this.context, this.state);
        this.enterRule(localContext, 976, MySQLParser.RULE_trimFunction);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7127;
            this.match(MySQLParser.TRIM_SYMBOL);
            this.state = 7128;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 7152;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 845, this.context) ) {
            case 1:
                {
                this.state = 7129;
                this.expr(0);
                this.state = 7132;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 235) {
                    {
                    this.state = 7130;
                    this.match(MySQLParser.FROM_SYMBOL);
                    this.state = 7131;
                    this.expr(0);
                    }
                }

                }
                break;
            case 2:
                {
                this.state = 7134;
                this.match(MySQLParser.LEADING_SYMBOL);
                this.state = 7136;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 842, this.context) ) {
                case 1:
                    {
                    this.state = 7135;
                    this.expr(0);
                    }
                    break;
                }
                this.state = 7138;
                this.match(MySQLParser.FROM_SYMBOL);
                this.state = 7139;
                this.expr(0);
                }
                break;
            case 3:
                {
                this.state = 7140;
                this.match(MySQLParser.TRAILING_SYMBOL);
                this.state = 7142;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 843, this.context) ) {
                case 1:
                    {
                    this.state = 7141;
                    this.expr(0);
                    }
                    break;
                }
                this.state = 7144;
                this.match(MySQLParser.FROM_SYMBOL);
                this.state = 7145;
                this.expr(0);
                }
                break;
            case 4:
                {
                this.state = 7146;
                this.match(MySQLParser.BOTH_SYMBOL);
                this.state = 7148;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 844, this.context) ) {
                case 1:
                    {
                    this.state = 7147;
                    this.expr(0);
                    }
                    break;
                }
                this.state = 7150;
                this.match(MySQLParser.FROM_SYMBOL);
                this.state = 7151;
                this.expr(0);
                }
                break;
            }
            this.state = 7154;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public substringFunction(): SubstringFunctionContext {
        let localContext = new SubstringFunctionContext(this.context, this.state);
        this.enterRule(localContext, 978, MySQLParser.RULE_substringFunction);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7156;
            this.match(MySQLParser.SUBSTRING_SYMBOL);
            this.state = 7157;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 7158;
            this.expr(0);
            this.state = 7171;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.COMMA_SYMBOL:
                {
                this.state = 7159;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 7160;
                this.expr(0);
                this.state = 7163;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 29) {
                    {
                    this.state = 7161;
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.state = 7162;
                    this.expr(0);
                    }
                }

                }
                break;
            case MySQLParser.FROM_SYMBOL:
                {
                this.state = 7165;
                this.match(MySQLParser.FROM_SYMBOL);
                this.state = 7166;
                this.expr(0);
                this.state = 7169;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 232) {
                    {
                    this.state = 7167;
                    this.match(MySQLParser.FOR_SYMBOL);
                    this.state = 7168;
                    this.expr(0);
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 7173;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionCall(): FunctionCallContext {
        let localContext = new FunctionCallContext(this.context, this.state);
        this.enterRule(localContext, 980, MySQLParser.RULE_functionCall);
        try {
            this.state = 7189;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 851, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7175;
                this.pureIdentifier();
                this.state = 7176;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 7178;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 849, this.context) ) {
                case 1:
                    {
                    this.state = 7177;
                    this.udfExprList();
                    }
                    break;
                }
                this.state = 7180;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7182;
                this.qualifiedIdentifier();
                this.state = 7183;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 7185;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 850, this.context) ) {
                case 1:
                    {
                    this.state = 7184;
                    this.exprList();
                    }
                    break;
                }
                this.state = 7187;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public udfExprList(): UdfExprListContext {
        let localContext = new UdfExprListContext(this.context, this.state);
        this.enterRule(localContext, 982, MySQLParser.RULE_udfExprList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7191;
            this.udfExpr();
            this.state = 7196;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 29) {
                {
                {
                this.state = 7192;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 7193;
                this.udfExpr();
                }
                }
                this.state = 7198;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public udfExpr(): UdfExprContext {
        let localContext = new UdfExprContext(this.context, this.state);
        this.enterRule(localContext, 984, MySQLParser.RULE_udfExpr);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7199;
            this.expr(0);
            this.state = 7201;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 853, this.context) ) {
            case 1:
                {
                this.state = 7200;
                this.selectAlias();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public userVariable(): UserVariableContext {
        let localContext = new UserVariableContext(this.context, this.state);
        this.enterRule(localContext, 986, MySQLParser.RULE_userVariable);
        try {
            this.state = 7206;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.AT_SIGN_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7203;
                this.match(MySQLParser.AT_SIGN_SYMBOL);
                this.state = 7204;
                this.textOrIdentifier();
                }
                break;
            case MySQLParser.AT_TEXT_SUFFIX:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7205;
                this.match(MySQLParser.AT_TEXT_SUFFIX);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public inExpressionUserVariableAssignment(): InExpressionUserVariableAssignmentContext {
        let localContext = new InExpressionUserVariableAssignmentContext(this.context, this.state);
        this.enterRule(localContext, 988, MySQLParser.RULE_inExpressionUserVariableAssignment);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7208;
            this.userVariable();
            this.state = 7209;
            this.match(MySQLParser.ASSIGN_OPERATOR);
            this.state = 7210;
            this.expr(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rvalueSystemOrUserVariable(): RvalueSystemOrUserVariableContext {
        let localContext = new RvalueSystemOrUserVariableContext(this.context, this.state);
        this.enterRule(localContext, 990, MySQLParser.RULE_rvalueSystemOrUserVariable);
        try {
            this.state = 7218;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.AT_SIGN_SYMBOL:
            case MySQLParser.AT_TEXT_SUFFIX:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7212;
                this.userVariable();
                }
                break;
            case MySQLParser.AT_AT_SIGN_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7213;
                this.match(MySQLParser.AT_AT_SIGN_SYMBOL);
                this.state = 7215;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 855, this.context) ) {
                case 1:
                    {
                    this.state = 7214;
                    this.rvalueSystemVariableType();
                    }
                    break;
                }
                this.state = 7217;
                this.rvalueSystemVariable();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lvalueVariable(): LvalueVariableContext {
        let localContext = new LvalueVariableContext(this.context, this.state);
        this.enterRule(localContext, 992, MySQLParser.RULE_lvalueVariable);
        let _la: number;
        try {
            this.state = 7233;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 860, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7229;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 859, this.context) ) {
                case 1:
                    {
                    this.state = 7220;
                    this.identifier();
                    this.state = 7222;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 28) {
                        {
                        this.state = 7221;
                        this.dotIdentifier();
                        }
                    }

                    }
                    break;
                case 2:
                    {
                    this.state = 7224;
                    if (!(this.serverVersion >= 80017)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80017");
                    }
                    this.state = 7225;
                    this.lValueIdentifier();
                    this.state = 7227;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 28) {
                        {
                        this.state = 7226;
                        this.dotIdentifier();
                        }
                    }

                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7231;
                this.match(MySQLParser.DEFAULT_SYMBOL);
                this.state = 7232;
                this.dotIdentifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rvalueSystemVariable(): RvalueSystemVariableContext {
        let localContext = new RvalueSystemVariableContext(this.context, this.state);
        this.enterRule(localContext, 994, MySQLParser.RULE_rvalueSystemVariable);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7235;
            this.textOrIdentifier();
            this.state = 7237;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 861, this.context) ) {
            case 1:
                {
                this.state = 7236;
                this.dotIdentifier();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public whenExpression(): WhenExpressionContext {
        let localContext = new WhenExpressionContext(this.context, this.state);
        this.enterRule(localContext, 996, MySQLParser.RULE_whenExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7239;
            this.match(MySQLParser.WHEN_SYMBOL);
            this.state = 7240;
            this.expr(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public thenExpression(): ThenExpressionContext {
        let localContext = new ThenExpressionContext(this.context, this.state);
        this.enterRule(localContext, 998, MySQLParser.RULE_thenExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7242;
            this.match(MySQLParser.THEN_SYMBOL);
            this.state = 7243;
            this.expr(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public elseExpression(): ElseExpressionContext {
        let localContext = new ElseExpressionContext(this.context, this.state);
        this.enterRule(localContext, 1000, MySQLParser.RULE_elseExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7245;
            this.match(MySQLParser.ELSE_SYMBOL);
            this.state = 7246;
            this.expr(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public castType(): CastTypeContext {
        let localContext = new CastTypeContext(this.context, this.state);
        this.enterRule(localContext, 1002, MySQLParser.RULE_castType);
        let _la: number;
        try {
            this.state = 7296;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 872, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7248;
                this.match(MySQLParser.BINARY_SYMBOL);
                this.state = 7250;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 862, this.context) ) {
                case 1:
                    {
                    this.state = 7249;
                    this.fieldLength();
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7252;
                this.match(MySQLParser.CHAR_SYMBOL);
                this.state = 7254;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 863, this.context) ) {
                case 1:
                    {
                    this.state = 7253;
                    this.fieldLength();
                    }
                    break;
                }
                this.state = 7257;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 864, this.context) ) {
                case 1:
                    {
                    this.state = 7256;
                    this.charsetWithOptBinary();
                    }
                    break;
                }
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7259;
                this.nchar();
                this.state = 7261;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 865, this.context) ) {
                case 1:
                    {
                    this.state = 7260;
                    this.fieldLength();
                    }
                    break;
                }
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 7263;
                this.match(MySQLParser.SIGNED_SYMBOL);
                this.state = 7265;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 866, this.context) ) {
                case 1:
                    {
                    this.state = 7264;
                    this.match(MySQLParser.INT_SYMBOL);
                    }
                    break;
                }
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 7267;
                this.match(MySQLParser.UNSIGNED_SYMBOL);
                this.state = 7269;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 867, this.context) ) {
                case 1:
                    {
                    this.state = 7268;
                    this.match(MySQLParser.INT_SYMBOL);
                    }
                    break;
                }
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 7271;
                this.match(MySQLParser.DATE_SYMBOL);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 7272;
                if (!(this.serverVersion >= 80024)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80024");
                }
                this.state = 7273;
                this.match(MySQLParser.YEAR_SYMBOL);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 7274;
                this.match(MySQLParser.TIME_SYMBOL);
                this.state = 7276;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 868, this.context) ) {
                case 1:
                    {
                    this.state = 7275;
                    this.typeDatetimePrecision();
                    }
                    break;
                }
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 7278;
                this.match(MySQLParser.DATETIME_SYMBOL);
                this.state = 7280;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 869, this.context) ) {
                case 1:
                    {
                    this.state = 7279;
                    this.typeDatetimePrecision();
                    }
                    break;
                }
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 7282;
                this.match(MySQLParser.DECIMAL_SYMBOL);
                this.state = 7284;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 870, this.context) ) {
                case 1:
                    {
                    this.state = 7283;
                    this.floatOptions();
                    }
                    break;
                }
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 7286;
                this.match(MySQLParser.JSON_SYMBOL);
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 7287;
                if (!(this.serverVersion >= 80017)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80017");
                }
                this.state = 7288;
                this.realType();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 7289;
                if (!(this.serverVersion >= 80017)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80017");
                }
                this.state = 7290;
                this.match(MySQLParser.FLOAT_SYMBOL);
                this.state = 7292;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 871, this.context) ) {
                case 1:
                    {
                    this.state = 7291;
                    this.standardFloatOptions();
                    }
                    break;
                }
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 7294;
                if (!(this.serverVersion >= 80027)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80027");
                }
                this.state = 7295;
                _la = this.tokenStream.LA(1);
                if(!(_la === 243 || _la === 309 || ((((_la - 374)) & ~0x1F) === 0 && ((1 << (_la - 374)) & 7) !== 0) || _la === 429 || _la === 430)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public exprList(): ExprListContext {
        let localContext = new ExprListContext(this.context, this.state);
        this.enterRule(localContext, 1004, MySQLParser.RULE_exprList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7298;
            this.expr(0);
            this.state = 7303;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 29) {
                {
                {
                this.state = 7299;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 7300;
                this.expr(0);
                }
                }
                this.state = 7305;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public charset(): CharsetContext {
        let localContext = new CharsetContext(this.context, this.state);
        this.enterRule(localContext, 1006, MySQLParser.RULE_charset);
        try {
            this.state = 7309;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.CHAR_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7306;
                this.match(MySQLParser.CHAR_SYMBOL);
                this.state = 7307;
                this.match(MySQLParser.SET_SYMBOL);
                }
                break;
            case MySQLParser.CHARSET_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7308;
                this.match(MySQLParser.CHARSET_SYMBOL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public notRule(): NotRuleContext {
        let localContext = new NotRuleContext(this.context, this.state);
        this.enterRule(localContext, 1008, MySQLParser.RULE_notRule);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7311;
            _la = this.tokenStream.LA(1);
            if(!(_la === 1 || _la === 390)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public not2Rule(): Not2RuleContext {
        let localContext = new Not2RuleContext(this.context, this.state);
        this.enterRule(localContext, 1010, MySQLParser.RULE_not2Rule);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7313;
            _la = this.tokenStream.LA(1);
            if(!(_la === 1 || _la === 19)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public interval(): IntervalContext {
        let localContext = new IntervalContext(this.context, this.state);
        this.enterRule(localContext, 1012, MySQLParser.RULE_interval);
        let _la: number;
        try {
            this.state = 7317;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.DAY_SYMBOL:
            case MySQLParser.HOUR_SYMBOL:
            case MySQLParser.MICROSECOND_SYMBOL:
            case MySQLParser.MINUTE_SYMBOL:
            case MySQLParser.MONTH_SYMBOL:
            case MySQLParser.QUARTER_SYMBOL:
            case MySQLParser.SECOND_SYMBOL:
            case MySQLParser.WEEK_SYMBOL:
            case MySQLParser.YEAR_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7315;
                this.intervalTimeStamp();
                }
                break;
            case MySQLParser.DAY_HOUR_SYMBOL:
            case MySQLParser.DAY_MICROSECOND_SYMBOL:
            case MySQLParser.DAY_MINUTE_SYMBOL:
            case MySQLParser.DAY_SECOND_SYMBOL:
            case MySQLParser.HOUR_MICROSECOND_SYMBOL:
            case MySQLParser.HOUR_MINUTE_SYMBOL:
            case MySQLParser.HOUR_SECOND_SYMBOL:
            case MySQLParser.MINUTE_MICROSECOND_SYMBOL:
            case MySQLParser.MINUTE_SECOND_SYMBOL:
            case MySQLParser.SECOND_MICROSECOND_SYMBOL:
            case MySQLParser.YEAR_MONTH_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7316;
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & 15) !== 0) || ((((_la - 258)) & ~0x1F) === 0 && ((1 << (_la - 258)) & 7) !== 0) || _la === 364 || _la === 365 || _la === 508 || _la === 663)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public intervalTimeStamp(): IntervalTimeStampContext {
        let localContext = new IntervalTimeStampContext(this.context, this.state);
        this.enterRule(localContext, 1014, MySQLParser.RULE_intervalTimeStamp);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7319;
            _la = this.tokenStream.LA(1);
            if(!(_la === 162 || _la === 261 || ((((_la - 361)) & ~0x1F) === 0 && ((1 << (_la - 361)) & 4129) !== 0) || _la === 447 || _la === 509 || _la === 648 || _la === 664)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public exprListWithParentheses(): ExprListWithParenthesesContext {
        let localContext = new ExprListWithParenthesesContext(this.context, this.state);
        this.enterRule(localContext, 1016, MySQLParser.RULE_exprListWithParentheses);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7321;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 7322;
            this.exprList();
            this.state = 7323;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public exprWithParentheses(): ExprWithParenthesesContext {
        let localContext = new ExprWithParenthesesContext(this.context, this.state);
        this.enterRule(localContext, 1018, MySQLParser.RULE_exprWithParentheses);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7325;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 7326;
            this.expr(0);
            this.state = 7327;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simpleExprWithParentheses(): SimpleExprWithParenthesesContext {
        let localContext = new SimpleExprWithParenthesesContext(this.context, this.state);
        this.enterRule(localContext, 1020, MySQLParser.RULE_simpleExprWithParentheses);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7329;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 7330;
            this.simpleExpr(0);
            this.state = 7331;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public orderList(): OrderListContext {
        let localContext = new OrderListContext(this.context, this.state);
        this.enterRule(localContext, 1022, MySQLParser.RULE_orderList);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7333;
            this.orderExpression();
            this.state = 7338;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 876, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 7334;
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.state = 7335;
                    this.orderExpression();
                    }
                    }
                }
                this.state = 7340;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 876, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public orderExpression(): OrderExpressionContext {
        let localContext = new OrderExpressionContext(this.context, this.state);
        this.enterRule(localContext, 1024, MySQLParser.RULE_orderExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7341;
            this.expr(0);
            this.state = 7343;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 877, this.context) ) {
            case 1:
                {
                this.state = 7342;
                this.direction();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupList(): GroupListContext {
        let localContext = new GroupListContext(this.context, this.state);
        this.enterRule(localContext, 1026, MySQLParser.RULE_groupList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7345;
            this.groupingExpression();
            this.state = 7350;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 29) {
                {
                {
                this.state = 7346;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 7347;
                this.groupingExpression();
                }
                }
                this.state = 7352;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupingExpression(): GroupingExpressionContext {
        let localContext = new GroupingExpressionContext(this.context, this.state);
        this.enterRule(localContext, 1028, MySQLParser.RULE_groupingExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7353;
            this.expr(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public channel(): ChannelContext {
        let localContext = new ChannelContext(this.context, this.state);
        this.enterRule(localContext, 1030, MySQLParser.RULE_channel);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7355;
            this.match(MySQLParser.FOR_SYMBOL);
            this.state = 7356;
            this.match(MySQLParser.CHANNEL_SYMBOL);
            this.state = 7357;
            this.textStringNoLinebreak();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public compoundStatement(): CompoundStatementContext {
        let localContext = new CompoundStatementContext(this.context, this.state);
        this.enterRule(localContext, 1032, MySQLParser.RULE_compoundStatement);
        try {
            this.state = 7372;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 879, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7359;
                this.simpleStatement();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7360;
                this.returnStatement();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7361;
                this.ifStatement();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 7362;
                this.caseStatement();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 7363;
                this.labeledBlock();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 7364;
                this.unlabeledBlock();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 7365;
                this.labeledControl();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 7366;
                this.unlabeledControl();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 7367;
                this.leaveStatement();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 7368;
                this.iterateStatement();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 7369;
                this.cursorOpen();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 7370;
                this.cursorFetch();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 7371;
                this.cursorClose();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public returnStatement(): ReturnStatementContext {
        let localContext = new ReturnStatementContext(this.context, this.state);
        this.enterRule(localContext, 1034, MySQLParser.RULE_returnStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7374;
            this.match(MySQLParser.RETURN_SYMBOL);
            this.state = 7375;
            this.expr(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ifStatement(): IfStatementContext {
        let localContext = new IfStatementContext(this.context, this.state);
        this.enterRule(localContext, 1036, MySQLParser.RULE_ifStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7377;
            this.match(MySQLParser.IF_SYMBOL);
            this.state = 7378;
            this.ifBody();
            this.state = 7379;
            this.match(MySQLParser.END_SYMBOL);
            this.state = 7380;
            this.match(MySQLParser.IF_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ifBody(): IfBodyContext {
        let localContext = new IfBodyContext(this.context, this.state);
        this.enterRule(localContext, 1038, MySQLParser.RULE_ifBody);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7382;
            this.expr(0);
            this.state = 7383;
            this.thenStatement();
            this.state = 7388;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.ELSEIF_SYMBOL:
                {
                this.state = 7384;
                this.match(MySQLParser.ELSEIF_SYMBOL);
                this.state = 7385;
                this.ifBody();
                }
                break;
            case MySQLParser.ELSE_SYMBOL:
                {
                this.state = 7386;
                this.match(MySQLParser.ELSE_SYMBOL);
                this.state = 7387;
                this.compoundStatementList();
                }
                break;
            case MySQLParser.END_SYMBOL:
                break;
            default:
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public thenStatement(): ThenStatementContext {
        let localContext = new ThenStatementContext(this.context, this.state);
        this.enterRule(localContext, 1040, MySQLParser.RULE_thenStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7390;
            this.match(MySQLParser.THEN_SYMBOL);
            this.state = 7391;
            this.compoundStatementList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public compoundStatementList(): CompoundStatementListContext {
        let localContext = new CompoundStatementListContext(this.context, this.state);
        this.enterRule(localContext, 1042, MySQLParser.RULE_compoundStatementList);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7396;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    {
                    this.state = 7393;
                    this.compoundStatement();
                    this.state = 7394;
                    this.match(MySQLParser.SEMICOLON_SYMBOL);
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 7398;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 881, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public caseStatement(): CaseStatementContext {
        let localContext = new CaseStatementContext(this.context, this.state);
        this.enterRule(localContext, 1044, MySQLParser.RULE_caseStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7400;
            this.match(MySQLParser.CASE_SYMBOL);
            this.state = 7402;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 882, this.context) ) {
            case 1:
                {
                this.state = 7401;
                this.expr(0);
                }
                break;
            }
            this.state = 7407;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 7404;
                this.whenExpression();
                this.state = 7405;
                this.thenStatement();
                }
                }
                this.state = 7409;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 650);
            this.state = 7412;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 190) {
                {
                this.state = 7411;
                this.elseStatement();
                }
            }

            this.state = 7414;
            this.match(MySQLParser.END_SYMBOL);
            this.state = 7415;
            this.match(MySQLParser.CASE_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public elseStatement(): ElseStatementContext {
        let localContext = new ElseStatementContext(this.context, this.state);
        this.enterRule(localContext, 1046, MySQLParser.RULE_elseStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7417;
            this.match(MySQLParser.ELSE_SYMBOL);
            this.state = 7418;
            this.compoundStatementList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public labeledBlock(): LabeledBlockContext {
        let localContext = new LabeledBlockContext(this.context, this.state);
        this.enterRule(localContext, 1048, MySQLParser.RULE_labeledBlock);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7420;
            this.label();
            this.state = 7421;
            this.beginEndBlock();
            this.state = 7423;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 885, this.context) ) {
            case 1:
                {
                this.state = 7422;
                this.labelRef();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unlabeledBlock(): UnlabeledBlockContext {
        let localContext = new UnlabeledBlockContext(this.context, this.state);
        this.enterRule(localContext, 1050, MySQLParser.RULE_unlabeledBlock);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7425;
            this.beginEndBlock();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public label(): LabelContext {
        let localContext = new LabelContext(this.context, this.state);
        this.enterRule(localContext, 1052, MySQLParser.RULE_label);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7427;
            this.labelIdentifier();
            this.state = 7428;
            this.match(MySQLParser.COLON_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public beginEndBlock(): BeginEndBlockContext {
        let localContext = new BeginEndBlockContext(this.context, this.state);
        this.enterRule(localContext, 1054, MySQLParser.RULE_beginEndBlock);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7430;
            this.match(MySQLParser.BEGIN_SYMBOL);
            this.state = 7432;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 886, this.context) ) {
            case 1:
                {
                this.state = 7431;
                this.spDeclarations();
                }
                break;
            }
            this.state = 7435;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 887, this.context) ) {
            case 1:
                {
                this.state = 7434;
                this.compoundStatementList();
                }
                break;
            }
            this.state = 7437;
            this.match(MySQLParser.END_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public labeledControl(): LabeledControlContext {
        let localContext = new LabeledControlContext(this.context, this.state);
        this.enterRule(localContext, 1056, MySQLParser.RULE_labeledControl);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7439;
            this.label();
            this.state = 7440;
            this.unlabeledControl();
            this.state = 7442;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 888, this.context) ) {
            case 1:
                {
                this.state = 7441;
                this.labelRef();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unlabeledControl(): UnlabeledControlContext {
        let localContext = new UnlabeledControlContext(this.context, this.state);
        this.enterRule(localContext, 1058, MySQLParser.RULE_unlabeledControl);
        try {
            this.state = 7447;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.LOOP_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7444;
                this.loopBlock();
                }
                break;
            case MySQLParser.WHILE_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7445;
                this.whileDoBlock();
                }
                break;
            case MySQLParser.REPEAT_SYMBOL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7446;
                this.repeatUntilBlock();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public loopBlock(): LoopBlockContext {
        let localContext = new LoopBlockContext(this.context, this.state);
        this.enterRule(localContext, 1060, MySQLParser.RULE_loopBlock);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7449;
            this.match(MySQLParser.LOOP_SYMBOL);
            this.state = 7450;
            this.compoundStatementList();
            this.state = 7451;
            this.match(MySQLParser.END_SYMBOL);
            this.state = 7452;
            this.match(MySQLParser.LOOP_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public whileDoBlock(): WhileDoBlockContext {
        let localContext = new WhileDoBlockContext(this.context, this.state);
        this.enterRule(localContext, 1062, MySQLParser.RULE_whileDoBlock);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7454;
            this.match(MySQLParser.WHILE_SYMBOL);
            this.state = 7455;
            this.expr(0);
            this.state = 7456;
            this.match(MySQLParser.DO_SYMBOL);
            this.state = 7457;
            this.compoundStatementList();
            this.state = 7458;
            this.match(MySQLParser.END_SYMBOL);
            this.state = 7459;
            this.match(MySQLParser.WHILE_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public repeatUntilBlock(): RepeatUntilBlockContext {
        let localContext = new RepeatUntilBlockContext(this.context, this.state);
        this.enterRule(localContext, 1064, MySQLParser.RULE_repeatUntilBlock);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7461;
            this.match(MySQLParser.REPEAT_SYMBOL);
            this.state = 7462;
            this.compoundStatementList();
            this.state = 7463;
            this.match(MySQLParser.UNTIL_SYMBOL);
            this.state = 7464;
            this.expr(0);
            this.state = 7465;
            this.match(MySQLParser.END_SYMBOL);
            this.state = 7466;
            this.match(MySQLParser.REPEAT_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public spDeclarations(): SpDeclarationsContext {
        let localContext = new SpDeclarationsContext(this.context, this.state);
        this.enterRule(localContext, 1066, MySQLParser.RULE_spDeclarations);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7471;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    {
                    this.state = 7468;
                    this.spDeclaration();
                    this.state = 7469;
                    this.match(MySQLParser.SEMICOLON_SYMBOL);
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 7473;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 890, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public spDeclaration(): SpDeclarationContext {
        let localContext = new SpDeclarationContext(this.context, this.state);
        this.enterRule(localContext, 1068, MySQLParser.RULE_spDeclaration);
        try {
            this.state = 7479;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 891, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7475;
                this.variableDeclaration();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7476;
                this.conditionDeclaration();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7477;
                this.handlerDeclaration();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 7478;
                this.cursorDeclaration();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public variableDeclaration(): VariableDeclarationContext {
        let localContext = new VariableDeclarationContext(this.context, this.state);
        this.enterRule(localContext, 1070, MySQLParser.RULE_variableDeclaration);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7481;
            this.match(MySQLParser.DECLARE_SYMBOL);
            this.state = 7482;
            this.identifierList();
            this.state = 7483;
            this.dataType();
            this.state = 7485;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 112) {
                {
                this.state = 7484;
                this.collate();
                }
            }

            this.state = 7489;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 166) {
                {
                this.state = 7487;
                this.match(MySQLParser.DEFAULT_SYMBOL);
                this.state = 7488;
                this.expr(0);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public conditionDeclaration(): ConditionDeclarationContext {
        let localContext = new ConditionDeclarationContext(this.context, this.state);
        this.enterRule(localContext, 1072, MySQLParser.RULE_conditionDeclaration);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7491;
            this.match(MySQLParser.DECLARE_SYMBOL);
            this.state = 7492;
            this.identifier();
            this.state = 7493;
            this.match(MySQLParser.CONDITION_SYMBOL);
            this.state = 7494;
            this.match(MySQLParser.FOR_SYMBOL);
            this.state = 7495;
            this.spCondition();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public spCondition(): SpConditionContext {
        let localContext = new SpConditionContext(this.context, this.state);
        this.enterRule(localContext, 1074, MySQLParser.RULE_spCondition);
        try {
            this.state = 7499;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.INT_NUMBER:
            case MySQLParser.LONG_NUMBER:
            case MySQLParser.ULONGLONG_NUMBER:
            case MySQLParser.HEX_NUMBER:
            case MySQLParser.DECIMAL_NUMBER:
            case MySQLParser.FLOAT_NUMBER:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7497;
                this.ulong_number();
                }
                break;
            case MySQLParser.SQLSTATE_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7498;
                this.sqlstate();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sqlstate(): SqlstateContext {
        let localContext = new SqlstateContext(this.context, this.state);
        this.enterRule(localContext, 1076, MySQLParser.RULE_sqlstate);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7501;
            this.match(MySQLParser.SQLSTATE_SYMBOL);
            this.state = 7503;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 895, this.context) ) {
            case 1:
                {
                this.state = 7502;
                this.match(MySQLParser.VALUE_SYMBOL);
                }
                break;
            }
            this.state = 7505;
            this.textLiteral();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public handlerDeclaration(): HandlerDeclarationContext {
        let localContext = new HandlerDeclarationContext(this.context, this.state);
        this.enterRule(localContext, 1078, MySQLParser.RULE_handlerDeclaration);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7507;
            this.match(MySQLParser.DECLARE_SYMBOL);
            this.state = 7508;
            _la = this.tokenStream.LA(1);
            if(!(_la === 135 || _la === 210 || _la === 614)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 7509;
            this.match(MySQLParser.HANDLER_SYMBOL);
            this.state = 7510;
            this.match(MySQLParser.FOR_SYMBOL);
            this.state = 7511;
            this.handlerCondition();
            this.state = 7516;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 896, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 7512;
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.state = 7513;
                    this.handlerCondition();
                    }
                    }
                }
                this.state = 7518;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 896, this.context);
            }
            this.state = 7519;
            this.compoundStatement();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public handlerCondition(): HandlerConditionContext {
        let localContext = new HandlerConditionContext(this.context, this.state);
        this.enterRule(localContext, 1080, MySQLParser.RULE_handlerCondition);
        try {
            this.state = 7528;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 897, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7521;
                this.spCondition();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7522;
                this.identifier();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7523;
                this.match(MySQLParser.SQLWARNING_SYMBOL);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 7524;
                this.notRule();
                this.state = 7525;
                this.match(MySQLParser.FOUND_SYMBOL);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 7527;
                this.match(MySQLParser.SQLEXCEPTION_SYMBOL);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public cursorDeclaration(): CursorDeclarationContext {
        let localContext = new CursorDeclarationContext(this.context, this.state);
        this.enterRule(localContext, 1082, MySQLParser.RULE_cursorDeclaration);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7530;
            this.match(MySQLParser.DECLARE_SYMBOL);
            this.state = 7531;
            this.identifier();
            this.state = 7532;
            this.match(MySQLParser.CURSOR_SYMBOL);
            this.state = 7533;
            this.match(MySQLParser.FOR_SYMBOL);
            this.state = 7534;
            this.selectStatement();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public iterateStatement(): IterateStatementContext {
        let localContext = new IterateStatementContext(this.context, this.state);
        this.enterRule(localContext, 1084, MySQLParser.RULE_iterateStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7536;
            this.match(MySQLParser.ITERATE_SYMBOL);
            this.state = 7537;
            this.labelRef();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public leaveStatement(): LeaveStatementContext {
        let localContext = new LeaveStatementContext(this.context, this.state);
        this.enterRule(localContext, 1086, MySQLParser.RULE_leaveStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7539;
            this.match(MySQLParser.LEAVE_SYMBOL);
            this.state = 7540;
            this.labelRef();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public getDiagnosticsStatement(): GetDiagnosticsStatementContext {
        let localContext = new GetDiagnosticsStatementContext(this.context, this.state);
        this.enterRule(localContext, 1088, MySQLParser.RULE_getDiagnosticsStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7542;
            this.match(MySQLParser.GET_SYMBOL);
            this.state = 7544;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 143 || _la === 550) {
                {
                this.state = 7543;
                _la = this.tokenStream.LA(1);
                if(!(_la === 143 || _la === 550)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 7546;
            this.match(MySQLParser.DIAGNOSTICS_SYMBOL);
            this.state = 7565;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 901, this.context) ) {
            case 1:
                {
                this.state = 7547;
                this.statementInformationItem();
                this.state = 7552;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 29) {
                    {
                    {
                    this.state = 7548;
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.state = 7549;
                    this.statementInformationItem();
                    }
                    }
                    this.state = 7554;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 2:
                {
                this.state = 7555;
                this.match(MySQLParser.CONDITION_SYMBOL);
                this.state = 7556;
                this.signalAllowedExpr();
                this.state = 7557;
                this.conditionInformationItem();
                this.state = 7562;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 29) {
                    {
                    {
                    this.state = 7558;
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.state = 7559;
                    this.conditionInformationItem();
                    }
                    }
                    this.state = 7564;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public signalAllowedExpr(): SignalAllowedExprContext {
        let localContext = new SignalAllowedExprContext(this.context, this.state);
        this.enterRule(localContext, 1090, MySQLParser.RULE_signalAllowedExpr);
        try {
            this.state = 7570;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 902, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7567;
                this.literal();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7568;
                this.rvalueSystemOrUserVariable();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7569;
                this.qualifiedIdentifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public statementInformationItem(): StatementInformationItemContext {
        let localContext = new StatementInformationItemContext(this.context, this.state);
        this.enterRule(localContext, 1092, MySQLParser.RULE_statementInformationItem);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7574;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 903, this.context) ) {
            case 1:
                {
                this.state = 7572;
                this.userVariable();
                }
                break;
            case 2:
                {
                this.state = 7573;
                this.identifier();
                }
                break;
            }
            this.state = 7576;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 7577;
            _la = this.tokenStream.LA(1);
            if(!(_la === 396 || _la === 501)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public conditionInformationItem(): ConditionInformationItemContext {
        let localContext = new ConditionInformationItemContext(this.context, this.state);
        this.enterRule(localContext, 1094, MySQLParser.RULE_conditionInformationItem);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7581;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 904, this.context) ) {
            case 1:
                {
                this.state = 7579;
                this.userVariable();
                }
                break;
            case 2:
                {
                this.state = 7580;
                this.identifier();
                }
                break;
            }
            this.state = 7583;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 7586;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.CATALOG_NAME_SYMBOL:
            case MySQLParser.CLASS_ORIGIN_SYMBOL:
            case MySQLParser.COLUMN_NAME_SYMBOL:
            case MySQLParser.CONSTRAINT_CATALOG_SYMBOL:
            case MySQLParser.CONSTRAINT_NAME_SYMBOL:
            case MySQLParser.CONSTRAINT_SCHEMA_SYMBOL:
            case MySQLParser.CURSOR_NAME_SYMBOL:
            case MySQLParser.MESSAGE_TEXT_SYMBOL:
            case MySQLParser.MYSQL_ERRNO_SYMBOL:
            case MySQLParser.SCHEMA_NAME_SYMBOL:
            case MySQLParser.SUBCLASS_ORIGIN_SYMBOL:
            case MySQLParser.TABLE_NAME_SYMBOL:
                {
                this.state = 7584;
                this.signalInformationItemName();
                }
                break;
            case MySQLParser.RETURNED_SQLSTATE_SYMBOL:
                {
                this.state = 7585;
                this.match(MySQLParser.RETURNED_SQLSTATE_SYMBOL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public signalInformationItemName(): SignalInformationItemNameContext {
        let localContext = new SignalInformationItemNameContext(this.context, this.state);
        this.enterRule(localContext, 1096, MySQLParser.RULE_signalInformationItemName);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7588;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 97)) & ~0x1F) === 0 && ((1 << (_la - 97)) & 525313) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & 262151) !== 0) || _la === 360 || _la === 378 || _la === 507 || _la === 567 || _la === 585)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public signalStatement(): SignalStatementContext {
        let localContext = new SignalStatementContext(this.context, this.state);
        this.enterRule(localContext, 1098, MySQLParser.RULE_signalStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7590;
            this.match(MySQLParser.SIGNAL_SYMBOL);
            this.state = 7593;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 906, this.context) ) {
            case 1:
                {
                this.state = 7591;
                this.identifier();
                }
                break;
            case 2:
                {
                this.state = 7592;
                this.sqlstate();
                }
                break;
            }
            this.state = 7604;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 519) {
                {
                this.state = 7595;
                this.match(MySQLParser.SET_SYMBOL);
                this.state = 7596;
                this.signalInformationItem();
                this.state = 7601;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 29) {
                    {
                    {
                    this.state = 7597;
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.state = 7598;
                    this.signalInformationItem();
                    }
                    }
                    this.state = 7603;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public resignalStatement(): ResignalStatementContext {
        let localContext = new ResignalStatementContext(this.context, this.state);
        this.enterRule(localContext, 1100, MySQLParser.RULE_resignalStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7606;
            this.match(MySQLParser.RESIGNAL_SYMBOL);
            this.state = 7609;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 909, this.context) ) {
            case 1:
                {
                this.state = 7607;
                this.identifier();
                }
                break;
            case 2:
                {
                this.state = 7608;
                this.sqlstate();
                }
                break;
            }
            this.state = 7620;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 519) {
                {
                this.state = 7611;
                this.match(MySQLParser.SET_SYMBOL);
                this.state = 7612;
                this.signalInformationItem();
                this.state = 7617;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 29) {
                    {
                    {
                    this.state = 7613;
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.state = 7614;
                    this.signalInformationItem();
                    }
                    }
                    this.state = 7619;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public signalInformationItem(): SignalInformationItemContext {
        let localContext = new SignalInformationItemContext(this.context, this.state);
        this.enterRule(localContext, 1102, MySQLParser.RULE_signalInformationItem);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7622;
            this.signalInformationItemName();
            this.state = 7623;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 7624;
            this.signalAllowedExpr();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public cursorOpen(): CursorOpenContext {
        let localContext = new CursorOpenContext(this.context, this.state);
        this.enterRule(localContext, 1104, MySQLParser.RULE_cursorOpen);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7626;
            this.match(MySQLParser.OPEN_SYMBOL);
            this.state = 7627;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public cursorClose(): CursorCloseContext {
        let localContext = new CursorCloseContext(this.context, this.state);
        this.enterRule(localContext, 1106, MySQLParser.RULE_cursorClose);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7629;
            this.match(MySQLParser.CLOSE_SYMBOL);
            this.state = 7630;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public cursorFetch(): CursorFetchContext {
        let localContext = new CursorFetchContext(this.context, this.state);
        this.enterRule(localContext, 1108, MySQLParser.RULE_cursorFetch);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7632;
            this.match(MySQLParser.FETCH_SYMBOL);
            this.state = 7637;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 913, this.context) ) {
            case 1:
                {
                this.state = 7634;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 387) {
                    {
                    this.state = 7633;
                    this.match(MySQLParser.NEXT_SYMBOL);
                    }
                }

                this.state = 7636;
                this.match(MySQLParser.FROM_SYMBOL);
                }
                break;
            }
            this.state = 7639;
            this.identifier();
            this.state = 7640;
            this.match(MySQLParser.INTO_SYMBOL);
            this.state = 7641;
            this.identifierList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public schedule(): ScheduleContext {
        let localContext = new ScheduleContext(this.context, this.state);
        this.enterRule(localContext, 1110, MySQLParser.RULE_schedule);
        let _la: number;
        try {
            this.state = 7656;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.AT_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7643;
                this.match(MySQLParser.AT_SYMBOL);
                this.state = 7644;
                this.expr(0);
                }
                break;
            case MySQLParser.EVERY_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7645;
                this.match(MySQLParser.EVERY_SYMBOL);
                this.state = 7646;
                this.expr(0);
                this.state = 7647;
                this.interval();
                this.state = 7650;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 552) {
                    {
                    this.state = 7648;
                    this.match(MySQLParser.STARTS_SYMBOL);
                    this.state = 7649;
                    this.expr(0);
                    }
                }

                this.state = 7654;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 196) {
                    {
                    this.state = 7652;
                    this.match(MySQLParser.ENDS_SYMBOL);
                    this.state = 7653;
                    this.expr(0);
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnDefinition(): ColumnDefinitionContext {
        let localContext = new ColumnDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 1112, MySQLParser.RULE_columnDefinition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7658;
            this.columnName();
            this.state = 7659;
            this.fieldDefinition();
            this.state = 7661;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 917, this.context) ) {
            case 1:
                {
                this.state = 7660;
                this.checkOrReferences();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public checkOrReferences(): CheckOrReferencesContext {
        let localContext = new CheckOrReferencesContext(this.context, this.state);
        this.enterRule(localContext, 1114, MySQLParser.RULE_checkOrReferences);
        try {
            this.state = 7666;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 918, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7663;
                if (!(this.serverVersion < 80016)) {
                    throw this.createFailedPredicateException("this.serverVersion < 80016");
                }
                this.state = 7664;
                this.checkConstraint();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7665;
                this.references();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public checkConstraint(): CheckConstraintContext {
        let localContext = new CheckConstraintContext(this.context, this.state);
        this.enterRule(localContext, 1116, MySQLParser.RULE_checkConstraint);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7668;
            this.match(MySQLParser.CHECK_SYMBOL);
            this.state = 7669;
            this.exprWithParentheses();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public constraintEnforcement(): ConstraintEnforcementContext {
        let localContext = new ConstraintEnforcementContext(this.context, this.state);
        this.enterRule(localContext, 1118, MySQLParser.RULE_constraintEnforcement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7671;
            if (!( this.serverVersion >= 80017)) {
                throw this.createFailedPredicateException(" this.serverVersion >= 80017");
            }
            this.state = 7673;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 390) {
                {
                this.state = 7672;
                this.match(MySQLParser.NOT_SYMBOL);
                }
            }

            this.state = 7675;
            this.match(MySQLParser.ENFORCED_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableConstraintDef(): TableConstraintDefContext {
        let localContext = new TableConstraintDefContext(this.context, this.state);
        this.enterRule(localContext, 1120, MySQLParser.RULE_tableConstraintDef);
        let _la: number;
        try {
            let alternative: number;
            this.state = 7751;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.INDEX_SYMBOL:
            case MySQLParser.KEY_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7677;
                localContext._type_ = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 268 || _la === 295)) {
                    localContext._type_ = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 7679;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 920, this.context) ) {
                case 1:
                    {
                    this.state = 7678;
                    this.indexNameAndType();
                    }
                    break;
                }
                this.state = 7681;
                this.keyListWithExpression();
                this.state = 7685;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 921, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 7682;
                        this.indexOption();
                        }
                        }
                    }
                    this.state = 7687;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 921, this.context);
                }
                }
                break;
            case MySQLParser.FULLTEXT_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7688;
                localContext._type_ = this.match(MySQLParser.FULLTEXT_SYMBOL);
                this.state = 7690;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 922, this.context) ) {
                case 1:
                    {
                    this.state = 7689;
                    this.keyOrIndex();
                    }
                    break;
                }
                this.state = 7693;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 923, this.context) ) {
                case 1:
                    {
                    this.state = 7692;
                    this.indexName();
                    }
                    break;
                }
                this.state = 7695;
                this.keyListWithExpression();
                this.state = 7699;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 924, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 7696;
                        this.fulltextIndexOption();
                        }
                        }
                    }
                    this.state = 7701;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 924, this.context);
                }
                }
                break;
            case MySQLParser.SPATIAL_SYMBOL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7702;
                localContext._type_ = this.match(MySQLParser.SPATIAL_SYMBOL);
                this.state = 7704;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 925, this.context) ) {
                case 1:
                    {
                    this.state = 7703;
                    this.keyOrIndex();
                    }
                    break;
                }
                this.state = 7707;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 926, this.context) ) {
                case 1:
                    {
                    this.state = 7706;
                    this.indexName();
                    }
                    break;
                }
                this.state = 7709;
                this.keyListWithExpression();
                this.state = 7713;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 927, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 7710;
                        this.spatialIndexOption();
                        }
                        }
                    }
                    this.state = 7715;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 927, this.context);
                }
                }
                break;
            case MySQLParser.CHECK_SYMBOL:
            case MySQLParser.CONSTRAINT_SYMBOL:
            case MySQLParser.FOREIGN_SYMBOL:
            case MySQLParser.PRIMARY_SYMBOL:
            case MySQLParser.UNIQUE_SYMBOL:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 7717;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 129) {
                    {
                    this.state = 7716;
                    this.constraintName();
                    }
                }

                this.state = 7749;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySQLParser.PRIMARY_SYMBOL:
                case MySQLParser.UNIQUE_SYMBOL:
                    {
                    this.state = 7725;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case MySQLParser.PRIMARY_SYMBOL:
                        {
                        this.state = 7719;
                        localContext._type_ = this.match(MySQLParser.PRIMARY_SYMBOL);
                        this.state = 7720;
                        this.match(MySQLParser.KEY_SYMBOL);
                        }
                        break;
                    case MySQLParser.UNIQUE_SYMBOL:
                        {
                        this.state = 7721;
                        localContext._type_ = this.match(MySQLParser.UNIQUE_SYMBOL);
                        this.state = 7723;
                        this.errorHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this.tokenStream, 929, this.context) ) {
                        case 1:
                            {
                            this.state = 7722;
                            this.keyOrIndex();
                            }
                            break;
                        }
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 7728;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 931, this.context) ) {
                    case 1:
                        {
                        this.state = 7727;
                        this.indexNameAndType();
                        }
                        break;
                    }
                    this.state = 7730;
                    this.keyListWithExpression();
                    this.state = 7734;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 932, this.context);
                    while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                        if (alternative === 1) {
                            {
                            {
                            this.state = 7731;
                            this.indexOption();
                            }
                            }
                        }
                        this.state = 7736;
                        this.errorHandler.sync(this);
                        alternative = this.interpreter.adaptivePredict(this.tokenStream, 932, this.context);
                    }
                    }
                    break;
                case MySQLParser.FOREIGN_SYMBOL:
                    {
                    this.state = 7737;
                    localContext._type_ = this.match(MySQLParser.FOREIGN_SYMBOL);
                    this.state = 7738;
                    this.match(MySQLParser.KEY_SYMBOL);
                    this.state = 7740;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 933, this.context) ) {
                    case 1:
                        {
                        this.state = 7739;
                        this.indexName();
                        }
                        break;
                    }
                    this.state = 7742;
                    this.keyList();
                    this.state = 7743;
                    this.references();
                    }
                    break;
                case MySQLParser.CHECK_SYMBOL:
                    {
                    this.state = 7745;
                    this.checkConstraint();
                    this.state = 7747;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 934, this.context) ) {
                    case 1:
                        {
                        this.state = 7746;
                        this.constraintEnforcement();
                        }
                        break;
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public constraintName(): ConstraintNameContext {
        let localContext = new ConstraintNameContext(this.context, this.state);
        this.enterRule(localContext, 1122, MySQLParser.RULE_constraintName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7753;
            this.match(MySQLParser.CONSTRAINT_SYMBOL);
            this.state = 7755;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 937, this.context) ) {
            case 1:
                {
                this.state = 7754;
                this.identifier();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fieldDefinition(): FieldDefinitionContext {
        let localContext = new FieldDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 1124, MySQLParser.RULE_fieldDefinition);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7757;
            this.dataType();
            this.state = 7782;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 943, this.context) ) {
            case 1:
                {
                this.state = 7761;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 938, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 7758;
                        this.columnAttribute();
                        }
                        }
                    }
                    this.state = 7763;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 938, this.context);
                }
                }
                break;
            case 2:
                {
                this.state = 7765;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 112) {
                    {
                    this.state = 7764;
                    this.collate();
                    }
                }

                this.state = 7769;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 241) {
                    {
                    this.state = 7767;
                    this.match(MySQLParser.GENERATED_SYMBOL);
                    this.state = 7768;
                    this.match(MySQLParser.ALWAYS_SYMBOL);
                    }
                }

                this.state = 7771;
                this.match(MySQLParser.AS_SYMBOL);
                this.state = 7772;
                this.exprWithParentheses();
                this.state = 7774;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 941, this.context) ) {
                case 1:
                    {
                    this.state = 7773;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 564 || _la === 645)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                }
                this.state = 7779;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 942, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 7776;
                        this.columnAttribute();
                        }
                        }
                    }
                    this.state = 7781;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 942, this.context);
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnAttribute(): ColumnAttributeContext {
        let localContext = new ColumnAttributeContext(this.context, this.state);
        this.enterRule(localContext, 1126, MySQLParser.RULE_columnAttribute);
        let _la: number;
        try {
            this.state = 7845;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 952, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7785;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 390) {
                    {
                    this.state = 7784;
                    this.match(MySQLParser.NOT_SYMBOL);
                    }
                }

                this.state = 7787;
                this.nullLiteral();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7788;
                if (!(this.serverVersion >= 80014)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80014");
                }
                this.state = 7789;
                this.match(MySQLParser.NOT_SYMBOL);
                this.state = 7790;
                this.match(MySQLParser.SECONDARY_SYMBOL);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7791;
                localContext._value = this.match(MySQLParser.DEFAULT_SYMBOL);
                this.state = 7795;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 945, this.context) ) {
                case 1:
                    {
                    this.state = 7792;
                    this.nowOrSignedLiteral();
                    }
                    break;
                case 2:
                    {
                    this.state = 7793;
                    if (!(this.serverVersion >= 80013)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80013");
                    }
                    this.state = 7794;
                    this.exprWithParentheses();
                    }
                    break;
                }
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 7797;
                localContext._value = this.match(MySQLParser.ON_SYMBOL);
                this.state = 7798;
                this.match(MySQLParser.UPDATE_SYMBOL);
                this.state = 7799;
                this.match(MySQLParser.NOW_SYMBOL);
                this.state = 7801;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 946, this.context) ) {
                case 1:
                    {
                    this.state = 7800;
                    this.timeFunctionParameters();
                    }
                    break;
                }
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 7803;
                localContext._value = this.match(MySQLParser.AUTO_INCREMENT_SYMBOL);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 7804;
                localContext._value = this.match(MySQLParser.SERIAL_SYMBOL);
                this.state = 7805;
                this.match(MySQLParser.DEFAULT_SYMBOL);
                this.state = 7806;
                this.match(MySQLParser.VALUE_SYMBOL);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 7808;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 438) {
                    {
                    this.state = 7807;
                    this.match(MySQLParser.PRIMARY_SYMBOL);
                    }
                }

                this.state = 7810;
                localContext._value = this.match(MySQLParser.KEY_SYMBOL);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 7811;
                localContext._value = this.match(MySQLParser.UNIQUE_SYMBOL);
                this.state = 7813;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 948, this.context) ) {
                case 1:
                    {
                    this.state = 7812;
                    this.match(MySQLParser.KEY_SYMBOL);
                    }
                    break;
                }
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 7815;
                localContext._value = this.match(MySQLParser.COMMENT_SYMBOL);
                this.state = 7816;
                this.textLiteral();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 7817;
                this.collate();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 7818;
                localContext._value = this.match(MySQLParser.COLUMN_FORMAT_SYMBOL);
                this.state = 7819;
                this.columnFormat();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 7820;
                localContext._value = this.match(MySQLParser.STORAGE_SYMBOL);
                this.state = 7821;
                this.storageMedia();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 7822;
                localContext._value = this.match(MySQLParser.SRID_SYMBOL);
                this.state = 7823;
                this.real_ulonglong_number();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 7824;
                if (!(this.serverVersion >= 80017)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80017");
                }
                this.state = 7826;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 129) {
                    {
                    this.state = 7825;
                    this.constraintName();
                    }
                }

                this.state = 7828;
                this.checkConstraint();
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 7829;
                if (!(this.serverVersion >= 80017)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80017");
                }
                this.state = 7830;
                this.constraintEnforcement();
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 7831;
                if (!(this.serverVersion >= 80024)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80024");
                }
                this.state = 7832;
                localContext._value = this.match(MySQLParser.ENGINE_ATTRIBUTE_SYMBOL);
                this.state = 7834;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 950, this.context) ) {
                case 1:
                    {
                    this.state = 7833;
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                    break;
                }
                this.state = 7836;
                this.jsonAttribute();
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 7837;
                if (!(this.serverVersion >= 80024)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80024");
                }
                this.state = 7838;
                localContext._value = this.match(MySQLParser.SECONDARY_ENGINE_ATTRIBUTE_SYMBOL);
                this.state = 7840;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 951, this.context) ) {
                case 1:
                    {
                    this.state = 7839;
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                    break;
                }
                this.state = 7842;
                this.jsonAttribute();
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 7843;
                if (!(this.serverVersion >= 80024)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80024");
                }
                this.state = 7844;
                this.visibility();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnFormat(): ColumnFormatContext {
        let localContext = new ColumnFormatContext(this.context, this.state);
        this.enterRule(localContext, 1128, MySQLParser.RULE_columnFormat);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7847;
            _la = this.tokenStream.LA(1);
            if(!(_la === 166 || _la === 188 || _la === 226)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public storageMedia(): StorageMediaContext {
        let localContext = new StorageMediaContext(this.context, this.state);
        this.enterRule(localContext, 1130, MySQLParser.RULE_storageMedia);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7849;
            _la = this.tokenStream.LA(1);
            if(!(_la === 166 || _la === 179 || _la === 358)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public now(): NowContext {
        let localContext = new NowContext(this.context, this.state);
        this.enterRule(localContext, 1132, MySQLParser.RULE_now);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7851;
            this.match(MySQLParser.NOW_SYMBOL);
            this.state = 7852;
            this.functionDatetimePrecision();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nowOrSignedLiteral(): NowOrSignedLiteralContext {
        let localContext = new NowOrSignedLiteralContext(this.context, this.state);
        this.enterRule(localContext, 1134, MySQLParser.RULE_nowOrSignedLiteral);
        try {
            this.state = 7856;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 953, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7854;
                this.now();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7855;
                this.signedLiteralOrNull();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public gcolAttribute(): GcolAttributeContext {
        let localContext = new GcolAttributeContext(this.context, this.state);
        this.enterRule(localContext, 1136, MySQLParser.RULE_gcolAttribute);
        let _la: number;
        try {
            this.state = 7872;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.UNIQUE_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7858;
                this.match(MySQLParser.UNIQUE_SYMBOL);
                this.state = 7860;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 295) {
                    {
                    this.state = 7859;
                    this.match(MySQLParser.KEY_SYMBOL);
                    }
                }

                }
                break;
            case MySQLParser.COMMENT_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7862;
                this.match(MySQLParser.COMMENT_SYMBOL);
                this.state = 7863;
                this.textString();
                }
                break;
            case MySQLParser.NOT2_SYMBOL:
            case MySQLParser.NOT_SYMBOL:
            case MySQLParser.NULL_SYMBOL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7865;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1 || _la === 390) {
                    {
                    this.state = 7864;
                    this.notRule();
                    }
                }

                this.state = 7867;
                this.match(MySQLParser.NULL_SYMBOL);
                }
                break;
            case MySQLParser.KEY_SYMBOL:
            case MySQLParser.PRIMARY_SYMBOL:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 7869;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 438) {
                    {
                    this.state = 7868;
                    this.match(MySQLParser.PRIMARY_SYMBOL);
                    }
                }

                this.state = 7871;
                this.match(MySQLParser.KEY_SYMBOL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public references(): ReferencesContext {
        let localContext = new ReferencesContext(this.context, this.state);
        this.enterRule(localContext, 1138, MySQLParser.RULE_references);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7874;
            this.match(MySQLParser.REFERENCES_SYMBOL);
            this.state = 7875;
            this.tableRef();
            this.state = 7877;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 32) {
                {
                this.state = 7876;
                this.identifierListWithParentheses();
                }
            }

            this.state = 7881;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 345) {
                {
                this.state = 7879;
                this.match(MySQLParser.MATCH_SYMBOL);
                this.state = 7880;
                localContext._match = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 236 || _la === 420 || _la === 525)) {
                    localContext._match = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 7899;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 962, this.context) ) {
            case 1:
                {
                this.state = 7883;
                this.match(MySQLParser.ON_SYMBOL);
                this.state = 7884;
                localContext._option = this.match(MySQLParser.UPDATE_SYMBOL);
                this.state = 7885;
                this.deleteOption();
                this.state = 7889;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 401) {
                    {
                    this.state = 7886;
                    this.match(MySQLParser.ON_SYMBOL);
                    this.state = 7887;
                    this.match(MySQLParser.DELETE_SYMBOL);
                    this.state = 7888;
                    this.deleteOption();
                    }
                }

                }
                break;
            case 2:
                {
                this.state = 7891;
                this.match(MySQLParser.ON_SYMBOL);
                this.state = 7892;
                localContext._option = this.match(MySQLParser.DELETE_SYMBOL);
                this.state = 7893;
                this.deleteOption();
                this.state = 7897;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 401) {
                    {
                    this.state = 7894;
                    this.match(MySQLParser.ON_SYMBOL);
                    this.state = 7895;
                    this.match(MySQLParser.UPDATE_SYMBOL);
                    this.state = 7896;
                    this.deleteOption();
                    }
                }

                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public deleteOption(): DeleteOptionContext {
        let localContext = new DeleteOptionContext(this.context, this.state);
        this.enterRule(localContext, 1140, MySQLParser.RULE_deleteOption);
        let _la: number;
        try {
            this.state = 7908;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 963, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7901;
                _la = this.tokenStream.LA(1);
                if(!(_la === 93 || _la === 488)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7902;
                this.match(MySQLParser.SET_SYMBOL);
                this.state = 7903;
                this.nullLiteral();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7904;
                this.match(MySQLParser.SET_SYMBOL);
                this.state = 7905;
                this.match(MySQLParser.DEFAULT_SYMBOL);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 7906;
                this.match(MySQLParser.NO_SYMBOL);
                this.state = 7907;
                this.match(MySQLParser.ACTION_SYMBOL);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyList(): KeyListContext {
        let localContext = new KeyListContext(this.context, this.state);
        this.enterRule(localContext, 1142, MySQLParser.RULE_keyList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7910;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 7911;
            this.keyPart();
            this.state = 7916;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 29) {
                {
                {
                this.state = 7912;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 7913;
                this.keyPart();
                }
                }
                this.state = 7918;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 7919;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyPart(): KeyPartContext {
        let localContext = new KeyPartContext(this.context, this.state);
        this.enterRule(localContext, 1144, MySQLParser.RULE_keyPart);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7921;
            this.identifier();
            this.state = 7923;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 32) {
                {
                this.state = 7922;
                this.fieldLength();
                }
            }

            this.state = 7926;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 64 || _la === 172) {
                {
                this.state = 7925;
                this.direction();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyListWithExpression(): KeyListWithExpressionContext {
        let localContext = new KeyListWithExpressionContext(this.context, this.state);
        this.enterRule(localContext, 1146, MySQLParser.RULE_keyListWithExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7928;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 7929;
            this.keyPartOrExpression();
            this.state = 7934;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 29) {
                {
                {
                this.state = 7930;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 7931;
                this.keyPartOrExpression();
                }
                }
                this.state = 7936;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 7937;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyPartOrExpression(): KeyPartOrExpressionContext {
        let localContext = new KeyPartOrExpressionContext(this.context, this.state);
        this.enterRule(localContext, 1148, MySQLParser.RULE_keyPartOrExpression);
        let _la: number;
        try {
            this.state = 7945;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 969, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7939;
                this.keyPart();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7940;
                if (!(this.serverVersion >= 80013)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80013");
                }
                this.state = 7941;
                this.exprWithParentheses();
                this.state = 7943;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 64 || _la === 172) {
                    {
                    this.state = 7942;
                    this.direction();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public indexType(): IndexTypeContext {
        let localContext = new IndexTypeContext(this.context, this.state);
        this.enterRule(localContext, 1150, MySQLParser.RULE_indexType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7947;
            localContext._algorithm = this.tokenStream.LT(1);
            _la = this.tokenStream.LA(1);
            if(!(_la === 88 || _la === 252 || _la === 504)) {
                localContext._algorithm = this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public indexOption(): IndexOptionContext {
        let localContext = new IndexOptionContext(this.context, this.state);
        this.enterRule(localContext, 1152, MySQLParser.RULE_indexOption);
        try {
            this.state = 7951;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 970, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7949;
                this.commonIndexOption();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7950;
                this.indexTypeClause();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public commonIndexOption(): CommonIndexOptionContext {
        let localContext = new CommonIndexOptionContext(this.context, this.state);
        this.enterRule(localContext, 1154, MySQLParser.RULE_commonIndexOption);
        let _la: number;
        try {
            this.state = 7973;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 974, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7953;
                this.match(MySQLParser.KEY_BLOCK_SIZE_SYMBOL);
                this.state = 7955;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 6) {
                    {
                    this.state = 7954;
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                }

                this.state = 7957;
                this.ulong_number();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7958;
                this.match(MySQLParser.COMMENT_SYMBOL);
                this.state = 7959;
                this.textLiteral();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7960;
                this.visibility();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 7961;
                if (!(this.serverVersion >= 80024)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80024");
                }
                this.state = 7962;
                this.match(MySQLParser.ENGINE_ATTRIBUTE_SYMBOL);
                this.state = 7964;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 972, this.context) ) {
                case 1:
                    {
                    this.state = 7963;
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                    break;
                }
                this.state = 7966;
                this.jsonAttribute();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 7967;
                if (!(this.serverVersion >= 80024)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80024");
                }
                this.state = 7968;
                this.match(MySQLParser.SECONDARY_ENGINE_ATTRIBUTE_SYMBOL);
                this.state = 7970;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 973, this.context) ) {
                case 1:
                    {
                    this.state = 7969;
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                    break;
                }
                this.state = 7972;
                this.jsonAttribute();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public visibility(): VisibilityContext {
        let localContext = new VisibilityContext(this.context, this.state);
        this.enterRule(localContext, 1156, MySQLParser.RULE_visibility);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7975;
            _la = this.tokenStream.LA(1);
            if(!(_la === 669 || _la === 670)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public indexTypeClause(): IndexTypeClauseContext {
        let localContext = new IndexTypeClauseContext(this.context, this.state);
        this.enterRule(localContext, 1158, MySQLParser.RULE_indexTypeClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7977;
            _la = this.tokenStream.LA(1);
            if(!(_la === 608 || _la === 630)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 7978;
            this.indexType();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fulltextIndexOption(): FulltextIndexOptionContext {
        let localContext = new FulltextIndexOptionContext(this.context, this.state);
        this.enterRule(localContext, 1160, MySQLParser.RULE_fulltextIndexOption);
        try {
            this.state = 7984;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 975, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7980;
                this.commonIndexOption();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7981;
                this.match(MySQLParser.WITH_SYMBOL);
                this.state = 7982;
                this.match(MySQLParser.PARSER_SYMBOL);
                this.state = 7983;
                this.identifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public spatialIndexOption(): SpatialIndexOptionContext {
        let localContext = new SpatialIndexOptionContext(this.context, this.state);
        this.enterRule(localContext, 1162, MySQLParser.RULE_spatialIndexOption);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7986;
            this.commonIndexOption();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dataTypeDefinition(): DataTypeDefinitionContext {
        let localContext = new DataTypeDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 1164, MySQLParser.RULE_dataTypeDefinition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7988;
            this.dataType();
            this.state = 7989;
            this.match(MySQLParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dataType(): DataTypeContext {
        let localContext = new DataTypeContext(this.context, this.state);
        this.enterRule(localContext, 1166, MySQLParser.RULE_dataType);
        let _la: number;
        try {
            this.state = 8137;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1009, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7991;
                localContext._type_ = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 76 || _la === 280 || _la === 355 || _la === 528 || _la === 597)) {
                    localContext._type_ = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 7993;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 976, this.context) ) {
                case 1:
                    {
                    this.state = 7992;
                    this.fieldLength();
                    }
                    break;
                }
                this.state = 7996;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 977, this.context) ) {
                case 1:
                    {
                    this.state = 7995;
                    this.fieldOptions();
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8003;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySQLParser.REAL_SYMBOL:
                    {
                    this.state = 7998;
                    localContext._type_ = this.match(MySQLParser.REAL_SYMBOL);
                    }
                    break;
                case MySQLParser.DOUBLE_SYMBOL:
                    {
                    this.state = 7999;
                    localContext._type_ = this.match(MySQLParser.DOUBLE_SYMBOL);
                    this.state = 8001;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 978, this.context) ) {
                    case 1:
                        {
                        this.state = 8000;
                        this.match(MySQLParser.PRECISION_SYMBOL);
                        }
                        break;
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 8006;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 980, this.context) ) {
                case 1:
                    {
                    this.state = 8005;
                    this.precision();
                    }
                    break;
                }
                this.state = 8009;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 981, this.context) ) {
                case 1:
                    {
                    this.state = 8008;
                    this.fieldOptions();
                    }
                    break;
                }
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 8011;
                localContext._type_ = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 164 || _la === 226 || _la === 227 || _la === 397)) {
                    localContext._type_ = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 8013;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 982, this.context) ) {
                case 1:
                    {
                    this.state = 8012;
                    this.floatOptions();
                    }
                    break;
                }
                this.state = 8016;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 983, this.context) ) {
                case 1:
                    {
                    this.state = 8015;
                    this.fieldOptions();
                    }
                    break;
                }
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 8018;
                localContext._type_ = this.match(MySQLParser.BIT_SYMBOL);
                this.state = 8020;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 984, this.context) ) {
                case 1:
                    {
                    this.state = 8019;
                    this.fieldLength();
                    }
                    break;
                }
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 8022;
                localContext._type_ = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 85 || _la === 86)) {
                    localContext._type_ = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 8023;
                localContext._type_ = this.match(MySQLParser.CHAR_SYMBOL);
                this.state = 8025;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 985, this.context) ) {
                case 1:
                    {
                    this.state = 8024;
                    this.fieldLength();
                    }
                    break;
                }
                this.state = 8028;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 986, this.context) ) {
                case 1:
                    {
                    this.state = 8027;
                    this.charsetWithOptBinary();
                    }
                    break;
                }
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 8030;
                this.nchar();
                this.state = 8032;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 987, this.context) ) {
                case 1:
                    {
                    this.state = 8031;
                    this.fieldLength();
                    }
                    break;
                }
                this.state = 8035;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 988, this.context) ) {
                case 1:
                    {
                    this.state = 8034;
                    this.match(MySQLParser.BINARY_SYMBOL);
                    }
                    break;
                }
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 8037;
                localContext._type_ = this.match(MySQLParser.BINARY_SYMBOL);
                this.state = 8039;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 989, this.context) ) {
                case 1:
                    {
                    this.state = 8038;
                    this.fieldLength();
                    }
                    break;
                }
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 8044;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySQLParser.CHAR_SYMBOL:
                    {
                    this.state = 8041;
                    localContext._type_ = this.match(MySQLParser.CHAR_SYMBOL);
                    this.state = 8042;
                    this.match(MySQLParser.VARYING_SYMBOL);
                    }
                    break;
                case MySQLParser.VARCHAR_SYMBOL:
                    {
                    this.state = 8043;
                    localContext._type_ = this.match(MySQLParser.VARCHAR_SYMBOL);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 8046;
                this.fieldLength();
                this.state = 8048;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 991, this.context) ) {
                case 1:
                    {
                    this.state = 8047;
                    this.charsetWithOptBinary();
                    }
                    break;
                }
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 8060;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 992, this.context) ) {
                case 1:
                    {
                    this.state = 8050;
                    localContext._type_ = this.match(MySQLParser.NATIONAL_SYMBOL);
                    this.state = 8051;
                    this.match(MySQLParser.VARCHAR_SYMBOL);
                    }
                    break;
                case 2:
                    {
                    this.state = 8052;
                    localContext._type_ = this.match(MySQLParser.NVARCHAR_SYMBOL);
                    }
                    break;
                case 3:
                    {
                    this.state = 8053;
                    localContext._type_ = this.match(MySQLParser.NCHAR_SYMBOL);
                    this.state = 8054;
                    this.match(MySQLParser.VARCHAR_SYMBOL);
                    }
                    break;
                case 4:
                    {
                    this.state = 8055;
                    localContext._type_ = this.match(MySQLParser.NATIONAL_SYMBOL);
                    this.state = 8056;
                    this.match(MySQLParser.CHAR_SYMBOL);
                    this.state = 8057;
                    this.match(MySQLParser.VARYING_SYMBOL);
                    }
                    break;
                case 5:
                    {
                    this.state = 8058;
                    localContext._type_ = this.match(MySQLParser.NCHAR_SYMBOL);
                    this.state = 8059;
                    this.match(MySQLParser.VARYING_SYMBOL);
                    }
                    break;
                }
                this.state = 8062;
                this.fieldLength();
                this.state = 8064;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 993, this.context) ) {
                case 1:
                    {
                    this.state = 8063;
                    this.match(MySQLParser.BINARY_SYMBOL);
                    }
                    break;
                }
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 8066;
                localContext._type_ = this.match(MySQLParser.VARBINARY_SYMBOL);
                this.state = 8067;
                this.fieldLength();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 8068;
                localContext._type_ = this.match(MySQLParser.YEAR_SYMBOL);
                this.state = 8070;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 994, this.context) ) {
                case 1:
                    {
                    this.state = 8069;
                    this.fieldLength();
                    }
                    break;
                }
                this.state = 8073;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 995, this.context) ) {
                case 1:
                    {
                    this.state = 8072;
                    this.fieldOptions();
                    }
                    break;
                }
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 8075;
                localContext._type_ = this.match(MySQLParser.DATE_SYMBOL);
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 8076;
                localContext._type_ = this.match(MySQLParser.TIME_SYMBOL);
                this.state = 8078;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 996, this.context) ) {
                case 1:
                    {
                    this.state = 8077;
                    this.typeDatetimePrecision();
                    }
                    break;
                }
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 8080;
                localContext._type_ = this.match(MySQLParser.TIMESTAMP_SYMBOL);
                this.state = 8082;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 997, this.context) ) {
                case 1:
                    {
                    this.state = 8081;
                    this.typeDatetimePrecision();
                    }
                    break;
                }
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 8084;
                localContext._type_ = this.match(MySQLParser.DATETIME_SYMBOL);
                this.state = 8086;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 998, this.context) ) {
                case 1:
                    {
                    this.state = 8085;
                    this.typeDatetimePrecision();
                    }
                    break;
                }
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 8088;
                localContext._type_ = this.match(MySQLParser.TINYBLOB_SYMBOL);
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 8089;
                localContext._type_ = this.match(MySQLParser.BLOB_SYMBOL);
                this.state = 8091;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 999, this.context) ) {
                case 1:
                    {
                    this.state = 8090;
                    this.fieldLength();
                    }
                    break;
                }
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 8093;
                localContext._type_ = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 317 || _la === 354)) {
                    localContext._type_ = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 8094;
                localContext._type_ = this.match(MySQLParser.LONG_SYMBOL);
                this.state = 8095;
                this.match(MySQLParser.VARBINARY_SYMBOL);
                }
                break;
            case 21:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 8096;
                localContext._type_ = this.match(MySQLParser.LONG_SYMBOL);
                this.state = 8100;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1000, this.context) ) {
                case 1:
                    {
                    this.state = 8097;
                    this.match(MySQLParser.CHAR_SYMBOL);
                    this.state = 8098;
                    this.match(MySQLParser.VARYING_SYMBOL);
                    }
                    break;
                case 2:
                    {
                    this.state = 8099;
                    this.match(MySQLParser.VARCHAR_SYMBOL);
                    }
                    break;
                }
                this.state = 8103;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1001, this.context) ) {
                case 1:
                    {
                    this.state = 8102;
                    this.charsetWithOptBinary();
                    }
                    break;
                }
                }
                break;
            case 22:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 8105;
                localContext._type_ = this.match(MySQLParser.TINYTEXT_SYMBOL);
                this.state = 8107;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1002, this.context) ) {
                case 1:
                    {
                    this.state = 8106;
                    this.charsetWithOptBinary();
                    }
                    break;
                }
                }
                break;
            case 23:
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 8109;
                localContext._type_ = this.match(MySQLParser.TEXT_SYMBOL);
                this.state = 8111;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1003, this.context) ) {
                case 1:
                    {
                    this.state = 8110;
                    this.fieldLength();
                    }
                    break;
                }
                this.state = 8114;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1004, this.context) ) {
                case 1:
                    {
                    this.state = 8113;
                    this.charsetWithOptBinary();
                    }
                    break;
                }
                }
                break;
            case 24:
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 8116;
                localContext._type_ = this.match(MySQLParser.MEDIUMTEXT_SYMBOL);
                this.state = 8118;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1005, this.context) ) {
                case 1:
                    {
                    this.state = 8117;
                    this.charsetWithOptBinary();
                    }
                    break;
                }
                }
                break;
            case 25:
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 8120;
                localContext._type_ = this.match(MySQLParser.LONGTEXT_SYMBOL);
                this.state = 8122;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1006, this.context) ) {
                case 1:
                    {
                    this.state = 8121;
                    this.charsetWithOptBinary();
                    }
                    break;
                }
                }
                break;
            case 26:
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 8124;
                localContext._type_ = this.match(MySQLParser.ENUM_SYMBOL);
                this.state = 8125;
                this.stringList();
                this.state = 8127;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1007, this.context) ) {
                case 1:
                    {
                    this.state = 8126;
                    this.charsetWithOptBinary();
                    }
                    break;
                }
                }
                break;
            case 27:
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 8129;
                localContext._type_ = this.match(MySQLParser.SET_SYMBOL);
                this.state = 8130;
                this.stringList();
                this.state = 8132;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1008, this.context) ) {
                case 1:
                    {
                    this.state = 8131;
                    this.charsetWithOptBinary();
                    }
                    break;
                }
                }
                break;
            case 28:
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 8134;
                localContext._type_ = this.match(MySQLParser.SERIAL_SYMBOL);
                }
                break;
            case 29:
                this.enterOuterAlt(localContext, 29);
                {
                this.state = 8135;
                localContext._type_ = this.match(MySQLParser.JSON_SYMBOL);
                }
                break;
            case 30:
                this.enterOuterAlt(localContext, 30);
                {
                this.state = 8136;
                localContext._type_ = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 243 || _la === 244 || _la === 309 || ((((_la - 374)) & ~0x1F) === 0 && ((1 << (_la - 374)) & 7) !== 0) || _la === 429 || _la === 430)) {
                    localContext._type_ = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nchar(): NcharContext {
        let localContext = new NcharContext(this.context, this.state);
        this.enterRule(localContext, 1168, MySQLParser.RULE_nchar);
        try {
            this.state = 8142;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.NCHAR_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8139;
                localContext._type_ = this.match(MySQLParser.NCHAR_SYMBOL);
                }
                break;
            case MySQLParser.NATIONAL_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8140;
                localContext._type_ = this.match(MySQLParser.NATIONAL_SYMBOL);
                this.state = 8141;
                this.match(MySQLParser.CHAR_SYMBOL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public realType(): RealTypeContext {
        let localContext = new RealTypeContext(this.context, this.state);
        this.enterRule(localContext, 1170, MySQLParser.RULE_realType);
        try {
            this.state = 8149;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.REAL_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8144;
                localContext._type_ = this.match(MySQLParser.REAL_SYMBOL);
                }
                break;
            case MySQLParser.DOUBLE_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8145;
                localContext._type_ = this.match(MySQLParser.DOUBLE_SYMBOL);
                this.state = 8147;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1011, this.context) ) {
                case 1:
                    {
                    this.state = 8146;
                    this.match(MySQLParser.PRECISION_SYMBOL);
                    }
                    break;
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fieldLength(): FieldLengthContext {
        let localContext = new FieldLengthContext(this.context, this.state);
        this.enterRule(localContext, 1172, MySQLParser.RULE_fieldLength);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8151;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 8154;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1013, this.context) ) {
            case 1:
                {
                this.state = 8152;
                this.real_ulonglong_number();
                }
                break;
            case 2:
                {
                this.state = 8153;
                this.match(MySQLParser.DECIMAL_NUMBER);
                }
                break;
            }
            this.state = 8156;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fieldOptions(): FieldOptionsContext {
        let localContext = new FieldOptionsContext(this.context, this.state);
        this.enterRule(localContext, 1174, MySQLParser.RULE_fieldOptions);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8159;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    {
                    this.state = 8158;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 524 || _la === 621 || _la === 665)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 8161;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 1014, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public charsetWithOptBinary(): CharsetWithOptBinaryContext {
        let localContext = new CharsetWithOptBinaryContext(this.context, this.state);
        this.enterRule(localContext, 1176, MySQLParser.RULE_charsetWithOptBinary);
        try {
            this.state = 8177;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1017, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8163;
                this.ascii();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8164;
                this.unicode();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 8165;
                this.match(MySQLParser.BYTE_SYMBOL);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 8166;
                this.charset();
                this.state = 8167;
                this.charsetName();
                this.state = 8169;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1015, this.context) ) {
                case 1:
                    {
                    this.state = 8168;
                    this.match(MySQLParser.BINARY_SYMBOL);
                    }
                    break;
                }
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 8171;
                this.match(MySQLParser.BINARY_SYMBOL);
                this.state = 8175;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1016, this.context) ) {
                case 1:
                    {
                    this.state = 8172;
                    this.charset();
                    this.state = 8173;
                    this.charsetName();
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ascii(): AsciiContext {
        let localContext = new AsciiContext(this.context, this.state);
        this.enterRule(localContext, 1178, MySQLParser.RULE_ascii);
        try {
            this.state = 8185;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.ASCII_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8179;
                this.match(MySQLParser.ASCII_SYMBOL);
                this.state = 8181;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1018, this.context) ) {
                case 1:
                    {
                    this.state = 8180;
                    this.match(MySQLParser.BINARY_SYMBOL);
                    }
                    break;
                }
                }
                break;
            case MySQLParser.BINARY_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8183;
                this.match(MySQLParser.BINARY_SYMBOL);
                this.state = 8184;
                this.match(MySQLParser.ASCII_SYMBOL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unicode(): UnicodeContext {
        let localContext = new UnicodeContext(this.context, this.state);
        this.enterRule(localContext, 1180, MySQLParser.RULE_unicode);
        try {
            this.state = 8193;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.UNICODE_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8187;
                this.match(MySQLParser.UNICODE_SYMBOL);
                this.state = 8189;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1020, this.context) ) {
                case 1:
                    {
                    this.state = 8188;
                    this.match(MySQLParser.BINARY_SYMBOL);
                    }
                    break;
                }
                }
                break;
            case MySQLParser.BINARY_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8191;
                this.match(MySQLParser.BINARY_SYMBOL);
                this.state = 8192;
                this.match(MySQLParser.UNICODE_SYMBOL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public wsNumCodepoints(): WsNumCodepointsContext {
        let localContext = new WsNumCodepointsContext(this.context, this.state);
        this.enterRule(localContext, 1182, MySQLParser.RULE_wsNumCodepoints);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8195;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 8196;
            this.real_ulong_number();
            this.state = 8197;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public typeDatetimePrecision(): TypeDatetimePrecisionContext {
        let localContext = new TypeDatetimePrecisionContext(this.context, this.state);
        this.enterRule(localContext, 1184, MySQLParser.RULE_typeDatetimePrecision);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8199;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 8200;
            this.match(MySQLParser.INT_NUMBER);
            this.state = 8201;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionDatetimePrecision(): FunctionDatetimePrecisionContext {
        let localContext = new FunctionDatetimePrecisionContext(this.context, this.state);
        this.enterRule(localContext, 1186, MySQLParser.RULE_functionDatetimePrecision);
        try {
            this.state = 8208;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1022, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                // tslint:disable-next-line:no-empty
                {
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8204;
                this.parentheses();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 8205;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 8206;
                this.match(MySQLParser.INT_NUMBER);
                this.state = 8207;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public charsetName(): CharsetNameContext {
        let localContext = new CharsetNameContext(this.context, this.state);
        this.enterRule(localContext, 1188, MySQLParser.RULE_charsetName);
        try {
            this.state = 8214;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1023, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8210;
                this.textOrIdentifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8211;
                this.match(MySQLParser.BINARY_SYMBOL);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 8212;
                if (!(this.serverVersion < 80011)) {
                    throw this.createFailedPredicateException("this.serverVersion < 80011");
                }
                this.state = 8213;
                this.match(MySQLParser.DEFAULT_SYMBOL);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collationName(): CollationNameContext {
        let localContext = new CollationNameContext(this.context, this.state);
        this.enterRule(localContext, 1190, MySQLParser.RULE_collationName);
        try {
            this.state = 8221;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1024, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8216;
                this.textOrIdentifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8217;
                if (!(this.serverVersion < 80011)) {
                    throw this.createFailedPredicateException("this.serverVersion < 80011");
                }
                this.state = 8218;
                this.match(MySQLParser.DEFAULT_SYMBOL);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 8219;
                if (!(this.serverVersion >= 80018)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80018");
                }
                this.state = 8220;
                this.match(MySQLParser.BINARY_SYMBOL);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createTableOptions(): CreateTableOptionsContext {
        let localContext = new CreateTableOptionsContext(this.context, this.state);
        this.enterRule(localContext, 1192, MySQLParser.RULE_createTableOptions);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8223;
            this.createTableOption();
            this.state = 8230;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 1026, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 8225;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 1025, this.context) ) {
                    case 1:
                        {
                        this.state = 8224;
                        this.match(MySQLParser.COMMA_SYMBOL);
                        }
                        break;
                    }
                    this.state = 8227;
                    this.createTableOption();
                    }
                    }
                }
                this.state = 8232;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 1026, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createTableOptionsEtc(): CreateTableOptionsEtcContext {
        let localContext = new CreateTableOptionsEtcContext(this.context, this.state);
        this.enterRule(localContext, 1194, MySQLParser.RULE_createTableOptionsEtc);
        try {
            this.state = 8238;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1028, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8233;
                this.createTableOptions();
                this.state = 8235;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1027, this.context) ) {
                case 1:
                    {
                    this.state = 8234;
                    this.createPartitioningEtc();
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8237;
                this.createPartitioningEtc();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createPartitioningEtc(): CreatePartitioningEtcContext {
        let localContext = new CreatePartitioningEtcContext(this.context, this.state);
        this.enterRule(localContext, 1196, MySQLParser.RULE_createPartitioningEtc);
        try {
            this.state = 8245;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1030, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8240;
                this.partitionClause();
                this.state = 8242;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1029, this.context) ) {
                case 1:
                    {
                    this.state = 8241;
                    this.duplicateAsQe();
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8244;
                this.duplicateAsQe();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createTableOptionsSpaceSeparated(): CreateTableOptionsSpaceSeparatedContext {
        let localContext = new CreateTableOptionsSpaceSeparatedContext(this.context, this.state);
        this.enterRule(localContext, 1198, MySQLParser.RULE_createTableOptionsSpaceSeparated);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8248;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    {
                    this.state = 8247;
                    this.createTableOption();
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 8250;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 1031, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createTableOption(): CreateTableOptionContext {
        let localContext = new CreateTableOptionContext(this.context, this.state);
        this.enterRule(localContext, 1200, MySQLParser.RULE_createTableOption);
        let _la: number;
        try {
            this.state = 8392;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1057, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8252;
                localContext._option = this.match(MySQLParser.ENGINE_SYMBOL);
                this.state = 8254;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1032, this.context) ) {
                case 1:
                    {
                    this.state = 8253;
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                    break;
                }
                this.state = 8256;
                this.engineRef();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8257;
                if (!(this.serverVersion >= 80014)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80014");
                }
                this.state = 8258;
                localContext._option = this.match(MySQLParser.SECONDARY_ENGINE_SYMBOL);
                this.state = 8260;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1033, this.context) ) {
                case 1:
                    {
                    this.state = 8259;
                    this.equal();
                    }
                    break;
                }
                this.state = 8264;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1034, this.context) ) {
                case 1:
                    {
                    this.state = 8262;
                    this.match(MySQLParser.NULL_SYMBOL);
                    }
                    break;
                case 2:
                    {
                    this.state = 8263;
                    this.textOrIdentifier();
                    }
                    break;
                }
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 8266;
                localContext._option = this.match(MySQLParser.MAX_ROWS_SYMBOL);
                this.state = 8268;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 6) {
                    {
                    this.state = 8267;
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                }

                this.state = 8270;
                this.ulonglongNumber();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 8271;
                localContext._option = this.match(MySQLParser.MIN_ROWS_SYMBOL);
                this.state = 8273;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 6) {
                    {
                    this.state = 8272;
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                }

                this.state = 8275;
                this.ulonglongNumber();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 8276;
                localContext._option = this.match(MySQLParser.AVG_ROW_LENGTH_SYMBOL);
                this.state = 8278;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 6) {
                    {
                    this.state = 8277;
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                }

                this.state = 8280;
                this.ulonglongNumber();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 8281;
                localContext._option = this.match(MySQLParser.PASSWORD_SYMBOL);
                this.state = 8283;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1038, this.context) ) {
                case 1:
                    {
                    this.state = 8282;
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                    break;
                }
                this.state = 8285;
                this.textStringLiteral();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 8286;
                localContext._option = this.match(MySQLParser.COMMENT_SYMBOL);
                this.state = 8288;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1039, this.context) ) {
                case 1:
                    {
                    this.state = 8287;
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                    break;
                }
                this.state = 8290;
                this.textStringLiteral();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 8291;
                localContext._option = this.match(MySQLParser.COMPRESSION_SYMBOL);
                this.state = 8293;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1040, this.context) ) {
                case 1:
                    {
                    this.state = 8292;
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                    break;
                }
                this.state = 8295;
                this.textString();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 8296;
                localContext._option = this.match(MySQLParser.ENCRYPTION_SYMBOL);
                this.state = 8298;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1041, this.context) ) {
                case 1:
                    {
                    this.state = 8297;
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                    break;
                }
                this.state = 8300;
                this.textString();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 8301;
                localContext._option = this.match(MySQLParser.AUTO_INCREMENT_SYMBOL);
                this.state = 8303;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 6) {
                    {
                    this.state = 8302;
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                }

                this.state = 8305;
                this.ulonglongNumber();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 8306;
                localContext._option = this.match(MySQLParser.PACK_KEYS_SYMBOL);
                this.state = 8308;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 6) {
                    {
                    this.state = 8307;
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                }

                this.state = 8310;
                this.ternaryOption();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 8311;
                localContext._option = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 554)) & ~0x1F) === 0 && ((1 << (_la - 554)) & 7) !== 0))) {
                    localContext._option = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 8313;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 6) {
                    {
                    this.state = 8312;
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                }

                this.state = 8315;
                this.ternaryOption();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 8316;
                localContext._option = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 104 || _la === 584)) {
                    localContext._option = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 8318;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 6) {
                    {
                    this.state = 8317;
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                }

                this.state = 8320;
                this.ulong_number();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 8321;
                localContext._option = this.match(MySQLParser.DELAY_KEY_WRITE_SYMBOL);
                this.state = 8323;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 6) {
                    {
                    this.state = 8322;
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                }

                this.state = 8325;
                this.ulong_number();
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 8326;
                localContext._option = this.match(MySQLParser.ROW_FORMAT_SYMBOL);
                this.state = 8328;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 6) {
                    {
                    this.state = 8327;
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                }

                this.state = 8330;
                localContext._format = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 121 || _la === 123 || _la === 166 || _la === 188 || _la === 226 || _la === 459)) {
                    localContext._format = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 8331;
                localContext._option = this.match(MySQLParser.UNION_SYMBOL);
                this.state = 8333;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 6) {
                    {
                    this.state = 8332;
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                }

                this.state = 8335;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 8336;
                this.tableRefList();
                this.state = 8337;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 8339;
                this.defaultCharset();
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 8340;
                this.defaultCollation();
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 8341;
                localContext._option = this.match(MySQLParser.INSERT_METHOD_SYMBOL);
                this.state = 8343;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 6) {
                    {
                    this.state = 8342;
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                }

                this.state = 8345;
                localContext._method = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 225 || _la === 298 || _la === 392)) {
                    localContext._method = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 8346;
                localContext._option = this.match(MySQLParser.DATA_SYMBOL);
                this.state = 8347;
                this.match(MySQLParser.DIRECTORY_SYMBOL);
                this.state = 8349;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1050, this.context) ) {
                case 1:
                    {
                    this.state = 8348;
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                    break;
                }
                this.state = 8351;
                this.textString();
                }
                break;
            case 21:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 8352;
                localContext._option = this.match(MySQLParser.INDEX_SYMBOL);
                this.state = 8353;
                this.match(MySQLParser.DIRECTORY_SYMBOL);
                this.state = 8355;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1051, this.context) ) {
                case 1:
                    {
                    this.state = 8354;
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                    break;
                }
                this.state = 8357;
                this.textString();
                }
                break;
            case 22:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 8358;
                localContext._option = this.match(MySQLParser.TABLESPACE_SYMBOL);
                this.state = 8360;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1052, this.context) ) {
                case 1:
                    {
                    this.state = 8359;
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                    break;
                }
                this.state = 8362;
                this.identifier();
                }
                break;
            case 23:
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 8363;
                localContext._option = this.match(MySQLParser.STORAGE_SYMBOL);
                this.state = 8364;
                _la = this.tokenStream.LA(1);
                if(!(_la === 179 || _la === 358)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 24:
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 8365;
                localContext._option = this.match(MySQLParser.CONNECTION_SYMBOL);
                this.state = 8367;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1053, this.context) ) {
                case 1:
                    {
                    this.state = 8366;
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                    break;
                }
                this.state = 8369;
                this.textString();
                }
                break;
            case 25:
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 8370;
                localContext._option = this.match(MySQLParser.KEY_BLOCK_SIZE_SYMBOL);
                this.state = 8372;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 6) {
                    {
                    this.state = 8371;
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                }

                this.state = 8374;
                this.ulonglongNumber();
                }
                break;
            case 26:
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 8375;
                if (!(this.serverVersion >= 80024)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80024");
                }
                this.state = 8376;
                localContext._option = this.match(MySQLParser.START_SYMBOL);
                this.state = 8377;
                this.match(MySQLParser.TRANSACTION_SYMBOL);
                }
                break;
            case 27:
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 8378;
                if (!(this.serverVersion >= 80024)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80024");
                }
                this.state = 8379;
                localContext._option = this.match(MySQLParser.ENGINE_ATTRIBUTE_SYMBOL);
                this.state = 8381;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1055, this.context) ) {
                case 1:
                    {
                    this.state = 8380;
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                    break;
                }
                this.state = 8383;
                this.jsonAttribute();
                }
                break;
            case 28:
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 8384;
                if (!(this.serverVersion >= 80024)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80024");
                }
                this.state = 8385;
                localContext._option = this.match(MySQLParser.SECONDARY_ENGINE_ATTRIBUTE_SYMBOL);
                this.state = 8387;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1056, this.context) ) {
                case 1:
                    {
                    this.state = 8386;
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                    break;
                }
                this.state = 8389;
                this.jsonAttribute();
                }
                break;
            case 29:
                this.enterOuterAlt(localContext, 29);
                {
                this.state = 8390;
                if (!(this.serverVersion >= 80024)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80024");
                }
                this.state = 8391;
                this.tsOptionAutoextendSize();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ternaryOption(): TernaryOptionContext {
        let localContext = new TernaryOptionContext(this.context, this.state);
        this.enterRule(localContext, 1202, MySQLParser.RULE_ternaryOption);
        try {
            this.state = 8396;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.INT_NUMBER:
            case MySQLParser.LONG_NUMBER:
            case MySQLParser.ULONGLONG_NUMBER:
            case MySQLParser.HEX_NUMBER:
            case MySQLParser.DECIMAL_NUMBER:
            case MySQLParser.FLOAT_NUMBER:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8394;
                this.ulong_number();
                }
                break;
            case MySQLParser.DEFAULT_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8395;
                this.match(MySQLParser.DEFAULT_SYMBOL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public defaultCollation(): DefaultCollationContext {
        let localContext = new DefaultCollationContext(this.context, this.state);
        this.enterRule(localContext, 1204, MySQLParser.RULE_defaultCollation);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8399;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 166) {
                {
                this.state = 8398;
                this.match(MySQLParser.DEFAULT_SYMBOL);
                }
            }

            this.state = 8401;
            this.match(MySQLParser.COLLATE_SYMBOL);
            this.state = 8403;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1060, this.context) ) {
            case 1:
                {
                this.state = 8402;
                this.match(MySQLParser.EQUAL_OPERATOR);
                }
                break;
            }
            this.state = 8405;
            this.collationName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public defaultEncryption(): DefaultEncryptionContext {
        let localContext = new DefaultEncryptionContext(this.context, this.state);
        this.enterRule(localContext, 1206, MySQLParser.RULE_defaultEncryption);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8408;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 166) {
                {
                this.state = 8407;
                this.match(MySQLParser.DEFAULT_SYMBOL);
                }
            }

            this.state = 8410;
            this.match(MySQLParser.ENCRYPTION_SYMBOL);
            this.state = 8412;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1062, this.context) ) {
            case 1:
                {
                this.state = 8411;
                this.match(MySQLParser.EQUAL_OPERATOR);
                }
                break;
            }
            this.state = 8414;
            this.textStringLiteral();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public defaultCharset(): DefaultCharsetContext {
        let localContext = new DefaultCharsetContext(this.context, this.state);
        this.enterRule(localContext, 1208, MySQLParser.RULE_defaultCharset);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8417;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 166) {
                {
                this.state = 8416;
                this.match(MySQLParser.DEFAULT_SYMBOL);
                }
            }

            this.state = 8419;
            this.charset();
            this.state = 8421;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1064, this.context) ) {
            case 1:
                {
                this.state = 8420;
                this.match(MySQLParser.EQUAL_OPERATOR);
                }
                break;
            }
            this.state = 8423;
            this.charsetName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionClause(): PartitionClauseContext {
        let localContext = new PartitionClauseContext(this.context, this.state);
        this.enterRule(localContext, 1210, MySQLParser.RULE_partitionClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8425;
            this.match(MySQLParser.PARTITION_SYMBOL);
            this.state = 8426;
            this.match(MySQLParser.BY_SYMBOL);
            this.state = 8427;
            this.partitionTypeDef();
            this.state = 8430;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1065, this.context) ) {
            case 1:
                {
                this.state = 8428;
                this.match(MySQLParser.PARTITIONS_SYMBOL);
                this.state = 8429;
                this.real_ulong_number();
                }
                break;
            }
            this.state = 8433;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1066, this.context) ) {
            case 1:
                {
                this.state = 8432;
                this.subPartitions();
                }
                break;
            }
            this.state = 8436;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1067, this.context) ) {
            case 1:
                {
                this.state = 8435;
                this.partitionDefinitions();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionTypeDef(): PartitionTypeDefContext {
        let localContext = new PartitionTypeDefContext(this.context, this.state);
        this.enterRule(localContext, 1212, MySQLParser.RULE_partitionTypeDef);
        let _la: number;
        try {
            this.state = 8471;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1074, this.context) ) {
            case 1:
                localContext = new PartitionDefKeyContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8439;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 307) {
                    {
                    this.state = 8438;
                    this.match(MySQLParser.LINEAR_SYMBOL);
                    }
                }

                this.state = 8441;
                this.match(MySQLParser.KEY_SYMBOL);
                this.state = 8443;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 56) {
                    {
                    this.state = 8442;
                    this.partitionKeyAlgorithm();
                    }
                }

                this.state = 8445;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 8447;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1070, this.context) ) {
                case 1:
                    {
                    this.state = 8446;
                    this.identifierList();
                    }
                    break;
                }
                this.state = 8449;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case 2:
                localContext = new PartitionDefHashContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8451;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 307) {
                    {
                    this.state = 8450;
                    this.match(MySQLParser.LINEAR_SYMBOL);
                    }
                }

                this.state = 8453;
                this.match(MySQLParser.HASH_SYMBOL);
                this.state = 8454;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 8455;
                this.bitExpr(0);
                this.state = 8456;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case 3:
                localContext = new PartitionDefRangeListContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 8458;
                _la = this.tokenStream.LA(1);
                if(!(_la === 310 || _la === 450)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 8469;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySQLParser.OPEN_PAR_SYMBOL:
                    {
                    this.state = 8459;
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.state = 8460;
                    this.bitExpr(0);
                    this.state = 8461;
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case MySQLParser.COLUMNS_SYMBOL:
                    {
                    this.state = 8463;
                    this.match(MySQLParser.COLUMNS_SYMBOL);
                    this.state = 8464;
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.state = 8466;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 1072, this.context) ) {
                    case 1:
                        {
                        this.state = 8465;
                        this.identifierList();
                        }
                        break;
                    }
                    this.state = 8468;
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public subPartitions(): SubPartitionsContext {
        let localContext = new SubPartitionsContext(this.context, this.state);
        this.enterRule(localContext, 1214, MySQLParser.RULE_subPartitions);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8473;
            this.match(MySQLParser.SUBPARTITION_SYMBOL);
            this.state = 8474;
            this.match(MySQLParser.BY_SYMBOL);
            this.state = 8476;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 307) {
                {
                this.state = 8475;
                this.match(MySQLParser.LINEAR_SYMBOL);
                }
            }

            this.state = 8488;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.HASH_SYMBOL:
                {
                this.state = 8478;
                this.match(MySQLParser.HASH_SYMBOL);
                this.state = 8479;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 8480;
                this.bitExpr(0);
                this.state = 8481;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case MySQLParser.KEY_SYMBOL:
                {
                this.state = 8483;
                this.match(MySQLParser.KEY_SYMBOL);
                this.state = 8485;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 56) {
                    {
                    this.state = 8484;
                    this.partitionKeyAlgorithm();
                    }
                }

                this.state = 8487;
                this.identifierListWithParentheses();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 8492;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1078, this.context) ) {
            case 1:
                {
                this.state = 8490;
                this.match(MySQLParser.SUBPARTITIONS_SYMBOL);
                this.state = 8491;
                this.real_ulong_number();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionKeyAlgorithm(): PartitionKeyAlgorithmContext {
        let localContext = new PartitionKeyAlgorithmContext(this.context, this.state);
        this.enterRule(localContext, 1216, MySQLParser.RULE_partitionKeyAlgorithm);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8494;
            this.match(MySQLParser.ALGORITHM_SYMBOL);
            this.state = 8495;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 8496;
            this.real_ulong_number();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionDefinitions(): PartitionDefinitionsContext {
        let localContext = new PartitionDefinitionsContext(this.context, this.state);
        this.enterRule(localContext, 1218, MySQLParser.RULE_partitionDefinitions);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8498;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 8499;
            this.partitionDefinition();
            this.state = 8504;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 29) {
                {
                {
                this.state = 8500;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 8501;
                this.partitionDefinition();
                }
                }
                this.state = 8506;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 8507;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionDefinition(): PartitionDefinitionContext {
        let localContext = new PartitionDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 1220, MySQLParser.RULE_partitionDefinition);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8509;
            this.match(MySQLParser.PARTITION_SYMBOL);
            this.state = 8510;
            this.identifier();
            this.state = 8521;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1081, this.context) ) {
            case 1:
                {
                this.state = 8511;
                this.match(MySQLParser.VALUES_SYMBOL);
                this.state = 8512;
                this.match(MySQLParser.LESS_SYMBOL);
                this.state = 8513;
                this.match(MySQLParser.THAN_SYMBOL);
                this.state = 8516;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySQLParser.OPEN_PAR_SYMBOL:
                    {
                    this.state = 8514;
                    this.partitionValueItemListParen();
                    }
                    break;
                case MySQLParser.MAXVALUE_SYMBOL:
                    {
                    this.state = 8515;
                    this.match(MySQLParser.MAXVALUE_SYMBOL);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 2:
                {
                this.state = 8518;
                this.match(MySQLParser.VALUES_SYMBOL);
                this.state = 8519;
                this.match(MySQLParser.IN_SYMBOL);
                this.state = 8520;
                this.partitionValuesIn();
                }
                break;
            }
            this.state = 8526;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 118 || _la === 153 || _la === 198 || _la === 268 || _la === 348 || _la === 367 || _la === 388 || _la === 563 || _la === 582) {
                {
                {
                this.state = 8523;
                this.partitionOption();
                }
                }
                this.state = 8528;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 8540;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 32) {
                {
                this.state = 8529;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 8530;
                this.subpartitionDefinition();
                this.state = 8535;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 29) {
                    {
                    {
                    this.state = 8531;
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.state = 8532;
                    this.subpartitionDefinition();
                    }
                    }
                    this.state = 8537;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 8538;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionValuesIn(): PartitionValuesInContext {
        let localContext = new PartitionValuesInContext(this.context, this.state);
        this.enterRule(localContext, 1222, MySQLParser.RULE_partitionValuesIn);
        let _la: number;
        try {
            this.state = 8554;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1086, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8542;
                this.partitionValueItemListParen();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8543;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 8544;
                this.partitionValueItemListParen();
                this.state = 8549;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 29) {
                    {
                    {
                    this.state = 8545;
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.state = 8546;
                    this.partitionValueItemListParen();
                    }
                    }
                    this.state = 8551;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 8552;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionOption(): PartitionOptionContext {
        let localContext = new PartitionOptionContext(this.context, this.state);
        this.enterRule(localContext, 1224, MySQLParser.RULE_partitionOption);
        let _la: number;
        try {
            this.state = 8590;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.TABLESPACE_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8556;
                localContext._option = this.match(MySQLParser.TABLESPACE_SYMBOL);
                this.state = 8558;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1087, this.context) ) {
                case 1:
                    {
                    this.state = 8557;
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                    break;
                }
                this.state = 8560;
                this.identifier();
                }
                break;
            case MySQLParser.ENGINE_SYMBOL:
            case MySQLParser.STORAGE_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8562;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 563) {
                    {
                    this.state = 8561;
                    this.match(MySQLParser.STORAGE_SYMBOL);
                    }
                }

                this.state = 8564;
                localContext._option = this.match(MySQLParser.ENGINE_SYMBOL);
                this.state = 8566;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1089, this.context) ) {
                case 1:
                    {
                    this.state = 8565;
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                    break;
                }
                this.state = 8568;
                this.engineRef();
                }
                break;
            case MySQLParser.NODEGROUP_SYMBOL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 8569;
                localContext._option = this.match(MySQLParser.NODEGROUP_SYMBOL);
                this.state = 8571;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 6) {
                    {
                    this.state = 8570;
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                }

                this.state = 8573;
                this.real_ulong_number();
                }
                break;
            case MySQLParser.MAX_ROWS_SYMBOL:
            case MySQLParser.MIN_ROWS_SYMBOL:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 8574;
                localContext._option = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 348 || _la === 367)) {
                    localContext._option = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 8576;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 6) {
                    {
                    this.state = 8575;
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                }

                this.state = 8578;
                this.real_ulong_number();
                }
                break;
            case MySQLParser.DATA_SYMBOL:
            case MySQLParser.INDEX_SYMBOL:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 8579;
                localContext._option = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 153 || _la === 268)) {
                    localContext._option = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 8580;
                this.match(MySQLParser.DIRECTORY_SYMBOL);
                this.state = 8582;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1092, this.context) ) {
                case 1:
                    {
                    this.state = 8581;
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                    break;
                }
                this.state = 8584;
                this.textLiteral();
                }
                break;
            case MySQLParser.COMMENT_SYMBOL:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 8585;
                localContext._option = this.match(MySQLParser.COMMENT_SYMBOL);
                this.state = 8587;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1093, this.context) ) {
                case 1:
                    {
                    this.state = 8586;
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                    break;
                }
                this.state = 8589;
                this.textLiteral();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public subpartitionDefinition(): SubpartitionDefinitionContext {
        let localContext = new SubpartitionDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 1226, MySQLParser.RULE_subpartitionDefinition);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8592;
            this.match(MySQLParser.SUBPARTITION_SYMBOL);
            this.state = 8593;
            this.textOrIdentifier();
            this.state = 8597;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 118 || _la === 153 || _la === 198 || _la === 268 || _la === 348 || _la === 367 || _la === 388 || _la === 563 || _la === 582) {
                {
                {
                this.state = 8594;
                this.partitionOption();
                }
                }
                this.state = 8599;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionValueItemListParen(): PartitionValueItemListParenContext {
        let localContext = new PartitionValueItemListParenContext(this.context, this.state);
        this.enterRule(localContext, 1228, MySQLParser.RULE_partitionValueItemListParen);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8600;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 8601;
            this.partitionValueItem();
            this.state = 8606;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 29) {
                {
                {
                this.state = 8602;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 8603;
                this.partitionValueItem();
                }
                }
                this.state = 8608;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 8609;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionValueItem(): PartitionValueItemContext {
        let localContext = new PartitionValueItemContext(this.context, this.state);
        this.enterRule(localContext, 1230, MySQLParser.RULE_partitionValueItem);
        try {
            this.state = 8613;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1097, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8611;
                this.bitExpr(0);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8612;
                this.match(MySQLParser.MAXVALUE_SYMBOL);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public definerClause(): DefinerClauseContext {
        let localContext = new DefinerClauseContext(this.context, this.state);
        this.enterRule(localContext, 1232, MySQLParser.RULE_definerClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8615;
            this.match(MySQLParser.DEFINER_SYMBOL);
            this.state = 8616;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 8617;
            this.user();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ifExists(): IfExistsContext {
        let localContext = new IfExistsContext(this.context, this.state);
        this.enterRule(localContext, 1234, MySQLParser.RULE_ifExists);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8619;
            this.match(MySQLParser.IF_SYMBOL);
            this.state = 8620;
            this.match(MySQLParser.EXISTS_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ifExistsIdentifier(): IfExistsIdentifierContext {
        let localContext = new IfExistsIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 1236, MySQLParser.RULE_ifExistsIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8622;
            this.ifExists();
            this.state = 8623;
            this.persistedVariableIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public persistedVariableIdentifier(): PersistedVariableIdentifierContext {
        let localContext = new PersistedVariableIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 1238, MySQLParser.RULE_persistedVariableIdentifier);
        try {
            this.state = 8632;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1099, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8625;
                this.identifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8626;
                if (!(this.serverVersion >= 80032)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80032");
                }
                this.state = 8630;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1098, this.context) ) {
                case 1:
                    {
                    this.state = 8627;
                    this.qualifiedIdentifier();
                    }
                    break;
                case 2:
                    {
                    this.state = 8628;
                    this.match(MySQLParser.DEFAULT_SYMBOL);
                    this.state = 8629;
                    this.dotIdentifier();
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ifNotExists(): IfNotExistsContext {
        let localContext = new IfNotExistsContext(this.context, this.state);
        this.enterRule(localContext, 1240, MySQLParser.RULE_ifNotExists);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8634;
            this.match(MySQLParser.IF_SYMBOL);
            this.state = 8635;
            this.notRule();
            this.state = 8636;
            this.match(MySQLParser.EXISTS_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ignoreUnknownUser(): IgnoreUnknownUserContext {
        let localContext = new IgnoreUnknownUserContext(this.context, this.state);
        this.enterRule(localContext, 1242, MySQLParser.RULE_ignoreUnknownUser);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8638;
            this.match(MySQLParser.IGNORE_SYMBOL);
            this.state = 8639;
            this.match(MySQLParser.UNKNOWN_SYMBOL);
            this.state = 8640;
            this.match(MySQLParser.USER_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public procedureParameter(): ProcedureParameterContext {
        let localContext = new ProcedureParameterContext(this.context, this.state);
        this.enterRule(localContext, 1244, MySQLParser.RULE_procedureParameter);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8643;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1100, this.context) ) {
            case 1:
                {
                this.state = 8642;
                localContext._type_ = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 272 || _la === 282 || _la === 415)) {
                    localContext._type_ = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
            this.state = 8645;
            this.functionParameter();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionParameter(): FunctionParameterContext {
        let localContext = new FunctionParameterContext(this.context, this.state);
        this.enterRule(localContext, 1246, MySQLParser.RULE_functionParameter);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8647;
            this.parameterName();
            this.state = 8648;
            this.typeWithOptCollate();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collate(): CollateContext {
        let localContext = new CollateContext(this.context, this.state);
        this.enterRule(localContext, 1248, MySQLParser.RULE_collate);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8650;
            this.match(MySQLParser.COLLATE_SYMBOL);
            this.state = 8651;
            this.collationName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public typeWithOptCollate(): TypeWithOptCollateContext {
        let localContext = new TypeWithOptCollateContext(this.context, this.state);
        this.enterRule(localContext, 1250, MySQLParser.RULE_typeWithOptCollate);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8653;
            this.dataType();
            this.state = 8655;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1101, this.context) ) {
            case 1:
                {
                this.state = 8654;
                this.collate();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public schemaIdentifierPair(): SchemaIdentifierPairContext {
        let localContext = new SchemaIdentifierPairContext(this.context, this.state);
        this.enterRule(localContext, 1252, MySQLParser.RULE_schemaIdentifierPair);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8657;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 8658;
            this.schemaRef();
            this.state = 8659;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 8660;
            this.schemaRef();
            this.state = 8661;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public viewRefList(): ViewRefListContext {
        let localContext = new ViewRefListContext(this.context, this.state);
        this.enterRule(localContext, 1254, MySQLParser.RULE_viewRefList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8663;
            this.viewRef();
            this.state = 8668;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 29) {
                {
                {
                this.state = 8664;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 8665;
                this.viewRef();
                }
                }
                this.state = 8670;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public updateList(): UpdateListContext {
        let localContext = new UpdateListContext(this.context, this.state);
        this.enterRule(localContext, 1256, MySQLParser.RULE_updateList);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8671;
            this.updateElement();
            this.state = 8676;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 1103, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 8672;
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.state = 8673;
                    this.updateElement();
                    }
                    }
                }
                this.state = 8678;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 1103, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public updateElement(): UpdateElementContext {
        let localContext = new UpdateElementContext(this.context, this.state);
        this.enterRule(localContext, 1258, MySQLParser.RULE_updateElement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8679;
            this.columnRef();
            this.state = 8680;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 8683;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1104, this.context) ) {
            case 1:
                {
                this.state = 8681;
                this.expr(0);
                }
                break;
            case 2:
                {
                this.state = 8682;
                this.match(MySQLParser.DEFAULT_SYMBOL);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public charsetClause(): CharsetClauseContext {
        let localContext = new CharsetClauseContext(this.context, this.state);
        this.enterRule(localContext, 1260, MySQLParser.RULE_charsetClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8685;
            this.charset();
            this.state = 8686;
            this.charsetName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fieldsClause(): FieldsClauseContext {
        let localContext = new FieldsClauseContext(this.context, this.state);
        this.enterRule(localContext, 1262, MySQLParser.RULE_fieldsClause);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8688;
            this.match(MySQLParser.COLUMNS_SYMBOL);
            this.state = 8690;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    {
                    this.state = 8689;
                    this.fieldTerm();
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 8692;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 1105, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fieldTerm(): FieldTermContext {
        let localContext = new FieldTermContext(this.context, this.state);
        this.enterRule(localContext, 1264, MySQLParser.RULE_fieldTerm);
        let _la: number;
        try {
            this.state = 8706;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.TERMINATED_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8694;
                this.match(MySQLParser.TERMINATED_SYMBOL);
                this.state = 8695;
                this.match(MySQLParser.BY_SYMBOL);
                this.state = 8696;
                this.textString();
                }
                break;
            case MySQLParser.ENCLOSED_SYMBOL:
            case MySQLParser.OPTIONALLY_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8698;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 410) {
                    {
                    this.state = 8697;
                    this.match(MySQLParser.OPTIONALLY_SYMBOL);
                    }
                }

                this.state = 8700;
                this.match(MySQLParser.ENCLOSED_SYMBOL);
                this.state = 8701;
                this.match(MySQLParser.BY_SYMBOL);
                this.state = 8702;
                this.textString();
                }
                break;
            case MySQLParser.ESCAPED_SYMBOL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 8703;
                this.match(MySQLParser.ESCAPED_SYMBOL);
                this.state = 8704;
                this.match(MySQLParser.BY_SYMBOL);
                this.state = 8705;
                this.textString();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public linesClause(): LinesClauseContext {
        let localContext = new LinesClauseContext(this.context, this.state);
        this.enterRule(localContext, 1266, MySQLParser.RULE_linesClause);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8708;
            this.match(MySQLParser.LINES_SYMBOL);
            this.state = 8710;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    {
                    this.state = 8709;
                    this.lineTerm();
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 8712;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 1108, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lineTerm(): LineTermContext {
        let localContext = new LineTermContext(this.context, this.state);
        this.enterRule(localContext, 1268, MySQLParser.RULE_lineTerm);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8714;
            _la = this.tokenStream.LA(1);
            if(!(_la === 551 || _la === 588)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 8715;
            this.match(MySQLParser.BY_SYMBOL);
            this.state = 8716;
            this.textString();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public userList(): UserListContext {
        let localContext = new UserListContext(this.context, this.state);
        this.enterRule(localContext, 1270, MySQLParser.RULE_userList);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8718;
            this.user();
            this.state = 8723;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 1109, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 8719;
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.state = 8720;
                    this.user();
                    }
                    }
                }
                this.state = 8725;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 1109, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createUserList(): CreateUserListContext {
        let localContext = new CreateUserListContext(this.context, this.state);
        this.enterRule(localContext, 1272, MySQLParser.RULE_createUserList);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8726;
            this.createUser();
            this.state = 8731;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 1110, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 8727;
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.state = 8728;
                    this.createUser();
                    }
                    }
                }
                this.state = 8733;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 1110, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createUser(): CreateUserContext {
        let localContext = new CreateUserContext(this.context, this.state);
        this.enterRule(localContext, 1274, MySQLParser.RULE_createUser);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8734;
            this.user();
            this.state = 8744;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1113, this.context) ) {
            case 1:
                {
                this.state = 8735;
                this.identification();
                this.state = 8737;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1111, this.context) ) {
                case 1:
                    {
                    this.state = 8736;
                    this.createUserWithMfa();
                    }
                    break;
                }
                }
                break;
            case 2:
                {
                this.state = 8739;
                this.identifiedWithPlugin();
                this.state = 8741;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1112, this.context) ) {
                case 1:
                    {
                    this.state = 8740;
                    this.initialAuth();
                    }
                    break;
                }
                }
                break;
            case 3:
                {
                this.state = 8743;
                this.createUserWithMfa();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createUserWithMfa(): CreateUserWithMfaContext {
        let localContext = new CreateUserWithMfaContext(this.context, this.state);
        this.enterRule(localContext, 1276, MySQLParser.RULE_createUserWithMfa);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8746;
            this.match(MySQLParser.AND_SYMBOL);
            this.state = 8747;
            this.identification();
            this.state = 8750;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1114, this.context) ) {
            case 1:
                {
                this.state = 8748;
                this.match(MySQLParser.AND_SYMBOL);
                this.state = 8749;
                this.identification();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identification(): IdentificationContext {
        let localContext = new IdentificationContext(this.context, this.state);
        this.enterRule(localContext, 1278, MySQLParser.RULE_identification);
        try {
            this.state = 8758;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1115, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8752;
                this.identifiedByPassword();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8753;
                this.identifiedByRandomPassword();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 8754;
                this.identifiedWithPlugin();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 8755;
                this.identifiedWithPluginAsAuth();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 8756;
                this.identifiedWithPluginByPassword();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 8757;
                this.identifiedWithPluginByRandomPassword();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifiedByPassword(): IdentifiedByPasswordContext {
        let localContext = new IdentifiedByPasswordContext(this.context, this.state);
        this.enterRule(localContext, 1280, MySQLParser.RULE_identifiedByPassword);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8760;
            this.match(MySQLParser.IDENTIFIED_SYMBOL);
            this.state = 8761;
            this.match(MySQLParser.BY_SYMBOL);
            this.state = 8762;
            this.textStringLiteral();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifiedByRandomPassword(): IdentifiedByRandomPasswordContext {
        let localContext = new IdentifiedByRandomPasswordContext(this.context, this.state);
        this.enterRule(localContext, 1282, MySQLParser.RULE_identifiedByRandomPassword);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8764;
            this.match(MySQLParser.IDENTIFIED_SYMBOL);
            this.state = 8765;
            this.match(MySQLParser.BY_SYMBOL);
            this.state = 8766;
            this.match(MySQLParser.RANDOM_SYMBOL);
            this.state = 8767;
            this.match(MySQLParser.PASSWORD_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifiedWithPlugin(): IdentifiedWithPluginContext {
        let localContext = new IdentifiedWithPluginContext(this.context, this.state);
        this.enterRule(localContext, 1284, MySQLParser.RULE_identifiedWithPlugin);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8769;
            this.match(MySQLParser.IDENTIFIED_SYMBOL);
            this.state = 8770;
            this.match(MySQLParser.WITH_SYMBOL);
            this.state = 8771;
            this.textOrIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifiedWithPluginAsAuth(): IdentifiedWithPluginAsAuthContext {
        let localContext = new IdentifiedWithPluginAsAuthContext(this.context, this.state);
        this.enterRule(localContext, 1286, MySQLParser.RULE_identifiedWithPluginAsAuth);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8773;
            this.match(MySQLParser.IDENTIFIED_SYMBOL);
            this.state = 8774;
            this.match(MySQLParser.WITH_SYMBOL);
            this.state = 8775;
            this.textOrIdentifier();
            this.state = 8776;
            this.match(MySQLParser.AS_SYMBOL);
            this.state = 8777;
            this.textStringHash();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifiedWithPluginByPassword(): IdentifiedWithPluginByPasswordContext {
        let localContext = new IdentifiedWithPluginByPasswordContext(this.context, this.state);
        this.enterRule(localContext, 1288, MySQLParser.RULE_identifiedWithPluginByPassword);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8779;
            this.match(MySQLParser.IDENTIFIED_SYMBOL);
            this.state = 8780;
            this.match(MySQLParser.WITH_SYMBOL);
            this.state = 8781;
            this.textOrIdentifier();
            this.state = 8782;
            this.match(MySQLParser.BY_SYMBOL);
            this.state = 8783;
            this.textStringLiteral();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifiedWithPluginByRandomPassword(): IdentifiedWithPluginByRandomPasswordContext {
        let localContext = new IdentifiedWithPluginByRandomPasswordContext(this.context, this.state);
        this.enterRule(localContext, 1290, MySQLParser.RULE_identifiedWithPluginByRandomPassword);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8785;
            this.match(MySQLParser.IDENTIFIED_SYMBOL);
            this.state = 8786;
            this.match(MySQLParser.WITH_SYMBOL);
            this.state = 8787;
            this.textOrIdentifier();
            this.state = 8788;
            this.match(MySQLParser.BY_SYMBOL);
            this.state = 8789;
            this.match(MySQLParser.RANDOM_SYMBOL);
            this.state = 8790;
            this.match(MySQLParser.PASSWORD_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public initialAuth(): InitialAuthContext {
        let localContext = new InitialAuthContext(this.context, this.state);
        this.enterRule(localContext, 1292, MySQLParser.RULE_initialAuth);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8792;
            this.match(MySQLParser.INITIAL_SYMBOL);
            this.state = 8793;
            this.match(MySQLParser.AUTHENTICATION_SYMBOL);
            this.state = 8797;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1116, this.context) ) {
            case 1:
                {
                this.state = 8794;
                this.identifiedByRandomPassword();
                }
                break;
            case 2:
                {
                this.state = 8795;
                this.identifiedWithPluginAsAuth();
                }
                break;
            case 3:
                {
                this.state = 8796;
                this.identifiedByPassword();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public retainCurrentPassword(): RetainCurrentPasswordContext {
        let localContext = new RetainCurrentPasswordContext(this.context, this.state);
        this.enterRule(localContext, 1294, MySQLParser.RULE_retainCurrentPassword);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8799;
            this.match(MySQLParser.RETAIN_SYMBOL);
            this.state = 8800;
            this.match(MySQLParser.CURRENT_SYMBOL);
            this.state = 8801;
            this.match(MySQLParser.PASSWORD_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public discardOldPassword(): DiscardOldPasswordContext {
        let localContext = new DiscardOldPasswordContext(this.context, this.state);
        this.enterRule(localContext, 1296, MySQLParser.RULE_discardOldPassword);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8803;
            this.match(MySQLParser.DISCARD_SYMBOL);
            this.state = 8804;
            this.match(MySQLParser.OLD_SYMBOL);
            this.state = 8805;
            this.match(MySQLParser.PASSWORD_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public userRegistration(): UserRegistrationContext {
        let localContext = new UserRegistrationContext(this.context, this.state);
        this.enterRule(localContext, 1298, MySQLParser.RULE_userRegistration);
        try {
            this.state = 8822;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1117, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8807;
                this.factor();
                this.state = 8808;
                this.match(MySQLParser.INITIATE_SYMBOL);
                this.state = 8809;
                this.match(MySQLParser.REGISTRATION_SYMBOL);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8811;
                this.factor();
                this.state = 8812;
                this.match(MySQLParser.UNREGISTER_SYMBOL);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 8814;
                this.factor();
                this.state = 8815;
                this.match(MySQLParser.FINISH_SYMBOL);
                this.state = 8816;
                this.match(MySQLParser.REGISTRATION_SYMBOL);
                this.state = 8817;
                this.match(MySQLParser.SET_SYMBOL);
                this.state = 8818;
                this.match(MySQLParser.CHALLENGE_RESPONSE_SYMBOL);
                this.state = 8819;
                this.match(MySQLParser.AS_SYMBOL);
                this.state = 8820;
                this.textStringHash();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public factor(): FactorContext {
        let localContext = new FactorContext(this.context, this.state);
        this.enterRule(localContext, 1300, MySQLParser.RULE_factor);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8824;
            this.numLiteral();
            this.state = 8825;
            this.match(MySQLParser.FACTOR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replacePassword(): ReplacePasswordContext {
        let localContext = new ReplacePasswordContext(this.context, this.state);
        this.enterRule(localContext, 1302, MySQLParser.RULE_replacePassword);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8827;
            this.match(MySQLParser.REPLACE_SYMBOL);
            this.state = 8828;
            this.textString();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public userIdentifierOrText(): UserIdentifierOrTextContext {
        let localContext = new UserIdentifierOrTextContext(this.context, this.state);
        this.enterRule(localContext, 1304, MySQLParser.RULE_userIdentifierOrText);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8830;
            this.textOrIdentifier();
            this.state = 8832;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1118, this.context) ) {
            case 1:
                {
                this.state = 8831;
                this.userVariable();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public user(): UserContext {
        let localContext = new UserContext(this.context, this.state);
        this.enterRule(localContext, 1306, MySQLParser.RULE_user);
        try {
            this.state = 8839;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1120, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8834;
                this.userIdentifierOrText();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8835;
                this.match(MySQLParser.CURRENT_USER_SYMBOL);
                this.state = 8837;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1119, this.context) ) {
                case 1:
                    {
                    this.state = 8836;
                    this.parentheses();
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public likeClause(): LikeClauseContext {
        let localContext = new LikeClauseContext(this.context, this.state);
        this.enterRule(localContext, 1308, MySQLParser.RULE_likeClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8841;
            this.match(MySQLParser.LIKE_SYMBOL);
            this.state = 8842;
            this.textStringLiteral();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public likeOrWhere(): LikeOrWhereContext {
        let localContext = new LikeOrWhereContext(this.context, this.state);
        this.enterRule(localContext, 1310, MySQLParser.RULE_likeOrWhere);
        try {
            this.state = 8846;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.LIKE_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8844;
                this.likeClause();
                }
                break;
            case MySQLParser.WHERE_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8845;
                this.whereClause();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public onlineOption(): OnlineOptionContext {
        let localContext = new OnlineOptionContext(this.context, this.state);
        this.enterRule(localContext, 1312, MySQLParser.RULE_onlineOption);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8848;
            _la = this.tokenStream.LA(1);
            if(!(_la === 399 || _la === 403)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public noWriteToBinLog(): NoWriteToBinLogContext {
        let localContext = new NoWriteToBinLogContext(this.context, this.state);
        this.enterRule(localContext, 1314, MySQLParser.RULE_noWriteToBinLog);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8850;
            _la = this.tokenStream.LA(1);
            if(!(_la === 312 || _la === 394)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public usePartition(): UsePartitionContext {
        let localContext = new UsePartitionContext(this.context, this.state);
        this.enterRule(localContext, 1316, MySQLParser.RULE_usePartition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8852;
            this.match(MySQLParser.PARTITION_SYMBOL);
            this.state = 8853;
            this.identifierListWithParentheses();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fieldIdentifier(): FieldIdentifierContext {
        let localContext = new FieldIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 1318, MySQLParser.RULE_fieldIdentifier);
        try {
            this.state = 8860;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1123, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8855;
                this.dotIdentifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8856;
                this.qualifiedIdentifier();
                this.state = 8858;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1122, this.context) ) {
                case 1:
                    {
                    this.state = 8857;
                    this.dotIdentifier();
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnName(): ColumnNameContext {
        let localContext = new ColumnNameContext(this.context, this.state);
        this.enterRule(localContext, 1320, MySQLParser.RULE_columnName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8862;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnInternalRef(): ColumnInternalRefContext {
        let localContext = new ColumnInternalRefContext(this.context, this.state);
        this.enterRule(localContext, 1322, MySQLParser.RULE_columnInternalRef);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8864;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnInternalRefList(): ColumnInternalRefListContext {
        let localContext = new ColumnInternalRefListContext(this.context, this.state);
        this.enterRule(localContext, 1324, MySQLParser.RULE_columnInternalRefList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8866;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 8867;
            this.columnInternalRef();
            this.state = 8872;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 29) {
                {
                {
                this.state = 8868;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 8869;
                this.columnInternalRef();
                }
                }
                this.state = 8874;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 8875;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnRef(): ColumnRefContext {
        let localContext = new ColumnRefContext(this.context, this.state);
        this.enterRule(localContext, 1326, MySQLParser.RULE_columnRef);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8877;
            this.fieldIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertIdentifier(): InsertIdentifierContext {
        let localContext = new InsertIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 1328, MySQLParser.RULE_insertIdentifier);
        try {
            this.state = 8881;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1125, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8879;
                this.columnRef();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8880;
                this.tableWild();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public indexName(): IndexNameContext {
        let localContext = new IndexNameContext(this.context, this.state);
        this.enterRule(localContext, 1330, MySQLParser.RULE_indexName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8883;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public indexRef(): IndexRefContext {
        let localContext = new IndexRefContext(this.context, this.state);
        this.enterRule(localContext, 1332, MySQLParser.RULE_indexRef);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8885;
            this.fieldIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableWild(): TableWildContext {
        let localContext = new TableWildContext(this.context, this.state);
        this.enterRule(localContext, 1334, MySQLParser.RULE_tableWild);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8887;
            this.identifier();
            this.state = 8888;
            this.match(MySQLParser.DOT_SYMBOL);
            this.state = 8892;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1126, this.context) ) {
            case 1:
                {
                this.state = 8889;
                this.identifier();
                this.state = 8890;
                this.match(MySQLParser.DOT_SYMBOL);
                }
                break;
            }
            this.state = 8894;
            this.match(MySQLParser.MULT_OPERATOR);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public schemaName(): SchemaNameContext {
        let localContext = new SchemaNameContext(this.context, this.state);
        this.enterRule(localContext, 1336, MySQLParser.RULE_schemaName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8896;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public schemaRef(): SchemaRefContext {
        let localContext = new SchemaRefContext(this.context, this.state);
        this.enterRule(localContext, 1338, MySQLParser.RULE_schemaRef);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8898;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public procedureName(): ProcedureNameContext {
        let localContext = new ProcedureNameContext(this.context, this.state);
        this.enterRule(localContext, 1340, MySQLParser.RULE_procedureName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8900;
            this.qualifiedIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public procedureRef(): ProcedureRefContext {
        let localContext = new ProcedureRefContext(this.context, this.state);
        this.enterRule(localContext, 1342, MySQLParser.RULE_procedureRef);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8902;
            this.qualifiedIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionName(): FunctionNameContext {
        let localContext = new FunctionNameContext(this.context, this.state);
        this.enterRule(localContext, 1344, MySQLParser.RULE_functionName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8904;
            this.qualifiedIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionRef(): FunctionRefContext {
        let localContext = new FunctionRefContext(this.context, this.state);
        this.enterRule(localContext, 1346, MySQLParser.RULE_functionRef);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8906;
            this.qualifiedIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public triggerName(): TriggerNameContext {
        let localContext = new TriggerNameContext(this.context, this.state);
        this.enterRule(localContext, 1348, MySQLParser.RULE_triggerName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8908;
            this.qualifiedIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public triggerRef(): TriggerRefContext {
        let localContext = new TriggerRefContext(this.context, this.state);
        this.enterRule(localContext, 1350, MySQLParser.RULE_triggerRef);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8910;
            this.qualifiedIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public viewName(): ViewNameContext {
        let localContext = new ViewNameContext(this.context, this.state);
        this.enterRule(localContext, 1352, MySQLParser.RULE_viewName);
        try {
            this.state = 8914;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1127, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8912;
                this.qualifiedIdentifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8913;
                this.dotIdentifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public viewRef(): ViewRefContext {
        let localContext = new ViewRefContext(this.context, this.state);
        this.enterRule(localContext, 1354, MySQLParser.RULE_viewRef);
        try {
            this.state = 8918;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1128, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8916;
                this.qualifiedIdentifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8917;
                this.dotIdentifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tablespaceName(): TablespaceNameContext {
        let localContext = new TablespaceNameContext(this.context, this.state);
        this.enterRule(localContext, 1356, MySQLParser.RULE_tablespaceName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8920;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tablespaceRef(): TablespaceRefContext {
        let localContext = new TablespaceRefContext(this.context, this.state);
        this.enterRule(localContext, 1358, MySQLParser.RULE_tablespaceRef);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8922;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public logfileGroupName(): LogfileGroupNameContext {
        let localContext = new LogfileGroupNameContext(this.context, this.state);
        this.enterRule(localContext, 1360, MySQLParser.RULE_logfileGroupName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8924;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public logfileGroupRef(): LogfileGroupRefContext {
        let localContext = new LogfileGroupRefContext(this.context, this.state);
        this.enterRule(localContext, 1362, MySQLParser.RULE_logfileGroupRef);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8926;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public eventName(): EventNameContext {
        let localContext = new EventNameContext(this.context, this.state);
        this.enterRule(localContext, 1364, MySQLParser.RULE_eventName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8928;
            this.qualifiedIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public eventRef(): EventRefContext {
        let localContext = new EventRefContext(this.context, this.state);
        this.enterRule(localContext, 1366, MySQLParser.RULE_eventRef);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8930;
            this.qualifiedIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public udfName(): UdfNameContext {
        let localContext = new UdfNameContext(this.context, this.state);
        this.enterRule(localContext, 1368, MySQLParser.RULE_udfName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8932;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public serverName(): ServerNameContext {
        let localContext = new ServerNameContext(this.context, this.state);
        this.enterRule(localContext, 1370, MySQLParser.RULE_serverName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8934;
            this.textOrIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public serverRef(): ServerRefContext {
        let localContext = new ServerRefContext(this.context, this.state);
        this.enterRule(localContext, 1372, MySQLParser.RULE_serverRef);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8936;
            this.textOrIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public engineRef(): EngineRefContext {
        let localContext = new EngineRefContext(this.context, this.state);
        this.enterRule(localContext, 1374, MySQLParser.RULE_engineRef);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8938;
            this.textOrIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableName(): TableNameContext {
        let localContext = new TableNameContext(this.context, this.state);
        this.enterRule(localContext, 1376, MySQLParser.RULE_tableName);
        try {
            this.state = 8942;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1129, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8940;
                this.qualifiedIdentifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8941;
                this.dotIdentifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public filterTableRef(): FilterTableRefContext {
        let localContext = new FilterTableRefContext(this.context, this.state);
        this.enterRule(localContext, 1378, MySQLParser.RULE_filterTableRef);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8944;
            this.schemaRef();
            this.state = 8945;
            this.dotIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableRefWithWildcard(): TableRefWithWildcardContext {
        let localContext = new TableRefWithWildcardContext(this.context, this.state);
        this.enterRule(localContext, 1380, MySQLParser.RULE_tableRefWithWildcard);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8947;
            this.identifier();
            this.state = 8955;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1131, this.context) ) {
            case 1:
                {
                this.state = 8948;
                this.match(MySQLParser.DOT_SYMBOL);
                this.state = 8949;
                this.match(MySQLParser.MULT_OPERATOR);
                }
                break;
            case 2:
                {
                this.state = 8950;
                this.dotIdentifier();
                this.state = 8953;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 28) {
                    {
                    this.state = 8951;
                    this.match(MySQLParser.DOT_SYMBOL);
                    this.state = 8952;
                    this.match(MySQLParser.MULT_OPERATOR);
                    }
                }

                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableRef(): TableRefContext {
        let localContext = new TableRefContext(this.context, this.state);
        this.enterRule(localContext, 1382, MySQLParser.RULE_tableRef);
        try {
            this.state = 8959;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1132, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8957;
                this.qualifiedIdentifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8958;
                this.dotIdentifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableRefList(): TableRefListContext {
        let localContext = new TableRefListContext(this.context, this.state);
        this.enterRule(localContext, 1384, MySQLParser.RULE_tableRefList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8961;
            this.tableRef();
            this.state = 8966;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 29) {
                {
                {
                this.state = 8962;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 8963;
                this.tableRef();
                }
                }
                this.state = 8968;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableAliasRefList(): TableAliasRefListContext {
        let localContext = new TableAliasRefListContext(this.context, this.state);
        this.enterRule(localContext, 1386, MySQLParser.RULE_tableAliasRefList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8969;
            this.tableRefWithWildcard();
            this.state = 8974;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 29) {
                {
                {
                this.state = 8970;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 8971;
                this.tableRefWithWildcard();
                }
                }
                this.state = 8976;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public parameterName(): ParameterNameContext {
        let localContext = new ParameterNameContext(this.context, this.state);
        this.enterRule(localContext, 1388, MySQLParser.RULE_parameterName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8977;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public labelIdentifier(): LabelIdentifierContext {
        let localContext = new LabelIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 1390, MySQLParser.RULE_labelIdentifier);
        try {
            this.state = 8981;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1135, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8979;
                this.pureIdentifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8980;
                this.labelKeyword();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public labelRef(): LabelRefContext {
        let localContext = new LabelRefContext(this.context, this.state);
        this.enterRule(localContext, 1392, MySQLParser.RULE_labelRef);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8983;
            this.labelIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public roleIdentifier(): RoleIdentifierContext {
        let localContext = new RoleIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 1394, MySQLParser.RULE_roleIdentifier);
        try {
            this.state = 8987;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1136, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8985;
                this.pureIdentifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8986;
                this.roleKeyword();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pluginRef(): PluginRefContext {
        let localContext = new PluginRefContext(this.context, this.state);
        this.enterRule(localContext, 1396, MySQLParser.RULE_pluginRef);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8989;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public componentRef(): ComponentRefContext {
        let localContext = new ComponentRefContext(this.context, this.state);
        this.enterRule(localContext, 1398, MySQLParser.RULE_componentRef);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8991;
            this.textStringLiteral();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public resourceGroupRef(): ResourceGroupRefContext {
        let localContext = new ResourceGroupRefContext(this.context, this.state);
        this.enterRule(localContext, 1400, MySQLParser.RULE_resourceGroupRef);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8993;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowName(): WindowNameContext {
        let localContext = new WindowNameContext(this.context, this.state);
        this.enterRule(localContext, 1402, MySQLParser.RULE_windowName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8995;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pureIdentifier(): PureIdentifierContext {
        let localContext = new PureIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 1404, MySQLParser.RULE_pureIdentifier);
        let _la: number;
        try {
            this.state = 9000;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1137, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8997;
                _la = this.tokenStream.LA(1);
                if(!(_la === 820 || _la === 822)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8998;
                if (!(this.isSqlModeActive(SqlMode.AnsiQuotes))) {
                    throw this.createFailedPredicateException("this.isSqlModeActive(SqlMode.AnsiQuotes)");
                }
                this.state = 8999;
                this.match(MySQLParser.DOUBLE_QUOTED_TEXT);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifier(): IdentifierContext {
        let localContext = new IdentifierContext(this.context, this.state);
        this.enterRule(localContext, 1406, MySQLParser.RULE_identifier);
        try {
            this.state = 9004;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1138, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 9002;
                this.pureIdentifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 9003;
                this.identifierKeyword();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifierList(): IdentifierListContext {
        let localContext = new IdentifierListContext(this.context, this.state);
        this.enterRule(localContext, 1408, MySQLParser.RULE_identifierList);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9006;
            this.identifier();
            this.state = 9011;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 1139, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 9007;
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.state = 9008;
                    this.identifier();
                    }
                    }
                }
                this.state = 9013;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 1139, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifierListWithParentheses(): IdentifierListWithParenthesesContext {
        let localContext = new IdentifierListWithParenthesesContext(this.context, this.state);
        this.enterRule(localContext, 1410, MySQLParser.RULE_identifierListWithParentheses);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9014;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 9015;
            this.identifierList();
            this.state = 9016;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public qualifiedIdentifier(): QualifiedIdentifierContext {
        let localContext = new QualifiedIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 1412, MySQLParser.RULE_qualifiedIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9018;
            this.identifier();
            this.state = 9020;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1140, this.context) ) {
            case 1:
                {
                this.state = 9019;
                this.dotIdentifier();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simpleIdentifier(): SimpleIdentifierContext {
        let localContext = new SimpleIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 1414, MySQLParser.RULE_simpleIdentifier);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9022;
            this.identifier();
            this.state = 9027;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 28) {
                {
                this.state = 9023;
                this.dotIdentifier();
                this.state = 9025;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 28) {
                    {
                    this.state = 9024;
                    this.dotIdentifier();
                    }
                }

                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dotIdentifier(): DotIdentifierContext {
        let localContext = new DotIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 1416, MySQLParser.RULE_dotIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9029;
            this.match(MySQLParser.DOT_SYMBOL);
            this.state = 9030;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ulong_number(): Ulong_numberContext {
        let localContext = new Ulong_numberContext(this.context, this.state);
        this.enterRule(localContext, 1418, MySQLParser.RULE_ulong_number);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9032;
            _la = this.tokenStream.LA(1);
            if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 56) !== 0) || ((((_la - 44)) & ~0x1F) === 0 && ((1 << (_la - 44)) & 13) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public real_ulong_number(): Real_ulong_numberContext {
        let localContext = new Real_ulong_numberContext(this.context, this.state);
        this.enterRule(localContext, 1420, MySQLParser.RULE_real_ulong_number);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9034;
            _la = this.tokenStream.LA(1);
            if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 56) !== 0) || _la === 44)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ulonglongNumber(): UlonglongNumberContext {
        let localContext = new UlonglongNumberContext(this.context, this.state);
        this.enterRule(localContext, 1422, MySQLParser.RULE_ulonglongNumber);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9036;
            _la = this.tokenStream.LA(1);
            if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 56) !== 0) || _la === 46 || _la === 47)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public real_ulonglong_number(): Real_ulonglong_numberContext {
        let localContext = new Real_ulonglong_numberContext(this.context, this.state);
        this.enterRule(localContext, 1424, MySQLParser.RULE_real_ulonglong_number);
        try {
            this.state = 9043;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1143, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 9038;
                this.match(MySQLParser.INT_NUMBER);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 9039;
                if (!(this.serverVersion >= 80017)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80017");
                }
                this.state = 9040;
                this.match(MySQLParser.HEX_NUMBER);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 9041;
                this.match(MySQLParser.ULONGLONG_NUMBER);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 9042;
                this.match(MySQLParser.LONG_NUMBER);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public signedLiteral(): SignedLiteralContext {
        let localContext = new SignedLiteralContext(this.context, this.state);
        this.enterRule(localContext, 1426, MySQLParser.RULE_signedLiteral);
        try {
            this.state = 9050;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1144, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 9045;
                this.literal();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 9046;
                this.match(MySQLParser.PLUS_OPERATOR);
                this.state = 9047;
                this.ulong_number();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 9048;
                this.match(MySQLParser.MINUS_OPERATOR);
                this.state = 9049;
                this.ulong_number();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public signedLiteralOrNull(): SignedLiteralOrNullContext {
        let localContext = new SignedLiteralOrNullContext(this.context, this.state);
        this.enterRule(localContext, 1428, MySQLParser.RULE_signedLiteralOrNull);
        try {
            this.state = 9055;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1145, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 9052;
                this.signedLiteral();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 9053;
                if (!(this.serverVersion >= 80024)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80024");
                }
                this.state = 9054;
                this.nullAsLiteral();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public literal(): LiteralContext {
        let localContext = new LiteralContext(this.context, this.state);
        this.enterRule(localContext, 1430, MySQLParser.RULE_literal);
        let _la: number;
        try {
            this.state = 9066;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1147, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 9057;
                this.textLiteral();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 9058;
                this.numLiteral();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 9059;
                this.temporalLiteral();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 9060;
                this.nullLiteral();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 9061;
                this.boolLiteral();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 9063;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 819) {
                    {
                    this.state = 9062;
                    this.match(MySQLParser.UNDERSCORE_CHARSET);
                    }
                }

                this.state = 9065;
                _la = this.tokenStream.LA(1);
                if(!(_la === 44 || _la === 45)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public literalOrNull(): LiteralOrNullContext {
        let localContext = new LiteralOrNullContext(this.context, this.state);
        this.enterRule(localContext, 1432, MySQLParser.RULE_literalOrNull);
        try {
            this.state = 9071;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1148, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 9068;
                this.literal();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 9069;
                if (!(this.serverVersion >= 80024)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80024");
                }
                this.state = 9070;
                this.nullAsLiteral();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nullAsLiteral(): NullAsLiteralContext {
        let localContext = new NullAsLiteralContext(this.context, this.state);
        this.enterRule(localContext, 1434, MySQLParser.RULE_nullAsLiteral);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9073;
            this.match(MySQLParser.NULL_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stringList(): StringListContext {
        let localContext = new StringListContext(this.context, this.state);
        this.enterRule(localContext, 1436, MySQLParser.RULE_stringList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9075;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 9076;
            this.textString();
            this.state = 9081;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 29) {
                {
                {
                this.state = 9077;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 9078;
                this.textString();
                }
                }
                this.state = 9083;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 9084;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public textStringLiteral(): TextStringLiteralContext {
        let localContext = new TextStringLiteralContext(this.context, this.state);
        this.enterRule(localContext, 1438, MySQLParser.RULE_textStringLiteral);
        try {
            this.state = 9089;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1150, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 9086;
                localContext._value = this.match(MySQLParser.SINGLE_QUOTED_TEXT);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 9087;
                if (!(!this.isSqlModeActive(SqlMode.AnsiQuotes))) {
                    throw this.createFailedPredicateException("!this.isSqlModeActive(SqlMode.AnsiQuotes)");
                }
                this.state = 9088;
                localContext._value = this.match(MySQLParser.DOUBLE_QUOTED_TEXT);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public textString(): TextStringContext {
        let localContext = new TextStringContext(this.context, this.state);
        this.enterRule(localContext, 1440, MySQLParser.RULE_textString);
        try {
            this.state = 9094;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1151, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 9091;
                this.textStringLiteral();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 9092;
                this.match(MySQLParser.HEX_NUMBER);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 9093;
                this.match(MySQLParser.BIN_NUMBER);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public textStringHash(): TextStringHashContext {
        let localContext = new TextStringHashContext(this.context, this.state);
        this.enterRule(localContext, 1442, MySQLParser.RULE_textStringHash);
        try {
            this.state = 9099;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1152, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 9096;
                this.textStringLiteral();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 9097;
                if (!(this.serverVersion >= 80017)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80017");
                }
                this.state = 9098;
                this.match(MySQLParser.HEX_NUMBER);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public textLiteral(): TextLiteralContext {
        let localContext = new TextLiteralContext(this.context, this.state);
        this.enterRule(localContext, 1444, MySQLParser.RULE_textLiteral);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9106;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1154, this.context) ) {
            case 1:
                {
                this.state = 9102;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1153, this.context) ) {
                case 1:
                    {
                    this.state = 9101;
                    this.match(MySQLParser.UNDERSCORE_CHARSET);
                    }
                    break;
                }
                this.state = 9104;
                this.textStringLiteral();
                }
                break;
            case 2:
                {
                this.state = 9105;
                this.match(MySQLParser.NCHAR_TEXT);
                }
                break;
            }
            this.state = 9111;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 1155, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 9108;
                    this.textStringLiteral();
                    }
                    }
                }
                this.state = 9113;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 1155, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public textStringNoLinebreak(): TextStringNoLinebreakContext {
        let localContext = new TextStringNoLinebreakContext(this.context, this.state);
        this.enterRule(localContext, 1446, MySQLParser.RULE_textStringNoLinebreak);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9114;
            this.textStringLiteral();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public textStringLiteralList(): TextStringLiteralListContext {
        let localContext = new TextStringLiteralListContext(this.context, this.state);
        this.enterRule(localContext, 1448, MySQLParser.RULE_textStringLiteralList);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9116;
            this.textStringLiteral();
            this.state = 9121;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 1156, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 9117;
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.state = 9118;
                    this.textStringLiteral();
                    }
                    }
                }
                this.state = 9123;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 1156, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public numLiteral(): NumLiteralContext {
        let localContext = new NumLiteralContext(this.context, this.state);
        this.enterRule(localContext, 1450, MySQLParser.RULE_numLiteral);
        try {
            this.state = 9127;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.INT_NUMBER:
            case MySQLParser.LONG_NUMBER:
            case MySQLParser.ULONGLONG_NUMBER:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 9124;
                this.int64Literal();
                }
                break;
            case MySQLParser.DECIMAL_NUMBER:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 9125;
                this.match(MySQLParser.DECIMAL_NUMBER);
                }
                break;
            case MySQLParser.FLOAT_NUMBER:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 9126;
                this.match(MySQLParser.FLOAT_NUMBER);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public boolLiteral(): BoolLiteralContext {
        let localContext = new BoolLiteralContext(this.context, this.state);
        this.enterRule(localContext, 1452, MySQLParser.RULE_boolLiteral);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9129;
            _la = this.tokenStream.LA(1);
            if(!(_la === 218 || _la === 605)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nullLiteral(): NullLiteralContext {
        let localContext = new NullLiteralContext(this.context, this.state);
        this.enterRule(localContext, 1454, MySQLParser.RULE_nullLiteral);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9131;
            _la = this.tokenStream.LA(1);
            if(!(_la === 42 || _la === 395)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public int64Literal(): Int64LiteralContext {
        let localContext = new Int64LiteralContext(this.context, this.state);
        this.enterRule(localContext, 1456, MySQLParser.RULE_int64Literal);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9133;
            _la = this.tokenStream.LA(1);
            if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 56) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public temporalLiteral(): TemporalLiteralContext {
        let localContext = new TemporalLiteralContext(this.context, this.state);
        this.enterRule(localContext, 1458, MySQLParser.RULE_temporalLiteral);
        try {
            this.state = 9141;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.DATE_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 9135;
                this.match(MySQLParser.DATE_SYMBOL);
                this.state = 9136;
                this.match(MySQLParser.SINGLE_QUOTED_TEXT);
                }
                break;
            case MySQLParser.TIME_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 9137;
                this.match(MySQLParser.TIME_SYMBOL);
                this.state = 9138;
                this.match(MySQLParser.SINGLE_QUOTED_TEXT);
                }
                break;
            case MySQLParser.TIMESTAMP_SYMBOL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 9139;
                this.match(MySQLParser.TIMESTAMP_SYMBOL);
                this.state = 9140;
                this.match(MySQLParser.SINGLE_QUOTED_TEXT);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public floatOptions(): FloatOptionsContext {
        let localContext = new FloatOptionsContext(this.context, this.state);
        this.enterRule(localContext, 1460, MySQLParser.RULE_floatOptions);
        try {
            this.state = 9145;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1159, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 9143;
                this.fieldLength();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 9144;
                this.precision();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public standardFloatOptions(): StandardFloatOptionsContext {
        let localContext = new StandardFloatOptionsContext(this.context, this.state);
        this.enterRule(localContext, 1462, MySQLParser.RULE_standardFloatOptions);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9147;
            this.precision();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precision(): PrecisionContext {
        let localContext = new PrecisionContext(this.context, this.state);
        this.enterRule(localContext, 1464, MySQLParser.RULE_precision);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9149;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 9150;
            this.match(MySQLParser.INT_NUMBER);
            this.state = 9151;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 9152;
            this.match(MySQLParser.INT_NUMBER);
            this.state = 9153;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public textOrIdentifier(): TextOrIdentifierContext {
        let localContext = new TextOrIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 1466, MySQLParser.RULE_textOrIdentifier);
        try {
            this.state = 9157;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1160, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 9155;
                this.identifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 9156;
                this.textStringLiteral();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lValueIdentifier(): LValueIdentifierContext {
        let localContext = new LValueIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 1468, MySQLParser.RULE_lValueIdentifier);
        try {
            this.state = 9161;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1161, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 9159;
                this.pureIdentifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 9160;
                this.lValueKeyword();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public roleIdentifierOrText(): RoleIdentifierOrTextContext {
        let localContext = new RoleIdentifierOrTextContext(this.context, this.state);
        this.enterRule(localContext, 1470, MySQLParser.RULE_roleIdentifierOrText);
        try {
            this.state = 9165;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1162, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 9163;
                this.roleIdentifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 9164;
                this.textStringLiteral();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sizeNumber(): SizeNumberContext {
        let localContext = new SizeNumberContext(this.context, this.state);
        this.enterRule(localContext, 1472, MySQLParser.RULE_sizeNumber);
        try {
            this.state = 9169;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1163, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 9167;
                this.real_ulonglong_number();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 9168;
                this.pureIdentifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public parentheses(): ParenthesesContext {
        let localContext = new ParenthesesContext(this.context, this.state);
        this.enterRule(localContext, 1474, MySQLParser.RULE_parentheses);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9171;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 9172;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public equal(): EqualContext {
        let localContext = new EqualContext(this.context, this.state);
        this.enterRule(localContext, 1476, MySQLParser.RULE_equal);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9174;
            _la = this.tokenStream.LA(1);
            if(!(_la === 6 || _la === 7)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optionType(): OptionTypeContext {
        let localContext = new OptionTypeContext(this.context, this.state);
        this.enterRule(localContext, 1478, MySQLParser.RULE_optionType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9176;
            _la = this.tokenStream.LA(1);
            if(!(_la === 246 || _la === 312 || _la === 516 || _la === 666 || _la === 681)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rvalueSystemVariableType(): RvalueSystemVariableTypeContext {
        let localContext = new RvalueSystemVariableTypeContext(this.context, this.state);
        this.enterRule(localContext, 1480, MySQLParser.RULE_rvalueSystemVariableType);
        try {
            this.state = 9184;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySQLParser.GLOBAL_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 9178;
                this.match(MySQLParser.GLOBAL_SYMBOL);
                this.state = 9179;
                this.match(MySQLParser.DOT_SYMBOL);
                }
                break;
            case MySQLParser.LOCAL_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 9180;
                this.match(MySQLParser.LOCAL_SYMBOL);
                this.state = 9181;
                this.match(MySQLParser.DOT_SYMBOL);
                }
                break;
            case MySQLParser.SESSION_SYMBOL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 9182;
                this.match(MySQLParser.SESSION_SYMBOL);
                this.state = 9183;
                this.match(MySQLParser.DOT_SYMBOL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setVarIdentType(): SetVarIdentTypeContext {
        let localContext = new SetVarIdentTypeContext(this.context, this.state);
        this.enterRule(localContext, 1482, MySQLParser.RULE_setVarIdentType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9186;
            _la = this.tokenStream.LA(1);
            if(!(_la === 246 || _la === 312 || _la === 516 || _la === 666 || _la === 681)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 9187;
            this.match(MySQLParser.DOT_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonAttribute(): JsonAttributeContext {
        let localContext = new JsonAttributeContext(this.context, this.state);
        this.enterRule(localContext, 1484, MySQLParser.RULE_jsonAttribute);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9189;
            this.textStringLiteral();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifierKeyword(): IdentifierKeywordContext {
        let localContext = new IdentifierKeywordContext(this.context, this.state);
        this.enterRule(localContext, 1486, MySQLParser.RULE_identifierKeyword);
        try {
            this.state = 9207;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1167, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 9191;
                if (!(this.serverVersion < 80017)) {
                    throw this.createFailedPredicateException("this.serverVersion < 80017");
                }
                this.state = 9198;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1165, this.context) ) {
                case 1:
                    {
                    this.state = 9192;
                    this.labelKeyword();
                    }
                    break;
                case 2:
                    {
                    this.state = 9193;
                    this.roleOrIdentifierKeyword();
                    }
                    break;
                case 3:
                    {
                    this.state = 9194;
                    this.match(MySQLParser.EXECUTE_SYMBOL);
                    }
                    break;
                case 4:
                    {
                    this.state = 9195;
                    this.match(MySQLParser.SHUTDOWN_SYMBOL);
                    }
                    break;
                case 5:
                    {
                    this.state = 9196;
                    if (!(this.serverVersion >= 80011)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80011");
                    }
                    this.state = 9197;
                    this.match(MySQLParser.RESTART_SYMBOL);
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 9205;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1166, this.context) ) {
                case 1:
                    {
                    this.state = 9200;
                    this.identifierKeywordsUnambiguous();
                    }
                    break;
                case 2:
                    {
                    this.state = 9201;
                    this.identifierKeywordsAmbiguous1RolesAndLabels();
                    }
                    break;
                case 3:
                    {
                    this.state = 9202;
                    this.identifierKeywordsAmbiguous2Labels();
                    }
                    break;
                case 4:
                    {
                    this.state = 9203;
                    this.identifierKeywordsAmbiguous3Roles();
                    }
                    break;
                case 5:
                    {
                    this.state = 9204;
                    this.identifierKeywordsAmbiguous4SystemVariables();
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifierKeywordsAmbiguous1RolesAndLabels(): IdentifierKeywordsAmbiguous1RolesAndLabelsContext {
        let localContext = new IdentifierKeywordsAmbiguous1RolesAndLabelsContext(this.context, this.state);
        this.enterRule(localContext, 1488, MySQLParser.RULE_identifierKeywordsAmbiguous1RolesAndLabels);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9209;
            _la = this.tokenStream.LA(1);
            if(!(_la === 208 || _la === 522 || _la === 722)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifierKeywordsAmbiguous2Labels(): IdentifierKeywordsAmbiguous2LabelsContext {
        let localContext = new IdentifierKeywordsAmbiguous2LabelsContext(this.context, this.state);
        this.enterRule(localContext, 1490, MySQLParser.RULE_identifierKeywordsAmbiguous2Labels);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9211;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & 100663809) !== 0) || ((((_la - 102)) & ~0x1F) === 0 && ((1 << (_la - 102)) & 2147811333) !== 0) || _la === 163 || _la === 183 || _la === 195 || ((((_la - 228)) & ~0x1F) === 0 && ((1 << (_la - 228)) & 75497475) !== 0) || ((((_la - 266)) & ~0x1F) === 0 && ((1 << (_la - 266)) & 2147485697) !== 0) || _la === 392 || _la === 433 || _la === 435 || ((((_la - 472)) & ~0x1F) === 0 && ((1 << (_la - 472)) & 16785409) !== 0) || ((((_la - 505)) & ~0x1F) === 0 && ((1 << (_la - 505)) & 2621441) !== 0) || _la === 553 || _la === 562 || ((((_la - 606)) & ~0x1F) === 0 && ((1 << (_la - 606)) & 1537) !== 0) || _la === 659 || _la === 685)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public labelKeyword(): LabelKeywordContext {
        let localContext = new LabelKeywordContext(this.context, this.state);
        this.enterRule(localContext, 1492, MySQLParser.RULE_labelKeyword);
        try {
            this.state = 9231;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1170, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 9213;
                if (!(this.serverVersion < 80017)) {
                    throw this.createFailedPredicateException("this.serverVersion < 80017");
                }
                this.state = 9224;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1168, this.context) ) {
                case 1:
                    {
                    this.state = 9214;
                    this.roleOrLabelKeyword();
                    }
                    break;
                case 2:
                    {
                    this.state = 9215;
                    this.match(MySQLParser.EVENT_SYMBOL);
                    }
                    break;
                case 3:
                    {
                    this.state = 9216;
                    this.match(MySQLParser.FILE_SYMBOL);
                    }
                    break;
                case 4:
                    {
                    this.state = 9217;
                    this.match(MySQLParser.NONE_SYMBOL);
                    }
                    break;
                case 5:
                    {
                    this.state = 9218;
                    this.match(MySQLParser.PROCESS_SYMBOL);
                    }
                    break;
                case 6:
                    {
                    this.state = 9219;
                    this.match(MySQLParser.PROXY_SYMBOL);
                    }
                    break;
                case 7:
                    {
                    this.state = 9220;
                    this.match(MySQLParser.RELOAD_SYMBOL);
                    }
                    break;
                case 8:
                    {
                    this.state = 9221;
                    this.match(MySQLParser.REPLICATION_SYMBOL);
                    }
                    break;
                case 9:
                    {
                    this.state = 9222;
                    this.match(MySQLParser.RESOURCE_SYMBOL);
                    }
                    break;
                case 10:
                    {
                    this.state = 9223;
                    this.match(MySQLParser.SUPER_SYMBOL);
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 9229;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1169, this.context) ) {
                case 1:
                    {
                    this.state = 9226;
                    this.identifierKeywordsUnambiguous();
                    }
                    break;
                case 2:
                    {
                    this.state = 9227;
                    this.identifierKeywordsAmbiguous3Roles();
                    }
                    break;
                case 3:
                    {
                    this.state = 9228;
                    this.identifierKeywordsAmbiguous4SystemVariables();
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifierKeywordsAmbiguous3Roles(): IdentifierKeywordsAmbiguous3RolesContext {
        let localContext = new IdentifierKeywordsAmbiguous3RolesContext(this.context, this.state);
        this.enterRule(localContext, 1494, MySQLParser.RULE_identifierKeywordsAmbiguous3Roles);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9233;
            _la = this.tokenStream.LA(1);
            if(!(_la === 205 || _la === 222 || _la === 389 || ((((_la - 441)) & ~0x1F) === 0 && ((1 << (_la - 441)) & 134217745) !== 0) || _la === 476 || _la === 575 || _la === 717)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifierKeywordsUnambiguous(): IdentifierKeywordsUnambiguousContext {
        let localContext = new IdentifierKeywordsUnambiguousContext(this.context, this.state);
        this.enterRule(localContext, 1496, MySQLParser.RULE_identifierKeywordsUnambiguous);
        let _la: number;
        try {
            this.state = 9240;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1171, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 9235;
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 49)) & ~0x1F) === 0 && ((1 << (_la - 49)) & 553395451) !== 0) || ((((_la - 81)) & ~0x1F) === 0 && ((1 << (_la - 81)) & 2115707065) !== 0) || ((((_la - 113)) & ~0x1F) === 0 && ((1 << (_la - 113)) & 1110368091) !== 0) || ((((_la - 148)) & ~0x1F) === 0 && ((1 << (_la - 148)) & 4166533745) !== 0) || ((((_la - 186)) & ~0x1F) === 0 && ((1 << (_la - 186)) & 1983315271) !== 0) || ((((_la - 219)) & ~0x1F) === 0 && ((1 << (_la - 219)) & 664977651) !== 0) || ((((_la - 252)) & ~0x1F) === 0 && ((1 << (_la - 252)) & 562341425) !== 0) || ((((_la - 285)) & ~0x1F) === 0 && ((1 << (_la - 285)) & 3540820635) !== 0) || ((((_la - 322)) & ~0x1F) === 0 && ((1 << (_la - 322)) & 1870397437) !== 0) || ((((_la - 357)) & ~0x1F) === 0 && ((1 << (_la - 357)) & 4261369439) !== 0) || ((((_la - 393)) & ~0x1F) === 0 && ((1 << (_la - 393)) & 3212876457) !== 0) || ((((_la - 425)) & ~0x1F) === 0 && ((1 << (_la - 425)) & 2312001663) !== 0) || ((((_la - 457)) & ~0x1F) === 0 && ((1 << (_la - 457)) & 1206997991) !== 0) || ((((_la - 489)) & ~0x1F) === 0 && ((1 << (_la - 489)) & 2520168215) !== 0) || ((((_la - 525)) & ~0x1F) === 0 && ((1 << (_la - 525)) & 3935683061) !== 0) || ((((_la - 557)) & ~0x1F) === 0 && ((1 << (_la - 557)) & 2067299905) !== 0) || ((((_la - 589)) & ~0x1F) === 0 && ((1 << (_la - 589)) & 1105997947) !== 0) || ((((_la - 622)) & ~0x1F) === 0 && ((1 << (_la - 622)) & 256004213) !== 0) || ((((_la - 654)) & ~0x1F) === 0 && ((1 << (_la - 654)) & 864412887) !== 0) || ((((_la - 688)) & ~0x1F) === 0 && ((1 << (_la - 688)) & 2680595973) !== 0) || ((((_la - 720)) & ~0x1F) === 0 && ((1 << (_la - 720)) & 127385595) !== 0) || ((((_la - 753)) & ~0x1F) === 0 && ((1 << (_la - 753)) & 4294967023) !== 0) || ((((_la - 785)) & ~0x1F) === 0 && ((1 << (_la - 785)) & 262143) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 9236;
                if (!(this.serverVersion >= 80019)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80019");
                }
                this.state = 9237;
                _la = this.tokenStream.LA(1);
                if(!(_la === 592 || _la === 595 || ((((_la - 739)) & ~0x1F) === 0 && ((1 << (_la - 739)) & 16381) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 9238;
                if (!(this.serverVersion >= 80200)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80200");
                }
                this.state = 9239;
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 804)) & ~0x1F) === 0 && ((1 << (_la - 804)) & 2237) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public roleKeyword(): RoleKeywordContext {
        let localContext = new RoleKeywordContext(this.context, this.state);
        this.enterRule(localContext, 1498, MySQLParser.RULE_roleKeyword);
        try {
            this.state = 9252;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1174, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 9242;
                if (!(this.serverVersion < 80017)) {
                    throw this.createFailedPredicateException("this.serverVersion < 80017");
                }
                this.state = 9245;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1172, this.context) ) {
                case 1:
                    {
                    this.state = 9243;
                    this.roleOrLabelKeyword();
                    }
                    break;
                case 2:
                    {
                    this.state = 9244;
                    this.roleOrIdentifierKeyword();
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 9250;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1173, this.context) ) {
                case 1:
                    {
                    this.state = 9247;
                    this.identifierKeywordsUnambiguous();
                    }
                    break;
                case 2:
                    {
                    this.state = 9248;
                    this.identifierKeywordsAmbiguous2Labels();
                    }
                    break;
                case 3:
                    {
                    this.state = 9249;
                    this.identifierKeywordsAmbiguous4SystemVariables();
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lValueKeyword(): LValueKeywordContext {
        let localContext = new LValueKeywordContext(this.context, this.state);
        this.enterRule(localContext, 1500, MySQLParser.RULE_lValueKeyword);
        try {
            this.state = 9258;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1175, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 9254;
                this.identifierKeywordsUnambiguous();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 9255;
                this.identifierKeywordsAmbiguous1RolesAndLabels();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 9256;
                this.identifierKeywordsAmbiguous2Labels();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 9257;
                this.identifierKeywordsAmbiguous3Roles();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifierKeywordsAmbiguous4SystemVariables(): IdentifierKeywordsAmbiguous4SystemVariablesContext {
        let localContext = new IdentifierKeywordsAmbiguous4SystemVariablesContext(this.context, this.state);
        this.enterRule(localContext, 1502, MySQLParser.RULE_identifierKeywordsAmbiguous4SystemVariables);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9260;
            _la = this.tokenStream.LA(1);
            if(!(_la === 246 || _la === 312 || _la === 516 || _la === 666 || _la === 681)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public roleOrIdentifierKeyword(): RoleOrIdentifierKeywordContext {
        let localContext = new RoleOrIdentifierKeywordContext(this.context, this.state);
        this.enterRule(localContext, 1504, MySQLParser.RULE_roleOrIdentifierKeyword);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9262;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 49)) & ~0x1F) === 0 && ((1 << (_la - 49)) & 42009601) !== 0) || ((((_la - 90)) & ~0x1F) === 0 && ((1 << (_la - 90)) & 1342722051) !== 0) || _la === 133 || _la === 163 || _la === 183 || _la === 195 || ((((_la - 228)) & ~0x1F) === 0 && ((1 << (_la - 228)) & 343949347) !== 0) || _la === 277 || _la === 297 || ((((_la - 392)) & ~0x1F) === 0 && ((1 << (_la - 392)) & 2298552321) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & 21) !== 0) || ((((_la - 469)) & ~0x1F) === 0 && ((1 << (_la - 469)) & 134545417) !== 0) || ((((_la - 505)) & ~0x1F) === 0 && ((1 << (_la - 505)) & 103288865) !== 0) || _la === 553 || _la === 562 || ((((_la - 606)) & ~0x1F) === 0 && ((1 << (_la - 606)) & 263681) !== 0) || ((((_la - 656)) & ~0x1F) === 0 && ((1 << (_la - 656)) & 536897545) !== 0) || ((((_la - 728)) & ~0x1F) === 0 && ((1 << (_la - 728)) & 15) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public roleOrLabelKeyword(): RoleOrLabelKeywordContext {
        let localContext = new RoleOrLabelKeywordContext(this.context, this.state);
        this.enterRule(localContext, 1506, MySQLParser.RULE_roleOrLabelKeyword);
        let _la: number;
        try {
            this.state = 9267;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1176, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 9264;
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 50)) & ~0x1F) === 0 && ((1 << (_la - 50)) & 2419986557) !== 0) || ((((_la - 84)) & ~0x1F) === 0 && ((1 << (_la - 84)) & 1841521687) !== 0) || ((((_la - 116)) & ~0x1F) === 0 && ((1 << (_la - 116)) & 138796011) !== 0) || ((((_la - 148)) & ~0x1F) === 0 && ((1 << (_la - 148)) & 4166533745) !== 0) || ((((_la - 186)) & ~0x1F) === 0 && ((1 << (_la - 186)) & 1914109255) !== 0) || ((((_la - 219)) & ~0x1F) === 0 && ((1 << (_la - 219)) & 790790387) !== 0) || ((((_la - 252)) & ~0x1F) === 0 && ((1 << (_la - 252)) & 562341409) !== 0) || ((((_la - 285)) & ~0x1F) === 0 && ((1 << (_la - 285)) & 3675038363) !== 0) || ((((_la - 322)) & ~0x1F) === 0 && ((1 << (_la - 322)) & 1870397437) !== 0) || ((((_la - 357)) & ~0x1F) === 0 && ((1 << (_la - 357)) & 4261369439) !== 0) || ((((_la - 393)) & ~0x1F) === 0 && ((1 << (_la - 393)) & 3137340073) !== 0) || ((((_la - 425)) & ~0x1F) === 0 && ((1 << (_la - 425)) & 2312001599) !== 0) || ((((_la - 457)) & ~0x1F) === 0 && ((1 << (_la - 457)) & 133252071) !== 0) || ((((_la - 489)) & ~0x1F) === 0 && ((1 << (_la - 489)) & 2383853335) !== 0) || ((((_la - 525)) & ~0x1F) === 0 && ((1 << (_la - 525)) & 3935682965) !== 0) || ((((_la - 557)) & ~0x1F) === 0 && ((1 << (_la - 557)) & 2067562049) !== 0) || ((((_la - 589)) & ~0x1F) === 0 && ((1 << (_la - 589)) & 1107046523) !== 0) || ((((_la - 622)) & ~0x1F) === 0 && ((1 << (_la - 622)) & 256000113) !== 0) || ((((_la - 655)) & ~0x1F) === 0 && ((1 << (_la - 655)) & 969015913) !== 0) || ((((_la - 688)) & ~0x1F) === 0 && ((1 << (_la - 688)) & 2680595973) !== 0) || ((((_la - 720)) & ~0x1F) === 0 && ((1 << (_la - 720)) & 110769) !== 0) || _la === 757)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 9265;
                if (!(this.serverVersion >= 80014)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80014");
                }
                this.state = 9266;
                this.match(MySQLParser.ADMIN_SYMBOL);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public override sempred(localContext: antlr.ParserRuleContext | null, ruleIndex: number, predIndex: number): boolean {
        switch (ruleIndex) {
        case 2:
            return this.alterStatement_sempred(localContext as AlterStatementContext, predIndex);
        case 14:
            return this.standaloneAlterCommands_sempred(localContext as StandaloneAlterCommandsContext, predIndex);
        case 18:
            return this.alterListItem_sempred(localContext as AlterListItemContext, predIndex);
        case 28:
            return this.alterTablespace_sempred(localContext as AlterTablespaceContext, predIndex);
        case 33:
            return this.alterTablespaceOption_sempred(localContext as AlterTablespaceOptionContext, predIndex);
        case 39:
            return this.alterInstanceStatement_sempred(localContext as AlterInstanceStatementContext, predIndex);
        case 40:
            return this.createStatement_sempred(localContext as CreateStatementContext, predIndex);
        case 42:
            return this.createDatabaseOption_sempred(localContext as CreateDatabaseOptionContext, predIndex);
        case 53:
            return this.storedRoutineBody_sempred(localContext as StoredRoutineBodyContext, predIndex);
        case 58:
            return this.routineOption_sempred(localContext as RoutineOptionContext, predIndex);
        case 70:
            return this.tsDataFileName_sempred(localContext as TsDataFileNameContext, predIndex);
        case 73:
            return this.tablespaceOption_sempred(localContext as TablespaceOptionContext, predIndex);
        case 96:
            return this.dropStatement_sempred(localContext as DropStatementContext, predIndex);
        case 117:
            return this.deleteStatement_sempred(localContext as DeleteStatementContext, predIndex);
        case 131:
            return this.valuesReference_sempred(localContext as ValuesReferenceContext, predIndex);
        case 136:
            return this.loadFrom_sempred(localContext as LoadFromContext, predIndex);
        case 137:
            return this.loadSourceType_sempred(localContext as LoadSourceTypeContext, predIndex);
        case 138:
            return this.sourceCount_sempred(localContext as SourceCountContext, predIndex);
        case 139:
            return this.sourceOrder_sempred(localContext as SourceOrderContext, predIndex);
        case 144:
            return this.loadAlgorithm_sempred(localContext as LoadAlgorithmContext, predIndex);
        case 145:
            return this.loadParallel_sempred(localContext as LoadParallelContext, predIndex);
        case 146:
            return this.loadMemory_sempred(localContext as LoadMemoryContext, predIndex);
        case 149:
            return this.selectStatementWithInto_sempred(localContext as SelectStatementWithIntoContext, predIndex);
        case 151:
            return this.queryExpressionBody_sempred(localContext as QueryExpressionBodyContext, predIndex);
        case 153:
            return this.queryPrimary_sempred(localContext as QueryPrimaryContext, predIndex);
        case 164:
            return this.qualifyClause_sempred(localContext as QualifyClauseContext, predIndex);
        case 178:
            return this.groupByClause_sempred(localContext as GroupByClauseContext, predIndex);
        case 188:
            return this.lockingClauseList_sempred(localContext as LockingClauseListContext, predIndex);
        case 196:
            return this.tableReference_sempred(localContext as TableReferenceContext, predIndex);
        case 202:
            return this.tableFactor_sempred(localContext as TableFactorContext, predIndex);
        case 205:
            return this.derivedTable_sempred(localContext as DerivedTableContext, predIndex);
        case 209:
            return this.jtColumn_sempred(localContext as JtColumnContext, predIndex);
        case 216:
            return this.tableAlias_sempred(localContext as TableAliasContext, predIndex);
        case 240:
            return this.masterOrBinaryLogsAndGtids_sempred(localContext as MasterOrBinaryLogsAndGtidsContext, predIndex);
        case 243:
            return this.changeReplicationSource_sempred(localContext as ChangeReplicationSourceContext, predIndex);
        case 246:
            return this.sourceDefinition_sempred(localContext as SourceDefinitionContext, predIndex);
        case 306:
            return this.cloneStatement_sempred(localContext as CloneStatementContext, predIndex);
        case 310:
            return this.alterUserStatement_sempred(localContext as AlterUserStatementContext, predIndex);
        case 312:
            return this.alterUser_sempred(localContext as AlterUserContext, predIndex);
        case 316:
            return this.createUserTail_sempred(localContext as CreateUserTailContext, predIndex);
        case 321:
            return this.accountLockPasswordExpireOptions_sempred(localContext as AccountLockPasswordExpireOptionsContext, predIndex);
        case 325:
            return this.grantTargetList_sempred(localContext as GrantTargetListContext, predIndex);
        case 330:
            return this.versionedRequireClause_sempred(localContext as VersionedRequireClauseContext, predIndex);
        case 332:
            return this.revokeStatement_sempred(localContext as RevokeStatementContext, predIndex);
        case 336:
            return this.grantIdentifier_sempred(localContext as GrantIdentifierContext, predIndex);
        case 339:
            return this.grantOption_sempred(localContext as GrantOptionContext, predIndex);
        case 344:
            return this.histogramAutoUpdate_sempred(localContext as HistogramAutoUpdateContext, predIndex);
        case 345:
            return this.histogramUpdateParam_sempred(localContext as HistogramUpdateParamContext, predIndex);
        case 346:
            return this.histogramNumBuckets_sempred(localContext as HistogramNumBucketsContext, predIndex);
        case 355:
            return this.installSetValueList_sempred(localContext as InstallSetValueListContext, predIndex);
        case 357:
            return this.startOptionValueList_sempred(localContext as StartOptionValueListContext, predIndex);
        case 362:
            return this.optionValueNoOptionType_sempred(localContext as OptionValueNoOptionTypeContext, predIndex);
        case 374:
            return this.showParseTreeStatement_sempred(localContext as ShowParseTreeStatementContext, predIndex);
        case 446:
            return this.utilityStatement_sempred(localContext as UtilityStatementContext, predIndex);
        case 448:
            return this.explainStatement_sempred(localContext as ExplainStatementContext, predIndex);
        case 449:
            return this.explainOptions_sempred(localContext as ExplainOptionsContext, predIndex);
        case 455:
            return this.expr_sempred(localContext as ExprContext, predIndex);
        case 456:
            return this.boolPri_sempred(localContext as BoolPriContext, predIndex);
        case 458:
            return this.predicate_sempred(localContext as PredicateContext, predIndex);
        case 460:
            return this.bitExpr_sempred(localContext as BitExprContext, predIndex);
        case 461:
            return this.simpleExpr_sempred(localContext as SimpleExprContext, predIndex);
        case 462:
            return this.arrayCast_sempred(localContext as ArrayCastContext, predIndex);
        case 466:
            return this.windowFunctionCall_sempred(localContext as WindowFunctionCallContext, predIndex);
        case 469:
            return this.tablesampleClause_sempred(localContext as TablesampleClauseContext, predIndex);
        case 471:
            return this.leadLagInfo_sempred(localContext as LeadLagInfoContext, predIndex);
        case 480:
            return this.runtimeFunctionCall_sempred(localContext as RuntimeFunctionCallContext, predIndex);
        case 496:
            return this.lvalueVariable_sempred(localContext as LvalueVariableContext, predIndex);
        case 501:
            return this.castType_sempred(localContext as CastTypeContext, predIndex);
        case 557:
            return this.checkOrReferences_sempred(localContext as CheckOrReferencesContext, predIndex);
        case 559:
            return this.constraintEnforcement_sempred(localContext as ConstraintEnforcementContext, predIndex);
        case 563:
            return this.columnAttribute_sempred(localContext as ColumnAttributeContext, predIndex);
        case 574:
            return this.keyPartOrExpression_sempred(localContext as KeyPartOrExpressionContext, predIndex);
        case 577:
            return this.commonIndexOption_sempred(localContext as CommonIndexOptionContext, predIndex);
        case 594:
            return this.charsetName_sempred(localContext as CharsetNameContext, predIndex);
        case 595:
            return this.collationName_sempred(localContext as CollationNameContext, predIndex);
        case 600:
            return this.createTableOption_sempred(localContext as CreateTableOptionContext, predIndex);
        case 619:
            return this.persistedVariableIdentifier_sempred(localContext as PersistedVariableIdentifierContext, predIndex);
        case 702:
            return this.pureIdentifier_sempred(localContext as PureIdentifierContext, predIndex);
        case 712:
            return this.real_ulonglong_number_sempred(localContext as Real_ulonglong_numberContext, predIndex);
        case 714:
            return this.signedLiteralOrNull_sempred(localContext as SignedLiteralOrNullContext, predIndex);
        case 716:
            return this.literalOrNull_sempred(localContext as LiteralOrNullContext, predIndex);
        case 719:
            return this.textStringLiteral_sempred(localContext as TextStringLiteralContext, predIndex);
        case 721:
            return this.textStringHash_sempred(localContext as TextStringHashContext, predIndex);
        case 743:
            return this.identifierKeyword_sempred(localContext as IdentifierKeywordContext, predIndex);
        case 746:
            return this.labelKeyword_sempred(localContext as LabelKeywordContext, predIndex);
        case 748:
            return this.identifierKeywordsUnambiguous_sempred(localContext as IdentifierKeywordsUnambiguousContext, predIndex);
        case 749:
            return this.roleKeyword_sempred(localContext as RoleKeywordContext, predIndex);
        case 753:
            return this.roleOrLabelKeyword_sempred(localContext as RoleOrLabelKeywordContext, predIndex);
        }
        return true;
    }
    private alterStatement_sempred(localContext: AlterStatementContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 0:
            return this.serverVersion >= 80014;
        }
        return true;
    }
    private standaloneAlterCommands_sempred(localContext: StandaloneAlterCommandsContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 1:
            return this.serverVersion >= 80014;
        }
        return true;
    }
    private alterListItem_sempred(localContext: AlterListItemContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 2:
            return this.serverVersion >= 80017;
        case 3:
            return this.serverVersion >= 80019;
        case 4:
            return this.serverVersion >= 80014;
        case 5:
            return this.serverVersion >= 80024;
        case 6:
            return this.serverVersion >= 80017;
        case 7:
            return this.serverVersion >= 80019;
        case 8:
            return this.serverVersion >= 80014;
        }
        return true;
    }
    private alterTablespace_sempred(localContext: AlterTablespaceContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 9:
            return this.serverVersion >= 80014;
        }
        return true;
    }
    private alterTablespaceOption_sempred(localContext: AlterTablespaceOptionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 10:
            return this.serverVersion >= 80024;
        }
        return true;
    }
    private alterInstanceStatement_sempred(localContext: AlterInstanceStatementContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 11:
            return this.serverVersion >= 80024;
        }
        return true;
    }
    private createStatement_sempred(localContext: CreateStatementContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 12:
            return this.serverVersion >= 80011;
        case 13:
            return this.serverVersion >= 80014;
        }
        return true;
    }
    private createDatabaseOption_sempred(localContext: CreateDatabaseOptionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 14:
            return this.serverVersion >= 80016;
        }
        return true;
    }
    private storedRoutineBody_sempred(localContext: StoredRoutineBodyContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 15:
            return this.serverVersion >= 80032 && this.supportMle;
        }
        return true;
    }
    private routineOption_sempred(localContext: RoutineOptionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 16:
            return this.serverVersion >= 80032;
        }
        return true;
    }
    private tsDataFileName_sempred(localContext: TsDataFileNameContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 17:
            return this.serverVersion >= 80014;
        }
        return true;
    }
    private tablespaceOption_sempred(localContext: TablespaceOptionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 18:
            return this.serverVersion >= 80014;
        }
        return true;
    }
    private dropStatement_sempred(localContext: DropStatementContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 19:
            return this.serverVersion >= 80011;
        case 20:
            return this.serverVersion >= 80014;
        }
        return true;
    }
    private deleteStatement_sempred(localContext: DeleteStatementContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 21:
            return this.serverVersion >= 80017;
        }
        return true;
    }
    private valuesReference_sempred(localContext: ValuesReferenceContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 22:
            return  this.serverVersion >= 80018;
        }
        return true;
    }
    private loadFrom_sempred(localContext: LoadFromContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 23:
            return this.serverVersion >= 80200;
        }
        return true;
    }
    private loadSourceType_sempred(localContext: LoadSourceTypeContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 24:
            return this.serverVersion >= 80200;
        }
        return true;
    }
    private sourceCount_sempred(localContext: SourceCountContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 25:
            return this.serverVersion >= 80200;
        }
        return true;
    }
    private sourceOrder_sempred(localContext: SourceOrderContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 26:
            return this.serverVersion >= 80200;
        }
        return true;
    }
    private loadAlgorithm_sempred(localContext: LoadAlgorithmContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 27:
            return this.serverVersion >= 80200;
        }
        return true;
    }
    private loadParallel_sempred(localContext: LoadParallelContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 28:
            return this.serverVersion >= 80200;
        }
        return true;
    }
    private loadMemory_sempred(localContext: LoadMemoryContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 29:
            return this.serverVersion >= 80200;
        }
        return true;
    }
    private selectStatementWithInto_sempred(localContext: SelectStatementWithIntoContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 30:
            return this.serverVersion >= 80024 && this.serverVersion < 80031;
        }
        return true;
    }
    private queryExpressionBody_sempred(localContext: QueryExpressionBodyContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 31:
            return this.serverVersion >= 80031;
        }
        return true;
    }
    private queryPrimary_sempred(localContext: QueryPrimaryContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 32:
            return this.serverVersion >= 80019;
        case 33:
            return this.serverVersion >= 80019;
        }
        return true;
    }
    private qualifyClause_sempred(localContext: QualifyClauseContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 34:
            return this.serverVersion >= 80200;
        }
        return true;
    }
    private groupByClause_sempred(localContext: GroupByClauseContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 35:
            return this.serverVersion >= 80032;
        }
        return true;
    }
    private lockingClauseList_sempred(localContext: LockingClauseListContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 36:
            return this.serverVersion >= 80031;
        }
        return true;
    }
    private tableReference_sempred(localContext: TableReferenceContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 37:
            return this.serverVersion < 80017;
        }
        return true;
    }
    private tableFactor_sempred(localContext: TableFactorContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 38:
            return this.serverVersion >= 80004;
        }
        return true;
    }
    private derivedTable_sempred(localContext: DerivedTableContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 39:
            return this.serverVersion >= 80014;
        }
        return true;
    }
    private jtColumn_sempred(localContext: JtColumnContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 40:
            return this.serverVersion >= 80014;
        }
        return true;
    }
    private tableAlias_sempred(localContext: TableAliasContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 41:
            return this.serverVersion < 80017;
        }
        return true;
    }
    private masterOrBinaryLogsAndGtids_sempred(localContext: MasterOrBinaryLogsAndGtidsContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 42:
            return this.serverVersion >= 80032;
        }
        return true;
    }
    private changeReplicationSource_sempred(localContext: ChangeReplicationSourceContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 43:
            return this.serverVersion >= 80024;
        }
        return true;
    }
    private sourceDefinition_sempred(localContext: SourceDefinitionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 44:
            return this.serverVersion >= 80024;
        case 45:
            return this.serverVersion >= 80024;
        case 46:
            return this.serverVersion >= 80027;
        }
        return true;
    }
    private cloneStatement_sempred(localContext: CloneStatementContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 47:
            return this.serverVersion >= 80014;
        }
        return true;
    }
    private alterUserStatement_sempred(localContext: AlterUserStatementContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 48:
            return this.serverVersion < 80014;
        case 49:
            return this.serverVersion >= 80014;
        }
        return true;
    }
    private alterUser_sempred(localContext: AlterUserContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 50:
            return this.serverVersion < 80025;
        case 51:
            return this.serverVersion >= 80025;
        }
        return true;
    }
    private createUserTail_sempred(localContext: CreateUserTailContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 52:
            return this.serverVersion >= 80024;
        }
        return true;
    }
    private accountLockPasswordExpireOptions_sempred(localContext: AccountLockPasswordExpireOptionsContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 53:
            return this.serverVersion >= 80014;
        }
        return true;
    }
    private grantTargetList_sempred(localContext: GrantTargetListContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 54:
            return this.serverVersion < 80011;
        case 55:
            return this.serverVersion >= 80011;
        }
        return true;
    }
    private versionedRequireClause_sempred(localContext: VersionedRequireClauseContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 56:
            return this.serverVersion < 80011;
        }
        return true;
    }
    private revokeStatement_sempred(localContext: RevokeStatementContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 57:
            return this.serverVersion >= 80031;
        case 58:
            return this.serverVersion >= 80031;
        }
        return true;
    }
    private grantIdentifier_sempred(localContext: GrantIdentifierContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 59:
            return this.serverVersion >= 80017;
        }
        return true;
    }
    private grantOption_sempred(localContext: GrantOptionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 60:
            return this.serverVersion < 80011;
        }
        return true;
    }
    private histogramAutoUpdate_sempred(localContext: HistogramAutoUpdateContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 61:
            return this.serverVersion >= 80200;
        }
        return true;
    }
    private histogramUpdateParam_sempred(localContext: HistogramUpdateParamContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 62:
            return this.serverVersion >= 80031;
        }
        return true;
    }
    private histogramNumBuckets_sempred(localContext: HistogramNumBucketsContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 63:
            return this.serverVersion >= 80200;
        }
        return true;
    }
    private installSetValueList_sempred(localContext: InstallSetValueListContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 64:
            return this.serverVersion >= 80032;
        }
        return true;
    }
    private startOptionValueList_sempred(localContext: StartOptionValueListContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 65:
            return this.serverVersion < 80014;
        case 66:
            return this.serverVersion >= 80018;
        }
        return true;
    }
    private optionValueNoOptionType_sempred(localContext: OptionValueNoOptionTypeContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 67:
            return this.serverVersion >= 80011;
        }
        return true;
    }
    private showParseTreeStatement_sempred(localContext: ShowParseTreeStatementContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 68:
            return this.serverVersion >= 80100;
        }
        return true;
    }
    private utilityStatement_sempred(localContext: UtilityStatementContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 69:
            return this.serverVersion >= 80011;
        }
        return true;
    }
    private explainStatement_sempred(localContext: ExplainStatementContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 70:
            return this.serverVersion >= 80032;
        }
        return true;
    }
    private explainOptions_sempred(localContext: ExplainOptionsContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 71:
            return this.serverVersion >= 80032;
        case 72:
            return this.serverVersion < 80012;
        case 73:
            return this.serverVersion >= 80018;
        case 74:
            return this.serverVersion >= 80019;
        }
        return true;
    }
    private expr_sempred(localContext: ExprContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 75:
            return this.precpred(this.context, 3);
        case 76:
            return this.precpred(this.context, 2);
        case 77:
            return this.precpred(this.context, 1);
        }
        return true;
    }
    private boolPri_sempred(localContext: BoolPriContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 78:
            return this.precpred(this.context, 3);
        case 79:
            return this.precpred(this.context, 2);
        case 80:
            return this.precpred(this.context, 1);
        }
        return true;
    }
    private predicate_sempred(localContext: PredicateContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 81:
            return this.serverVersion >= 80017;
        }
        return true;
    }
    private bitExpr_sempred(localContext: BitExprContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 82:
            return this.precpred(this.context, 7);
        case 83:
            return this.precpred(this.context, 6);
        case 84:
            return this.precpred(this.context, 5);
        case 85:
            return this.precpred(this.context, 3);
        case 86:
            return this.precpred(this.context, 2);
        case 87:
            return this.precpred(this.context, 1);
        case 88:
            return this.precpred(this.context, 4);
        }
        return true;
    }
    private simpleExpr_sempred(localContext: SimpleExprContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 89:
            return this.precpred(this.context, 16);
        case 90:
            return this.precpred(this.context, 24);
        }
        return true;
    }
    private arrayCast_sempred(localContext: ArrayCastContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 91:
            return this.serverVersion >= 80017;
        }
        return true;
    }
    private windowFunctionCall_sempred(localContext: WindowFunctionCallContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 92:
            return this.serverVersion < 80024;
        }
        return true;
    }
    private tablesampleClause_sempred(localContext: TablesampleClauseContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 93:
            return this.serverVersion >= 80200;
        }
        return true;
    }
    private leadLagInfo_sempred(localContext: LeadLagInfoContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 94:
            return this.serverVersion >= 80024;
        }
        return true;
    }
    private runtimeFunctionCall_sempred(localContext: RuntimeFunctionCallContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 95:
            return this.serverVersion >= 80032;
        case 96:
            return this.serverVersion < 80011;
        }
        return true;
    }
    private lvalueVariable_sempred(localContext: LvalueVariableContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 97:
            return this.serverVersion >= 80017;
        }
        return true;
    }
    private castType_sempred(localContext: CastTypeContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 98:
            return this.serverVersion >= 80024;
        case 99:
            return this.serverVersion >= 80017;
        case 100:
            return this.serverVersion >= 80017;
        case 101:
            return this.serverVersion >= 80027;
        }
        return true;
    }
    private checkOrReferences_sempred(localContext: CheckOrReferencesContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 102:
            return this.serverVersion < 80016;
        }
        return true;
    }
    private constraintEnforcement_sempred(localContext: ConstraintEnforcementContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 103:
            return  this.serverVersion >= 80017;
        }
        return true;
    }
    private columnAttribute_sempred(localContext: ColumnAttributeContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 104:
            return this.serverVersion >= 80014;
        case 105:
            return this.serverVersion >= 80013;
        case 106:
            return this.serverVersion >= 80017;
        case 107:
            return this.serverVersion >= 80017;
        case 108:
            return this.serverVersion >= 80024;
        case 109:
            return this.serverVersion >= 80024;
        case 110:
            return this.serverVersion >= 80024;
        }
        return true;
    }
    private keyPartOrExpression_sempred(localContext: KeyPartOrExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 111:
            return this.serverVersion >= 80013;
        }
        return true;
    }
    private commonIndexOption_sempred(localContext: CommonIndexOptionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 112:
            return this.serverVersion >= 80024;
        case 113:
            return this.serverVersion >= 80024;
        }
        return true;
    }
    private charsetName_sempred(localContext: CharsetNameContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 114:
            return this.serverVersion < 80011;
        }
        return true;
    }
    private collationName_sempred(localContext: CollationNameContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 115:
            return this.serverVersion < 80011;
        case 116:
            return this.serverVersion >= 80018;
        }
        return true;
    }
    private createTableOption_sempred(localContext: CreateTableOptionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 117:
            return this.serverVersion >= 80014;
        case 118:
            return this.serverVersion >= 80024;
        case 119:
            return this.serverVersion >= 80024;
        case 120:
            return this.serverVersion >= 80024;
        case 121:
            return this.serverVersion >= 80024;
        }
        return true;
    }
    private persistedVariableIdentifier_sempred(localContext: PersistedVariableIdentifierContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 122:
            return this.serverVersion >= 80032;
        }
        return true;
    }
    private pureIdentifier_sempred(localContext: PureIdentifierContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 123:
            return this.isSqlModeActive(SqlMode.AnsiQuotes);
        }
        return true;
    }
    private real_ulonglong_number_sempred(localContext: Real_ulonglong_numberContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 124:
            return this.serverVersion >= 80017;
        }
        return true;
    }
    private signedLiteralOrNull_sempred(localContext: SignedLiteralOrNullContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 125:
            return this.serverVersion >= 80024;
        }
        return true;
    }
    private literalOrNull_sempred(localContext: LiteralOrNullContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 126:
            return this.serverVersion >= 80024;
        }
        return true;
    }
    private textStringLiteral_sempred(localContext: TextStringLiteralContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 127:
            return !this.isSqlModeActive(SqlMode.AnsiQuotes);
        }
        return true;
    }
    private textStringHash_sempred(localContext: TextStringHashContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 128:
            return this.serverVersion >= 80017;
        }
        return true;
    }
    private identifierKeyword_sempred(localContext: IdentifierKeywordContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 129:
            return this.serverVersion < 80017;
        case 130:
            return this.serverVersion >= 80011;
        }
        return true;
    }
    private labelKeyword_sempred(localContext: LabelKeywordContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 131:
            return this.serverVersion < 80017;
        }
        return true;
    }
    private identifierKeywordsUnambiguous_sempred(localContext: IdentifierKeywordsUnambiguousContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 132:
            return this.serverVersion >= 80019;
        case 133:
            return this.serverVersion >= 80200;
        }
        return true;
    }
    private roleKeyword_sempred(localContext: RoleKeywordContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 134:
            return this.serverVersion < 80017;
        }
        return true;
    }
    private roleOrLabelKeyword_sempred(localContext: RoleOrLabelKeywordContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 135:
            return this.serverVersion >= 80014;
        }
        return true;
    }

    public static readonly _serializedATN: number[] = [
        4,1,833,9270,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,7,202,
        2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,2,208,
        7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
        2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,
        7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
        2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
        7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,
        2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,
        7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,
        2,247,7,247,2,248,7,248,2,249,7,249,2,250,7,250,2,251,7,251,2,252,
        7,252,2,253,7,253,2,254,7,254,2,255,7,255,2,256,7,256,2,257,7,257,
        2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,2,262,7,262,2,263,
        7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,2,268,7,268,
        2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,2,274,
        7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,7,279,
        2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,2,285,
        7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,
        2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,
        7,296,2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,
        2,302,7,302,2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,2,307,
        7,307,2,308,7,308,2,309,7,309,2,310,7,310,2,311,7,311,2,312,7,312,
        2,313,7,313,2,314,7,314,2,315,7,315,2,316,7,316,2,317,7,317,2,318,
        7,318,2,319,7,319,2,320,7,320,2,321,7,321,2,322,7,322,2,323,7,323,
        2,324,7,324,2,325,7,325,2,326,7,326,2,327,7,327,2,328,7,328,2,329,
        7,329,2,330,7,330,2,331,7,331,2,332,7,332,2,333,7,333,2,334,7,334,
        2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,2,339,7,339,2,340,
        7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,2,345,7,345,
        2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,7,350,2,351,
        7,351,2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,7,356,
        2,357,7,357,2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,2,362,
        7,362,2,363,7,363,2,364,7,364,2,365,7,365,2,366,7,366,2,367,7,367,
        2,368,7,368,2,369,7,369,2,370,7,370,2,371,7,371,2,372,7,372,2,373,
        7,373,2,374,7,374,2,375,7,375,2,376,7,376,2,377,7,377,2,378,7,378,
        2,379,7,379,2,380,7,380,2,381,7,381,2,382,7,382,2,383,7,383,2,384,
        7,384,2,385,7,385,2,386,7,386,2,387,7,387,2,388,7,388,2,389,7,389,
        2,390,7,390,2,391,7,391,2,392,7,392,2,393,7,393,2,394,7,394,2,395,
        7,395,2,396,7,396,2,397,7,397,2,398,7,398,2,399,7,399,2,400,7,400,
        2,401,7,401,2,402,7,402,2,403,7,403,2,404,7,404,2,405,7,405,2,406,
        7,406,2,407,7,407,2,408,7,408,2,409,7,409,2,410,7,410,2,411,7,411,
        2,412,7,412,2,413,7,413,2,414,7,414,2,415,7,415,2,416,7,416,2,417,
        7,417,2,418,7,418,2,419,7,419,2,420,7,420,2,421,7,421,2,422,7,422,
        2,423,7,423,2,424,7,424,2,425,7,425,2,426,7,426,2,427,7,427,2,428,
        7,428,2,429,7,429,2,430,7,430,2,431,7,431,2,432,7,432,2,433,7,433,
        2,434,7,434,2,435,7,435,2,436,7,436,2,437,7,437,2,438,7,438,2,439,
        7,439,2,440,7,440,2,441,7,441,2,442,7,442,2,443,7,443,2,444,7,444,
        2,445,7,445,2,446,7,446,2,447,7,447,2,448,7,448,2,449,7,449,2,450,
        7,450,2,451,7,451,2,452,7,452,2,453,7,453,2,454,7,454,2,455,7,455,
        2,456,7,456,2,457,7,457,2,458,7,458,2,459,7,459,2,460,7,460,2,461,
        7,461,2,462,7,462,2,463,7,463,2,464,7,464,2,465,7,465,2,466,7,466,
        2,467,7,467,2,468,7,468,2,469,7,469,2,470,7,470,2,471,7,471,2,472,
        7,472,2,473,7,473,2,474,7,474,2,475,7,475,2,476,7,476,2,477,7,477,
        2,478,7,478,2,479,7,479,2,480,7,480,2,481,7,481,2,482,7,482,2,483,
        7,483,2,484,7,484,2,485,7,485,2,486,7,486,2,487,7,487,2,488,7,488,
        2,489,7,489,2,490,7,490,2,491,7,491,2,492,7,492,2,493,7,493,2,494,
        7,494,2,495,7,495,2,496,7,496,2,497,7,497,2,498,7,498,2,499,7,499,
        2,500,7,500,2,501,7,501,2,502,7,502,2,503,7,503,2,504,7,504,2,505,
        7,505,2,506,7,506,2,507,7,507,2,508,7,508,2,509,7,509,2,510,7,510,
        2,511,7,511,2,512,7,512,2,513,7,513,2,514,7,514,2,515,7,515,2,516,
        7,516,2,517,7,517,2,518,7,518,2,519,7,519,2,520,7,520,2,521,7,521,
        2,522,7,522,2,523,7,523,2,524,7,524,2,525,7,525,2,526,7,526,2,527,
        7,527,2,528,7,528,2,529,7,529,2,530,7,530,2,531,7,531,2,532,7,532,
        2,533,7,533,2,534,7,534,2,535,7,535,2,536,7,536,2,537,7,537,2,538,
        7,538,2,539,7,539,2,540,7,540,2,541,7,541,2,542,7,542,2,543,7,543,
        2,544,7,544,2,545,7,545,2,546,7,546,2,547,7,547,2,548,7,548,2,549,
        7,549,2,550,7,550,2,551,7,551,2,552,7,552,2,553,7,553,2,554,7,554,
        2,555,7,555,2,556,7,556,2,557,7,557,2,558,7,558,2,559,7,559,2,560,
        7,560,2,561,7,561,2,562,7,562,2,563,7,563,2,564,7,564,2,565,7,565,
        2,566,7,566,2,567,7,567,2,568,7,568,2,569,7,569,2,570,7,570,2,571,
        7,571,2,572,7,572,2,573,7,573,2,574,7,574,2,575,7,575,2,576,7,576,
        2,577,7,577,2,578,7,578,2,579,7,579,2,580,7,580,2,581,7,581,2,582,
        7,582,2,583,7,583,2,584,7,584,2,585,7,585,2,586,7,586,2,587,7,587,
        2,588,7,588,2,589,7,589,2,590,7,590,2,591,7,591,2,592,7,592,2,593,
        7,593,2,594,7,594,2,595,7,595,2,596,7,596,2,597,7,597,2,598,7,598,
        2,599,7,599,2,600,7,600,2,601,7,601,2,602,7,602,2,603,7,603,2,604,
        7,604,2,605,7,605,2,606,7,606,2,607,7,607,2,608,7,608,2,609,7,609,
        2,610,7,610,2,611,7,611,2,612,7,612,2,613,7,613,2,614,7,614,2,615,
        7,615,2,616,7,616,2,617,7,617,2,618,7,618,2,619,7,619,2,620,7,620,
        2,621,7,621,2,622,7,622,2,623,7,623,2,624,7,624,2,625,7,625,2,626,
        7,626,2,627,7,627,2,628,7,628,2,629,7,629,2,630,7,630,2,631,7,631,
        2,632,7,632,2,633,7,633,2,634,7,634,2,635,7,635,2,636,7,636,2,637,
        7,637,2,638,7,638,2,639,7,639,2,640,7,640,2,641,7,641,2,642,7,642,
        2,643,7,643,2,644,7,644,2,645,7,645,2,646,7,646,2,647,7,647,2,648,
        7,648,2,649,7,649,2,650,7,650,2,651,7,651,2,652,7,652,2,653,7,653,
        2,654,7,654,2,655,7,655,2,656,7,656,2,657,7,657,2,658,7,658,2,659,
        7,659,2,660,7,660,2,661,7,661,2,662,7,662,2,663,7,663,2,664,7,664,
        2,665,7,665,2,666,7,666,2,667,7,667,2,668,7,668,2,669,7,669,2,670,
        7,670,2,671,7,671,2,672,7,672,2,673,7,673,2,674,7,674,2,675,7,675,
        2,676,7,676,2,677,7,677,2,678,7,678,2,679,7,679,2,680,7,680,2,681,
        7,681,2,682,7,682,2,683,7,683,2,684,7,684,2,685,7,685,2,686,7,686,
        2,687,7,687,2,688,7,688,2,689,7,689,2,690,7,690,2,691,7,691,2,692,
        7,692,2,693,7,693,2,694,7,694,2,695,7,695,2,696,7,696,2,697,7,697,
        2,698,7,698,2,699,7,699,2,700,7,700,2,701,7,701,2,702,7,702,2,703,
        7,703,2,704,7,704,2,705,7,705,2,706,7,706,2,707,7,707,2,708,7,708,
        2,709,7,709,2,710,7,710,2,711,7,711,2,712,7,712,2,713,7,713,2,714,
        7,714,2,715,7,715,2,716,7,716,2,717,7,717,2,718,7,718,2,719,7,719,
        2,720,7,720,2,721,7,721,2,722,7,722,2,723,7,723,2,724,7,724,2,725,
        7,725,2,726,7,726,2,727,7,727,2,728,7,728,2,729,7,729,2,730,7,730,
        2,731,7,731,2,732,7,732,2,733,7,733,2,734,7,734,2,735,7,735,2,736,
        7,736,2,737,7,737,2,738,7,738,2,739,7,739,2,740,7,740,2,741,7,741,
        2,742,7,742,2,743,7,743,2,744,7,744,2,745,7,745,2,746,7,746,2,747,
        7,747,2,748,7,748,2,749,7,749,2,750,7,750,2,751,7,751,2,752,7,752,
        2,753,7,753,1,0,1,0,3,0,1511,8,0,1,0,3,0,1514,8,0,3,0,1516,8,0,1,
        0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,1596,8,
        1,1,2,1,2,1,2,1,2,1,2,1,2,3,2,1604,8,2,1,2,1,2,1,2,3,2,1609,8,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,1619,8,2,1,3,1,3,1,3,4,3,1624,
        8,3,11,3,12,3,1625,1,4,1,4,1,4,1,4,3,4,1632,8,4,1,4,3,4,1635,8,4,
        1,5,3,5,1638,8,5,1,5,1,5,1,5,1,5,1,5,3,5,1645,8,5,1,5,1,5,1,5,3,
        5,1650,8,5,1,5,3,5,1653,8,5,1,5,1,5,1,5,3,5,1658,8,5,1,5,1,5,1,5,
        1,5,3,5,1664,8,5,3,5,1666,8,5,1,5,1,5,3,5,1670,8,5,1,5,1,5,3,5,1674,
        8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,1683,8,6,1,7,1,7,3,7,1687,8,
        7,1,7,5,7,1690,8,7,10,7,12,7,1693,9,7,1,8,1,8,1,8,3,8,1698,8,8,1,
        9,1,9,1,9,1,9,1,10,3,10,1705,8,10,1,10,1,10,1,10,3,10,1710,8,10,
        1,11,1,11,1,11,3,11,1715,8,11,1,11,1,11,1,11,1,11,1,11,3,11,1722,
        8,11,1,11,3,11,1725,8,11,1,12,1,12,1,12,1,12,3,12,1731,8,12,1,12,
        3,12,1734,8,12,1,13,1,13,1,13,5,13,1739,8,13,10,13,12,13,1742,9,
        13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,1751,8,14,1,15,1,15,1,
        15,3,15,1756,8,15,1,15,1,15,1,15,3,15,1761,8,15,1,15,1,15,1,15,1,
        15,1,15,1,15,3,15,1769,8,15,1,15,1,15,1,15,1,15,3,15,1775,8,15,1,
        15,1,15,3,15,1779,8,15,1,15,1,15,1,15,3,15,1784,8,15,1,15,1,15,1,
        15,1,15,1,15,5,15,1791,8,15,10,15,12,15,1794,9,15,1,15,1,15,1,15,
        3,15,1799,8,15,1,15,1,15,5,15,1803,8,15,10,15,12,15,1806,9,15,1,
        15,1,15,1,15,3,15,1811,8,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,
        15,1820,8,15,1,15,1,15,1,15,1,15,3,15,1826,8,15,1,15,1,15,1,15,1,
        15,1,15,1,15,1,15,3,15,1835,8,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
        15,1,15,1,15,1,15,3,15,1847,8,15,1,16,1,16,3,16,1851,8,16,1,16,1,
        16,1,16,1,16,3,16,1857,8,16,5,16,1859,8,16,10,16,12,16,1862,9,16,
        1,17,1,17,1,17,3,17,1867,8,17,1,18,1,18,3,18,1871,8,18,1,18,1,18,
        1,18,3,18,1876,8,18,1,18,3,18,1879,8,18,1,18,1,18,1,18,1,18,3,18,
        1885,8,18,1,18,1,18,1,18,1,18,3,18,1891,8,18,1,18,1,18,1,18,1,18,
        3,18,1897,8,18,1,18,1,18,3,18,1901,8,18,1,18,1,18,1,18,3,18,1906,
        8,18,1,18,1,18,3,18,1910,8,18,1,18,1,18,3,18,1914,8,18,1,18,1,18,
        1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,
        1930,8,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,1938,8,18,1,18,1,18,
        1,18,1,18,1,18,1,18,3,18,1946,8,18,1,18,1,18,1,18,1,18,1,18,3,18,
        1953,8,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
        1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
        1,18,3,18,1980,8,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
        1,18,1,18,1,18,1,18,3,18,1995,8,18,1,18,3,18,1998,8,18,1,18,1,18,
        1,18,1,18,3,18,2004,8,18,1,19,1,19,1,19,3,19,2009,8,19,1,20,1,20,
        1,21,1,21,3,21,2015,8,21,1,21,1,21,1,21,3,21,2020,8,21,5,21,2022,
        8,21,10,21,12,21,2025,9,21,1,22,1,22,3,22,2029,8,22,1,22,1,22,3,
        22,2033,8,22,1,23,1,23,3,23,2037,8,23,1,23,1,23,3,23,2041,8,23,1,
        24,1,24,3,24,2045,8,24,1,24,1,24,3,24,2049,8,24,3,24,2051,8,24,1,
        25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,3,27,2061,8,27,1,28,1,28,1,
        28,1,28,1,28,1,28,3,28,2069,8,28,1,28,1,28,1,28,1,28,1,28,3,28,2076,
        8,28,1,29,1,29,1,29,1,29,1,29,1,29,3,29,2084,8,29,1,30,1,30,3,30,
        2088,8,30,1,30,5,30,2091,8,30,10,30,12,30,2094,9,30,1,31,1,31,1,
        32,1,32,3,32,2100,8,32,1,32,5,32,2103,8,32,10,32,12,32,2106,9,32,
        1,33,1,33,3,33,2110,8,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,
        3,33,2120,8,33,1,34,1,34,3,34,2124,8,34,1,34,1,34,1,34,3,34,2129,
        8,34,1,35,3,35,2132,8,35,1,35,3,35,2135,8,35,1,35,3,35,2138,8,35,
        1,35,1,35,1,35,1,35,1,36,3,36,2145,8,36,1,36,1,36,1,36,1,37,1,37,
        3,37,2152,8,37,1,38,1,38,3,38,2156,8,38,1,38,1,38,1,38,1,39,1,39,
        1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
        1,39,1,39,1,39,1,39,1,39,3,39,2181,8,39,3,39,2183,8,39,1,39,1,39,
        1,39,1,39,1,39,1,39,3,39,2191,8,39,3,39,2193,8,39,1,40,1,40,1,40,
        1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,
        1,40,1,40,3,40,2213,8,40,1,41,1,41,3,41,2217,8,41,1,41,1,41,5,41,
        2221,8,41,10,41,12,41,2224,9,41,1,42,1,42,1,42,1,42,3,42,2230,8,
        42,1,43,3,43,2233,8,43,1,43,1,43,3,43,2237,8,43,1,43,1,43,1,43,1,
        43,1,43,3,43,2244,8,43,1,43,3,43,2247,8,43,1,43,1,43,1,43,1,43,1,
        43,1,43,1,43,3,43,2256,8,43,1,44,1,44,1,44,5,44,2261,8,44,10,44,
        12,44,2264,9,44,1,45,1,45,3,45,2268,8,45,1,46,3,46,2271,8,46,1,46,
        1,46,1,47,3,47,2276,8,47,1,47,1,47,1,48,1,48,3,48,2282,8,48,1,48,
        3,48,2285,8,48,1,49,1,49,3,49,2289,8,49,1,50,1,50,1,50,1,50,3,50,
        2295,8,50,1,50,3,50,2298,8,50,1,50,1,50,1,51,3,51,2303,8,51,1,51,
        1,51,3,51,2307,8,51,1,51,1,51,1,51,1,51,1,51,5,51,2314,8,51,10,51,
        12,51,2317,9,51,3,51,2319,8,51,1,51,1,51,5,51,2323,8,51,10,51,12,
        51,2326,9,51,1,51,1,51,1,52,1,52,3,52,2332,8,52,1,53,1,53,1,53,1,
        53,3,53,2338,8,53,1,54,3,54,2341,8,54,1,54,1,54,3,54,2345,8,54,1,
        54,1,54,1,54,1,54,1,54,5,54,2352,8,54,10,54,12,54,2355,9,54,3,54,
        2357,8,54,1,54,1,54,1,54,1,54,5,54,2363,8,54,10,54,12,54,2366,9,
        54,1,54,1,54,1,55,3,55,2371,8,55,1,55,1,55,3,55,2375,8,55,1,55,1,
        55,1,55,1,55,1,55,1,55,1,56,1,56,3,56,2385,8,56,1,56,3,56,2388,8,
        56,1,57,4,57,2391,8,57,11,57,12,57,2392,1,58,1,58,1,58,1,58,1,58,
        1,58,3,58,2401,8,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,
        1,58,1,58,1,58,1,58,3,58,2416,8,58,1,59,3,59,2419,8,59,1,59,3,59,
        2422,8,59,1,59,1,59,1,59,3,59,2427,8,59,1,59,1,59,5,59,2431,8,59,
        10,59,12,59,2434,9,59,1,59,1,59,1,59,1,59,1,59,5,59,2441,8,59,10,
        59,12,59,2444,9,59,1,59,1,59,1,59,1,59,1,59,5,59,2451,8,59,10,59,
        12,59,2454,9,59,3,59,2456,8,59,1,59,3,59,2459,8,59,1,60,1,60,3,60,
        2463,8,60,1,60,1,60,1,60,1,60,1,60,1,60,3,60,2471,8,60,1,61,1,61,
        1,61,1,61,1,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,2484,8,62,1,63,
        1,63,3,63,2488,8,63,1,63,5,63,2491,8,63,10,63,12,63,2494,9,63,1,
        64,1,64,1,64,1,64,1,64,1,64,3,64,2502,8,64,1,65,1,65,1,65,1,65,1,
        65,1,65,1,65,1,65,1,66,1,66,1,66,1,66,1,66,5,66,2517,8,66,10,66,
        12,66,2520,9,66,1,66,1,66,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,
        1,67,1,67,1,67,1,67,1,67,1,67,3,67,2538,8,67,1,68,1,68,1,68,1,68,
        1,68,1,68,1,68,3,68,2547,8,68,1,68,3,68,2550,8,68,1,69,1,69,1,69,
        1,69,1,69,1,69,3,69,2558,8,69,1,70,1,70,1,70,1,70,1,70,3,70,2565,
        8,70,3,70,2567,8,70,1,71,1,71,1,71,1,72,1,72,3,72,2574,8,72,1,72,
        5,72,2577,8,72,10,72,12,72,2580,9,72,1,73,1,73,1,73,1,73,1,73,1,
        73,1,73,1,73,1,73,1,73,1,73,3,73,2593,8,73,1,74,1,74,3,74,2597,8,
        74,1,74,1,74,1,75,1,75,3,75,2603,8,75,1,75,1,75,1,76,1,76,3,76,2609,
        8,76,1,76,1,76,1,77,1,77,3,77,2615,8,77,1,77,1,77,1,78,1,78,3,78,
        2621,8,78,1,78,1,78,1,79,1,79,3,79,2627,8,79,1,79,1,79,1,80,3,80,
        2632,8,80,1,80,1,80,3,80,2636,8,80,1,80,1,80,1,81,1,81,1,82,1,82,
        3,82,2644,8,82,1,82,1,82,1,83,1,83,3,83,2650,8,83,1,83,1,83,1,84,
        1,84,3,84,2656,8,84,1,84,1,84,1,85,1,85,3,85,2662,8,85,1,85,1,85,
        1,86,3,86,2667,8,86,1,86,3,86,2670,8,86,1,86,3,86,2673,8,86,1,86,
        1,86,1,86,1,86,1,87,1,87,1,87,3,87,2682,8,87,1,87,3,87,2685,8,87,
        1,88,1,88,1,88,1,88,1,89,1,89,1,89,1,89,1,90,3,90,2696,8,90,1,90,
        1,90,3,90,2700,8,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,
        3,90,2711,8,90,1,90,1,90,1,91,1,91,1,91,1,92,3,92,2719,8,92,1,92,
        1,92,3,92,2723,8,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,3,92,2732,
        8,92,1,92,3,92,2735,8,92,1,92,1,92,1,92,1,92,3,92,2741,8,92,3,92,
        2743,8,92,1,92,1,92,3,92,2747,8,92,1,92,1,92,1,92,1,93,1,93,3,93,
        2754,8,93,1,93,1,93,1,94,1,94,1,94,1,94,1,94,1,94,1,94,5,94,2765,
        8,94,10,94,12,94,2768,9,94,1,94,1,94,1,94,1,94,3,94,2774,8,94,1,
        94,1,94,5,94,2778,8,94,10,94,12,94,2781,9,94,3,94,2783,8,94,1,95,
        1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,
        1,95,3,95,2800,8,95,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,
        1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,3,96,2819,8,96,1,97,1,97,
        3,97,2823,8,97,1,97,1,97,1,98,1,98,3,98,2829,8,98,1,98,1,98,1,99,
        1,99,3,99,2835,8,99,1,99,1,99,1,100,1,100,3,100,2841,8,100,1,100,
        1,100,1,101,3,101,2846,8,101,1,101,1,101,1,101,1,101,1,101,3,101,
        2853,8,101,1,102,1,102,1,102,1,102,1,102,3,102,2860,8,102,1,102,
        5,102,2863,8,102,10,102,12,102,2866,9,102,3,102,2868,8,102,1,103,
        1,103,3,103,2872,8,103,1,104,1,104,3,104,2876,8,104,1,104,1,104,
        1,105,3,105,2881,8,105,1,105,1,105,3,105,2885,8,105,1,105,1,105,
        3,105,2889,8,105,1,106,1,106,1,106,1,106,3,106,2895,8,106,1,106,
        5,106,2898,8,106,10,106,12,106,2901,9,106,3,106,2903,8,106,1,107,
        1,107,3,107,2907,8,107,1,107,1,107,1,108,1,108,3,108,2913,8,108,
        1,108,1,108,3,108,2917,8,108,1,109,1,109,3,109,2921,8,109,1,109,
        1,109,1,110,1,110,1,110,1,110,3,110,2929,8,110,1,110,1,110,1,111,
        1,111,1,111,1,111,3,111,2937,8,111,1,112,1,112,1,112,1,112,1,112,
        5,112,2944,8,112,10,112,12,112,2947,9,112,1,113,1,113,1,113,1,113,
        1,114,1,114,3,114,2955,8,114,1,114,1,114,1,115,1,115,1,115,1,115,
        1,115,1,116,1,116,1,116,1,116,3,116,2968,8,116,1,116,3,116,2971,
        8,116,1,117,3,117,2974,8,117,1,117,1,117,5,117,2978,8,117,10,117,
        12,117,2981,9,117,1,117,1,117,1,117,1,117,1,117,3,117,2988,8,117,
        1,117,1,117,1,117,3,117,2993,8,117,1,117,3,117,2996,8,117,1,117,
        3,117,2999,8,117,1,117,3,117,3002,8,117,1,117,3,117,3005,8,117,3,
        117,3007,8,117,1,117,1,117,1,117,1,117,3,117,3013,8,117,3,117,3015,
        8,117,1,118,1,118,1,118,1,118,1,118,1,119,1,119,1,120,1,120,1,120,
        1,121,1,121,1,121,1,121,3,121,3031,8,121,1,121,1,121,1,121,1,121,
        1,121,3,121,3038,8,121,1,121,3,121,3041,8,121,3,121,3043,8,121,3,
        121,3045,8,121,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,3,
        122,3055,8,122,3,122,3057,8,122,1,123,1,123,3,123,3061,8,123,1,123,
        3,123,3064,8,123,1,123,3,123,3067,8,123,1,123,1,123,3,123,3071,8,
        123,1,123,1,123,3,123,3075,8,123,1,123,1,123,1,123,3,123,3080,8,
        123,1,123,3,123,3083,8,123,1,123,3,123,3086,8,123,1,124,1,124,1,
        125,1,125,3,125,3092,8,125,1,125,3,125,3095,8,125,1,125,1,125,1,
        126,1,126,1,126,5,126,3102,8,126,10,126,12,126,3105,9,126,1,127,
        1,127,1,127,1,128,1,128,1,128,1,128,3,128,3114,8,128,1,128,3,128,
        3117,8,128,1,128,3,128,3120,8,128,1,129,1,129,3,129,3124,8,129,1,
        129,1,129,1,129,1,129,3,129,3130,8,129,1,129,5,129,3133,8,129,10,
        129,12,129,3136,9,129,1,130,1,130,3,130,3140,8,130,1,130,1,130,1,
        130,3,130,3145,8,130,5,130,3147,8,130,10,130,12,130,3150,9,130,1,
        131,1,131,1,131,1,131,3,131,3156,8,131,1,132,1,132,1,132,1,132,1,
        132,1,132,1,133,1,133,1,133,3,133,3167,8,133,1,133,3,133,3170,8,
        133,1,133,3,133,3173,8,133,1,133,3,133,3176,8,133,1,133,1,133,3,
        133,3180,8,133,1,133,3,133,3183,8,133,1,133,3,133,3186,8,133,1,133,
        1,133,1,133,1,133,3,133,3192,8,133,1,133,3,133,3195,8,133,1,133,
        3,133,3198,8,133,1,133,3,133,3201,8,133,1,133,3,133,3204,8,133,1,
        133,1,133,3,133,3208,8,133,1,133,3,133,3211,8,133,1,133,3,133,3214,
        8,133,1,134,1,134,1,135,1,135,1,136,1,136,1,136,1,137,1,137,1,137,
        3,137,3226,8,137,1,138,1,138,1,138,1,138,1,138,1,138,3,138,3234,
        8,138,1,139,1,139,1,139,1,139,1,139,1,139,1,140,1,140,1,140,1,140,
        1,140,1,141,1,141,1,141,3,141,3250,8,141,1,141,3,141,3253,8,141,
        1,141,1,141,3,141,3257,8,141,1,142,1,142,3,142,3261,8,142,1,142,
        1,142,1,143,1,143,1,143,1,143,3,143,3269,8,143,1,143,1,143,1,143,
        1,143,1,143,1,143,3,143,3277,8,143,5,143,3279,8,143,10,143,12,143,
        3282,9,143,1,144,1,144,1,144,1,144,1,144,1,145,1,145,1,145,1,145,
        1,145,1,146,1,146,1,146,1,146,1,146,1,147,1,147,3,147,3301,8,147,
        1,147,3,147,3304,8,147,1,147,1,147,3,147,3308,8,147,1,147,1,147,
        1,147,1,147,3,147,3314,8,147,1,148,1,148,3,148,3318,8,148,1,148,
        3,148,3321,8,148,1,149,1,149,1,149,1,149,1,149,1,149,1,149,3,149,
        3330,8,149,1,149,1,149,1,149,1,149,1,149,1,149,1,149,1,149,3,149,
        3340,8,149,1,150,3,150,3343,8,150,1,150,1,150,3,150,3347,8,150,1,
        150,3,150,3350,8,150,1,151,1,151,3,151,3354,8,151,1,151,1,151,1,
        151,3,151,3359,8,151,1,151,3,151,3362,8,151,1,151,5,151,3365,8,151,
        10,151,12,151,3368,9,151,1,152,1,152,1,152,3,152,3373,8,152,1,152,
        1,152,1,153,1,153,1,153,1,153,1,153,3,153,3382,8,153,1,154,1,154,
        5,154,3386,8,154,10,154,12,154,3389,9,154,1,154,1,154,3,154,3393,
        8,154,1,154,3,154,3396,8,154,1,154,3,154,3399,8,154,1,154,3,154,
        3402,8,154,1,154,3,154,3405,8,154,1,154,3,154,3408,8,154,1,154,3,
        154,3411,8,154,1,155,1,155,1,156,1,156,1,157,1,157,1,157,1,158,1,
        158,1,158,1,159,1,159,1,159,3,159,3426,8,159,1,160,1,160,3,160,3430,
        8,160,1,161,1,161,1,161,1,161,3,161,3436,8,161,1,161,3,161,3439,
        8,161,1,161,3,161,3442,8,161,1,161,1,161,1,161,1,161,3,161,3448,
        8,161,1,161,1,161,1,161,3,161,3453,8,161,5,161,3455,8,161,10,161,
        12,161,3458,9,161,3,161,3460,8,161,1,162,1,162,1,162,1,162,1,162,
        3,162,3467,8,162,3,162,3469,8,162,1,162,1,162,1,163,1,163,1,163,
        1,164,1,164,1,164,1,164,1,165,1,165,1,165,1,165,5,165,3484,8,165,
        10,165,12,165,3487,9,165,1,166,1,166,1,166,1,166,1,167,1,167,1,167,
        1,167,1,168,3,168,3498,8,168,1,168,1,168,1,168,3,168,3503,8,168,
        1,168,3,168,3506,8,168,1,168,3,168,3509,8,168,1,169,1,169,1,169,
        3,169,3514,8,169,1,170,1,170,1,171,1,171,3,171,3520,8,171,1,172,
        1,172,1,172,1,172,1,172,1,172,1,172,1,172,1,172,1,172,1,172,1,172,
        1,172,1,172,3,172,3536,8,172,1,173,1,173,1,173,1,173,1,173,1,174,
        1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,
        1,174,3,174,3556,8,174,1,175,1,175,1,175,1,175,1,175,1,175,1,175,
        3,175,3565,8,175,1,176,1,176,3,176,3569,8,176,1,176,1,176,1,176,
        5,176,3574,8,176,10,176,12,176,3577,9,176,1,177,1,177,3,177,3581,
        8,177,1,177,1,177,1,177,1,178,1,178,1,178,1,178,3,178,3590,8,178,
        1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,3,178,3600,8,178,
        1,179,1,179,1,179,1,180,1,180,1,180,1,180,1,181,1,181,1,182,1,182,
        1,182,3,182,3614,8,182,1,183,1,183,1,183,5,183,3619,8,183,10,183,
        12,183,3622,9,183,1,184,1,184,1,184,1,184,5,184,3628,8,184,10,184,
        12,184,3631,9,184,1,185,1,185,1,185,1,186,1,186,1,186,3,186,3639,
        8,186,1,186,1,186,1,187,1,187,3,187,3645,8,187,1,188,1,188,4,188,
        3649,8,188,11,188,12,188,3650,1,189,1,189,1,189,1,189,3,189,3657,
        8,189,1,189,3,189,3660,8,189,1,189,1,189,1,189,1,189,3,189,3666,
        8,189,1,190,1,190,1,191,1,191,1,191,3,191,3673,8,191,1,192,1,192,
        3,192,3677,8,192,1,192,1,192,5,192,3681,8,192,10,192,12,192,3684,
        9,192,1,193,1,193,1,193,3,193,3689,8,193,3,193,3691,8,193,1,194,
        3,194,3694,8,194,1,194,1,194,3,194,3698,8,194,1,195,1,195,1,195,
        1,196,1,196,1,196,1,196,1,196,3,196,3708,8,196,1,196,1,196,1,196,
        3,196,3713,8,196,1,196,5,196,3716,8,196,10,196,12,196,3719,9,196,
        1,197,1,197,5,197,3723,8,197,10,197,12,197,3726,9,197,1,198,1,198,
        1,198,1,198,1,198,1,198,3,198,3734,8,198,1,198,1,198,1,198,1,198,
        1,198,1,198,3,198,3742,8,198,1,198,1,198,1,198,3,198,3747,8,198,
        1,199,1,199,3,199,3751,8,199,1,199,1,199,1,199,1,199,3,199,3757,
        8,199,1,199,3,199,3760,8,199,1,200,3,200,3763,8,200,1,200,1,200,
        3,200,3767,8,200,1,201,1,201,3,201,3771,8,201,1,201,1,201,1,202,
        1,202,1,202,1,202,1,202,1,202,3,202,3781,8,202,1,203,1,203,3,203,
        3785,8,203,1,203,3,203,3788,8,203,1,203,3,203,3791,8,203,1,203,3,
        203,3794,8,203,1,204,1,204,1,204,3,204,3799,8,204,1,204,1,204,1,
        205,1,205,3,205,3805,8,205,1,205,3,205,3808,8,205,1,205,1,205,1,
        205,1,205,3,205,3814,8,205,1,205,3,205,3817,8,205,3,205,3819,8,205,
        1,206,1,206,1,206,3,206,3824,8,206,1,206,1,206,1,207,1,207,1,207,
        1,207,1,207,1,207,1,207,1,207,3,207,3836,8,207,1,208,1,208,1,208,
        1,208,1,208,5,208,3843,8,208,10,208,12,208,3846,9,208,1,208,1,208,
        1,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,3,209,3858,8,209,
        1,209,3,209,3861,8,209,1,209,1,209,1,209,3,209,3866,8,209,1,209,
        1,209,1,209,1,209,1,209,3,209,3873,8,209,1,210,1,210,3,210,3877,
        8,210,1,210,3,210,3880,8,210,1,211,1,211,1,211,1,211,3,211,3886,
        8,211,1,212,1,212,1,212,1,212,1,213,1,213,1,213,1,213,1,214,1,214,
        1,214,1,214,3,214,3900,8,214,1,215,1,215,1,216,1,216,1,216,3,216,
        3907,8,216,1,216,1,216,1,217,1,217,1,217,5,217,3914,8,217,10,217,
        12,217,3917,9,217,1,218,1,218,1,218,3,218,3922,8,218,1,218,1,218,
        1,218,1,218,1,218,1,218,1,218,3,218,3931,8,218,1,218,1,218,3,218,
        3935,8,218,1,218,1,218,3,218,3939,8,218,1,219,1,219,1,220,1,220,
        1,221,1,221,1,221,1,221,3,221,3949,8,221,3,221,3951,8,221,1,222,
        1,222,1,222,1,222,1,222,1,222,3,222,3959,8,222,1,223,1,223,1,223,
        5,223,3964,8,223,10,223,12,223,3967,9,223,1,224,1,224,3,224,3971,
        8,224,1,225,3,225,3974,8,225,1,225,1,225,3,225,3978,8,225,1,225,
        3,225,3981,8,225,1,225,1,225,1,225,1,225,3,225,3987,8,225,1,225,
        3,225,3990,8,225,1,225,3,225,3993,8,225,1,226,1,226,1,226,1,226,
        3,226,3999,8,226,1,227,1,227,1,227,5,227,4004,8,227,10,227,12,227,
        4007,9,227,1,227,1,227,3,227,4011,8,227,1,227,1,227,3,227,4015,8,
        227,1,227,3,227,4018,8,227,1,227,3,227,4021,8,227,1,227,3,227,4024,
        8,227,3,227,4026,8,227,1,228,1,228,3,228,4030,8,228,1,229,1,229,
        1,229,1,229,1,229,3,229,4037,8,229,1,230,1,230,1,230,1,230,3,230,
        4043,8,230,1,230,1,230,3,230,4047,8,230,1,230,1,230,1,230,3,230,
        4052,8,230,1,230,3,230,4055,8,230,1,230,3,230,4058,8,230,1,230,3,
        230,4061,8,230,3,230,4063,8,230,1,230,1,230,1,230,3,230,4068,8,230,
        1,231,1,231,1,231,1,231,1,231,5,231,4075,8,231,10,231,12,231,4078,
        9,231,1,231,1,231,1,231,1,231,1,231,1,231,3,231,4086,8,231,1,232,
        1,232,3,232,4090,8,232,1,232,1,232,1,233,1,233,3,233,4096,8,233,
        1,233,3,233,4099,8,233,1,233,3,233,4102,8,233,1,234,1,234,1,234,
        1,234,3,234,4108,8,234,1,234,1,234,1,234,1,234,1,234,3,234,4115,
        8,234,3,234,4117,8,234,1,234,1,234,1,234,1,234,1,234,1,234,3,234,
        4125,8,234,1,234,1,234,1,234,1,234,3,234,4131,8,234,3,234,4133,8,
        234,1,235,1,235,1,235,1,236,1,236,1,236,1,236,1,236,3,236,4143,8,
        236,3,236,4145,8,236,1,237,1,237,1,237,1,237,1,237,1,237,1,237,5,
        237,4154,8,237,10,237,12,237,4157,9,237,1,237,1,237,1,237,3,237,
        4162,8,237,1,237,1,237,1,237,1,237,1,237,3,237,4169,8,237,1,238,
        1,238,1,238,1,238,1,238,1,238,3,238,4177,8,238,1,239,1,239,3,239,
        4181,8,239,1,239,1,239,3,239,4185,8,239,1,239,3,239,4188,8,239,3,
        239,4190,8,239,1,240,1,240,1,240,1,240,1,240,1,240,3,240,4198,8,
        240,1,241,1,241,1,241,1,242,1,242,1,242,1,242,3,242,4207,8,242,1,
        242,1,242,1,242,1,243,1,243,1,243,1,243,3,243,4216,8,243,1,244,1,
        244,1,244,1,244,1,244,3,244,4223,8,244,1,245,1,245,1,245,5,245,4228,
        8,245,10,245,12,245,4231,9,245,1,246,1,246,1,246,1,246,1,246,1,246,
        1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,
        1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,
        1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,
        1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,
        1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,
        1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,
        1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,
        1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,
        1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,
        1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,
        1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,
        1,246,3,246,4361,8,246,1,247,1,247,1,248,1,248,1,249,1,249,1,250,
        1,250,1,251,1,251,1,252,1,252,1,253,1,253,1,254,1,254,1,255,1,255,
        1,256,1,256,1,257,1,257,1,258,1,258,1,259,1,259,1,260,1,260,1,261,
        1,261,1,262,1,262,1,263,1,263,1,264,1,264,1,265,1,265,1,266,1,266,
        1,267,1,267,1,268,1,268,1,269,1,269,1,270,1,270,1,271,1,271,1,272,
        1,272,3,272,4415,8,272,1,273,1,273,1,274,1,274,1,274,3,274,4422,
        8,274,1,275,1,275,3,275,4426,8,275,1,276,1,276,1,276,1,276,1,276,
        1,276,1,276,1,276,1,276,1,276,1,276,1,276,1,276,1,276,3,276,4442,
        8,276,1,277,1,277,1,278,1,278,1,279,1,279,1,279,1,279,5,279,4452,
        8,279,10,279,12,279,4455,9,279,3,279,4457,8,279,1,279,1,279,1,280,
        1,280,1,280,1,280,1,280,1,280,5,280,4467,8,280,10,280,12,280,4470,
        9,280,1,280,3,280,4473,8,280,1,281,1,281,1,281,1,281,3,281,4479,
        8,281,1,281,1,281,1,281,1,281,1,281,3,281,4486,8,281,1,281,1,281,
        1,281,1,281,1,281,3,281,4493,8,281,1,281,1,281,1,281,1,281,1,281,
        3,281,4500,8,281,1,281,1,281,1,281,1,281,1,281,3,281,4507,8,281,
        1,281,1,281,1,281,1,281,1,281,3,281,4514,8,281,1,281,1,281,1,281,
        1,281,1,281,3,281,4521,8,281,1,281,3,281,4524,8,281,1,282,1,282,
        1,282,5,282,4529,8,282,10,282,12,282,4532,9,282,1,283,1,283,1,283,
        5,283,4537,8,283,10,283,12,283,4540,9,283,1,284,1,284,1,284,5,284,
        4545,8,284,10,284,12,284,4548,9,284,1,285,1,285,1,286,1,286,1,286,
        5,286,4555,8,286,10,286,12,286,4558,9,286,1,287,1,287,1,287,3,287,
        4563,8,287,1,287,1,287,3,287,4567,8,287,1,287,3,287,4570,8,287,1,
        287,3,287,4573,8,287,1,287,3,287,4576,8,287,1,287,3,287,4579,8,287,
        1,287,3,287,4582,8,287,1,288,1,288,1,288,3,288,4587,8,288,1,288,
        3,288,4590,8,288,1,289,1,289,1,289,1,289,1,289,3,289,4597,8,289,
        1,289,1,289,5,289,4601,8,289,10,289,12,289,4604,9,289,1,290,1,290,
        1,290,1,290,1,291,1,291,1,291,1,291,1,292,1,292,1,292,1,292,1,293,
        1,293,1,293,1,293,1,294,1,294,1,294,5,294,4625,8,294,10,294,12,294,
        4628,9,294,1,295,1,295,1,296,1,296,3,296,4634,8,296,1,296,3,296,
        4637,8,296,1,296,1,296,1,297,1,297,1,297,5,297,4644,8,297,10,297,
        12,297,4647,9,297,1,298,1,298,1,298,3,298,4652,8,298,1,299,1,299,
        1,299,1,299,1,300,1,300,1,300,1,300,1,301,1,301,1,301,1,301,1,302,
        1,302,1,303,1,303,1,303,1,303,1,303,3,303,4673,8,303,1,303,1,303,
        1,303,1,303,3,303,4679,8,303,1,304,1,304,1,304,1,304,3,304,4685,
        8,304,1,305,1,305,1,305,5,305,4690,8,305,10,305,12,305,4693,9,305,
        1,306,1,306,1,306,1,306,1,306,3,306,4700,8,306,1,306,1,306,1,306,
        1,306,3,306,4706,8,306,1,306,1,306,1,306,1,306,1,306,1,306,1,306,
        1,306,1,306,1,306,3,306,4718,8,306,3,306,4720,8,306,1,307,1,307,
        1,307,1,307,3,307,4726,8,307,1,307,1,307,3,307,4730,8,307,3,307,
        4732,8,307,1,308,1,308,3,308,4736,8,308,1,308,1,308,1,309,1,309,
        1,309,1,309,1,309,1,309,1,309,3,309,4747,8,309,1,310,1,310,1,310,
        3,310,4752,8,310,1,310,1,310,1,310,1,310,3,310,4758,8,310,1,310,
        1,310,1,310,1,310,1,310,3,310,4765,8,310,1,310,3,310,4768,8,310,
        1,310,3,310,4771,8,310,1,310,1,310,1,310,1,310,3,310,4777,8,310,
        3,310,4779,8,310,1,310,1,310,1,310,1,310,1,310,1,310,3,310,4787,
        8,310,1,310,3,310,4790,8,310,3,310,4792,8,310,3,310,4794,8,310,1,
        311,1,311,1,311,5,311,4799,8,311,10,311,12,311,4802,9,311,1,312,
        1,312,1,312,1,312,1,312,1,312,1,312,1,312,3,312,4812,8,312,1,312,
        3,312,4815,8,312,3,312,4817,8,312,1,312,1,312,3,312,4821,8,312,1,
        312,1,312,1,312,3,312,4826,8,312,3,312,4828,8,312,1,312,1,312,1,
        312,3,312,4833,8,312,1,312,1,312,1,312,1,312,3,312,4839,8,312,1,
        312,3,312,4842,8,312,3,312,4844,8,312,1,312,1,312,3,312,4848,8,312,
        1,312,3,312,4851,8,312,1,312,1,312,1,312,1,312,1,312,1,312,1,312,
        3,312,4860,8,312,1,312,1,312,1,312,1,312,1,312,1,312,1,312,3,312,
        4869,8,312,1,312,1,312,1,312,1,312,3,312,4875,8,312,3,312,4877,8,
        312,3,312,4879,8,312,1,313,1,313,1,313,1,313,1,313,1,313,1,313,3,
        313,4888,8,313,1,313,1,313,3,313,4892,8,313,1,313,1,313,1,313,1,
        313,3,313,4898,8,313,1,313,3,313,4901,8,313,3,313,4903,8,313,1,313,
        1,313,1,313,1,313,1,313,1,313,1,313,1,313,1,313,3,313,4914,8,313,
        1,313,1,313,1,313,3,313,4919,8,313,1,313,1,313,1,313,3,313,4924,
        8,313,1,313,1,313,1,313,1,313,3,313,4930,8,313,3,313,4932,8,313,
        1,313,1,313,3,313,4936,8,313,3,313,4938,8,313,1,314,1,314,1,314,
        1,315,1,315,1,315,3,315,4946,8,315,1,315,1,315,3,315,4950,8,315,
        1,315,1,315,1,316,3,316,4955,8,316,1,316,3,316,4958,8,316,1,316,
        5,316,4961,8,316,10,316,12,316,4964,9,316,1,316,1,316,3,316,4968,
        8,316,1,317,1,317,1,317,1,317,3,317,4974,8,317,1,318,1,318,1,318,
        1,318,1,319,1,319,1,319,3,319,4983,8,319,1,320,1,320,1,320,1,320,
        1,320,1,320,1,320,1,320,1,320,4,320,4994,8,320,11,320,12,320,4995,
        1,321,1,321,1,321,1,321,1,321,1,321,1,321,1,321,1,321,1,321,3,321,
        5008,8,321,1,321,1,321,1,321,3,321,5013,8,321,1,321,1,321,1,321,
        1,321,1,321,1,321,3,321,5021,8,321,1,321,1,321,1,321,1,321,3,321,
        5027,8,321,3,321,5029,8,321,1,321,1,321,1,321,1,321,1,321,3,321,
        5036,8,321,3,321,5038,8,321,1,322,1,322,1,322,1,322,1,322,3,322,
        5045,8,322,1,323,1,323,1,323,3,323,5050,8,323,1,323,1,323,1,324,
        1,324,1,324,1,324,1,324,1,324,1,324,3,324,5061,8,324,1,324,1,324,
        1,324,3,324,5066,8,324,3,324,5068,8,324,1,324,1,324,3,324,5072,8,
        324,1,324,1,324,1,324,1,324,3,324,5078,8,324,1,324,3,324,5081,8,
        324,1,324,3,324,5084,8,324,1,324,1,324,1,324,1,324,1,324,1,324,1,
        324,1,324,3,324,5094,8,324,3,324,5096,8,324,1,325,1,325,1,325,1,
        325,3,325,5102,8,325,1,326,1,326,1,326,1,327,1,327,1,327,1,328,1,
        328,1,328,1,328,1,328,3,328,5115,8,328,1,328,1,328,3,328,5119,8,
        328,1,329,1,329,1,329,3,329,5124,8,329,1,330,1,330,1,330,1,331,1,
        331,1,331,1,331,1,331,1,331,1,331,1,331,1,331,1,331,5,331,5139,8,
        331,10,331,12,331,5142,9,331,1,332,1,332,1,332,3,332,5147,8,332,
        1,332,1,332,1,332,1,332,1,332,1,332,1,332,3,332,5156,8,332,1,332,
        1,332,1,332,1,332,1,332,1,332,3,332,5164,8,332,1,332,1,332,3,332,
        5168,8,332,1,332,1,332,1,332,1,332,3,332,5174,8,332,1,332,1,332,
        1,332,1,332,1,332,1,332,1,332,1,332,3,332,5184,8,332,1,332,1,332,
        3,332,5188,8,332,1,333,1,333,1,334,1,334,1,334,5,334,5195,8,334,
        10,334,12,334,5198,9,334,1,335,1,335,3,335,5202,8,335,1,335,1,335,
        1,335,1,335,3,335,5208,8,335,3,335,5210,8,335,1,335,1,335,3,335,
        5214,8,335,1,335,1,335,1,335,1,335,1,335,1,335,1,335,1,335,1,335,
        3,335,5225,8,335,1,335,1,335,1,335,1,335,1,335,3,335,5232,8,335,
        1,335,1,335,1,335,1,335,3,335,5238,8,335,1,335,1,335,3,335,5242,
        8,335,1,336,1,336,1,336,3,336,5247,8,336,1,336,1,336,1,336,3,336,
        5252,8,336,1,336,1,336,1,336,1,336,1,336,1,336,3,336,5260,8,336,
        1,337,1,337,3,337,5264,8,337,1,337,5,337,5267,8,337,10,337,12,337,
        5270,9,337,1,338,1,338,1,338,1,338,1,338,1,338,3,338,5278,8,338,
        1,339,1,339,1,339,1,339,1,339,1,339,1,339,1,339,1,339,1,339,1,339,
        3,339,5291,8,339,3,339,5293,8,339,1,340,1,340,1,340,1,340,1,340,
        1,340,1,340,1,340,1,340,1,340,1,340,1,340,3,340,5307,8,340,1,340,
        1,340,1,340,1,340,1,340,1,340,1,340,3,340,5316,8,340,3,340,5318,
        8,340,1,341,1,341,1,341,5,341,5323,8,341,10,341,12,341,5326,9,341,
        1,342,1,342,3,342,5330,8,342,1,343,1,343,3,343,5334,8,343,1,343,
        1,343,1,343,3,343,5339,8,343,1,343,1,343,1,343,1,343,5,343,5345,
        8,343,10,343,12,343,5348,9,343,1,343,1,343,1,343,1,343,3,343,5354,
        8,343,1,343,1,343,3,343,5358,8,343,1,343,1,343,1,343,1,343,3,343,
        5364,8,343,1,343,1,343,1,343,5,343,5369,8,343,10,343,12,343,5372,
        9,343,3,343,5374,8,343,1,344,1,344,1,344,1,344,1,345,3,345,5381,
        8,345,1,345,3,345,5384,8,345,1,345,1,345,1,345,1,345,3,345,5390,
        8,345,1,346,1,346,1,346,1,346,1,346,1,347,1,347,1,347,1,347,1,347,
        1,347,1,347,1,347,1,347,1,347,3,347,5407,8,347,1,348,1,348,1,348,
        3,348,5412,8,348,1,349,1,349,1,350,1,350,1,350,1,350,1,350,1,350,
        1,350,5,350,5423,8,350,10,350,12,350,5426,9,350,3,350,5428,8,350,
        1,351,1,351,1,351,1,351,1,351,1,351,1,351,1,351,1,351,3,351,5439,
        8,351,3,351,5441,8,351,1,352,1,352,1,353,1,353,3,353,5447,8,353,
        1,354,1,354,1,354,1,354,1,354,1,355,1,355,1,355,1,355,1,355,5,355,
        5459,8,355,10,355,12,355,5462,9,355,1,356,1,356,1,356,1,357,1,357,
        1,357,1,357,1,357,1,357,1,357,1,357,1,357,1,357,1,357,3,357,5478,
        8,357,1,357,1,357,1,357,3,357,5483,8,357,1,357,3,357,5486,8,357,
        1,357,1,357,3,357,5490,8,357,1,357,3,357,5493,8,357,1,357,1,357,
        1,357,1,357,1,357,1,357,3,357,5501,8,357,1,357,1,357,1,357,1,357,
        3,357,5507,8,357,1,357,1,357,1,357,3,357,5512,8,357,1,357,3,357,
        5515,8,357,3,357,5517,8,357,1,358,1,358,3,358,5521,8,358,1,358,1,
        358,1,358,3,358,5526,8,358,3,358,5528,8,358,1,359,1,359,1,359,1,
        360,1,360,1,360,1,360,1,360,1,360,1,360,3,360,5540,8,360,1,361,1,
        361,5,361,5544,8,361,10,361,12,361,5547,9,361,1,362,1,362,1,362,
        1,362,1,362,1,362,1,362,1,362,1,362,1,362,1,362,3,362,5560,8,362,
        1,362,1,362,1,362,1,362,1,362,1,362,1,362,1,362,1,362,1,362,3,362,
        5572,8,362,1,362,1,362,3,362,5576,8,362,3,362,5578,8,362,1,363,1,
        363,1,363,1,363,1,363,1,363,3,363,5586,8,363,1,364,1,364,3,364,5590,
        8,364,1,364,1,364,1,365,1,365,1,365,1,365,1,365,3,365,5599,8,365,
        1,366,1,366,1,366,1,366,1,367,1,367,1,367,1,367,1,367,1,367,1,367,
        3,367,5612,8,367,1,368,1,368,1,368,3,368,5617,8,368,1,369,1,369,
        3,369,5621,8,369,1,369,1,369,3,369,5625,8,369,1,369,3,369,5628,8,
        369,1,370,1,370,3,370,5632,8,370,1,370,1,370,3,370,5636,8,370,1,
        370,3,370,5639,8,370,1,371,1,371,1,371,3,371,5644,8,371,1,371,3,
        371,5647,8,371,1,372,1,372,1,372,1,372,3,372,5653,8,372,1,372,3,
        372,5656,8,372,1,373,1,373,1,373,1,373,3,373,5662,8,373,1,373,3,
        373,5665,8,373,1,374,1,374,1,374,1,374,1,374,1,375,1,375,1,375,1,
        376,1,376,1,376,1,376,1,376,1,377,1,377,1,377,1,377,1,377,1,378,
        1,378,1,378,1,378,1,378,1,379,1,379,3,379,5692,8,379,1,379,1,379,
        1,379,1,379,3,379,5698,8,379,1,379,3,379,5701,8,379,1,380,1,380,
        1,380,1,380,1,381,1,381,1,381,1,381,1,381,1,382,1,382,1,382,1,382,
        1,382,3,382,5717,8,382,1,383,1,383,1,383,1,383,1,383,3,383,5724,
        8,383,1,383,1,383,3,383,5728,8,383,1,383,3,383,5731,8,383,1,383,
        3,383,5734,8,383,1,384,1,384,1,384,1,384,1,384,3,384,5741,8,384,
        1,384,1,384,3,384,5745,8,384,1,384,3,384,5748,8,384,1,384,3,384,
        5751,8,384,1,385,1,385,3,385,5755,8,385,1,385,1,385,1,385,1,385,
        3,385,5761,8,385,1,385,3,385,5764,8,385,1,386,1,386,3,386,5768,8,
        386,1,386,1,386,1,387,1,387,1,387,1,387,1,387,1,387,1,387,1,388,
        1,388,1,388,1,388,1,388,1,388,1,388,1,389,1,389,1,389,3,389,5789,
        8,389,1,390,1,390,1,390,3,390,5794,8,390,1,391,1,391,1,391,1,392,
        1,392,1,392,3,392,5802,8,392,1,392,1,392,1,392,3,392,5807,8,392,
        1,392,3,392,5810,8,392,1,393,1,393,3,393,5814,8,393,1,393,1,393,
        3,393,5818,8,393,1,394,1,394,3,394,5822,8,394,1,394,1,394,1,395,
        1,395,3,395,5828,8,395,1,395,1,395,3,395,5832,8,395,1,396,1,396,
        1,396,3,396,5837,8,396,1,397,1,397,1,397,3,397,5842,8,397,1,398,
        1,398,1,398,1,399,1,399,1,399,1,399,1,399,1,399,3,399,5853,8,399,
        3,399,5855,8,399,1,400,1,400,1,400,1,400,3,400,5861,8,400,1,400,
        1,400,1,401,1,401,1,401,1,401,1,401,1,402,1,402,1,402,1,402,1,402,
        1,403,1,403,1,403,1,403,1,404,1,404,1,404,1,404,3,404,5883,8,404,
        1,405,1,405,1,405,1,405,1,405,1,406,1,406,1,406,1,406,1,406,1,407,
        1,407,1,407,1,407,1,407,1,408,1,408,1,408,1,408,1,408,3,408,5905,
        8,408,1,409,1,409,1,409,1,409,1,409,3,409,5912,8,409,1,410,1,410,
        1,410,1,410,1,410,1,410,1,411,1,411,1,411,1,411,1,411,1,411,1,412,
        1,412,1,412,1,412,1,412,1,413,1,413,1,413,1,413,1,413,1,414,1,414,
        1,414,3,414,5939,8,414,3,414,5941,8,414,1,415,1,415,3,415,5945,8,
        415,1,416,1,416,1,417,1,417,1,417,1,418,1,418,1,418,5,418,5955,8,
        418,10,418,12,418,5958,9,418,1,419,1,419,1,419,1,419,1,419,1,419,
        1,419,3,419,5967,8,419,1,420,1,420,1,420,1,420,1,420,1,420,1,420,
        1,420,3,420,5977,8,420,1,420,1,420,3,420,5981,8,420,1,420,1,420,
        1,420,1,420,5,420,5987,8,420,10,420,12,420,5990,9,420,3,420,5992,
        8,420,1,420,1,420,3,420,5996,8,420,1,420,1,420,1,420,1,420,1,420,
        1,420,1,420,3,420,6005,8,420,1,421,1,421,3,421,6009,8,421,1,422,
        1,422,1,422,5,422,6014,8,422,10,422,12,422,6017,9,422,1,423,1,423,
        3,423,6021,8,423,1,424,1,424,1,424,1,424,1,424,1,424,3,424,6029,
        8,424,1,425,1,425,1,425,3,425,6034,8,425,1,425,1,425,1,426,1,426,
        3,426,6040,8,426,1,427,1,427,1,427,5,427,6045,8,427,10,427,12,427,
        6048,9,427,1,428,1,428,3,428,6052,8,428,1,428,1,428,1,428,1,428,
        3,428,6058,8,428,1,428,3,428,6061,8,428,1,429,1,429,1,430,1,430,
        1,430,1,430,1,430,1,430,3,430,6071,8,430,3,430,6073,8,430,1,431,
        1,431,1,431,1,431,1,431,3,431,6080,8,431,1,432,1,432,1,432,3,432,
        6085,8,432,1,432,1,432,3,432,6089,8,432,1,432,3,432,6092,8,432,1,
        433,1,433,1,433,5,433,6097,8,433,10,433,12,433,6100,9,433,1,434,
        1,434,3,434,6104,8,434,1,434,1,434,3,434,6108,8,434,1,435,1,435,
        1,435,1,435,1,435,1,436,1,436,1,436,1,436,3,436,6119,8,436,1,437,
        1,437,1,437,1,437,1,437,1,437,3,437,6127,8,437,1,437,1,437,3,437,
        6131,8,437,1,437,3,437,6134,8,437,1,437,3,437,6137,8,437,1,438,1,
        438,3,438,6141,8,438,1,438,1,438,3,438,6145,8,438,1,438,5,438,6148,
        8,438,10,438,12,438,6151,9,438,1,439,1,439,1,439,3,439,6156,8,439,
        1,440,1,440,3,440,6160,8,440,1,440,1,440,1,441,1,441,1,442,1,442,
        1,442,1,442,1,442,3,442,6171,8,442,1,442,3,442,6174,8,442,1,442,
        3,442,6177,8,442,1,442,3,442,6180,8,442,1,443,1,443,1,443,1,443,
        1,443,1,443,3,443,6188,8,443,1,444,1,444,3,444,6192,8,444,1,444,
        5,444,6195,8,444,10,444,12,444,6198,9,444,1,445,1,445,1,445,1,445,
        1,445,3,445,6205,8,445,1,446,1,446,1,446,1,446,1,446,1,446,3,446,
        6213,8,446,1,447,1,447,1,447,1,447,3,447,6219,8,447,1,448,1,448,
        3,448,6223,8,448,1,448,1,448,1,448,1,448,3,448,6229,8,448,1,448,
        1,448,1,449,1,449,1,449,1,449,1,449,3,449,6238,8,449,1,449,1,449,
        1,449,1,449,1,449,1,449,1,449,1,449,1,449,3,449,6249,8,449,1,450,
        1,450,1,450,1,450,1,450,1,450,1,450,1,450,3,450,6259,8,450,1,451,
        1,451,1,451,1,451,1,452,1,452,1,452,1,453,1,453,1,453,1,454,1,454,
        1,455,1,455,1,455,1,455,3,455,6277,8,455,1,455,3,455,6280,8,455,
        1,455,1,455,3,455,6284,8,455,1,455,1,455,1,455,1,455,1,455,1,455,
        1,455,1,455,1,455,5,455,6295,8,455,10,455,12,455,6298,9,455,1,456,
        1,456,1,456,1,456,1,456,1,456,3,456,6306,8,456,1,456,1,456,1,456,
        1,456,1,456,1,456,1,456,1,456,1,456,1,456,5,456,6318,8,456,10,456,
        12,456,6321,9,456,1,457,1,457,1,458,1,458,3,458,6327,8,458,1,458,
        1,458,1,458,1,458,3,458,6333,8,458,1,458,1,458,1,458,1,458,3,458,
        6339,8,458,1,459,1,459,1,459,1,459,1,459,1,459,3,459,6347,8,459,
        1,459,1,459,1,459,1,459,1,459,1,459,1,459,1,459,1,459,3,459,6358,
        8,459,1,459,1,459,3,459,6362,8,459,1,460,1,460,1,460,1,460,1,460,
        1,460,1,460,1,460,1,460,1,460,1,460,1,460,1,460,1,460,1,460,1,460,
        1,460,1,460,1,460,1,460,1,460,1,460,1,460,1,460,1,460,1,460,1,460,
        5,460,6391,8,460,10,460,12,460,6394,9,460,1,461,1,461,1,461,3,461,
        6399,8,461,1,461,1,461,1,461,1,461,1,461,1,461,1,461,1,461,1,461,
        1,461,1,461,1,461,1,461,1,461,1,461,3,461,6416,8,461,1,461,1,461,
        1,461,1,461,1,461,3,461,6423,8,461,1,461,1,461,1,461,1,461,1,461,
        1,461,1,461,1,461,1,461,1,461,1,461,1,461,3,461,6437,8,461,1,461,
        1,461,1,461,1,461,1,461,1,461,1,461,1,461,1,461,3,461,6448,8,461,
        1,461,1,461,1,461,3,461,6453,8,461,1,461,1,461,1,461,1,461,1,461,
        1,461,1,461,1,461,1,461,3,461,6464,8,461,1,461,1,461,1,461,1,461,
        1,461,1,461,1,461,1,461,3,461,6474,8,461,1,461,1,461,1,461,4,461,
        6479,8,461,11,461,12,461,6480,1,461,3,461,6484,8,461,1,461,1,461,
        1,461,1,461,1,461,1,461,1,461,1,461,1,461,1,461,1,461,1,461,1,461,
        1,461,1,461,1,461,1,461,1,461,1,461,1,461,1,461,1,461,1,461,1,461,
        1,461,1,461,1,461,1,461,1,461,1,461,1,461,1,461,3,461,6518,8,461,
        1,461,1,461,1,461,1,461,1,461,1,461,5,461,6526,8,461,10,461,12,461,
        6529,9,461,1,462,1,462,1,462,1,463,1,463,1,463,1,463,3,463,6538,
        8,463,1,464,1,464,1,464,3,464,6543,8,464,1,464,1,464,1,464,3,464,
        6548,8,464,1,464,1,464,1,464,1,464,1,464,3,464,6555,8,464,1,464,
        1,464,1,464,1,464,3,464,6561,8,464,1,464,1,464,1,464,3,464,6566,
        8,464,1,464,1,464,1,464,3,464,6571,8,464,1,464,1,464,1,464,1,464,
        3,464,6577,8,464,1,464,1,464,3,464,6581,8,464,1,464,1,464,1,464,
        3,464,6586,8,464,1,464,1,464,1,464,3,464,6591,8,464,1,464,1,464,
        1,464,1,464,1,464,3,464,6598,8,464,1,464,1,464,1,464,1,464,1,464,
        1,464,3,464,6606,8,464,1,464,1,464,1,464,3,464,6611,8,464,1,464,
        1,464,3,464,6615,8,464,1,464,1,464,3,464,6619,8,464,1,464,1,464,
        3,464,6623,8,464,3,464,6625,8,464,1,465,1,465,1,465,1,465,1,465,
        1,466,1,466,1,466,1,466,1,466,1,466,1,466,1,466,1,466,1,466,1,466,
        3,466,6643,8,466,1,466,1,466,1,466,1,466,1,466,1,466,3,466,6651,
        8,466,1,466,1,466,3,466,6655,8,466,1,466,1,466,1,466,1,466,1,466,
        3,466,6662,8,466,1,466,1,466,1,466,1,466,1,466,1,466,1,466,1,466,
        1,466,1,466,3,466,6674,8,466,1,466,3,466,6677,8,466,1,466,1,466,
        3,466,6681,8,466,1,467,1,467,1,468,1,468,1,468,1,468,3,468,6689,
        8,468,1,469,1,469,1,469,1,469,1,469,1,469,1,469,1,470,1,470,1,470,
        3,470,6701,8,470,1,471,1,471,1,471,1,471,1,471,3,471,6708,8,471,
        1,471,1,471,3,471,6712,8,471,1,472,1,472,3,472,6716,8,472,1,473,
        1,473,1,473,1,473,3,473,6722,8,473,1,474,1,474,1,474,1,475,1,475,
        1,475,1,475,1,475,3,475,6732,8,475,1,475,1,475,1,475,1,475,1,475,
        1,475,1,475,3,475,6741,8,475,3,475,6743,8,475,1,476,3,476,6746,8,
        476,1,476,1,476,1,477,1,477,1,477,1,477,1,477,3,477,6755,8,477,1,
        478,1,478,1,478,5,478,6760,8,478,10,478,12,478,6763,9,478,1,479,
        1,479,1,479,1,479,1,479,1,479,1,479,1,479,1,479,1,479,3,479,6775,
        8,479,1,479,1,479,1,479,3,479,6780,8,479,1,480,1,480,1,480,1,480,
        1,480,3,480,6787,8,480,1,480,1,480,1,480,1,480,3,480,6793,8,480,
        1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,
        1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,
        4,480,6817,8,480,11,480,12,480,6818,1,480,1,480,1,480,1,480,1,480,
        1,480,1,480,1,480,3,480,6829,8,480,1,480,1,480,1,480,1,480,1,480,
        1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,
        1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,
        1,480,1,480,1,480,3,480,6861,8,480,1,480,1,480,1,480,1,480,1,480,
        1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,
        1,480,3,480,6880,8,480,1,480,1,480,1,480,1,480,3,480,6886,8,480,
        1,480,1,480,3,480,6890,8,480,1,480,1,480,1,480,1,480,1,480,1,480,
        1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,
        1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,
        1,480,3,480,6921,8,480,1,480,1,480,1,480,1,480,3,480,6927,8,480,
        1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,3,480,
        6939,8,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,
        1,480,1,480,3,480,6952,8,480,1,480,1,480,3,480,6956,8,480,1,480,
        1,480,3,480,6960,8,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,
        1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,
        1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,3,480,6988,8,480,
        1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,
        1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,
        1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,
        1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,
        1,480,1,480,1,480,1,480,3,480,7038,8,480,1,480,1,480,1,480,1,480,
        1,480,1,480,1,480,1,480,3,480,7048,8,480,1,480,1,480,1,480,1,480,
        1,480,1,480,1,480,1,480,1,480,1,480,3,480,7060,8,480,1,480,1,480,
        1,480,3,480,7065,8,480,1,481,1,481,1,481,1,482,1,482,1,482,3,482,
        7073,8,482,1,482,1,482,1,482,1,482,1,482,1,482,1,482,1,482,1,482,
        1,482,1,482,1,482,1,482,1,482,1,482,1,482,1,482,1,482,3,482,7093,
        8,482,1,483,1,483,3,483,7097,8,483,1,483,1,483,1,484,1,484,1,485,
        1,485,1,485,1,485,1,485,1,485,1,485,1,485,5,485,7111,8,485,10,485,
        12,485,7114,9,485,3,485,7116,8,485,1,486,1,486,1,486,3,486,7121,
        8,486,1,486,3,486,7124,8,486,1,487,1,487,1,488,1,488,1,488,1,488,
        1,488,3,488,7133,8,488,1,488,1,488,3,488,7137,8,488,1,488,1,488,
        1,488,1,488,3,488,7143,8,488,1,488,1,488,1,488,1,488,3,488,7149,
        8,488,1,488,1,488,3,488,7153,8,488,1,488,1,488,1,489,1,489,1,489,
        1,489,1,489,1,489,1,489,3,489,7164,8,489,1,489,1,489,1,489,1,489,
        3,489,7170,8,489,3,489,7172,8,489,1,489,1,489,1,490,1,490,1,490,
        3,490,7179,8,490,1,490,1,490,1,490,1,490,1,490,3,490,7186,8,490,
        1,490,1,490,3,490,7190,8,490,1,491,1,491,1,491,5,491,7195,8,491,
        10,491,12,491,7198,9,491,1,492,1,492,3,492,7202,8,492,1,493,1,493,
        1,493,3,493,7207,8,493,1,494,1,494,1,494,1,494,1,495,1,495,1,495,
        3,495,7216,8,495,1,495,3,495,7219,8,495,1,496,1,496,3,496,7223,8,
        496,1,496,1,496,1,496,3,496,7228,8,496,3,496,7230,8,496,1,496,1,
        496,3,496,7234,8,496,1,497,1,497,3,497,7238,8,497,1,498,1,498,1,
        498,1,499,1,499,1,499,1,500,1,500,1,500,1,501,1,501,3,501,7251,8,
        501,1,501,1,501,3,501,7255,8,501,1,501,3,501,7258,8,501,1,501,1,
        501,3,501,7262,8,501,1,501,1,501,3,501,7266,8,501,1,501,1,501,3,
        501,7270,8,501,1,501,1,501,1,501,1,501,1,501,3,501,7277,8,501,1,
        501,1,501,3,501,7281,8,501,1,501,1,501,3,501,7285,8,501,1,501,1,
        501,1,501,1,501,1,501,1,501,3,501,7293,8,501,1,501,1,501,3,501,7297,
        8,501,1,502,1,502,1,502,5,502,7302,8,502,10,502,12,502,7305,9,502,
        1,503,1,503,1,503,3,503,7310,8,503,1,504,1,504,1,505,1,505,1,506,
        1,506,3,506,7318,8,506,1,507,1,507,1,508,1,508,1,508,1,508,1,509,
        1,509,1,509,1,509,1,510,1,510,1,510,1,510,1,511,1,511,1,511,5,511,
        7337,8,511,10,511,12,511,7340,9,511,1,512,1,512,3,512,7344,8,512,
        1,513,1,513,1,513,5,513,7349,8,513,10,513,12,513,7352,9,513,1,514,
        1,514,1,515,1,515,1,515,1,515,1,516,1,516,1,516,1,516,1,516,1,516,
        1,516,1,516,1,516,1,516,1,516,1,516,1,516,3,516,7373,8,516,1,517,
        1,517,1,517,1,518,1,518,1,518,1,518,1,518,1,519,1,519,1,519,1,519,
        1,519,1,519,3,519,7389,8,519,1,520,1,520,1,520,1,521,1,521,1,521,
        4,521,7397,8,521,11,521,12,521,7398,1,522,1,522,3,522,7403,8,522,
        1,522,1,522,1,522,4,522,7408,8,522,11,522,12,522,7409,1,522,3,522,
        7413,8,522,1,522,1,522,1,522,1,523,1,523,1,523,1,524,1,524,1,524,
        3,524,7424,8,524,1,525,1,525,1,526,1,526,1,526,1,527,1,527,3,527,
        7433,8,527,1,527,3,527,7436,8,527,1,527,1,527,1,528,1,528,1,528,
        3,528,7443,8,528,1,529,1,529,1,529,3,529,7448,8,529,1,530,1,530,
        1,530,1,530,1,530,1,531,1,531,1,531,1,531,1,531,1,531,1,531,1,532,
        1,532,1,532,1,532,1,532,1,532,1,532,1,533,1,533,1,533,4,533,7472,
        8,533,11,533,12,533,7473,1,534,1,534,1,534,1,534,3,534,7480,8,534,
        1,535,1,535,1,535,1,535,3,535,7486,8,535,1,535,1,535,3,535,7490,
        8,535,1,536,1,536,1,536,1,536,1,536,1,536,1,537,1,537,3,537,7500,
        8,537,1,538,1,538,3,538,7504,8,538,1,538,1,538,1,539,1,539,1,539,
        1,539,1,539,1,539,1,539,5,539,7515,8,539,10,539,12,539,7518,9,539,
        1,539,1,539,1,540,1,540,1,540,1,540,1,540,1,540,1,540,3,540,7529,
        8,540,1,541,1,541,1,541,1,541,1,541,1,541,1,542,1,542,1,542,1,543,
        1,543,1,543,1,544,1,544,3,544,7545,8,544,1,544,1,544,1,544,1,544,
        5,544,7551,8,544,10,544,12,544,7554,9,544,1,544,1,544,1,544,1,544,
        1,544,5,544,7561,8,544,10,544,12,544,7564,9,544,3,544,7566,8,544,
        1,545,1,545,1,545,3,545,7571,8,545,1,546,1,546,3,546,7575,8,546,
        1,546,1,546,1,546,1,547,1,547,3,547,7582,8,547,1,547,1,547,1,547,
        3,547,7587,8,547,1,548,1,548,1,549,1,549,1,549,3,549,7594,8,549,
        1,549,1,549,1,549,1,549,5,549,7600,8,549,10,549,12,549,7603,9,549,
        3,549,7605,8,549,1,550,1,550,1,550,3,550,7610,8,550,1,550,1,550,
        1,550,1,550,5,550,7616,8,550,10,550,12,550,7619,9,550,3,550,7621,
        8,550,1,551,1,551,1,551,1,551,1,552,1,552,1,552,1,553,1,553,1,553,
        1,554,1,554,3,554,7635,8,554,1,554,3,554,7638,8,554,1,554,1,554,
        1,554,1,554,1,555,1,555,1,555,1,555,1,555,1,555,1,555,3,555,7651,
        8,555,1,555,1,555,3,555,7655,8,555,3,555,7657,8,555,1,556,1,556,
        1,556,3,556,7662,8,556,1,557,1,557,1,557,3,557,7667,8,557,1,558,
        1,558,1,558,1,559,1,559,3,559,7674,8,559,1,559,1,559,1,560,1,560,
        3,560,7680,8,560,1,560,1,560,5,560,7684,8,560,10,560,12,560,7687,
        9,560,1,560,1,560,3,560,7691,8,560,1,560,3,560,7694,8,560,1,560,
        1,560,5,560,7698,8,560,10,560,12,560,7701,9,560,1,560,1,560,3,560,
        7705,8,560,1,560,3,560,7708,8,560,1,560,1,560,5,560,7712,8,560,10,
        560,12,560,7715,9,560,1,560,3,560,7718,8,560,1,560,1,560,1,560,1,
        560,3,560,7724,8,560,3,560,7726,8,560,1,560,3,560,7729,8,560,1,560,
        1,560,5,560,7733,8,560,10,560,12,560,7736,9,560,1,560,1,560,1,560,
        3,560,7741,8,560,1,560,1,560,1,560,1,560,1,560,3,560,7748,8,560,
        3,560,7750,8,560,3,560,7752,8,560,1,561,1,561,3,561,7756,8,561,1,
        562,1,562,5,562,7760,8,562,10,562,12,562,7763,9,562,1,562,3,562,
        7766,8,562,1,562,1,562,3,562,7770,8,562,1,562,1,562,1,562,3,562,
        7775,8,562,1,562,5,562,7778,8,562,10,562,12,562,7781,9,562,3,562,
        7783,8,562,1,563,3,563,7786,8,563,1,563,1,563,1,563,1,563,1,563,
        1,563,1,563,1,563,3,563,7796,8,563,1,563,1,563,1,563,1,563,3,563,
        7802,8,563,1,563,1,563,1,563,1,563,1,563,3,563,7809,8,563,1,563,
        1,563,1,563,3,563,7814,8,563,1,563,1,563,1,563,1,563,1,563,1,563,
        1,563,1,563,1,563,1,563,1,563,3,563,7827,8,563,1,563,1,563,1,563,
        1,563,1,563,1,563,3,563,7835,8,563,1,563,1,563,1,563,1,563,3,563,
        7841,8,563,1,563,1,563,1,563,3,563,7846,8,563,1,564,1,564,1,565,
        1,565,1,566,1,566,1,566,1,567,1,567,3,567,7857,8,567,1,568,1,568,
        3,568,7861,8,568,1,568,1,568,1,568,3,568,7866,8,568,1,568,1,568,
        3,568,7870,8,568,1,568,3,568,7873,8,568,1,569,1,569,1,569,3,569,
        7878,8,569,1,569,1,569,3,569,7882,8,569,1,569,1,569,1,569,1,569,
        1,569,1,569,3,569,7890,8,569,1,569,1,569,1,569,1,569,1,569,1,569,
        3,569,7898,8,569,3,569,7900,8,569,1,570,1,570,1,570,1,570,1,570,
        1,570,1,570,3,570,7909,8,570,1,571,1,571,1,571,1,571,5,571,7915,
        8,571,10,571,12,571,7918,9,571,1,571,1,571,1,572,1,572,3,572,7924,
        8,572,1,572,3,572,7927,8,572,1,573,1,573,1,573,1,573,5,573,7933,
        8,573,10,573,12,573,7936,9,573,1,573,1,573,1,574,1,574,1,574,1,574,
        3,574,7944,8,574,3,574,7946,8,574,1,575,1,575,1,576,1,576,3,576,
        7952,8,576,1,577,1,577,3,577,7956,8,577,1,577,1,577,1,577,1,577,
        1,577,1,577,1,577,3,577,7965,8,577,1,577,1,577,1,577,1,577,3,577,
        7971,8,577,1,577,3,577,7974,8,577,1,578,1,578,1,579,1,579,1,579,
        1,580,1,580,1,580,1,580,3,580,7985,8,580,1,581,1,581,1,582,1,582,
        1,582,1,583,1,583,3,583,7994,8,583,1,583,3,583,7997,8,583,1,583,
        1,583,1,583,3,583,8002,8,583,3,583,8004,8,583,1,583,3,583,8007,8,
        583,1,583,3,583,8010,8,583,1,583,1,583,3,583,8014,8,583,1,583,3,
        583,8017,8,583,1,583,1,583,3,583,8021,8,583,1,583,1,583,1,583,3,
        583,8026,8,583,1,583,3,583,8029,8,583,1,583,1,583,3,583,8033,8,583,
        1,583,3,583,8036,8,583,1,583,1,583,3,583,8040,8,583,1,583,1,583,
        1,583,3,583,8045,8,583,1,583,1,583,3,583,8049,8,583,1,583,1,583,
        1,583,1,583,1,583,1,583,1,583,1,583,1,583,1,583,3,583,8061,8,583,
        1,583,1,583,3,583,8065,8,583,1,583,1,583,1,583,1,583,3,583,8071,
        8,583,1,583,3,583,8074,8,583,1,583,1,583,1,583,3,583,8079,8,583,
        1,583,1,583,3,583,8083,8,583,1,583,1,583,3,583,8087,8,583,1,583,
        1,583,1,583,3,583,8092,8,583,1,583,1,583,1,583,1,583,1,583,1,583,
        1,583,3,583,8101,8,583,1,583,3,583,8104,8,583,1,583,1,583,3,583,
        8108,8,583,1,583,1,583,3,583,8112,8,583,1,583,3,583,8115,8,583,1,
        583,1,583,3,583,8119,8,583,1,583,1,583,3,583,8123,8,583,1,583,1,
        583,1,583,3,583,8128,8,583,1,583,1,583,1,583,3,583,8133,8,583,1,
        583,1,583,1,583,3,583,8138,8,583,1,584,1,584,1,584,3,584,8143,8,
        584,1,585,1,585,1,585,3,585,8148,8,585,3,585,8150,8,585,1,586,1,
        586,1,586,3,586,8155,8,586,1,586,1,586,1,587,4,587,8160,8,587,11,
        587,12,587,8161,1,588,1,588,1,588,1,588,1,588,1,588,3,588,8170,8,
        588,1,588,1,588,1,588,1,588,3,588,8176,8,588,3,588,8178,8,588,1,
        589,1,589,3,589,8182,8,589,1,589,1,589,3,589,8186,8,589,1,590,1,
        590,3,590,8190,8,590,1,590,1,590,3,590,8194,8,590,1,591,1,591,1,
        591,1,591,1,592,1,592,1,592,1,592,1,593,1,593,1,593,1,593,1,593,
        3,593,8209,8,593,1,594,1,594,1,594,1,594,3,594,8215,8,594,1,595,
        1,595,1,595,1,595,1,595,3,595,8222,8,595,1,596,1,596,3,596,8226,
        8,596,1,596,5,596,8229,8,596,10,596,12,596,8232,9,596,1,597,1,597,
        3,597,8236,8,597,1,597,3,597,8239,8,597,1,598,1,598,3,598,8243,8,
        598,1,598,3,598,8246,8,598,1,599,4,599,8249,8,599,11,599,12,599,
        8250,1,600,1,600,3,600,8255,8,600,1,600,1,600,1,600,1,600,3,600,
        8261,8,600,1,600,1,600,3,600,8265,8,600,1,600,1,600,3,600,8269,8,
        600,1,600,1,600,1,600,3,600,8274,8,600,1,600,1,600,1,600,3,600,8279,
        8,600,1,600,1,600,1,600,3,600,8284,8,600,1,600,1,600,1,600,3,600,
        8289,8,600,1,600,1,600,1,600,3,600,8294,8,600,1,600,1,600,1,600,
        3,600,8299,8,600,1,600,1,600,1,600,3,600,8304,8,600,1,600,1,600,
        1,600,3,600,8309,8,600,1,600,1,600,1,600,3,600,8314,8,600,1,600,
        1,600,1,600,3,600,8319,8,600,1,600,1,600,1,600,3,600,8324,8,600,
        1,600,1,600,1,600,3,600,8329,8,600,1,600,1,600,1,600,3,600,8334,
        8,600,1,600,1,600,1,600,1,600,1,600,1,600,1,600,1,600,3,600,8344,
        8,600,1,600,1,600,1,600,1,600,3,600,8350,8,600,1,600,1,600,1,600,
        1,600,3,600,8356,8,600,1,600,1,600,1,600,3,600,8361,8,600,1,600,
        1,600,1,600,1,600,1,600,3,600,8368,8,600,1,600,1,600,1,600,3,600,
        8373,8,600,1,600,1,600,1,600,1,600,1,600,1,600,1,600,3,600,8382,
        8,600,1,600,1,600,1,600,1,600,3,600,8388,8,600,1,600,1,600,1,600,
        3,600,8393,8,600,1,601,1,601,3,601,8397,8,601,1,602,3,602,8400,8,
        602,1,602,1,602,3,602,8404,8,602,1,602,1,602,1,603,3,603,8409,8,
        603,1,603,1,603,3,603,8413,8,603,1,603,1,603,1,604,3,604,8418,8,
        604,1,604,1,604,3,604,8422,8,604,1,604,1,604,1,605,1,605,1,605,1,
        605,1,605,3,605,8431,8,605,1,605,3,605,8434,8,605,1,605,3,605,8437,
        8,605,1,606,3,606,8440,8,606,1,606,1,606,3,606,8444,8,606,1,606,
        1,606,3,606,8448,8,606,1,606,1,606,3,606,8452,8,606,1,606,1,606,
        1,606,1,606,1,606,1,606,1,606,1,606,1,606,1,606,1,606,1,606,1,606,
        3,606,8467,8,606,1,606,3,606,8470,8,606,3,606,8472,8,606,1,607,1,
        607,1,607,3,607,8477,8,607,1,607,1,607,1,607,1,607,1,607,1,607,1,
        607,3,607,8486,8,607,1,607,3,607,8489,8,607,1,607,1,607,3,607,8493,
        8,607,1,608,1,608,1,608,1,608,1,609,1,609,1,609,1,609,5,609,8503,
        8,609,10,609,12,609,8506,9,609,1,609,1,609,1,610,1,610,1,610,1,610,
        1,610,1,610,1,610,3,610,8517,8,610,1,610,1,610,1,610,3,610,8522,
        8,610,1,610,5,610,8525,8,610,10,610,12,610,8528,9,610,1,610,1,610,
        1,610,1,610,5,610,8534,8,610,10,610,12,610,8537,9,610,1,610,1,610,
        3,610,8541,8,610,1,611,1,611,1,611,1,611,1,611,5,611,8548,8,611,
        10,611,12,611,8551,9,611,1,611,1,611,3,611,8555,8,611,1,612,1,612,
        3,612,8559,8,612,1,612,1,612,3,612,8563,8,612,1,612,1,612,3,612,
        8567,8,612,1,612,1,612,1,612,3,612,8572,8,612,1,612,1,612,1,612,
        3,612,8577,8,612,1,612,1,612,1,612,1,612,3,612,8583,8,612,1,612,
        1,612,1,612,3,612,8588,8,612,1,612,3,612,8591,8,612,1,613,1,613,
        1,613,5,613,8596,8,613,10,613,12,613,8599,9,613,1,614,1,614,1,614,
        1,614,5,614,8605,8,614,10,614,12,614,8608,9,614,1,614,1,614,1,615,
        1,615,3,615,8614,8,615,1,616,1,616,1,616,1,616,1,617,1,617,1,617,
        1,618,1,618,1,618,1,619,1,619,1,619,1,619,1,619,3,619,8631,8,619,
        3,619,8633,8,619,1,620,1,620,1,620,1,620,1,621,1,621,1,621,1,621,
        1,622,3,622,8644,8,622,1,622,1,622,1,623,1,623,1,623,1,624,1,624,
        1,624,1,625,1,625,3,625,8656,8,625,1,626,1,626,1,626,1,626,1,626,
        1,626,1,627,1,627,1,627,5,627,8667,8,627,10,627,12,627,8670,9,627,
        1,628,1,628,1,628,5,628,8675,8,628,10,628,12,628,8678,9,628,1,629,
        1,629,1,629,1,629,3,629,8684,8,629,1,630,1,630,1,630,1,631,1,631,
        4,631,8691,8,631,11,631,12,631,8692,1,632,1,632,1,632,1,632,3,632,
        8699,8,632,1,632,1,632,1,632,1,632,1,632,1,632,3,632,8707,8,632,
        1,633,1,633,4,633,8711,8,633,11,633,12,633,8712,1,634,1,634,1,634,
        1,634,1,635,1,635,1,635,5,635,8722,8,635,10,635,12,635,8725,9,635,
        1,636,1,636,1,636,5,636,8730,8,636,10,636,12,636,8733,9,636,1,637,
        1,637,1,637,3,637,8738,8,637,1,637,1,637,3,637,8742,8,637,1,637,
        3,637,8745,8,637,1,638,1,638,1,638,1,638,3,638,8751,8,638,1,639,
        1,639,1,639,1,639,1,639,1,639,3,639,8759,8,639,1,640,1,640,1,640,
        1,640,1,641,1,641,1,641,1,641,1,641,1,642,1,642,1,642,1,642,1,643,
        1,643,1,643,1,643,1,643,1,643,1,644,1,644,1,644,1,644,1,644,1,644,
        1,645,1,645,1,645,1,645,1,645,1,645,1,645,1,646,1,646,1,646,1,646,
        1,646,3,646,8798,8,646,1,647,1,647,1,647,1,647,1,648,1,648,1,648,
        1,648,1,649,1,649,1,649,1,649,1,649,1,649,1,649,1,649,1,649,1,649,
        1,649,1,649,1,649,1,649,1,649,3,649,8823,8,649,1,650,1,650,1,650,
        1,651,1,651,1,651,1,652,1,652,3,652,8833,8,652,1,653,1,653,1,653,
        3,653,8838,8,653,3,653,8840,8,653,1,654,1,654,1,654,1,655,1,655,
        3,655,8847,8,655,1,656,1,656,1,657,1,657,1,658,1,658,1,658,1,659,
        1,659,1,659,3,659,8859,8,659,3,659,8861,8,659,1,660,1,660,1,661,
        1,661,1,662,1,662,1,662,1,662,5,662,8871,8,662,10,662,12,662,8874,
        9,662,1,662,1,662,1,663,1,663,1,664,1,664,3,664,8882,8,664,1,665,
        1,665,1,666,1,666,1,667,1,667,1,667,1,667,1,667,3,667,8893,8,667,
        1,667,1,667,1,668,1,668,1,669,1,669,1,670,1,670,1,671,1,671,1,672,
        1,672,1,673,1,673,1,674,1,674,1,675,1,675,1,676,1,676,3,676,8915,
        8,676,1,677,1,677,3,677,8919,8,677,1,678,1,678,1,679,1,679,1,680,
        1,680,1,681,1,681,1,682,1,682,1,683,1,683,1,684,1,684,1,685,1,685,
        1,686,1,686,1,687,1,687,1,688,1,688,3,688,8943,8,688,1,689,1,689,
        1,689,1,690,1,690,1,690,1,690,1,690,1,690,3,690,8954,8,690,3,690,
        8956,8,690,1,691,1,691,3,691,8960,8,691,1,692,1,692,1,692,5,692,
        8965,8,692,10,692,12,692,8968,9,692,1,693,1,693,1,693,5,693,8973,
        8,693,10,693,12,693,8976,9,693,1,694,1,694,1,695,1,695,3,695,8982,
        8,695,1,696,1,696,1,697,1,697,3,697,8988,8,697,1,698,1,698,1,699,
        1,699,1,700,1,700,1,701,1,701,1,702,1,702,1,702,3,702,9001,8,702,
        1,703,1,703,3,703,9005,8,703,1,704,1,704,1,704,5,704,9010,8,704,
        10,704,12,704,9013,9,704,1,705,1,705,1,705,1,705,1,706,1,706,3,706,
        9021,8,706,1,707,1,707,1,707,3,707,9026,8,707,3,707,9028,8,707,1,
        708,1,708,1,708,1,709,1,709,1,710,1,710,1,711,1,711,1,712,1,712,
        1,712,1,712,1,712,3,712,9044,8,712,1,713,1,713,1,713,1,713,1,713,
        3,713,9051,8,713,1,714,1,714,1,714,3,714,9056,8,714,1,715,1,715,
        1,715,1,715,1,715,1,715,3,715,9064,8,715,1,715,3,715,9067,8,715,
        1,716,1,716,1,716,3,716,9072,8,716,1,717,1,717,1,718,1,718,1,718,
        1,718,5,718,9080,8,718,10,718,12,718,9083,9,718,1,718,1,718,1,719,
        1,719,1,719,3,719,9090,8,719,1,720,1,720,1,720,3,720,9095,8,720,
        1,721,1,721,1,721,3,721,9100,8,721,1,722,3,722,9103,8,722,1,722,
        1,722,3,722,9107,8,722,1,722,5,722,9110,8,722,10,722,12,722,9113,
        9,722,1,723,1,723,1,724,1,724,1,724,5,724,9120,8,724,10,724,12,724,
        9123,9,724,1,725,1,725,1,725,3,725,9128,8,725,1,726,1,726,1,727,
        1,727,1,728,1,728,1,729,1,729,1,729,1,729,1,729,1,729,3,729,9142,
        8,729,1,730,1,730,3,730,9146,8,730,1,731,1,731,1,732,1,732,1,732,
        1,732,1,732,1,732,1,733,1,733,3,733,9158,8,733,1,734,1,734,3,734,
        9162,8,734,1,735,1,735,3,735,9166,8,735,1,736,1,736,3,736,9170,8,
        736,1,737,1,737,1,737,1,738,1,738,1,739,1,739,1,740,1,740,1,740,
        1,740,1,740,1,740,3,740,9185,8,740,1,741,1,741,1,741,1,742,1,742,
        1,743,1,743,1,743,1,743,1,743,1,743,1,743,3,743,9199,8,743,1,743,
        1,743,1,743,1,743,1,743,3,743,9206,8,743,3,743,9208,8,743,1,744,
        1,744,1,745,1,745,1,746,1,746,1,746,1,746,1,746,1,746,1,746,1,746,
        1,746,1,746,1,746,3,746,9225,8,746,1,746,1,746,1,746,3,746,9230,
        8,746,3,746,9232,8,746,1,747,1,747,1,748,1,748,1,748,1,748,1,748,
        3,748,9241,8,748,1,749,1,749,1,749,3,749,9246,8,749,1,749,1,749,
        1,749,3,749,9251,8,749,3,749,9253,8,749,1,750,1,750,1,750,1,750,
        3,750,9259,8,750,1,751,1,751,1,752,1,752,1,753,1,753,1,753,3,753,
        9268,8,753,1,753,0,4,910,912,920,922,754,0,2,4,6,8,10,12,14,16,18,
        20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,
        64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,
        106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,
        138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,
        170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,
        202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,
        234,236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,
        266,268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,
        298,300,302,304,306,308,310,312,314,316,318,320,322,324,326,328,
        330,332,334,336,338,340,342,344,346,348,350,352,354,356,358,360,
        362,364,366,368,370,372,374,376,378,380,382,384,386,388,390,392,
        394,396,398,400,402,404,406,408,410,412,414,416,418,420,422,424,
        426,428,430,432,434,436,438,440,442,444,446,448,450,452,454,456,
        458,460,462,464,466,468,470,472,474,476,478,480,482,484,486,488,
        490,492,494,496,498,500,502,504,506,508,510,512,514,516,518,520,
        522,524,526,528,530,532,534,536,538,540,542,544,546,548,550,552,
        554,556,558,560,562,564,566,568,570,572,574,576,578,580,582,584,
        586,588,590,592,594,596,598,600,602,604,606,608,610,612,614,616,
        618,620,622,624,626,628,630,632,634,636,638,640,642,644,646,648,
        650,652,654,656,658,660,662,664,666,668,670,672,674,676,678,680,
        682,684,686,688,690,692,694,696,698,700,702,704,706,708,710,712,
        714,716,718,720,722,724,726,728,730,732,734,736,738,740,742,744,
        746,748,750,752,754,756,758,760,762,764,766,768,770,772,774,776,
        778,780,782,784,786,788,790,792,794,796,798,800,802,804,806,808,
        810,812,814,816,818,820,822,824,826,828,830,832,834,836,838,840,
        842,844,846,848,850,852,854,856,858,860,862,864,866,868,870,872,
        874,876,878,880,882,884,886,888,890,892,894,896,898,900,902,904,
        906,908,910,912,914,916,918,920,922,924,926,928,930,932,934,936,
        938,940,942,944,946,948,950,952,954,956,958,960,962,964,966,968,
        970,972,974,976,978,980,982,984,986,988,990,992,994,996,998,1000,
        1002,1004,1006,1008,1010,1012,1014,1016,1018,1020,1022,1024,1026,
        1028,1030,1032,1034,1036,1038,1040,1042,1044,1046,1048,1050,1052,
        1054,1056,1058,1060,1062,1064,1066,1068,1070,1072,1074,1076,1078,
        1080,1082,1084,1086,1088,1090,1092,1094,1096,1098,1100,1102,1104,
        1106,1108,1110,1112,1114,1116,1118,1120,1122,1124,1126,1128,1130,
        1132,1134,1136,1138,1140,1142,1144,1146,1148,1150,1152,1154,1156,
        1158,1160,1162,1164,1166,1168,1170,1172,1174,1176,1178,1180,1182,
        1184,1186,1188,1190,1192,1194,1196,1198,1200,1202,1204,1206,1208,
        1210,1212,1214,1216,1218,1220,1222,1224,1226,1228,1230,1232,1234,
        1236,1238,1240,1242,1244,1246,1248,1250,1252,1254,1256,1258,1260,
        1262,1264,1266,1268,1270,1272,1274,1276,1278,1280,1282,1284,1286,
        1288,1290,1292,1294,1296,1298,1300,1302,1304,1306,1308,1310,1312,
        1314,1316,1318,1320,1322,1324,1326,1328,1330,1332,1334,1336,1338,
        1340,1342,1344,1346,1348,1350,1352,1354,1356,1358,1360,1362,1364,
        1366,1368,1370,1372,1374,1376,1378,1380,1382,1384,1386,1388,1390,
        1392,1394,1396,1398,1400,1402,1404,1406,1408,1410,1412,1414,1416,
        1418,1420,1422,1424,1426,1428,1430,1432,1434,1436,1438,1440,1442,
        1444,1446,1448,1450,1452,1454,1456,1458,1460,1462,1464,1466,1468,
        1470,1472,1474,1476,1478,1480,1482,1484,1486,1488,1490,1492,1494,
        1496,1498,1500,1502,1504,1506,0,176,1,0,730,731,2,0,63,63,599,599,
        2,0,93,93,488,488,1,0,653,654,2,0,51,51,184,184,1,0,732,733,2,0,
        94,94,312,312,2,0,177,177,192,192,2,0,264,264,475,475,4,0,164,164,
        280,280,455,455,566,566,2,0,168,168,281,281,2,0,458,458,613,613,
        2,0,393,393,646,646,3,0,359,359,587,587,611,611,2,0,53,53,73,73,
        3,0,171,171,274,274,623,623,2,0,229,229,433,433,2,0,581,581,583,
        583,3,0,264,264,321,321,449,449,2,0,225,225,387,387,4,0,225,225,
        298,298,387,387,437,437,2,0,6,6,9,12,3,0,169,169,255,255,321,321,
        1,0,635,636,2,0,153,153,661,661,2,0,125,125,321,321,2,0,805,805,
        811,811,2,0,308,308,500,500,2,0,169,169,321,321,2,0,671,671,803,
        803,6,0,57,57,180,180,255,255,542,544,546,546,565,565,2,0,29,29,
        400,400,2,0,3,5,43,43,3,0,450,450,500,500,691,691,2,0,141,141,497,
        497,2,0,64,64,172,172,2,0,520,520,623,623,2,0,302,302,495,495,2,
        0,140,140,271,271,2,0,57,57,180,180,2,0,230,230,264,264,2,0,268,
        268,295,295,2,0,404,404,657,657,3,0,276,276,581,581,583,583,2,0,
        74,74,553,553,2,0,291,291,489,489,2,0,77,77,341,341,2,0,322,322,
        766,766,2,0,326,326,772,772,2,0,323,323,767,767,2,0,343,343,790,
        790,2,0,329,329,775,775,2,0,330,330,776,776,2,0,324,324,769,769,
        2,0,331,331,778,778,2,0,325,325,770,770,2,0,339,339,779,779,2,0,
        333,333,780,780,2,0,332,332,781,781,2,0,335,335,783,783,2,0,336,
        336,784,784,2,0,337,337,785,785,2,0,338,338,786,786,2,0,340,340,
        787,787,2,0,342,342,789,789,2,0,746,746,788,788,2,0,334,334,782,
        782,2,0,720,720,777,777,2,0,721,721,765,765,2,0,344,344,771,771,
        2,0,743,743,768,768,2,0,744,744,791,791,3,0,401,401,751,752,806,
        806,2,0,327,327,773,773,2,0,328,328,774,774,2,0,539,539,541,541,
        2,0,466,466,548,548,2,0,526,526,762,762,2,0,163,163,184,184,3,0,
        389,389,549,549,658,658,2,0,314,314,620,620,2,0,166,166,727,727,
        3,0,238,238,440,440,583,583,4,0,274,274,460,460,511,511,623,623,
        13,0,171,171,184,184,205,205,208,208,222,222,268,268,441,441,445,
        445,468,468,522,522,575,575,603,603,625,625,4,0,499,499,582,582,
        627,627,644,644,2,0,139,139,184,184,2,0,166,166,389,389,2,0,215,
        215,449,449,1,0,813,814,5,0,100,100,215,215,219,219,357,357,449,
        449,3,0,215,215,449,449,628,628,2,0,246,246,666,666,2,0,119,119,
        610,610,2,0,235,235,282,282,2,0,267,268,293,293,6,0,57,57,138,138,
        286,286,358,358,533,533,577,577,2,0,127,127,448,448,4,0,257,257,
        439,439,557,557,626,626,5,0,77,77,198,198,200,200,240,240,527,527,
        2,0,627,627,718,718,2,0,172,173,213,213,3,0,218,218,605,605,619,
        619,2,0,23,23,61,61,2,0,26,26,412,412,2,0,57,57,62,62,2,0,6,6,8,
        13,3,0,16,18,181,181,372,372,1,0,14,15,1,0,21,22,2,0,14,15,20,20,
        2,0,79,80,82,82,2,0,350,350,368,368,5,0,558,558,561,561,574,574,
        640,640,643,643,4,0,686,687,700,700,702,702,704,704,2,0,692,692,
        694,694,2,0,689,689,693,693,2,0,225,225,298,298,2,0,718,718,815,
        815,2,0,264,264,703,703,2,0,52,52,568,568,1,0,155,156,1,0,593,594,
        4,0,154,154,157,157,592,592,595,595,4,0,243,243,309,309,374,376,
        429,430,2,0,1,1,390,390,2,0,1,1,19,19,5,0,158,161,258,260,364,365,
        508,508,663,663,9,0,162,162,261,261,361,361,366,366,373,373,447,
        447,509,509,648,648,664,664,3,0,135,135,210,210,614,614,2,0,143,
        143,550,550,2,0,396,396,501,501,10,0,97,97,107,107,116,116,130,132,
        148,148,360,360,378,378,507,507,567,567,585,585,2,0,564,564,645,
        645,3,0,166,166,188,188,226,226,3,0,166,166,179,179,358,358,3,0,
        236,236,420,420,525,525,3,0,88,88,252,252,504,504,1,0,669,670,2,
        0,608,608,630,630,5,0,76,76,280,280,355,355,528,528,597,597,3,0,
        164,164,226,227,397,397,1,0,85,86,2,0,317,317,354,354,4,0,243,244,
        309,309,374,376,429,430,3,0,524,524,621,621,665,665,1,0,554,556,
        2,0,104,104,584,584,6,0,121,121,123,123,166,166,188,188,226,226,
        459,459,3,0,225,225,298,298,392,392,2,0,179,179,358,358,2,0,310,
        310,450,450,2,0,348,348,367,367,2,0,153,153,268,268,3,0,272,272,
        282,282,415,415,2,0,551,551,588,588,2,0,399,399,403,403,2,0,312,
        312,394,394,2,0,820,820,822,822,3,0,3,5,44,44,46,47,2,0,3,5,44,44,
        2,0,3,5,46,47,1,0,44,45,2,0,218,218,605,605,2,0,42,42,395,395,1,
        0,3,5,1,0,6,7,5,0,246,246,312,312,516,516,666,666,681,681,3,0,208,
        208,522,522,722,722,32,0,65,65,74,74,90,91,102,102,104,104,118,118,
        120,120,133,133,163,163,183,183,195,195,228,229,251,251,254,254,
        266,266,277,277,297,297,392,392,433,433,435,435,472,472,485,485,
        496,496,505,505,524,524,526,526,553,553,562,562,606,606,615,616,
        659,659,685,685,9,0,205,205,222,222,389,389,441,441,445,445,468,
        468,476,476,575,575,717,717,157,0,49,50,52,56,59,59,62,62,67,72,
        78,78,81,81,84,86,88,88,94,94,97,98,100,101,106,111,113,114,116,
        117,119,119,121,125,127,128,130,132,134,134,138,138,143,143,148,
        148,152,154,157,157,162,162,167,168,170,170,175,179,186,188,192,
        192,194,194,196,201,203,204,206,207,211,212,214,216,219,220,223,
        226,233,234,236,236,240,240,242,245,248,248,252,252,256,257,261,
        262,265,265,267,267,270,270,275,276,281,281,285,286,288,289,292,
        292,294,294,298,298,300,300,303,304,309,310,313,313,315,316,322,
        322,324,339,341,344,346,349,351,352,357,361,363,363,366,367,369,
        369,371,371,373,381,383,388,393,393,396,396,398,398,400,400,402,
        402,404,405,408,408,416,422,424,431,436,437,439,439,442,444,447,
        449,452,452,456,459,462,466,469,469,471,471,473,473,477,483,487,
        487,489,491,493,493,497,499,501,502,504,504,506,507,509,510,514,
        515,517,517,520,520,525,525,527,527,529,533,539,541,543,543,545,
        545,548,548,550,550,552,552,554,557,563,563,566,571,576,578,581,
        582,584,587,589,590,592,595,601,602,607,608,610,613,619,619,622,
        622,624,624,626,628,634,634,636,636,639,639,644,644,646,649,654,
        656,658,658,660,661,664,664,667,670,672,672,677,679,682,683,688,
        688,690,690,697,698,701,701,703,703,705,706,710,716,719,721,723,
        733,735,738,740,740,743,746,753,756,758,760,762,802,4,0,592,592,
        595,595,739,739,741,752,4,0,804,804,806,809,811,811,815,815,54,0,
        49,49,59,59,65,65,72,72,74,74,90,91,102,102,104,104,109,109,118,
        118,120,120,133,133,163,163,183,183,195,195,228,229,233,233,242,
        242,251,251,254,254,256,256,277,277,297,297,392,392,405,405,408,
        408,416,416,419,419,423,423,431,431,433,433,435,435,469,469,472,
        472,485,485,487,487,496,496,505,505,510,510,517,517,524,524,526,
        526,530,531,553,553,562,562,606,606,615,616,624,624,656,656,659,
        659,667,667,669,670,685,685,728,731,148,0,50,50,52,56,62,62,67,71,
        78,78,81,81,84,86,88,88,94,94,97,98,100,101,106,108,110,111,113,
        114,116,117,119,119,121,125,127,128,130,132,134,134,138,138,143,
        143,148,148,152,154,157,157,162,162,167,168,170,170,175,179,186,
        188,192,192,194,194,196,201,203,204,206,206,211,211,214,216,219,
        220,223,226,234,234,236,236,240,240,243,246,248,248,252,252,257,
        257,261,262,265,265,267,267,270,270,275,276,281,281,285,286,288,
        289,292,292,294,294,298,298,300,300,303,304,309,310,312,313,315,
        316,322,322,324,339,341,344,346,349,351,352,357,361,363,363,366,
        367,369,369,371,371,373,381,383,388,393,393,396,396,398,398,400,
        400,402,402,417,418,420,422,424,430,436,437,439,439,442,444,447,
        449,452,452,456,459,462,466,471,471,473,473,477,483,489,491,493,
        493,497,499,501,502,504,504,506,507,509,509,514,516,520,520,525,
        525,527,527,529,529,532,533,539,541,543,543,545,545,548,548,550,
        550,552,552,554,557,563,563,566,571,575,578,581,582,584,587,589,
        590,592,595,601,602,607,613,619,619,622,622,626,628,636,636,639,
        639,644,644,646,649,655,655,658,658,660,661,664,664,672,672,677,
        679,682,684,688,688,690,690,697,698,701,701,703,703,705,706,710,
        716,719,720,724,725,727,727,732,733,735,736,757,757,10334,0,1515,
        1,0,0,0,2,1595,1,0,0,0,4,1597,1,0,0,0,6,1620,1,0,0,0,8,1634,1,0,
        0,0,10,1637,1,0,0,0,12,1675,1,0,0,0,14,1684,1,0,0,0,16,1697,1,0,
        0,0,18,1699,1,0,0,0,20,1704,1,0,0,0,22,1724,1,0,0,0,24,1733,1,0,
        0,0,26,1735,1,0,0,0,28,1750,1,0,0,0,30,1846,1,0,0,0,32,1850,1,0,
        0,0,34,1866,1,0,0,0,36,2003,1,0,0,0,38,2008,1,0,0,0,40,2010,1,0,
        0,0,42,2012,1,0,0,0,44,2026,1,0,0,0,46,2034,1,0,0,0,48,2050,1,0,
        0,0,50,2052,1,0,0,0,52,2055,1,0,0,0,54,2060,1,0,0,0,56,2062,1,0,
        0,0,58,2077,1,0,0,0,60,2085,1,0,0,0,62,2095,1,0,0,0,64,2097,1,0,
        0,0,66,2119,1,0,0,0,68,2128,1,0,0,0,70,2131,1,0,0,0,72,2144,1,0,
        0,0,74,2149,1,0,0,0,76,2153,1,0,0,0,78,2192,1,0,0,0,80,2194,1,0,
        0,0,82,2214,1,0,0,0,84,2229,1,0,0,0,86,2232,1,0,0,0,88,2257,1,0,
        0,0,90,2267,1,0,0,0,92,2270,1,0,0,0,94,2275,1,0,0,0,96,2284,1,0,
        0,0,98,2286,1,0,0,0,100,2290,1,0,0,0,102,2302,1,0,0,0,104,2331,1,
        0,0,0,106,2337,1,0,0,0,108,2340,1,0,0,0,110,2370,1,0,0,0,112,2387,
        1,0,0,0,114,2390,1,0,0,0,116,2415,1,0,0,0,118,2418,1,0,0,0,120,2470,
        1,0,0,0,122,2472,1,0,0,0,124,2476,1,0,0,0,126,2485,1,0,0,0,128,2501,
        1,0,0,0,130,2503,1,0,0,0,132,2511,1,0,0,0,134,2537,1,0,0,0,136,2539,
        1,0,0,0,138,2551,1,0,0,0,140,2566,1,0,0,0,142,2568,1,0,0,0,144,2571,
        1,0,0,0,146,2592,1,0,0,0,148,2594,1,0,0,0,150,2600,1,0,0,0,152,2606,
        1,0,0,0,154,2612,1,0,0,0,156,2618,1,0,0,0,158,2624,1,0,0,0,160,2631,
        1,0,0,0,162,2639,1,0,0,0,164,2641,1,0,0,0,166,2647,1,0,0,0,168,2653,
        1,0,0,0,170,2659,1,0,0,0,172,2666,1,0,0,0,174,2684,1,0,0,0,176,2686,
        1,0,0,0,178,2690,1,0,0,0,180,2695,1,0,0,0,182,2714,1,0,0,0,184,2718,
        1,0,0,0,186,2751,1,0,0,0,188,2782,1,0,0,0,190,2799,1,0,0,0,192,2801,
        1,0,0,0,194,2820,1,0,0,0,196,2826,1,0,0,0,198,2832,1,0,0,0,200,2838,
        1,0,0,0,202,2845,1,0,0,0,204,2854,1,0,0,0,206,2871,1,0,0,0,208,2873,
        1,0,0,0,210,2880,1,0,0,0,212,2890,1,0,0,0,214,2904,1,0,0,0,216,2910,
        1,0,0,0,218,2918,1,0,0,0,220,2924,1,0,0,0,222,2932,1,0,0,0,224,2938,
        1,0,0,0,226,2948,1,0,0,0,228,2952,1,0,0,0,230,2958,1,0,0,0,232,2963,
        1,0,0,0,234,2973,1,0,0,0,236,3016,1,0,0,0,238,3021,1,0,0,0,240,3023,
        1,0,0,0,242,3026,1,0,0,0,244,3056,1,0,0,0,246,3058,1,0,0,0,248,3087,
        1,0,0,0,250,3094,1,0,0,0,252,3098,1,0,0,0,254,3106,1,0,0,0,256,3119,
        1,0,0,0,258,3121,1,0,0,0,260,3139,1,0,0,0,262,3151,1,0,0,0,264,3157,
        1,0,0,0,266,3163,1,0,0,0,268,3215,1,0,0,0,270,3217,1,0,0,0,272,3219,
        1,0,0,0,274,3225,1,0,0,0,276,3227,1,0,0,0,278,3235,1,0,0,0,280,3241,
        1,0,0,0,282,3249,1,0,0,0,284,3258,1,0,0,0,286,3268,1,0,0,0,288,3283,
        1,0,0,0,290,3288,1,0,0,0,292,3293,1,0,0,0,294,3298,1,0,0,0,296,3320,
        1,0,0,0,298,3339,1,0,0,0,300,3342,1,0,0,0,302,3353,1,0,0,0,304,3369,
        1,0,0,0,306,3381,1,0,0,0,308,3383,1,0,0,0,310,3412,1,0,0,0,312,3414,
        1,0,0,0,314,3416,1,0,0,0,316,3419,1,0,0,0,318,3422,1,0,0,0,320,3429,
        1,0,0,0,322,3431,1,0,0,0,324,3461,1,0,0,0,326,3472,1,0,0,0,328,3475,
        1,0,0,0,330,3479,1,0,0,0,332,3488,1,0,0,0,334,3492,1,0,0,0,336,3497,
        1,0,0,0,338,3510,1,0,0,0,340,3515,1,0,0,0,342,3519,1,0,0,0,344,3535,
        1,0,0,0,346,3537,1,0,0,0,348,3555,1,0,0,0,350,3557,1,0,0,0,352,3566,
        1,0,0,0,354,3578,1,0,0,0,356,3599,1,0,0,0,358,3601,1,0,0,0,360,3604,
        1,0,0,0,362,3608,1,0,0,0,364,3610,1,0,0,0,366,3615,1,0,0,0,368,3623,
        1,0,0,0,370,3632,1,0,0,0,372,3635,1,0,0,0,374,3644,1,0,0,0,376,3646,
        1,0,0,0,378,3665,1,0,0,0,380,3667,1,0,0,0,382,3672,1,0,0,0,384,3676,
        1,0,0,0,386,3690,1,0,0,0,388,3693,1,0,0,0,390,3699,1,0,0,0,392,3712,
        1,0,0,0,394,3720,1,0,0,0,396,3746,1,0,0,0,398,3759,1,0,0,0,400,3766,
        1,0,0,0,402,3768,1,0,0,0,404,3780,1,0,0,0,406,3782,1,0,0,0,408,3795,
        1,0,0,0,410,3818,1,0,0,0,412,3820,1,0,0,0,414,3827,1,0,0,0,416,3837,
        1,0,0,0,418,3872,1,0,0,0,420,3879,1,0,0,0,422,3885,1,0,0,0,424,3887,
        1,0,0,0,426,3891,1,0,0,0,428,3899,1,0,0,0,430,3901,1,0,0,0,432,3906,
        1,0,0,0,434,3910,1,0,0,0,436,3938,1,0,0,0,438,3940,1,0,0,0,440,3942,
        1,0,0,0,442,3950,1,0,0,0,444,3952,1,0,0,0,446,3960,1,0,0,0,448,3970,
        1,0,0,0,450,3973,1,0,0,0,452,3998,1,0,0,0,454,4025,1,0,0,0,456,4027,
        1,0,0,0,458,4036,1,0,0,0,460,4067,1,0,0,0,462,4085,1,0,0,0,464,4087,
        1,0,0,0,466,4101,1,0,0,0,468,4103,1,0,0,0,470,4134,1,0,0,0,472,4137,
        1,0,0,0,474,4168,1,0,0,0,476,4170,1,0,0,0,478,4189,1,0,0,0,480,4197,
        1,0,0,0,482,4199,1,0,0,0,484,4202,1,0,0,0,486,4215,1,0,0,0,488,4217,
        1,0,0,0,490,4224,1,0,0,0,492,4360,1,0,0,0,494,4362,1,0,0,0,496,4364,
        1,0,0,0,498,4366,1,0,0,0,500,4368,1,0,0,0,502,4370,1,0,0,0,504,4372,
        1,0,0,0,506,4374,1,0,0,0,508,4376,1,0,0,0,510,4378,1,0,0,0,512,4380,
        1,0,0,0,514,4382,1,0,0,0,516,4384,1,0,0,0,518,4386,1,0,0,0,520,4388,
        1,0,0,0,522,4390,1,0,0,0,524,4392,1,0,0,0,526,4394,1,0,0,0,528,4396,
        1,0,0,0,530,4398,1,0,0,0,532,4400,1,0,0,0,534,4402,1,0,0,0,536,4404,
        1,0,0,0,538,4406,1,0,0,0,540,4408,1,0,0,0,542,4410,1,0,0,0,544,4414,
        1,0,0,0,546,4416,1,0,0,0,548,4421,1,0,0,0,550,4425,1,0,0,0,552,4441,
        1,0,0,0,554,4443,1,0,0,0,556,4445,1,0,0,0,558,4447,1,0,0,0,560,4460,
        1,0,0,0,562,4523,1,0,0,0,564,4525,1,0,0,0,566,4533,1,0,0,0,568,4541,
        1,0,0,0,570,4549,1,0,0,0,572,4551,1,0,0,0,574,4559,1,0,0,0,576,4583,
        1,0,0,0,578,4596,1,0,0,0,580,4605,1,0,0,0,582,4609,1,0,0,0,584,4613,
        1,0,0,0,586,4617,1,0,0,0,588,4621,1,0,0,0,590,4629,1,0,0,0,592,4636,
        1,0,0,0,594,4640,1,0,0,0,596,4651,1,0,0,0,598,4653,1,0,0,0,600,4657,
        1,0,0,0,602,4661,1,0,0,0,604,4665,1,0,0,0,606,4678,1,0,0,0,608,4680,
        1,0,0,0,610,4686,1,0,0,0,612,4694,1,0,0,0,614,4731,1,0,0,0,616,4733,
        1,0,0,0,618,4746,1,0,0,0,620,4748,1,0,0,0,622,4795,1,0,0,0,624,4878,
        1,0,0,0,626,4937,1,0,0,0,628,4939,1,0,0,0,630,4942,1,0,0,0,632,4954,
        1,0,0,0,634,4973,1,0,0,0,636,4975,1,0,0,0,638,4979,1,0,0,0,640,4984,
        1,0,0,0,642,5037,1,0,0,0,644,5044,1,0,0,0,646,5046,1,0,0,0,648,5053,
        1,0,0,0,650,5101,1,0,0,0,652,5103,1,0,0,0,654,5106,1,0,0,0,656,5109,
        1,0,0,0,658,5120,1,0,0,0,660,5125,1,0,0,0,662,5128,1,0,0,0,664,5143,
        1,0,0,0,666,5189,1,0,0,0,668,5191,1,0,0,0,670,5241,1,0,0,0,672,5259,
        1,0,0,0,674,5261,1,0,0,0,676,5277,1,0,0,0,678,5292,1,0,0,0,680,5317,
        1,0,0,0,682,5319,1,0,0,0,684,5327,1,0,0,0,686,5373,1,0,0,0,688,5375,
        1,0,0,0,690,5389,1,0,0,0,692,5391,1,0,0,0,694,5406,1,0,0,0,696,5411,
        1,0,0,0,698,5413,1,0,0,0,700,5415,1,0,0,0,702,5429,1,0,0,0,704,5442,
        1,0,0,0,706,5446,1,0,0,0,708,5448,1,0,0,0,710,5453,1,0,0,0,712,5463,
        1,0,0,0,714,5516,1,0,0,0,716,5527,1,0,0,0,718,5529,1,0,0,0,720,5532,
        1,0,0,0,722,5545,1,0,0,0,724,5577,1,0,0,0,726,5585,1,0,0,0,728,5587,
        1,0,0,0,730,5598,1,0,0,0,732,5600,1,0,0,0,734,5611,1,0,0,0,736,5613,
        1,0,0,0,738,5618,1,0,0,0,740,5629,1,0,0,0,742,5640,1,0,0,0,744,5648,
        1,0,0,0,746,5657,1,0,0,0,748,5666,1,0,0,0,750,5671,1,0,0,0,752,5674,
        1,0,0,0,754,5679,1,0,0,0,756,5684,1,0,0,0,758,5689,1,0,0,0,760,5702,
        1,0,0,0,762,5706,1,0,0,0,764,5711,1,0,0,0,766,5718,1,0,0,0,768,5735,
        1,0,0,0,770,5752,1,0,0,0,772,5765,1,0,0,0,774,5771,1,0,0,0,776,5778,
        1,0,0,0,778,5785,1,0,0,0,780,5790,1,0,0,0,782,5795,1,0,0,0,784,5798,
        1,0,0,0,786,5811,1,0,0,0,788,5819,1,0,0,0,790,5825,1,0,0,0,792,5833,
        1,0,0,0,794,5838,1,0,0,0,796,5843,1,0,0,0,798,5846,1,0,0,0,800,5856,
        1,0,0,0,802,5864,1,0,0,0,804,5869,1,0,0,0,806,5874,1,0,0,0,808,5878,
        1,0,0,0,810,5884,1,0,0,0,812,5889,1,0,0,0,814,5894,1,0,0,0,816,5899,
        1,0,0,0,818,5906,1,0,0,0,820,5913,1,0,0,0,822,5919,1,0,0,0,824,5925,
        1,0,0,0,826,5930,1,0,0,0,828,5940,1,0,0,0,830,5944,1,0,0,0,832,5946,
        1,0,0,0,834,5948,1,0,0,0,836,5951,1,0,0,0,838,5966,1,0,0,0,840,6004,
        1,0,0,0,842,6008,1,0,0,0,844,6010,1,0,0,0,846,6018,1,0,0,0,848,6022,
        1,0,0,0,850,6030,1,0,0,0,852,6039,1,0,0,0,854,6041,1,0,0,0,856,6060,
        1,0,0,0,858,6062,1,0,0,0,860,6064,1,0,0,0,862,6079,1,0,0,0,864,6091,
        1,0,0,0,866,6093,1,0,0,0,868,6101,1,0,0,0,870,6109,1,0,0,0,872,6118,
        1,0,0,0,874,6120,1,0,0,0,876,6138,1,0,0,0,878,6152,1,0,0,0,880,6157,
        1,0,0,0,882,6163,1,0,0,0,884,6165,1,0,0,0,886,6181,1,0,0,0,888,6189,
        1,0,0,0,890,6199,1,0,0,0,892,6212,1,0,0,0,894,6214,1,0,0,0,896,6220,
        1,0,0,0,898,6248,1,0,0,0,900,6258,1,0,0,0,902,6260,1,0,0,0,904,6264,
        1,0,0,0,906,6267,1,0,0,0,908,6270,1,0,0,0,910,6283,1,0,0,0,912,6299,
        1,0,0,0,914,6322,1,0,0,0,916,6324,1,0,0,0,918,6361,1,0,0,0,920,6363,
        1,0,0,0,922,6517,1,0,0,0,924,6530,1,0,0,0,926,6537,1,0,0,0,928,6624,
        1,0,0,0,930,6626,1,0,0,0,932,6680,1,0,0,0,934,6682,1,0,0,0,936,6688,
        1,0,0,0,938,6690,1,0,0,0,940,6697,1,0,0,0,942,6702,1,0,0,0,944,6715,
        1,0,0,0,946,6721,1,0,0,0,948,6723,1,0,0,0,950,6742,1,0,0,0,952,6745,
        1,0,0,0,954,6754,1,0,0,0,956,6756,1,0,0,0,958,6779,1,0,0,0,960,7064,
        1,0,0,0,962,7066,1,0,0,0,964,7092,1,0,0,0,966,7094,1,0,0,0,968,7100,
        1,0,0,0,970,7102,1,0,0,0,972,7117,1,0,0,0,974,7125,1,0,0,0,976,7127,
        1,0,0,0,978,7156,1,0,0,0,980,7189,1,0,0,0,982,7191,1,0,0,0,984,7199,
        1,0,0,0,986,7206,1,0,0,0,988,7208,1,0,0,0,990,7218,1,0,0,0,992,7233,
        1,0,0,0,994,7235,1,0,0,0,996,7239,1,0,0,0,998,7242,1,0,0,0,1000,
        7245,1,0,0,0,1002,7296,1,0,0,0,1004,7298,1,0,0,0,1006,7309,1,0,0,
        0,1008,7311,1,0,0,0,1010,7313,1,0,0,0,1012,7317,1,0,0,0,1014,7319,
        1,0,0,0,1016,7321,1,0,0,0,1018,7325,1,0,0,0,1020,7329,1,0,0,0,1022,
        7333,1,0,0,0,1024,7341,1,0,0,0,1026,7345,1,0,0,0,1028,7353,1,0,0,
        0,1030,7355,1,0,0,0,1032,7372,1,0,0,0,1034,7374,1,0,0,0,1036,7377,
        1,0,0,0,1038,7382,1,0,0,0,1040,7390,1,0,0,0,1042,7396,1,0,0,0,1044,
        7400,1,0,0,0,1046,7417,1,0,0,0,1048,7420,1,0,0,0,1050,7425,1,0,0,
        0,1052,7427,1,0,0,0,1054,7430,1,0,0,0,1056,7439,1,0,0,0,1058,7447,
        1,0,0,0,1060,7449,1,0,0,0,1062,7454,1,0,0,0,1064,7461,1,0,0,0,1066,
        7471,1,0,0,0,1068,7479,1,0,0,0,1070,7481,1,0,0,0,1072,7491,1,0,0,
        0,1074,7499,1,0,0,0,1076,7501,1,0,0,0,1078,7507,1,0,0,0,1080,7528,
        1,0,0,0,1082,7530,1,0,0,0,1084,7536,1,0,0,0,1086,7539,1,0,0,0,1088,
        7542,1,0,0,0,1090,7570,1,0,0,0,1092,7574,1,0,0,0,1094,7581,1,0,0,
        0,1096,7588,1,0,0,0,1098,7590,1,0,0,0,1100,7606,1,0,0,0,1102,7622,
        1,0,0,0,1104,7626,1,0,0,0,1106,7629,1,0,0,0,1108,7632,1,0,0,0,1110,
        7656,1,0,0,0,1112,7658,1,0,0,0,1114,7666,1,0,0,0,1116,7668,1,0,0,
        0,1118,7671,1,0,0,0,1120,7751,1,0,0,0,1122,7753,1,0,0,0,1124,7757,
        1,0,0,0,1126,7845,1,0,0,0,1128,7847,1,0,0,0,1130,7849,1,0,0,0,1132,
        7851,1,0,0,0,1134,7856,1,0,0,0,1136,7872,1,0,0,0,1138,7874,1,0,0,
        0,1140,7908,1,0,0,0,1142,7910,1,0,0,0,1144,7921,1,0,0,0,1146,7928,
        1,0,0,0,1148,7945,1,0,0,0,1150,7947,1,0,0,0,1152,7951,1,0,0,0,1154,
        7973,1,0,0,0,1156,7975,1,0,0,0,1158,7977,1,0,0,0,1160,7984,1,0,0,
        0,1162,7986,1,0,0,0,1164,7988,1,0,0,0,1166,8137,1,0,0,0,1168,8142,
        1,0,0,0,1170,8149,1,0,0,0,1172,8151,1,0,0,0,1174,8159,1,0,0,0,1176,
        8177,1,0,0,0,1178,8185,1,0,0,0,1180,8193,1,0,0,0,1182,8195,1,0,0,
        0,1184,8199,1,0,0,0,1186,8208,1,0,0,0,1188,8214,1,0,0,0,1190,8221,
        1,0,0,0,1192,8223,1,0,0,0,1194,8238,1,0,0,0,1196,8245,1,0,0,0,1198,
        8248,1,0,0,0,1200,8392,1,0,0,0,1202,8396,1,0,0,0,1204,8399,1,0,0,
        0,1206,8408,1,0,0,0,1208,8417,1,0,0,0,1210,8425,1,0,0,0,1212,8471,
        1,0,0,0,1214,8473,1,0,0,0,1216,8494,1,0,0,0,1218,8498,1,0,0,0,1220,
        8509,1,0,0,0,1222,8554,1,0,0,0,1224,8590,1,0,0,0,1226,8592,1,0,0,
        0,1228,8600,1,0,0,0,1230,8613,1,0,0,0,1232,8615,1,0,0,0,1234,8619,
        1,0,0,0,1236,8622,1,0,0,0,1238,8632,1,0,0,0,1240,8634,1,0,0,0,1242,
        8638,1,0,0,0,1244,8643,1,0,0,0,1246,8647,1,0,0,0,1248,8650,1,0,0,
        0,1250,8653,1,0,0,0,1252,8657,1,0,0,0,1254,8663,1,0,0,0,1256,8671,
        1,0,0,0,1258,8679,1,0,0,0,1260,8685,1,0,0,0,1262,8688,1,0,0,0,1264,
        8706,1,0,0,0,1266,8708,1,0,0,0,1268,8714,1,0,0,0,1270,8718,1,0,0,
        0,1272,8726,1,0,0,0,1274,8734,1,0,0,0,1276,8746,1,0,0,0,1278,8758,
        1,0,0,0,1280,8760,1,0,0,0,1282,8764,1,0,0,0,1284,8769,1,0,0,0,1286,
        8773,1,0,0,0,1288,8779,1,0,0,0,1290,8785,1,0,0,0,1292,8792,1,0,0,
        0,1294,8799,1,0,0,0,1296,8803,1,0,0,0,1298,8822,1,0,0,0,1300,8824,
        1,0,0,0,1302,8827,1,0,0,0,1304,8830,1,0,0,0,1306,8839,1,0,0,0,1308,
        8841,1,0,0,0,1310,8846,1,0,0,0,1312,8848,1,0,0,0,1314,8850,1,0,0,
        0,1316,8852,1,0,0,0,1318,8860,1,0,0,0,1320,8862,1,0,0,0,1322,8864,
        1,0,0,0,1324,8866,1,0,0,0,1326,8877,1,0,0,0,1328,8881,1,0,0,0,1330,
        8883,1,0,0,0,1332,8885,1,0,0,0,1334,8887,1,0,0,0,1336,8896,1,0,0,
        0,1338,8898,1,0,0,0,1340,8900,1,0,0,0,1342,8902,1,0,0,0,1344,8904,
        1,0,0,0,1346,8906,1,0,0,0,1348,8908,1,0,0,0,1350,8910,1,0,0,0,1352,
        8914,1,0,0,0,1354,8918,1,0,0,0,1356,8920,1,0,0,0,1358,8922,1,0,0,
        0,1360,8924,1,0,0,0,1362,8926,1,0,0,0,1364,8928,1,0,0,0,1366,8930,
        1,0,0,0,1368,8932,1,0,0,0,1370,8934,1,0,0,0,1372,8936,1,0,0,0,1374,
        8938,1,0,0,0,1376,8942,1,0,0,0,1378,8944,1,0,0,0,1380,8947,1,0,0,
        0,1382,8959,1,0,0,0,1384,8961,1,0,0,0,1386,8969,1,0,0,0,1388,8977,
        1,0,0,0,1390,8981,1,0,0,0,1392,8983,1,0,0,0,1394,8987,1,0,0,0,1396,
        8989,1,0,0,0,1398,8991,1,0,0,0,1400,8993,1,0,0,0,1402,8995,1,0,0,
        0,1404,9000,1,0,0,0,1406,9004,1,0,0,0,1408,9006,1,0,0,0,1410,9014,
        1,0,0,0,1412,9018,1,0,0,0,1414,9022,1,0,0,0,1416,9029,1,0,0,0,1418,
        9032,1,0,0,0,1420,9034,1,0,0,0,1422,9036,1,0,0,0,1424,9043,1,0,0,
        0,1426,9050,1,0,0,0,1428,9055,1,0,0,0,1430,9066,1,0,0,0,1432,9071,
        1,0,0,0,1434,9073,1,0,0,0,1436,9075,1,0,0,0,1438,9089,1,0,0,0,1440,
        9094,1,0,0,0,1442,9099,1,0,0,0,1444,9106,1,0,0,0,1446,9114,1,0,0,
        0,1448,9116,1,0,0,0,1450,9127,1,0,0,0,1452,9129,1,0,0,0,1454,9131,
        1,0,0,0,1456,9133,1,0,0,0,1458,9141,1,0,0,0,1460,9145,1,0,0,0,1462,
        9147,1,0,0,0,1464,9149,1,0,0,0,1466,9157,1,0,0,0,1468,9161,1,0,0,
        0,1470,9165,1,0,0,0,1472,9169,1,0,0,0,1474,9171,1,0,0,0,1476,9174,
        1,0,0,0,1478,9176,1,0,0,0,1480,9184,1,0,0,0,1482,9186,1,0,0,0,1484,
        9189,1,0,0,0,1486,9207,1,0,0,0,1488,9209,1,0,0,0,1490,9211,1,0,0,
        0,1492,9231,1,0,0,0,1494,9233,1,0,0,0,1496,9240,1,0,0,0,1498,9252,
        1,0,0,0,1500,9258,1,0,0,0,1502,9260,1,0,0,0,1504,9262,1,0,0,0,1506,
        9267,1,0,0,0,1508,1511,3,2,1,0,1509,1511,3,456,228,0,1510,1508,1,
        0,0,0,1510,1509,1,0,0,0,1511,1513,1,0,0,0,1512,1514,5,30,0,0,1513,
        1512,1,0,0,0,1513,1514,1,0,0,0,1514,1516,1,0,0,0,1515,1510,1,0,0,
        0,1515,1516,1,0,0,0,1516,1517,1,0,0,0,1517,1518,5,0,0,1,1518,1,1,
        0,0,0,1519,1596,3,4,2,0,1520,1596,3,80,40,0,1521,1596,3,192,96,0,
        1522,1596,3,224,112,0,1523,1596,3,228,114,0,1524,1596,3,230,115,
        0,1525,1596,3,232,116,0,1526,1596,3,234,117,0,1527,1596,3,240,120,
        0,1528,1596,3,242,121,0,1529,1596,3,246,123,0,1530,1596,3,266,133,
        0,1531,1596,3,294,147,0,1532,1596,3,296,148,0,1533,1596,3,450,225,
        0,1534,1596,3,452,226,0,1535,1596,3,474,237,0,1536,1596,3,606,303,
        0,1537,1596,3,612,306,0,1538,1596,3,618,309,0,1539,1596,3,686,343,
        0,1540,1596,3,700,350,0,1541,1596,3,702,351,0,1542,1596,3,712,356,
        0,1543,1596,3,736,368,0,1544,1596,3,738,369,0,1545,1596,3,740,370,
        0,1546,1596,3,742,371,0,1547,1596,3,744,372,0,1548,1596,3,746,373,
        0,1549,1596,3,748,374,0,1550,1596,3,750,375,0,1551,1596,3,752,376,
        0,1552,1596,3,754,377,0,1553,1596,3,756,378,0,1554,1596,3,758,379,
        0,1555,1596,3,760,380,0,1556,1596,3,762,381,0,1557,1596,3,764,382,
        0,1558,1596,3,766,383,0,1559,1596,3,768,384,0,1560,1596,3,770,385,
        0,1561,1596,3,772,386,0,1562,1596,3,774,387,0,1563,1596,3,776,388,
        0,1564,1596,3,778,389,0,1565,1596,3,780,390,0,1566,1596,3,782,391,
        0,1567,1596,3,784,392,0,1568,1596,3,786,393,0,1569,1596,3,788,394,
        0,1570,1596,3,790,395,0,1571,1596,3,792,396,0,1572,1596,3,794,397,
        0,1573,1596,3,796,398,0,1574,1596,3,798,399,0,1575,1596,3,800,400,
        0,1576,1596,3,802,401,0,1577,1596,3,804,402,0,1578,1596,3,806,403,
        0,1579,1596,3,808,404,0,1580,1596,3,810,405,0,1581,1596,3,812,406,
        0,1582,1596,3,814,407,0,1583,1596,3,816,408,0,1584,1596,3,818,409,
        0,1585,1596,3,820,410,0,1586,1596,3,822,411,0,1587,1596,3,824,412,
        0,1588,1596,3,826,413,0,1589,1596,3,872,436,0,1590,1596,3,840,420,
        0,1591,1596,3,892,446,0,1592,1596,3,1088,544,0,1593,1596,3,1098,
        549,0,1594,1596,3,1100,550,0,1595,1519,1,0,0,0,1595,1520,1,0,0,0,
        1595,1521,1,0,0,0,1595,1522,1,0,0,0,1595,1523,1,0,0,0,1595,1524,
        1,0,0,0,1595,1525,1,0,0,0,1595,1526,1,0,0,0,1595,1527,1,0,0,0,1595,
        1528,1,0,0,0,1595,1529,1,0,0,0,1595,1530,1,0,0,0,1595,1531,1,0,0,
        0,1595,1532,1,0,0,0,1595,1533,1,0,0,0,1595,1534,1,0,0,0,1595,1535,
        1,0,0,0,1595,1536,1,0,0,0,1595,1537,1,0,0,0,1595,1538,1,0,0,0,1595,
        1539,1,0,0,0,1595,1540,1,0,0,0,1595,1541,1,0,0,0,1595,1542,1,0,0,
        0,1595,1543,1,0,0,0,1595,1544,1,0,0,0,1595,1545,1,0,0,0,1595,1546,
        1,0,0,0,1595,1547,1,0,0,0,1595,1548,1,0,0,0,1595,1549,1,0,0,0,1595,
        1550,1,0,0,0,1595,1551,1,0,0,0,1595,1552,1,0,0,0,1595,1553,1,0,0,
        0,1595,1554,1,0,0,0,1595,1555,1,0,0,0,1595,1556,1,0,0,0,1595,1557,
        1,0,0,0,1595,1558,1,0,0,0,1595,1559,1,0,0,0,1595,1560,1,0,0,0,1595,
        1561,1,0,0,0,1595,1562,1,0,0,0,1595,1563,1,0,0,0,1595,1564,1,0,0,
        0,1595,1565,1,0,0,0,1595,1566,1,0,0,0,1595,1567,1,0,0,0,1595,1568,
        1,0,0,0,1595,1569,1,0,0,0,1595,1570,1,0,0,0,1595,1571,1,0,0,0,1595,
        1572,1,0,0,0,1595,1573,1,0,0,0,1595,1574,1,0,0,0,1595,1575,1,0,0,
        0,1595,1576,1,0,0,0,1595,1577,1,0,0,0,1595,1578,1,0,0,0,1595,1579,
        1,0,0,0,1595,1580,1,0,0,0,1595,1581,1,0,0,0,1595,1582,1,0,0,0,1595,
        1583,1,0,0,0,1595,1584,1,0,0,0,1595,1585,1,0,0,0,1595,1586,1,0,0,
        0,1595,1587,1,0,0,0,1595,1588,1,0,0,0,1595,1589,1,0,0,0,1595,1590,
        1,0,0,0,1595,1591,1,0,0,0,1595,1592,1,0,0,0,1595,1593,1,0,0,0,1595,
        1594,1,0,0,0,1596,3,1,0,0,0,1597,1618,5,58,0,0,1598,1619,3,20,10,
        0,1599,1619,3,6,3,0,1600,1601,5,440,0,0,1601,1603,3,1342,671,0,1602,
        1604,3,114,57,0,1603,1602,1,0,0,0,1603,1604,1,0,0,0,1604,1619,1,
        0,0,0,1605,1606,5,238,0,0,1606,1608,3,1346,673,0,1607,1609,3,114,
        57,0,1608,1607,1,0,0,0,1608,1609,1,0,0,0,1609,1619,1,0,0,0,1610,
        1619,3,70,35,0,1611,1619,3,10,5,0,1612,1619,3,56,28,0,1613,1614,
        4,2,0,0,1614,1619,3,58,29,0,1615,1619,3,12,6,0,1616,1619,3,18,9,
        0,1617,1619,3,78,39,0,1618,1598,1,0,0,0,1618,1599,1,0,0,0,1618,1600,
        1,0,0,0,1618,1605,1,0,0,0,1618,1610,1,0,0,0,1618,1611,1,0,0,0,1618,
        1612,1,0,0,0,1618,1613,1,0,0,0,1618,1615,1,0,0,0,1618,1616,1,0,0,
        0,1618,1617,1,0,0,0,1619,5,1,0,0,0,1620,1621,5,150,0,0,1621,1623,
        3,1338,669,0,1622,1624,3,8,4,0,1623,1622,1,0,0,0,1624,1625,1,0,0,
        0,1625,1623,1,0,0,0,1625,1626,1,0,0,0,1626,7,1,0,0,0,1627,1635,3,
        84,42,0,1628,1629,5,453,0,0,1629,1631,5,404,0,0,1630,1632,5,6,0,
        0,1631,1630,1,0,0,0,1631,1632,1,0,0,0,1632,1633,1,0,0,0,1633,1635,
        3,1202,601,0,1634,1627,1,0,0,0,1634,1628,1,0,0,0,1635,9,1,0,0,0,
        1636,1638,3,1232,616,0,1637,1636,1,0,0,0,1637,1638,1,0,0,0,1638,
        1639,1,0,0,0,1639,1640,5,205,0,0,1640,1644,3,1366,683,0,1641,1642,
        5,401,0,0,1642,1643,5,506,0,0,1643,1645,3,1110,555,0,1644,1641,1,
        0,0,0,1644,1645,1,0,0,0,1645,1652,1,0,0,0,1646,1647,5,401,0,0,1647,
        1649,5,122,0,0,1648,1650,5,390,0,0,1649,1648,1,0,0,0,1649,1650,1,
        0,0,0,1650,1651,1,0,0,0,1651,1653,5,436,0,0,1652,1646,1,0,0,0,1652,
        1653,1,0,0,0,1653,1657,1,0,0,0,1654,1655,5,470,0,0,1655,1656,5,599,
        0,0,1656,1658,3,1406,703,0,1657,1654,1,0,0,0,1657,1658,1,0,0,0,1658,
        1665,1,0,0,0,1659,1666,5,192,0,0,1660,1663,5,177,0,0,1661,1662,5,
        401,0,0,1662,1664,3,604,302,0,1663,1661,1,0,0,0,1663,1664,1,0,0,
        0,1664,1666,1,0,0,0,1665,1659,1,0,0,0,1665,1660,1,0,0,0,1665,1666,
        1,0,0,0,1666,1669,1,0,0,0,1667,1668,5,118,0,0,1668,1670,3,1444,722,
        0,1669,1667,1,0,0,0,1669,1670,1,0,0,0,1670,1673,1,0,0,0,1671,1672,
        5,183,0,0,1672,1674,3,1032,516,0,1673,1671,1,0,0,0,1673,1674,1,0,
        0,0,1674,11,1,0,0,0,1675,1676,5,315,0,0,1676,1677,5,249,0,0,1677,
        1678,3,1362,681,0,1678,1679,5,51,0,0,1679,1680,5,612,0,0,1680,1682,
        3,1444,722,0,1681,1683,3,14,7,0,1682,1681,1,0,0,0,1682,1683,1,0,
        0,0,1683,13,1,0,0,0,1684,1691,3,16,8,0,1685,1687,5,29,0,0,1686,1685,
        1,0,0,0,1686,1687,1,0,0,0,1687,1688,1,0,0,0,1688,1690,3,16,8,0,1689,
        1686,1,0,0,0,1690,1693,1,0,0,0,1691,1689,1,0,0,0,1691,1692,1,0,0,
        0,1692,15,1,0,0,0,1693,1691,1,0,0,0,1694,1698,3,148,74,0,1695,1698,
        3,160,80,0,1696,1698,3,162,81,0,1697,1694,1,0,0,0,1697,1695,1,0,
        0,0,1697,1696,1,0,0,0,1698,17,1,0,0,0,1699,1700,5,517,0,0,1700,1701,
        3,1372,686,0,1701,1702,3,132,66,0,1702,19,1,0,0,0,1703,1705,3,1312,
        656,0,1704,1703,1,0,0,0,1704,1705,1,0,0,0,1705,1706,1,0,0,0,1706,
        1707,5,583,0,0,1707,1709,3,1382,691,0,1708,1710,3,22,11,0,1709,1708,
        1,0,0,0,1709,1710,1,0,0,0,1710,21,1,0,0,0,1711,1714,3,24,12,0,1712,
        1715,3,1210,605,0,1713,1715,3,52,26,0,1714,1712,1,0,0,0,1714,1713,
        1,0,0,0,1714,1715,1,0,0,0,1715,1725,1,0,0,0,1716,1725,3,1210,605,
        0,1717,1725,3,52,26,0,1718,1719,3,26,13,0,1719,1720,5,29,0,0,1720,
        1722,1,0,0,0,1721,1718,1,0,0,0,1721,1722,1,0,0,0,1722,1723,1,0,0,
        0,1723,1725,3,28,14,0,1724,1711,1,0,0,0,1724,1716,1,0,0,0,1724,1717,
        1,0,0,0,1724,1721,1,0,0,0,1725,23,1,0,0,0,1726,1734,3,26,13,0,1727,
        1728,3,26,13,0,1728,1729,5,29,0,0,1729,1731,1,0,0,0,1730,1727,1,
        0,0,0,1730,1731,1,0,0,0,1731,1732,1,0,0,0,1732,1734,3,32,16,0,1733,
        1726,1,0,0,0,1733,1730,1,0,0,0,1734,25,1,0,0,0,1735,1740,3,34,17,
        0,1736,1737,5,29,0,0,1737,1739,3,34,17,0,1738,1736,1,0,0,0,1739,
        1742,1,0,0,0,1740,1738,1,0,0,0,1740,1741,1,0,0,0,1741,27,1,0,0,0,
        1742,1740,1,0,0,0,1743,1744,5,178,0,0,1744,1751,5,582,0,0,1745,1746,
        5,266,0,0,1746,1751,5,582,0,0,1747,1751,3,30,15,0,1748,1749,4,14,
        1,0,1749,1751,7,0,0,0,1750,1743,1,0,0,0,1750,1745,1,0,0,0,1750,1747,
        1,0,0,0,1750,1748,1,0,0,0,1751,29,1,0,0,0,1752,1753,5,51,0,0,1753,
        1755,5,423,0,0,1754,1756,3,1314,657,0,1755,1754,1,0,0,0,1755,1756,
        1,0,0,0,1756,1760,1,0,0,0,1757,1761,3,1218,609,0,1758,1759,5,422,
        0,0,1759,1761,3,1420,710,0,1760,1757,1,0,0,0,1760,1758,1,0,0,0,1761,
        1847,1,0,0,0,1762,1763,5,184,0,0,1763,1764,5,423,0,0,1764,1847,3,
        1408,704,0,1765,1766,5,456,0,0,1766,1768,5,423,0,0,1767,1769,3,1314,
        657,0,1768,1767,1,0,0,0,1768,1769,1,0,0,0,1769,1770,1,0,0,0,1770,
        1847,3,54,27,0,1771,1772,5,406,0,0,1772,1774,5,423,0,0,1773,1775,
        3,1314,657,0,1774,1773,1,0,0,0,1774,1775,1,0,0,0,1775,1776,1,0,0,
        0,1776,1778,3,54,27,0,1777,1779,3,1314,657,0,1778,1777,1,0,0,0,1778,
        1779,1,0,0,0,1779,1847,1,0,0,0,1780,1781,5,60,0,0,1781,1783,5,423,
        0,0,1782,1784,3,1314,657,0,1783,1782,1,0,0,0,1783,1784,1,0,0,0,1784,
        1785,1,0,0,0,1785,1847,3,54,27,0,1786,1787,5,105,0,0,1787,1788,5,
        423,0,0,1788,1792,3,54,27,0,1789,1791,3,696,348,0,1790,1789,1,0,
        0,0,1791,1794,1,0,0,0,1792,1790,1,0,0,0,1792,1793,1,0,0,0,1793,1847,
        1,0,0,0,1794,1792,1,0,0,0,1795,1796,5,472,0,0,1796,1798,5,423,0,
        0,1797,1799,3,1314,657,0,1798,1797,1,0,0,0,1798,1799,1,0,0,0,1799,
        1800,1,0,0,0,1800,1804,3,54,27,0,1801,1803,3,698,349,0,1802,1801,
        1,0,0,0,1803,1806,1,0,0,0,1804,1802,1,0,0,0,1804,1805,1,0,0,0,1805,
        1847,1,0,0,0,1806,1804,1,0,0,0,1807,1808,5,110,0,0,1808,1810,5,423,
        0,0,1809,1811,3,1314,657,0,1810,1809,1,0,0,0,1810,1811,1,0,0,0,1811,
        1812,1,0,0,0,1812,1847,3,1420,710,0,1813,1814,5,606,0,0,1814,1815,
        5,423,0,0,1815,1847,3,54,27,0,1816,1817,5,471,0,0,1817,1819,5,423,
        0,0,1818,1820,3,1314,657,0,1819,1818,1,0,0,0,1819,1820,1,0,0,0,1820,
        1825,1,0,0,0,1821,1822,3,1408,704,0,1822,1823,5,279,0,0,1823,1824,
        3,1218,609,0,1824,1826,1,0,0,0,1825,1821,1,0,0,0,1825,1826,1,0,0,
        0,1826,1847,1,0,0,0,1827,1828,5,207,0,0,1828,1829,5,423,0,0,1829,
        1830,3,1406,703,0,1830,1831,5,653,0,0,1831,1832,5,583,0,0,1832,1834,
        3,1382,691,0,1833,1835,3,50,25,0,1834,1833,1,0,0,0,1834,1835,1,0,
        0,0,1835,1847,1,0,0,0,1836,1837,5,178,0,0,1837,1838,5,423,0,0,1838,
        1839,3,54,27,0,1839,1840,5,582,0,0,1840,1847,1,0,0,0,1841,1842,5,
        266,0,0,1842,1843,5,423,0,0,1843,1844,3,54,27,0,1844,1845,5,582,
        0,0,1845,1847,1,0,0,0,1846,1752,1,0,0,0,1846,1762,1,0,0,0,1846,1765,
        1,0,0,0,1846,1771,1,0,0,0,1846,1780,1,0,0,0,1846,1786,1,0,0,0,1846,
        1795,1,0,0,0,1846,1807,1,0,0,0,1846,1813,1,0,0,0,1846,1816,1,0,0,
        0,1846,1827,1,0,0,0,1846,1836,1,0,0,0,1846,1841,1,0,0,0,1847,31,
        1,0,0,0,1848,1851,3,36,18,0,1849,1851,3,1198,599,0,1850,1848,1,0,
        0,0,1850,1849,1,0,0,0,1851,1860,1,0,0,0,1852,1856,5,29,0,0,1853,
        1857,3,36,18,0,1854,1857,3,34,17,0,1855,1857,3,1198,599,0,1856,1853,
        1,0,0,0,1856,1854,1,0,0,0,1856,1855,1,0,0,0,1857,1859,1,0,0,0,1858,
        1852,1,0,0,0,1859,1862,1,0,0,0,1860,1858,1,0,0,0,1860,1861,1,0,0,
        0,1861,33,1,0,0,0,1862,1860,1,0,0,0,1863,1867,3,44,22,0,1864,1867,
        3,46,23,0,1865,1867,3,50,25,0,1866,1863,1,0,0,0,1866,1864,1,0,0,
        0,1866,1865,1,0,0,0,1867,35,1,0,0,0,1868,1870,5,51,0,0,1869,1871,
        5,115,0,0,1870,1869,1,0,0,0,1870,1871,1,0,0,0,1871,1884,1,0,0,0,
        1872,1873,3,1406,703,0,1873,1875,3,1124,562,0,1874,1876,3,1114,557,
        0,1875,1874,1,0,0,0,1875,1876,1,0,0,0,1876,1878,1,0,0,0,1877,1879,
        3,38,19,0,1878,1877,1,0,0,0,1878,1879,1,0,0,0,1879,1885,1,0,0,0,
        1880,1881,5,32,0,0,1881,1882,3,88,44,0,1882,1883,5,33,0,0,1883,1885,
        1,0,0,0,1884,1872,1,0,0,0,1884,1880,1,0,0,0,1885,2004,1,0,0,0,1886,
        1887,5,51,0,0,1887,2004,3,1120,560,0,1888,1890,5,99,0,0,1889,1891,
        5,115,0,0,1890,1889,1,0,0,0,1890,1891,1,0,0,0,1891,1892,1,0,0,0,
        1892,1893,3,1322,661,0,1893,1894,3,1406,703,0,1894,1896,3,1124,562,
        0,1895,1897,3,38,19,0,1896,1895,1,0,0,0,1896,1897,1,0,0,0,1897,2004,
        1,0,0,0,1898,1900,5,371,0,0,1899,1901,5,115,0,0,1900,1899,1,0,0,
        0,1900,1901,1,0,0,0,1901,1902,1,0,0,0,1902,1903,3,1322,661,0,1903,
        1905,3,1124,562,0,1904,1906,3,38,19,0,1905,1904,1,0,0,0,1905,1906,
        1,0,0,0,1906,2004,1,0,0,0,1907,1929,5,184,0,0,1908,1910,5,115,0,
        0,1909,1908,1,0,0,0,1909,1910,1,0,0,0,1910,1911,1,0,0,0,1911,1913,
        3,1322,661,0,1912,1914,3,40,20,0,1913,1912,1,0,0,0,1913,1914,1,0,
        0,0,1914,1930,1,0,0,0,1915,1916,5,231,0,0,1916,1917,5,295,0,0,1917,
        1930,3,1322,661,0,1918,1919,5,438,0,0,1919,1930,5,295,0,0,1920,1921,
        3,440,220,0,1921,1922,3,1332,666,0,1922,1930,1,0,0,0,1923,1924,4,
        18,2,0,1924,1925,5,105,0,0,1925,1930,3,1406,703,0,1926,1927,4,18,
        3,0,1927,1928,5,129,0,0,1928,1930,3,1406,703,0,1929,1909,1,0,0,0,
        1929,1915,1,0,0,0,1929,1918,1,0,0,0,1929,1920,1,0,0,0,1929,1923,
        1,0,0,0,1929,1926,1,0,0,0,1930,2004,1,0,0,0,1931,1932,5,177,0,0,
        1932,2004,5,293,0,0,1933,1934,5,192,0,0,1934,2004,5,293,0,0,1935,
        1937,5,58,0,0,1936,1938,5,115,0,0,1937,1936,1,0,0,0,1937,1938,1,
        0,0,0,1938,1939,1,0,0,0,1939,1952,3,1322,661,0,1940,1941,5,519,0,
        0,1941,1945,5,166,0,0,1942,1943,4,18,4,0,1943,1946,3,1018,509,0,
        1944,1946,3,1428,714,0,1945,1942,1,0,0,0,1945,1944,1,0,0,0,1946,
        1953,1,0,0,0,1947,1948,5,184,0,0,1948,1953,5,166,0,0,1949,1950,4,
        18,5,0,1950,1951,5,519,0,0,1951,1953,3,1156,578,0,1952,1940,1,0,
        0,0,1952,1947,1,0,0,0,1952,1949,1,0,0,0,1953,2004,1,0,0,0,1954,1955,
        5,58,0,0,1955,1956,5,268,0,0,1956,1957,3,1332,666,0,1957,1958,3,
        1156,578,0,1958,2004,1,0,0,0,1959,1960,4,18,6,0,1960,1961,5,58,0,
        0,1961,1962,5,105,0,0,1962,1963,3,1406,703,0,1963,1964,3,1118,559,
        0,1964,2004,1,0,0,0,1965,1966,4,18,7,0,1966,1967,5,58,0,0,1967,1968,
        5,129,0,0,1968,1969,3,1406,703,0,1969,1970,3,1118,559,0,1970,2004,
        1,0,0,0,1971,1972,5,470,0,0,1972,1973,5,115,0,0,1973,1974,3,1322,
        661,0,1974,1975,5,599,0,0,1975,1976,3,1406,703,0,1976,2004,1,0,0,
        0,1977,1979,5,470,0,0,1978,1980,7,1,0,0,1979,1978,1,0,0,0,1979,1980,
        1,0,0,0,1980,1981,1,0,0,0,1981,2004,3,1376,688,0,1982,1983,5,470,
        0,0,1983,1984,3,440,220,0,1984,1985,3,1332,666,0,1985,1986,5,599,
        0,0,1986,1987,3,1330,665,0,1987,2004,1,0,0,0,1988,1989,5,136,0,0,
        1989,1990,5,599,0,0,1990,1994,3,1006,503,0,1991,1992,4,18,8,0,1992,
        1995,5,166,0,0,1993,1995,3,1188,594,0,1994,1991,1,0,0,0,1994,1993,
        1,0,0,0,1995,1997,1,0,0,0,1996,1998,3,1248,624,0,1997,1996,1,0,0,
        0,1997,1998,1,0,0,0,1998,2004,1,0,0,0,1999,2004,5,230,0,0,2000,2001,
        5,411,0,0,2001,2002,5,89,0,0,2002,2004,3,42,21,0,2003,1868,1,0,0,
        0,2003,1886,1,0,0,0,2003,1888,1,0,0,0,2003,1898,1,0,0,0,2003,1907,
        1,0,0,0,2003,1931,1,0,0,0,2003,1933,1,0,0,0,2003,1935,1,0,0,0,2003,
        1954,1,0,0,0,2003,1959,1,0,0,0,2003,1965,1,0,0,0,2003,1971,1,0,0,
        0,2003,1977,1,0,0,0,2003,1982,1,0,0,0,2003,1988,1,0,0,0,2003,1999,
        1,0,0,0,2003,2000,1,0,0,0,2004,37,1,0,0,0,2005,2006,5,53,0,0,2006,
        2009,3,1406,703,0,2007,2009,5,225,0,0,2008,2005,1,0,0,0,2008,2007,
        1,0,0,0,2009,39,1,0,0,0,2010,2011,7,2,0,0,2011,41,1,0,0,0,2012,2014,
        3,1406,703,0,2013,2015,3,362,181,0,2014,2013,1,0,0,0,2014,2015,1,
        0,0,0,2015,2023,1,0,0,0,2016,2017,5,29,0,0,2017,2019,3,1406,703,
        0,2018,2020,3,362,181,0,2019,2018,1,0,0,0,2019,2020,1,0,0,0,2020,
        2022,1,0,0,0,2021,2016,1,0,0,0,2022,2025,1,0,0,0,2023,2021,1,0,0,
        0,2023,2024,1,0,0,0,2024,43,1,0,0,0,2025,2023,1,0,0,0,2026,2028,
        5,56,0,0,2027,2029,5,6,0,0,2028,2027,1,0,0,0,2028,2029,1,0,0,0,2029,
        2032,1,0,0,0,2030,2033,5,166,0,0,2031,2033,3,1406,703,0,2032,2030,
        1,0,0,0,2032,2031,1,0,0,0,2033,45,1,0,0,0,2034,2036,5,314,0,0,2035,
        2037,5,6,0,0,2036,2035,1,0,0,0,2036,2037,1,0,0,0,2037,2040,1,0,0,
        0,2038,2041,5,166,0,0,2039,2041,3,1406,703,0,2040,2038,1,0,0,0,2040,
        2039,1,0,0,0,2041,47,1,0,0,0,2042,2044,3,44,22,0,2043,2045,3,46,
        23,0,2044,2043,1,0,0,0,2044,2045,1,0,0,0,2045,2051,1,0,0,0,2046,
        2048,3,46,23,0,2047,2049,3,44,22,0,2048,2047,1,0,0,0,2048,2049,1,
        0,0,0,2049,2051,1,0,0,0,2050,2042,1,0,0,0,2050,2046,1,0,0,0,2051,
        49,1,0,0,0,2052,2053,7,3,0,0,2053,2054,5,634,0,0,2054,51,1,0,0,0,
        2055,2056,5,469,0,0,2056,2057,5,421,0,0,2057,53,1,0,0,0,2058,2061,
        5,57,0,0,2059,2061,3,1408,704,0,2060,2058,1,0,0,0,2060,2059,1,0,
        0,0,2061,55,1,0,0,0,2062,2063,5,582,0,0,2063,2075,3,1358,679,0,2064,
        2065,7,4,0,0,2065,2066,5,152,0,0,2066,2068,3,1444,722,0,2067,2069,
        3,64,32,0,2068,2067,1,0,0,0,2068,2069,1,0,0,0,2069,2076,1,0,0,0,
        2070,2071,5,470,0,0,2071,2072,5,599,0,0,2072,2076,3,1406,703,0,2073,
        2074,4,28,9,0,2074,2076,3,64,32,0,2075,2064,1,0,0,0,2075,2070,1,
        0,0,0,2075,2073,1,0,0,0,2076,57,1,0,0,0,2077,2078,5,614,0,0,2078,
        2079,5,582,0,0,2079,2080,3,1358,679,0,2080,2081,5,519,0,0,2081,2083,
        7,5,0,0,2082,2084,3,60,30,0,2083,2082,1,0,0,0,2083,2084,1,0,0,0,
        2084,59,1,0,0,0,2085,2092,3,62,31,0,2086,2088,5,29,0,0,2087,2086,
        1,0,0,0,2087,2088,1,0,0,0,2088,2089,1,0,0,0,2089,2091,3,62,31,0,
        2090,2087,1,0,0,0,2091,2094,1,0,0,0,2092,2090,1,0,0,0,2092,2093,
        1,0,0,0,2093,61,1,0,0,0,2094,2092,1,0,0,0,2095,2096,3,160,80,0,2096,
        63,1,0,0,0,2097,2104,3,66,33,0,2098,2100,5,29,0,0,2099,2098,1,0,
        0,0,2099,2100,1,0,0,0,2100,2101,1,0,0,0,2101,2103,3,66,33,0,2102,
        2099,1,0,0,0,2103,2106,1,0,0,0,2104,2102,1,0,0,0,2104,2105,1,0,0,
        0,2105,65,1,0,0,0,2106,2104,1,0,0,0,2107,2109,5,270,0,0,2108,2110,
        5,6,0,0,2109,2108,1,0,0,0,2109,2110,1,0,0,0,2110,2111,1,0,0,0,2111,
        2120,3,1472,736,0,2112,2120,3,152,76,0,2113,2120,3,154,77,0,2114,
        2120,3,160,80,0,2115,2120,3,162,81,0,2116,2120,3,168,84,0,2117,2118,
        4,33,10,0,2118,2120,3,170,85,0,2119,2107,1,0,0,0,2119,2112,1,0,0,
        0,2119,2113,1,0,0,0,2119,2114,1,0,0,0,2119,2115,1,0,0,0,2119,2116,
        1,0,0,0,2119,2117,1,0,0,0,2120,67,1,0,0,0,2121,2123,5,270,0,0,2122,
        2124,5,6,0,0,2123,2122,1,0,0,0,2123,2124,1,0,0,0,2124,2125,1,0,0,
        0,2125,2129,3,1472,736,0,2126,2129,3,152,76,0,2127,2129,3,154,77,
        0,2128,2121,1,0,0,0,2128,2126,1,0,0,0,2128,2127,1,0,0,0,2129,69,
        1,0,0,0,2130,2132,3,176,88,0,2131,2130,1,0,0,0,2131,2132,1,0,0,0,
        2132,2134,1,0,0,0,2133,2135,3,1232,616,0,2134,2133,1,0,0,0,2134,
        2135,1,0,0,0,2135,2137,1,0,0,0,2136,2138,3,178,89,0,2137,2136,1,
        0,0,0,2137,2138,1,0,0,0,2138,2139,1,0,0,0,2139,2140,5,644,0,0,2140,
        2141,3,1354,677,0,2141,2142,3,72,36,0,2142,71,1,0,0,0,2143,2145,
        3,1324,662,0,2144,2143,1,0,0,0,2144,2145,1,0,0,0,2145,2146,1,0,0,
        0,2146,2147,5,63,0,0,2147,2148,3,74,37,0,2148,73,1,0,0,0,2149,2151,
        3,98,49,0,2150,2152,3,76,38,0,2151,2150,1,0,0,0,2151,2152,1,0,0,
        0,2152,75,1,0,0,0,2153,2155,5,653,0,0,2154,2156,7,6,0,0,2155,2154,
        1,0,0,0,2155,2156,1,0,0,0,2156,2157,1,0,0,0,2157,2158,5,105,0,0,
        2158,2159,5,409,0,0,2159,77,1,0,0,0,2160,2161,5,276,0,0,2161,2162,
        5,498,0,0,2162,2163,3,1466,733,0,2163,2164,5,341,0,0,2164,2165,5,
        295,0,0,2165,2193,1,0,0,0,2166,2190,4,39,11,0,2167,2168,5,468,0,
        0,2168,2182,5,755,0,0,2169,2170,5,392,0,0,2170,2171,5,496,0,0,2171,
        2172,5,401,0,0,2172,2183,5,200,0,0,2173,2174,5,232,0,0,2174,2175,
        5,101,0,0,2175,2180,3,1406,703,0,2176,2177,5,392,0,0,2177,2178,5,
        496,0,0,2178,2179,5,401,0,0,2179,2181,5,200,0,0,2180,2176,1,0,0,
        0,2180,2181,1,0,0,0,2181,2183,1,0,0,0,2182,2169,1,0,0,0,2182,2173,
        1,0,0,0,2183,2191,1,0,0,0,2184,2185,7,7,0,0,2185,2186,3,1406,703,
        0,2186,2187,3,1406,703,0,2187,2191,1,0,0,0,2188,2189,5,468,0,0,2189,
        2191,5,793,0,0,2190,2167,1,0,0,0,2190,2184,1,0,0,0,2190,2188,1,0,
        0,0,2191,2193,1,0,0,0,2192,2160,1,0,0,0,2192,2166,1,0,0,0,2193,79,
        1,0,0,0,2194,2212,5,139,0,0,2195,2213,3,82,41,0,2196,2213,3,86,43,
        0,2197,2213,3,108,54,0,2198,2213,3,102,51,0,2199,2213,3,110,55,0,
        2200,2213,3,124,62,0,2201,2213,3,172,86,0,2202,2213,3,180,90,0,2203,
        2213,3,118,59,0,2204,2213,3,130,65,0,2205,2213,3,136,68,0,2206,2213,
        3,184,92,0,2207,2213,3,186,93,0,2208,2209,4,40,12,0,2209,2213,3,
        188,94,0,2210,2211,4,40,13,0,2211,2213,3,138,69,0,2212,2195,1,0,
        0,0,2212,2196,1,0,0,0,2212,2197,1,0,0,0,2212,2198,1,0,0,0,2212,2199,
        1,0,0,0,2212,2200,1,0,0,0,2212,2201,1,0,0,0,2212,2202,1,0,0,0,2212,
        2203,1,0,0,0,2212,2204,1,0,0,0,2212,2205,1,0,0,0,2212,2206,1,0,0,
        0,2212,2207,1,0,0,0,2212,2208,1,0,0,0,2212,2210,1,0,0,0,2213,81,
        1,0,0,0,2214,2216,5,150,0,0,2215,2217,3,1240,620,0,2216,2215,1,0,
        0,0,2216,2217,1,0,0,0,2217,2218,1,0,0,0,2218,2222,3,1336,668,0,2219,
        2221,3,84,42,0,2220,2219,1,0,0,0,2221,2224,1,0,0,0,2222,2220,1,0,
        0,0,2222,2223,1,0,0,0,2223,83,1,0,0,0,2224,2222,1,0,0,0,2225,2230,
        3,1208,604,0,2226,2230,3,1204,602,0,2227,2228,4,42,14,0,2228,2230,
        3,1206,603,0,2229,2225,1,0,0,0,2229,2226,1,0,0,0,2229,2227,1,0,0,
        0,2230,85,1,0,0,0,2231,2233,5,586,0,0,2232,2231,1,0,0,0,2232,2233,
        1,0,0,0,2233,2234,1,0,0,0,2234,2236,5,583,0,0,2235,2237,3,1240,620,
        0,2236,2235,1,0,0,0,2236,2237,1,0,0,0,2237,2238,1,0,0,0,2238,2255,
        3,1376,688,0,2239,2240,5,32,0,0,2240,2241,3,88,44,0,2241,2242,5,
        33,0,0,2242,2244,1,0,0,0,2243,2239,1,0,0,0,2243,2244,1,0,0,0,2244,
        2246,1,0,0,0,2245,2247,3,1194,597,0,2246,2245,1,0,0,0,2246,2247,
        1,0,0,0,2247,2256,1,0,0,0,2248,2249,5,305,0,0,2249,2256,3,1382,691,
        0,2250,2251,5,32,0,0,2251,2252,5,305,0,0,2252,2253,3,1382,691,0,
        2253,2254,5,33,0,0,2254,2256,1,0,0,0,2255,2243,1,0,0,0,2255,2248,
        1,0,0,0,2255,2250,1,0,0,0,2256,87,1,0,0,0,2257,2262,3,90,45,0,2258,
        2259,5,29,0,0,2259,2261,3,90,45,0,2260,2258,1,0,0,0,2261,2264,1,
        0,0,0,2262,2260,1,0,0,0,2262,2263,1,0,0,0,2263,89,1,0,0,0,2264,2262,
        1,0,0,0,2265,2268,3,1112,556,0,2266,2268,3,1120,560,0,2267,2265,
        1,0,0,0,2267,2266,1,0,0,0,2268,91,1,0,0,0,2269,2271,7,8,0,0,2270,
        2269,1,0,0,0,2270,2271,1,0,0,0,2271,2272,1,0,0,0,2272,2273,3,94,
        47,0,2273,93,1,0,0,0,2274,2276,5,63,0,0,2275,2274,1,0,0,0,2275,2276,
        1,0,0,0,2276,2277,1,0,0,0,2277,2278,3,98,49,0,2278,95,1,0,0,0,2279,
        2281,3,300,150,0,2280,2282,3,376,188,0,2281,2280,1,0,0,0,2281,2282,
        1,0,0,0,2282,2285,1,0,0,0,2283,2285,3,304,152,0,2284,2279,1,0,0,
        0,2284,2283,1,0,0,0,2285,97,1,0,0,0,2286,2288,3,300,150,0,2287,2289,
        3,376,188,0,2288,2287,1,0,0,0,2288,2289,1,0,0,0,2289,99,1,0,0,0,
        2290,2294,5,139,0,0,2291,2295,3,102,51,0,2292,2295,3,108,54,0,2293,
        2295,3,110,55,0,2294,2291,1,0,0,0,2294,2292,1,0,0,0,2294,2293,1,
        0,0,0,2295,2297,1,0,0,0,2296,2298,5,30,0,0,2297,2296,1,0,0,0,2297,
        2298,1,0,0,0,2298,2299,1,0,0,0,2299,2300,5,0,0,1,2300,101,1,0,0,
        0,2301,2303,3,1232,616,0,2302,2301,1,0,0,0,2302,2303,1,0,0,0,2303,
        2304,1,0,0,0,2304,2306,5,440,0,0,2305,2307,3,1240,620,0,2306,2305,
        1,0,0,0,2306,2307,1,0,0,0,2307,2308,1,0,0,0,2308,2309,3,1340,670,
        0,2309,2318,5,32,0,0,2310,2315,3,1244,622,0,2311,2312,5,29,0,0,2312,
        2314,3,1244,622,0,2313,2311,1,0,0,0,2314,2317,1,0,0,0,2315,2313,
        1,0,0,0,2315,2316,1,0,0,0,2316,2319,1,0,0,0,2317,2315,1,0,0,0,2318,
        2310,1,0,0,0,2318,2319,1,0,0,0,2319,2320,1,0,0,0,2320,2324,5,33,
        0,0,2321,2323,3,112,56,0,2322,2321,1,0,0,0,2323,2326,1,0,0,0,2324,
        2322,1,0,0,0,2324,2325,1,0,0,0,2325,2327,1,0,0,0,2326,2324,1,0,0,
        0,2327,2328,3,106,53,0,2328,103,1,0,0,0,2329,2332,3,1438,719,0,2330,
        2332,5,825,0,0,2331,2329,1,0,0,0,2331,2330,1,0,0,0,2332,105,1,0,
        0,0,2333,2338,3,1032,516,0,2334,2335,4,53,15,0,2335,2336,5,63,0,
        0,2336,2338,3,104,52,0,2337,2333,1,0,0,0,2337,2334,1,0,0,0,2338,
        107,1,0,0,0,2339,2341,3,1232,616,0,2340,2339,1,0,0,0,2340,2341,1,
        0,0,0,2341,2342,1,0,0,0,2342,2344,5,238,0,0,2343,2345,3,1240,620,
        0,2344,2343,1,0,0,0,2344,2345,1,0,0,0,2345,2346,1,0,0,0,2346,2347,
        3,1344,672,0,2347,2356,5,32,0,0,2348,2353,3,1246,623,0,2349,2350,
        5,29,0,0,2350,2352,3,1246,623,0,2351,2349,1,0,0,0,2352,2355,1,0,
        0,0,2353,2351,1,0,0,0,2353,2354,1,0,0,0,2354,2357,1,0,0,0,2355,2353,
        1,0,0,0,2356,2348,1,0,0,0,2356,2357,1,0,0,0,2357,2358,1,0,0,0,2358,
        2359,5,33,0,0,2359,2360,5,491,0,0,2360,2364,3,1250,625,0,2361,2363,
        3,112,56,0,2362,2361,1,0,0,0,2363,2366,1,0,0,0,2364,2362,1,0,0,0,
        2364,2365,1,0,0,0,2365,2367,1,0,0,0,2366,2364,1,0,0,0,2367,2368,
        3,106,53,0,2368,109,1,0,0,0,2369,2371,5,55,0,0,2370,2369,1,0,0,0,
        2370,2371,1,0,0,0,2371,2372,1,0,0,0,2372,2374,5,238,0,0,2373,2375,
        3,1240,620,0,2374,2373,1,0,0,0,2374,2375,1,0,0,0,2375,2376,1,0,0,
        0,2376,2377,3,1368,684,0,2377,2378,5,491,0,0,2378,2379,7,9,0,0,2379,
        2380,5,531,0,0,2380,2381,3,1444,722,0,2381,111,1,0,0,0,2382,2388,
        3,116,58,0,2383,2385,5,390,0,0,2384,2383,1,0,0,0,2384,2385,1,0,0,
        0,2385,2386,1,0,0,0,2386,2388,5,174,0,0,2387,2382,1,0,0,0,2387,2384,
        1,0,0,0,2388,113,1,0,0,0,2389,2391,3,112,56,0,2390,2389,1,0,0,0,
        2391,2392,1,0,0,0,2392,2390,1,0,0,0,2392,2393,1,0,0,0,2393,115,1,
        0,0,0,2394,2395,5,118,0,0,2395,2416,3,1444,722,0,2396,2400,5,297,
        0,0,2397,2401,5,547,0,0,2398,2399,4,58,16,0,2399,2401,3,1406,703,
        0,2400,2397,1,0,0,0,2400,2398,1,0,0,0,2401,2416,1,0,0,0,2402,2403,
        5,392,0,0,2403,2416,5,547,0,0,2404,2405,5,133,0,0,2405,2416,5,547,
        0,0,2406,2407,5,451,0,0,2407,2408,5,547,0,0,2408,2416,5,153,0,0,
        2409,2410,5,370,0,0,2410,2411,5,547,0,0,2411,2416,5,153,0,0,2412,
        2413,5,547,0,0,2413,2414,5,510,0,0,2414,2416,7,10,0,0,2415,2394,
        1,0,0,0,2415,2396,1,0,0,0,2415,2402,1,0,0,0,2415,2404,1,0,0,0,2415,
        2406,1,0,0,0,2415,2409,1,0,0,0,2415,2412,1,0,0,0,2416,117,1,0,0,
        0,2417,2419,3,1312,656,0,2418,2417,1,0,0,0,2418,2419,1,0,0,0,2419,
        2455,1,0,0,0,2420,2422,5,618,0,0,2421,2420,1,0,0,0,2421,2422,1,0,
        0,0,2422,2423,1,0,0,0,2423,2424,5,268,0,0,2424,2426,3,1330,665,0,
        2425,2427,3,1158,579,0,2426,2425,1,0,0,0,2426,2427,1,0,0,0,2427,
        2428,1,0,0,0,2428,2432,3,122,61,0,2429,2431,3,1152,576,0,2430,2429,
        1,0,0,0,2431,2434,1,0,0,0,2432,2430,1,0,0,0,2432,2433,1,0,0,0,2433,
        2456,1,0,0,0,2434,2432,1,0,0,0,2435,2436,5,237,0,0,2436,2437,5,268,
        0,0,2437,2438,3,1330,665,0,2438,2442,3,122,61,0,2439,2441,3,1160,
        580,0,2440,2439,1,0,0,0,2441,2444,1,0,0,0,2442,2440,1,0,0,0,2442,
        2443,1,0,0,0,2443,2456,1,0,0,0,2444,2442,1,0,0,0,2445,2446,5,534,
        0,0,2446,2447,5,268,0,0,2447,2448,3,1330,665,0,2448,2452,3,122,61,
        0,2449,2451,3,1162,581,0,2450,2449,1,0,0,0,2451,2454,1,0,0,0,2452,
        2450,1,0,0,0,2452,2453,1,0,0,0,2453,2456,1,0,0,0,2454,2452,1,0,0,
        0,2455,2421,1,0,0,0,2455,2435,1,0,0,0,2455,2445,1,0,0,0,2456,2458,
        1,0,0,0,2457,2459,3,48,24,0,2458,2457,1,0,0,0,2458,2459,1,0,0,0,
        2459,119,1,0,0,0,2460,2471,3,1330,665,0,2461,2463,3,1330,665,0,2462,
        2461,1,0,0,0,2462,2463,1,0,0,0,2463,2464,1,0,0,0,2464,2465,5,630,
        0,0,2465,2471,3,1150,575,0,2466,2467,3,1330,665,0,2467,2468,5,608,
        0,0,2468,2469,3,1150,575,0,2469,2471,1,0,0,0,2470,2460,1,0,0,0,2470,
        2462,1,0,0,0,2470,2466,1,0,0,0,2471,121,1,0,0,0,2472,2473,5,401,
        0,0,2473,2474,3,1382,691,0,2474,2475,3,1146,573,0,2475,123,1,0,0,
        0,2476,2477,5,315,0,0,2477,2478,5,249,0,0,2478,2479,3,1360,680,0,
        2479,2480,5,51,0,0,2480,2481,5,612,0,0,2481,2483,3,1444,722,0,2482,
        2484,3,126,63,0,2483,2482,1,0,0,0,2483,2484,1,0,0,0,2484,125,1,0,
        0,0,2485,2492,3,128,64,0,2486,2488,5,29,0,0,2487,2486,1,0,0,0,2487,
        2488,1,0,0,0,2488,2489,1,0,0,0,2489,2491,3,128,64,0,2490,2487,1,
        0,0,0,2491,2494,1,0,0,0,2492,2490,1,0,0,0,2492,2493,1,0,0,0,2493,
        127,1,0,0,0,2494,2492,1,0,0,0,2495,2502,3,148,74,0,2496,2502,3,150,
        75,0,2497,2502,3,158,79,0,2498,2502,3,160,80,0,2499,2502,3,162,81,
        0,2500,2502,3,164,82,0,2501,2495,1,0,0,0,2501,2496,1,0,0,0,2501,
        2497,1,0,0,0,2501,2498,1,0,0,0,2501,2499,1,0,0,0,2501,2500,1,0,0,
        0,2502,129,1,0,0,0,2503,2504,5,517,0,0,2504,2505,3,1370,685,0,2505,
        2506,5,231,0,0,2506,2507,5,153,0,0,2507,2508,5,656,0,0,2508,2509,
        3,1466,733,0,2509,2510,3,132,66,0,2510,131,1,0,0,0,2511,2512,5,408,
        0,0,2512,2513,5,32,0,0,2513,2518,3,134,67,0,2514,2515,5,29,0,0,2515,
        2517,3,134,67,0,2516,2514,1,0,0,0,2517,2520,1,0,0,0,2518,2516,1,
        0,0,0,2518,2519,1,0,0,0,2519,2521,1,0,0,0,2520,2518,1,0,0,0,2521,
        2522,5,33,0,0,2522,133,1,0,0,0,2523,2524,5,256,0,0,2524,2538,3,1444,
        722,0,2525,2526,5,150,0,0,2526,2538,3,1444,722,0,2527,2528,5,627,
        0,0,2528,2538,3,1444,722,0,2529,2530,5,424,0,0,2530,2538,3,1444,
        722,0,2531,2532,5,530,0,0,2532,2538,3,1444,722,0,2533,2534,5,416,
        0,0,2534,2538,3,1444,722,0,2535,2536,5,431,0,0,2536,2538,3,1418,
        709,0,2537,2523,1,0,0,0,2537,2525,1,0,0,0,2537,2527,1,0,0,0,2537,
        2529,1,0,0,0,2537,2531,1,0,0,0,2537,2533,1,0,0,0,2537,2535,1,0,0,
        0,2538,135,1,0,0,0,2539,2540,5,582,0,0,2540,2541,3,1356,678,0,2541,
        2546,3,140,70,0,2542,2543,5,629,0,0,2543,2544,5,315,0,0,2544,2545,
        5,249,0,0,2545,2547,3,1362,681,0,2546,2542,1,0,0,0,2546,2547,1,0,
        0,0,2547,2549,1,0,0,0,2548,2550,3,144,72,0,2549,2548,1,0,0,0,2549,
        2550,1,0,0,0,2550,137,1,0,0,0,2551,2552,5,614,0,0,2552,2553,5,582,
        0,0,2553,2554,3,1356,678,0,2554,2555,5,51,0,0,2555,2557,3,142,71,
        0,2556,2558,3,60,30,0,2557,2556,1,0,0,0,2557,2558,1,0,0,0,2558,139,
        1,0,0,0,2559,2560,5,51,0,0,2560,2567,3,142,71,0,2561,2564,4,70,17,
        0,2562,2563,5,51,0,0,2563,2565,3,142,71,0,2564,2562,1,0,0,0,2564,
        2565,1,0,0,0,2565,2567,1,0,0,0,2566,2559,1,0,0,0,2566,2561,1,0,0,
        0,2567,141,1,0,0,0,2568,2569,5,152,0,0,2569,2570,3,1444,722,0,2570,
        143,1,0,0,0,2571,2578,3,146,73,0,2572,2574,5,29,0,0,2573,2572,1,
        0,0,0,2573,2574,1,0,0,0,2574,2575,1,0,0,0,2575,2577,3,146,73,0,2576,
        2573,1,0,0,0,2577,2580,1,0,0,0,2578,2576,1,0,0,0,2578,2579,1,0,0,
        0,2579,145,1,0,0,0,2580,2578,1,0,0,0,2581,2593,3,148,74,0,2582,2593,
        3,152,76,0,2583,2593,3,154,77,0,2584,2593,3,156,78,0,2585,2593,3,
        158,79,0,2586,2593,3,160,80,0,2587,2593,3,162,81,0,2588,2593,3,164,
        82,0,2589,2593,3,166,83,0,2590,2591,4,73,18,0,2591,2593,3,168,84,
        0,2592,2581,1,0,0,0,2592,2582,1,0,0,0,2592,2583,1,0,0,0,2592,2584,
        1,0,0,0,2592,2585,1,0,0,0,2592,2586,1,0,0,0,2592,2587,1,0,0,0,2592,
        2588,1,0,0,0,2592,2589,1,0,0,0,2592,2590,1,0,0,0,2593,147,1,0,0,
        0,2594,2596,5,270,0,0,2595,2597,5,6,0,0,2596,2595,1,0,0,0,2596,2597,
        1,0,0,0,2597,2598,1,0,0,0,2598,2599,3,1472,736,0,2599,149,1,0,0,
        0,2600,2602,7,11,0,0,2601,2603,5,6,0,0,2602,2601,1,0,0,0,2602,2603,
        1,0,0,0,2603,2604,1,0,0,0,2604,2605,3,1472,736,0,2605,151,1,0,0,
        0,2606,2608,5,68,0,0,2607,2609,5,6,0,0,2608,2607,1,0,0,0,2608,2609,
        1,0,0,0,2609,2610,1,0,0,0,2610,2611,3,1472,736,0,2611,153,1,0,0,
        0,2612,2614,5,349,0,0,2613,2615,5,6,0,0,2614,2613,1,0,0,0,2614,2615,
        1,0,0,0,2615,2616,1,0,0,0,2616,2617,3,1472,736,0,2617,155,1,0,0,
        0,2618,2620,5,216,0,0,2619,2621,5,6,0,0,2620,2619,1,0,0,0,2620,2621,
        1,0,0,0,2621,2622,1,0,0,0,2622,2623,3,1472,736,0,2623,157,1,0,0,
        0,2624,2626,5,388,0,0,2625,2627,5,6,0,0,2626,2625,1,0,0,0,2626,2627,
        1,0,0,0,2627,2628,1,0,0,0,2628,2629,3,1420,710,0,2629,159,1,0,0,
        0,2630,2632,5,563,0,0,2631,2630,1,0,0,0,2631,2632,1,0,0,0,2632,2633,
        1,0,0,0,2633,2635,5,198,0,0,2634,2636,5,6,0,0,2635,2634,1,0,0,0,
        2635,2636,1,0,0,0,2636,2637,1,0,0,0,2637,2638,3,1374,687,0,2638,
        161,1,0,0,0,2639,2640,7,12,0,0,2640,163,1,0,0,0,2641,2643,5,118,
        0,0,2642,2644,5,6,0,0,2643,2642,1,0,0,0,2643,2644,1,0,0,0,2644,2645,
        1,0,0,0,2645,2646,3,1444,722,0,2646,165,1,0,0,0,2647,2649,5,223,
        0,0,2648,2650,5,6,0,0,2649,2648,1,0,0,0,2649,2650,1,0,0,0,2650,2651,
        1,0,0,0,2651,2652,3,1472,736,0,2652,167,1,0,0,0,2653,2655,5,194,
        0,0,2654,2656,5,6,0,0,2655,2654,1,0,0,0,2655,2656,1,0,0,0,2656,2657,
        1,0,0,0,2657,2658,3,1438,719,0,2658,169,1,0,0,0,2659,2661,5,198,
        0,0,2660,2662,5,6,0,0,2661,2660,1,0,0,0,2661,2662,1,0,0,0,2662,2663,
        1,0,0,0,2663,2664,3,1484,742,0,2664,171,1,0,0,0,2665,2667,3,174,
        87,0,2666,2665,1,0,0,0,2666,2667,1,0,0,0,2667,2669,1,0,0,0,2668,
        2670,3,1232,616,0,2669,2668,1,0,0,0,2669,2670,1,0,0,0,2670,2672,
        1,0,0,0,2671,2673,3,178,89,0,2672,2671,1,0,0,0,2672,2673,1,0,0,0,
        2673,2674,1,0,0,0,2674,2675,5,644,0,0,2675,2676,3,1352,676,0,2676,
        2677,3,72,36,0,2677,173,1,0,0,0,2678,2679,5,412,0,0,2679,2681,5,
        475,0,0,2680,2682,3,176,88,0,2681,2680,1,0,0,0,2681,2682,1,0,0,0,
        2682,2685,1,0,0,0,2683,2685,3,176,88,0,2684,2678,1,0,0,0,2684,2683,
        1,0,0,0,2685,175,1,0,0,0,2686,2687,5,56,0,0,2687,2688,5,6,0,0,2688,
        2689,7,13,0,0,2689,177,1,0,0,0,2690,2691,5,547,0,0,2691,2692,5,510,
        0,0,2692,2693,7,10,0,0,2693,179,1,0,0,0,2694,2696,3,1232,616,0,2695,
        2694,1,0,0,0,2695,2696,1,0,0,0,2696,2697,1,0,0,0,2697,2699,5,603,
        0,0,2698,2700,3,1240,620,0,2699,2698,1,0,0,0,2699,2700,1,0,0,0,2700,
        2701,1,0,0,0,2701,2702,3,1348,674,0,2702,2703,7,14,0,0,2703,2704,
        7,15,0,0,2704,2705,5,401,0,0,2705,2706,3,1382,691,0,2706,2707,5,
        232,0,0,2707,2708,5,189,0,0,2708,2710,5,503,0,0,2709,2711,3,182,
        91,0,2710,2709,1,0,0,0,2710,2711,1,0,0,0,2711,2712,1,0,0,0,2712,
        2713,3,1032,516,0,2713,181,1,0,0,0,2714,2715,7,16,0,0,2715,2716,
        3,1466,733,0,2716,183,1,0,0,0,2717,2719,3,1232,616,0,2718,2717,1,
        0,0,0,2718,2719,1,0,0,0,2719,2720,1,0,0,0,2720,2722,5,205,0,0,2721,
        2723,3,1240,620,0,2722,2721,1,0,0,0,2722,2723,1,0,0,0,2723,2724,
        1,0,0,0,2724,2725,3,1364,682,0,2725,2726,5,401,0,0,2726,2727,5,506,
        0,0,2727,2734,3,1110,555,0,2728,2729,5,401,0,0,2729,2731,5,122,0,
        0,2730,2732,5,390,0,0,2731,2730,1,0,0,0,2731,2732,1,0,0,0,2732,2733,
        1,0,0,0,2733,2735,5,436,0,0,2734,2728,1,0,0,0,2734,2735,1,0,0,0,
        2735,2742,1,0,0,0,2736,2743,5,192,0,0,2737,2740,5,177,0,0,2738,2739,
        5,401,0,0,2739,2741,3,604,302,0,2740,2738,1,0,0,0,2740,2741,1,0,
        0,0,2741,2743,1,0,0,0,2742,2736,1,0,0,0,2742,2737,1,0,0,0,2742,2743,
        1,0,0,0,2743,2746,1,0,0,0,2744,2745,5,118,0,0,2745,2747,3,1444,722,
        0,2746,2744,1,0,0,0,2746,2747,1,0,0,0,2747,2748,1,0,0,0,2748,2749,
        5,183,0,0,2749,2750,3,1032,516,0,2750,185,1,0,0,0,2751,2753,5,667,
        0,0,2752,2754,3,1240,620,0,2753,2752,1,0,0,0,2753,2754,1,0,0,0,2754,
        2755,1,0,0,0,2755,2756,3,682,341,0,2756,187,1,0,0,0,2757,2758,5,
        412,0,0,2758,2759,5,475,0,0,2759,2760,5,534,0,0,2760,2761,5,726,
        0,0,2761,2762,5,718,0,0,2762,2766,3,1424,712,0,2763,2765,3,190,95,
        0,2764,2763,1,0,0,0,2765,2768,1,0,0,0,2766,2764,1,0,0,0,2766,2767,
        1,0,0,0,2767,2783,1,0,0,0,2768,2766,1,0,0,0,2769,2770,5,534,0,0,
        2770,2771,5,726,0,0,2771,2773,5,718,0,0,2772,2774,3,1240,620,0,2773,
        2772,1,0,0,0,2773,2774,1,0,0,0,2774,2775,1,0,0,0,2775,2779,3,1424,
        712,0,2776,2778,3,190,95,0,2777,2776,1,0,0,0,2778,2781,1,0,0,0,2779,
        2777,1,0,0,0,2779,2780,1,0,0,0,2780,2783,1,0,0,0,2781,2779,1,0,0,
        0,2782,2757,1,0,0,0,2782,2769,1,0,0,0,2783,189,1,0,0,0,2784,2785,
        5,380,0,0,2785,2786,5,589,0,0,2786,2800,3,1446,723,0,2787,2788,5,
        723,0,0,2788,2789,5,589,0,0,2789,2800,3,1446,723,0,2790,2791,5,725,
        0,0,2791,2792,3,1446,723,0,2792,2793,5,262,0,0,2793,2794,5,89,0,
        0,2794,2795,3,1424,712,0,2795,2800,1,0,0,0,2796,2797,5,724,0,0,2797,
        2798,5,589,0,0,2798,2800,3,1446,723,0,2799,2784,1,0,0,0,2799,2787,
        1,0,0,0,2799,2790,1,0,0,0,2799,2796,1,0,0,0,2800,191,1,0,0,0,2801,
        2818,5,184,0,0,2802,2819,3,194,97,0,2803,2819,3,196,98,0,2804,2819,
        3,198,99,0,2805,2819,3,200,100,0,2806,2819,3,202,101,0,2807,2819,
        3,204,102,0,2808,2819,3,208,104,0,2809,2819,3,210,105,0,2810,2819,
        3,212,106,0,2811,2819,3,214,107,0,2812,2819,3,216,108,0,2813,2819,
        3,218,109,0,2814,2815,4,96,19,0,2815,2819,3,220,110,0,2816,2817,
        4,96,20,0,2817,2819,3,222,111,0,2818,2802,1,0,0,0,2818,2803,1,0,
        0,0,2818,2804,1,0,0,0,2818,2805,1,0,0,0,2818,2806,1,0,0,0,2818,2807,
        1,0,0,0,2818,2808,1,0,0,0,2818,2809,1,0,0,0,2818,2810,1,0,0,0,2818,
        2811,1,0,0,0,2818,2812,1,0,0,0,2818,2813,1,0,0,0,2818,2814,1,0,0,
        0,2818,2816,1,0,0,0,2819,193,1,0,0,0,2820,2822,5,150,0,0,2821,2823,
        3,1234,617,0,2822,2821,1,0,0,0,2822,2823,1,0,0,0,2823,2824,1,0,0,
        0,2824,2825,3,1338,669,0,2825,195,1,0,0,0,2826,2828,5,205,0,0,2827,
        2829,3,1234,617,0,2828,2827,1,0,0,0,2828,2829,1,0,0,0,2829,2830,
        1,0,0,0,2830,2831,3,1366,683,0,2831,197,1,0,0,0,2832,2834,5,238,
        0,0,2833,2835,3,1234,617,0,2834,2833,1,0,0,0,2834,2835,1,0,0,0,2835,
        2836,1,0,0,0,2836,2837,3,1346,673,0,2837,199,1,0,0,0,2838,2840,5,
        440,0,0,2839,2841,3,1234,617,0,2840,2839,1,0,0,0,2840,2841,1,0,0,
        0,2841,2842,1,0,0,0,2842,2843,3,1342,671,0,2843,201,1,0,0,0,2844,
        2846,3,1312,656,0,2845,2844,1,0,0,0,2845,2846,1,0,0,0,2846,2847,
        1,0,0,0,2847,2848,5,268,0,0,2848,2849,3,1332,666,0,2849,2850,5,401,
        0,0,2850,2852,3,1382,691,0,2851,2853,3,48,24,0,2852,2851,1,0,0,0,
        2852,2853,1,0,0,0,2853,203,1,0,0,0,2854,2855,5,315,0,0,2855,2856,
        5,249,0,0,2856,2867,3,1362,681,0,2857,2864,3,206,103,0,2858,2860,
        5,29,0,0,2859,2858,1,0,0,0,2859,2860,1,0,0,0,2860,2861,1,0,0,0,2861,
        2863,3,206,103,0,2862,2859,1,0,0,0,2863,2866,1,0,0,0,2864,2862,1,
        0,0,0,2864,2865,1,0,0,0,2865,2868,1,0,0,0,2866,2864,1,0,0,0,2867,
        2857,1,0,0,0,2867,2868,1,0,0,0,2868,205,1,0,0,0,2869,2872,3,162,
        81,0,2870,2872,3,160,80,0,2871,2869,1,0,0,0,2871,2870,1,0,0,0,2872,
        207,1,0,0,0,2873,2875,5,517,0,0,2874,2876,3,1234,617,0,2875,2874,
        1,0,0,0,2875,2876,1,0,0,0,2876,2877,1,0,0,0,2877,2878,3,1372,686,
        0,2878,209,1,0,0,0,2879,2881,5,586,0,0,2880,2879,1,0,0,0,2880,2881,
        1,0,0,0,2881,2882,1,0,0,0,2882,2884,7,17,0,0,2883,2885,3,1234,617,
        0,2884,2883,1,0,0,0,2884,2885,1,0,0,0,2885,2886,1,0,0,0,2886,2888,
        3,1384,692,0,2887,2889,7,2,0,0,2888,2887,1,0,0,0,2888,2889,1,0,0,
        0,2889,211,1,0,0,0,2890,2891,5,582,0,0,2891,2902,3,1358,679,0,2892,
        2899,3,206,103,0,2893,2895,5,29,0,0,2894,2893,1,0,0,0,2894,2895,
        1,0,0,0,2895,2896,1,0,0,0,2896,2898,3,206,103,0,2897,2894,1,0,0,
        0,2898,2901,1,0,0,0,2899,2897,1,0,0,0,2899,2900,1,0,0,0,2900,2903,
        1,0,0,0,2901,2899,1,0,0,0,2902,2892,1,0,0,0,2902,2903,1,0,0,0,2903,
        213,1,0,0,0,2904,2906,5,603,0,0,2905,2907,3,1234,617,0,2906,2905,
        1,0,0,0,2906,2907,1,0,0,0,2907,2908,1,0,0,0,2908,2909,3,1350,675,
        0,2909,215,1,0,0,0,2910,2912,5,644,0,0,2911,2913,3,1234,617,0,2912,
        2911,1,0,0,0,2912,2913,1,0,0,0,2913,2914,1,0,0,0,2914,2916,3,1254,
        627,0,2915,2917,7,2,0,0,2916,2915,1,0,0,0,2916,2917,1,0,0,0,2917,
        217,1,0,0,0,2918,2920,5,667,0,0,2919,2921,3,1234,617,0,2920,2919,
        1,0,0,0,2920,2921,1,0,0,0,2921,2922,1,0,0,0,2922,2923,3,682,341,
        0,2923,219,1,0,0,0,2924,2925,5,534,0,0,2925,2926,5,726,0,0,2926,
        2928,5,718,0,0,2927,2929,3,1234,617,0,2928,2927,1,0,0,0,2928,2929,
        1,0,0,0,2929,2930,1,0,0,0,2930,2931,3,1424,712,0,2931,221,1,0,0,
        0,2932,2933,5,614,0,0,2933,2934,5,582,0,0,2934,2936,3,1358,679,0,
        2935,2937,3,60,30,0,2936,2935,1,0,0,0,2936,2937,1,0,0,0,2937,223,
        1,0,0,0,2938,2939,5,470,0,0,2939,2940,7,17,0,0,2940,2945,3,226,113,
        0,2941,2942,5,29,0,0,2942,2944,3,226,113,0,2943,2941,1,0,0,0,2944,
        2947,1,0,0,0,2945,2943,1,0,0,0,2945,2946,1,0,0,0,2946,225,1,0,0,
        0,2947,2945,1,0,0,0,2948,2949,3,1382,691,0,2949,2950,5,599,0,0,2950,
        2951,3,1376,688,0,2951,227,1,0,0,0,2952,2954,5,606,0,0,2953,2955,
        5,583,0,0,2954,2953,1,0,0,0,2954,2955,1,0,0,0,2955,2956,1,0,0,0,
        2956,2957,3,1382,691,0,2957,229,1,0,0,0,2958,2959,5,266,0,0,2959,
        2960,5,583,0,0,2960,2961,5,235,0,0,2961,2962,3,1448,724,0,2962,231,
        1,0,0,0,2963,2964,5,92,0,0,2964,2970,3,1342,671,0,2965,2967,5,32,
        0,0,2966,2968,3,1004,502,0,2967,2966,1,0,0,0,2967,2968,1,0,0,0,2968,
        2969,1,0,0,0,2969,2971,5,33,0,0,2970,2965,1,0,0,0,2970,2971,1,0,
        0,0,2971,233,1,0,0,0,2972,2974,3,352,176,0,2973,2972,1,0,0,0,2973,
        2974,1,0,0,0,2974,2975,1,0,0,0,2975,2979,5,171,0,0,2976,2978,3,238,
        119,0,2977,2976,1,0,0,0,2978,2981,1,0,0,0,2979,2977,1,0,0,0,2979,
        2980,1,0,0,0,2980,3014,1,0,0,0,2981,2979,1,0,0,0,2982,3006,5,235,
        0,0,2983,2984,3,1386,693,0,2984,2985,5,630,0,0,2985,2987,3,366,183,
        0,2986,2988,3,390,195,0,2987,2986,1,0,0,0,2987,2988,1,0,0,0,2988,
        3007,1,0,0,0,2989,2992,3,1382,691,0,2990,2991,4,117,21,0,2991,2993,
        3,432,216,0,2992,2990,1,0,0,0,2992,2993,1,0,0,0,2993,2995,1,0,0,
        0,2994,2996,3,236,118,0,2995,2994,1,0,0,0,2995,2996,1,0,0,0,2996,
        2998,1,0,0,0,2997,2999,3,390,195,0,2998,2997,1,0,0,0,2998,2999,1,
        0,0,0,2999,3001,1,0,0,0,3000,3002,3,360,180,0,3001,3000,1,0,0,0,
        3001,3002,1,0,0,0,3002,3004,1,0,0,0,3003,3005,3,316,158,0,3004,3003,
        1,0,0,0,3004,3005,1,0,0,0,3005,3007,1,0,0,0,3006,2983,1,0,0,0,3006,
        2989,1,0,0,0,3007,3015,1,0,0,0,3008,3009,3,1386,693,0,3009,3010,
        5,235,0,0,3010,3012,3,366,183,0,3011,3013,3,390,195,0,3012,3011,
        1,0,0,0,3012,3013,1,0,0,0,3013,3015,1,0,0,0,3014,2982,1,0,0,0,3014,
        3008,1,0,0,0,3015,235,1,0,0,0,3016,3017,5,423,0,0,3017,3018,5,32,
        0,0,3018,3019,3,1408,704,0,3019,3020,5,33,0,0,3020,237,1,0,0,0,3021,
        3022,7,18,0,0,3022,239,1,0,0,0,3023,3024,5,183,0,0,3024,3025,3,384,
        192,0,3025,241,1,0,0,0,3026,3044,5,251,0,0,3027,3028,3,1382,691,
        0,3028,3030,5,405,0,0,3029,3031,3,432,216,0,3030,3029,1,0,0,0,3030,
        3031,1,0,0,0,3031,3045,1,0,0,0,3032,3042,3,1406,703,0,3033,3043,
        5,109,0,0,3034,3035,5,453,0,0,3035,3037,3,244,122,0,3036,3038,3,
        390,195,0,3037,3036,1,0,0,0,3037,3038,1,0,0,0,3038,3040,1,0,0,0,
        3039,3041,3,314,157,0,3040,3039,1,0,0,0,3040,3041,1,0,0,0,3041,3043,
        1,0,0,0,3042,3033,1,0,0,0,3042,3034,1,0,0,0,3043,3045,1,0,0,0,3044,
        3027,1,0,0,0,3044,3032,1,0,0,0,3045,243,1,0,0,0,3046,3057,7,19,0,
        0,3047,3054,3,1406,703,0,3048,3055,7,20,0,0,3049,3050,7,21,0,0,3050,
        3051,5,32,0,0,3051,3052,3,260,130,0,3052,3053,5,33,0,0,3053,3055,
        1,0,0,0,3054,3048,1,0,0,0,3054,3049,1,0,0,0,3055,3057,1,0,0,0,3056,
        3046,1,0,0,0,3056,3047,1,0,0,0,3057,245,1,0,0,0,3058,3060,5,274,
        0,0,3059,3061,3,248,124,0,3060,3059,1,0,0,0,3060,3061,1,0,0,0,3061,
        3063,1,0,0,0,3062,3064,5,264,0,0,3063,3062,1,0,0,0,3063,3064,1,0,
        0,0,3064,3066,1,0,0,0,3065,3067,5,279,0,0,3066,3065,1,0,0,0,3066,
        3067,1,0,0,0,3067,3068,1,0,0,0,3068,3070,3,1382,691,0,3069,3071,
        3,1316,658,0,3070,3069,1,0,0,0,3070,3071,1,0,0,0,3071,3082,1,0,0,
        0,3072,3074,3,250,125,0,3073,3075,3,262,131,0,3074,3073,1,0,0,0,
        3074,3075,1,0,0,0,3075,3083,1,0,0,0,3076,3077,5,519,0,0,3077,3079,
        3,1256,628,0,3078,3080,3,262,131,0,3079,3078,1,0,0,0,3079,3080,1,
        0,0,0,3080,3083,1,0,0,0,3081,3083,3,256,128,0,3082,3072,1,0,0,0,
        3082,3076,1,0,0,0,3082,3081,1,0,0,0,3083,3085,1,0,0,0,3084,3086,
        3,264,132,0,3085,3084,1,0,0,0,3085,3086,1,0,0,0,3086,247,1,0,0,0,
        3087,3088,7,22,0,0,3088,249,1,0,0,0,3089,3091,5,32,0,0,3090,3092,
        3,252,126,0,3091,3090,1,0,0,0,3091,3092,1,0,0,0,3092,3093,1,0,0,
        0,3093,3095,5,33,0,0,3094,3089,1,0,0,0,3094,3095,1,0,0,0,3095,3096,
        1,0,0,0,3096,3097,3,254,127,0,3097,251,1,0,0,0,3098,3103,3,1328,
        664,0,3099,3100,5,29,0,0,3100,3102,3,1328,664,0,3101,3099,1,0,0,
        0,3102,3105,1,0,0,0,3103,3101,1,0,0,0,3103,3104,1,0,0,0,3104,253,
        1,0,0,0,3105,3103,1,0,0,0,3106,3107,7,23,0,0,3107,3108,3,258,129,
        0,3108,255,1,0,0,0,3109,3120,3,300,150,0,3110,3120,3,304,152,0,3111,
        3113,5,32,0,0,3112,3114,3,252,126,0,3113,3112,1,0,0,0,3113,3114,
        1,0,0,0,3114,3115,1,0,0,0,3115,3117,5,33,0,0,3116,3111,1,0,0,0,3116,
        3117,1,0,0,0,3117,3118,1,0,0,0,3118,3120,3,98,49,0,3119,3109,1,0,
        0,0,3119,3110,1,0,0,0,3119,3116,1,0,0,0,3120,257,1,0,0,0,3121,3123,
        5,32,0,0,3122,3124,3,260,130,0,3123,3122,1,0,0,0,3123,3124,1,0,0,
        0,3124,3125,1,0,0,0,3125,3134,5,33,0,0,3126,3127,5,29,0,0,3127,3129,
        5,32,0,0,3128,3130,3,260,130,0,3129,3128,1,0,0,0,3129,3130,1,0,0,
        0,3130,3131,1,0,0,0,3131,3133,5,33,0,0,3132,3126,1,0,0,0,3133,3136,
        1,0,0,0,3134,3132,1,0,0,0,3134,3135,1,0,0,0,3135,259,1,0,0,0,3136,
        3134,1,0,0,0,3137,3140,3,910,455,0,3138,3140,5,166,0,0,3139,3137,
        1,0,0,0,3139,3138,1,0,0,0,3140,3148,1,0,0,0,3141,3144,5,29,0,0,3142,
        3145,3,910,455,0,3143,3145,5,166,0,0,3144,3142,1,0,0,0,3144,3143,
        1,0,0,0,3145,3147,1,0,0,0,3146,3141,1,0,0,0,3147,3150,1,0,0,0,3148,
        3146,1,0,0,0,3148,3149,1,0,0,0,3149,261,1,0,0,0,3150,3148,1,0,0,
        0,3151,3152,4,131,22,0,3152,3153,5,63,0,0,3153,3155,3,1406,703,0,
        3154,3156,3,1324,662,0,3155,3154,1,0,0,0,3155,3156,1,0,0,0,3156,
        263,1,0,0,0,3157,3158,5,401,0,0,3158,3159,5,187,0,0,3159,3160,5,
        295,0,0,3160,3161,5,623,0,0,3161,3162,3,1256,628,0,3162,265,1,0,
        0,0,3163,3164,5,311,0,0,3164,3166,3,268,134,0,3165,3167,3,270,135,
        0,3166,3165,1,0,0,0,3166,3167,1,0,0,0,3167,3169,1,0,0,0,3168,3170,
        3,272,136,0,3169,3168,1,0,0,0,3169,3170,1,0,0,0,3170,3172,1,0,0,
        0,3171,3173,5,312,0,0,3172,3171,1,0,0,0,3172,3173,1,0,0,0,3173,3175,
        1,0,0,0,3174,3176,3,274,137,0,3175,3174,1,0,0,0,3175,3176,1,0,0,
        0,3176,3177,1,0,0,0,3177,3179,3,1438,719,0,3178,3180,3,276,138,0,
        3179,3178,1,0,0,0,3179,3180,1,0,0,0,3180,3182,1,0,0,0,3181,3183,
        3,278,139,0,3182,3181,1,0,0,0,3182,3183,1,0,0,0,3183,3185,1,0,0,
        0,3184,3186,7,8,0,0,3185,3184,1,0,0,0,3185,3186,1,0,0,0,3186,3187,
        1,0,0,0,3187,3188,5,279,0,0,3188,3189,5,583,0,0,3189,3191,3,1382,
        691,0,3190,3192,3,1316,658,0,3191,3190,1,0,0,0,3191,3192,1,0,0,0,
        3192,3194,1,0,0,0,3193,3195,3,1260,630,0,3194,3193,1,0,0,0,3194,
        3195,1,0,0,0,3195,3197,1,0,0,0,3196,3198,3,280,140,0,3197,3196,1,
        0,0,0,3197,3198,1,0,0,0,3198,3200,1,0,0,0,3199,3201,3,1262,631,0,
        3200,3199,1,0,0,0,3200,3201,1,0,0,0,3201,3203,1,0,0,0,3202,3204,
        3,1266,633,0,3203,3202,1,0,0,0,3203,3204,1,0,0,0,3204,3205,1,0,0,
        0,3205,3207,3,282,141,0,3206,3208,3,290,145,0,3207,3206,1,0,0,0,
        3207,3208,1,0,0,0,3208,3210,1,0,0,0,3209,3211,3,292,146,0,3210,3209,
        1,0,0,0,3210,3211,1,0,0,0,3211,3213,1,0,0,0,3212,3214,3,288,144,
        0,3213,3212,1,0,0,0,3213,3214,1,0,0,0,3214,267,1,0,0,0,3215,3216,
        7,24,0,0,3216,269,1,0,0,0,3217,3218,7,25,0,0,3218,271,1,0,0,0,3219,
        3220,4,136,23,0,3220,3221,5,235,0,0,3221,273,1,0,0,0,3222,3226,5,
        269,0,0,3223,3224,4,137,24,0,3224,3226,7,26,0,0,3225,3222,1,0,0,
        0,3225,3223,1,0,0,0,3226,275,1,0,0,0,3227,3233,4,138,25,0,3228,3229,
        5,137,0,0,3229,3234,5,3,0,0,3230,3231,3,1404,702,0,3231,3232,5,3,
        0,0,3232,3234,1,0,0,0,3233,3228,1,0,0,0,3233,3230,1,0,0,0,3234,277,
        1,0,0,0,3235,3236,4,139,26,0,3236,3237,5,282,0,0,3237,3238,5,438,
        0,0,3238,3239,5,295,0,0,3239,3240,5,411,0,0,3240,279,1,0,0,0,3241,
        3242,5,500,0,0,3242,3243,5,262,0,0,3243,3244,5,89,0,0,3244,3245,
        3,1440,720,0,3245,281,1,0,0,0,3246,3247,5,264,0,0,3247,3248,5,3,
        0,0,3248,3250,7,27,0,0,3249,3246,1,0,0,0,3249,3250,1,0,0,0,3250,
        3252,1,0,0,0,3251,3253,3,284,142,0,3252,3251,1,0,0,0,3252,3253,1,
        0,0,0,3253,3256,1,0,0,0,3254,3255,5,519,0,0,3255,3257,3,1256,628,
        0,3256,3254,1,0,0,0,3256,3257,1,0,0,0,3257,283,1,0,0,0,3258,3260,
        5,32,0,0,3259,3261,3,286,143,0,3260,3259,1,0,0,0,3260,3261,1,0,0,
        0,3261,3262,1,0,0,0,3262,3263,5,33,0,0,3263,285,1,0,0,0,3264,3269,
        3,1326,663,0,3265,3266,5,39,0,0,3266,3269,3,1466,733,0,3267,3269,
        5,41,0,0,3268,3264,1,0,0,0,3268,3265,1,0,0,0,3268,3267,1,0,0,0,3269,
        3280,1,0,0,0,3270,3276,5,29,0,0,3271,3277,3,1326,663,0,3272,3273,
        5,39,0,0,3273,3277,3,1466,733,0,3274,3277,5,40,0,0,3275,3277,5,41,
        0,0,3276,3271,1,0,0,0,3276,3272,1,0,0,0,3276,3274,1,0,0,0,3276,3275,
        1,0,0,0,3277,3279,1,0,0,0,3278,3270,1,0,0,0,3279,3282,1,0,0,0,3280,
        3278,1,0,0,0,3280,3281,1,0,0,0,3281,287,1,0,0,0,3282,3280,1,0,0,
        0,3283,3284,4,144,27,0,3284,3285,5,56,0,0,3285,3286,5,6,0,0,3286,
        3287,5,804,0,0,3287,289,1,0,0,0,3288,3289,4,145,28,0,3289,3290,5,
        810,0,0,3290,3291,5,6,0,0,3291,3292,5,3,0,0,3292,291,1,0,0,0,3293,
        3294,4,146,29,0,3294,3295,5,358,0,0,3295,3296,5,6,0,0,3296,3297,
        3,1472,736,0,3297,293,1,0,0,0,3298,3300,5,475,0,0,3299,3301,7,28,
        0,0,3300,3299,1,0,0,0,3300,3301,1,0,0,0,3301,3303,1,0,0,0,3302,3304,
        5,279,0,0,3303,3302,1,0,0,0,3303,3304,1,0,0,0,3304,3305,1,0,0,0,
        3305,3307,3,1382,691,0,3306,3308,3,1316,658,0,3307,3306,1,0,0,0,
        3307,3308,1,0,0,0,3308,3313,1,0,0,0,3309,3314,3,250,125,0,3310,3311,
        5,519,0,0,3311,3314,3,1256,628,0,3312,3314,3,256,128,0,3313,3309,
        1,0,0,0,3313,3310,1,0,0,0,3313,3312,1,0,0,0,3314,295,1,0,0,0,3315,
        3317,3,300,150,0,3316,3318,3,376,188,0,3317,3316,1,0,0,0,3317,3318,
        1,0,0,0,3318,3321,1,0,0,0,3319,3321,3,298,149,0,3320,3315,1,0,0,
        0,3320,3319,1,0,0,0,3321,297,1,0,0,0,3322,3323,5,32,0,0,3323,3324,
        3,298,149,0,3324,3325,5,33,0,0,3325,3340,1,0,0,0,3326,3327,3,300,
        150,0,3327,3329,3,322,161,0,3328,3330,3,376,188,0,3329,3328,1,0,
        0,0,3329,3330,1,0,0,0,3330,3340,1,0,0,0,3331,3332,3,300,150,0,3332,
        3333,3,376,188,0,3333,3334,3,322,161,0,3334,3340,1,0,0,0,3335,3336,
        4,149,30,0,3336,3337,3,304,152,0,3337,3338,3,322,161,0,3338,3340,
        1,0,0,0,3339,3322,1,0,0,0,3339,3326,1,0,0,0,3339,3331,1,0,0,0,3339,
        3335,1,0,0,0,3340,299,1,0,0,0,3341,3343,3,352,176,0,3342,3341,1,
        0,0,0,3342,3343,1,0,0,0,3343,3344,1,0,0,0,3344,3346,3,302,151,0,
        3345,3347,3,360,180,0,3346,3345,1,0,0,0,3346,3347,1,0,0,0,3347,3349,
        1,0,0,0,3348,3350,3,314,157,0,3349,3348,1,0,0,0,3349,3350,1,0,0,
        0,3350,301,1,0,0,0,3351,3354,3,306,153,0,3352,3354,3,304,152,0,3353,
        3351,1,0,0,0,3353,3352,1,0,0,0,3354,3366,1,0,0,0,3355,3359,5,617,
        0,0,3356,3357,4,151,31,0,3357,3359,7,29,0,0,3358,3355,1,0,0,0,3358,
        3356,1,0,0,0,3359,3361,1,0,0,0,3360,3362,3,430,215,0,3361,3360,1,
        0,0,0,3361,3362,1,0,0,0,3362,3363,1,0,0,0,3363,3365,3,302,151,0,
        3364,3358,1,0,0,0,3365,3368,1,0,0,0,3366,3364,1,0,0,0,3366,3367,
        1,0,0,0,3367,303,1,0,0,0,3368,3366,1,0,0,0,3369,3372,5,32,0,0,3370,
        3373,3,304,152,0,3371,3373,3,98,49,0,3372,3370,1,0,0,0,3372,3371,
        1,0,0,0,3373,3374,1,0,0,0,3374,3375,5,33,0,0,3375,305,1,0,0,0,3376,
        3382,3,308,154,0,3377,3378,4,153,32,0,3378,3382,3,368,184,0,3379,
        3380,4,153,33,0,3380,3382,3,370,185,0,3381,3376,1,0,0,0,3381,3377,
        1,0,0,0,3381,3379,1,0,0,0,3382,307,1,0,0,0,3383,3387,5,511,0,0,3384,
        3386,3,374,187,0,3385,3384,1,0,0,0,3386,3389,1,0,0,0,3387,3385,1,
        0,0,0,3387,3388,1,0,0,0,3388,3390,1,0,0,0,3389,3387,1,0,0,0,3390,
        3392,3,384,192,0,3391,3393,3,322,161,0,3392,3391,1,0,0,0,3392,3393,
        1,0,0,0,3393,3395,1,0,0,0,3394,3396,3,364,182,0,3395,3394,1,0,0,
        0,3395,3396,1,0,0,0,3396,3398,1,0,0,0,3397,3399,3,390,195,0,3398,
        3397,1,0,0,0,3398,3399,1,0,0,0,3399,3401,1,0,0,0,3400,3402,3,356,
        178,0,3401,3400,1,0,0,0,3401,3402,1,0,0,0,3402,3404,1,0,0,0,3403,
        3405,3,326,163,0,3404,3403,1,0,0,0,3404,3405,1,0,0,0,3405,3407,1,
        0,0,0,3406,3408,3,330,165,0,3407,3406,1,0,0,0,3407,3408,1,0,0,0,
        3408,3410,1,0,0,0,3409,3411,3,328,164,0,3410,3409,1,0,0,0,3410,3411,
        1,0,0,0,3411,309,1,0,0,0,3412,3413,3,304,152,0,3413,311,1,0,0,0,
        3414,3415,7,30,0,0,3415,313,1,0,0,0,3416,3417,5,306,0,0,3417,3418,
        3,318,159,0,3418,315,1,0,0,0,3419,3420,5,306,0,0,3420,3421,3,320,
        160,0,3421,317,1,0,0,0,3422,3425,3,320,160,0,3423,3424,7,31,0,0,
        3424,3426,3,320,160,0,3425,3423,1,0,0,0,3425,3426,1,0,0,0,3426,319,
        1,0,0,0,3427,3430,3,1406,703,0,3428,3430,7,32,0,0,3429,3427,1,0,
        0,0,3429,3428,1,0,0,0,3430,321,1,0,0,0,3431,3459,5,279,0,0,3432,
        3433,5,414,0,0,3433,3435,3,1438,719,0,3434,3436,3,1260,630,0,3435,
        3434,1,0,0,0,3435,3436,1,0,0,0,3436,3438,1,0,0,0,3437,3439,3,1262,
        631,0,3438,3437,1,0,0,0,3438,3439,1,0,0,0,3439,3441,1,0,0,0,3440,
        3442,3,1266,633,0,3441,3440,1,0,0,0,3441,3442,1,0,0,0,3442,3460,
        1,0,0,0,3443,3444,5,186,0,0,3444,3460,3,1438,719,0,3445,3448,3,1466,
        733,0,3446,3448,3,986,493,0,3447,3445,1,0,0,0,3447,3446,1,0,0,0,
        3448,3456,1,0,0,0,3449,3452,5,29,0,0,3450,3453,3,1466,733,0,3451,
        3453,3,986,493,0,3452,3450,1,0,0,0,3452,3451,1,0,0,0,3453,3455,1,
        0,0,0,3454,3449,1,0,0,0,3455,3458,1,0,0,0,3456,3454,1,0,0,0,3456,
        3457,1,0,0,0,3457,3460,1,0,0,0,3458,3456,1,0,0,0,3459,3432,1,0,0,
        0,3459,3443,1,0,0,0,3459,3447,1,0,0,0,3460,323,1,0,0,0,3461,3462,
        5,440,0,0,3462,3468,5,32,0,0,3463,3466,5,3,0,0,3464,3465,5,29,0,
        0,3465,3467,5,3,0,0,3466,3464,1,0,0,0,3466,3467,1,0,0,0,3467,3469,
        1,0,0,0,3468,3463,1,0,0,0,3468,3469,1,0,0,0,3469,3470,1,0,0,0,3470,
        3471,5,33,0,0,3471,325,1,0,0,0,3472,3473,5,253,0,0,3473,3474,3,910,
        455,0,3474,327,1,0,0,0,3475,3476,4,164,34,0,3476,3477,5,812,0,0,
        3477,3478,3,910,455,0,3478,329,1,0,0,0,3479,3480,5,707,0,0,3480,
        3485,3,332,166,0,3481,3482,5,29,0,0,3482,3484,3,332,166,0,3483,3481,
        1,0,0,0,3484,3487,1,0,0,0,3485,3483,1,0,0,0,3485,3486,1,0,0,0,3486,
        331,1,0,0,0,3487,3485,1,0,0,0,3488,3489,3,1402,701,0,3489,3490,5,
        63,0,0,3490,3491,3,334,167,0,3491,333,1,0,0,0,3492,3493,5,32,0,0,
        3493,3494,3,336,168,0,3494,3495,5,33,0,0,3495,335,1,0,0,0,3496,3498,
        3,1402,701,0,3497,3496,1,0,0,0,3497,3498,1,0,0,0,3498,3502,1,0,0,
        0,3499,3500,5,423,0,0,3500,3501,5,89,0,0,3501,3503,3,1022,511,0,
        3502,3499,1,0,0,0,3502,3503,1,0,0,0,3503,3505,1,0,0,0,3504,3506,
        3,360,180,0,3505,3504,1,0,0,0,3505,3506,1,0,0,0,3506,3508,1,0,0,
        0,3507,3509,3,338,169,0,3508,3507,1,0,0,0,3508,3509,1,0,0,0,3509,
        337,1,0,0,0,3510,3511,3,340,170,0,3511,3513,3,342,171,0,3512,3514,
        3,350,175,0,3513,3512,1,0,0,0,3513,3514,1,0,0,0,3514,339,1,0,0,0,
        3515,3516,7,33,0,0,3516,341,1,0,0,0,3517,3520,3,344,172,0,3518,3520,
        3,346,173,0,3519,3517,1,0,0,0,3519,3518,1,0,0,0,3520,343,1,0,0,0,
        3521,3522,5,706,0,0,3522,3536,5,701,0,0,3523,3524,3,1422,711,0,3524,
        3525,5,701,0,0,3525,3536,1,0,0,0,3526,3527,5,43,0,0,3527,3536,5,
        701,0,0,3528,3529,5,278,0,0,3529,3530,3,910,455,0,3530,3531,3,1012,
        506,0,3531,3532,5,701,0,0,3532,3536,1,0,0,0,3533,3534,5,143,0,0,
        3534,3536,5,503,0,0,3535,3521,1,0,0,0,3535,3523,1,0,0,0,3535,3526,
        1,0,0,0,3535,3528,1,0,0,0,3535,3533,1,0,0,0,3536,345,1,0,0,0,3537,
        3538,5,75,0,0,3538,3539,3,348,174,0,3539,3540,5,61,0,0,3540,3541,
        3,348,174,0,3541,347,1,0,0,0,3542,3556,3,344,172,0,3543,3544,5,706,
        0,0,3544,3556,5,690,0,0,3545,3546,3,1422,711,0,3546,3547,5,690,0,
        0,3547,3556,1,0,0,0,3548,3549,5,43,0,0,3549,3556,5,690,0,0,3550,
        3551,5,278,0,0,3551,3552,3,910,455,0,3552,3553,3,1012,506,0,3553,
        3554,5,690,0,0,3554,3556,1,0,0,0,3555,3542,1,0,0,0,3555,3543,1,0,
        0,0,3555,3545,1,0,0,0,3555,3548,1,0,0,0,3555,3550,1,0,0,0,3556,349,
        1,0,0,0,3557,3564,5,688,0,0,3558,3559,5,143,0,0,3559,3565,5,503,
        0,0,3560,3565,5,249,0,0,3561,3565,5,705,0,0,3562,3563,5,392,0,0,
        3563,3565,5,698,0,0,3564,3558,1,0,0,0,3564,3560,1,0,0,0,3564,3561,
        1,0,0,0,3564,3562,1,0,0,0,3565,351,1,0,0,0,3566,3568,5,653,0,0,3567,
        3569,5,673,0,0,3568,3567,1,0,0,0,3568,3569,1,0,0,0,3569,3570,1,0,
        0,0,3570,3575,3,354,177,0,3571,3572,5,29,0,0,3572,3574,3,354,177,
        0,3573,3571,1,0,0,0,3574,3577,1,0,0,0,3575,3573,1,0,0,0,3575,3576,
        1,0,0,0,3576,353,1,0,0,0,3577,3575,1,0,0,0,3578,3580,3,1406,703,
        0,3579,3581,3,1324,662,0,3580,3579,1,0,0,0,3580,3581,1,0,0,0,3581,
        3582,1,0,0,0,3582,3583,5,63,0,0,3583,3584,3,310,155,0,3584,355,1,
        0,0,0,3585,3586,5,249,0,0,3586,3587,5,89,0,0,3587,3589,3,1022,511,
        0,3588,3590,3,358,179,0,3589,3588,1,0,0,0,3589,3590,1,0,0,0,3590,
        3600,1,0,0,0,3591,3592,4,178,35,0,3592,3593,5,249,0,0,3593,3594,
        5,89,0,0,3594,3595,7,34,0,0,3595,3596,5,32,0,0,3596,3597,3,1026,
        513,0,3597,3598,5,33,0,0,3598,3600,1,0,0,0,3599,3585,1,0,0,0,3599,
        3591,1,0,0,0,3600,357,1,0,0,0,3601,3602,5,653,0,0,3602,3603,5,497,
        0,0,3603,359,1,0,0,0,3604,3605,5,411,0,0,3605,3606,5,89,0,0,3606,
        3607,3,1022,511,0,3607,361,1,0,0,0,3608,3609,7,35,0,0,3609,363,1,
        0,0,0,3610,3613,5,235,0,0,3611,3614,5,185,0,0,3612,3614,3,366,183,
        0,3613,3611,1,0,0,0,3613,3612,1,0,0,0,3614,365,1,0,0,0,3615,3620,
        3,392,196,0,3616,3617,5,29,0,0,3617,3619,3,392,196,0,3618,3616,1,
        0,0,0,3619,3622,1,0,0,0,3620,3618,1,0,0,0,3620,3621,1,0,0,0,3621,
        367,1,0,0,0,3622,3620,1,0,0,0,3623,3624,5,635,0,0,3624,3629,3,372,
        186,0,3625,3626,5,29,0,0,3626,3628,3,372,186,0,3627,3625,1,0,0,0,
        3628,3631,1,0,0,0,3629,3627,1,0,0,0,3629,3630,1,0,0,0,3630,369,1,
        0,0,0,3631,3629,1,0,0,0,3632,3633,5,583,0,0,3633,3634,3,1382,691,
        0,3634,371,1,0,0,0,3635,3636,5,503,0,0,3636,3638,5,32,0,0,3637,3639,
        3,260,130,0,3638,3637,1,0,0,0,3638,3639,1,0,0,0,3639,3640,1,0,0,
        0,3640,3641,5,33,0,0,3641,373,1,0,0,0,3642,3645,3,312,156,0,3643,
        3645,5,545,0,0,3644,3642,1,0,0,0,3644,3643,1,0,0,0,3645,375,1,0,
        0,0,3646,3648,4,188,36,0,3647,3649,3,378,189,0,3648,3647,1,0,0,0,
        3649,3650,1,0,0,0,3650,3648,1,0,0,0,3650,3651,1,0,0,0,3651,377,1,
        0,0,0,3652,3653,5,232,0,0,3653,3656,3,380,190,0,3654,3655,5,676,
        0,0,3655,3657,3,1386,693,0,3656,3654,1,0,0,0,3656,3657,1,0,0,0,3657,
        3659,1,0,0,0,3658,3660,3,382,191,0,3659,3658,1,0,0,0,3659,3660,1,
        0,0,0,3660,3666,1,0,0,0,3661,3662,5,314,0,0,3662,3663,5,282,0,0,
        3663,3664,5,520,0,0,3664,3666,5,369,0,0,3665,3652,1,0,0,0,3665,3661,
        1,0,0,0,3666,379,1,0,0,0,3667,3668,7,36,0,0,3668,381,1,0,0,0,3669,
        3670,5,677,0,0,3670,3673,5,678,0,0,3671,3673,5,679,0,0,3672,3669,
        1,0,0,0,3672,3671,1,0,0,0,3673,383,1,0,0,0,3674,3677,3,386,193,0,
        3675,3677,5,16,0,0,3676,3674,1,0,0,0,3676,3675,1,0,0,0,3677,3682,
        1,0,0,0,3678,3679,5,29,0,0,3679,3681,3,386,193,0,3680,3678,1,0,0,
        0,3681,3684,1,0,0,0,3682,3680,1,0,0,0,3682,3683,1,0,0,0,3683,385,
        1,0,0,0,3684,3682,1,0,0,0,3685,3691,3,1334,667,0,3686,3688,3,910,
        455,0,3687,3689,3,388,194,0,3688,3687,1,0,0,0,3688,3689,1,0,0,0,
        3689,3691,1,0,0,0,3690,3685,1,0,0,0,3690,3686,1,0,0,0,3691,387,1,
        0,0,0,3692,3694,5,63,0,0,3693,3692,1,0,0,0,3693,3694,1,0,0,0,3694,
        3697,1,0,0,0,3695,3698,3,1406,703,0,3696,3698,3,1438,719,0,3697,
        3695,1,0,0,0,3697,3696,1,0,0,0,3698,389,1,0,0,0,3699,3700,5,651,
        0,0,3700,3701,3,910,455,0,3701,391,1,0,0,0,3702,3713,3,404,202,0,
        3703,3707,5,34,0,0,3704,3705,4,196,37,0,3705,3708,3,1406,703,0,3706,
        3708,5,740,0,0,3707,3704,1,0,0,0,3707,3706,1,0,0,0,3708,3709,1,0,
        0,0,3709,3710,3,394,197,0,3710,3711,5,35,0,0,3711,3713,1,0,0,0,3712,
        3702,1,0,0,0,3712,3703,1,0,0,0,3713,3717,1,0,0,0,3714,3716,3,396,
        198,0,3715,3714,1,0,0,0,3716,3719,1,0,0,0,3717,3715,1,0,0,0,3717,
        3718,1,0,0,0,3718,393,1,0,0,0,3719,3717,1,0,0,0,3720,3724,3,404,
        202,0,3721,3723,3,396,198,0,3722,3721,1,0,0,0,3723,3726,1,0,0,0,
        3724,3722,1,0,0,0,3724,3725,1,0,0,0,3725,395,1,0,0,0,3726,3724,1,
        0,0,0,3727,3728,3,400,200,0,3728,3733,3,392,196,0,3729,3730,5,401,
        0,0,3730,3734,3,910,455,0,3731,3732,5,630,0,0,3732,3734,3,1410,705,
        0,3733,3729,1,0,0,0,3733,3731,1,0,0,0,3733,3734,1,0,0,0,3734,3747,
        1,0,0,0,3735,3736,3,402,201,0,3736,3741,3,392,196,0,3737,3738,5,
        401,0,0,3738,3742,3,910,455,0,3739,3740,5,630,0,0,3740,3742,3,1410,
        705,0,3741,3737,1,0,0,0,3741,3739,1,0,0,0,3742,3747,1,0,0,0,3743,
        3744,3,398,199,0,3744,3745,3,404,202,0,3745,3747,1,0,0,0,3746,3727,
        1,0,0,0,3746,3735,1,0,0,0,3746,3743,1,0,0,0,3747,397,1,0,0,0,3748,
        3750,5,382,0,0,3749,3751,5,271,0,0,3750,3749,1,0,0,0,3750,3751,1,
        0,0,0,3751,3752,1,0,0,0,3752,3760,5,291,0,0,3753,3754,5,382,0,0,
        3754,3756,7,37,0,0,3755,3757,5,413,0,0,3756,3755,1,0,0,0,3756,3757,
        1,0,0,0,3757,3758,1,0,0,0,3758,3760,5,291,0,0,3759,3748,1,0,0,0,
        3759,3753,1,0,0,0,3760,399,1,0,0,0,3761,3763,7,38,0,0,3762,3761,
        1,0,0,0,3762,3763,1,0,0,0,3763,3764,1,0,0,0,3764,3767,5,291,0,0,
        3765,3767,5,565,0,0,3766,3762,1,0,0,0,3766,3765,1,0,0,0,3767,401,
        1,0,0,0,3768,3770,7,37,0,0,3769,3771,5,413,0,0,3770,3769,1,0,0,0,
        3770,3771,1,0,0,0,3771,3772,1,0,0,0,3772,3773,5,291,0,0,3773,403,
        1,0,0,0,3774,3781,3,406,203,0,3775,3781,3,408,204,0,3776,3781,3,
        410,205,0,3777,3781,3,412,206,0,3778,3779,4,202,38,0,3779,3781,3,
        414,207,0,3780,3774,1,0,0,0,3780,3775,1,0,0,0,3780,3776,1,0,0,0,
        3780,3777,1,0,0,0,3780,3778,1,0,0,0,3781,405,1,0,0,0,3782,3784,3,
        1382,691,0,3783,3785,3,1316,658,0,3784,3783,1,0,0,0,3784,3785,1,
        0,0,0,3785,3787,1,0,0,0,3786,3788,3,432,216,0,3787,3786,1,0,0,0,
        3787,3788,1,0,0,0,3788,3790,1,0,0,0,3789,3791,3,434,217,0,3790,3789,
        1,0,0,0,3790,3791,1,0,0,0,3791,3793,1,0,0,0,3792,3794,3,938,469,
        0,3793,3792,1,0,0,0,3793,3794,1,0,0,0,3794,407,1,0,0,0,3795,3798,
        5,32,0,0,3796,3799,3,406,203,0,3797,3799,3,408,204,0,3798,3796,1,
        0,0,0,3798,3797,1,0,0,0,3799,3800,1,0,0,0,3800,3801,5,33,0,0,3801,
        409,1,0,0,0,3802,3804,3,310,155,0,3803,3805,3,432,216,0,3804,3803,
        1,0,0,0,3804,3805,1,0,0,0,3805,3807,1,0,0,0,3806,3808,3,1324,662,
        0,3807,3806,1,0,0,0,3807,3808,1,0,0,0,3808,3819,1,0,0,0,3809,3810,
        4,205,39,0,3810,3811,5,734,0,0,3811,3813,3,310,155,0,3812,3814,3,
        432,216,0,3813,3812,1,0,0,0,3813,3814,1,0,0,0,3814,3816,1,0,0,0,
        3815,3817,3,1324,662,0,3816,3815,1,0,0,0,3816,3817,1,0,0,0,3817,
        3819,1,0,0,0,3818,3802,1,0,0,0,3818,3809,1,0,0,0,3819,411,1,0,0,
        0,3820,3823,5,32,0,0,3821,3824,3,366,183,0,3822,3824,3,412,206,0,
        3823,3821,1,0,0,0,3823,3822,1,0,0,0,3824,3825,1,0,0,0,3825,3826,
        5,33,0,0,3826,413,1,0,0,0,3827,3828,5,709,0,0,3828,3829,5,32,0,0,
        3829,3830,3,910,455,0,3830,3831,5,29,0,0,3831,3832,3,1438,719,0,
        3832,3833,3,416,208,0,3833,3835,5,33,0,0,3834,3836,3,432,216,0,3835,
        3834,1,0,0,0,3835,3836,1,0,0,0,3836,415,1,0,0,0,3837,3838,5,114,
        0,0,3838,3839,5,32,0,0,3839,3844,3,418,209,0,3840,3841,5,29,0,0,
        3841,3843,3,418,209,0,3842,3840,1,0,0,0,3843,3846,1,0,0,0,3844,3842,
        1,0,0,0,3844,3845,1,0,0,0,3845,3847,1,0,0,0,3846,3844,1,0,0,0,3847,
        3848,5,33,0,0,3848,417,1,0,0,0,3849,3850,3,1406,703,0,3850,3851,
        5,232,0,0,3851,3852,5,711,0,0,3852,3873,1,0,0,0,3853,3854,3,1406,
        703,0,3854,3857,3,1166,583,0,3855,3856,4,209,40,0,3856,3858,3,1248,
        624,0,3857,3855,1,0,0,0,3857,3858,1,0,0,0,3858,3860,1,0,0,0,3859,
        3861,5,209,0,0,3860,3859,1,0,0,0,3860,3861,1,0,0,0,3861,3862,1,0,
        0,0,3862,3863,5,712,0,0,3863,3865,3,1438,719,0,3864,3866,3,422,211,
        0,3865,3864,1,0,0,0,3865,3866,1,0,0,0,3866,3873,1,0,0,0,3867,3868,
        5,710,0,0,3868,3869,5,712,0,0,3869,3870,3,1438,719,0,3870,3871,3,
        416,208,0,3871,3873,1,0,0,0,3872,3849,1,0,0,0,3872,3853,1,0,0,0,
        3872,3867,1,0,0,0,3873,419,1,0,0,0,3874,3876,3,424,212,0,3875,3877,
        3,426,213,0,3876,3875,1,0,0,0,3876,3877,1,0,0,0,3877,3880,1,0,0,
        0,3878,3880,3,426,213,0,3879,3874,1,0,0,0,3879,3878,1,0,0,0,3880,
        421,1,0,0,0,3881,3886,3,420,210,0,3882,3883,3,426,213,0,3883,3884,
        3,424,212,0,3884,3886,1,0,0,0,3885,3881,1,0,0,0,3885,3882,1,0,0,
        0,3886,423,1,0,0,0,3887,3888,3,428,214,0,3888,3889,5,401,0,0,3889,
        3890,5,708,0,0,3890,425,1,0,0,0,3891,3892,3,428,214,0,3892,3893,
        5,401,0,0,3893,3894,5,200,0,0,3894,427,1,0,0,0,3895,3900,5,200,0,
        0,3896,3900,5,395,0,0,3897,3898,5,166,0,0,3898,3900,3,1438,719,0,
        3899,3895,1,0,0,0,3899,3896,1,0,0,0,3899,3897,1,0,0,0,3900,429,1,
        0,0,0,3901,3902,7,39,0,0,3902,431,1,0,0,0,3903,3907,5,63,0,0,3904,
        3905,4,216,41,0,3905,3907,5,6,0,0,3906,3903,1,0,0,0,3906,3904,1,
        0,0,0,3906,3907,1,0,0,0,3907,3908,1,0,0,0,3908,3909,3,1406,703,0,
        3909,433,1,0,0,0,3910,3915,3,436,218,0,3911,3912,5,29,0,0,3912,3914,
        3,436,218,0,3913,3911,1,0,0,0,3914,3917,1,0,0,0,3915,3913,1,0,0,
        0,3915,3916,1,0,0,0,3916,435,1,0,0,0,3917,3915,1,0,0,0,3918,3919,
        3,438,219,0,3919,3921,3,440,220,0,3920,3922,3,444,222,0,3921,3920,
        1,0,0,0,3921,3922,1,0,0,0,3922,3923,1,0,0,0,3923,3924,5,32,0,0,3924,
        3925,3,446,223,0,3925,3926,5,33,0,0,3926,3939,1,0,0,0,3927,3928,
        5,629,0,0,3928,3930,3,440,220,0,3929,3931,3,444,222,0,3930,3929,
        1,0,0,0,3930,3931,1,0,0,0,3931,3932,1,0,0,0,3932,3934,5,32,0,0,3933,
        3935,3,446,223,0,3934,3933,1,0,0,0,3934,3935,1,0,0,0,3935,3936,1,
        0,0,0,3936,3937,5,33,0,0,3937,3939,1,0,0,0,3938,3918,1,0,0,0,3938,
        3927,1,0,0,0,3939,437,1,0,0,0,3940,3941,7,40,0,0,3941,439,1,0,0,
        0,3942,3943,7,41,0,0,3943,441,1,0,0,0,3944,3945,5,438,0,0,3945,3951,
        5,295,0,0,3946,3948,5,618,0,0,3947,3949,3,440,220,0,3948,3947,1,
        0,0,0,3948,3949,1,0,0,0,3949,3951,1,0,0,0,3950,3944,1,0,0,0,3950,
        3946,1,0,0,0,3951,443,1,0,0,0,3952,3958,5,232,0,0,3953,3959,5,291,
        0,0,3954,3955,5,411,0,0,3955,3959,5,89,0,0,3956,3957,5,249,0,0,3957,
        3959,5,89,0,0,3958,3953,1,0,0,0,3958,3954,1,0,0,0,3958,3956,1,0,
        0,0,3959,445,1,0,0,0,3960,3965,3,448,224,0,3961,3962,5,29,0,0,3962,
        3964,3,448,224,0,3963,3961,1,0,0,0,3964,3967,1,0,0,0,3965,3963,1,
        0,0,0,3965,3966,1,0,0,0,3966,447,1,0,0,0,3967,3965,1,0,0,0,3968,
        3971,3,1406,703,0,3969,3971,5,438,0,0,3970,3968,1,0,0,0,3970,3969,
        1,0,0,0,3971,449,1,0,0,0,3972,3974,3,352,176,0,3973,3972,1,0,0,0,
        3973,3974,1,0,0,0,3974,3975,1,0,0,0,3975,3977,5,623,0,0,3976,3978,
        5,321,0,0,3977,3976,1,0,0,0,3977,3978,1,0,0,0,3978,3980,1,0,0,0,
        3979,3981,5,264,0,0,3980,3979,1,0,0,0,3980,3981,1,0,0,0,3981,3982,
        1,0,0,0,3982,3983,3,366,183,0,3983,3984,5,519,0,0,3984,3986,3,1256,
        628,0,3985,3987,3,390,195,0,3986,3985,1,0,0,0,3986,3987,1,0,0,0,
        3987,3989,1,0,0,0,3988,3990,3,360,180,0,3989,3988,1,0,0,0,3989,3990,
        1,0,0,0,3990,3992,1,0,0,0,3991,3993,3,316,158,0,3992,3991,1,0,0,
        0,3992,3993,1,0,0,0,3993,451,1,0,0,0,3994,3999,3,454,227,0,3995,
        3999,3,460,230,0,3996,3999,3,462,231,0,3997,3999,3,468,234,0,3998,
        3994,1,0,0,0,3998,3995,1,0,0,0,3998,3996,1,0,0,0,3998,3997,1,0,0,
        0,3999,453,1,0,0,0,4000,4001,5,553,0,0,4001,4005,5,601,0,0,4002,
        4004,3,458,229,0,4003,4002,1,0,0,0,4004,4007,1,0,0,0,4005,4003,1,
        0,0,0,4005,4006,1,0,0,0,4006,4026,1,0,0,0,4007,4005,1,0,0,0,4008,
        4010,5,120,0,0,4009,4011,5,655,0,0,4010,4009,1,0,0,0,4010,4011,1,
        0,0,0,4011,4017,1,0,0,0,4012,4014,5,61,0,0,4013,4015,5,392,0,0,4014,
        4013,1,0,0,0,4014,4015,1,0,0,0,4015,4016,1,0,0,0,4016,4018,5,98,
        0,0,4017,4012,1,0,0,0,4017,4018,1,0,0,0,4018,4023,1,0,0,0,4019,4021,
        5,392,0,0,4020,4019,1,0,0,0,4020,4021,1,0,0,0,4021,4022,1,0,0,0,
        4022,4024,5,467,0,0,4023,4020,1,0,0,0,4023,4024,1,0,0,0,4024,4026,
        1,0,0,0,4025,4000,1,0,0,0,4025,4008,1,0,0,0,4026,455,1,0,0,0,4027,
        4029,5,74,0,0,4028,4030,5,655,0,0,4029,4028,1,0,0,0,4029,4030,1,
        0,0,0,4030,457,1,0,0,0,4031,4032,5,653,0,0,4032,4033,5,128,0,0,4033,
        4037,5,529,0,0,4034,4035,5,453,0,0,4035,4037,7,42,0,0,4036,4031,
        1,0,0,0,4036,4034,1,0,0,0,4037,459,1,0,0,0,4038,4039,5,505,0,0,4039,
        4068,3,1406,703,0,4040,4042,5,496,0,0,4041,4043,5,655,0,0,4042,4041,
        1,0,0,0,4042,4043,1,0,0,0,4043,4062,1,0,0,0,4044,4046,5,599,0,0,
        4045,4047,5,505,0,0,4046,4045,1,0,0,0,4046,4047,1,0,0,0,4047,4048,
        1,0,0,0,4048,4063,3,1406,703,0,4049,4051,5,61,0,0,4050,4052,5,392,
        0,0,4051,4050,1,0,0,0,4051,4052,1,0,0,0,4052,4053,1,0,0,0,4053,4055,
        5,98,0,0,4054,4049,1,0,0,0,4054,4055,1,0,0,0,4055,4060,1,0,0,0,4056,
        4058,5,392,0,0,4057,4056,1,0,0,0,4057,4058,1,0,0,0,4058,4059,1,0,
        0,0,4059,4061,5,467,0,0,4060,4057,1,0,0,0,4060,4061,1,0,0,0,4061,
        4063,1,0,0,0,4062,4044,1,0,0,0,4062,4054,1,0,0,0,4063,4068,1,0,0,
        0,4064,4065,5,467,0,0,4065,4066,5,505,0,0,4066,4068,3,1406,703,0,
        4067,4038,1,0,0,0,4067,4040,1,0,0,0,4067,4064,1,0,0,0,4068,461,1,
        0,0,0,4069,4070,5,314,0,0,4070,4071,7,17,0,0,4071,4076,3,464,232,
        0,4072,4073,5,29,0,0,4073,4075,3,464,232,0,4074,4072,1,0,0,0,4075,
        4078,1,0,0,0,4076,4074,1,0,0,0,4076,4077,1,0,0,0,4077,4086,1,0,0,
        0,4078,4076,1,0,0,0,4079,4080,5,314,0,0,4080,4081,5,276,0,0,4081,
        4082,5,232,0,0,4082,4086,5,72,0,0,4083,4084,5,620,0,0,4084,4086,
        7,43,0,0,4085,4069,1,0,0,0,4085,4079,1,0,0,0,4085,4083,1,0,0,0,4086,
        463,1,0,0,0,4087,4089,3,1382,691,0,4088,4090,3,432,216,0,4089,4088,
        1,0,0,0,4089,4090,1,0,0,0,4090,4091,1,0,0,0,4091,4092,3,466,233,
        0,4092,465,1,0,0,0,4093,4095,5,453,0,0,4094,4096,5,312,0,0,4095,
        4094,1,0,0,0,4095,4096,1,0,0,0,4096,4102,1,0,0,0,4097,4099,5,321,
        0,0,4098,4097,1,0,0,0,4098,4099,1,0,0,0,4099,4100,1,0,0,0,4100,4102,
        5,657,0,0,4101,4093,1,0,0,0,4101,4098,1,0,0,0,4102,467,1,0,0,0,4103,
        4132,5,659,0,0,4104,4105,7,44,0,0,4105,4107,3,472,236,0,4106,4108,
        7,45,0,0,4107,4106,1,0,0,0,4107,4108,1,0,0,0,4108,4133,1,0,0,0,4109,
        4110,5,195,0,0,4110,4116,3,472,236,0,4111,4114,5,576,0,0,4112,4113,
        5,232,0,0,4113,4115,5,363,0,0,4114,4112,1,0,0,0,4114,4115,1,0,0,
        0,4115,4117,1,0,0,0,4116,4111,1,0,0,0,4116,4117,1,0,0,0,4117,4133,
        1,0,0,0,4118,4119,5,435,0,0,4119,4133,3,472,236,0,4120,4121,5,120,
        0,0,4121,4124,3,472,236,0,4122,4123,5,402,0,0,4123,4125,5,425,0,
        0,4124,4122,1,0,0,0,4124,4125,1,0,0,0,4125,4133,1,0,0,0,4126,4127,
        5,496,0,0,4127,4133,3,472,236,0,4128,4130,5,457,0,0,4129,4131,3,
        470,235,0,4130,4129,1,0,0,0,4130,4131,1,0,0,0,4131,4133,1,0,0,0,
        4132,4104,1,0,0,0,4132,4109,1,0,0,0,4132,4118,1,0,0,0,4132,4120,
        1,0,0,0,4132,4126,1,0,0,0,4132,4128,1,0,0,0,4133,469,1,0,0,0,4134,
        4135,5,136,0,0,4135,4136,5,660,0,0,4136,471,1,0,0,0,4137,4144,3,
        1440,720,0,4138,4139,5,29,0,0,4139,4142,3,1440,720,0,4140,4141,5,
        29,0,0,4141,4143,3,1418,709,0,4142,4140,1,0,0,0,4142,4143,1,0,0,
        0,4143,4145,1,0,0,0,4144,4138,1,0,0,0,4144,4145,1,0,0,0,4145,473,
        1,0,0,0,4146,4147,5,446,0,0,4147,4169,3,476,238,0,4148,4169,3,488,
        244,0,4149,4150,5,485,0,0,4150,4155,3,478,239,0,4151,4152,5,29,0,
        0,4152,4154,3,478,239,0,4153,4151,1,0,0,0,4154,4157,1,0,0,0,4155,
        4153,1,0,0,0,4155,4156,1,0,0,0,4156,4169,1,0,0,0,4157,4155,1,0,0,
        0,4158,4159,5,485,0,0,4159,4161,5,666,0,0,4160,4162,3,1236,618,0,
        4161,4160,1,0,0,0,4161,4162,1,0,0,0,4162,4169,1,0,0,0,4163,4169,
        3,574,287,0,4164,4169,3,576,288,0,4165,4169,3,560,280,0,4166,4169,
        3,484,242,0,4167,4169,3,592,296,0,4168,4146,1,0,0,0,4168,4148,1,
        0,0,0,4168,4149,1,0,0,0,4168,4158,1,0,0,0,4168,4163,1,0,0,0,4168,
        4164,1,0,0,0,4168,4165,1,0,0,0,4168,4166,1,0,0,0,4168,4167,1,0,0,
        0,4169,475,1,0,0,0,4170,4171,7,46,0,0,4171,4176,5,316,0,0,4172,4173,
        5,599,0,0,4173,4177,3,1444,722,0,4174,4175,5,73,0,0,4175,4177,3,
        910,455,0,4176,4172,1,0,0,0,4176,4174,1,0,0,0,4177,477,1,0,0,0,4178,
        4180,3,480,240,0,4179,4181,3,482,241,0,4180,4179,1,0,0,0,4180,4181,
        1,0,0,0,4181,4190,1,0,0,0,4182,4184,3,604,302,0,4183,4185,5,57,0,
        0,4184,4183,1,0,0,0,4184,4185,1,0,0,0,4185,4187,1,0,0,0,4186,4188,
        3,1030,515,0,4187,4186,1,0,0,0,4187,4188,1,0,0,0,4188,4190,1,0,0,
        0,4189,4178,1,0,0,0,4189,4182,1,0,0,0,4190,479,1,0,0,0,4191,4198,
        5,341,0,0,4192,4193,4,240,42,0,4193,4194,5,77,0,0,4194,4195,5,316,
        0,0,4195,4196,5,61,0,0,4196,4198,5,809,0,0,4197,4191,1,0,0,0,4197,
        4192,1,0,0,0,4198,481,1,0,0,0,4199,4200,5,599,0,0,4200,4201,3,1424,
        712,0,4201,483,1,0,0,0,4202,4206,5,311,0,0,4203,4207,5,153,0,0,4204,
        4205,5,583,0,0,4205,4207,3,1382,691,0,4206,4203,1,0,0,0,4206,4204,
        1,0,0,0,4207,4208,1,0,0,0,4208,4209,5,235,0,0,4209,4210,5,341,0,
        0,4210,485,1,0,0,0,4211,4216,5,341,0,0,4212,4213,4,243,43,0,4213,
        4214,5,476,0,0,4214,4216,5,533,0,0,4215,4211,1,0,0,0,4215,4212,1,
        0,0,0,4216,487,1,0,0,0,4217,4218,5,99,0,0,4218,4219,3,486,243,0,
        4219,4220,5,599,0,0,4220,4222,3,490,245,0,4221,4223,3,1030,515,0,
        4222,4221,1,0,0,0,4222,4223,1,0,0,0,4223,489,1,0,0,0,4224,4229,3,
        492,246,0,4225,4226,5,29,0,0,4226,4228,3,492,246,0,4227,4225,1,0,
        0,0,4228,4231,1,0,0,0,4229,4227,1,0,0,0,4229,4230,1,0,0,0,4230,491,
        1,0,0,0,4231,4229,1,0,0,0,4232,4233,3,496,248,0,4233,4234,5,6,0,
        0,4234,4235,3,1446,723,0,4235,4361,1,0,0,0,4236,4237,5,737,0,0,4237,
        4238,5,6,0,0,4238,4361,3,1446,723,0,4239,4240,3,498,249,0,4240,4241,
        5,6,0,0,4241,4242,3,1446,723,0,4242,4361,1,0,0,0,4243,4244,3,500,
        250,0,4244,4245,5,6,0,0,4245,4246,3,1446,723,0,4246,4361,1,0,0,0,
        4247,4248,3,502,251,0,4248,4249,5,6,0,0,4249,4250,3,1446,723,0,4250,
        4361,1,0,0,0,4251,4252,3,504,252,0,4252,4253,5,6,0,0,4253,4254,3,
        1418,709,0,4254,4361,1,0,0,0,4255,4256,3,506,253,0,4256,4257,5,6,
        0,0,4257,4258,3,1418,709,0,4258,4361,1,0,0,0,4259,4260,3,508,254,
        0,4260,4261,5,6,0,0,4261,4262,3,1418,709,0,4262,4361,1,0,0,0,4263,
        4264,3,510,255,0,4264,4265,5,6,0,0,4265,4266,3,1418,709,0,4266,4361,
        1,0,0,0,4267,4268,3,512,256,0,4268,4269,5,6,0,0,4269,4270,3,1418,
        709,0,4270,4361,1,0,0,0,4271,4272,3,514,257,0,4272,4273,5,6,0,0,
        4273,4274,3,1446,723,0,4274,4361,1,0,0,0,4275,4276,3,516,258,0,4276,
        4277,5,6,0,0,4277,4278,3,1446,723,0,4278,4361,1,0,0,0,4279,4280,
        3,528,264,0,4280,4281,5,6,0,0,4281,4282,3,1446,723,0,4282,4361,1,
        0,0,0,4283,4284,3,532,266,0,4284,4285,5,6,0,0,4285,4286,3,1446,723,
        0,4286,4361,1,0,0,0,4287,4288,3,530,265,0,4288,4289,5,6,0,0,4289,
        4290,3,550,275,0,4290,4361,1,0,0,0,4291,4292,3,518,259,0,4292,4293,
        5,6,0,0,4293,4294,3,1446,723,0,4294,4361,1,0,0,0,4295,4296,3,524,
        262,0,4296,4297,5,6,0,0,4297,4298,3,1446,723,0,4298,4361,1,0,0,0,
        4299,4300,3,526,263,0,4300,4301,5,6,0,0,4301,4302,3,1418,709,0,4302,
        4361,1,0,0,0,4303,4304,3,520,260,0,4304,4305,5,6,0,0,4305,4306,3,
        1444,722,0,4306,4361,1,0,0,0,4307,4308,3,522,261,0,4308,4309,5,6,
        0,0,4309,4310,3,1446,723,0,4310,4361,1,0,0,0,4311,4312,3,534,267,
        0,4312,4313,5,6,0,0,4313,4314,3,1446,723,0,4314,4361,1,0,0,0,4315,
        4316,3,536,268,0,4316,4317,5,6,0,0,4317,4318,3,1418,709,0,4318,4361,
        1,0,0,0,4319,4320,3,538,269,0,4320,4321,5,6,0,0,4321,4322,3,1418,
        709,0,4322,4361,1,0,0,0,4323,4324,5,265,0,0,4324,4325,5,6,0,0,4325,
        4361,3,558,279,0,4326,4327,3,540,270,0,4327,4328,5,6,0,0,4328,4329,
        3,1438,719,0,4329,4361,1,0,0,0,4330,4331,3,542,271,0,4331,4332,5,
        6,0,0,4332,4333,3,1418,709,0,4333,4361,1,0,0,0,4334,4335,3,494,247,
        0,4335,4336,5,6,0,0,4336,4337,3,1418,709,0,4337,4361,1,0,0,0,4338,
        4339,5,745,0,0,4339,4340,5,6,0,0,4340,4361,3,544,272,0,4341,4342,
        5,747,0,0,4342,4343,5,6,0,0,4343,4361,3,1418,709,0,4344,4345,5,750,
        0,0,4345,4346,5,6,0,0,4346,4361,3,546,273,0,4347,4348,4,246,44,0,
        4348,4349,5,759,0,0,4349,4350,5,6,0,0,4350,4361,3,1420,710,0,4351,
        4352,4,246,45,0,4352,4353,5,764,0,0,4353,4354,5,6,0,0,4354,4361,
        3,548,274,0,4355,4356,4,246,46,0,4356,4357,5,802,0,0,4357,4358,5,
        6,0,0,4358,4361,3,1420,710,0,4359,4361,3,552,276,0,4360,4232,1,0,
        0,0,4360,4236,1,0,0,0,4360,4239,1,0,0,0,4360,4243,1,0,0,0,4360,4247,
        1,0,0,0,4360,4251,1,0,0,0,4360,4255,1,0,0,0,4360,4259,1,0,0,0,4360,
        4263,1,0,0,0,4360,4267,1,0,0,0,4360,4271,1,0,0,0,4360,4275,1,0,0,
        0,4360,4279,1,0,0,0,4360,4283,1,0,0,0,4360,4287,1,0,0,0,4360,4291,
        1,0,0,0,4360,4295,1,0,0,0,4360,4299,1,0,0,0,4360,4303,1,0,0,0,4360,
        4307,1,0,0,0,4360,4311,1,0,0,0,4360,4315,1,0,0,0,4360,4319,1,0,0,
        0,4360,4323,1,0,0,0,4360,4326,1,0,0,0,4360,4330,1,0,0,0,4360,4334,
        1,0,0,0,4360,4338,1,0,0,0,4360,4341,1,0,0,0,4360,4344,1,0,0,0,4360,
        4347,1,0,0,0,4360,4351,1,0,0,0,4360,4355,1,0,0,0,4360,4359,1,0,0,
        0,4361,493,1,0,0,0,4362,4363,7,47,0,0,4363,495,1,0,0,0,4364,4365,
        7,48,0,0,4365,497,1,0,0,0,4366,4367,7,49,0,0,4367,499,1,0,0,0,4368,
        4369,7,50,0,0,4369,501,1,0,0,0,4370,4371,7,51,0,0,4371,503,1,0,0,
        0,4372,4373,7,52,0,0,4373,505,1,0,0,0,4374,4375,7,53,0,0,4375,507,
        1,0,0,0,4376,4377,7,54,0,0,4377,509,1,0,0,0,4378,4379,7,55,0,0,4379,
        511,1,0,0,0,4380,4381,7,56,0,0,4381,513,1,0,0,0,4382,4383,7,57,0,
        0,4383,515,1,0,0,0,4384,4385,7,58,0,0,4385,517,1,0,0,0,4386,4387,
        7,59,0,0,4387,519,1,0,0,0,4388,4389,7,60,0,0,4389,521,1,0,0,0,4390,
        4391,7,61,0,0,4391,523,1,0,0,0,4392,4393,7,62,0,0,4393,525,1,0,0,
        0,4394,4395,7,63,0,0,4395,527,1,0,0,0,4396,4397,7,64,0,0,4397,529,
        1,0,0,0,4398,4399,7,65,0,0,4399,531,1,0,0,0,4400,4401,7,66,0,0,4401,
        533,1,0,0,0,4402,4403,7,67,0,0,4403,535,1,0,0,0,4404,4405,7,68,0,
        0,4405,537,1,0,0,0,4406,4407,7,69,0,0,4407,539,1,0,0,0,4408,4409,
        7,70,0,0,4409,541,1,0,0,0,4410,4411,7,71,0,0,4411,543,1,0,0,0,4412,
        4415,3,1304,652,0,4413,4415,5,395,0,0,4414,4412,1,0,0,0,4414,4413,
        1,0,0,0,4415,545,1,0,0,0,4416,4417,7,72,0,0,4417,547,1,0,0,0,4418,
        4422,5,752,0,0,4419,4422,5,312,0,0,4420,4422,3,1438,719,0,4421,4418,
        1,0,0,0,4421,4419,1,0,0,0,4421,4420,1,0,0,0,4422,549,1,0,0,0,4423,
        4426,3,1446,723,0,4424,4426,5,395,0,0,4425,4423,1,0,0,0,4425,4424,
        1,0,0,0,4426,551,1,0,0,0,4427,4428,3,554,277,0,4428,4429,5,6,0,0,
        4429,4430,3,1446,723,0,4430,4442,1,0,0,0,4431,4432,3,556,278,0,4432,
        4433,5,6,0,0,4433,4434,3,1422,711,0,4434,4442,1,0,0,0,4435,4436,
        5,464,0,0,4436,4437,5,6,0,0,4437,4442,3,1446,723,0,4438,4439,5,465,
        0,0,4439,4440,5,6,0,0,4440,4442,3,1418,709,0,4441,4427,1,0,0,0,4441,
        4431,1,0,0,0,4441,4435,1,0,0,0,4441,4438,1,0,0,0,4442,553,1,0,0,
        0,4443,4444,7,73,0,0,4444,555,1,0,0,0,4445,4446,7,74,0,0,4446,557,
        1,0,0,0,4447,4456,5,32,0,0,4448,4453,3,1418,709,0,4449,4450,5,29,
        0,0,4450,4452,3,1418,709,0,4451,4449,1,0,0,0,4452,4455,1,0,0,0,4453,
        4451,1,0,0,0,4453,4454,1,0,0,0,4454,4457,1,0,0,0,4455,4453,1,0,0,
        0,4456,4448,1,0,0,0,4456,4457,1,0,0,0,4457,4458,1,0,0,0,4458,4459,
        5,33,0,0,4459,559,1,0,0,0,4460,4461,5,99,0,0,4461,4462,5,476,0,0,
        4462,4463,5,224,0,0,4463,4468,3,562,281,0,4464,4465,5,29,0,0,4465,
        4467,3,562,281,0,4466,4464,1,0,0,0,4467,4470,1,0,0,0,4468,4466,1,
        0,0,0,4468,4469,1,0,0,0,4469,4472,1,0,0,0,4470,4468,1,0,0,0,4471,
        4473,3,1030,515,0,4472,4471,1,0,0,0,4472,4473,1,0,0,0,4473,561,1,
        0,0,0,4474,4475,5,477,0,0,4475,4476,5,6,0,0,4476,4478,5,32,0,0,4477,
        4479,3,564,282,0,4478,4477,1,0,0,0,4478,4479,1,0,0,0,4479,4480,1,
        0,0,0,4480,4524,5,33,0,0,4481,4482,5,478,0,0,4482,4483,5,6,0,0,4483,
        4485,5,32,0,0,4484,4486,3,564,282,0,4485,4484,1,0,0,0,4485,4486,
        1,0,0,0,4486,4487,1,0,0,0,4487,4524,5,33,0,0,4488,4489,5,479,0,0,
        4489,4490,5,6,0,0,4490,4492,5,32,0,0,4491,4493,3,566,283,0,4492,
        4491,1,0,0,0,4492,4493,1,0,0,0,4493,4494,1,0,0,0,4494,4524,5,33,
        0,0,4495,4496,5,480,0,0,4496,4497,5,6,0,0,4497,4499,5,32,0,0,4498,
        4500,3,566,283,0,4499,4498,1,0,0,0,4499,4500,1,0,0,0,4500,4501,1,
        0,0,0,4501,4524,5,33,0,0,4502,4503,5,481,0,0,4503,4504,5,6,0,0,4504,
        4506,5,32,0,0,4505,4507,3,568,284,0,4506,4505,1,0,0,0,4506,4507,
        1,0,0,0,4507,4508,1,0,0,0,4508,4524,5,33,0,0,4509,4510,5,482,0,0,
        4510,4511,5,6,0,0,4511,4513,5,32,0,0,4512,4514,3,568,284,0,4513,
        4512,1,0,0,0,4513,4514,1,0,0,0,4514,4515,1,0,0,0,4515,4524,5,33,
        0,0,4516,4517,5,483,0,0,4517,4518,5,6,0,0,4518,4520,5,32,0,0,4519,
        4521,3,572,286,0,4520,4519,1,0,0,0,4520,4521,1,0,0,0,4521,4522,1,
        0,0,0,4522,4524,5,33,0,0,4523,4474,1,0,0,0,4523,4481,1,0,0,0,4523,
        4488,1,0,0,0,4523,4495,1,0,0,0,4523,4502,1,0,0,0,4523,4509,1,0,0,
        0,4523,4516,1,0,0,0,4524,563,1,0,0,0,4525,4530,3,1338,669,0,4526,
        4527,5,29,0,0,4527,4529,3,1338,669,0,4528,4526,1,0,0,0,4529,4532,
        1,0,0,0,4530,4528,1,0,0,0,4530,4531,1,0,0,0,4531,565,1,0,0,0,4532,
        4530,1,0,0,0,4533,4538,3,1378,689,0,4534,4535,5,29,0,0,4535,4537,
        3,1378,689,0,4536,4534,1,0,0,0,4537,4540,1,0,0,0,4538,4536,1,0,0,
        0,4538,4539,1,0,0,0,4539,567,1,0,0,0,4540,4538,1,0,0,0,4541,4546,
        3,570,285,0,4542,4543,5,29,0,0,4543,4545,3,570,285,0,4544,4542,1,
        0,0,0,4545,4548,1,0,0,0,4546,4544,1,0,0,0,4546,4547,1,0,0,0,4547,
        569,1,0,0,0,4548,4546,1,0,0,0,4549,4550,3,1446,723,0,4550,571,1,
        0,0,0,4551,4556,3,1252,626,0,4552,4553,5,29,0,0,4553,4555,3,1252,
        626,0,4554,4552,1,0,0,0,4555,4558,1,0,0,0,4556,4554,1,0,0,0,4556,
        4557,1,0,0,0,4557,573,1,0,0,0,4558,4556,1,0,0,0,4559,4560,5,553,
        0,0,4560,4562,3,604,302,0,4561,4563,3,588,294,0,4562,4561,1,0,0,
        0,4562,4563,1,0,0,0,4563,4566,1,0,0,0,4564,4565,5,622,0,0,4565,4567,
        3,578,289,0,4566,4564,1,0,0,0,4566,4567,1,0,0,0,4567,4569,1,0,0,
        0,4568,4570,3,580,290,0,4569,4568,1,0,0,0,4569,4570,1,0,0,0,4570,
        4572,1,0,0,0,4571,4573,3,582,291,0,4572,4571,1,0,0,0,4572,4573,1,
        0,0,0,4573,4575,1,0,0,0,4574,4576,3,584,292,0,4575,4574,1,0,0,0,
        4575,4576,1,0,0,0,4576,4578,1,0,0,0,4577,4579,3,586,293,0,4578,4577,
        1,0,0,0,4578,4579,1,0,0,0,4579,4581,1,0,0,0,4580,4582,3,1030,515,
        0,4581,4580,1,0,0,0,4581,4582,1,0,0,0,4582,575,1,0,0,0,4583,4584,
        5,562,0,0,4584,4586,3,604,302,0,4585,4587,3,588,294,0,4586,4585,
        1,0,0,0,4586,4587,1,0,0,0,4587,4589,1,0,0,0,4588,4590,3,1030,515,
        0,4589,4588,1,0,0,0,4589,4590,1,0,0,0,4590,577,1,0,0,0,4591,4597,
        3,552,276,0,4592,4593,7,75,0,0,4593,4594,5,6,0,0,4594,4597,3,1440,
        720,0,4595,4597,5,540,0,0,4596,4591,1,0,0,0,4596,4592,1,0,0,0,4596,
        4595,1,0,0,0,4597,4602,1,0,0,0,4598,4599,5,29,0,0,4599,4601,3,552,
        276,0,4600,4598,1,0,0,0,4601,4604,1,0,0,0,4602,4600,1,0,0,0,4602,
        4603,1,0,0,0,4603,579,1,0,0,0,4604,4602,1,0,0,0,4605,4606,5,627,
        0,0,4606,4607,5,6,0,0,4607,4608,3,1440,720,0,4608,581,1,0,0,0,4609,
        4610,5,424,0,0,4610,4611,5,6,0,0,4611,4612,3,1440,720,0,4612,583,
        1,0,0,0,4613,4614,5,167,0,0,4614,4615,5,6,0,0,4615,4616,3,1440,720,
        0,4616,585,1,0,0,0,4617,4618,5,427,0,0,4618,4619,5,6,0,0,4619,4620,
        3,1440,720,0,4620,587,1,0,0,0,4621,4626,3,590,295,0,4622,4623,5,
        29,0,0,4623,4625,3,590,295,0,4624,4622,1,0,0,0,4625,4628,1,0,0,0,
        4626,4624,1,0,0,0,4626,4627,1,0,0,0,4627,589,1,0,0,0,4628,4626,1,
        0,0,0,4629,4630,7,76,0,0,4630,591,1,0,0,0,4631,4633,5,553,0,0,4632,
        4634,3,594,297,0,4633,4632,1,0,0,0,4633,4634,1,0,0,0,4634,4637,1,
        0,0,0,4635,4637,5,562,0,0,4636,4631,1,0,0,0,4636,4635,1,0,0,0,4637,
        4638,1,0,0,0,4638,4639,5,242,0,0,4639,593,1,0,0,0,4640,4645,3,596,
        298,0,4641,4642,5,29,0,0,4642,4644,3,596,298,0,4643,4641,1,0,0,0,
        4644,4647,1,0,0,0,4645,4643,1,0,0,0,4645,4646,1,0,0,0,4646,595,1,
        0,0,0,4647,4645,1,0,0,0,4648,4652,3,598,299,0,4649,4652,3,600,300,
        0,4650,4652,3,602,301,0,4651,4648,1,0,0,0,4651,4649,1,0,0,0,4651,
        4650,1,0,0,0,4652,597,1,0,0,0,4653,4654,5,627,0,0,4654,4655,5,6,
        0,0,4655,4656,3,1446,723,0,4656,599,1,0,0,0,4657,4658,5,424,0,0,
        4658,4659,5,6,0,0,4659,4660,3,1446,723,0,4660,601,1,0,0,0,4661,4662,
        5,167,0,0,4662,4663,5,6,0,0,4663,4664,3,1446,723,0,4664,603,1,0,
        0,0,4665,4666,7,77,0,0,4666,605,1,0,0,0,4667,4668,5,435,0,0,4668,
        4669,3,1406,703,0,4669,4672,5,235,0,0,4670,4673,3,1444,722,0,4671,
        4673,3,986,493,0,4672,4670,1,0,0,0,4672,4671,1,0,0,0,4673,4679,1,
        0,0,0,4674,4679,3,608,304,0,4675,4676,7,78,0,0,4676,4677,5,435,0,
        0,4677,4679,3,1406,703,0,4678,4667,1,0,0,0,4678,4674,1,0,0,0,4678,
        4675,1,0,0,0,4679,607,1,0,0,0,4680,4681,5,208,0,0,4681,4684,3,1406,
        703,0,4682,4683,5,630,0,0,4683,4685,3,610,305,0,4684,4682,1,0,0,
        0,4684,4685,1,0,0,0,4685,609,1,0,0,0,4686,4691,3,986,493,0,4687,
        4688,5,29,0,0,4688,4690,3,986,493,0,4689,4687,1,0,0,0,4690,4693,
        1,0,0,0,4691,4689,1,0,0,0,4691,4692,1,0,0,0,4692,611,1,0,0,0,4693,
        4691,1,0,0,0,4694,4719,5,685,0,0,4695,4696,5,312,0,0,4696,4697,5,
        153,0,0,4697,4699,5,176,0,0,4698,4700,3,1476,738,0,4699,4698,1,0,
        0,0,4699,4700,1,0,0,0,4700,4701,1,0,0,0,4701,4720,3,1438,719,0,4702,
        4705,5,684,0,0,4703,4704,5,232,0,0,4704,4706,5,476,0,0,4705,4703,
        1,0,0,0,4705,4706,1,0,0,0,4706,4720,1,0,0,0,4707,4708,4,306,47,0,
        4708,4709,5,276,0,0,4709,4710,5,235,0,0,4710,4711,3,1306,653,0,4711,
        4712,5,31,0,0,4712,4713,3,1418,709,0,4713,4714,5,262,0,0,4714,4715,
        5,89,0,0,4715,4717,3,1438,719,0,4716,4718,3,614,307,0,4717,4716,
        1,0,0,0,4717,4718,1,0,0,0,4718,4720,1,0,0,0,4719,4695,1,0,0,0,4719,
        4702,1,0,0,0,4719,4707,1,0,0,0,4720,613,1,0,0,0,4721,4732,3,616,
        308,0,4722,4723,5,153,0,0,4723,4725,5,176,0,0,4724,4726,3,1476,738,
        0,4725,4724,1,0,0,0,4725,4726,1,0,0,0,4726,4727,1,0,0,0,4727,4729,
        3,1438,719,0,4728,4730,3,616,308,0,4729,4728,1,0,0,0,4729,4730,1,
        0,0,0,4730,4732,1,0,0,0,4731,4721,1,0,0,0,4731,4722,1,0,0,0,4732,
        615,1,0,0,0,4733,4735,5,484,0,0,4734,4736,5,392,0,0,4735,4734,1,
        0,0,0,4735,4736,1,0,0,0,4736,4737,1,0,0,0,4737,4738,5,549,0,0,4738,
        617,1,0,0,0,4739,4747,3,620,310,0,4740,4747,3,630,315,0,4741,4747,
        3,646,323,0,4742,4747,3,648,324,0,4743,4747,3,662,331,0,4744,4747,
        3,664,332,0,4745,4747,3,680,340,0,4746,4739,1,0,0,0,4746,4740,1,
        0,0,0,4746,4741,1,0,0,0,4746,4742,1,0,0,0,4746,4743,1,0,0,0,4746,
        4744,1,0,0,0,4746,4745,1,0,0,0,4747,619,1,0,0,0,4748,4749,5,58,0,
        0,4749,4751,5,627,0,0,4750,4752,3,1234,617,0,4751,4750,1,0,0,0,4751,
        4752,1,0,0,0,4752,4793,1,0,0,0,4753,4754,4,310,48,0,4754,4758,3,
        1272,636,0,4755,4756,4,310,49,0,4756,4758,3,622,311,0,4757,4753,
        1,0,0,0,4757,4755,1,0,0,0,4758,4759,1,0,0,0,4759,4760,3,632,316,
        0,4760,4794,1,0,0,0,4761,4778,3,628,314,0,4762,4765,3,1282,641,0,
        4763,4765,3,1280,640,0,4764,4762,1,0,0,0,4764,4763,1,0,0,0,4765,
        4767,1,0,0,0,4766,4768,3,1302,651,0,4767,4766,1,0,0,0,4767,4768,
        1,0,0,0,4768,4770,1,0,0,0,4769,4771,3,1294,647,0,4770,4769,1,0,0,
        0,4770,4771,1,0,0,0,4771,4779,1,0,0,0,4772,4773,5,178,0,0,4773,4774,
        5,736,0,0,4774,4779,5,424,0,0,4775,4777,3,1298,649,0,4776,4775,1,
        0,0,0,4776,4777,1,0,0,0,4777,4779,1,0,0,0,4778,4764,1,0,0,0,4778,
        4772,1,0,0,0,4778,4776,1,0,0,0,4779,4794,1,0,0,0,4780,4791,3,1306,
        653,0,4781,4782,5,166,0,0,4782,4786,5,667,0,0,4783,4787,5,57,0,0,
        4784,4787,5,389,0,0,4785,4787,3,682,341,0,4786,4783,1,0,0,0,4786,
        4784,1,0,0,0,4786,4785,1,0,0,0,4787,4792,1,0,0,0,4788,4790,3,1298,
        649,0,4789,4788,1,0,0,0,4789,4790,1,0,0,0,4790,4792,1,0,0,0,4791,
        4781,1,0,0,0,4791,4789,1,0,0,0,4792,4794,1,0,0,0,4793,4757,1,0,0,
        0,4793,4761,1,0,0,0,4793,4780,1,0,0,0,4794,621,1,0,0,0,4795,4800,
        3,624,312,0,4796,4797,5,29,0,0,4797,4799,3,624,312,0,4798,4796,1,
        0,0,0,4799,4802,1,0,0,0,4800,4798,1,0,0,0,4800,4801,1,0,0,0,4801,
        623,1,0,0,0,4802,4800,1,0,0,0,4803,4804,4,312,50,0,4804,4879,3,626,
        313,0,4805,4806,4,312,51,0,4806,4876,3,1306,653,0,4807,4816,3,1280,
        640,0,4808,4809,5,475,0,0,4809,4811,3,1438,719,0,4810,4812,3,1294,
        647,0,4811,4810,1,0,0,0,4811,4812,1,0,0,0,4812,4817,1,0,0,0,4813,
        4815,3,1294,647,0,4814,4813,1,0,0,0,4814,4815,1,0,0,0,4815,4817,
        1,0,0,0,4816,4808,1,0,0,0,4816,4814,1,0,0,0,4817,4877,1,0,0,0,4818,
        4827,3,1282,641,0,4819,4821,3,1294,647,0,4820,4819,1,0,0,0,4820,
        4821,1,0,0,0,4821,4828,1,0,0,0,4822,4823,5,475,0,0,4823,4825,3,1438,
        719,0,4824,4826,3,1294,647,0,4825,4824,1,0,0,0,4825,4826,1,0,0,0,
        4826,4828,1,0,0,0,4827,4820,1,0,0,0,4827,4822,1,0,0,0,4828,4877,
        1,0,0,0,4829,4877,3,1284,642,0,4830,4832,3,1286,643,0,4831,4833,
        3,1294,647,0,4832,4831,1,0,0,0,4832,4833,1,0,0,0,4833,4877,1,0,0,
        0,4834,4843,3,1288,644,0,4835,4836,5,475,0,0,4836,4838,3,1438,719,
        0,4837,4839,3,1294,647,0,4838,4837,1,0,0,0,4838,4839,1,0,0,0,4839,
        4844,1,0,0,0,4840,4842,3,1294,647,0,4841,4840,1,0,0,0,4841,4842,
        1,0,0,0,4842,4844,1,0,0,0,4843,4835,1,0,0,0,4843,4841,1,0,0,0,4844,
        4877,1,0,0,0,4845,4847,3,1290,645,0,4846,4848,3,1294,647,0,4847,
        4846,1,0,0,0,4847,4848,1,0,0,0,4848,4877,1,0,0,0,4849,4851,3,1296,
        648,0,4850,4849,1,0,0,0,4850,4851,1,0,0,0,4851,4877,1,0,0,0,4852,
        4853,5,51,0,0,4853,4854,3,1300,650,0,4854,4859,3,1278,639,0,4855,
        4856,5,51,0,0,4856,4857,3,1300,650,0,4857,4858,3,1278,639,0,4858,
        4860,1,0,0,0,4859,4855,1,0,0,0,4859,4860,1,0,0,0,4860,4877,1,0,0,
        0,4861,4862,5,371,0,0,4862,4863,3,1300,650,0,4863,4868,3,1278,639,
        0,4864,4865,5,371,0,0,4865,4866,3,1300,650,0,4866,4867,3,1278,639,
        0,4867,4869,1,0,0,0,4868,4864,1,0,0,0,4868,4869,1,0,0,0,4869,4877,
        1,0,0,0,4870,4871,5,184,0,0,4871,4874,3,1300,650,0,4872,4873,5,184,
        0,0,4873,4875,3,1300,650,0,4874,4872,1,0,0,0,4874,4875,1,0,0,0,4875,
        4877,1,0,0,0,4876,4807,1,0,0,0,4876,4818,1,0,0,0,4876,4829,1,0,0,
        0,4876,4830,1,0,0,0,4876,4834,1,0,0,0,4876,4845,1,0,0,0,4876,4850,
        1,0,0,0,4876,4852,1,0,0,0,4876,4861,1,0,0,0,4876,4870,1,0,0,0,4877,
        4879,1,0,0,0,4878,4803,1,0,0,0,4878,4805,1,0,0,0,4879,625,1,0,0,
        0,4880,4881,3,1306,653,0,4881,4882,5,262,0,0,4882,4902,5,89,0,0,
        4883,4884,3,1440,720,0,4884,4885,5,475,0,0,4885,4887,3,1440,720,
        0,4886,4888,3,1294,647,0,4887,4886,1,0,0,0,4887,4888,1,0,0,0,4888,
        4903,1,0,0,0,4889,4891,3,1440,720,0,4890,4892,3,1294,647,0,4891,
        4890,1,0,0,0,4891,4892,1,0,0,0,4892,4903,1,0,0,0,4893,4894,5,742,
        0,0,4894,4897,5,424,0,0,4895,4896,5,475,0,0,4896,4898,3,1440,720,
        0,4897,4895,1,0,0,0,4897,4898,1,0,0,0,4898,4900,1,0,0,0,4899,4901,
        3,1294,647,0,4900,4899,1,0,0,0,4900,4901,1,0,0,0,4901,4903,1,0,0,
        0,4902,4883,1,0,0,0,4902,4889,1,0,0,0,4902,4893,1,0,0,0,4903,4938,
        1,0,0,0,4904,4905,3,1306,653,0,4905,4906,5,262,0,0,4906,4907,5,653,
        0,0,4907,4931,3,1466,733,0,4908,4909,5,89,0,0,4909,4910,3,1440,720,
        0,4910,4911,5,475,0,0,4911,4913,3,1440,720,0,4912,4914,3,1294,647,
        0,4913,4912,1,0,0,0,4913,4914,1,0,0,0,4914,4932,1,0,0,0,4915,4916,
        5,63,0,0,4916,4918,3,1442,721,0,4917,4919,3,1294,647,0,4918,4917,
        1,0,0,0,4918,4919,1,0,0,0,4919,4932,1,0,0,0,4920,4921,5,89,0,0,4921,
        4923,3,1440,720,0,4922,4924,3,1294,647,0,4923,4922,1,0,0,0,4923,
        4924,1,0,0,0,4924,4932,1,0,0,0,4925,4926,5,89,0,0,4926,4927,5,742,
        0,0,4927,4929,5,424,0,0,4928,4930,3,1294,647,0,4929,4928,1,0,0,0,
        4929,4930,1,0,0,0,4930,4932,1,0,0,0,4931,4908,1,0,0,0,4931,4915,
        1,0,0,0,4931,4920,1,0,0,0,4931,4925,1,0,0,0,4931,4932,1,0,0,0,4932,
        4938,1,0,0,0,4933,4935,3,1306,653,0,4934,4936,3,1296,648,0,4935,
        4934,1,0,0,0,4935,4936,1,0,0,0,4936,4938,1,0,0,0,4937,4880,1,0,0,
        0,4937,4904,1,0,0,0,4937,4933,1,0,0,0,4938,627,1,0,0,0,4939,4940,
        5,627,0,0,4940,4941,3,1474,737,0,4941,629,1,0,0,0,4942,4943,5,139,
        0,0,4943,4945,5,627,0,0,4944,4946,3,1240,620,0,4945,4944,1,0,0,0,
        4945,4946,1,0,0,0,4946,4947,1,0,0,0,4947,4949,3,1272,636,0,4948,
        4950,3,636,318,0,4949,4948,1,0,0,0,4949,4950,1,0,0,0,4950,4951,1,
        0,0,0,4951,4952,3,632,316,0,4952,631,1,0,0,0,4953,4955,3,638,319,
        0,4954,4953,1,0,0,0,4954,4955,1,0,0,0,4955,4957,1,0,0,0,4956,4958,
        3,640,320,0,4957,4956,1,0,0,0,4957,4958,1,0,0,0,4958,4962,1,0,0,
        0,4959,4961,3,642,321,0,4960,4959,1,0,0,0,4961,4964,1,0,0,0,4962,
        4960,1,0,0,0,4962,4963,1,0,0,0,4963,4967,1,0,0,0,4964,4962,1,0,0,
        0,4965,4966,4,316,52,0,4966,4968,3,634,317,0,4967,4965,1,0,0,0,4967,
        4968,1,0,0,0,4968,633,1,0,0,0,4969,4970,5,756,0,0,4970,4974,3,1438,
        719,0,4971,4972,5,118,0,0,4972,4974,3,1438,719,0,4973,4969,1,0,0,
        0,4973,4971,1,0,0,0,4974,635,1,0,0,0,4975,4976,5,166,0,0,4976,4977,
        5,667,0,0,4977,4978,3,682,341,0,4978,637,1,0,0,0,4979,4982,5,484,
        0,0,4980,4983,3,674,337,0,4981,4983,7,79,0,0,4982,4980,1,0,0,0,4982,
        4981,1,0,0,0,4983,639,1,0,0,0,4984,4993,5,653,0,0,4985,4986,5,347,
        0,0,4986,4994,3,1418,709,0,4987,4988,5,351,0,0,4988,4994,3,1418,
        709,0,4989,4990,5,346,0,0,4990,4994,3,1418,709,0,4991,4992,5,352,
        0,0,4992,4994,3,1418,709,0,4993,4985,1,0,0,0,4993,4987,1,0,0,0,4993,
        4989,1,0,0,0,4993,4991,1,0,0,0,4994,4995,1,0,0,0,4995,4993,1,0,0,
        0,4995,4996,1,0,0,0,4996,641,1,0,0,0,4997,4998,5,49,0,0,4998,5038,
        7,80,0,0,4999,5028,5,424,0,0,5000,5007,5,212,0,0,5001,5002,5,278,
        0,0,5002,5003,3,1420,710,0,5003,5004,5,162,0,0,5004,5008,1,0,0,0,
        5005,5008,5,385,0,0,5006,5008,5,166,0,0,5007,5001,1,0,0,0,5007,5005,
        1,0,0,0,5007,5006,1,0,0,0,5007,5008,1,0,0,0,5008,5029,1,0,0,0,5009,
        5012,5,713,0,0,5010,5013,3,1420,710,0,5011,5013,5,166,0,0,5012,5010,
        1,0,0,0,5012,5011,1,0,0,0,5013,5029,1,0,0,0,5014,5015,5,714,0,0,
        5015,5020,5,278,0,0,5016,5017,3,1420,710,0,5017,5018,5,162,0,0,5018,
        5021,1,0,0,0,5019,5021,5,166,0,0,5020,5016,1,0,0,0,5020,5019,1,0,
        0,0,5021,5029,1,0,0,0,5022,5023,4,321,53,0,5023,5024,5,484,0,0,5024,
        5026,5,143,0,0,5025,5027,7,81,0,0,5026,5025,1,0,0,0,5026,5027,1,
        0,0,0,5027,5029,1,0,0,0,5028,5000,1,0,0,0,5028,5009,1,0,0,0,5028,
        5014,1,0,0,0,5028,5022,1,0,0,0,5029,5038,1,0,0,0,5030,5031,5,749,
        0,0,5031,5038,3,1420,710,0,5032,5035,5,748,0,0,5033,5036,3,1420,
        710,0,5034,5036,5,706,0,0,5035,5033,1,0,0,0,5035,5034,1,0,0,0,5036,
        5038,1,0,0,0,5037,4997,1,0,0,0,5037,4999,1,0,0,0,5037,5030,1,0,0,
        0,5037,5032,1,0,0,0,5038,643,1,0,0,0,5039,5045,1,0,0,0,5040,5041,
        5,756,0,0,5041,5045,3,1438,719,0,5042,5043,5,118,0,0,5043,5045,3,
        1438,719,0,5044,5039,1,0,0,0,5044,5040,1,0,0,0,5044,5042,1,0,0,0,
        5045,645,1,0,0,0,5046,5047,5,184,0,0,5047,5049,5,627,0,0,5048,5050,
        3,1234,617,0,5049,5048,1,0,0,0,5049,5050,1,0,0,0,5050,5051,1,0,0,
        0,5051,5052,3,1270,635,0,5052,647,1,0,0,0,5053,5095,5,247,0,0,5054,
        5055,3,668,334,0,5055,5056,5,599,0,0,5056,5060,3,1270,635,0,5057,
        5058,5,653,0,0,5058,5059,5,668,0,0,5059,5061,5,409,0,0,5060,5057,
        1,0,0,0,5060,5061,1,0,0,0,5061,5096,1,0,0,0,5062,5068,3,668,334,
        0,5063,5065,5,57,0,0,5064,5066,5,439,0,0,5065,5064,1,0,0,0,5065,
        5066,1,0,0,0,5066,5068,1,0,0,0,5067,5062,1,0,0,0,5067,5063,1,0,0,
        0,5068,5069,1,0,0,0,5069,5071,5,401,0,0,5070,5072,3,666,333,0,5071,
        5070,1,0,0,0,5071,5072,1,0,0,0,5072,5073,1,0,0,0,5073,5074,3,672,
        336,0,5074,5075,5,599,0,0,5075,5077,3,650,325,0,5076,5078,3,660,
        330,0,5077,5076,1,0,0,0,5077,5078,1,0,0,0,5078,5080,1,0,0,0,5079,
        5081,3,652,326,0,5080,5079,1,0,0,0,5080,5081,1,0,0,0,5081,5083,1,
        0,0,0,5082,5084,3,658,329,0,5083,5082,1,0,0,0,5083,5084,1,0,0,0,
        5084,5096,1,0,0,0,5085,5086,5,445,0,0,5086,5087,5,401,0,0,5087,5088,
        3,1306,653,0,5088,5089,5,599,0,0,5089,5093,3,650,325,0,5090,5091,
        5,653,0,0,5091,5092,5,247,0,0,5092,5094,5,409,0,0,5093,5090,1,0,
        0,0,5093,5094,1,0,0,0,5094,5096,1,0,0,0,5095,5054,1,0,0,0,5095,5067,
        1,0,0,0,5095,5085,1,0,0,0,5096,649,1,0,0,0,5097,5098,4,325,54,0,
        5098,5102,3,1272,636,0,5099,5100,4,325,55,0,5100,5102,3,1270,635,
        0,5101,5097,1,0,0,0,5101,5099,1,0,0,0,5102,651,1,0,0,0,5103,5104,
        5,653,0,0,5104,5105,3,678,339,0,5105,653,1,0,0,0,5106,5107,5,671,
        0,0,5107,5108,3,682,341,0,5108,655,1,0,0,0,5109,5110,5,653,0,0,5110,
        5118,5,667,0,0,5111,5119,3,682,341,0,5112,5114,5,57,0,0,5113,5115,
        3,654,327,0,5114,5113,1,0,0,0,5114,5115,1,0,0,0,5115,5119,1,0,0,
        0,5116,5119,5,389,0,0,5117,5119,5,166,0,0,5118,5111,1,0,0,0,5118,
        5112,1,0,0,0,5118,5116,1,0,0,0,5118,5117,1,0,0,0,5119,657,1,0,0,
        0,5120,5121,5,63,0,0,5121,5123,5,627,0,0,5122,5124,3,656,328,0,5123,
        5122,1,0,0,0,5123,5124,1,0,0,0,5124,659,1,0,0,0,5125,5126,4,330,
        56,0,5126,5127,3,638,319,0,5127,661,1,0,0,0,5128,5129,5,470,0,0,
        5129,5130,5,627,0,0,5130,5131,3,1306,653,0,5131,5132,5,599,0,0,5132,
        5140,3,1306,653,0,5133,5134,5,29,0,0,5134,5135,3,1306,653,0,5135,
        5136,5,599,0,0,5136,5137,3,1306,653,0,5137,5139,1,0,0,0,5138,5133,
        1,0,0,0,5139,5142,1,0,0,0,5140,5138,1,0,0,0,5140,5141,1,0,0,0,5141,
        663,1,0,0,0,5142,5140,1,0,0,0,5143,5146,5,494,0,0,5144,5145,4,332,
        57,0,5145,5147,3,1234,617,0,5146,5144,1,0,0,0,5146,5147,1,0,0,0,
        5147,5183,1,0,0,0,5148,5149,3,668,334,0,5149,5150,5,235,0,0,5150,
        5151,3,1270,635,0,5151,5184,1,0,0,0,5152,5153,3,668,334,0,5153,5155,
        5,401,0,0,5154,5156,3,666,333,0,5155,5154,1,0,0,0,5155,5156,1,0,
        0,0,5156,5157,1,0,0,0,5157,5158,3,672,336,0,5158,5159,5,235,0,0,
        5159,5160,3,1270,635,0,5160,5184,1,0,0,0,5161,5163,5,57,0,0,5162,
        5164,5,439,0,0,5163,5162,1,0,0,0,5163,5164,1,0,0,0,5164,5173,1,0,
        0,0,5165,5167,5,401,0,0,5166,5168,3,666,333,0,5167,5166,1,0,0,0,
        5167,5168,1,0,0,0,5168,5169,1,0,0,0,5169,5174,3,672,336,0,5170,5171,
        5,29,0,0,5171,5172,5,247,0,0,5172,5174,5,409,0,0,5173,5165,1,0,0,
        0,5173,5170,1,0,0,0,5174,5175,1,0,0,0,5175,5176,5,235,0,0,5176,5184,
        3,1270,635,0,5177,5178,5,445,0,0,5178,5179,5,401,0,0,5179,5180,3,
        1306,653,0,5180,5181,5,235,0,0,5181,5182,3,1270,635,0,5182,5184,
        1,0,0,0,5183,5148,1,0,0,0,5183,5152,1,0,0,0,5183,5161,1,0,0,0,5183,
        5177,1,0,0,0,5184,5187,1,0,0,0,5185,5186,4,332,58,0,5186,5188,3,
        1242,621,0,5187,5185,1,0,0,0,5187,5188,1,0,0,0,5188,665,1,0,0,0,
        5189,5190,7,82,0,0,5190,667,1,0,0,0,5191,5196,3,670,335,0,5192,5193,
        5,29,0,0,5193,5195,3,670,335,0,5194,5192,1,0,0,0,5195,5198,1,0,0,
        0,5196,5194,1,0,0,0,5196,5197,1,0,0,0,5197,669,1,0,0,0,5198,5196,
        1,0,0,0,5199,5201,3,1470,735,0,5200,5202,3,1324,662,0,5201,5200,
        1,0,0,0,5201,5202,1,0,0,0,5202,5210,1,0,0,0,5203,5207,3,1470,735,
        0,5204,5208,5,40,0,0,5205,5206,5,39,0,0,5206,5208,3,1466,733,0,5207,
        5204,1,0,0,0,5207,5205,1,0,0,0,5208,5210,1,0,0,0,5209,5199,1,0,0,
        0,5209,5203,1,0,0,0,5210,5242,1,0,0,0,5211,5213,7,83,0,0,5212,5214,
        3,1324,662,0,5213,5212,1,0,0,0,5213,5214,1,0,0,0,5214,5242,1,0,0,
        0,5215,5242,7,84,0,0,5216,5217,5,247,0,0,5217,5242,5,409,0,0,5218,
        5219,5,521,0,0,5219,5242,5,151,0,0,5220,5224,5,139,0,0,5221,5222,
        5,586,0,0,5222,5225,5,581,0,0,5223,5225,7,85,0,0,5224,5221,1,0,0,
        0,5224,5223,1,0,0,0,5224,5225,1,0,0,0,5225,5242,1,0,0,0,5226,5227,
        5,314,0,0,5227,5242,5,581,0,0,5228,5231,5,476,0,0,5229,5232,5,108,
        0,0,5230,5232,3,604,302,0,5231,5229,1,0,0,0,5231,5230,1,0,0,0,5232,
        5242,1,0,0,0,5233,5234,5,521,0,0,5234,5242,5,644,0,0,5235,5237,5,
        58,0,0,5236,5238,5,499,0,0,5237,5236,1,0,0,0,5237,5238,1,0,0,0,5238,
        5242,1,0,0,0,5239,5240,7,86,0,0,5240,5242,5,667,0,0,5241,5209,1,
        0,0,0,5241,5211,1,0,0,0,5241,5215,1,0,0,0,5241,5216,1,0,0,0,5241,
        5218,1,0,0,0,5241,5220,1,0,0,0,5241,5226,1,0,0,0,5241,5228,1,0,0,
        0,5241,5233,1,0,0,0,5241,5235,1,0,0,0,5241,5239,1,0,0,0,5242,671,
        1,0,0,0,5243,5246,5,16,0,0,5244,5245,5,28,0,0,5245,5247,5,16,0,0,
        5246,5244,1,0,0,0,5246,5247,1,0,0,0,5247,5260,1,0,0,0,5248,5251,
        3,1338,669,0,5249,5250,5,28,0,0,5250,5252,5,16,0,0,5251,5249,1,0,
        0,0,5251,5252,1,0,0,0,5252,5260,1,0,0,0,5253,5260,3,1382,691,0,5254,
        5255,4,336,59,0,5255,5256,3,1338,669,0,5256,5257,5,28,0,0,5257,5258,
        3,1382,691,0,5258,5260,1,0,0,0,5259,5243,1,0,0,0,5259,5248,1,0,0,
        0,5259,5253,1,0,0,0,5259,5254,1,0,0,0,5260,673,1,0,0,0,5261,5268,
        3,676,338,0,5262,5264,5,61,0,0,5263,5262,1,0,0,0,5263,5264,1,0,0,
        0,5264,5265,1,0,0,0,5265,5267,3,676,338,0,5266,5263,1,0,0,0,5267,
        5270,1,0,0,0,5268,5266,1,0,0,0,5268,5269,1,0,0,0,5269,675,1,0,0,
        0,5270,5268,1,0,0,0,5271,5272,5,106,0,0,5272,5278,3,1440,720,0,5273,
        5274,5,289,0,0,5274,5278,3,1440,720,0,5275,5276,5,569,0,0,5276,5278,
        3,1440,720,0,5277,5271,1,0,0,0,5277,5273,1,0,0,0,5277,5275,1,0,0,
        0,5278,677,1,0,0,0,5279,5280,5,247,0,0,5280,5293,5,409,0,0,5281,
        5290,4,339,60,0,5282,5283,5,347,0,0,5283,5291,3,1418,709,0,5284,
        5285,5,351,0,0,5285,5291,3,1418,709,0,5286,5287,5,346,0,0,5287,5291,
        3,1418,709,0,5288,5289,5,352,0,0,5289,5291,3,1418,709,0,5290,5282,
        1,0,0,0,5290,5284,1,0,0,0,5290,5286,1,0,0,0,5290,5288,1,0,0,0,5291,
        5293,1,0,0,0,5292,5279,1,0,0,0,5292,5281,1,0,0,0,5293,679,1,0,0,
        0,5294,5295,5,519,0,0,5295,5296,5,667,0,0,5296,5318,3,682,341,0,
        5297,5298,5,519,0,0,5298,5299,5,667,0,0,5299,5318,7,87,0,0,5300,
        5301,5,519,0,0,5301,5302,5,166,0,0,5302,5306,5,667,0,0,5303,5307,
        3,682,341,0,5304,5307,5,389,0,0,5305,5307,5,57,0,0,5306,5303,1,0,
        0,0,5306,5304,1,0,0,0,5306,5305,1,0,0,0,5307,5308,1,0,0,0,5308,5309,
        5,599,0,0,5309,5318,3,682,341,0,5310,5311,5,519,0,0,5311,5312,5,
        667,0,0,5312,5315,5,57,0,0,5313,5314,5,671,0,0,5314,5316,3,682,341,
        0,5315,5313,1,0,0,0,5315,5316,1,0,0,0,5316,5318,1,0,0,0,5317,5294,
        1,0,0,0,5317,5297,1,0,0,0,5317,5300,1,0,0,0,5317,5310,1,0,0,0,5318,
        681,1,0,0,0,5319,5324,3,684,342,0,5320,5321,5,29,0,0,5321,5323,3,
        684,342,0,5322,5320,1,0,0,0,5323,5326,1,0,0,0,5324,5322,1,0,0,0,
        5324,5325,1,0,0,0,5325,683,1,0,0,0,5326,5324,1,0,0,0,5327,5329,3,
        1470,735,0,5328,5330,3,986,493,0,5329,5328,1,0,0,0,5329,5330,1,0,
        0,0,5330,685,1,0,0,0,5331,5333,5,60,0,0,5332,5334,3,1314,657,0,5333,
        5332,1,0,0,0,5333,5334,1,0,0,0,5334,5335,1,0,0,0,5335,5336,5,583,
        0,0,5336,5338,3,1384,692,0,5337,5339,3,694,347,0,5338,5337,1,0,0,
        0,5338,5339,1,0,0,0,5339,5374,1,0,0,0,5340,5341,5,105,0,0,5341,5342,
        5,583,0,0,5342,5346,3,1384,692,0,5343,5345,3,696,348,0,5344,5343,
        1,0,0,0,5345,5348,1,0,0,0,5346,5344,1,0,0,0,5346,5347,1,0,0,0,5347,
        5374,1,0,0,0,5348,5346,1,0,0,0,5349,5350,5,104,0,0,5350,5351,5,583,
        0,0,5351,5353,3,1384,692,0,5352,5354,7,88,0,0,5353,5352,1,0,0,0,
        5353,5354,1,0,0,0,5354,5374,1,0,0,0,5355,5357,5,406,0,0,5356,5358,
        3,1314,657,0,5357,5356,1,0,0,0,5357,5358,1,0,0,0,5358,5359,1,0,0,
        0,5359,5360,5,583,0,0,5360,5374,3,1384,692,0,5361,5363,5,472,0,0,
        5362,5364,3,1314,657,0,5363,5362,1,0,0,0,5363,5364,1,0,0,0,5364,
        5365,1,0,0,0,5365,5366,5,583,0,0,5366,5370,3,1384,692,0,5367,5369,
        3,698,349,0,5368,5367,1,0,0,0,5369,5372,1,0,0,0,5370,5368,1,0,0,
        0,5370,5371,1,0,0,0,5371,5374,1,0,0,0,5372,5370,1,0,0,0,5373,5331,
        1,0,0,0,5373,5340,1,0,0,0,5373,5349,1,0,0,0,5373,5355,1,0,0,0,5373,
        5361,1,0,0,0,5374,687,1,0,0,0,5375,5376,4,344,61,0,5376,5377,7,89,
        0,0,5377,5378,5,623,0,0,5378,689,1,0,0,0,5379,5381,3,692,346,0,5380,
        5379,1,0,0,0,5380,5381,1,0,0,0,5381,5383,1,0,0,0,5382,5384,3,688,
        344,0,5383,5382,1,0,0,0,5383,5384,1,0,0,0,5384,5390,1,0,0,0,5385,
        5386,4,345,62,0,5386,5387,5,630,0,0,5387,5388,5,153,0,0,5388,5390,
        3,1438,719,0,5389,5380,1,0,0,0,5389,5385,1,0,0,0,5390,691,1,0,0,
        0,5391,5392,4,346,63,0,5392,5393,5,653,0,0,5393,5394,5,3,0,0,5394,
        5395,5,683,0,0,5395,693,1,0,0,0,5396,5397,5,623,0,0,5397,5398,5,
        682,0,0,5398,5399,5,401,0,0,5399,5400,3,1408,704,0,5400,5401,3,690,
        345,0,5401,5407,1,0,0,0,5402,5403,5,184,0,0,5403,5404,5,682,0,0,
        5404,5405,5,401,0,0,5405,5407,3,1408,704,0,5406,5396,1,0,0,0,5406,
        5402,1,0,0,0,5407,695,1,0,0,0,5408,5409,5,232,0,0,5409,5412,5,624,
        0,0,5410,5412,7,90,0,0,5411,5408,1,0,0,0,5411,5410,1,0,0,0,5412,
        697,1,0,0,0,5413,5414,7,91,0,0,5414,699,1,0,0,0,5415,5427,5,616,
        0,0,5416,5417,5,428,0,0,5417,5428,3,1396,698,0,5418,5419,5,672,0,
        0,5419,5424,3,1398,699,0,5420,5421,5,29,0,0,5421,5423,3,1398,699,
        0,5422,5420,1,0,0,0,5423,5426,1,0,0,0,5424,5422,1,0,0,0,5424,5425,
        1,0,0,0,5425,5428,1,0,0,0,5426,5424,1,0,0,0,5427,5416,1,0,0,0,5427,
        5418,1,0,0,0,5428,701,1,0,0,0,5429,5440,5,277,0,0,5430,5431,5,428,
        0,0,5431,5432,3,1406,703,0,5432,5433,5,531,0,0,5433,5434,3,1438,
        719,0,5434,5441,1,0,0,0,5435,5436,5,672,0,0,5436,5438,3,1448,724,
        0,5437,5439,3,710,355,0,5438,5437,1,0,0,0,5438,5439,1,0,0,0,5439,
        5441,1,0,0,0,5440,5430,1,0,0,0,5440,5435,1,0,0,0,5441,703,1,0,0,
        0,5442,5443,7,92,0,0,5443,705,1,0,0,0,5444,5447,3,910,455,0,5445,
        5447,5,401,0,0,5446,5444,1,0,0,0,5446,5445,1,0,0,0,5447,707,1,0,
        0,0,5448,5449,3,704,352,0,5449,5450,3,992,496,0,5450,5451,3,1476,
        738,0,5451,5452,3,706,353,0,5452,709,1,0,0,0,5453,5454,4,355,64,
        0,5454,5455,5,519,0,0,5455,5460,3,708,354,0,5456,5457,5,29,0,0,5457,
        5459,3,708,354,0,5458,5456,1,0,0,0,5459,5462,1,0,0,0,5460,5458,1,
        0,0,0,5460,5461,1,0,0,0,5461,711,1,0,0,0,5462,5460,1,0,0,0,5463,
        5464,5,519,0,0,5464,5465,3,714,357,0,5465,713,1,0,0,0,5466,5467,
        3,724,362,0,5467,5468,3,722,361,0,5468,5517,1,0,0,0,5469,5470,5,
        601,0,0,5470,5517,3,716,358,0,5471,5472,3,1478,739,0,5472,5473,3,
        730,365,0,5473,5517,1,0,0,0,5474,5477,5,424,0,0,5475,5476,5,232,
        0,0,5476,5478,3,1306,653,0,5477,5475,1,0,0,0,5477,5478,1,0,0,0,5478,
        5479,1,0,0,0,5479,5500,3,1476,738,0,5480,5482,3,1440,720,0,5481,
        5483,3,1302,651,0,5482,5481,1,0,0,0,5482,5483,1,0,0,0,5483,5485,
        1,0,0,0,5484,5486,3,1294,647,0,5485,5484,1,0,0,0,5485,5486,1,0,0,
        0,5486,5501,1,0,0,0,5487,5489,3,1440,720,0,5488,5490,3,1302,651,
        0,5489,5488,1,0,0,0,5489,5490,1,0,0,0,5490,5492,1,0,0,0,5491,5493,
        3,1294,647,0,5492,5491,1,0,0,0,5492,5493,1,0,0,0,5493,5501,1,0,0,
        0,5494,5495,4,357,65,0,5495,5496,5,424,0,0,5496,5497,5,32,0,0,5497,
        5498,3,1440,720,0,5498,5499,5,33,0,0,5499,5501,1,0,0,0,5500,5480,
        1,0,0,0,5500,5487,1,0,0,0,5500,5494,1,0,0,0,5501,5517,1,0,0,0,5502,
        5503,4,357,66,0,5503,5506,5,424,0,0,5504,5505,5,232,0,0,5505,5507,
        3,1306,653,0,5506,5504,1,0,0,0,5506,5507,1,0,0,0,5507,5508,1,0,0,
        0,5508,5509,5,599,0,0,5509,5511,5,742,0,0,5510,5512,3,1302,651,0,
        5511,5510,1,0,0,0,5511,5512,1,0,0,0,5512,5514,1,0,0,0,5513,5515,
        3,1294,647,0,5514,5513,1,0,0,0,5514,5515,1,0,0,0,5515,5517,1,0,0,
        0,5516,5466,1,0,0,0,5516,5469,1,0,0,0,5516,5471,1,0,0,0,5516,5474,
        1,0,0,0,5516,5502,1,0,0,0,5517,715,1,0,0,0,5518,5520,3,718,359,0,
        5519,5521,3,720,360,0,5520,5519,1,0,0,0,5520,5521,1,0,0,0,5521,5528,
        1,0,0,0,5522,5525,3,720,360,0,5523,5524,5,29,0,0,5524,5526,3,718,
        359,0,5525,5523,1,0,0,0,5525,5526,1,0,0,0,5526,5528,1,0,0,0,5527,
        5518,1,0,0,0,5527,5522,1,0,0,0,5528,717,1,0,0,0,5529,5530,5,453,
        0,0,5530,5531,7,42,0,0,5531,719,1,0,0,0,5532,5533,5,288,0,0,5533,
        5539,5,304,0,0,5534,5535,5,473,0,0,5535,5540,5,453,0,0,5536,5537,
        5,453,0,0,5537,5540,7,93,0,0,5538,5540,5,514,0,0,5539,5534,1,0,0,
        0,5539,5536,1,0,0,0,5539,5538,1,0,0,0,5540,721,1,0,0,0,5541,5542,
        5,29,0,0,5542,5544,3,726,363,0,5543,5541,1,0,0,0,5544,5547,1,0,0,
        0,5545,5543,1,0,0,0,5545,5546,1,0,0,0,5546,723,1,0,0,0,5547,5545,
        1,0,0,0,5548,5549,3,992,496,0,5549,5550,3,1476,738,0,5550,5551,3,
        734,367,0,5551,5578,1,0,0,0,5552,5578,3,1260,630,0,5553,5554,3,986,
        493,0,5554,5555,3,1476,738,0,5555,5556,3,910,455,0,5556,5578,1,0,
        0,0,5557,5559,5,41,0,0,5558,5560,3,1482,741,0,5559,5558,1,0,0,0,
        5559,5560,1,0,0,0,5560,5561,1,0,0,0,5561,5562,3,992,496,0,5562,5563,
        3,1476,738,0,5563,5564,3,734,367,0,5564,5578,1,0,0,0,5565,5575,5,
        379,0,0,5566,5567,3,1476,738,0,5567,5568,3,910,455,0,5568,5576,1,
        0,0,0,5569,5571,3,1188,594,0,5570,5572,3,1248,624,0,5571,5570,1,
        0,0,0,5571,5572,1,0,0,0,5572,5576,1,0,0,0,5573,5574,4,362,67,0,5574,
        5576,5,166,0,0,5575,5566,1,0,0,0,5575,5569,1,0,0,0,5575,5573,1,0,
        0,0,5576,5578,1,0,0,0,5577,5548,1,0,0,0,5577,5552,1,0,0,0,5577,5553,
        1,0,0,0,5577,5557,1,0,0,0,5577,5565,1,0,0,0,5578,725,1,0,0,0,5579,
        5580,3,1478,739,0,5580,5581,3,992,496,0,5581,5582,3,1476,738,0,5582,
        5583,3,734,367,0,5583,5586,1,0,0,0,5584,5586,3,724,362,0,5585,5579,
        1,0,0,0,5585,5584,1,0,0,0,5586,727,1,0,0,0,5587,5589,5,41,0,0,5588,
        5590,3,1482,741,0,5589,5588,1,0,0,0,5589,5590,1,0,0,0,5590,5591,
        1,0,0,0,5591,5592,3,992,496,0,5592,729,1,0,0,0,5593,5594,3,732,366,
        0,5594,5595,3,722,361,0,5595,5599,1,0,0,0,5596,5597,5,601,0,0,5597,
        5599,3,716,358,0,5598,5593,1,0,0,0,5598,5596,1,0,0,0,5599,731,1,
        0,0,0,5600,5601,3,992,496,0,5601,5602,3,1476,738,0,5602,5603,3,734,
        367,0,5603,733,1,0,0,0,5604,5612,3,910,455,0,5605,5612,5,166,0,0,
        5606,5612,5,401,0,0,5607,5612,5,57,0,0,5608,5612,5,77,0,0,5609,5612,
        5,503,0,0,5610,5612,5,718,0,0,5611,5604,1,0,0,0,5611,5605,1,0,0,
        0,5611,5606,1,0,0,0,5611,5607,1,0,0,0,5611,5608,1,0,0,0,5611,5609,
        1,0,0,0,5611,5610,1,0,0,0,5612,735,1,0,0,0,5613,5614,5,521,0,0,5614,
        5616,5,151,0,0,5615,5617,3,1310,655,0,5616,5615,1,0,0,0,5616,5617,
        1,0,0,0,5617,737,1,0,0,0,5618,5620,5,521,0,0,5619,5621,3,828,414,
        0,5620,5619,1,0,0,0,5620,5621,1,0,0,0,5621,5622,1,0,0,0,5622,5624,
        5,581,0,0,5623,5625,3,834,417,0,5624,5623,1,0,0,0,5624,5625,1,0,
        0,0,5625,5627,1,0,0,0,5626,5628,3,1310,655,0,5627,5626,1,0,0,0,5627,
        5628,1,0,0,0,5628,739,1,0,0,0,5629,5631,5,521,0,0,5630,5632,5,236,
        0,0,5631,5630,1,0,0,0,5631,5632,1,0,0,0,5632,5633,1,0,0,0,5633,5635,
        5,602,0,0,5634,5636,3,834,417,0,5635,5634,1,0,0,0,5635,5636,1,0,
        0,0,5636,5638,1,0,0,0,5637,5639,3,1310,655,0,5638,5637,1,0,0,0,5638,
        5639,1,0,0,0,5639,741,1,0,0,0,5640,5641,5,521,0,0,5641,5643,5,204,
        0,0,5642,5644,3,834,417,0,5643,5642,1,0,0,0,5643,5644,1,0,0,0,5644,
        5646,1,0,0,0,5645,5647,3,1310,655,0,5646,5645,1,0,0,0,5646,5647,
        1,0,0,0,5647,743,1,0,0,0,5648,5649,5,521,0,0,5649,5650,5,583,0,0,
        5650,5652,5,557,0,0,5651,5653,3,834,417,0,5652,5651,1,0,0,0,5652,
        5653,1,0,0,0,5653,5655,1,0,0,0,5654,5656,3,1310,655,0,5655,5654,
        1,0,0,0,5655,5656,1,0,0,0,5656,745,1,0,0,0,5657,5658,5,521,0,0,5658,
        5659,5,405,0,0,5659,5661,5,581,0,0,5660,5662,3,834,417,0,5661,5660,
        1,0,0,0,5661,5662,1,0,0,0,5662,5664,1,0,0,0,5663,5665,3,1310,655,
        0,5664,5663,1,0,0,0,5664,5665,1,0,0,0,5665,747,1,0,0,0,5666,5667,
        4,374,68,0,5667,5668,5,521,0,0,5668,5669,5,807,0,0,5669,5670,3,2,
        1,0,5670,749,1,0,0,0,5671,5672,5,521,0,0,5672,5673,5,426,0,0,5673,
        751,1,0,0,0,5674,5675,5,521,0,0,5675,5676,5,198,0,0,5676,5677,3,
        830,415,0,5677,5678,5,316,0,0,5678,753,1,0,0,0,5679,5680,5,521,0,
        0,5680,5681,5,198,0,0,5681,5682,3,830,415,0,5682,5683,5,377,0,0,
        5683,755,1,0,0,0,5684,5685,5,521,0,0,5685,5686,5,198,0,0,5686,5687,
        3,830,415,0,5687,5688,5,557,0,0,5688,757,1,0,0,0,5689,5691,5,521,
        0,0,5690,5692,3,828,414,0,5691,5690,1,0,0,0,5691,5692,1,0,0,0,5692,
        5693,1,0,0,0,5693,5694,5,114,0,0,5694,5695,7,94,0,0,5695,5697,3,
        1382,691,0,5696,5698,3,834,417,0,5697,5696,1,0,0,0,5697,5698,1,0,
        0,0,5698,5700,1,0,0,0,5699,5701,3,1310,655,0,5700,5699,1,0,0,0,5700,
        5701,1,0,0,0,5701,759,1,0,0,0,5702,5703,5,521,0,0,5703,5704,7,46,
        0,0,5704,5705,5,316,0,0,5705,761,1,0,0,0,5706,5707,5,521,0,0,5707,
        5708,5,77,0,0,5708,5709,5,808,0,0,5709,5710,5,557,0,0,5710,763,1,
        0,0,0,5711,5716,5,521,0,0,5712,5713,3,604,302,0,5713,5714,5,257,
        0,0,5714,5717,1,0,0,0,5715,5717,5,763,0,0,5716,5712,1,0,0,0,5716,
        5715,1,0,0,0,5717,765,1,0,0,0,5718,5719,5,521,0,0,5719,5720,5,78,
        0,0,5720,5723,5,204,0,0,5721,5722,5,282,0,0,5722,5724,3,1440,720,
        0,5723,5721,1,0,0,0,5723,5724,1,0,0,0,5724,5727,1,0,0,0,5725,5726,
        5,235,0,0,5726,5728,3,1422,711,0,5727,5725,1,0,0,0,5727,5728,1,0,
        0,0,5728,5730,1,0,0,0,5729,5731,3,314,157,0,5730,5729,1,0,0,0,5730,
        5731,1,0,0,0,5731,5733,1,0,0,0,5732,5734,3,1030,515,0,5733,5732,
        1,0,0,0,5733,5734,1,0,0,0,5734,767,1,0,0,0,5735,5736,5,521,0,0,5736,
        5737,5,463,0,0,5737,5740,5,204,0,0,5738,5739,5,282,0,0,5739,5741,
        3,1440,720,0,5740,5738,1,0,0,0,5740,5741,1,0,0,0,5741,5744,1,0,0,
        0,5742,5743,5,235,0,0,5743,5745,3,1422,711,0,5744,5742,1,0,0,0,5744,
        5745,1,0,0,0,5745,5747,1,0,0,0,5746,5748,3,314,157,0,5747,5746,1,
        0,0,0,5747,5748,1,0,0,0,5748,5750,1,0,0,0,5749,5751,3,1030,515,0,
        5750,5749,1,0,0,0,5750,5751,1,0,0,0,5751,769,1,0,0,0,5752,5754,5,
        521,0,0,5753,5755,5,215,0,0,5754,5753,1,0,0,0,5754,5755,1,0,0,0,
        5755,5756,1,0,0,0,5756,5757,7,95,0,0,5757,5758,3,832,416,0,5758,
        5760,3,1382,691,0,5759,5761,3,834,417,0,5760,5759,1,0,0,0,5760,5761,
        1,0,0,0,5761,5763,1,0,0,0,5762,5764,3,390,195,0,5763,5762,1,0,0,
        0,5763,5764,1,0,0,0,5764,771,1,0,0,0,5765,5767,5,521,0,0,5766,5768,
        5,563,0,0,5767,5766,1,0,0,0,5767,5768,1,0,0,0,5768,5769,1,0,0,0,
        5769,5770,5,197,0,0,5770,773,1,0,0,0,5771,5772,5,521,0,0,5772,5773,
        5,137,0,0,5773,5774,5,32,0,0,5774,5775,5,16,0,0,5775,5776,5,33,0,
        0,5776,5777,5,647,0,0,5777,775,1,0,0,0,5778,5779,5,521,0,0,5779,
        5780,5,137,0,0,5780,5781,5,32,0,0,5781,5782,5,16,0,0,5782,5783,5,
        33,0,0,5783,5784,5,201,0,0,5784,777,1,0,0,0,5785,5786,5,521,0,0,
        5786,5788,5,647,0,0,5787,5789,3,314,157,0,5788,5787,1,0,0,0,5788,
        5789,1,0,0,0,5789,779,1,0,0,0,5790,5791,5,521,0,0,5791,5793,5,201,
        0,0,5792,5794,3,314,157,0,5793,5792,1,0,0,0,5793,5794,1,0,0,0,5794,
        781,1,0,0,0,5795,5796,5,521,0,0,5796,5797,5,444,0,0,5797,783,1,0,
        0,0,5798,5799,5,521,0,0,5799,5801,5,443,0,0,5800,5802,3,836,418,
        0,5801,5800,1,0,0,0,5801,5802,1,0,0,0,5802,5806,1,0,0,0,5803,5804,
        5,232,0,0,5804,5805,5,448,0,0,5805,5807,5,3,0,0,5806,5803,1,0,0,
        0,5806,5807,1,0,0,0,5807,5809,1,0,0,0,5808,5810,3,314,157,0,5809,
        5808,1,0,0,0,5809,5810,1,0,0,0,5810,785,1,0,0,0,5811,5813,5,521,
        0,0,5812,5814,3,1478,739,0,5813,5812,1,0,0,0,5813,5814,1,0,0,0,5814,
        5815,1,0,0,0,5815,5817,5,557,0,0,5816,5818,3,1310,655,0,5817,5816,
        1,0,0,0,5817,5818,1,0,0,0,5818,787,1,0,0,0,5819,5821,5,521,0,0,5820,
        5822,5,236,0,0,5821,5820,1,0,0,0,5821,5822,1,0,0,0,5822,5823,1,0,
        0,0,5823,5824,5,442,0,0,5824,789,1,0,0,0,5825,5827,5,521,0,0,5826,
        5828,3,1478,739,0,5827,5826,1,0,0,0,5827,5828,1,0,0,0,5828,5829,
        1,0,0,0,5829,5831,5,639,0,0,5830,5832,3,1310,655,0,5831,5830,1,0,
        0,0,5831,5832,1,0,0,0,5832,791,1,0,0,0,5833,5834,5,521,0,0,5834,
        5836,3,1006,503,0,5835,5837,3,1310,655,0,5836,5835,1,0,0,0,5836,
        5837,1,0,0,0,5837,793,1,0,0,0,5838,5839,5,521,0,0,5839,5841,5,113,
        0,0,5840,5842,3,1310,655,0,5841,5840,1,0,0,0,5841,5842,1,0,0,0,5842,
        795,1,0,0,0,5843,5844,5,521,0,0,5844,5845,5,439,0,0,5845,797,1,0,
        0,0,5846,5847,5,521,0,0,5847,5854,5,248,0,0,5848,5849,5,232,0,0,
        5849,5852,3,1306,653,0,5850,5851,5,630,0,0,5851,5853,3,1270,635,
        0,5852,5850,1,0,0,0,5852,5853,1,0,0,0,5853,5855,1,0,0,0,5854,5848,
        1,0,0,0,5854,5855,1,0,0,0,5855,799,1,0,0,0,5856,5857,5,521,0,0,5857,
        5858,5,139,0,0,5858,5860,5,150,0,0,5859,5861,3,1240,620,0,5860,5859,
        1,0,0,0,5860,5861,1,0,0,0,5861,5862,1,0,0,0,5862,5863,3,1338,669,
        0,5863,801,1,0,0,0,5864,5865,5,521,0,0,5865,5866,5,139,0,0,5866,
        5867,5,583,0,0,5867,5868,3,1382,691,0,5868,803,1,0,0,0,5869,5870,
        5,521,0,0,5870,5871,5,139,0,0,5871,5872,5,644,0,0,5872,5873,3,1354,
        677,0,5873,805,1,0,0,0,5874,5875,5,521,0,0,5875,5876,5,341,0,0,5876,
        5877,5,557,0,0,5877,807,1,0,0,0,5878,5879,5,521,0,0,5879,5880,3,
        604,302,0,5880,5882,5,557,0,0,5881,5883,3,1030,515,0,5882,5881,1,
        0,0,0,5882,5883,1,0,0,0,5883,809,1,0,0,0,5884,5885,5,521,0,0,5885,
        5886,5,139,0,0,5886,5887,5,440,0,0,5887,5888,3,1342,671,0,5888,811,
        1,0,0,0,5889,5890,5,521,0,0,5890,5891,5,139,0,0,5891,5892,5,238,
        0,0,5892,5893,3,1346,673,0,5893,813,1,0,0,0,5894,5895,5,521,0,0,
        5895,5896,5,139,0,0,5896,5897,5,603,0,0,5897,5898,3,1350,675,0,5898,
        815,1,0,0,0,5899,5900,5,521,0,0,5900,5901,5,139,0,0,5901,5902,5,
        440,0,0,5902,5904,5,557,0,0,5903,5905,3,1310,655,0,5904,5903,1,0,
        0,0,5904,5905,1,0,0,0,5905,817,1,0,0,0,5906,5907,5,521,0,0,5907,
        5908,5,139,0,0,5908,5909,5,238,0,0,5909,5911,5,557,0,0,5910,5912,
        3,1310,655,0,5911,5910,1,0,0,0,5911,5912,1,0,0,0,5912,819,1,0,0,
        0,5913,5914,5,521,0,0,5914,5915,5,139,0,0,5915,5916,5,440,0,0,5916,
        5917,5,111,0,0,5917,5918,3,1342,671,0,5918,821,1,0,0,0,5919,5920,
        5,521,0,0,5920,5921,5,139,0,0,5921,5922,5,238,0,0,5922,5923,5,111,
        0,0,5923,5924,3,1346,673,0,5924,823,1,0,0,0,5925,5926,5,521,0,0,
        5926,5927,5,139,0,0,5927,5928,5,205,0,0,5928,5929,3,1366,683,0,5929,
        825,1,0,0,0,5930,5931,5,521,0,0,5931,5932,5,139,0,0,5932,5933,5,
        627,0,0,5933,5934,3,1306,653,0,5934,827,1,0,0,0,5935,5941,5,236,
        0,0,5936,5938,5,215,0,0,5937,5939,5,236,0,0,5938,5937,1,0,0,0,5938,
        5939,1,0,0,0,5939,5941,1,0,0,0,5940,5935,1,0,0,0,5940,5936,1,0,0,
        0,5941,829,1,0,0,0,5942,5945,3,1374,687,0,5943,5945,5,57,0,0,5944,
        5942,1,0,0,0,5944,5943,1,0,0,0,5945,831,1,0,0,0,5946,5947,7,94,0,
        0,5947,833,1,0,0,0,5948,5949,3,832,416,0,5949,5950,3,1406,703,0,
        5950,835,1,0,0,0,5951,5956,3,838,419,0,5952,5953,5,29,0,0,5953,5955,
        3,838,419,0,5954,5952,1,0,0,0,5955,5958,1,0,0,0,5956,5954,1,0,0,
        0,5956,5957,1,0,0,0,5957,837,1,0,0,0,5958,5956,1,0,0,0,5959,5960,
        5,84,0,0,5960,5967,5,285,0,0,5961,5962,5,134,0,0,5962,5967,5,578,
        0,0,5963,5964,5,418,0,0,5964,5967,5,220,0,0,5965,5967,7,96,0,0,5966,
        5959,1,0,0,0,5966,5961,1,0,0,0,5966,5963,1,0,0,0,5966,5965,1,0,0,
        0,5967,839,1,0,0,0,5968,5969,5,78,0,0,5969,6005,3,1444,722,0,5970,
        5971,5,91,0,0,5971,5972,5,268,0,0,5972,5973,3,842,421,0,5973,5976,
        5,282,0,0,5974,5977,3,1406,703,0,5975,5977,5,166,0,0,5976,5974,1,
        0,0,0,5976,5975,1,0,0,0,5977,6005,1,0,0,0,5978,5980,5,228,0,0,5979,
        5981,3,1314,657,0,5980,5979,1,0,0,0,5980,5981,1,0,0,0,5981,5991,
        1,0,0,0,5982,5992,3,860,430,0,5983,5988,3,856,428,0,5984,5985,5,
        29,0,0,5985,5987,3,856,428,0,5986,5984,1,0,0,0,5987,5990,1,0,0,0,
        5988,5986,1,0,0,0,5988,5989,1,0,0,0,5989,5992,1,0,0,0,5990,5988,
        1,0,0,0,5991,5982,1,0,0,0,5991,5983,1,0,0,0,5992,6005,1,0,0,0,5993,
        5995,5,296,0,0,5994,5996,7,97,0,0,5995,5994,1,0,0,0,5995,5996,1,
        0,0,0,5996,5997,1,0,0,0,5997,6005,3,910,455,0,5998,5999,5,311,0,
        0,5999,6000,5,268,0,0,6000,6001,5,279,0,0,6001,6002,5,91,0,0,6002,
        6005,3,864,432,0,6003,6005,5,522,0,0,6004,5968,1,0,0,0,6004,5970,
        1,0,0,0,6004,5978,1,0,0,0,6004,5993,1,0,0,0,6004,5998,1,0,0,0,6004,
        6003,1,0,0,0,6005,841,1,0,0,0,6006,6009,3,844,422,0,6007,6009,3,
        848,424,0,6008,6006,1,0,0,0,6008,6007,1,0,0,0,6009,843,1,0,0,0,6010,
        6015,3,846,423,0,6011,6012,5,29,0,0,6012,6014,3,846,423,0,6013,6011,
        1,0,0,0,6014,6017,1,0,0,0,6015,6013,1,0,0,0,6015,6016,1,0,0,0,6016,
        845,1,0,0,0,6017,6015,1,0,0,0,6018,6020,3,1382,691,0,6019,6021,3,
        850,425,0,6020,6019,1,0,0,0,6020,6021,1,0,0,0,6021,847,1,0,0,0,6022,
        6023,3,1382,691,0,6023,6024,5,423,0,0,6024,6025,5,32,0,0,6025,6026,
        3,54,27,0,6026,6028,5,33,0,0,6027,6029,3,850,425,0,6028,6027,1,0,
        0,0,6028,6029,1,0,0,0,6029,849,1,0,0,0,6030,6031,3,440,220,0,6031,
        6033,5,32,0,0,6032,6034,3,854,427,0,6033,6032,1,0,0,0,6033,6034,
        1,0,0,0,6034,6035,1,0,0,0,6035,6036,5,33,0,0,6036,851,1,0,0,0,6037,
        6040,3,1406,703,0,6038,6040,5,438,0,0,6039,6037,1,0,0,0,6039,6038,
        1,0,0,0,6040,853,1,0,0,0,6041,6046,3,852,426,0,6042,6043,5,29,0,
        0,6043,6045,3,852,426,0,6044,6042,1,0,0,0,6045,6048,1,0,0,0,6046,
        6044,1,0,0,0,6046,6047,1,0,0,0,6047,855,1,0,0,0,6048,6046,1,0,0,
        0,6049,6061,7,98,0,0,6050,6052,3,858,429,0,6051,6050,1,0,0,0,6051,
        6052,1,0,0,0,6052,6053,1,0,0,0,6053,6061,5,316,0,0,6054,6055,5,462,
        0,0,6055,6057,5,316,0,0,6056,6058,3,1030,515,0,6057,6056,1,0,0,0,
        6057,6058,1,0,0,0,6058,6061,1,0,0,0,6059,6061,5,407,0,0,6060,6049,
        1,0,0,0,6060,6051,1,0,0,0,6060,6054,1,0,0,0,6060,6059,1,0,0,0,6061,
        857,1,0,0,0,6062,6063,7,99,0,0,6063,859,1,0,0,0,6064,6072,7,17,0,
        0,6065,6066,5,653,0,0,6066,6067,5,453,0,0,6067,6073,5,314,0,0,6068,
        6070,3,1408,704,0,6069,6071,3,862,431,0,6070,6069,1,0,0,0,6070,6071,
        1,0,0,0,6071,6073,1,0,0,0,6072,6065,1,0,0,0,6072,6068,1,0,0,0,6072,
        6073,1,0,0,0,6073,861,1,0,0,0,6074,6075,5,232,0,0,6075,6080,5,214,
        0,0,6076,6077,5,653,0,0,6077,6078,5,453,0,0,6078,6080,5,314,0,0,
        6079,6074,1,0,0,0,6079,6076,1,0,0,0,6080,863,1,0,0,0,6081,6082,3,
        1382,691,0,6082,6084,3,870,435,0,6083,6085,3,850,425,0,6084,6083,
        1,0,0,0,6084,6085,1,0,0,0,6085,6088,1,0,0,0,6086,6087,5,264,0,0,
        6087,6089,5,300,0,0,6088,6086,1,0,0,0,6088,6089,1,0,0,0,6089,6092,
        1,0,0,0,6090,6092,3,866,433,0,6091,6081,1,0,0,0,6091,6090,1,0,0,
        0,6092,865,1,0,0,0,6093,6098,3,868,434,0,6094,6095,5,29,0,0,6095,
        6097,3,868,434,0,6096,6094,1,0,0,0,6097,6100,1,0,0,0,6098,6096,1,
        0,0,0,6098,6099,1,0,0,0,6099,867,1,0,0,0,6100,6098,1,0,0,0,6101,
        6103,3,1382,691,0,6102,6104,3,850,425,0,6103,6102,1,0,0,0,6103,6104,
        1,0,0,0,6104,6107,1,0,0,0,6105,6106,5,264,0,0,6106,6108,5,300,0,
        0,6107,6105,1,0,0,0,6107,6108,1,0,0,0,6108,869,1,0,0,0,6109,6110,
        5,423,0,0,6110,6111,5,32,0,0,6111,6112,3,54,27,0,6112,6113,5,33,
        0,0,6113,871,1,0,0,0,6114,6119,3,874,437,0,6115,6119,3,884,442,0,
        6116,6119,3,886,443,0,6117,6119,3,890,445,0,6118,6114,1,0,0,0,6118,
        6115,1,0,0,0,6118,6116,1,0,0,0,6118,6117,1,0,0,0,6119,873,1,0,0,
        0,6120,6121,5,139,0,0,6121,6122,5,717,0,0,6122,6123,5,249,0,0,6123,
        6124,3,1406,703,0,6124,6126,5,608,0,0,6125,6127,3,1476,738,0,6126,
        6125,1,0,0,0,6126,6127,1,0,0,0,6127,6128,1,0,0,0,6128,6130,7,100,
        0,0,6129,6131,3,876,438,0,6130,6129,1,0,0,0,6130,6131,1,0,0,0,6131,
        6133,1,0,0,0,6132,6134,3,880,440,0,6133,6132,1,0,0,0,6133,6134,1,
        0,0,0,6134,6136,1,0,0,0,6135,6137,3,882,441,0,6136,6135,1,0,0,0,
        6136,6137,1,0,0,0,6137,875,1,0,0,0,6138,6140,5,719,0,0,6139,6141,
        3,1476,738,0,6140,6139,1,0,0,0,6140,6141,1,0,0,0,6141,6142,1,0,0,
        0,6142,6149,3,878,439,0,6143,6145,5,29,0,0,6144,6143,1,0,0,0,6144,
        6145,1,0,0,0,6145,6146,1,0,0,0,6146,6148,3,878,439,0,6147,6144,1,
        0,0,0,6148,6151,1,0,0,0,6149,6147,1,0,0,0,6149,6150,1,0,0,0,6150,
        877,1,0,0,0,6151,6149,1,0,0,0,6152,6155,5,3,0,0,6153,6154,5,15,0,
        0,6154,6156,5,3,0,0,6155,6153,1,0,0,0,6155,6156,1,0,0,0,6156,879,
        1,0,0,0,6157,6159,5,716,0,0,6158,6160,3,1476,738,0,6159,6158,1,0,
        0,0,6159,6160,1,0,0,0,6160,6161,1,0,0,0,6161,6162,5,3,0,0,6162,881,
        1,0,0,0,6163,6164,7,7,0,0,6164,883,1,0,0,0,6165,6166,5,58,0,0,6166,
        6167,5,717,0,0,6167,6168,5,249,0,0,6168,6170,3,1400,700,0,6169,6171,
        3,876,438,0,6170,6169,1,0,0,0,6170,6171,1,0,0,0,6171,6173,1,0,0,
        0,6172,6174,3,880,440,0,6173,6172,1,0,0,0,6173,6174,1,0,0,0,6174,
        6176,1,0,0,0,6175,6177,3,882,441,0,6176,6175,1,0,0,0,6176,6177,1,
        0,0,0,6177,6179,1,0,0,0,6178,6180,5,230,0,0,6179,6178,1,0,0,0,6179,
        6180,1,0,0,0,6180,885,1,0,0,0,6181,6182,5,519,0,0,6182,6183,5,717,
        0,0,6183,6184,5,249,0,0,6184,6187,3,1406,703,0,6185,6186,5,232,0,
        0,6186,6188,3,888,444,0,6187,6185,1,0,0,0,6187,6188,1,0,0,0,6188,
        887,1,0,0,0,6189,6196,3,1420,710,0,6190,6192,5,29,0,0,6191,6190,
        1,0,0,0,6191,6192,1,0,0,0,6192,6193,1,0,0,0,6193,6195,3,1420,710,
        0,6194,6191,1,0,0,0,6195,6198,1,0,0,0,6196,6194,1,0,0,0,6196,6197,
        1,0,0,0,6197,889,1,0,0,0,6198,6196,1,0,0,0,6199,6200,5,184,0,0,6200,
        6201,5,717,0,0,6201,6202,5,249,0,0,6202,6204,3,1400,700,0,6203,6205,
        5,230,0,0,6204,6203,1,0,0,0,6204,6205,1,0,0,0,6205,891,1,0,0,0,6206,
        6213,3,894,447,0,6207,6213,3,896,448,0,6208,6213,3,904,452,0,6209,
        6213,3,906,453,0,6210,6211,4,446,69,0,6211,6213,3,908,454,0,6212,
        6206,1,0,0,0,6212,6207,1,0,0,0,6212,6208,1,0,0,0,6212,6209,1,0,0,
        0,6212,6210,1,0,0,0,6213,893,1,0,0,0,6214,6215,7,101,0,0,6215,6218,
        3,1382,691,0,6216,6219,3,1440,720,0,6217,6219,3,1326,663,0,6218,
        6216,1,0,0,0,6218,6217,1,0,0,0,6218,6219,1,0,0,0,6219,895,1,0,0,
        0,6220,6222,7,101,0,0,6221,6223,3,898,449,0,6222,6221,1,0,0,0,6222,
        6223,1,0,0,0,6223,6228,1,0,0,0,6224,6225,4,448,70,0,6225,6226,5,
        232,0,0,6226,6227,5,150,0,0,6227,6229,3,1466,733,0,6228,6224,1,0,
        0,0,6228,6229,1,0,0,0,6229,6230,1,0,0,0,6230,6231,3,900,450,0,6231,
        897,1,0,0,0,6232,6233,5,233,0,0,6233,6234,5,6,0,0,6234,6237,3,1466,
        733,0,6235,6236,4,449,71,0,6236,6238,3,902,451,0,6237,6235,1,0,0,
        0,6237,6238,1,0,0,0,6238,6249,1,0,0,0,6239,6240,4,449,72,0,6240,
        6249,5,215,0,0,6241,6242,4,449,73,0,6242,6249,5,60,0,0,6243,6244,
        4,449,74,0,6244,6245,5,60,0,0,6245,6246,5,233,0,0,6246,6247,5,6,
        0,0,6247,6249,3,1466,733,0,6248,6232,1,0,0,0,6248,6239,1,0,0,0,6248,
        6241,1,0,0,0,6248,6243,1,0,0,0,6249,899,1,0,0,0,6250,6259,3,296,
        148,0,6251,6259,3,234,117,0,6252,6259,3,246,123,0,6253,6259,3,294,
        147,0,6254,6259,3,450,225,0,6255,6256,5,232,0,0,6256,6257,5,127,
        0,0,6257,6259,3,1420,710,0,6258,6250,1,0,0,0,6258,6251,1,0,0,0,6258,
        6252,1,0,0,0,6258,6253,1,0,0,0,6258,6254,1,0,0,0,6258,6255,1,0,0,
        0,6259,901,1,0,0,0,6260,6261,5,279,0,0,6261,6262,5,39,0,0,6262,6263,
        3,1466,733,0,6263,903,1,0,0,0,6264,6265,5,254,0,0,6265,6266,3,1466,
        733,0,6266,905,1,0,0,0,6267,6268,5,629,0,0,6268,6269,3,1338,669,
        0,6269,907,1,0,0,0,6270,6271,5,722,0,0,6271,909,1,0,0,0,6272,6273,
        6,455,-1,0,6273,6279,3,912,456,0,6274,6276,5,287,0,0,6275,6277,3,
        1008,504,0,6276,6275,1,0,0,0,6276,6277,1,0,0,0,6277,6278,1,0,0,0,
        6278,6280,7,102,0,0,6279,6274,1,0,0,0,6279,6280,1,0,0,0,6280,6284,
        1,0,0,0,6281,6282,5,390,0,0,6282,6284,3,910,455,4,6283,6272,1,0,
        0,0,6283,6281,1,0,0,0,6284,6296,1,0,0,0,6285,6286,10,3,0,0,6286,
        6287,7,103,0,0,6287,6295,3,910,455,4,6288,6289,10,2,0,0,6289,6290,
        5,662,0,0,6290,6295,3,910,455,3,6291,6292,10,1,0,0,6292,6293,7,104,
        0,0,6293,6295,3,910,455,2,6294,6285,1,0,0,0,6294,6288,1,0,0,0,6294,
        6291,1,0,0,0,6295,6298,1,0,0,0,6296,6294,1,0,0,0,6296,6297,1,0,0,
        0,6297,911,1,0,0,0,6298,6296,1,0,0,0,6299,6300,6,456,-1,0,6300,6301,
        3,916,458,0,6301,6319,1,0,0,0,6302,6303,10,3,0,0,6303,6305,5,287,
        0,0,6304,6306,3,1008,504,0,6305,6304,1,0,0,0,6305,6306,1,0,0,0,6306,
        6307,1,0,0,0,6307,6318,5,395,0,0,6308,6309,10,2,0,0,6309,6310,3,
        914,457,0,6310,6311,3,916,458,0,6311,6318,1,0,0,0,6312,6313,10,1,
        0,0,6313,6314,3,914,457,0,6314,6315,7,105,0,0,6315,6316,3,310,155,
        0,6316,6318,1,0,0,0,6317,6302,1,0,0,0,6317,6308,1,0,0,0,6317,6312,
        1,0,0,0,6318,6321,1,0,0,0,6319,6317,1,0,0,0,6319,6320,1,0,0,0,6320,
        913,1,0,0,0,6321,6319,1,0,0,0,6322,6323,7,106,0,0,6323,915,1,0,0,
        0,6324,6338,3,920,460,0,6325,6327,3,1008,504,0,6326,6325,1,0,0,0,
        6326,6327,1,0,0,0,6327,6328,1,0,0,0,6328,6339,3,918,459,0,6329,6330,
        4,458,81,0,6330,6332,5,741,0,0,6331,6333,5,676,0,0,6332,6331,1,0,
        0,0,6332,6333,1,0,0,0,6333,6334,1,0,0,0,6334,6339,3,1020,510,0,6335,
        6336,5,532,0,0,6336,6337,5,305,0,0,6337,6339,3,920,460,0,6338,6326,
        1,0,0,0,6338,6329,1,0,0,0,6338,6335,1,0,0,0,6338,6339,1,0,0,0,6339,
        917,1,0,0,0,6340,6346,5,282,0,0,6341,6347,3,310,155,0,6342,6343,
        5,32,0,0,6343,6344,3,1004,502,0,6344,6345,5,33,0,0,6345,6347,1,0,
        0,0,6346,6341,1,0,0,0,6346,6342,1,0,0,0,6347,6362,1,0,0,0,6348,6349,
        5,75,0,0,6349,6350,3,920,460,0,6350,6351,5,61,0,0,6351,6352,3,916,
        458,0,6352,6362,1,0,0,0,6353,6354,5,305,0,0,6354,6357,3,922,461,
        0,6355,6356,5,203,0,0,6356,6358,3,922,461,0,6357,6355,1,0,0,0,6357,
        6358,1,0,0,0,6358,6362,1,0,0,0,6359,6360,5,461,0,0,6360,6362,3,920,
        460,0,6361,6340,1,0,0,0,6361,6348,1,0,0,0,6361,6353,1,0,0,0,6361,
        6359,1,0,0,0,6362,919,1,0,0,0,6363,6364,6,460,-1,0,6364,6365,3,922,
        461,0,6365,6392,1,0,0,0,6366,6367,10,7,0,0,6367,6368,5,25,0,0,6368,
        6391,3,920,460,8,6369,6370,10,6,0,0,6370,6371,7,107,0,0,6371,6391,
        3,920,460,7,6372,6373,10,5,0,0,6373,6374,7,108,0,0,6374,6391,3,920,
        460,6,6375,6376,10,3,0,0,6376,6377,7,109,0,0,6377,6391,3,920,460,
        4,6378,6379,10,2,0,0,6379,6380,5,24,0,0,6380,6391,3,920,460,3,6381,
        6382,10,1,0,0,6382,6383,5,27,0,0,6383,6391,3,920,460,2,6384,6385,
        10,4,0,0,6385,6386,7,108,0,0,6386,6387,5,278,0,0,6387,6388,3,910,
        455,0,6388,6389,3,1012,506,0,6389,6391,1,0,0,0,6390,6366,1,0,0,0,
        6390,6369,1,0,0,0,6390,6372,1,0,0,0,6390,6375,1,0,0,0,6390,6378,
        1,0,0,0,6390,6381,1,0,0,0,6390,6384,1,0,0,0,6391,6394,1,0,0,0,6392,
        6390,1,0,0,0,6392,6393,1,0,0,0,6393,921,1,0,0,0,6394,6392,1,0,0,
        0,6395,6396,6,461,-1,0,6396,6398,3,1326,663,0,6397,6399,3,926,463,
        0,6398,6397,1,0,0,0,6398,6399,1,0,0,0,6399,6518,1,0,0,0,6400,6518,
        3,960,480,0,6401,6518,3,980,490,0,6402,6518,3,1432,716,0,6403,6518,
        5,43,0,0,6404,6518,3,990,495,0,6405,6518,3,988,494,0,6406,6518,3,
        928,464,0,6407,6518,3,930,465,0,6408,6518,3,932,466,0,6409,6410,
        7,110,0,0,6410,6518,3,922,461,15,6411,6412,3,1010,505,0,6412,6413,
        3,922,461,14,6413,6518,1,0,0,0,6414,6416,5,503,0,0,6415,6414,1,0,
        0,0,6415,6416,1,0,0,0,6416,6417,1,0,0,0,6417,6418,5,32,0,0,6418,
        6419,3,1004,502,0,6419,6420,5,33,0,0,6420,6518,1,0,0,0,6421,6423,
        5,209,0,0,6422,6421,1,0,0,0,6422,6423,1,0,0,0,6423,6424,1,0,0,0,
        6424,6518,3,310,155,0,6425,6426,5,34,0,0,6426,6427,3,1406,703,0,
        6427,6428,3,910,455,0,6428,6429,5,35,0,0,6429,6518,1,0,0,0,6430,
        6431,5,345,0,0,6431,6432,3,954,477,0,6432,6433,5,54,0,0,6433,6434,
        5,32,0,0,6434,6436,3,920,460,0,6435,6437,3,958,479,0,6436,6435,1,
        0,0,0,6436,6437,1,0,0,0,6437,6438,1,0,0,0,6438,6439,5,33,0,0,6439,
        6518,1,0,0,0,6440,6441,5,77,0,0,6441,6518,3,922,461,9,6442,6443,
        5,96,0,0,6443,6444,5,32,0,0,6444,6447,3,910,455,0,6445,6446,5,67,
        0,0,6446,6448,5,312,0,0,6447,6445,1,0,0,0,6447,6448,1,0,0,0,6448,
        6449,1,0,0,0,6449,6450,5,63,0,0,6450,6452,3,1002,501,0,6451,6453,
        3,924,462,0,6452,6451,1,0,0,0,6452,6453,1,0,0,0,6453,6454,1,0,0,
        0,6454,6455,5,33,0,0,6455,6518,1,0,0,0,6456,6457,5,96,0,0,6457,6458,
        5,32,0,0,6458,6459,3,910,455,0,6459,6460,5,67,0,0,6460,6461,5,595,
        0,0,6461,6463,5,760,0,0,6462,6464,5,278,0,0,6463,6462,1,0,0,0,6463,
        6464,1,0,0,0,6464,6465,1,0,0,0,6465,6466,3,1438,719,0,6466,6467,
        5,63,0,0,6467,6468,5,154,0,0,6468,6469,3,1184,592,0,6469,6470,5,
        33,0,0,6470,6518,1,0,0,0,6471,6473,5,95,0,0,6472,6474,3,910,455,
        0,6473,6472,1,0,0,0,6473,6474,1,0,0,0,6474,6478,1,0,0,0,6475,6476,
        3,996,498,0,6476,6477,3,998,499,0,6477,6479,1,0,0,0,6478,6475,1,
        0,0,0,6479,6480,1,0,0,0,6480,6478,1,0,0,0,6480,6481,1,0,0,0,6481,
        6483,1,0,0,0,6482,6484,3,1000,500,0,6483,6482,1,0,0,0,6483,6484,
        1,0,0,0,6484,6485,1,0,0,0,6485,6486,5,195,0,0,6486,6518,1,0,0,0,
        6487,6488,5,136,0,0,6488,6489,5,32,0,0,6489,6490,3,910,455,0,6490,
        6491,5,29,0,0,6491,6492,3,1002,501,0,6492,6493,5,33,0,0,6493,6518,
        1,0,0,0,6494,6495,5,136,0,0,6495,6496,5,32,0,0,6496,6497,3,910,455,
        0,6497,6498,5,630,0,0,6498,6499,3,1188,594,0,6499,6500,5,33,0,0,
        6500,6518,1,0,0,0,6501,6502,5,166,0,0,6502,6503,5,32,0,0,6503,6504,
        3,1414,707,0,6504,6505,5,33,0,0,6505,6518,1,0,0,0,6506,6507,5,635,
        0,0,6507,6508,5,32,0,0,6508,6509,3,1414,707,0,6509,6510,5,33,0,0,
        6510,6518,1,0,0,0,6511,6512,5,278,0,0,6512,6513,3,910,455,0,6513,
        6514,3,1012,506,0,6514,6515,5,14,0,0,6515,6516,3,910,455,0,6516,
        6518,1,0,0,0,6517,6395,1,0,0,0,6517,6400,1,0,0,0,6517,6401,1,0,0,
        0,6517,6402,1,0,0,0,6517,6403,1,0,0,0,6517,6404,1,0,0,0,6517,6405,
        1,0,0,0,6517,6406,1,0,0,0,6517,6407,1,0,0,0,6517,6408,1,0,0,0,6517,
        6409,1,0,0,0,6517,6411,1,0,0,0,6517,6415,1,0,0,0,6517,6422,1,0,0,
        0,6517,6425,1,0,0,0,6517,6430,1,0,0,0,6517,6440,1,0,0,0,6517,6442,
        1,0,0,0,6517,6456,1,0,0,0,6517,6471,1,0,0,0,6517,6487,1,0,0,0,6517,
        6494,1,0,0,0,6517,6501,1,0,0,0,6517,6506,1,0,0,0,6517,6511,1,0,0,
        0,6518,6527,1,0,0,0,6519,6520,10,16,0,0,6520,6521,5,2,0,0,6521,6526,
        3,922,461,17,6522,6523,10,24,0,0,6523,6524,5,112,0,0,6524,6526,3,
        1466,733,0,6525,6519,1,0,0,0,6525,6522,1,0,0,0,6526,6529,1,0,0,0,
        6527,6525,1,0,0,0,6527,6528,1,0,0,0,6528,923,1,0,0,0,6529,6527,1,
        0,0,0,6530,6531,4,462,91,0,6531,6532,5,739,0,0,6532,925,1,0,0,0,
        6533,6534,5,37,0,0,6534,6538,3,1438,719,0,6535,6536,5,38,0,0,6536,
        6538,3,1438,719,0,6537,6533,1,0,0,0,6537,6535,1,0,0,0,6538,927,1,
        0,0,0,6539,6540,5,71,0,0,6540,6542,5,32,0,0,6541,6543,5,180,0,0,
        6542,6541,1,0,0,0,6542,6543,1,0,0,0,6543,6544,1,0,0,0,6544,6545,
        3,952,476,0,6545,6547,5,33,0,0,6546,6548,3,940,470,0,6547,6546,1,
        0,0,0,6547,6548,1,0,0,0,6548,6625,1,0,0,0,6549,6550,7,111,0,0,6550,
        6551,5,32,0,0,6551,6552,3,952,476,0,6552,6554,5,33,0,0,6553,6555,
        3,940,470,0,6554,6553,1,0,0,0,6554,6555,1,0,0,0,6555,6625,1,0,0,
        0,6556,6625,3,950,475,0,6557,6558,5,792,0,0,6558,6560,5,32,0,0,6559,
        6561,5,180,0,0,6560,6559,1,0,0,0,6560,6561,1,0,0,0,6561,6562,1,0,
        0,0,6562,6563,3,952,476,0,6563,6565,5,33,0,0,6564,6566,3,940,470,
        0,6565,6564,1,0,0,0,6565,6566,1,0,0,0,6566,6625,1,0,0,0,6567,6568,
        5,137,0,0,6568,6576,5,32,0,0,6569,6571,5,57,0,0,6570,6569,1,0,0,
        0,6570,6571,1,0,0,0,6571,6572,1,0,0,0,6572,6577,5,16,0,0,6573,6577,
        3,952,476,0,6574,6575,5,180,0,0,6575,6577,3,1004,502,0,6576,6570,
        1,0,0,0,6576,6573,1,0,0,0,6576,6574,1,0,0,0,6577,6578,1,0,0,0,6578,
        6580,5,33,0,0,6579,6581,3,940,470,0,6580,6579,1,0,0,0,6580,6581,
        1,0,0,0,6581,6625,1,0,0,0,6582,6583,7,112,0,0,6583,6585,5,32,0,0,
        6584,6586,5,180,0,0,6585,6584,1,0,0,0,6585,6586,1,0,0,0,6586,6587,
        1,0,0,0,6587,6588,3,952,476,0,6588,6590,5,33,0,0,6589,6591,3,940,
        470,0,6590,6589,1,0,0,0,6590,6591,1,0,0,0,6591,6625,1,0,0,0,6592,
        6593,7,113,0,0,6593,6594,5,32,0,0,6594,6595,3,952,476,0,6595,6597,
        5,33,0,0,6596,6598,3,940,470,0,6597,6596,1,0,0,0,6597,6598,1,0,0,
        0,6598,6625,1,0,0,0,6599,6600,5,574,0,0,6600,6601,5,32,0,0,6601,
        6602,5,180,0,0,6602,6603,3,952,476,0,6603,6605,5,33,0,0,6604,6606,
        3,940,470,0,6605,6604,1,0,0,0,6605,6606,1,0,0,0,6606,6625,1,0,0,
        0,6607,6608,5,250,0,0,6608,6610,5,32,0,0,6609,6611,5,180,0,0,6610,
        6609,1,0,0,0,6610,6611,1,0,0,0,6611,6612,1,0,0,0,6612,6614,3,1004,
        502,0,6613,6615,3,360,180,0,6614,6613,1,0,0,0,6614,6615,1,0,0,0,
        6615,6618,1,0,0,0,6616,6617,5,513,0,0,6617,6619,3,1440,720,0,6618,
        6616,1,0,0,0,6618,6619,1,0,0,0,6619,6620,1,0,0,0,6620,6622,5,33,
        0,0,6621,6623,3,940,470,0,6622,6621,1,0,0,0,6622,6623,1,0,0,0,6623,
        6625,1,0,0,0,6624,6539,1,0,0,0,6624,6549,1,0,0,0,6624,6556,1,0,0,
        0,6624,6557,1,0,0,0,6624,6567,1,0,0,0,6624,6582,1,0,0,0,6624,6592,
        1,0,0,0,6624,6599,1,0,0,0,6624,6607,1,0,0,0,6625,929,1,0,0,0,6626,
        6627,5,680,0,0,6627,6628,5,32,0,0,6628,6629,3,1004,502,0,6629,6630,
        5,33,0,0,6630,931,1,0,0,0,6631,6632,7,114,0,0,6632,6633,3,1474,737,
        0,6633,6634,3,940,470,0,6634,6681,1,0,0,0,6635,6642,5,696,0,0,6636,
        6637,5,32,0,0,6637,6638,3,944,472,0,6638,6639,5,33,0,0,6639,6643,
        1,0,0,0,6640,6641,4,466,92,0,6641,6643,3,1020,510,0,6642,6636,1,
        0,0,0,6642,6640,1,0,0,0,6643,6644,1,0,0,0,6644,6645,3,940,470,0,
        6645,6681,1,0,0,0,6646,6647,7,115,0,0,6647,6648,5,32,0,0,6648,6650,
        3,910,455,0,6649,6651,3,942,471,0,6650,6649,1,0,0,0,6650,6651,1,
        0,0,0,6651,6652,1,0,0,0,6652,6654,5,33,0,0,6653,6655,3,948,474,0,
        6654,6653,1,0,0,0,6654,6655,1,0,0,0,6655,6656,1,0,0,0,6656,6657,
        3,940,470,0,6657,6681,1,0,0,0,6658,6659,7,116,0,0,6659,6661,3,1018,
        509,0,6660,6662,3,948,474,0,6661,6660,1,0,0,0,6661,6662,1,0,0,0,
        6662,6663,1,0,0,0,6663,6664,3,940,470,0,6664,6681,1,0,0,0,6665,6666,
        5,695,0,0,6666,6667,5,32,0,0,6667,6668,3,910,455,0,6668,6669,5,29,
        0,0,6669,6670,3,922,461,0,6670,6673,5,33,0,0,6671,6672,5,235,0,0,
        6672,6674,7,117,0,0,6673,6671,1,0,0,0,6673,6674,1,0,0,0,6674,6676,
        1,0,0,0,6675,6677,3,948,474,0,6676,6675,1,0,0,0,6676,6677,1,0,0,
        0,6677,6678,1,0,0,0,6678,6679,3,940,470,0,6679,6681,1,0,0,0,6680,
        6631,1,0,0,0,6680,6635,1,0,0,0,6680,6646,1,0,0,0,6680,6658,1,0,0,
        0,6680,6665,1,0,0,0,6681,933,1,0,0,0,6682,6683,7,118,0,0,6683,935,
        1,0,0,0,6684,6689,3,1422,711,0,6685,6686,5,39,0,0,6686,6689,3,1466,
        733,0,6687,6689,5,43,0,0,6688,6684,1,0,0,0,6688,6685,1,0,0,0,6688,
        6687,1,0,0,0,6689,937,1,0,0,0,6690,6691,4,469,93,0,6691,6692,5,816,
        0,0,6692,6693,3,934,467,0,6693,6694,5,32,0,0,6694,6695,3,936,468,
        0,6695,6696,5,33,0,0,6696,939,1,0,0,0,6697,6700,5,699,0,0,6698,6701,
        3,1402,701,0,6699,6701,3,334,167,0,6700,6698,1,0,0,0,6700,6699,1,
        0,0,0,6701,941,1,0,0,0,6702,6707,5,29,0,0,6703,6708,3,1422,711,0,
        6704,6708,5,43,0,0,6705,6706,4,471,94,0,6706,6708,3,944,472,0,6707,
        6703,1,0,0,0,6707,6704,1,0,0,0,6707,6705,1,0,0,0,6708,6711,1,0,0,
        0,6709,6710,5,29,0,0,6710,6712,3,910,455,0,6711,6709,1,0,0,0,6711,
        6712,1,0,0,0,6712,943,1,0,0,0,6713,6716,3,1456,728,0,6714,6716,3,
        946,473,0,6715,6713,1,0,0,0,6715,6714,1,0,0,0,6716,945,1,0,0,0,6717,
        6722,5,43,0,0,6718,6722,3,1406,703,0,6719,6720,5,39,0,0,6720,6722,
        3,1466,733,0,6721,6717,1,0,0,0,6721,6718,1,0,0,0,6721,6719,1,0,0,
        0,6722,947,1,0,0,0,6723,6724,7,119,0,0,6724,6725,5,697,0,0,6725,
        949,1,0,0,0,6726,6727,5,675,0,0,6727,6728,5,32,0,0,6728,6729,3,952,
        476,0,6729,6731,5,33,0,0,6730,6732,3,940,470,0,6731,6730,1,0,0,0,
        6731,6732,1,0,0,0,6732,6743,1,0,0,0,6733,6734,5,674,0,0,6734,6735,
        5,32,0,0,6735,6736,3,952,476,0,6736,6737,5,29,0,0,6737,6738,3,952,
        476,0,6738,6740,5,33,0,0,6739,6741,3,940,470,0,6740,6739,1,0,0,0,
        6740,6741,1,0,0,0,6741,6743,1,0,0,0,6742,6726,1,0,0,0,6742,6733,
        1,0,0,0,6743,951,1,0,0,0,6744,6746,5,57,0,0,6745,6744,1,0,0,0,6745,
        6746,1,0,0,0,6746,6747,1,0,0,0,6747,6748,3,910,455,0,6748,953,1,
        0,0,0,6749,6755,3,956,478,0,6750,6751,5,32,0,0,6751,6752,3,956,478,
        0,6752,6753,5,33,0,0,6753,6755,1,0,0,0,6754,6749,1,0,0,0,6754,6750,
        1,0,0,0,6755,955,1,0,0,0,6756,6761,3,1414,707,0,6757,6758,5,29,0,
        0,6758,6760,3,1414,707,0,6759,6757,1,0,0,0,6760,6763,1,0,0,0,6761,
        6759,1,0,0,0,6761,6762,1,0,0,0,6762,957,1,0,0,0,6763,6761,1,0,0,
        0,6764,6765,5,282,0,0,6765,6766,5,85,0,0,6766,6780,5,369,0,0,6767,
        6768,5,282,0,0,6768,6769,5,382,0,0,6769,6770,5,297,0,0,6770,6774,
        5,369,0,0,6771,6772,5,653,0,0,6772,6773,5,448,0,0,6773,6775,5,211,
        0,0,6774,6771,1,0,0,0,6774,6775,1,0,0,0,6775,6780,1,0,0,0,6776,6777,
        5,653,0,0,6777,6778,5,448,0,0,6778,6780,5,211,0,0,6779,6764,1,0,
        0,0,6779,6767,1,0,0,0,6779,6776,1,0,0,0,6780,959,1,0,0,0,6781,6782,
        5,103,0,0,6782,6783,5,32,0,0,6783,6786,3,1004,502,0,6784,6785,5,
        630,0,0,6785,6787,3,1188,594,0,6786,6784,1,0,0,0,6786,6787,1,0,0,
        0,6787,6788,1,0,0,0,6788,6789,5,33,0,0,6789,7065,1,0,0,0,6790,6792,
        5,146,0,0,6791,6793,3,1474,737,0,6792,6791,1,0,0,0,6792,6793,1,0,
        0,0,6793,7065,1,0,0,0,6794,6795,5,157,0,0,6795,7065,3,1018,509,0,
        6796,6797,5,162,0,0,6797,7065,3,1018,509,0,6798,6799,5,261,0,0,6799,
        7065,3,1018,509,0,6800,6801,5,274,0,0,6801,6802,5,32,0,0,6802,6803,
        3,910,455,0,6803,6804,5,29,0,0,6804,6805,3,910,455,0,6805,6806,5,
        29,0,0,6806,6807,3,910,455,0,6807,6808,5,29,0,0,6808,6809,3,910,
        455,0,6809,6810,5,33,0,0,6810,7065,1,0,0,0,6811,6812,5,278,0,0,6812,
        6813,5,32,0,0,6813,6816,3,910,455,0,6814,6815,5,29,0,0,6815,6817,
        3,910,455,0,6816,6814,1,0,0,0,6817,6818,1,0,0,0,6818,6816,1,0,0,
        0,6818,6819,1,0,0,0,6819,6820,1,0,0,0,6820,6821,5,33,0,0,6821,7065,
        1,0,0,0,6822,6823,5,754,0,0,6823,6824,5,32,0,0,6824,6825,3,922,461,
        0,6825,6826,5,29,0,0,6826,6828,3,1444,722,0,6827,6829,3,962,481,
        0,6828,6827,1,0,0,0,6828,6829,1,0,0,0,6829,6830,1,0,0,0,6830,6831,
        3,420,210,0,6831,6832,5,33,0,0,6832,7065,1,0,0,0,6833,6834,5,302,
        0,0,6834,6835,5,32,0,0,6835,6836,3,910,455,0,6836,6837,5,29,0,0,
        6837,6838,3,910,455,0,6838,6839,5,33,0,0,6839,7065,1,0,0,0,6840,
        6841,5,366,0,0,6841,7065,3,1018,509,0,6842,6843,5,373,0,0,6843,7065,
        3,1018,509,0,6844,6845,5,495,0,0,6845,6846,5,32,0,0,6846,6847,3,
        910,455,0,6847,6848,5,29,0,0,6848,6849,3,910,455,0,6849,6850,5,33,
        0,0,6850,7065,1,0,0,0,6851,6852,5,509,0,0,6852,7065,3,1018,509,0,
        6853,6854,5,595,0,0,6854,7065,3,1018,509,0,6855,6856,5,592,0,0,6856,
        6857,5,32,0,0,6857,6860,3,910,455,0,6858,6859,5,29,0,0,6859,6861,
        3,910,455,0,6860,6858,1,0,0,0,6860,6861,1,0,0,0,6861,6862,1,0,0,
        0,6862,6863,5,33,0,0,6863,7065,1,0,0,0,6864,7065,3,976,488,0,6865,
        7065,3,628,314,0,6866,6867,5,635,0,0,6867,7065,3,1018,509,0,6868,
        6869,5,664,0,0,6869,7065,3,1018,509,0,6870,6871,7,120,0,0,6871,6872,
        5,32,0,0,6872,6873,3,910,455,0,6873,6879,5,29,0,0,6874,6880,3,910,
        455,0,6875,6876,5,278,0,0,6876,6877,3,910,455,0,6877,6878,3,1012,
        506,0,6878,6880,1,0,0,0,6879,6874,1,0,0,0,6879,6875,1,0,0,0,6880,
        6881,1,0,0,0,6881,6882,5,33,0,0,6882,7065,1,0,0,0,6883,6885,5,142,
        0,0,6884,6886,3,1474,737,0,6885,6884,1,0,0,0,6885,6886,1,0,0,0,6886,
        7065,1,0,0,0,6887,6889,5,149,0,0,6888,6890,3,966,483,0,6889,6888,
        1,0,0,0,6889,6890,1,0,0,0,6890,7065,1,0,0,0,6891,6892,7,121,0,0,
        6892,6893,5,32,0,0,6893,6894,3,910,455,0,6894,6895,5,29,0,0,6895,
        6896,5,278,0,0,6896,6897,3,910,455,0,6897,6898,3,1012,506,0,6898,
        6899,5,33,0,0,6899,7065,1,0,0,0,6900,6901,5,217,0,0,6901,6902,5,
        32,0,0,6902,6903,3,1012,506,0,6903,6904,5,235,0,0,6904,6905,3,910,
        455,0,6905,6906,5,33,0,0,6906,7065,1,0,0,0,6907,6908,5,245,0,0,6908,
        6909,5,32,0,0,6909,6910,3,974,487,0,6910,6911,5,29,0,0,6911,6912,
        3,910,455,0,6912,6913,5,33,0,0,6913,7065,1,0,0,0,6914,6915,4,480,
        95,0,6915,6916,5,808,0,0,6916,6917,5,32,0,0,6917,6920,3,910,455,
        0,6918,6919,5,29,0,0,6919,6921,3,910,455,0,6920,6918,1,0,0,0,6920,
        6921,1,0,0,0,6921,6922,1,0,0,0,6922,6923,5,33,0,0,6923,7065,1,0,
        0,0,6924,6926,5,391,0,0,6925,6927,3,966,483,0,6926,6925,1,0,0,0,
        6926,6927,1,0,0,0,6927,7065,1,0,0,0,6928,6929,5,432,0,0,6929,6930,
        5,32,0,0,6930,6931,3,920,460,0,6931,6932,5,282,0,0,6932,6933,3,910,
        455,0,6933,6934,5,33,0,0,6934,7065,1,0,0,0,6935,7065,3,978,489,0,
        6936,6938,5,579,0,0,6937,6939,3,966,483,0,6938,6937,1,0,0,0,6938,
        6939,1,0,0,0,6939,7065,1,0,0,0,6940,6941,7,122,0,0,6941,6942,5,32,
        0,0,6942,6943,3,1014,507,0,6943,6944,5,29,0,0,6944,6945,3,910,455,
        0,6945,6946,5,29,0,0,6946,6947,3,910,455,0,6947,6948,5,33,0,0,6948,
        7065,1,0,0,0,6949,6951,5,631,0,0,6950,6952,3,1474,737,0,6951,6950,
        1,0,0,0,6951,6952,1,0,0,0,6952,7065,1,0,0,0,6953,6955,5,633,0,0,
        6954,6956,3,966,483,0,6955,6954,1,0,0,0,6955,6956,1,0,0,0,6956,7065,
        1,0,0,0,6957,6959,5,632,0,0,6958,6960,3,966,483,0,6959,6958,1,0,
        0,0,6959,6960,1,0,0,0,6960,7065,1,0,0,0,6961,6962,5,65,0,0,6962,
        7065,3,1018,509,0,6963,6964,5,102,0,0,6964,7065,3,1018,509,0,6965,
        6966,5,110,0,0,6966,7065,3,1016,508,0,6967,6968,5,113,0,0,6968,7065,
        3,1018,509,0,6969,6970,5,150,0,0,6970,7065,3,1474,737,0,6971,6972,
        5,263,0,0,6972,6973,5,32,0,0,6973,6974,3,910,455,0,6974,6975,5,29,
        0,0,6975,6976,3,910,455,0,6976,6977,5,29,0,0,6977,6978,3,910,455,
        0,6978,6979,5,33,0,0,6979,7065,1,0,0,0,6980,6981,5,233,0,0,6981,
        6982,5,32,0,0,6982,6983,3,910,455,0,6983,6984,5,29,0,0,6984,6987,
        3,910,455,0,6985,6986,5,29,0,0,6986,6988,3,910,455,0,6987,6985,1,
        0,0,0,6987,6988,1,0,0,0,6988,6989,1,0,0,0,6989,6990,5,33,0,0,6990,
        7065,1,0,0,0,6991,6992,5,361,0,0,6992,7065,3,1018,509,0,6993,6994,
        5,372,0,0,6994,6995,5,32,0,0,6995,6996,3,910,455,0,6996,6997,5,29,
        0,0,6997,6998,3,910,455,0,6998,6999,5,33,0,0,6999,7065,1,0,0,0,7000,
        7001,4,480,96,0,7001,7002,5,424,0,0,7002,7065,3,1018,509,0,7003,
        7004,5,447,0,0,7004,7065,3,1018,509,0,7005,7006,5,474,0,0,7006,7007,
        5,32,0,0,7007,7008,3,910,455,0,7008,7009,5,29,0,0,7009,7010,3,910,
        455,0,7010,7011,5,33,0,0,7011,7065,1,0,0,0,7012,7013,5,475,0,0,7013,
        7014,5,32,0,0,7014,7015,3,910,455,0,7015,7016,5,29,0,0,7016,7017,
        3,910,455,0,7017,7018,5,29,0,0,7018,7019,3,910,455,0,7019,7020,5,
        33,0,0,7020,7065,1,0,0,0,7021,7022,5,493,0,0,7022,7065,3,1018,509,
        0,7023,7024,5,501,0,0,7024,7065,3,1474,737,0,7025,7026,5,606,0,0,
        7026,7027,5,32,0,0,7027,7028,3,910,455,0,7028,7029,5,29,0,0,7029,
        7030,3,910,455,0,7030,7031,5,33,0,0,7031,7065,1,0,0,0,7032,7033,
        5,648,0,0,7033,7034,5,32,0,0,7034,7037,3,910,455,0,7035,7036,5,29,
        0,0,7036,7038,3,910,455,0,7037,7035,1,0,0,0,7037,7038,1,0,0,0,7038,
        7039,1,0,0,0,7039,7040,5,33,0,0,7040,7065,1,0,0,0,7041,7042,5,649,
        0,0,7042,7043,5,32,0,0,7043,7059,3,910,455,0,7044,7045,5,63,0,0,
        7045,7046,5,103,0,0,7046,7048,3,1182,591,0,7047,7044,1,0,0,0,7047,
        7048,1,0,0,0,7048,7060,1,0,0,0,7049,7050,5,63,0,0,7050,7051,5,77,
        0,0,7051,7060,3,1182,591,0,7052,7053,5,29,0,0,7053,7054,3,1418,709,
        0,7054,7055,5,29,0,0,7055,7056,3,1418,709,0,7056,7057,5,29,0,0,7057,
        7058,3,1418,709,0,7058,7060,1,0,0,0,7059,7047,1,0,0,0,7059,7049,
        1,0,0,0,7059,7052,1,0,0,0,7060,7061,1,0,0,0,7061,7062,5,33,0,0,7062,
        7065,1,0,0,0,7063,7065,3,964,482,0,7064,6781,1,0,0,0,7064,6790,1,
        0,0,0,7064,6794,1,0,0,0,7064,6796,1,0,0,0,7064,6798,1,0,0,0,7064,
        6800,1,0,0,0,7064,6811,1,0,0,0,7064,6822,1,0,0,0,7064,6833,1,0,0,
        0,7064,6840,1,0,0,0,7064,6842,1,0,0,0,7064,6844,1,0,0,0,7064,6851,
        1,0,0,0,7064,6853,1,0,0,0,7064,6855,1,0,0,0,7064,6864,1,0,0,0,7064,
        6865,1,0,0,0,7064,6866,1,0,0,0,7064,6868,1,0,0,0,7064,6870,1,0,0,
        0,7064,6883,1,0,0,0,7064,6887,1,0,0,0,7064,6891,1,0,0,0,7064,6900,
        1,0,0,0,7064,6907,1,0,0,0,7064,6914,1,0,0,0,7064,6924,1,0,0,0,7064,
        6928,1,0,0,0,7064,6935,1,0,0,0,7064,6936,1,0,0,0,7064,6940,1,0,0,
        0,7064,6949,1,0,0,0,7064,6953,1,0,0,0,7064,6957,1,0,0,0,7064,6961,
        1,0,0,0,7064,6963,1,0,0,0,7064,6965,1,0,0,0,7064,6967,1,0,0,0,7064,
        6969,1,0,0,0,7064,6971,1,0,0,0,7064,6980,1,0,0,0,7064,6991,1,0,0,
        0,7064,6993,1,0,0,0,7064,7000,1,0,0,0,7064,7003,1,0,0,0,7064,7005,
        1,0,0,0,7064,7012,1,0,0,0,7064,7021,1,0,0,0,7064,7023,1,0,0,0,7064,
        7025,1,0,0,0,7064,7032,1,0,0,0,7064,7041,1,0,0,0,7064,7063,1,0,0,
        0,7065,961,1,0,0,0,7066,7067,5,753,0,0,7067,7068,3,1002,501,0,7068,
        963,1,0,0,0,7069,7070,5,243,0,0,7070,7072,5,32,0,0,7071,7073,3,1004,
        502,0,7072,7071,1,0,0,0,7072,7073,1,0,0,0,7073,7074,1,0,0,0,7074,
        7093,5,33,0,0,7075,7076,5,309,0,0,7076,7093,3,1016,508,0,7077,7078,
        5,374,0,0,7078,7093,3,1016,508,0,7079,7080,5,375,0,0,7080,7093,3,
        1016,508,0,7081,7082,5,376,0,0,7082,7093,3,1016,508,0,7083,7084,
        5,429,0,0,7084,7085,5,32,0,0,7085,7086,3,910,455,0,7086,7087,5,29,
        0,0,7087,7088,3,910,455,0,7088,7089,5,33,0,0,7089,7093,1,0,0,0,7090,
        7091,5,430,0,0,7091,7093,3,1016,508,0,7092,7069,1,0,0,0,7092,7075,
        1,0,0,0,7092,7077,1,0,0,0,7092,7079,1,0,0,0,7092,7081,1,0,0,0,7092,
        7083,1,0,0,0,7092,7090,1,0,0,0,7093,965,1,0,0,0,7094,7096,5,32,0,
        0,7095,7097,3,968,484,0,7096,7095,1,0,0,0,7096,7097,1,0,0,0,7097,
        7098,1,0,0,0,7098,7099,5,33,0,0,7099,967,1,0,0,0,7100,7101,5,3,0,
        0,7101,969,1,0,0,0,7102,7115,5,304,0,0,7103,7104,3,1420,710,0,7104,
        7105,5,15,0,0,7105,7106,3,1420,710,0,7106,7116,1,0,0,0,7107,7112,
        3,972,486,0,7108,7109,5,29,0,0,7109,7111,3,972,486,0,7110,7108,1,
        0,0,0,7111,7114,1,0,0,0,7112,7110,1,0,0,0,7112,7113,1,0,0,0,7113,
        7116,1,0,0,0,7114,7112,1,0,0,0,7115,7103,1,0,0,0,7115,7107,1,0,0,
        0,7116,971,1,0,0,0,7117,7123,3,1420,710,0,7118,7120,7,35,0,0,7119,
        7121,5,493,0,0,7120,7119,1,0,0,0,7120,7121,1,0,0,0,7121,7124,1,0,
        0,0,7122,7124,5,493,0,0,7123,7118,1,0,0,0,7123,7122,1,0,0,0,7123,
        7124,1,0,0,0,7124,973,1,0,0,0,7125,7126,7,123,0,0,7126,975,1,0,0,
        0,7127,7128,5,604,0,0,7128,7152,5,32,0,0,7129,7132,3,910,455,0,7130,
        7131,5,235,0,0,7131,7133,3,910,455,0,7132,7130,1,0,0,0,7132,7133,
        1,0,0,0,7133,7153,1,0,0,0,7134,7136,5,299,0,0,7135,7137,3,910,455,
        0,7136,7135,1,0,0,0,7136,7137,1,0,0,0,7137,7138,1,0,0,0,7138,7139,
        5,235,0,0,7139,7153,3,910,455,0,7140,7142,5,600,0,0,7141,7143,3,
        910,455,0,7142,7141,1,0,0,0,7142,7143,1,0,0,0,7143,7144,1,0,0,0,
        7144,7145,5,235,0,0,7145,7153,3,910,455,0,7146,7148,5,87,0,0,7147,
        7149,3,910,455,0,7148,7147,1,0,0,0,7148,7149,1,0,0,0,7149,7150,1,
        0,0,0,7150,7151,5,235,0,0,7151,7153,3,910,455,0,7152,7129,1,0,0,
        0,7152,7134,1,0,0,0,7152,7140,1,0,0,0,7152,7146,1,0,0,0,7153,7154,
        1,0,0,0,7154,7155,5,33,0,0,7155,977,1,0,0,0,7156,7157,5,573,0,0,
        7157,7158,5,32,0,0,7158,7171,3,910,455,0,7159,7160,5,29,0,0,7160,
        7163,3,910,455,0,7161,7162,5,29,0,0,7162,7164,3,910,455,0,7163,7161,
        1,0,0,0,7163,7164,1,0,0,0,7164,7172,1,0,0,0,7165,7166,5,235,0,0,
        7166,7169,3,910,455,0,7167,7168,5,232,0,0,7168,7170,3,910,455,0,
        7169,7167,1,0,0,0,7169,7170,1,0,0,0,7170,7172,1,0,0,0,7171,7159,
        1,0,0,0,7171,7165,1,0,0,0,7172,7173,1,0,0,0,7173,7174,5,33,0,0,7174,
        979,1,0,0,0,7175,7176,3,1404,702,0,7176,7178,5,32,0,0,7177,7179,
        3,982,491,0,7178,7177,1,0,0,0,7178,7179,1,0,0,0,7179,7180,1,0,0,
        0,7180,7181,5,33,0,0,7181,7190,1,0,0,0,7182,7183,3,1412,706,0,7183,
        7185,5,32,0,0,7184,7186,3,1004,502,0,7185,7184,1,0,0,0,7185,7186,
        1,0,0,0,7186,7187,1,0,0,0,7187,7188,5,33,0,0,7188,7190,1,0,0,0,7189,
        7175,1,0,0,0,7189,7182,1,0,0,0,7190,981,1,0,0,0,7191,7196,3,984,
        492,0,7192,7193,5,29,0,0,7193,7195,3,984,492,0,7194,7192,1,0,0,0,
        7195,7198,1,0,0,0,7196,7194,1,0,0,0,7196,7197,1,0,0,0,7197,983,1,
        0,0,0,7198,7196,1,0,0,0,7199,7201,3,910,455,0,7200,7202,3,388,194,
        0,7201,7200,1,0,0,0,7201,7202,1,0,0,0,7202,985,1,0,0,0,7203,7204,
        5,39,0,0,7204,7207,3,1466,733,0,7205,7207,5,40,0,0,7206,7203,1,0,
        0,0,7206,7205,1,0,0,0,7207,987,1,0,0,0,7208,7209,3,986,493,0,7209,
        7210,5,7,0,0,7210,7211,3,910,455,0,7211,989,1,0,0,0,7212,7219,3,
        986,493,0,7213,7215,5,41,0,0,7214,7216,3,1480,740,0,7215,7214,1,
        0,0,0,7215,7216,1,0,0,0,7216,7217,1,0,0,0,7217,7219,3,994,497,0,
        7218,7212,1,0,0,0,7218,7213,1,0,0,0,7219,991,1,0,0,0,7220,7222,3,
        1406,703,0,7221,7223,3,1416,708,0,7222,7221,1,0,0,0,7222,7223,1,
        0,0,0,7223,7230,1,0,0,0,7224,7225,4,496,97,0,7225,7227,3,1468,734,
        0,7226,7228,3,1416,708,0,7227,7226,1,0,0,0,7227,7228,1,0,0,0,7228,
        7230,1,0,0,0,7229,7220,1,0,0,0,7229,7224,1,0,0,0,7230,7234,1,0,0,
        0,7231,7232,5,166,0,0,7232,7234,3,1416,708,0,7233,7229,1,0,0,0,7233,
        7231,1,0,0,0,7234,993,1,0,0,0,7235,7237,3,1466,733,0,7236,7238,3,
        1416,708,0,7237,7236,1,0,0,0,7237,7238,1,0,0,0,7238,995,1,0,0,0,
        7239,7240,5,650,0,0,7240,7241,3,910,455,0,7241,997,1,0,0,0,7242,
        7243,5,591,0,0,7243,7244,3,910,455,0,7244,999,1,0,0,0,7245,7246,
        5,190,0,0,7246,7247,3,910,455,0,7247,1001,1,0,0,0,7248,7250,5,77,
        0,0,7249,7251,3,1172,586,0,7250,7249,1,0,0,0,7250,7251,1,0,0,0,7251,
        7297,1,0,0,0,7252,7254,5,103,0,0,7253,7255,3,1172,586,0,7254,7253,
        1,0,0,0,7254,7255,1,0,0,0,7255,7257,1,0,0,0,7256,7258,3,1176,588,
        0,7257,7256,1,0,0,0,7257,7258,1,0,0,0,7258,7297,1,0,0,0,7259,7261,
        3,1168,584,0,7260,7262,3,1172,586,0,7261,7260,1,0,0,0,7261,7262,
        1,0,0,0,7262,7297,1,0,0,0,7263,7265,5,524,0,0,7264,7266,5,280,0,
        0,7265,7264,1,0,0,0,7265,7266,1,0,0,0,7266,7297,1,0,0,0,7267,7269,
        5,621,0,0,7268,7270,5,280,0,0,7269,7268,1,0,0,0,7269,7270,1,0,0,
        0,7270,7297,1,0,0,0,7271,7297,5,157,0,0,7272,7273,4,501,98,0,7273,
        7297,5,664,0,0,7274,7276,5,595,0,0,7275,7277,3,1184,592,0,7276,7275,
        1,0,0,0,7276,7277,1,0,0,0,7277,7297,1,0,0,0,7278,7280,5,154,0,0,
        7279,7281,3,1184,592,0,7280,7279,1,0,0,0,7280,7281,1,0,0,0,7281,
        7297,1,0,0,0,7282,7284,5,164,0,0,7283,7285,3,1460,730,0,7284,7283,
        1,0,0,0,7284,7285,1,0,0,0,7285,7297,1,0,0,0,7286,7297,5,292,0,0,
        7287,7288,4,501,99,0,7288,7297,3,1170,585,0,7289,7290,4,501,100,
        0,7290,7292,5,227,0,0,7291,7293,3,1462,731,0,7292,7291,1,0,0,0,7292,
        7293,1,0,0,0,7293,7297,1,0,0,0,7294,7295,4,501,101,0,7295,7297,7,
        124,0,0,7296,7248,1,0,0,0,7296,7252,1,0,0,0,7296,7259,1,0,0,0,7296,
        7263,1,0,0,0,7296,7267,1,0,0,0,7296,7271,1,0,0,0,7296,7272,1,0,0,
        0,7296,7274,1,0,0,0,7296,7278,1,0,0,0,7296,7282,1,0,0,0,7296,7286,
        1,0,0,0,7296,7287,1,0,0,0,7296,7289,1,0,0,0,7296,7294,1,0,0,0,7297,
        1003,1,0,0,0,7298,7303,3,910,455,0,7299,7300,5,29,0,0,7300,7302,
        3,910,455,0,7301,7299,1,0,0,0,7302,7305,1,0,0,0,7303,7301,1,0,0,
        0,7303,7304,1,0,0,0,7304,1005,1,0,0,0,7305,7303,1,0,0,0,7306,7307,
        5,103,0,0,7307,7310,5,519,0,0,7308,7310,5,102,0,0,7309,7306,1,0,
        0,0,7309,7308,1,0,0,0,7310,1007,1,0,0,0,7311,7312,7,125,0,0,7312,
        1009,1,0,0,0,7313,7314,7,126,0,0,7314,1011,1,0,0,0,7315,7318,3,1014,
        507,0,7316,7318,7,127,0,0,7317,7315,1,0,0,0,7317,7316,1,0,0,0,7318,
        1013,1,0,0,0,7319,7320,7,128,0,0,7320,1015,1,0,0,0,7321,7322,5,32,
        0,0,7322,7323,3,1004,502,0,7323,7324,5,33,0,0,7324,1017,1,0,0,0,
        7325,7326,5,32,0,0,7326,7327,3,910,455,0,7327,7328,5,33,0,0,7328,
        1019,1,0,0,0,7329,7330,5,32,0,0,7330,7331,3,922,461,0,7331,7332,
        5,33,0,0,7332,1021,1,0,0,0,7333,7338,3,1024,512,0,7334,7335,5,29,
        0,0,7335,7337,3,1024,512,0,7336,7334,1,0,0,0,7337,7340,1,0,0,0,7338,
        7336,1,0,0,0,7338,7339,1,0,0,0,7339,1023,1,0,0,0,7340,7338,1,0,0,
        0,7341,7343,3,910,455,0,7342,7344,3,362,181,0,7343,7342,1,0,0,0,
        7343,7344,1,0,0,0,7344,1025,1,0,0,0,7345,7350,3,1028,514,0,7346,
        7347,5,29,0,0,7347,7349,3,1028,514,0,7348,7346,1,0,0,0,7349,7352,
        1,0,0,0,7350,7348,1,0,0,0,7350,7351,1,0,0,0,7351,1027,1,0,0,0,7352,
        7350,1,0,0,0,7353,7354,3,910,455,0,7354,1029,1,0,0,0,7355,7356,5,
        232,0,0,7356,7357,5,101,0,0,7357,7358,3,1446,723,0,7358,1031,1,0,
        0,0,7359,7373,3,2,1,0,7360,7373,3,1034,517,0,7361,7373,3,1036,518,
        0,7362,7373,3,1044,522,0,7363,7373,3,1048,524,0,7364,7373,3,1050,
        525,0,7365,7373,3,1056,528,0,7366,7373,3,1058,529,0,7367,7373,3,
        1086,543,0,7368,7373,3,1084,542,0,7369,7373,3,1104,552,0,7370,7373,
        3,1108,554,0,7371,7373,3,1106,553,0,7372,7359,1,0,0,0,7372,7360,
        1,0,0,0,7372,7361,1,0,0,0,7372,7362,1,0,0,0,7372,7363,1,0,0,0,7372,
        7364,1,0,0,0,7372,7365,1,0,0,0,7372,7366,1,0,0,0,7372,7367,1,0,0,
        0,7372,7368,1,0,0,0,7372,7369,1,0,0,0,7372,7370,1,0,0,0,7372,7371,
        1,0,0,0,7373,1033,1,0,0,0,7374,7375,5,492,0,0,7375,7376,3,910,455,
        0,7376,1035,1,0,0,0,7377,7378,5,263,0,0,7378,7379,3,1038,519,0,7379,
        7380,5,195,0,0,7380,7381,5,263,0,0,7381,1037,1,0,0,0,7382,7383,3,
        910,455,0,7383,7388,3,1040,520,0,7384,7385,5,191,0,0,7385,7389,3,
        1038,519,0,7386,7387,5,190,0,0,7387,7389,3,1042,521,0,7388,7384,
        1,0,0,0,7388,7386,1,0,0,0,7388,7389,1,0,0,0,7389,1039,1,0,0,0,7390,
        7391,5,591,0,0,7391,7392,3,1042,521,0,7392,1041,1,0,0,0,7393,7394,
        3,1032,516,0,7394,7395,5,30,0,0,7395,7397,1,0,0,0,7396,7393,1,0,
        0,0,7397,7398,1,0,0,0,7398,7396,1,0,0,0,7398,7399,1,0,0,0,7399,1043,
        1,0,0,0,7400,7402,5,95,0,0,7401,7403,3,910,455,0,7402,7401,1,0,0,
        0,7402,7403,1,0,0,0,7403,7407,1,0,0,0,7404,7405,3,996,498,0,7405,
        7406,3,1040,520,0,7406,7408,1,0,0,0,7407,7404,1,0,0,0,7408,7409,
        1,0,0,0,7409,7407,1,0,0,0,7409,7410,1,0,0,0,7410,7412,1,0,0,0,7411,
        7413,3,1046,523,0,7412,7411,1,0,0,0,7412,7413,1,0,0,0,7413,7414,
        1,0,0,0,7414,7415,5,195,0,0,7415,7416,5,95,0,0,7416,1045,1,0,0,0,
        7417,7418,5,190,0,0,7418,7419,3,1042,521,0,7419,1047,1,0,0,0,7420,
        7421,3,1052,526,0,7421,7423,3,1054,527,0,7422,7424,3,1392,696,0,
        7423,7422,1,0,0,0,7423,7424,1,0,0,0,7424,1049,1,0,0,0,7425,7426,
        3,1054,527,0,7426,1051,1,0,0,0,7427,7428,3,1390,695,0,7428,7429,
        5,31,0,0,7429,1053,1,0,0,0,7430,7432,5,74,0,0,7431,7433,3,1066,533,
        0,7432,7431,1,0,0,0,7432,7433,1,0,0,0,7433,7435,1,0,0,0,7434,7436,
        3,1042,521,0,7435,7434,1,0,0,0,7435,7436,1,0,0,0,7436,7437,1,0,0,
        0,7437,7438,5,195,0,0,7438,1055,1,0,0,0,7439,7440,3,1052,526,0,7440,
        7442,3,1058,529,0,7441,7443,3,1392,696,0,7442,7441,1,0,0,0,7442,
        7443,1,0,0,0,7443,1057,1,0,0,0,7444,7448,3,1060,530,0,7445,7448,
        3,1062,531,0,7446,7448,3,1064,532,0,7447,7444,1,0,0,0,7447,7445,
        1,0,0,0,7447,7446,1,0,0,0,7448,1059,1,0,0,0,7449,7450,5,320,0,0,
        7450,7451,3,1042,521,0,7451,7452,5,195,0,0,7452,7453,5,320,0,0,7453,
        1061,1,0,0,0,7454,7455,5,652,0,0,7455,7456,3,910,455,0,7456,7457,
        5,183,0,0,7457,7458,3,1042,521,0,7458,7459,5,195,0,0,7459,7460,5,
        652,0,0,7460,1063,1,0,0,0,7461,7462,5,474,0,0,7462,7463,3,1042,521,
        0,7463,7464,5,622,0,0,7464,7465,3,910,455,0,7465,7466,5,195,0,0,
        7466,7467,5,474,0,0,7467,1065,1,0,0,0,7468,7469,3,1068,534,0,7469,
        7470,5,30,0,0,7470,7472,1,0,0,0,7471,7468,1,0,0,0,7472,7473,1,0,
        0,0,7473,7471,1,0,0,0,7473,7474,1,0,0,0,7474,1067,1,0,0,0,7475,7480,
        3,1070,535,0,7476,7480,3,1072,536,0,7477,7480,3,1078,539,0,7478,
        7480,3,1082,541,0,7479,7475,1,0,0,0,7479,7476,1,0,0,0,7479,7477,
        1,0,0,0,7479,7478,1,0,0,0,7480,1069,1,0,0,0,7481,7482,5,165,0,0,
        7482,7483,3,1408,704,0,7483,7485,3,1166,583,0,7484,7486,3,1248,624,
        0,7485,7484,1,0,0,0,7485,7486,1,0,0,0,7486,7489,1,0,0,0,7487,7488,
        5,166,0,0,7488,7490,3,910,455,0,7489,7487,1,0,0,0,7489,7490,1,0,
        0,0,7490,1071,1,0,0,0,7491,7492,5,165,0,0,7492,7493,3,1406,703,0,
        7493,7494,5,126,0,0,7494,7495,5,232,0,0,7495,7496,3,1074,537,0,7496,
        1073,1,0,0,0,7497,7500,3,1418,709,0,7498,7500,3,1076,538,0,7499,
        7497,1,0,0,0,7499,7498,1,0,0,0,7500,1075,1,0,0,0,7501,7503,5,537,
        0,0,7502,7504,5,636,0,0,7503,7502,1,0,0,0,7503,7504,1,0,0,0,7504,
        7505,1,0,0,0,7505,7506,3,1444,722,0,7506,1077,1,0,0,0,7507,7508,
        5,165,0,0,7508,7509,7,129,0,0,7509,7510,5,251,0,0,7510,7511,5,232,
        0,0,7511,7516,3,1080,540,0,7512,7513,5,29,0,0,7513,7515,3,1080,540,
        0,7514,7512,1,0,0,0,7515,7518,1,0,0,0,7516,7514,1,0,0,0,7516,7517,
        1,0,0,0,7517,7519,1,0,0,0,7518,7516,1,0,0,0,7519,7520,3,1032,516,
        0,7520,1079,1,0,0,0,7521,7529,3,1074,537,0,7522,7529,3,1406,703,
        0,7523,7529,5,538,0,0,7524,7525,3,1008,504,0,7525,7526,5,234,0,0,
        7526,7529,1,0,0,0,7527,7529,5,536,0,0,7528,7521,1,0,0,0,7528,7522,
        1,0,0,0,7528,7523,1,0,0,0,7528,7524,1,0,0,0,7528,7527,1,0,0,0,7529,
        1081,1,0,0,0,7530,7531,5,165,0,0,7531,7532,3,1406,703,0,7532,7533,
        5,147,0,0,7533,7534,5,232,0,0,7534,7535,3,296,148,0,7535,1083,1,
        0,0,0,7536,7537,5,290,0,0,7537,7538,3,1392,696,0,7538,1085,1,0,0,
        0,7539,7540,5,301,0,0,7540,7541,3,1392,696,0,7541,1087,1,0,0,0,7542,
        7544,5,239,0,0,7543,7545,7,130,0,0,7544,7543,1,0,0,0,7544,7545,1,
        0,0,0,7545,7546,1,0,0,0,7546,7565,5,175,0,0,7547,7552,3,1092,546,
        0,7548,7549,5,29,0,0,7549,7551,3,1092,546,0,7550,7548,1,0,0,0,7551,
        7554,1,0,0,0,7552,7550,1,0,0,0,7552,7553,1,0,0,0,7553,7566,1,0,0,
        0,7554,7552,1,0,0,0,7555,7556,5,126,0,0,7556,7557,3,1090,545,0,7557,
        7562,3,1094,547,0,7558,7559,5,29,0,0,7559,7561,3,1094,547,0,7560,
        7558,1,0,0,0,7561,7564,1,0,0,0,7562,7560,1,0,0,0,7562,7563,1,0,0,
        0,7563,7566,1,0,0,0,7564,7562,1,0,0,0,7565,7547,1,0,0,0,7565,7555,
        1,0,0,0,7566,1089,1,0,0,0,7567,7571,3,1430,715,0,7568,7571,3,990,
        495,0,7569,7571,3,1412,706,0,7570,7567,1,0,0,0,7570,7568,1,0,0,0,
        7570,7569,1,0,0,0,7571,1091,1,0,0,0,7572,7575,3,986,493,0,7573,7575,
        3,1406,703,0,7574,7572,1,0,0,0,7574,7573,1,0,0,0,7575,7576,1,0,0,
        0,7576,7577,5,6,0,0,7577,7578,7,131,0,0,7578,1093,1,0,0,0,7579,7582,
        3,986,493,0,7580,7582,3,1406,703,0,7581,7579,1,0,0,0,7581,7580,1,
        0,0,0,7582,7583,1,0,0,0,7583,7586,5,6,0,0,7584,7587,3,1096,548,0,
        7585,7587,5,490,0,0,7586,7584,1,0,0,0,7586,7585,1,0,0,0,7587,1095,
        1,0,0,0,7588,7589,7,132,0,0,7589,1097,1,0,0,0,7590,7593,5,523,0,
        0,7591,7594,3,1406,703,0,7592,7594,3,1076,538,0,7593,7591,1,0,0,
        0,7593,7592,1,0,0,0,7594,7604,1,0,0,0,7595,7596,5,519,0,0,7596,7601,
        3,1102,551,0,7597,7598,5,29,0,0,7598,7600,3,1102,551,0,7599,7597,
        1,0,0,0,7600,7603,1,0,0,0,7601,7599,1,0,0,0,7601,7602,1,0,0,0,7602,
        7605,1,0,0,0,7603,7601,1,0,0,0,7604,7595,1,0,0,0,7604,7605,1,0,0,
        0,7605,1099,1,0,0,0,7606,7609,5,486,0,0,7607,7610,3,1406,703,0,7608,
        7610,3,1076,538,0,7609,7607,1,0,0,0,7609,7608,1,0,0,0,7609,7610,
        1,0,0,0,7610,7620,1,0,0,0,7611,7612,5,519,0,0,7612,7617,3,1102,551,
        0,7613,7614,5,29,0,0,7614,7616,3,1102,551,0,7615,7613,1,0,0,0,7616,
        7619,1,0,0,0,7617,7615,1,0,0,0,7617,7618,1,0,0,0,7618,7621,1,0,0,
        0,7619,7617,1,0,0,0,7620,7611,1,0,0,0,7620,7621,1,0,0,0,7621,1101,
        1,0,0,0,7622,7623,3,1096,548,0,7623,7624,5,6,0,0,7624,7625,3,1090,
        545,0,7625,1103,1,0,0,0,7626,7627,5,405,0,0,7627,7628,3,1406,703,
        0,7628,1105,1,0,0,0,7629,7630,5,109,0,0,7630,7631,3,1406,703,0,7631,
        1107,1,0,0,0,7632,7637,5,221,0,0,7633,7635,5,387,0,0,7634,7633,1,
        0,0,0,7634,7635,1,0,0,0,7635,7636,1,0,0,0,7636,7638,5,235,0,0,7637,
        7634,1,0,0,0,7637,7638,1,0,0,0,7638,7639,1,0,0,0,7639,7640,3,1406,
        703,0,7640,7641,5,279,0,0,7641,7642,3,1408,704,0,7642,1109,1,0,0,
        0,7643,7644,5,67,0,0,7644,7657,3,910,455,0,7645,7646,5,206,0,0,7646,
        7647,3,910,455,0,7647,7650,3,1012,506,0,7648,7649,5,552,0,0,7649,
        7651,3,910,455,0,7650,7648,1,0,0,0,7650,7651,1,0,0,0,7651,7654,1,
        0,0,0,7652,7653,5,196,0,0,7653,7655,3,910,455,0,7654,7652,1,0,0,
        0,7654,7655,1,0,0,0,7655,7657,1,0,0,0,7656,7643,1,0,0,0,7656,7645,
        1,0,0,0,7657,1111,1,0,0,0,7658,7659,3,1320,660,0,7659,7661,3,1124,
        562,0,7660,7662,3,1114,557,0,7661,7660,1,0,0,0,7661,7662,1,0,0,0,
        7662,1113,1,0,0,0,7663,7664,4,557,102,0,7664,7667,3,1116,558,0,7665,
        7667,3,1138,569,0,7666,7663,1,0,0,0,7666,7665,1,0,0,0,7667,1115,
        1,0,0,0,7668,7669,5,105,0,0,7669,7670,3,1018,509,0,7670,1117,1,0,
        0,0,7671,7673,4,559,103,0,7672,7674,5,390,0,0,7673,7672,1,0,0,0,
        7673,7674,1,0,0,0,7674,7675,1,0,0,0,7675,7676,5,738,0,0,7676,1119,
        1,0,0,0,7677,7679,7,41,0,0,7678,7680,3,120,60,0,7679,7678,1,0,0,
        0,7679,7680,1,0,0,0,7680,7681,1,0,0,0,7681,7685,3,1146,573,0,7682,
        7684,3,1152,576,0,7683,7682,1,0,0,0,7684,7687,1,0,0,0,7685,7683,
        1,0,0,0,7685,7686,1,0,0,0,7686,7752,1,0,0,0,7687,7685,1,0,0,0,7688,
        7690,5,237,0,0,7689,7691,3,440,220,0,7690,7689,1,0,0,0,7690,7691,
        1,0,0,0,7691,7693,1,0,0,0,7692,7694,3,1330,665,0,7693,7692,1,0,0,
        0,7693,7694,1,0,0,0,7694,7695,1,0,0,0,7695,7699,3,1146,573,0,7696,
        7698,3,1160,580,0,7697,7696,1,0,0,0,7698,7701,1,0,0,0,7699,7697,
        1,0,0,0,7699,7700,1,0,0,0,7700,7752,1,0,0,0,7701,7699,1,0,0,0,7702,
        7704,5,534,0,0,7703,7705,3,440,220,0,7704,7703,1,0,0,0,7704,7705,
        1,0,0,0,7705,7707,1,0,0,0,7706,7708,3,1330,665,0,7707,7706,1,0,0,
        0,7707,7708,1,0,0,0,7708,7709,1,0,0,0,7709,7713,3,1146,573,0,7710,
        7712,3,1162,581,0,7711,7710,1,0,0,0,7712,7715,1,0,0,0,7713,7711,
        1,0,0,0,7713,7714,1,0,0,0,7714,7752,1,0,0,0,7715,7713,1,0,0,0,7716,
        7718,3,1122,561,0,7717,7716,1,0,0,0,7717,7718,1,0,0,0,7718,7749,
        1,0,0,0,7719,7720,5,438,0,0,7720,7726,5,295,0,0,7721,7723,5,618,
        0,0,7722,7724,3,440,220,0,7723,7722,1,0,0,0,7723,7724,1,0,0,0,7724,
        7726,1,0,0,0,7725,7719,1,0,0,0,7725,7721,1,0,0,0,7726,7728,1,0,0,
        0,7727,7729,3,120,60,0,7728,7727,1,0,0,0,7728,7729,1,0,0,0,7729,
        7730,1,0,0,0,7730,7734,3,1146,573,0,7731,7733,3,1152,576,0,7732,
        7731,1,0,0,0,7733,7736,1,0,0,0,7734,7732,1,0,0,0,7734,7735,1,0,0,
        0,7735,7750,1,0,0,0,7736,7734,1,0,0,0,7737,7738,5,231,0,0,7738,7740,
        5,295,0,0,7739,7741,3,1330,665,0,7740,7739,1,0,0,0,7740,7741,1,0,
        0,0,7741,7742,1,0,0,0,7742,7743,3,1142,571,0,7743,7744,3,1138,569,
        0,7744,7750,1,0,0,0,7745,7747,3,1116,558,0,7746,7748,3,1118,559,
        0,7747,7746,1,0,0,0,7747,7748,1,0,0,0,7748,7750,1,0,0,0,7749,7725,
        1,0,0,0,7749,7737,1,0,0,0,7749,7745,1,0,0,0,7750,7752,1,0,0,0,7751,
        7677,1,0,0,0,7751,7688,1,0,0,0,7751,7702,1,0,0,0,7751,7717,1,0,0,
        0,7752,1121,1,0,0,0,7753,7755,5,129,0,0,7754,7756,3,1406,703,0,7755,
        7754,1,0,0,0,7755,7756,1,0,0,0,7756,1123,1,0,0,0,7757,7782,3,1166,
        583,0,7758,7760,3,1126,563,0,7759,7758,1,0,0,0,7760,7763,1,0,0,0,
        7761,7759,1,0,0,0,7761,7762,1,0,0,0,7762,7783,1,0,0,0,7763,7761,
        1,0,0,0,7764,7766,3,1248,624,0,7765,7764,1,0,0,0,7765,7766,1,0,0,
        0,7766,7769,1,0,0,0,7767,7768,5,241,0,0,7768,7770,5,59,0,0,7769,
        7767,1,0,0,0,7769,7770,1,0,0,0,7770,7771,1,0,0,0,7771,7772,5,63,
        0,0,7772,7774,3,1018,509,0,7773,7775,7,133,0,0,7774,7773,1,0,0,0,
        7774,7775,1,0,0,0,7775,7779,1,0,0,0,7776,7778,3,1126,563,0,7777,
        7776,1,0,0,0,7778,7781,1,0,0,0,7779,7777,1,0,0,0,7779,7780,1,0,0,
        0,7780,7783,1,0,0,0,7781,7779,1,0,0,0,7782,7761,1,0,0,0,7782,7765,
        1,0,0,0,7783,1125,1,0,0,0,7784,7786,5,390,0,0,7785,7784,1,0,0,0,
        7785,7786,1,0,0,0,7786,7787,1,0,0,0,7787,7846,3,1454,727,0,7788,
        7789,4,563,104,0,7789,7790,5,390,0,0,7790,7846,5,728,0,0,7791,7795,
        5,166,0,0,7792,7796,3,1134,567,0,7793,7794,4,563,105,0,7794,7796,
        3,1018,509,0,7795,7792,1,0,0,0,7795,7793,1,0,0,0,7796,7846,1,0,0,
        0,7797,7798,5,401,0,0,7798,7799,5,623,0,0,7799,7801,5,391,0,0,7800,
        7802,3,966,483,0,7801,7800,1,0,0,0,7801,7802,1,0,0,0,7802,7846,1,
        0,0,0,7803,7846,5,69,0,0,7804,7805,5,515,0,0,7805,7806,5,166,0,0,
        7806,7846,5,636,0,0,7807,7809,5,438,0,0,7808,7807,1,0,0,0,7808,7809,
        1,0,0,0,7809,7810,1,0,0,0,7810,7846,5,295,0,0,7811,7813,5,618,0,
        0,7812,7814,5,295,0,0,7813,7812,1,0,0,0,7813,7814,1,0,0,0,7814,7846,
        1,0,0,0,7815,7816,5,118,0,0,7816,7846,3,1444,722,0,7817,7846,3,1248,
        624,0,7818,7819,5,117,0,0,7819,7846,3,1128,564,0,7820,7821,5,563,
        0,0,7821,7846,3,1130,565,0,7822,7823,5,715,0,0,7823,7846,3,1424,
        712,0,7824,7826,4,563,106,0,7825,7827,3,1122,561,0,7826,7825,1,0,
        0,0,7826,7827,1,0,0,0,7827,7828,1,0,0,0,7828,7846,3,1116,558,0,7829,
        7830,4,563,107,0,7830,7846,3,1118,559,0,7831,7832,4,563,108,0,7832,
        7834,5,757,0,0,7833,7835,5,6,0,0,7834,7833,1,0,0,0,7834,7835,1,0,
        0,0,7835,7836,1,0,0,0,7836,7846,3,1484,742,0,7837,7838,4,563,109,
        0,7838,7840,5,758,0,0,7839,7841,5,6,0,0,7840,7839,1,0,0,0,7840,7841,
        1,0,0,0,7841,7842,1,0,0,0,7842,7846,3,1484,742,0,7843,7844,4,563,
        110,0,7844,7846,3,1156,578,0,7845,7785,1,0,0,0,7845,7788,1,0,0,0,
        7845,7791,1,0,0,0,7845,7797,1,0,0,0,7845,7803,1,0,0,0,7845,7804,
        1,0,0,0,7845,7808,1,0,0,0,7845,7811,1,0,0,0,7845,7815,1,0,0,0,7845,
        7817,1,0,0,0,7845,7818,1,0,0,0,7845,7820,1,0,0,0,7845,7822,1,0,0,
        0,7845,7824,1,0,0,0,7845,7829,1,0,0,0,7845,7831,1,0,0,0,7845,7837,
        1,0,0,0,7845,7843,1,0,0,0,7846,1127,1,0,0,0,7847,7848,7,134,0,0,
        7848,1129,1,0,0,0,7849,7850,7,135,0,0,7850,1131,1,0,0,0,7851,7852,
        5,391,0,0,7852,7853,3,1186,593,0,7853,1133,1,0,0,0,7854,7857,3,1132,
        566,0,7855,7857,3,1428,714,0,7856,7854,1,0,0,0,7856,7855,1,0,0,0,
        7857,1135,1,0,0,0,7858,7860,5,618,0,0,7859,7861,5,295,0,0,7860,7859,
        1,0,0,0,7860,7861,1,0,0,0,7861,7873,1,0,0,0,7862,7863,5,118,0,0,
        7863,7873,3,1440,720,0,7864,7866,3,1008,504,0,7865,7864,1,0,0,0,
        7865,7866,1,0,0,0,7866,7867,1,0,0,0,7867,7873,5,395,0,0,7868,7870,
        5,438,0,0,7869,7868,1,0,0,0,7869,7870,1,0,0,0,7870,7871,1,0,0,0,
        7871,7873,5,295,0,0,7872,7858,1,0,0,0,7872,7862,1,0,0,0,7872,7865,
        1,0,0,0,7872,7869,1,0,0,0,7873,1137,1,0,0,0,7874,7875,5,460,0,0,
        7875,7877,3,1382,691,0,7876,7878,3,1410,705,0,7877,7876,1,0,0,0,
        7877,7878,1,0,0,0,7878,7881,1,0,0,0,7879,7880,5,345,0,0,7880,7882,
        7,136,0,0,7881,7879,1,0,0,0,7881,7882,1,0,0,0,7882,7899,1,0,0,0,
        7883,7884,5,401,0,0,7884,7885,5,623,0,0,7885,7889,3,1140,570,0,7886,
        7887,5,401,0,0,7887,7888,5,171,0,0,7888,7890,3,1140,570,0,7889,7886,
        1,0,0,0,7889,7890,1,0,0,0,7890,7900,1,0,0,0,7891,7892,5,401,0,0,
        7892,7893,5,171,0,0,7893,7897,3,1140,570,0,7894,7895,5,401,0,0,7895,
        7896,5,623,0,0,7896,7898,3,1140,570,0,7897,7894,1,0,0,0,7897,7898,
        1,0,0,0,7898,7900,1,0,0,0,7899,7883,1,0,0,0,7899,7891,1,0,0,0,7899,
        7900,1,0,0,0,7900,1139,1,0,0,0,7901,7909,7,2,0,0,7902,7903,5,519,
        0,0,7903,7909,3,1454,727,0,7904,7905,5,519,0,0,7905,7909,5,166,0,
        0,7906,7907,5,392,0,0,7907,7909,5,50,0,0,7908,7901,1,0,0,0,7908,
        7902,1,0,0,0,7908,7904,1,0,0,0,7908,7906,1,0,0,0,7909,1141,1,0,0,
        0,7910,7911,5,32,0,0,7911,7916,3,1144,572,0,7912,7913,5,29,0,0,7913,
        7915,3,1144,572,0,7914,7912,1,0,0,0,7915,7918,1,0,0,0,7916,7914,
        1,0,0,0,7916,7917,1,0,0,0,7917,7919,1,0,0,0,7918,7916,1,0,0,0,7919,
        7920,5,33,0,0,7920,1143,1,0,0,0,7921,7923,3,1406,703,0,7922,7924,
        3,1172,586,0,7923,7922,1,0,0,0,7923,7924,1,0,0,0,7924,7926,1,0,0,
        0,7925,7927,3,362,181,0,7926,7925,1,0,0,0,7926,7927,1,0,0,0,7927,
        1145,1,0,0,0,7928,7929,5,32,0,0,7929,7934,3,1148,574,0,7930,7931,
        5,29,0,0,7931,7933,3,1148,574,0,7932,7930,1,0,0,0,7933,7936,1,0,
        0,0,7934,7932,1,0,0,0,7934,7935,1,0,0,0,7935,7937,1,0,0,0,7936,7934,
        1,0,0,0,7937,7938,5,33,0,0,7938,1147,1,0,0,0,7939,7946,3,1144,572,
        0,7940,7941,4,574,111,0,7941,7943,3,1018,509,0,7942,7944,3,362,181,
        0,7943,7942,1,0,0,0,7943,7944,1,0,0,0,7944,7946,1,0,0,0,7945,7939,
        1,0,0,0,7945,7940,1,0,0,0,7946,1149,1,0,0,0,7947,7948,7,137,0,0,
        7948,1151,1,0,0,0,7949,7952,3,1154,577,0,7950,7952,3,1158,579,0,
        7951,7949,1,0,0,0,7951,7950,1,0,0,0,7952,1153,1,0,0,0,7953,7955,
        5,294,0,0,7954,7956,5,6,0,0,7955,7954,1,0,0,0,7955,7956,1,0,0,0,
        7956,7957,1,0,0,0,7957,7974,3,1418,709,0,7958,7959,5,118,0,0,7959,
        7974,3,1444,722,0,7960,7974,3,1156,578,0,7961,7962,4,577,112,0,7962,
        7964,5,757,0,0,7963,7965,5,6,0,0,7964,7963,1,0,0,0,7964,7965,1,0,
        0,0,7965,7966,1,0,0,0,7966,7974,3,1484,742,0,7967,7968,4,577,113,
        0,7968,7970,5,758,0,0,7969,7971,5,6,0,0,7970,7969,1,0,0,0,7970,7971,
        1,0,0,0,7971,7972,1,0,0,0,7972,7974,3,1484,742,0,7973,7953,1,0,0,
        0,7973,7958,1,0,0,0,7973,7960,1,0,0,0,7973,7961,1,0,0,0,7973,7967,
        1,0,0,0,7974,1155,1,0,0,0,7975,7976,7,138,0,0,7976,1157,1,0,0,0,
        7977,7978,7,139,0,0,7978,7979,3,1150,575,0,7979,1159,1,0,0,0,7980,
        7985,3,1154,577,0,7981,7982,5,653,0,0,7982,7983,5,419,0,0,7983,7985,
        3,1406,703,0,7984,7980,1,0,0,0,7984,7981,1,0,0,0,7985,1161,1,0,0,
        0,7986,7987,3,1154,577,0,7987,1163,1,0,0,0,7988,7989,3,1166,583,
        0,7989,7990,5,0,0,1,7990,1165,1,0,0,0,7991,7993,7,140,0,0,7992,7994,
        3,1172,586,0,7993,7992,1,0,0,0,7993,7994,1,0,0,0,7994,7996,1,0,0,
        0,7995,7997,3,1174,587,0,7996,7995,1,0,0,0,7996,7997,1,0,0,0,7997,
        8138,1,0,0,0,7998,8004,5,455,0,0,7999,8001,5,182,0,0,8000,8002,5,
        434,0,0,8001,8000,1,0,0,0,8001,8002,1,0,0,0,8002,8004,1,0,0,0,8003,
        7998,1,0,0,0,8003,7999,1,0,0,0,8004,8006,1,0,0,0,8005,8007,3,1464,
        732,0,8006,8005,1,0,0,0,8006,8007,1,0,0,0,8007,8009,1,0,0,0,8008,
        8010,3,1174,587,0,8009,8008,1,0,0,0,8009,8010,1,0,0,0,8010,8138,
        1,0,0,0,8011,8013,7,141,0,0,8012,8014,3,1460,730,0,8013,8012,1,0,
        0,0,8013,8014,1,0,0,0,8014,8016,1,0,0,0,8015,8017,3,1174,587,0,8016,
        8015,1,0,0,0,8016,8017,1,0,0,0,8017,8138,1,0,0,0,8018,8020,5,81,
        0,0,8019,8021,3,1172,586,0,8020,8019,1,0,0,0,8020,8021,1,0,0,0,8021,
        8138,1,0,0,0,8022,8138,7,142,0,0,8023,8025,5,103,0,0,8024,8026,3,
        1172,586,0,8025,8024,1,0,0,0,8025,8026,1,0,0,0,8026,8028,1,0,0,0,
        8027,8029,3,1176,588,0,8028,8027,1,0,0,0,8028,8029,1,0,0,0,8029,
        8138,1,0,0,0,8030,8032,3,1168,584,0,8031,8033,3,1172,586,0,8032,
        8031,1,0,0,0,8032,8033,1,0,0,0,8033,8035,1,0,0,0,8034,8036,5,77,
        0,0,8035,8034,1,0,0,0,8035,8036,1,0,0,0,8036,8138,1,0,0,0,8037,8039,
        5,77,0,0,8038,8040,3,1172,586,0,8039,8038,1,0,0,0,8039,8040,1,0,
        0,0,8040,8138,1,0,0,0,8041,8042,5,103,0,0,8042,8045,5,641,0,0,8043,
        8045,5,638,0,0,8044,8041,1,0,0,0,8044,8043,1,0,0,0,8045,8046,1,0,
        0,0,8046,8048,3,1172,586,0,8047,8049,3,1176,588,0,8048,8047,1,0,
        0,0,8048,8049,1,0,0,0,8049,8138,1,0,0,0,8050,8051,5,381,0,0,8051,
        8061,5,638,0,0,8052,8061,5,398,0,0,8053,8054,5,383,0,0,8054,8061,
        5,638,0,0,8055,8056,5,381,0,0,8056,8057,5,103,0,0,8057,8061,5,641,
        0,0,8058,8059,5,383,0,0,8059,8061,5,641,0,0,8060,8050,1,0,0,0,8060,
        8052,1,0,0,0,8060,8053,1,0,0,0,8060,8055,1,0,0,0,8060,8058,1,0,0,
        0,8061,8062,1,0,0,0,8062,8064,3,1172,586,0,8063,8065,5,77,0,0,8064,
        8063,1,0,0,0,8064,8065,1,0,0,0,8065,8138,1,0,0,0,8066,8067,5,637,
        0,0,8067,8138,3,1172,586,0,8068,8070,5,664,0,0,8069,8071,3,1172,
        586,0,8070,8069,1,0,0,0,8070,8071,1,0,0,0,8071,8073,1,0,0,0,8072,
        8074,3,1174,587,0,8073,8072,1,0,0,0,8073,8074,1,0,0,0,8074,8138,
        1,0,0,0,8075,8138,5,157,0,0,8076,8078,5,595,0,0,8077,8079,3,1184,
        592,0,8078,8077,1,0,0,0,8078,8079,1,0,0,0,8079,8138,1,0,0,0,8080,
        8082,5,592,0,0,8081,8083,3,1184,592,0,8082,8081,1,0,0,0,8082,8083,
        1,0,0,0,8083,8138,1,0,0,0,8084,8086,5,154,0,0,8085,8087,3,1184,592,
        0,8086,8085,1,0,0,0,8086,8087,1,0,0,0,8087,8138,1,0,0,0,8088,8138,
        5,596,0,0,8089,8091,5,83,0,0,8090,8092,3,1172,586,0,8091,8090,1,
        0,0,0,8091,8092,1,0,0,0,8092,8138,1,0,0,0,8093,8138,7,143,0,0,8094,
        8095,5,319,0,0,8095,8138,5,637,0,0,8096,8100,5,319,0,0,8097,8098,
        5,103,0,0,8098,8101,5,641,0,0,8099,8101,5,638,0,0,8100,8097,1,0,
        0,0,8100,8099,1,0,0,0,8100,8101,1,0,0,0,8101,8103,1,0,0,0,8102,8104,
        3,1176,588,0,8103,8102,1,0,0,0,8103,8104,1,0,0,0,8104,8138,1,0,0,
        0,8105,8107,5,598,0,0,8106,8108,3,1176,588,0,8107,8106,1,0,0,0,8107,
        8108,1,0,0,0,8108,8138,1,0,0,0,8109,8111,5,589,0,0,8110,8112,3,1172,
        586,0,8111,8110,1,0,0,0,8111,8112,1,0,0,0,8112,8114,1,0,0,0,8113,
        8115,3,1176,588,0,8114,8113,1,0,0,0,8114,8115,1,0,0,0,8115,8138,
        1,0,0,0,8116,8118,5,356,0,0,8117,8119,3,1176,588,0,8118,8117,1,0,
        0,0,8118,8119,1,0,0,0,8119,8138,1,0,0,0,8120,8122,5,318,0,0,8121,
        8123,3,1176,588,0,8122,8121,1,0,0,0,8122,8123,1,0,0,0,8123,8138,
        1,0,0,0,8124,8125,5,199,0,0,8125,8127,3,1436,718,0,8126,8128,3,1176,
        588,0,8127,8126,1,0,0,0,8127,8128,1,0,0,0,8128,8138,1,0,0,0,8129,
        8130,5,519,0,0,8130,8132,3,1436,718,0,8131,8133,3,1176,588,0,8132,
        8131,1,0,0,0,8132,8133,1,0,0,0,8133,8138,1,0,0,0,8134,8138,5,515,
        0,0,8135,8138,5,292,0,0,8136,8138,7,144,0,0,8137,7991,1,0,0,0,8137,
        8003,1,0,0,0,8137,8011,1,0,0,0,8137,8018,1,0,0,0,8137,8022,1,0,0,
        0,8137,8023,1,0,0,0,8137,8030,1,0,0,0,8137,8037,1,0,0,0,8137,8044,
        1,0,0,0,8137,8060,1,0,0,0,8137,8066,1,0,0,0,8137,8068,1,0,0,0,8137,
        8075,1,0,0,0,8137,8076,1,0,0,0,8137,8080,1,0,0,0,8137,8084,1,0,0,
        0,8137,8088,1,0,0,0,8137,8089,1,0,0,0,8137,8093,1,0,0,0,8137,8094,
        1,0,0,0,8137,8096,1,0,0,0,8137,8105,1,0,0,0,8137,8109,1,0,0,0,8137,
        8116,1,0,0,0,8137,8120,1,0,0,0,8137,8124,1,0,0,0,8137,8129,1,0,0,
        0,8137,8134,1,0,0,0,8137,8135,1,0,0,0,8137,8136,1,0,0,0,8138,1167,
        1,0,0,0,8139,8143,5,383,0,0,8140,8141,5,381,0,0,8141,8143,5,103,
        0,0,8142,8139,1,0,0,0,8142,8140,1,0,0,0,8143,1169,1,0,0,0,8144,8150,
        5,455,0,0,8145,8147,5,182,0,0,8146,8148,5,434,0,0,8147,8146,1,0,
        0,0,8147,8148,1,0,0,0,8148,8150,1,0,0,0,8149,8144,1,0,0,0,8149,8145,
        1,0,0,0,8150,1171,1,0,0,0,8151,8154,5,32,0,0,8152,8155,3,1424,712,
        0,8153,8155,5,46,0,0,8154,8152,1,0,0,0,8154,8153,1,0,0,0,8155,8156,
        1,0,0,0,8156,8157,5,33,0,0,8157,1173,1,0,0,0,8158,8160,7,145,0,0,
        8159,8158,1,0,0,0,8160,8161,1,0,0,0,8161,8159,1,0,0,0,8161,8162,
        1,0,0,0,8162,1175,1,0,0,0,8163,8178,3,1178,589,0,8164,8178,3,1180,
        590,0,8165,8178,5,90,0,0,8166,8167,3,1006,503,0,8167,8169,3,1188,
        594,0,8168,8170,5,77,0,0,8169,8168,1,0,0,0,8169,8170,1,0,0,0,8170,
        8178,1,0,0,0,8171,8175,5,77,0,0,8172,8173,3,1006,503,0,8173,8174,
        3,1188,594,0,8174,8176,1,0,0,0,8175,8172,1,0,0,0,8175,8176,1,0,0,
        0,8176,8178,1,0,0,0,8177,8163,1,0,0,0,8177,8164,1,0,0,0,8177,8165,
        1,0,0,0,8177,8166,1,0,0,0,8177,8171,1,0,0,0,8178,1177,1,0,0,0,8179,
        8181,5,65,0,0,8180,8182,5,77,0,0,8181,8180,1,0,0,0,8181,8182,1,0,
        0,0,8182,8186,1,0,0,0,8183,8184,5,77,0,0,8184,8186,5,65,0,0,8185,
        8179,1,0,0,0,8185,8183,1,0,0,0,8186,1179,1,0,0,0,8187,8189,5,615,
        0,0,8188,8190,5,77,0,0,8189,8188,1,0,0,0,8189,8190,1,0,0,0,8190,
        8194,1,0,0,0,8191,8192,5,77,0,0,8192,8194,5,615,0,0,8193,8187,1,
        0,0,0,8193,8191,1,0,0,0,8194,1181,1,0,0,0,8195,8196,5,32,0,0,8196,
        8197,3,1420,710,0,8197,8198,5,33,0,0,8198,1183,1,0,0,0,8199,8200,
        5,32,0,0,8200,8201,5,3,0,0,8201,8202,5,33,0,0,8202,1185,1,0,0,0,
        8203,8209,1,0,0,0,8204,8209,3,1474,737,0,8205,8206,5,32,0,0,8206,
        8207,5,3,0,0,8207,8209,5,33,0,0,8208,8203,1,0,0,0,8208,8204,1,0,
        0,0,8208,8205,1,0,0,0,8209,1187,1,0,0,0,8210,8215,3,1466,733,0,8211,
        8215,5,77,0,0,8212,8213,4,594,114,0,8213,8215,5,166,0,0,8214,8210,
        1,0,0,0,8214,8211,1,0,0,0,8214,8212,1,0,0,0,8215,1189,1,0,0,0,8216,
        8222,3,1466,733,0,8217,8218,4,595,115,0,8218,8222,5,166,0,0,8219,
        8220,4,595,116,0,8220,8222,5,77,0,0,8221,8216,1,0,0,0,8221,8217,
        1,0,0,0,8221,8219,1,0,0,0,8222,1191,1,0,0,0,8223,8230,3,1200,600,
        0,8224,8226,5,29,0,0,8225,8224,1,0,0,0,8225,8226,1,0,0,0,8226,8227,
        1,0,0,0,8227,8229,3,1200,600,0,8228,8225,1,0,0,0,8229,8232,1,0,0,
        0,8230,8228,1,0,0,0,8230,8231,1,0,0,0,8231,1193,1,0,0,0,8232,8230,
        1,0,0,0,8233,8235,3,1192,596,0,8234,8236,3,1196,598,0,8235,8234,
        1,0,0,0,8235,8236,1,0,0,0,8236,8239,1,0,0,0,8237,8239,3,1196,598,
        0,8238,8233,1,0,0,0,8238,8237,1,0,0,0,8239,1195,1,0,0,0,8240,8242,
        3,1210,605,0,8241,8243,3,92,46,0,8242,8241,1,0,0,0,8242,8243,1,0,
        0,0,8243,8246,1,0,0,0,8244,8246,3,92,46,0,8245,8240,1,0,0,0,8245,
        8244,1,0,0,0,8246,1197,1,0,0,0,8247,8249,3,1200,600,0,8248,8247,
        1,0,0,0,8249,8250,1,0,0,0,8250,8248,1,0,0,0,8250,8251,1,0,0,0,8251,
        1199,1,0,0,0,8252,8254,5,198,0,0,8253,8255,5,6,0,0,8254,8253,1,0,
        0,0,8254,8255,1,0,0,0,8255,8256,1,0,0,0,8256,8393,3,1374,687,0,8257,
        8258,4,600,117,0,8258,8260,5,729,0,0,8259,8261,3,1476,738,0,8260,
        8259,1,0,0,0,8260,8261,1,0,0,0,8261,8264,1,0,0,0,8262,8265,5,395,
        0,0,8263,8265,3,1466,733,0,8264,8262,1,0,0,0,8264,8263,1,0,0,0,8265,
        8393,1,0,0,0,8266,8268,5,348,0,0,8267,8269,5,6,0,0,8268,8267,1,0,
        0,0,8268,8269,1,0,0,0,8269,8270,1,0,0,0,8270,8393,3,1422,711,0,8271,
        8273,5,367,0,0,8272,8274,5,6,0,0,8273,8272,1,0,0,0,8273,8274,1,0,
        0,0,8274,8275,1,0,0,0,8275,8393,3,1422,711,0,8276,8278,5,70,0,0,
        8277,8279,5,6,0,0,8278,8277,1,0,0,0,8278,8279,1,0,0,0,8279,8280,
        1,0,0,0,8280,8393,3,1422,711,0,8281,8283,5,424,0,0,8282,8284,5,6,
        0,0,8283,8282,1,0,0,0,8283,8284,1,0,0,0,8284,8285,1,0,0,0,8285,8393,
        3,1438,719,0,8286,8288,5,118,0,0,8287,8289,5,6,0,0,8288,8287,1,0,
        0,0,8288,8289,1,0,0,0,8289,8290,1,0,0,0,8290,8393,3,1438,719,0,8291,
        8293,5,124,0,0,8292,8294,5,6,0,0,8293,8292,1,0,0,0,8293,8294,1,0,
        0,0,8294,8295,1,0,0,0,8295,8393,3,1440,720,0,8296,8298,5,194,0,0,
        8297,8299,5,6,0,0,8298,8297,1,0,0,0,8298,8299,1,0,0,0,8299,8300,
        1,0,0,0,8300,8393,3,1440,720,0,8301,8303,5,69,0,0,8302,8304,5,6,
        0,0,8303,8302,1,0,0,0,8303,8304,1,0,0,0,8304,8305,1,0,0,0,8305,8393,
        3,1422,711,0,8306,8308,5,417,0,0,8307,8309,5,6,0,0,8308,8307,1,0,
        0,0,8308,8309,1,0,0,0,8309,8310,1,0,0,0,8310,8393,3,1202,601,0,8311,
        8313,7,146,0,0,8312,8314,5,6,0,0,8313,8312,1,0,0,0,8313,8314,1,0,
        0,0,8314,8315,1,0,0,0,8315,8393,3,1202,601,0,8316,8318,7,147,0,0,
        8317,8319,5,6,0,0,8318,8317,1,0,0,0,8318,8319,1,0,0,0,8319,8320,
        1,0,0,0,8320,8393,3,1418,709,0,8321,8323,5,170,0,0,8322,8324,5,6,
        0,0,8323,8322,1,0,0,0,8323,8324,1,0,0,0,8324,8325,1,0,0,0,8325,8393,
        3,1418,709,0,8326,8328,5,502,0,0,8327,8329,5,6,0,0,8328,8327,1,0,
        0,0,8328,8329,1,0,0,0,8329,8330,1,0,0,0,8330,8393,7,148,0,0,8331,
        8333,5,617,0,0,8332,8334,5,6,0,0,8333,8332,1,0,0,0,8333,8334,1,0,
        0,0,8334,8335,1,0,0,0,8335,8336,5,32,0,0,8336,8337,3,1384,692,0,
        8337,8338,5,33,0,0,8338,8393,1,0,0,0,8339,8393,3,1208,604,0,8340,
        8393,3,1204,602,0,8341,8343,5,275,0,0,8342,8344,5,6,0,0,8343,8342,
        1,0,0,0,8343,8344,1,0,0,0,8344,8345,1,0,0,0,8345,8393,7,149,0,0,
        8346,8347,5,153,0,0,8347,8349,5,176,0,0,8348,8350,5,6,0,0,8349,8348,
        1,0,0,0,8349,8350,1,0,0,0,8350,8351,1,0,0,0,8351,8393,3,1440,720,
        0,8352,8353,5,268,0,0,8353,8355,5,176,0,0,8354,8356,5,6,0,0,8355,
        8354,1,0,0,0,8355,8356,1,0,0,0,8356,8357,1,0,0,0,8357,8393,3,1440,
        720,0,8358,8360,5,582,0,0,8359,8361,5,6,0,0,8360,8359,1,0,0,0,8360,
        8361,1,0,0,0,8361,8362,1,0,0,0,8362,8393,3,1406,703,0,8363,8364,
        5,563,0,0,8364,8393,7,150,0,0,8365,8367,5,127,0,0,8366,8368,5,6,
        0,0,8367,8366,1,0,0,0,8367,8368,1,0,0,0,8368,8369,1,0,0,0,8369,8393,
        3,1440,720,0,8370,8372,5,294,0,0,8371,8373,5,6,0,0,8372,8371,1,0,
        0,0,8372,8373,1,0,0,0,8373,8374,1,0,0,0,8374,8393,3,1422,711,0,8375,
        8376,4,600,118,0,8376,8377,5,553,0,0,8377,8393,5,601,0,0,8378,8379,
        4,600,119,0,8379,8381,5,757,0,0,8380,8382,5,6,0,0,8381,8380,1,0,
        0,0,8381,8382,1,0,0,0,8382,8383,1,0,0,0,8383,8393,3,1484,742,0,8384,
        8385,4,600,120,0,8385,8387,5,758,0,0,8386,8388,5,6,0,0,8387,8386,
        1,0,0,0,8387,8388,1,0,0,0,8388,8389,1,0,0,0,8389,8393,3,1484,742,
        0,8390,8391,4,600,121,0,8391,8393,3,152,76,0,8392,8252,1,0,0,0,8392,
        8257,1,0,0,0,8392,8266,1,0,0,0,8392,8271,1,0,0,0,8392,8276,1,0,0,
        0,8392,8281,1,0,0,0,8392,8286,1,0,0,0,8392,8291,1,0,0,0,8392,8296,
        1,0,0,0,8392,8301,1,0,0,0,8392,8306,1,0,0,0,8392,8311,1,0,0,0,8392,
        8316,1,0,0,0,8392,8321,1,0,0,0,8392,8326,1,0,0,0,8392,8331,1,0,0,
        0,8392,8339,1,0,0,0,8392,8340,1,0,0,0,8392,8341,1,0,0,0,8392,8346,
        1,0,0,0,8392,8352,1,0,0,0,8392,8358,1,0,0,0,8392,8363,1,0,0,0,8392,
        8365,1,0,0,0,8392,8370,1,0,0,0,8392,8375,1,0,0,0,8392,8378,1,0,0,
        0,8392,8384,1,0,0,0,8392,8390,1,0,0,0,8393,1201,1,0,0,0,8394,8397,
        3,1418,709,0,8395,8397,5,166,0,0,8396,8394,1,0,0,0,8396,8395,1,0,
        0,0,8397,1203,1,0,0,0,8398,8400,5,166,0,0,8399,8398,1,0,0,0,8399,
        8400,1,0,0,0,8400,8401,1,0,0,0,8401,8403,5,112,0,0,8402,8404,5,6,
        0,0,8403,8402,1,0,0,0,8403,8404,1,0,0,0,8404,8405,1,0,0,0,8405,8406,
        3,1190,595,0,8406,1205,1,0,0,0,8407,8409,5,166,0,0,8408,8407,1,0,
        0,0,8408,8409,1,0,0,0,8409,8410,1,0,0,0,8410,8412,5,194,0,0,8411,
        8413,5,6,0,0,8412,8411,1,0,0,0,8412,8413,1,0,0,0,8413,8414,1,0,0,
        0,8414,8415,3,1438,719,0,8415,1207,1,0,0,0,8416,8418,5,166,0,0,8417,
        8416,1,0,0,0,8417,8418,1,0,0,0,8418,8419,1,0,0,0,8419,8421,3,1006,
        503,0,8420,8422,5,6,0,0,8421,8420,1,0,0,0,8421,8422,1,0,0,0,8422,
        8423,1,0,0,0,8423,8424,3,1188,594,0,8424,1209,1,0,0,0,8425,8426,
        5,423,0,0,8426,8427,5,89,0,0,8427,8430,3,1212,606,0,8428,8429,5,
        422,0,0,8429,8431,3,1420,710,0,8430,8428,1,0,0,0,8430,8431,1,0,0,
        0,8431,8433,1,0,0,0,8432,8434,3,1214,607,0,8433,8432,1,0,0,0,8433,
        8434,1,0,0,0,8434,8436,1,0,0,0,8435,8437,3,1218,609,0,8436,8435,
        1,0,0,0,8436,8437,1,0,0,0,8437,1211,1,0,0,0,8438,8440,5,307,0,0,
        8439,8438,1,0,0,0,8439,8440,1,0,0,0,8440,8441,1,0,0,0,8441,8443,
        5,295,0,0,8442,8444,3,1216,608,0,8443,8442,1,0,0,0,8443,8444,1,0,
        0,0,8444,8445,1,0,0,0,8445,8447,5,32,0,0,8446,8448,3,1408,704,0,
        8447,8446,1,0,0,0,8447,8448,1,0,0,0,8448,8449,1,0,0,0,8449,8472,
        5,33,0,0,8450,8452,5,307,0,0,8451,8450,1,0,0,0,8451,8452,1,0,0,0,
        8452,8453,1,0,0,0,8453,8454,5,252,0,0,8454,8455,5,32,0,0,8455,8456,
        3,920,460,0,8456,8457,5,33,0,0,8457,8472,1,0,0,0,8458,8469,7,151,
        0,0,8459,8460,5,32,0,0,8460,8461,3,920,460,0,8461,8462,5,33,0,0,
        8462,8470,1,0,0,0,8463,8464,5,114,0,0,8464,8466,5,32,0,0,8465,8467,
        3,1408,704,0,8466,8465,1,0,0,0,8466,8467,1,0,0,0,8467,8468,1,0,0,
        0,8468,8470,5,33,0,0,8469,8459,1,0,0,0,8469,8463,1,0,0,0,8470,8472,
        1,0,0,0,8471,8439,1,0,0,0,8471,8451,1,0,0,0,8471,8458,1,0,0,0,8472,
        1213,1,0,0,0,8473,8474,5,571,0,0,8474,8476,5,89,0,0,8475,8477,5,
        307,0,0,8476,8475,1,0,0,0,8476,8477,1,0,0,0,8477,8488,1,0,0,0,8478,
        8479,5,252,0,0,8479,8480,5,32,0,0,8480,8481,3,920,460,0,8481,8482,
        5,33,0,0,8482,8489,1,0,0,0,8483,8485,5,295,0,0,8484,8486,3,1216,
        608,0,8485,8484,1,0,0,0,8485,8486,1,0,0,0,8486,8487,1,0,0,0,8487,
        8489,3,1410,705,0,8488,8478,1,0,0,0,8488,8483,1,0,0,0,8489,8492,
        1,0,0,0,8490,8491,5,570,0,0,8491,8493,3,1420,710,0,8492,8490,1,0,
        0,0,8492,8493,1,0,0,0,8493,1215,1,0,0,0,8494,8495,5,56,0,0,8495,
        8496,5,6,0,0,8496,8497,3,1420,710,0,8497,1217,1,0,0,0,8498,8499,
        5,32,0,0,8499,8504,3,1220,610,0,8500,8501,5,29,0,0,8501,8503,3,1220,
        610,0,8502,8500,1,0,0,0,8503,8506,1,0,0,0,8504,8502,1,0,0,0,8504,
        8505,1,0,0,0,8505,8507,1,0,0,0,8506,8504,1,0,0,0,8507,8508,5,33,
        0,0,8508,1219,1,0,0,0,8509,8510,5,423,0,0,8510,8521,3,1406,703,0,
        8511,8512,5,635,0,0,8512,8513,5,303,0,0,8513,8516,5,590,0,0,8514,
        8517,3,1228,614,0,8515,8517,5,353,0,0,8516,8514,1,0,0,0,8516,8515,
        1,0,0,0,8517,8522,1,0,0,0,8518,8519,5,635,0,0,8519,8520,5,282,0,
        0,8520,8522,3,1222,611,0,8521,8511,1,0,0,0,8521,8518,1,0,0,0,8521,
        8522,1,0,0,0,8522,8526,1,0,0,0,8523,8525,3,1224,612,0,8524,8523,
        1,0,0,0,8525,8528,1,0,0,0,8526,8524,1,0,0,0,8526,8527,1,0,0,0,8527,
        8540,1,0,0,0,8528,8526,1,0,0,0,8529,8530,5,32,0,0,8530,8535,3,1226,
        613,0,8531,8532,5,29,0,0,8532,8534,3,1226,613,0,8533,8531,1,0,0,
        0,8534,8537,1,0,0,0,8535,8533,1,0,0,0,8535,8536,1,0,0,0,8536,8538,
        1,0,0,0,8537,8535,1,0,0,0,8538,8539,5,33,0,0,8539,8541,1,0,0,0,8540,
        8529,1,0,0,0,8540,8541,1,0,0,0,8541,1221,1,0,0,0,8542,8555,3,1228,
        614,0,8543,8544,5,32,0,0,8544,8549,3,1228,614,0,8545,8546,5,29,0,
        0,8546,8548,3,1228,614,0,8547,8545,1,0,0,0,8548,8551,1,0,0,0,8549,
        8547,1,0,0,0,8549,8550,1,0,0,0,8550,8552,1,0,0,0,8551,8549,1,0,0,
        0,8552,8553,5,33,0,0,8553,8555,1,0,0,0,8554,8542,1,0,0,0,8554,8543,
        1,0,0,0,8555,1223,1,0,0,0,8556,8558,5,582,0,0,8557,8559,5,6,0,0,
        8558,8557,1,0,0,0,8558,8559,1,0,0,0,8559,8560,1,0,0,0,8560,8591,
        3,1406,703,0,8561,8563,5,563,0,0,8562,8561,1,0,0,0,8562,8563,1,0,
        0,0,8563,8564,1,0,0,0,8564,8566,5,198,0,0,8565,8567,5,6,0,0,8566,
        8565,1,0,0,0,8566,8567,1,0,0,0,8567,8568,1,0,0,0,8568,8591,3,1374,
        687,0,8569,8571,5,388,0,0,8570,8572,5,6,0,0,8571,8570,1,0,0,0,8571,
        8572,1,0,0,0,8572,8573,1,0,0,0,8573,8591,3,1420,710,0,8574,8576,
        7,152,0,0,8575,8577,5,6,0,0,8576,8575,1,0,0,0,8576,8577,1,0,0,0,
        8577,8578,1,0,0,0,8578,8591,3,1420,710,0,8579,8580,7,153,0,0,8580,
        8582,5,176,0,0,8581,8583,5,6,0,0,8582,8581,1,0,0,0,8582,8583,1,0,
        0,0,8583,8584,1,0,0,0,8584,8591,3,1444,722,0,8585,8587,5,118,0,0,
        8586,8588,5,6,0,0,8587,8586,1,0,0,0,8587,8588,1,0,0,0,8588,8589,
        1,0,0,0,8589,8591,3,1444,722,0,8590,8556,1,0,0,0,8590,8562,1,0,0,
        0,8590,8569,1,0,0,0,8590,8574,1,0,0,0,8590,8579,1,0,0,0,8590,8585,
        1,0,0,0,8591,1225,1,0,0,0,8592,8593,5,571,0,0,8593,8597,3,1466,733,
        0,8594,8596,3,1224,612,0,8595,8594,1,0,0,0,8596,8599,1,0,0,0,8597,
        8595,1,0,0,0,8597,8598,1,0,0,0,8598,1227,1,0,0,0,8599,8597,1,0,0,
        0,8600,8601,5,32,0,0,8601,8606,3,1230,615,0,8602,8603,5,29,0,0,8603,
        8605,3,1230,615,0,8604,8602,1,0,0,0,8605,8608,1,0,0,0,8606,8604,
        1,0,0,0,8606,8607,1,0,0,0,8607,8609,1,0,0,0,8608,8606,1,0,0,0,8609,
        8610,5,33,0,0,8610,1229,1,0,0,0,8611,8614,3,920,460,0,8612,8614,
        5,353,0,0,8613,8611,1,0,0,0,8613,8612,1,0,0,0,8614,1231,1,0,0,0,
        8615,8616,5,168,0,0,8616,8617,5,6,0,0,8617,8618,3,1306,653,0,8618,
        1233,1,0,0,0,8619,8620,5,263,0,0,8620,8621,5,209,0,0,8621,1235,1,
        0,0,0,8622,8623,3,1234,617,0,8623,8624,3,1238,619,0,8624,1237,1,
        0,0,0,8625,8633,3,1406,703,0,8626,8630,4,619,122,0,8627,8631,3,1412,
        706,0,8628,8629,5,166,0,0,8629,8631,3,1416,708,0,8630,8627,1,0,0,
        0,8630,8628,1,0,0,0,8631,8633,1,0,0,0,8632,8625,1,0,0,0,8632,8626,
        1,0,0,0,8633,1239,1,0,0,0,8634,8635,5,263,0,0,8635,8636,3,1008,504,
        0,8636,8637,5,209,0,0,8637,1241,1,0,0,0,8638,8639,5,264,0,0,8639,
        8640,5,619,0,0,8640,8641,5,627,0,0,8641,1243,1,0,0,0,8642,8644,7,
        154,0,0,8643,8642,1,0,0,0,8643,8644,1,0,0,0,8644,8645,1,0,0,0,8645,
        8646,3,1246,623,0,8646,1245,1,0,0,0,8647,8648,3,1388,694,0,8648,
        8649,3,1250,625,0,8649,1247,1,0,0,0,8650,8651,5,112,0,0,8651,8652,
        3,1190,595,0,8652,1249,1,0,0,0,8653,8655,3,1166,583,0,8654,8656,
        3,1248,624,0,8655,8654,1,0,0,0,8655,8656,1,0,0,0,8656,1251,1,0,0,
        0,8657,8658,5,32,0,0,8658,8659,3,1338,669,0,8659,8660,5,29,0,0,8660,
        8661,3,1338,669,0,8661,8662,5,33,0,0,8662,1253,1,0,0,0,8663,8668,
        3,1354,677,0,8664,8665,5,29,0,0,8665,8667,3,1354,677,0,8666,8664,
        1,0,0,0,8667,8670,1,0,0,0,8668,8666,1,0,0,0,8668,8669,1,0,0,0,8669,
        1255,1,0,0,0,8670,8668,1,0,0,0,8671,8676,3,1258,629,0,8672,8673,
        5,29,0,0,8673,8675,3,1258,629,0,8674,8672,1,0,0,0,8675,8678,1,0,
        0,0,8676,8674,1,0,0,0,8676,8677,1,0,0,0,8677,1257,1,0,0,0,8678,8676,
        1,0,0,0,8679,8680,3,1326,663,0,8680,8683,5,6,0,0,8681,8684,3,910,
        455,0,8682,8684,5,166,0,0,8683,8681,1,0,0,0,8683,8682,1,0,0,0,8684,
        1259,1,0,0,0,8685,8686,3,1006,503,0,8686,8687,3,1188,594,0,8687,
        1261,1,0,0,0,8688,8690,5,114,0,0,8689,8691,3,1264,632,0,8690,8689,
        1,0,0,0,8691,8692,1,0,0,0,8692,8690,1,0,0,0,8692,8693,1,0,0,0,8693,
        1263,1,0,0,0,8694,8695,5,588,0,0,8695,8696,5,89,0,0,8696,8707,3,
        1440,720,0,8697,8699,5,410,0,0,8698,8697,1,0,0,0,8698,8699,1,0,0,
        0,8699,8700,1,0,0,0,8700,8701,5,193,0,0,8701,8702,5,89,0,0,8702,
        8707,3,1440,720,0,8703,8704,5,202,0,0,8704,8705,5,89,0,0,8705,8707,
        3,1440,720,0,8706,8694,1,0,0,0,8706,8698,1,0,0,0,8706,8703,1,0,0,
        0,8707,1265,1,0,0,0,8708,8710,5,308,0,0,8709,8711,3,1268,634,0,8710,
        8709,1,0,0,0,8711,8712,1,0,0,0,8712,8710,1,0,0,0,8712,8713,1,0,0,
        0,8713,1267,1,0,0,0,8714,8715,7,155,0,0,8715,8716,5,89,0,0,8716,
        8717,3,1440,720,0,8717,1269,1,0,0,0,8718,8723,3,1306,653,0,8719,
        8720,5,29,0,0,8720,8722,3,1306,653,0,8721,8719,1,0,0,0,8722,8725,
        1,0,0,0,8723,8721,1,0,0,0,8723,8724,1,0,0,0,8724,1271,1,0,0,0,8725,
        8723,1,0,0,0,8726,8731,3,1274,637,0,8727,8728,5,29,0,0,8728,8730,
        3,1274,637,0,8729,8727,1,0,0,0,8730,8733,1,0,0,0,8731,8729,1,0,0,
        0,8731,8732,1,0,0,0,8732,1273,1,0,0,0,8733,8731,1,0,0,0,8734,8744,
        3,1306,653,0,8735,8737,3,1278,639,0,8736,8738,3,1276,638,0,8737,
        8736,1,0,0,0,8737,8738,1,0,0,0,8738,8745,1,0,0,0,8739,8741,3,1284,
        642,0,8740,8742,3,1292,646,0,8741,8740,1,0,0,0,8741,8742,1,0,0,0,
        8742,8745,1,0,0,0,8743,8745,3,1276,638,0,8744,8735,1,0,0,0,8744,
        8739,1,0,0,0,8744,8743,1,0,0,0,8744,8745,1,0,0,0,8745,1275,1,0,0,
        0,8746,8747,5,61,0,0,8747,8750,3,1278,639,0,8748,8749,5,61,0,0,8749,
        8751,3,1278,639,0,8750,8748,1,0,0,0,8750,8751,1,0,0,0,8751,1277,
        1,0,0,0,8752,8759,3,1280,640,0,8753,8759,3,1282,641,0,8754,8759,
        3,1284,642,0,8755,8759,3,1286,643,0,8756,8759,3,1288,644,0,8757,
        8759,3,1290,645,0,8758,8752,1,0,0,0,8758,8753,1,0,0,0,8758,8754,
        1,0,0,0,8758,8755,1,0,0,0,8758,8756,1,0,0,0,8758,8757,1,0,0,0,8759,
        1279,1,0,0,0,8760,8761,5,262,0,0,8761,8762,5,89,0,0,8762,8763,3,
        1438,719,0,8763,1281,1,0,0,0,8764,8765,5,262,0,0,8765,8766,5,89,
        0,0,8766,8767,5,742,0,0,8767,8768,5,424,0,0,8768,1283,1,0,0,0,8769,
        8770,5,262,0,0,8770,8771,5,653,0,0,8771,8772,3,1466,733,0,8772,1285,
        1,0,0,0,8773,8774,5,262,0,0,8774,8775,5,653,0,0,8775,8776,3,1466,
        733,0,8776,8777,5,63,0,0,8777,8778,3,1442,721,0,8778,1287,1,0,0,
        0,8779,8780,5,262,0,0,8780,8781,5,653,0,0,8781,8782,3,1466,733,0,
        8782,8783,5,89,0,0,8783,8784,3,1438,719,0,8784,1289,1,0,0,0,8785,
        8786,5,262,0,0,8786,8787,5,653,0,0,8787,8788,3,1466,733,0,8788,8789,
        5,89,0,0,8789,8790,5,742,0,0,8790,8791,5,424,0,0,8791,1291,1,0,0,
        0,8792,8793,5,800,0,0,8793,8797,5,794,0,0,8794,8798,3,1282,641,0,
        8795,8798,3,1286,643,0,8796,8798,3,1280,640,0,8797,8794,1,0,0,0,
        8797,8795,1,0,0,0,8797,8796,1,0,0,0,8798,1293,1,0,0,0,8799,8800,
        5,735,0,0,8800,8801,5,143,0,0,8801,8802,5,424,0,0,8802,1295,1,0,
        0,0,8803,8804,5,178,0,0,8804,8805,5,736,0,0,8805,8806,5,424,0,0,
        8806,1297,1,0,0,0,8807,8808,3,1300,650,0,8808,8809,5,797,0,0,8809,
        8810,5,798,0,0,8810,8823,1,0,0,0,8811,8812,3,1300,650,0,8812,8813,
        5,799,0,0,8813,8823,1,0,0,0,8814,8815,3,1300,650,0,8815,8816,5,796,
        0,0,8816,8817,5,798,0,0,8817,8818,5,519,0,0,8818,8819,5,801,0,0,
        8819,8820,5,63,0,0,8820,8821,3,1442,721,0,8821,8823,1,0,0,0,8822,
        8807,1,0,0,0,8822,8811,1,0,0,0,8822,8814,1,0,0,0,8823,1299,1,0,0,
        0,8824,8825,3,1450,725,0,8825,8826,5,795,0,0,8826,1301,1,0,0,0,8827,
        8828,5,475,0,0,8828,8829,3,1440,720,0,8829,1303,1,0,0,0,8830,8832,
        3,1466,733,0,8831,8833,3,986,493,0,8832,8831,1,0,0,0,8832,8833,1,
        0,0,0,8833,1305,1,0,0,0,8834,8840,3,1304,652,0,8835,8837,5,146,0,
        0,8836,8838,3,1474,737,0,8837,8836,1,0,0,0,8837,8838,1,0,0,0,8838,
        8840,1,0,0,0,8839,8834,1,0,0,0,8839,8835,1,0,0,0,8840,1307,1,0,0,
        0,8841,8842,5,305,0,0,8842,8843,3,1438,719,0,8843,1309,1,0,0,0,8844,
        8847,3,1308,654,0,8845,8847,3,390,195,0,8846,8844,1,0,0,0,8846,8845,
        1,0,0,0,8847,1311,1,0,0,0,8848,8849,7,156,0,0,8849,1313,1,0,0,0,
        8850,8851,7,157,0,0,8851,1315,1,0,0,0,8852,8853,5,423,0,0,8853,8854,
        3,1410,705,0,8854,1317,1,0,0,0,8855,8861,3,1416,708,0,8856,8858,
        3,1412,706,0,8857,8859,3,1416,708,0,8858,8857,1,0,0,0,8858,8859,
        1,0,0,0,8859,8861,1,0,0,0,8860,8855,1,0,0,0,8860,8856,1,0,0,0,8861,
        1319,1,0,0,0,8862,8863,3,1406,703,0,8863,1321,1,0,0,0,8864,8865,
        3,1406,703,0,8865,1323,1,0,0,0,8866,8867,5,32,0,0,8867,8872,3,1322,
        661,0,8868,8869,5,29,0,0,8869,8871,3,1322,661,0,8870,8868,1,0,0,
        0,8871,8874,1,0,0,0,8872,8870,1,0,0,0,8872,8873,1,0,0,0,8873,8875,
        1,0,0,0,8874,8872,1,0,0,0,8875,8876,5,33,0,0,8876,1325,1,0,0,0,8877,
        8878,3,1318,659,0,8878,1327,1,0,0,0,8879,8882,3,1326,663,0,8880,
        8882,3,1334,667,0,8881,8879,1,0,0,0,8881,8880,1,0,0,0,8882,1329,
        1,0,0,0,8883,8884,3,1406,703,0,8884,1331,1,0,0,0,8885,8886,3,1318,
        659,0,8886,1333,1,0,0,0,8887,8888,3,1406,703,0,8888,8892,5,28,0,
        0,8889,8890,3,1406,703,0,8890,8891,5,28,0,0,8891,8893,1,0,0,0,8892,
        8889,1,0,0,0,8892,8893,1,0,0,0,8893,8894,1,0,0,0,8894,8895,5,16,
        0,0,8895,1335,1,0,0,0,8896,8897,3,1406,703,0,8897,1337,1,0,0,0,8898,
        8899,3,1406,703,0,8899,1339,1,0,0,0,8900,8901,3,1412,706,0,8901,
        1341,1,0,0,0,8902,8903,3,1412,706,0,8903,1343,1,0,0,0,8904,8905,
        3,1412,706,0,8905,1345,1,0,0,0,8906,8907,3,1412,706,0,8907,1347,
        1,0,0,0,8908,8909,3,1412,706,0,8909,1349,1,0,0,0,8910,8911,3,1412,
        706,0,8911,1351,1,0,0,0,8912,8915,3,1412,706,0,8913,8915,3,1416,
        708,0,8914,8912,1,0,0,0,8914,8913,1,0,0,0,8915,1353,1,0,0,0,8916,
        8919,3,1412,706,0,8917,8919,3,1416,708,0,8918,8916,1,0,0,0,8918,
        8917,1,0,0,0,8919,1355,1,0,0,0,8920,8921,3,1406,703,0,8921,1357,
        1,0,0,0,8922,8923,3,1406,703,0,8923,1359,1,0,0,0,8924,8925,3,1406,
        703,0,8925,1361,1,0,0,0,8926,8927,3,1406,703,0,8927,1363,1,0,0,0,
        8928,8929,3,1412,706,0,8929,1365,1,0,0,0,8930,8931,3,1412,706,0,
        8931,1367,1,0,0,0,8932,8933,3,1406,703,0,8933,1369,1,0,0,0,8934,
        8935,3,1466,733,0,8935,1371,1,0,0,0,8936,8937,3,1466,733,0,8937,
        1373,1,0,0,0,8938,8939,3,1466,733,0,8939,1375,1,0,0,0,8940,8943,
        3,1412,706,0,8941,8943,3,1416,708,0,8942,8940,1,0,0,0,8942,8941,
        1,0,0,0,8943,1377,1,0,0,0,8944,8945,3,1338,669,0,8945,8946,3,1416,
        708,0,8946,1379,1,0,0,0,8947,8955,3,1406,703,0,8948,8949,5,28,0,
        0,8949,8956,5,16,0,0,8950,8953,3,1416,708,0,8951,8952,5,28,0,0,8952,
        8954,5,16,0,0,8953,8951,1,0,0,0,8953,8954,1,0,0,0,8954,8956,1,0,
        0,0,8955,8948,1,0,0,0,8955,8950,1,0,0,0,8955,8956,1,0,0,0,8956,1381,
        1,0,0,0,8957,8960,3,1412,706,0,8958,8960,3,1416,708,0,8959,8957,
        1,0,0,0,8959,8958,1,0,0,0,8960,1383,1,0,0,0,8961,8966,3,1382,691,
        0,8962,8963,5,29,0,0,8963,8965,3,1382,691,0,8964,8962,1,0,0,0,8965,
        8968,1,0,0,0,8966,8964,1,0,0,0,8966,8967,1,0,0,0,8967,1385,1,0,0,
        0,8968,8966,1,0,0,0,8969,8974,3,1380,690,0,8970,8971,5,29,0,0,8971,
        8973,3,1380,690,0,8972,8970,1,0,0,0,8973,8976,1,0,0,0,8974,8972,
        1,0,0,0,8974,8975,1,0,0,0,8975,1387,1,0,0,0,8976,8974,1,0,0,0,8977,
        8978,3,1406,703,0,8978,1389,1,0,0,0,8979,8982,3,1404,702,0,8980,
        8982,3,1492,746,0,8981,8979,1,0,0,0,8981,8980,1,0,0,0,8982,1391,
        1,0,0,0,8983,8984,3,1390,695,0,8984,1393,1,0,0,0,8985,8988,3,1404,
        702,0,8986,8988,3,1498,749,0,8987,8985,1,0,0,0,8987,8986,1,0,0,0,
        8988,1395,1,0,0,0,8989,8990,3,1406,703,0,8990,1397,1,0,0,0,8991,
        8992,3,1438,719,0,8992,1399,1,0,0,0,8993,8994,3,1406,703,0,8994,
        1401,1,0,0,0,8995,8996,3,1406,703,0,8996,1403,1,0,0,0,8997,9001,
        7,158,0,0,8998,8999,4,702,123,0,8999,9001,5,823,0,0,9000,8997,1,
        0,0,0,9000,8998,1,0,0,0,9001,1405,1,0,0,0,9002,9005,3,1404,702,0,
        9003,9005,3,1486,743,0,9004,9002,1,0,0,0,9004,9003,1,0,0,0,9005,
        1407,1,0,0,0,9006,9011,3,1406,703,0,9007,9008,5,29,0,0,9008,9010,
        3,1406,703,0,9009,9007,1,0,0,0,9010,9013,1,0,0,0,9011,9009,1,0,0,
        0,9011,9012,1,0,0,0,9012,1409,1,0,0,0,9013,9011,1,0,0,0,9014,9015,
        5,32,0,0,9015,9016,3,1408,704,0,9016,9017,5,33,0,0,9017,1411,1,0,
        0,0,9018,9020,3,1406,703,0,9019,9021,3,1416,708,0,9020,9019,1,0,
        0,0,9020,9021,1,0,0,0,9021,1413,1,0,0,0,9022,9027,3,1406,703,0,9023,
        9025,3,1416,708,0,9024,9026,3,1416,708,0,9025,9024,1,0,0,0,9025,
        9026,1,0,0,0,9026,9028,1,0,0,0,9027,9023,1,0,0,0,9027,9028,1,0,0,
        0,9028,1415,1,0,0,0,9029,9030,5,28,0,0,9030,9031,3,1406,703,0,9031,
        1417,1,0,0,0,9032,9033,7,159,0,0,9033,1419,1,0,0,0,9034,9035,7,160,
        0,0,9035,1421,1,0,0,0,9036,9037,7,161,0,0,9037,1423,1,0,0,0,9038,
        9044,5,3,0,0,9039,9040,4,712,124,0,9040,9044,5,44,0,0,9041,9044,
        5,5,0,0,9042,9044,5,4,0,0,9043,9038,1,0,0,0,9043,9039,1,0,0,0,9043,
        9041,1,0,0,0,9043,9042,1,0,0,0,9044,1425,1,0,0,0,9045,9051,3,1430,
        715,0,9046,9047,5,14,0,0,9047,9051,3,1418,709,0,9048,9049,5,15,0,
        0,9049,9051,3,1418,709,0,9050,9045,1,0,0,0,9050,9046,1,0,0,0,9050,
        9048,1,0,0,0,9051,1427,1,0,0,0,9052,9056,3,1426,713,0,9053,9054,
        4,714,125,0,9054,9056,3,1434,717,0,9055,9052,1,0,0,0,9055,9053,1,
        0,0,0,9056,1429,1,0,0,0,9057,9067,3,1444,722,0,9058,9067,3,1450,
        725,0,9059,9067,3,1458,729,0,9060,9067,3,1454,727,0,9061,9067,3,
        1452,726,0,9062,9064,5,819,0,0,9063,9062,1,0,0,0,9063,9064,1,0,0,
        0,9064,9065,1,0,0,0,9065,9067,7,162,0,0,9066,9057,1,0,0,0,9066,9058,
        1,0,0,0,9066,9059,1,0,0,0,9066,9060,1,0,0,0,9066,9061,1,0,0,0,9066,
        9063,1,0,0,0,9067,1431,1,0,0,0,9068,9072,3,1430,715,0,9069,9070,
        4,716,126,0,9070,9072,3,1434,717,0,9071,9068,1,0,0,0,9071,9069,1,
        0,0,0,9072,1433,1,0,0,0,9073,9074,5,395,0,0,9074,1435,1,0,0,0,9075,
        9076,5,32,0,0,9076,9081,3,1440,720,0,9077,9078,5,29,0,0,9078,9080,
        3,1440,720,0,9079,9077,1,0,0,0,9080,9083,1,0,0,0,9081,9079,1,0,0,
        0,9081,9082,1,0,0,0,9082,9084,1,0,0,0,9083,9081,1,0,0,0,9084,9085,
        5,33,0,0,9085,1437,1,0,0,0,9086,9090,5,824,0,0,9087,9088,4,719,127,
        0,9088,9090,5,823,0,0,9089,9086,1,0,0,0,9089,9087,1,0,0,0,9090,1439,
        1,0,0,0,9091,9095,3,1438,719,0,9092,9095,5,44,0,0,9093,9095,5,45,
        0,0,9094,9091,1,0,0,0,9094,9092,1,0,0,0,9094,9093,1,0,0,0,9095,1441,
        1,0,0,0,9096,9100,3,1438,719,0,9097,9098,4,721,128,0,9098,9100,5,
        44,0,0,9099,9096,1,0,0,0,9099,9097,1,0,0,0,9100,1443,1,0,0,0,9101,
        9103,5,819,0,0,9102,9101,1,0,0,0,9102,9103,1,0,0,0,9103,9104,1,0,
        0,0,9104,9107,3,1438,719,0,9105,9107,5,821,0,0,9106,9102,1,0,0,0,
        9106,9105,1,0,0,0,9107,9111,1,0,0,0,9108,9110,3,1438,719,0,9109,
        9108,1,0,0,0,9110,9113,1,0,0,0,9111,9109,1,0,0,0,9111,9112,1,0,0,
        0,9112,1445,1,0,0,0,9113,9111,1,0,0,0,9114,9115,3,1438,719,0,9115,
        1447,1,0,0,0,9116,9121,3,1438,719,0,9117,9118,5,29,0,0,9118,9120,
        3,1438,719,0,9119,9117,1,0,0,0,9120,9123,1,0,0,0,9121,9119,1,0,0,
        0,9121,9122,1,0,0,0,9122,1449,1,0,0,0,9123,9121,1,0,0,0,9124,9128,
        3,1456,728,0,9125,9128,5,46,0,0,9126,9128,5,47,0,0,9127,9124,1,0,
        0,0,9127,9125,1,0,0,0,9127,9126,1,0,0,0,9128,1451,1,0,0,0,9129,9130,
        7,163,0,0,9130,1453,1,0,0,0,9131,9132,7,164,0,0,9132,1455,1,0,0,
        0,9133,9134,7,165,0,0,9134,1457,1,0,0,0,9135,9136,5,157,0,0,9136,
        9142,5,824,0,0,9137,9138,5,595,0,0,9138,9142,5,824,0,0,9139,9140,
        5,592,0,0,9140,9142,5,824,0,0,9141,9135,1,0,0,0,9141,9137,1,0,0,
        0,9141,9139,1,0,0,0,9142,1459,1,0,0,0,9143,9146,3,1172,586,0,9144,
        9146,3,1464,732,0,9145,9143,1,0,0,0,9145,9144,1,0,0,0,9146,1461,
        1,0,0,0,9147,9148,3,1464,732,0,9148,1463,1,0,0,0,9149,9150,5,32,
        0,0,9150,9151,5,3,0,0,9151,9152,5,29,0,0,9152,9153,5,3,0,0,9153,
        9154,5,33,0,0,9154,1465,1,0,0,0,9155,9158,3,1406,703,0,9156,9158,
        3,1438,719,0,9157,9155,1,0,0,0,9157,9156,1,0,0,0,9158,1467,1,0,0,
        0,9159,9162,3,1404,702,0,9160,9162,3,1500,750,0,9161,9159,1,0,0,
        0,9161,9160,1,0,0,0,9162,1469,1,0,0,0,9163,9166,3,1394,697,0,9164,
        9166,3,1438,719,0,9165,9163,1,0,0,0,9165,9164,1,0,0,0,9166,1471,
        1,0,0,0,9167,9170,3,1424,712,0,9168,9170,3,1404,702,0,9169,9167,
        1,0,0,0,9169,9168,1,0,0,0,9170,1473,1,0,0,0,9171,9172,5,32,0,0,9172,
        9173,5,33,0,0,9173,1475,1,0,0,0,9174,9175,7,166,0,0,9175,1477,1,
        0,0,0,9176,9177,7,167,0,0,9177,1479,1,0,0,0,9178,9179,5,246,0,0,
        9179,9185,5,28,0,0,9180,9181,5,312,0,0,9181,9185,5,28,0,0,9182,9183,
        5,516,0,0,9183,9185,5,28,0,0,9184,9178,1,0,0,0,9184,9180,1,0,0,0,
        9184,9182,1,0,0,0,9185,1481,1,0,0,0,9186,9187,7,167,0,0,9187,9188,
        5,28,0,0,9188,1483,1,0,0,0,9189,9190,3,1438,719,0,9190,1485,1,0,
        0,0,9191,9198,4,743,129,0,9192,9199,3,1492,746,0,9193,9199,3,1504,
        752,0,9194,9199,5,208,0,0,9195,9199,5,522,0,0,9196,9197,4,743,130,
        0,9197,9199,5,722,0,0,9198,9192,1,0,0,0,9198,9193,1,0,0,0,9198,9194,
        1,0,0,0,9198,9195,1,0,0,0,9198,9196,1,0,0,0,9199,9208,1,0,0,0,9200,
        9206,3,1496,748,0,9201,9206,3,1488,744,0,9202,9206,3,1490,745,0,
        9203,9206,3,1494,747,0,9204,9206,3,1502,751,0,9205,9200,1,0,0,0,
        9205,9201,1,0,0,0,9205,9202,1,0,0,0,9205,9203,1,0,0,0,9205,9204,
        1,0,0,0,9206,9208,1,0,0,0,9207,9191,1,0,0,0,9207,9205,1,0,0,0,9208,
        1487,1,0,0,0,9209,9210,7,168,0,0,9210,1489,1,0,0,0,9211,9212,7,169,
        0,0,9212,1491,1,0,0,0,9213,9224,4,746,131,0,9214,9225,3,1506,753,
        0,9215,9225,5,205,0,0,9216,9225,5,222,0,0,9217,9225,5,389,0,0,9218,
        9225,5,441,0,0,9219,9225,5,445,0,0,9220,9225,5,468,0,0,9221,9225,
        5,476,0,0,9222,9225,5,717,0,0,9223,9225,5,575,0,0,9224,9214,1,0,
        0,0,9224,9215,1,0,0,0,9224,9216,1,0,0,0,9224,9217,1,0,0,0,9224,9218,
        1,0,0,0,9224,9219,1,0,0,0,9224,9220,1,0,0,0,9224,9221,1,0,0,0,9224,
        9222,1,0,0,0,9224,9223,1,0,0,0,9225,9232,1,0,0,0,9226,9230,3,1496,
        748,0,9227,9230,3,1494,747,0,9228,9230,3,1502,751,0,9229,9226,1,
        0,0,0,9229,9227,1,0,0,0,9229,9228,1,0,0,0,9230,9232,1,0,0,0,9231,
        9213,1,0,0,0,9231,9229,1,0,0,0,9232,1493,1,0,0,0,9233,9234,7,170,
        0,0,9234,1495,1,0,0,0,9235,9241,7,171,0,0,9236,9237,4,748,132,0,
        9237,9241,7,172,0,0,9238,9239,4,748,133,0,9239,9241,7,173,0,0,9240,
        9235,1,0,0,0,9240,9236,1,0,0,0,9240,9238,1,0,0,0,9241,1497,1,0,0,
        0,9242,9245,4,749,134,0,9243,9246,3,1506,753,0,9244,9246,3,1504,
        752,0,9245,9243,1,0,0,0,9245,9244,1,0,0,0,9246,9253,1,0,0,0,9247,
        9251,3,1496,748,0,9248,9251,3,1490,745,0,9249,9251,3,1502,751,0,
        9250,9247,1,0,0,0,9250,9248,1,0,0,0,9250,9249,1,0,0,0,9251,9253,
        1,0,0,0,9252,9242,1,0,0,0,9252,9250,1,0,0,0,9253,1499,1,0,0,0,9254,
        9259,3,1496,748,0,9255,9259,3,1488,744,0,9256,9259,3,1490,745,0,
        9257,9259,3,1494,747,0,9258,9254,1,0,0,0,9258,9255,1,0,0,0,9258,
        9256,1,0,0,0,9258,9257,1,0,0,0,9259,1501,1,0,0,0,9260,9261,7,167,
        0,0,9261,1503,1,0,0,0,9262,9263,7,174,0,0,9263,1505,1,0,0,0,9264,
        9268,7,175,0,0,9265,9266,4,753,135,0,9266,9268,5,668,0,0,9267,9264,
        1,0,0,0,9267,9265,1,0,0,0,9268,1507,1,0,0,0,1177,1510,1513,1515,
        1595,1603,1608,1618,1625,1631,1634,1637,1644,1649,1652,1657,1663,
        1665,1669,1673,1682,1686,1691,1697,1704,1709,1714,1721,1724,1730,
        1733,1740,1750,1755,1760,1768,1774,1778,1783,1792,1798,1804,1810,
        1819,1825,1834,1846,1850,1856,1860,1866,1870,1875,1878,1884,1890,
        1896,1900,1905,1909,1913,1929,1937,1945,1952,1979,1994,1997,2003,
        2008,2014,2019,2023,2028,2032,2036,2040,2044,2048,2050,2060,2068,
        2075,2083,2087,2092,2099,2104,2109,2119,2123,2128,2131,2134,2137,
        2144,2151,2155,2180,2182,2190,2192,2212,2216,2222,2229,2232,2236,
        2243,2246,2255,2262,2267,2270,2275,2281,2284,2288,2294,2297,2302,
        2306,2315,2318,2324,2331,2337,2340,2344,2353,2356,2364,2370,2374,
        2384,2387,2392,2400,2415,2418,2421,2426,2432,2442,2452,2455,2458,
        2462,2470,2483,2487,2492,2501,2518,2537,2546,2549,2557,2564,2566,
        2573,2578,2592,2596,2602,2608,2614,2620,2626,2631,2635,2643,2649,
        2655,2661,2666,2669,2672,2681,2684,2695,2699,2710,2718,2722,2731,
        2734,2740,2742,2746,2753,2766,2773,2779,2782,2799,2818,2822,2828,
        2834,2840,2845,2852,2859,2864,2867,2871,2875,2880,2884,2888,2894,
        2899,2902,2906,2912,2916,2920,2928,2936,2945,2954,2967,2970,2973,
        2979,2987,2992,2995,2998,3001,3004,3006,3012,3014,3030,3037,3040,
        3042,3044,3054,3056,3060,3063,3066,3070,3074,3079,3082,3085,3091,
        3094,3103,3113,3116,3119,3123,3129,3134,3139,3144,3148,3155,3166,
        3169,3172,3175,3179,3182,3185,3191,3194,3197,3200,3203,3207,3210,
        3213,3225,3233,3249,3252,3256,3260,3268,3276,3280,3300,3303,3307,
        3313,3317,3320,3329,3339,3342,3346,3349,3353,3358,3361,3366,3372,
        3381,3387,3392,3395,3398,3401,3404,3407,3410,3425,3429,3435,3438,
        3441,3447,3452,3456,3459,3466,3468,3485,3497,3502,3505,3508,3513,
        3519,3535,3555,3564,3568,3575,3580,3589,3599,3613,3620,3629,3638,
        3644,3650,3656,3659,3665,3672,3676,3682,3688,3690,3693,3697,3707,
        3712,3717,3724,3733,3741,3746,3750,3756,3759,3762,3766,3770,3780,
        3784,3787,3790,3793,3798,3804,3807,3813,3816,3818,3823,3835,3844,
        3857,3860,3865,3872,3876,3879,3885,3899,3906,3915,3921,3930,3934,
        3938,3948,3950,3958,3965,3970,3973,3977,3980,3986,3989,3992,3998,
        4005,4010,4014,4017,4020,4023,4025,4029,4036,4042,4046,4051,4054,
        4057,4060,4062,4067,4076,4085,4089,4095,4098,4101,4107,4114,4116,
        4124,4130,4132,4142,4144,4155,4161,4168,4176,4180,4184,4187,4189,
        4197,4206,4215,4222,4229,4360,4414,4421,4425,4441,4453,4456,4468,
        4472,4478,4485,4492,4499,4506,4513,4520,4523,4530,4538,4546,4556,
        4562,4566,4569,4572,4575,4578,4581,4586,4589,4596,4602,4626,4633,
        4636,4645,4651,4672,4678,4684,4691,4699,4705,4717,4719,4725,4729,
        4731,4735,4746,4751,4757,4764,4767,4770,4776,4778,4786,4789,4791,
        4793,4800,4811,4814,4816,4820,4825,4827,4832,4838,4841,4843,4847,
        4850,4859,4868,4874,4876,4878,4887,4891,4897,4900,4902,4913,4918,
        4923,4929,4931,4935,4937,4945,4949,4954,4957,4962,4967,4973,4982,
        4993,4995,5007,5012,5020,5026,5028,5035,5037,5044,5049,5060,5065,
        5067,5071,5077,5080,5083,5093,5095,5101,5114,5118,5123,5140,5146,
        5155,5163,5167,5173,5183,5187,5196,5201,5207,5209,5213,5224,5231,
        5237,5241,5246,5251,5259,5263,5268,5277,5290,5292,5306,5315,5317,
        5324,5329,5333,5338,5346,5353,5357,5363,5370,5373,5380,5383,5389,
        5406,5411,5424,5427,5438,5440,5446,5460,5477,5482,5485,5489,5492,
        5500,5506,5511,5514,5516,5520,5525,5527,5539,5545,5559,5571,5575,
        5577,5585,5589,5598,5611,5616,5620,5624,5627,5631,5635,5638,5643,
        5646,5652,5655,5661,5664,5691,5697,5700,5716,5723,5727,5730,5733,
        5740,5744,5747,5750,5754,5760,5763,5767,5788,5793,5801,5806,5809,
        5813,5817,5821,5827,5831,5836,5841,5852,5854,5860,5882,5904,5911,
        5938,5940,5944,5956,5966,5976,5980,5988,5991,5995,6004,6008,6015,
        6020,6028,6033,6039,6046,6051,6057,6060,6070,6072,6079,6084,6088,
        6091,6098,6103,6107,6118,6126,6130,6133,6136,6140,6144,6149,6155,
        6159,6170,6173,6176,6179,6187,6191,6196,6204,6212,6218,6222,6228,
        6237,6248,6258,6276,6279,6283,6294,6296,6305,6317,6319,6326,6332,
        6338,6346,6357,6361,6390,6392,6398,6415,6422,6436,6447,6452,6463,
        6473,6480,6483,6517,6525,6527,6537,6542,6547,6554,6560,6565,6570,
        6576,6580,6585,6590,6597,6605,6610,6614,6618,6622,6624,6642,6650,
        6654,6661,6673,6676,6680,6688,6700,6707,6711,6715,6721,6731,6740,
        6742,6745,6754,6761,6774,6779,6786,6792,6818,6828,6860,6879,6885,
        6889,6920,6926,6938,6951,6955,6959,6987,7037,7047,7059,7064,7072,
        7092,7096,7112,7115,7120,7123,7132,7136,7142,7148,7152,7163,7169,
        7171,7178,7185,7189,7196,7201,7206,7215,7218,7222,7227,7229,7233,
        7237,7250,7254,7257,7261,7265,7269,7276,7280,7284,7292,7296,7303,
        7309,7317,7338,7343,7350,7372,7388,7398,7402,7409,7412,7423,7432,
        7435,7442,7447,7473,7479,7485,7489,7499,7503,7516,7528,7544,7552,
        7562,7565,7570,7574,7581,7586,7593,7601,7604,7609,7617,7620,7634,
        7637,7650,7654,7656,7661,7666,7673,7679,7685,7690,7693,7699,7704,
        7707,7713,7717,7723,7725,7728,7734,7740,7747,7749,7751,7755,7761,
        7765,7769,7774,7779,7782,7785,7795,7801,7808,7813,7826,7834,7840,
        7845,7856,7860,7865,7869,7872,7877,7881,7889,7897,7899,7908,7916,
        7923,7926,7934,7943,7945,7951,7955,7964,7970,7973,7984,7993,7996,
        8001,8003,8006,8009,8013,8016,8020,8025,8028,8032,8035,8039,8044,
        8048,8060,8064,8070,8073,8078,8082,8086,8091,8100,8103,8107,8111,
        8114,8118,8122,8127,8132,8137,8142,8147,8149,8154,8161,8169,8175,
        8177,8181,8185,8189,8193,8208,8214,8221,8225,8230,8235,8238,8242,
        8245,8250,8254,8260,8264,8268,8273,8278,8283,8288,8293,8298,8303,
        8308,8313,8318,8323,8328,8333,8343,8349,8355,8360,8367,8372,8381,
        8387,8392,8396,8399,8403,8408,8412,8417,8421,8430,8433,8436,8439,
        8443,8447,8451,8466,8469,8471,8476,8485,8488,8492,8504,8516,8521,
        8526,8535,8540,8549,8554,8558,8562,8566,8571,8576,8582,8587,8590,
        8597,8606,8613,8630,8632,8643,8655,8668,8676,8683,8692,8698,8706,
        8712,8723,8731,8737,8741,8744,8750,8758,8797,8822,8832,8837,8839,
        8846,8858,8860,8872,8881,8892,8914,8918,8942,8953,8955,8959,8966,
        8974,8981,8987,9000,9004,9011,9020,9025,9027,9043,9050,9055,9063,
        9066,9071,9081,9089,9094,9099,9102,9106,9111,9121,9127,9141,9145,
        9157,9161,9165,9169,9184,9198,9205,9207,9224,9229,9231,9240,9245,
        9250,9252,9258,9267
    ];

    private static __ATN: antlr.ATN;
    public static get _ATN(): antlr.ATN {
        if (!MySQLParser.__ATN) {
            MySQLParser.__ATN = new antlr.ATNDeserializer().deserialize(MySQLParser._serializedATN);
        }

        return MySQLParser.__ATN;
    }


    private static readonly vocabulary = new antlr.Vocabulary(MySQLParser.literalNames, MySQLParser.symbolicNames, []);

    public override get vocabulary(): antlr.Vocabulary {
        return MySQLParser.vocabulary;
    }

    private static readonly decisionsToDFA = MySQLParser._ATN.decisionToState.map( (ds: antlr.DecisionState, index: number) => new antlr.DFA(ds, index) );
}

export class QueryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(MySQLParser.EOF, 0)!;
    }
    public simpleStatement(): SimpleStatementContext | null {
        return this.getRuleContext(0, SimpleStatementContext);
    }
    public beginWork(): BeginWorkContext | null {
        return this.getRuleContext(0, BeginWorkContext);
    }
    public SEMICOLON_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SEMICOLON_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_query;
    }
}


export class SimpleStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alterStatement(): AlterStatementContext | null {
        return this.getRuleContext(0, AlterStatementContext);
    }
    public createStatement(): CreateStatementContext | null {
        return this.getRuleContext(0, CreateStatementContext);
    }
    public dropStatement(): DropStatementContext | null {
        return this.getRuleContext(0, DropStatementContext);
    }
    public renameTableStatement(): RenameTableStatementContext | null {
        return this.getRuleContext(0, RenameTableStatementContext);
    }
    public truncateTableStatement(): TruncateTableStatementContext | null {
        return this.getRuleContext(0, TruncateTableStatementContext);
    }
    public importStatement(): ImportStatementContext | null {
        return this.getRuleContext(0, ImportStatementContext);
    }
    public callStatement(): CallStatementContext | null {
        return this.getRuleContext(0, CallStatementContext);
    }
    public deleteStatement(): DeleteStatementContext | null {
        return this.getRuleContext(0, DeleteStatementContext);
    }
    public doStatement(): DoStatementContext | null {
        return this.getRuleContext(0, DoStatementContext);
    }
    public handlerStatement(): HandlerStatementContext | null {
        return this.getRuleContext(0, HandlerStatementContext);
    }
    public insertStatement(): InsertStatementContext | null {
        return this.getRuleContext(0, InsertStatementContext);
    }
    public loadStatement(): LoadStatementContext | null {
        return this.getRuleContext(0, LoadStatementContext);
    }
    public replaceStatement(): ReplaceStatementContext | null {
        return this.getRuleContext(0, ReplaceStatementContext);
    }
    public selectStatement(): SelectStatementContext | null {
        return this.getRuleContext(0, SelectStatementContext);
    }
    public updateStatement(): UpdateStatementContext | null {
        return this.getRuleContext(0, UpdateStatementContext);
    }
    public transactionOrLockingStatement(): TransactionOrLockingStatementContext | null {
        return this.getRuleContext(0, TransactionOrLockingStatementContext);
    }
    public replicationStatement(): ReplicationStatementContext | null {
        return this.getRuleContext(0, ReplicationStatementContext);
    }
    public preparedStatement(): PreparedStatementContext | null {
        return this.getRuleContext(0, PreparedStatementContext);
    }
    public cloneStatement(): CloneStatementContext | null {
        return this.getRuleContext(0, CloneStatementContext);
    }
    public accountManagementStatement(): AccountManagementStatementContext | null {
        return this.getRuleContext(0, AccountManagementStatementContext);
    }
    public tableAdministrationStatement(): TableAdministrationStatementContext | null {
        return this.getRuleContext(0, TableAdministrationStatementContext);
    }
    public uninstallStatement(): UninstallStatementContext | null {
        return this.getRuleContext(0, UninstallStatementContext);
    }
    public installStatement(): InstallStatementContext | null {
        return this.getRuleContext(0, InstallStatementContext);
    }
    public setStatement(): SetStatementContext | null {
        return this.getRuleContext(0, SetStatementContext);
    }
    public showDatabasesStatement(): ShowDatabasesStatementContext | null {
        return this.getRuleContext(0, ShowDatabasesStatementContext);
    }
    public showTablesStatement(): ShowTablesStatementContext | null {
        return this.getRuleContext(0, ShowTablesStatementContext);
    }
    public showTriggersStatement(): ShowTriggersStatementContext | null {
        return this.getRuleContext(0, ShowTriggersStatementContext);
    }
    public showEventsStatement(): ShowEventsStatementContext | null {
        return this.getRuleContext(0, ShowEventsStatementContext);
    }
    public showTableStatusStatement(): ShowTableStatusStatementContext | null {
        return this.getRuleContext(0, ShowTableStatusStatementContext);
    }
    public showOpenTablesStatement(): ShowOpenTablesStatementContext | null {
        return this.getRuleContext(0, ShowOpenTablesStatementContext);
    }
    public showParseTreeStatement(): ShowParseTreeStatementContext | null {
        return this.getRuleContext(0, ShowParseTreeStatementContext);
    }
    public showPluginsStatement(): ShowPluginsStatementContext | null {
        return this.getRuleContext(0, ShowPluginsStatementContext);
    }
    public showEngineLogsStatement(): ShowEngineLogsStatementContext | null {
        return this.getRuleContext(0, ShowEngineLogsStatementContext);
    }
    public showEngineMutexStatement(): ShowEngineMutexStatementContext | null {
        return this.getRuleContext(0, ShowEngineMutexStatementContext);
    }
    public showEngineStatusStatement(): ShowEngineStatusStatementContext | null {
        return this.getRuleContext(0, ShowEngineStatusStatementContext);
    }
    public showColumnsStatement(): ShowColumnsStatementContext | null {
        return this.getRuleContext(0, ShowColumnsStatementContext);
    }
    public showBinaryLogsStatement(): ShowBinaryLogsStatementContext | null {
        return this.getRuleContext(0, ShowBinaryLogsStatementContext);
    }
    public showBinaryLogStatusStatement(): ShowBinaryLogStatusStatementContext | null {
        return this.getRuleContext(0, ShowBinaryLogStatusStatementContext);
    }
    public showReplicasStatement(): ShowReplicasStatementContext | null {
        return this.getRuleContext(0, ShowReplicasStatementContext);
    }
    public showBinlogEventsStatement(): ShowBinlogEventsStatementContext | null {
        return this.getRuleContext(0, ShowBinlogEventsStatementContext);
    }
    public showRelaylogEventsStatement(): ShowRelaylogEventsStatementContext | null {
        return this.getRuleContext(0, ShowRelaylogEventsStatementContext);
    }
    public showKeysStatement(): ShowKeysStatementContext | null {
        return this.getRuleContext(0, ShowKeysStatementContext);
    }
    public showEnginesStatement(): ShowEnginesStatementContext | null {
        return this.getRuleContext(0, ShowEnginesStatementContext);
    }
    public showCountWarningsStatement(): ShowCountWarningsStatementContext | null {
        return this.getRuleContext(0, ShowCountWarningsStatementContext);
    }
    public showCountErrorsStatement(): ShowCountErrorsStatementContext | null {
        return this.getRuleContext(0, ShowCountErrorsStatementContext);
    }
    public showWarningsStatement(): ShowWarningsStatementContext | null {
        return this.getRuleContext(0, ShowWarningsStatementContext);
    }
    public showErrorsStatement(): ShowErrorsStatementContext | null {
        return this.getRuleContext(0, ShowErrorsStatementContext);
    }
    public showProfilesStatement(): ShowProfilesStatementContext | null {
        return this.getRuleContext(0, ShowProfilesStatementContext);
    }
    public showProfileStatement(): ShowProfileStatementContext | null {
        return this.getRuleContext(0, ShowProfileStatementContext);
    }
    public showStatusStatement(): ShowStatusStatementContext | null {
        return this.getRuleContext(0, ShowStatusStatementContext);
    }
    public showProcessListStatement(): ShowProcessListStatementContext | null {
        return this.getRuleContext(0, ShowProcessListStatementContext);
    }
    public showVariablesStatement(): ShowVariablesStatementContext | null {
        return this.getRuleContext(0, ShowVariablesStatementContext);
    }
    public showCharacterSetStatement(): ShowCharacterSetStatementContext | null {
        return this.getRuleContext(0, ShowCharacterSetStatementContext);
    }
    public showCollationStatement(): ShowCollationStatementContext | null {
        return this.getRuleContext(0, ShowCollationStatementContext);
    }
    public showPrivilegesStatement(): ShowPrivilegesStatementContext | null {
        return this.getRuleContext(0, ShowPrivilegesStatementContext);
    }
    public showGrantsStatement(): ShowGrantsStatementContext | null {
        return this.getRuleContext(0, ShowGrantsStatementContext);
    }
    public showCreateDatabaseStatement(): ShowCreateDatabaseStatementContext | null {
        return this.getRuleContext(0, ShowCreateDatabaseStatementContext);
    }
    public showCreateTableStatement(): ShowCreateTableStatementContext | null {
        return this.getRuleContext(0, ShowCreateTableStatementContext);
    }
    public showCreateViewStatement(): ShowCreateViewStatementContext | null {
        return this.getRuleContext(0, ShowCreateViewStatementContext);
    }
    public showMasterStatusStatement(): ShowMasterStatusStatementContext | null {
        return this.getRuleContext(0, ShowMasterStatusStatementContext);
    }
    public showReplicaStatusStatement(): ShowReplicaStatusStatementContext | null {
        return this.getRuleContext(0, ShowReplicaStatusStatementContext);
    }
    public showCreateProcedureStatement(): ShowCreateProcedureStatementContext | null {
        return this.getRuleContext(0, ShowCreateProcedureStatementContext);
    }
    public showCreateFunctionStatement(): ShowCreateFunctionStatementContext | null {
        return this.getRuleContext(0, ShowCreateFunctionStatementContext);
    }
    public showCreateTriggerStatement(): ShowCreateTriggerStatementContext | null {
        return this.getRuleContext(0, ShowCreateTriggerStatementContext);
    }
    public showCreateProcedureStatusStatement(): ShowCreateProcedureStatusStatementContext | null {
        return this.getRuleContext(0, ShowCreateProcedureStatusStatementContext);
    }
    public showCreateFunctionStatusStatement(): ShowCreateFunctionStatusStatementContext | null {
        return this.getRuleContext(0, ShowCreateFunctionStatusStatementContext);
    }
    public showCreateProcedureCodeStatement(): ShowCreateProcedureCodeStatementContext | null {
        return this.getRuleContext(0, ShowCreateProcedureCodeStatementContext);
    }
    public showCreateFunctionCodeStatement(): ShowCreateFunctionCodeStatementContext | null {
        return this.getRuleContext(0, ShowCreateFunctionCodeStatementContext);
    }
    public showCreateEventStatement(): ShowCreateEventStatementContext | null {
        return this.getRuleContext(0, ShowCreateEventStatementContext);
    }
    public showCreateUserStatement(): ShowCreateUserStatementContext | null {
        return this.getRuleContext(0, ShowCreateUserStatementContext);
    }
    public resourceGroupManagement(): ResourceGroupManagementContext | null {
        return this.getRuleContext(0, ResourceGroupManagementContext);
    }
    public otherAdministrativeStatement(): OtherAdministrativeStatementContext | null {
        return this.getRuleContext(0, OtherAdministrativeStatementContext);
    }
    public utilityStatement(): UtilityStatementContext | null {
        return this.getRuleContext(0, UtilityStatementContext);
    }
    public getDiagnosticsStatement(): GetDiagnosticsStatementContext | null {
        return this.getRuleContext(0, GetDiagnosticsStatementContext);
    }
    public signalStatement(): SignalStatementContext | null {
        return this.getRuleContext(0, SignalStatementContext);
    }
    public resignalStatement(): ResignalStatementContext | null {
        return this.getRuleContext(0, ResignalStatementContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_simpleStatement;
    }
}


export class AlterStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.ALTER_SYMBOL, 0)!;
    }
    public alterTable(): AlterTableContext | null {
        return this.getRuleContext(0, AlterTableContext);
    }
    public alterDatabase(): AlterDatabaseContext | null {
        return this.getRuleContext(0, AlterDatabaseContext);
    }
    public PROCEDURE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PROCEDURE_SYMBOL, 0);
    }
    public procedureRef(): ProcedureRefContext | null {
        return this.getRuleContext(0, ProcedureRefContext);
    }
    public FUNCTION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FUNCTION_SYMBOL, 0);
    }
    public functionRef(): FunctionRefContext | null {
        return this.getRuleContext(0, FunctionRefContext);
    }
    public alterView(): AlterViewContext | null {
        return this.getRuleContext(0, AlterViewContext);
    }
    public alterEvent(): AlterEventContext | null {
        return this.getRuleContext(0, AlterEventContext);
    }
    public alterTablespace(): AlterTablespaceContext | null {
        return this.getRuleContext(0, AlterTablespaceContext);
    }
    public alterUndoTablespace(): AlterUndoTablespaceContext | null {
        return this.getRuleContext(0, AlterUndoTablespaceContext);
    }
    public alterLogfileGroup(): AlterLogfileGroupContext | null {
        return this.getRuleContext(0, AlterLogfileGroupContext);
    }
    public alterServer(): AlterServerContext | null {
        return this.getRuleContext(0, AlterServerContext);
    }
    public alterInstanceStatement(): AlterInstanceStatementContext | null {
        return this.getRuleContext(0, AlterInstanceStatementContext);
    }
    public routineAlterOptions(): RoutineAlterOptionsContext | null {
        return this.getRuleContext(0, RoutineAlterOptionsContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_alterStatement;
    }
}


export class AlterDatabaseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DATABASE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.DATABASE_SYMBOL, 0)!;
    }
    public schemaRef(): SchemaRefContext {
        return this.getRuleContext(0, SchemaRefContext)!;
    }
    public alterDatabaseOption(): AlterDatabaseOptionContext[];
    public alterDatabaseOption(i: number): AlterDatabaseOptionContext | null;
    public alterDatabaseOption(i?: number): AlterDatabaseOptionContext[] | AlterDatabaseOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AlterDatabaseOptionContext);
        }

        return this.getRuleContext(i, AlterDatabaseOptionContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_alterDatabase;
    }
}


export class AlterDatabaseOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public createDatabaseOption(): CreateDatabaseOptionContext | null {
        return this.getRuleContext(0, CreateDatabaseOptionContext);
    }
    public READ_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.READ_SYMBOL, 0);
    }
    public ONLY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ONLY_SYMBOL, 0);
    }
    public ternaryOption(): TernaryOptionContext | null {
        return this.getRuleContext(0, TernaryOptionContext);
    }
    public EQUAL_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_alterDatabaseOption;
    }
}


export class AlterEventContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EVENT_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.EVENT_SYMBOL, 0)!;
    }
    public eventRef(): EventRefContext {
        return this.getRuleContext(0, EventRefContext)!;
    }
    public definerClause(): DefinerClauseContext | null {
        return this.getRuleContext(0, DefinerClauseContext);
    }
    public ON_SYMBOL(): antlr.TerminalNode[];
    public ON_SYMBOL(i: number): antlr.TerminalNode | null;
    public ON_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.ON_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.ON_SYMBOL, i);
    	}
    }
    public SCHEDULE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SCHEDULE_SYMBOL, 0);
    }
    public schedule(): ScheduleContext | null {
        return this.getRuleContext(0, ScheduleContext);
    }
    public COMPLETION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COMPLETION_SYMBOL, 0);
    }
    public PRESERVE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PRESERVE_SYMBOL, 0);
    }
    public RENAME_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RENAME_SYMBOL, 0);
    }
    public TO_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TO_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public ENABLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ENABLE_SYMBOL, 0);
    }
    public DISABLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DISABLE_SYMBOL, 0);
    }
    public COMMENT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
    }
    public textLiteral(): TextLiteralContext | null {
        return this.getRuleContext(0, TextLiteralContext);
    }
    public DO_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DO_SYMBOL, 0);
    }
    public compoundStatement(): CompoundStatementContext | null {
        return this.getRuleContext(0, CompoundStatementContext);
    }
    public NOT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NOT_SYMBOL, 0);
    }
    public replica(): ReplicaContext | null {
        return this.getRuleContext(0, ReplicaContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_alterEvent;
    }
}


export class AlterLogfileGroupContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOGFILE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.LOGFILE_SYMBOL, 0)!;
    }
    public GROUP_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.GROUP_SYMBOL, 0)!;
    }
    public logfileGroupRef(): LogfileGroupRefContext {
        return this.getRuleContext(0, LogfileGroupRefContext)!;
    }
    public ADD_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.ADD_SYMBOL, 0)!;
    }
    public UNDOFILE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.UNDOFILE_SYMBOL, 0)!;
    }
    public textLiteral(): TextLiteralContext {
        return this.getRuleContext(0, TextLiteralContext)!;
    }
    public alterLogfileGroupOptions(): AlterLogfileGroupOptionsContext | null {
        return this.getRuleContext(0, AlterLogfileGroupOptionsContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_alterLogfileGroup;
    }
}


export class AlterLogfileGroupOptionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alterLogfileGroupOption(): AlterLogfileGroupOptionContext[];
    public alterLogfileGroupOption(i: number): AlterLogfileGroupOptionContext | null;
    public alterLogfileGroupOption(i?: number): AlterLogfileGroupOptionContext[] | AlterLogfileGroupOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AlterLogfileGroupOptionContext);
        }

        return this.getRuleContext(i, AlterLogfileGroupOptionContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_alterLogfileGroupOptions;
    }
}


export class AlterLogfileGroupOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tsOptionInitialSize(): TsOptionInitialSizeContext | null {
        return this.getRuleContext(0, TsOptionInitialSizeContext);
    }
    public tsOptionEngine(): TsOptionEngineContext | null {
        return this.getRuleContext(0, TsOptionEngineContext);
    }
    public tsOptionWait(): TsOptionWaitContext | null {
        return this.getRuleContext(0, TsOptionWaitContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_alterLogfileGroupOption;
    }
}


export class AlterServerContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SERVER_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SERVER_SYMBOL, 0)!;
    }
    public serverRef(): ServerRefContext {
        return this.getRuleContext(0, ServerRefContext)!;
    }
    public serverOptions(): ServerOptionsContext {
        return this.getRuleContext(0, ServerOptionsContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_alterServer;
    }
}


export class AlterTableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABLE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0)!;
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(0, TableRefContext)!;
    }
    public onlineOption(): OnlineOptionContext | null {
        return this.getRuleContext(0, OnlineOptionContext);
    }
    public alterTableActions(): AlterTableActionsContext | null {
        return this.getRuleContext(0, AlterTableActionsContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_alterTable;
    }
}


export class AlterTableActionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alterCommandList(): AlterCommandListContext | null {
        return this.getRuleContext(0, AlterCommandListContext);
    }
    public partitionClause(): PartitionClauseContext | null {
        return this.getRuleContext(0, PartitionClauseContext);
    }
    public removePartitioning(): RemovePartitioningContext | null {
        return this.getRuleContext(0, RemovePartitioningContext);
    }
    public standaloneAlterCommands(): StandaloneAlterCommandsContext | null {
        return this.getRuleContext(0, StandaloneAlterCommandsContext);
    }
    public alterCommandsModifierList(): AlterCommandsModifierListContext | null {
        return this.getRuleContext(0, AlterCommandsModifierListContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_alterTableActions;
    }
}


export class AlterCommandListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alterCommandsModifierList(): AlterCommandsModifierListContext | null {
        return this.getRuleContext(0, AlterCommandsModifierListContext);
    }
    public alterList(): AlterListContext | null {
        return this.getRuleContext(0, AlterListContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_alterCommandList;
    }
}


export class AlterCommandsModifierListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alterCommandsModifier(): AlterCommandsModifierContext[];
    public alterCommandsModifier(i: number): AlterCommandsModifierContext | null;
    public alterCommandsModifier(i?: number): AlterCommandsModifierContext[] | AlterCommandsModifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AlterCommandsModifierContext);
        }

        return this.getRuleContext(i, AlterCommandsModifierContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_alterCommandsModifierList;
    }
}


export class StandaloneAlterCommandsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DISCARD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DISCARD_SYMBOL, 0);
    }
    public TABLESPACE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
    }
    public IMPORT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.IMPORT_SYMBOL, 0);
    }
    public alterPartition(): AlterPartitionContext | null {
        return this.getRuleContext(0, AlterPartitionContext);
    }
    public SECONDARY_LOAD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_LOAD_SYMBOL, 0);
    }
    public SECONDARY_UNLOAD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_UNLOAD_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_standaloneAlterCommands;
    }
}


export class AlterPartitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ADD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ADD_SYMBOL, 0);
    }
    public PARTITION_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.PARTITION_SYMBOL, 0)!;
    }
    public partitionDefinitions(): PartitionDefinitionsContext | null {
        return this.getRuleContext(0, PartitionDefinitionsContext);
    }
    public PARTITIONS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PARTITIONS_SYMBOL, 0);
    }
    public real_ulong_number(): Real_ulong_numberContext | null {
        return this.getRuleContext(0, Real_ulong_numberContext);
    }
    public noWriteToBinLog(): NoWriteToBinLogContext[];
    public noWriteToBinLog(i: number): NoWriteToBinLogContext | null;
    public noWriteToBinLog(i?: number): NoWriteToBinLogContext[] | NoWriteToBinLogContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NoWriteToBinLogContext);
        }

        return this.getRuleContext(i, NoWriteToBinLogContext);
    }
    public DROP_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DROP_SYMBOL, 0);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(0, IdentifierListContext);
    }
    public REBUILD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REBUILD_SYMBOL, 0);
    }
    public allOrPartitionNameList(): AllOrPartitionNameListContext | null {
        return this.getRuleContext(0, AllOrPartitionNameListContext);
    }
    public OPTIMIZE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OPTIMIZE_SYMBOL, 0);
    }
    public ANALYZE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ANALYZE_SYMBOL, 0);
    }
    public CHECK_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CHECK_SYMBOL, 0);
    }
    public checkOption(): CheckOptionContext[];
    public checkOption(i: number): CheckOptionContext | null;
    public checkOption(i?: number): CheckOptionContext[] | CheckOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CheckOptionContext);
        }

        return this.getRuleContext(i, CheckOptionContext);
    }
    public REPAIR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REPAIR_SYMBOL, 0);
    }
    public repairType(): RepairTypeContext[];
    public repairType(i: number): RepairTypeContext | null;
    public repairType(i?: number): RepairTypeContext[] | RepairTypeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RepairTypeContext);
        }

        return this.getRuleContext(i, RepairTypeContext);
    }
    public COALESCE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COALESCE_SYMBOL, 0);
    }
    public TRUNCATE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TRUNCATE_SYMBOL, 0);
    }
    public REORGANIZE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REORGANIZE_SYMBOL, 0);
    }
    public INTO_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INTO_SYMBOL, 0);
    }
    public EXCHANGE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EXCHANGE_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public WITH_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public TABLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(0, TableRefContext);
    }
    public withValidation(): WithValidationContext | null {
        return this.getRuleContext(0, WithValidationContext);
    }
    public DISCARD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DISCARD_SYMBOL, 0);
    }
    public TABLESPACE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
    }
    public IMPORT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.IMPORT_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_alterPartition;
    }
}


export class AlterListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alterListItem(): AlterListItemContext[];
    public alterListItem(i: number): AlterListItemContext | null;
    public alterListItem(i?: number): AlterListItemContext[] | AlterListItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AlterListItemContext);
        }

        return this.getRuleContext(i, AlterListItemContext);
    }
    public createTableOptionsSpaceSeparated(): CreateTableOptionsSpaceSeparatedContext[];
    public createTableOptionsSpaceSeparated(i: number): CreateTableOptionsSpaceSeparatedContext | null;
    public createTableOptionsSpaceSeparated(i?: number): CreateTableOptionsSpaceSeparatedContext[] | CreateTableOptionsSpaceSeparatedContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CreateTableOptionsSpaceSeparatedContext);
        }

        return this.getRuleContext(i, CreateTableOptionsSpaceSeparatedContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public alterCommandsModifier(): AlterCommandsModifierContext[];
    public alterCommandsModifier(i: number): AlterCommandsModifierContext | null;
    public alterCommandsModifier(i?: number): AlterCommandsModifierContext[] | AlterCommandsModifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AlterCommandsModifierContext);
        }

        return this.getRuleContext(i, AlterCommandsModifierContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_alterList;
    }
}


export class AlterCommandsModifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alterAlgorithmOption(): AlterAlgorithmOptionContext | null {
        return this.getRuleContext(0, AlterAlgorithmOptionContext);
    }
    public alterLockOption(): AlterLockOptionContext | null {
        return this.getRuleContext(0, AlterLockOptionContext);
    }
    public withValidation(): WithValidationContext | null {
        return this.getRuleContext(0, WithValidationContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_alterCommandsModifier;
    }
}


export class AlterListItemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ADD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ADD_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public fieldDefinition(): FieldDefinitionContext | null {
        return this.getRuleContext(0, FieldDefinitionContext);
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public tableElementList(): TableElementListContext | null {
        return this.getRuleContext(0, TableElementListContext);
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public COLUMN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COLUMN_SYMBOL, 0);
    }
    public checkOrReferences(): CheckOrReferencesContext | null {
        return this.getRuleContext(0, CheckOrReferencesContext);
    }
    public place(): PlaceContext | null {
        return this.getRuleContext(0, PlaceContext);
    }
    public tableConstraintDef(): TableConstraintDefContext | null {
        return this.getRuleContext(0, TableConstraintDefContext);
    }
    public CHANGE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CHANGE_SYMBOL, 0);
    }
    public columnInternalRef(): ColumnInternalRefContext | null {
        return this.getRuleContext(0, ColumnInternalRefContext);
    }
    public MODIFY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MODIFY_SYMBOL, 0);
    }
    public DROP_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DROP_SYMBOL, 0);
    }
    public FOREIGN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FOREIGN_SYMBOL, 0);
    }
    public KEY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.KEY_SYMBOL, 0);
    }
    public PRIMARY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PRIMARY_SYMBOL, 0);
    }
    public keyOrIndex(): KeyOrIndexContext | null {
        return this.getRuleContext(0, KeyOrIndexContext);
    }
    public indexRef(): IndexRefContext | null {
        return this.getRuleContext(0, IndexRefContext);
    }
    public CHECK_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CHECK_SYMBOL, 0);
    }
    public CONSTRAINT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CONSTRAINT_SYMBOL, 0);
    }
    public restrict(): RestrictContext | null {
        return this.getRuleContext(0, RestrictContext);
    }
    public DISABLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DISABLE_SYMBOL, 0);
    }
    public KEYS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.KEYS_SYMBOL, 0);
    }
    public ENABLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ENABLE_SYMBOL, 0);
    }
    public ALTER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ALTER_SYMBOL, 0);
    }
    public SET_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SET_SYMBOL, 0);
    }
    public DEFAULT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public visibility(): VisibilityContext | null {
        return this.getRuleContext(0, VisibilityContext);
    }
    public exprWithParentheses(): ExprWithParenthesesContext | null {
        return this.getRuleContext(0, ExprWithParenthesesContext);
    }
    public signedLiteralOrNull(): SignedLiteralOrNullContext | null {
        return this.getRuleContext(0, SignedLiteralOrNullContext);
    }
    public INDEX_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
    }
    public constraintEnforcement(): ConstraintEnforcementContext | null {
        return this.getRuleContext(0, ConstraintEnforcementContext);
    }
    public RENAME_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RENAME_SYMBOL, 0);
    }
    public TO_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TO_SYMBOL, 0);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public AS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.AS_SYMBOL, 0);
    }
    public indexName(): IndexNameContext | null {
        return this.getRuleContext(0, IndexNameContext);
    }
    public CONVERT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CONVERT_SYMBOL, 0);
    }
    public charset(): CharsetContext | null {
        return this.getRuleContext(0, CharsetContext);
    }
    public charsetName(): CharsetNameContext | null {
        return this.getRuleContext(0, CharsetNameContext);
    }
    public collate(): CollateContext | null {
        return this.getRuleContext(0, CollateContext);
    }
    public FORCE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FORCE_SYMBOL, 0);
    }
    public ORDER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ORDER_SYMBOL, 0);
    }
    public BY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BY_SYMBOL, 0);
    }
    public alterOrderList(): AlterOrderListContext | null {
        return this.getRuleContext(0, AlterOrderListContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_alterListItem;
    }
}


export class PlaceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AFTER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.AFTER_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public FIRST_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FIRST_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_place;
    }
}


export class RestrictContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RESTRICT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RESTRICT_SYMBOL, 0);
    }
    public CASCADE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CASCADE_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_restrict;
    }
}


export class AlterOrderListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public direction(): DirectionContext[];
    public direction(i: number): DirectionContext | null;
    public direction(i?: number): DirectionContext[] | DirectionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DirectionContext);
        }

        return this.getRuleContext(i, DirectionContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_alterOrderList;
    }
}


export class AlterAlgorithmOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALGORITHM_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.ALGORITHM_SYMBOL, 0)!;
    }
    public DEFAULT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public EQUAL_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_alterAlgorithmOption;
    }
}


export class AlterLockOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOCK_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.LOCK_SYMBOL, 0)!;
    }
    public DEFAULT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public EQUAL_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_alterLockOption;
    }
}


export class IndexLockAndAlgorithmContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alterAlgorithmOption(): AlterAlgorithmOptionContext | null {
        return this.getRuleContext(0, AlterAlgorithmOptionContext);
    }
    public alterLockOption(): AlterLockOptionContext | null {
        return this.getRuleContext(0, AlterLockOptionContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_indexLockAndAlgorithm;
    }
}


export class WithValidationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public VALIDATION_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.VALIDATION_SYMBOL, 0)!;
    }
    public WITH_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public WITHOUT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.WITHOUT_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_withValidation;
    }
}


export class RemovePartitioningContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REMOVE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.REMOVE_SYMBOL, 0)!;
    }
    public PARTITIONING_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.PARTITIONING_SYMBOL, 0)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_removePartitioning;
    }
}


export class AllOrPartitionNameListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(0, IdentifierListContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_allOrPartitionNameList;
    }
}


export class AlterTablespaceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABLESPACE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0)!;
    }
    public tablespaceRef(): TablespaceRefContext {
        return this.getRuleContext(0, TablespaceRefContext)!;
    }
    public DATAFILE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DATAFILE_SYMBOL, 0);
    }
    public textLiteral(): TextLiteralContext | null {
        return this.getRuleContext(0, TextLiteralContext);
    }
    public RENAME_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RENAME_SYMBOL, 0);
    }
    public TO_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TO_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public alterTablespaceOptions(): AlterTablespaceOptionsContext | null {
        return this.getRuleContext(0, AlterTablespaceOptionsContext);
    }
    public ADD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ADD_SYMBOL, 0);
    }
    public DROP_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DROP_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_alterTablespace;
    }
}


export class AlterUndoTablespaceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UNDO_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.UNDO_SYMBOL, 0)!;
    }
    public TABLESPACE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0)!;
    }
    public tablespaceRef(): TablespaceRefContext {
        return this.getRuleContext(0, TablespaceRefContext)!;
    }
    public SET_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SET_SYMBOL, 0)!;
    }
    public ACTIVE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ACTIVE_SYMBOL, 0);
    }
    public INACTIVE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INACTIVE_SYMBOL, 0);
    }
    public undoTableSpaceOptions(): UndoTableSpaceOptionsContext | null {
        return this.getRuleContext(0, UndoTableSpaceOptionsContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_alterUndoTablespace;
    }
}


export class UndoTableSpaceOptionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public undoTableSpaceOption(): UndoTableSpaceOptionContext[];
    public undoTableSpaceOption(i: number): UndoTableSpaceOptionContext | null;
    public undoTableSpaceOption(i?: number): UndoTableSpaceOptionContext[] | UndoTableSpaceOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UndoTableSpaceOptionContext);
        }

        return this.getRuleContext(i, UndoTableSpaceOptionContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_undoTableSpaceOptions;
    }
}


export class UndoTableSpaceOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tsOptionEngine(): TsOptionEngineContext {
        return this.getRuleContext(0, TsOptionEngineContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_undoTableSpaceOption;
    }
}


export class AlterTablespaceOptionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alterTablespaceOption(): AlterTablespaceOptionContext[];
    public alterTablespaceOption(i: number): AlterTablespaceOptionContext | null;
    public alterTablespaceOption(i?: number): AlterTablespaceOptionContext[] | AlterTablespaceOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AlterTablespaceOptionContext);
        }

        return this.getRuleContext(i, AlterTablespaceOptionContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_alterTablespaceOptions;
    }
}


export class AlterTablespaceOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INITIAL_SIZE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0);
    }
    public sizeNumber(): SizeNumberContext | null {
        return this.getRuleContext(0, SizeNumberContext);
    }
    public EQUAL_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public tsOptionAutoextendSize(): TsOptionAutoextendSizeContext | null {
        return this.getRuleContext(0, TsOptionAutoextendSizeContext);
    }
    public tsOptionMaxSize(): TsOptionMaxSizeContext | null {
        return this.getRuleContext(0, TsOptionMaxSizeContext);
    }
    public tsOptionEngine(): TsOptionEngineContext | null {
        return this.getRuleContext(0, TsOptionEngineContext);
    }
    public tsOptionWait(): TsOptionWaitContext | null {
        return this.getRuleContext(0, TsOptionWaitContext);
    }
    public tsOptionEncryption(): TsOptionEncryptionContext | null {
        return this.getRuleContext(0, TsOptionEncryptionContext);
    }
    public tsOptionEngineAttribute(): TsOptionEngineAttributeContext | null {
        return this.getRuleContext(0, TsOptionEngineAttributeContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_alterTablespaceOption;
    }
}


export class ChangeTablespaceOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INITIAL_SIZE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0);
    }
    public sizeNumber(): SizeNumberContext | null {
        return this.getRuleContext(0, SizeNumberContext);
    }
    public EQUAL_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public tsOptionAutoextendSize(): TsOptionAutoextendSizeContext | null {
        return this.getRuleContext(0, TsOptionAutoextendSizeContext);
    }
    public tsOptionMaxSize(): TsOptionMaxSizeContext | null {
        return this.getRuleContext(0, TsOptionMaxSizeContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_changeTablespaceOption;
    }
}


export class AlterViewContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public VIEW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.VIEW_SYMBOL, 0)!;
    }
    public viewRef(): ViewRefContext {
        return this.getRuleContext(0, ViewRefContext)!;
    }
    public viewTail(): ViewTailContext {
        return this.getRuleContext(0, ViewTailContext)!;
    }
    public viewAlgorithm(): ViewAlgorithmContext | null {
        return this.getRuleContext(0, ViewAlgorithmContext);
    }
    public definerClause(): DefinerClauseContext | null {
        return this.getRuleContext(0, DefinerClauseContext);
    }
    public viewSuid(): ViewSuidContext | null {
        return this.getRuleContext(0, ViewSuidContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_alterView;
    }
}


export class ViewTailContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AS_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.AS_SYMBOL, 0)!;
    }
    public viewQueryBlock(): ViewQueryBlockContext {
        return this.getRuleContext(0, ViewQueryBlockContext)!;
    }
    public columnInternalRefList(): ColumnInternalRefListContext | null {
        return this.getRuleContext(0, ColumnInternalRefListContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_viewTail;
    }
}


export class ViewQueryBlockContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public queryExpressionWithOptLockingClauses(): QueryExpressionWithOptLockingClausesContext {
        return this.getRuleContext(0, QueryExpressionWithOptLockingClausesContext)!;
    }
    public viewCheckOption(): ViewCheckOptionContext | null {
        return this.getRuleContext(0, ViewCheckOptionContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_viewQueryBlock;
    }
}


export class ViewCheckOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0)!;
    }
    public CHECK_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CHECK_SYMBOL, 0)!;
    }
    public OPTION_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPTION_SYMBOL, 0)!;
    }
    public CASCADED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CASCADED_SYMBOL, 0);
    }
    public LOCAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_viewCheckOption;
    }
}


export class AlterInstanceStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INSTANCE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INSTANCE_SYMBOL, 0);
    }
    public ROTATE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ROTATE_SYMBOL, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(0, TextOrIdentifierContext);
    }
    public MASTER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
    }
    public KEY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.KEY_SYMBOL, 0);
    }
    public RELOAD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RELOAD_SYMBOL, 0);
    }
    public TLS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TLS_SYMBOL, 0);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public KEYRING_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.KEYRING_SYMBOL, 0);
    }
    public ENABLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ENABLE_SYMBOL, 0);
    }
    public DISABLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DISABLE_SYMBOL, 0);
    }
    public NO_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NO_SYMBOL, 0);
    }
    public ROLLBACK_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ROLLBACK_SYMBOL, 0);
    }
    public ON_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, 0);
    }
    public ERROR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ERROR_SYMBOL, 0);
    }
    public FOR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public CHANNEL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CHANNEL_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_alterInstanceStatement;
    }
}


export class CreateStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0)!;
    }
    public createDatabase(): CreateDatabaseContext | null {
        return this.getRuleContext(0, CreateDatabaseContext);
    }
    public createTable(): CreateTableContext | null {
        return this.getRuleContext(0, CreateTableContext);
    }
    public createFunction(): CreateFunctionContext | null {
        return this.getRuleContext(0, CreateFunctionContext);
    }
    public createProcedure(): CreateProcedureContext | null {
        return this.getRuleContext(0, CreateProcedureContext);
    }
    public createUdf(): CreateUdfContext | null {
        return this.getRuleContext(0, CreateUdfContext);
    }
    public createLogfileGroup(): CreateLogfileGroupContext | null {
        return this.getRuleContext(0, CreateLogfileGroupContext);
    }
    public createView(): CreateViewContext | null {
        return this.getRuleContext(0, CreateViewContext);
    }
    public createTrigger(): CreateTriggerContext | null {
        return this.getRuleContext(0, CreateTriggerContext);
    }
    public createIndex(): CreateIndexContext | null {
        return this.getRuleContext(0, CreateIndexContext);
    }
    public createServer(): CreateServerContext | null {
        return this.getRuleContext(0, CreateServerContext);
    }
    public createTablespace(): CreateTablespaceContext | null {
        return this.getRuleContext(0, CreateTablespaceContext);
    }
    public createEvent(): CreateEventContext | null {
        return this.getRuleContext(0, CreateEventContext);
    }
    public createRole(): CreateRoleContext | null {
        return this.getRuleContext(0, CreateRoleContext);
    }
    public createSpatialReference(): CreateSpatialReferenceContext | null {
        return this.getRuleContext(0, CreateSpatialReferenceContext);
    }
    public createUndoTablespace(): CreateUndoTablespaceContext | null {
        return this.getRuleContext(0, CreateUndoTablespaceContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_createStatement;
    }
}


export class CreateDatabaseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DATABASE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.DATABASE_SYMBOL, 0)!;
    }
    public schemaName(): SchemaNameContext {
        return this.getRuleContext(0, SchemaNameContext)!;
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public createDatabaseOption(): CreateDatabaseOptionContext[];
    public createDatabaseOption(i: number): CreateDatabaseOptionContext | null;
    public createDatabaseOption(i?: number): CreateDatabaseOptionContext[] | CreateDatabaseOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CreateDatabaseOptionContext);
        }

        return this.getRuleContext(i, CreateDatabaseOptionContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_createDatabase;
    }
}


export class CreateDatabaseOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public defaultCharset(): DefaultCharsetContext | null {
        return this.getRuleContext(0, DefaultCharsetContext);
    }
    public defaultCollation(): DefaultCollationContext | null {
        return this.getRuleContext(0, DefaultCollationContext);
    }
    public defaultEncryption(): DefaultEncryptionContext | null {
        return this.getRuleContext(0, DefaultEncryptionContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_createDatabaseOption;
    }
}


export class CreateTableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABLE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public LIKE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LIKE_SYMBOL, 0);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(0, TableRefContext);
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public TEMPORARY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TEMPORARY_SYMBOL, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public tableElementList(): TableElementListContext | null {
        return this.getRuleContext(0, TableElementListContext);
    }
    public createTableOptionsEtc(): CreateTableOptionsEtcContext | null {
        return this.getRuleContext(0, CreateTableOptionsEtcContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_createTable;
    }
}


export class TableElementListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableElement(): TableElementContext[];
    public tableElement(i: number): TableElementContext | null;
    public tableElement(i?: number): TableElementContext[] | TableElementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableElementContext);
        }

        return this.getRuleContext(i, TableElementContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_tableElementList;
    }
}


export class TableElementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnDefinition(): ColumnDefinitionContext | null {
        return this.getRuleContext(0, ColumnDefinitionContext);
    }
    public tableConstraintDef(): TableConstraintDefContext | null {
        return this.getRuleContext(0, TableConstraintDefContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_tableElement;
    }
}


export class DuplicateAsQeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public asCreateQueryExpression(): AsCreateQueryExpressionContext {
        return this.getRuleContext(0, AsCreateQueryExpressionContext)!;
    }
    public REPLACE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
    }
    public IGNORE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_duplicateAsQe;
    }
}


export class AsCreateQueryExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public queryExpressionWithOptLockingClauses(): QueryExpressionWithOptLockingClausesContext {
        return this.getRuleContext(0, QueryExpressionWithOptLockingClausesContext)!;
    }
    public AS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.AS_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_asCreateQueryExpression;
    }
}


export class QueryExpressionOrParensContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public queryExpression(): QueryExpressionContext | null {
        return this.getRuleContext(0, QueryExpressionContext);
    }
    public lockingClauseList(): LockingClauseListContext | null {
        return this.getRuleContext(0, LockingClauseListContext);
    }
    public queryExpressionParens(): QueryExpressionParensContext | null {
        return this.getRuleContext(0, QueryExpressionParensContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_queryExpressionOrParens;
    }
}


export class QueryExpressionWithOptLockingClausesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public queryExpression(): QueryExpressionContext {
        return this.getRuleContext(0, QueryExpressionContext)!;
    }
    public lockingClauseList(): LockingClauseListContext | null {
        return this.getRuleContext(0, LockingClauseListContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_queryExpressionWithOptLockingClauses;
    }
}


export class CreateRoutineContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0)!;
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(MySQLParser.EOF, 0)!;
    }
    public createProcedure(): CreateProcedureContext | null {
        return this.getRuleContext(0, CreateProcedureContext);
    }
    public createFunction(): CreateFunctionContext | null {
        return this.getRuleContext(0, CreateFunctionContext);
    }
    public createUdf(): CreateUdfContext | null {
        return this.getRuleContext(0, CreateUdfContext);
    }
    public SEMICOLON_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SEMICOLON_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_createRoutine;
    }
}


export class CreateProcedureContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PROCEDURE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.PROCEDURE_SYMBOL, 0)!;
    }
    public procedureName(): ProcedureNameContext {
        return this.getRuleContext(0, ProcedureNameContext)!;
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)!;
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)!;
    }
    public storedRoutineBody(): StoredRoutineBodyContext {
        return this.getRuleContext(0, StoredRoutineBodyContext)!;
    }
    public definerClause(): DefinerClauseContext | null {
        return this.getRuleContext(0, DefinerClauseContext);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public procedureParameter(): ProcedureParameterContext[];
    public procedureParameter(i: number): ProcedureParameterContext | null;
    public procedureParameter(i?: number): ProcedureParameterContext[] | ProcedureParameterContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ProcedureParameterContext);
        }

        return this.getRuleContext(i, ProcedureParameterContext);
    }
    public routineCreateOption(): RoutineCreateOptionContext[];
    public routineCreateOption(i: number): RoutineCreateOptionContext | null;
    public routineCreateOption(i?: number): RoutineCreateOptionContext[] | RoutineCreateOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RoutineCreateOptionContext);
        }

        return this.getRuleContext(i, RoutineCreateOptionContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_createProcedure;
    }
}


export class RoutineStringContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(0, TextStringLiteralContext);
    }
    public DOLLAR_QUOTED_STRING_TEXT(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DOLLAR_QUOTED_STRING_TEXT, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_routineString;
    }
}


export class StoredRoutineBodyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public compoundStatement(): CompoundStatementContext | null {
        return this.getRuleContext(0, CompoundStatementContext);
    }
    public AS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.AS_SYMBOL, 0);
    }
    public routineString(): RoutineStringContext | null {
        return this.getRuleContext(0, RoutineStringContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_storedRoutineBody;
    }
}


export class CreateFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FUNCTION_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.FUNCTION_SYMBOL, 0)!;
    }
    public functionName(): FunctionNameContext {
        return this.getRuleContext(0, FunctionNameContext)!;
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)!;
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)!;
    }
    public RETURNS_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.RETURNS_SYMBOL, 0)!;
    }
    public typeWithOptCollate(): TypeWithOptCollateContext {
        return this.getRuleContext(0, TypeWithOptCollateContext)!;
    }
    public storedRoutineBody(): StoredRoutineBodyContext {
        return this.getRuleContext(0, StoredRoutineBodyContext)!;
    }
    public definerClause(): DefinerClauseContext | null {
        return this.getRuleContext(0, DefinerClauseContext);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public functionParameter(): FunctionParameterContext[];
    public functionParameter(i: number): FunctionParameterContext | null;
    public functionParameter(i?: number): FunctionParameterContext[] | FunctionParameterContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FunctionParameterContext);
        }

        return this.getRuleContext(i, FunctionParameterContext);
    }
    public routineCreateOption(): RoutineCreateOptionContext[];
    public routineCreateOption(i: number): RoutineCreateOptionContext | null;
    public routineCreateOption(i?: number): RoutineCreateOptionContext[] | RoutineCreateOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RoutineCreateOptionContext);
        }

        return this.getRuleContext(i, RoutineCreateOptionContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_createFunction;
    }
}


export class CreateUdfContext extends antlr.ParserRuleContext {
    public _type_?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FUNCTION_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.FUNCTION_SYMBOL, 0)!;
    }
    public udfName(): UdfNameContext {
        return this.getRuleContext(0, UdfNameContext)!;
    }
    public RETURNS_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.RETURNS_SYMBOL, 0)!;
    }
    public SONAME_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SONAME_SYMBOL, 0)!;
    }
    public textLiteral(): TextLiteralContext {
        return this.getRuleContext(0, TextLiteralContext)!;
    }
    public STRING_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.STRING_SYMBOL, 0);
    }
    public INT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INT_SYMBOL, 0);
    }
    public REAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REAL_SYMBOL, 0);
    }
    public DECIMAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DECIMAL_SYMBOL, 0);
    }
    public AGGREGATE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.AGGREGATE_SYMBOL, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_createUdf;
    }
}


export class RoutineCreateOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public routineOption(): RoutineOptionContext | null {
        return this.getRuleContext(0, RoutineOptionContext);
    }
    public DETERMINISTIC_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DETERMINISTIC_SYMBOL, 0);
    }
    public NOT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NOT_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_routineCreateOption;
    }
}


export class RoutineAlterOptionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public routineCreateOption(): RoutineCreateOptionContext[];
    public routineCreateOption(i: number): RoutineCreateOptionContext | null;
    public routineCreateOption(i?: number): RoutineCreateOptionContext[] | RoutineCreateOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RoutineCreateOptionContext);
        }

        return this.getRuleContext(i, RoutineCreateOptionContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_routineAlterOptions;
    }
}


export class RoutineOptionContext extends antlr.ParserRuleContext {
    public _option?: Token | null;
    public _security?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textLiteral(): TextLiteralContext | null {
        return this.getRuleContext(0, TextLiteralContext);
    }
    public COMMENT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
    }
    public LANGUAGE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LANGUAGE_SYMBOL, 0);
    }
    public SQL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SQL_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public NO_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NO_SYMBOL, 0);
    }
    public CONTAINS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CONTAINS_SYMBOL, 0);
    }
    public DATA_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DATA_SYMBOL, 0);
    }
    public READS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.READS_SYMBOL, 0);
    }
    public MODIFIES_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MODIFIES_SYMBOL, 0);
    }
    public SECURITY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SECURITY_SYMBOL, 0);
    }
    public DEFINER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DEFINER_SYMBOL, 0);
    }
    public INVOKER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INVOKER_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_routineOption;
    }
}


export class CreateIndexContext extends antlr.ParserRuleContext {
    public _type_?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public indexName(): IndexNameContext | null {
        return this.getRuleContext(0, IndexNameContext);
    }
    public createIndexTarget(): CreateIndexTargetContext | null {
        return this.getRuleContext(0, CreateIndexTargetContext);
    }
    public INDEX_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
    }
    public onlineOption(): OnlineOptionContext | null {
        return this.getRuleContext(0, OnlineOptionContext);
    }
    public FULLTEXT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FULLTEXT_SYMBOL, 0);
    }
    public SPATIAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SPATIAL_SYMBOL, 0);
    }
    public indexLockAndAlgorithm(): IndexLockAndAlgorithmContext | null {
        return this.getRuleContext(0, IndexLockAndAlgorithmContext);
    }
    public UNIQUE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.UNIQUE_SYMBOL, 0);
    }
    public indexTypeClause(): IndexTypeClauseContext | null {
        return this.getRuleContext(0, IndexTypeClauseContext);
    }
    public indexOption(): IndexOptionContext[];
    public indexOption(i: number): IndexOptionContext | null;
    public indexOption(i?: number): IndexOptionContext[] | IndexOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IndexOptionContext);
        }

        return this.getRuleContext(i, IndexOptionContext);
    }
    public fulltextIndexOption(): FulltextIndexOptionContext[];
    public fulltextIndexOption(i: number): FulltextIndexOptionContext | null;
    public fulltextIndexOption(i?: number): FulltextIndexOptionContext[] | FulltextIndexOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FulltextIndexOptionContext);
        }

        return this.getRuleContext(i, FulltextIndexOptionContext);
    }
    public spatialIndexOption(): SpatialIndexOptionContext[];
    public spatialIndexOption(i: number): SpatialIndexOptionContext | null;
    public spatialIndexOption(i?: number): SpatialIndexOptionContext[] | SpatialIndexOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SpatialIndexOptionContext);
        }

        return this.getRuleContext(i, SpatialIndexOptionContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_createIndex;
    }
}


export class IndexNameAndTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public indexName(): IndexNameContext | null {
        return this.getRuleContext(0, IndexNameContext);
    }
    public USING_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.USING_SYMBOL, 0);
    }
    public indexType(): IndexTypeContext | null {
        return this.getRuleContext(0, IndexTypeContext);
    }
    public TYPE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TYPE_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_indexNameAndType;
    }
}


export class CreateIndexTargetContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ON_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.ON_SYMBOL, 0)!;
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(0, TableRefContext)!;
    }
    public keyListWithExpression(): KeyListWithExpressionContext {
        return this.getRuleContext(0, KeyListWithExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_createIndexTarget;
    }
}


export class CreateLogfileGroupContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOGFILE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.LOGFILE_SYMBOL, 0)!;
    }
    public GROUP_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.GROUP_SYMBOL, 0)!;
    }
    public logfileGroupName(): LogfileGroupNameContext {
        return this.getRuleContext(0, LogfileGroupNameContext)!;
    }
    public ADD_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.ADD_SYMBOL, 0)!;
    }
    public UNDOFILE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.UNDOFILE_SYMBOL, 0)!;
    }
    public textLiteral(): TextLiteralContext {
        return this.getRuleContext(0, TextLiteralContext)!;
    }
    public logfileGroupOptions(): LogfileGroupOptionsContext | null {
        return this.getRuleContext(0, LogfileGroupOptionsContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_createLogfileGroup;
    }
}


export class LogfileGroupOptionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public logfileGroupOption(): LogfileGroupOptionContext[];
    public logfileGroupOption(i: number): LogfileGroupOptionContext | null;
    public logfileGroupOption(i?: number): LogfileGroupOptionContext[] | LogfileGroupOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LogfileGroupOptionContext);
        }

        return this.getRuleContext(i, LogfileGroupOptionContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_logfileGroupOptions;
    }
}


export class LogfileGroupOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tsOptionInitialSize(): TsOptionInitialSizeContext | null {
        return this.getRuleContext(0, TsOptionInitialSizeContext);
    }
    public tsOptionUndoRedoBufferSize(): TsOptionUndoRedoBufferSizeContext | null {
        return this.getRuleContext(0, TsOptionUndoRedoBufferSizeContext);
    }
    public tsOptionNodegroup(): TsOptionNodegroupContext | null {
        return this.getRuleContext(0, TsOptionNodegroupContext);
    }
    public tsOptionEngine(): TsOptionEngineContext | null {
        return this.getRuleContext(0, TsOptionEngineContext);
    }
    public tsOptionWait(): TsOptionWaitContext | null {
        return this.getRuleContext(0, TsOptionWaitContext);
    }
    public tsOptionComment(): TsOptionCommentContext | null {
        return this.getRuleContext(0, TsOptionCommentContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_logfileGroupOption;
    }
}


export class CreateServerContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SERVER_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SERVER_SYMBOL, 0)!;
    }
    public serverName(): ServerNameContext {
        return this.getRuleContext(0, ServerNameContext)!;
    }
    public FOREIGN_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.FOREIGN_SYMBOL, 0)!;
    }
    public DATA_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.DATA_SYMBOL, 0)!;
    }
    public WRAPPER_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.WRAPPER_SYMBOL, 0)!;
    }
    public textOrIdentifier(): TextOrIdentifierContext {
        return this.getRuleContext(0, TextOrIdentifierContext)!;
    }
    public serverOptions(): ServerOptionsContext {
        return this.getRuleContext(0, ServerOptionsContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_createServer;
    }
}


export class ServerOptionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPTIONS_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPTIONS_SYMBOL, 0)!;
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)!;
    }
    public serverOption(): ServerOptionContext[];
    public serverOption(i: number): ServerOptionContext | null;
    public serverOption(i?: number): ServerOptionContext[] | ServerOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ServerOptionContext);
        }

        return this.getRuleContext(i, ServerOptionContext);
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)!;
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_serverOptions;
    }
}


export class ServerOptionContext extends antlr.ParserRuleContext {
    public _option?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textLiteral(): TextLiteralContext | null {
        return this.getRuleContext(0, TextLiteralContext);
    }
    public HOST_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.HOST_SYMBOL, 0);
    }
    public DATABASE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DATABASE_SYMBOL, 0);
    }
    public USER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.USER_SYMBOL, 0);
    }
    public PASSWORD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
    }
    public SOCKET_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOCKET_SYMBOL, 0);
    }
    public OWNER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OWNER_SYMBOL, 0);
    }
    public ulong_number(): Ulong_numberContext | null {
        return this.getRuleContext(0, Ulong_numberContext);
    }
    public PORT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PORT_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_serverOption;
    }
}


export class CreateTablespaceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABLESPACE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0)!;
    }
    public tablespaceName(): TablespaceNameContext {
        return this.getRuleContext(0, TablespaceNameContext)!;
    }
    public tsDataFileName(): TsDataFileNameContext {
        return this.getRuleContext(0, TsDataFileNameContext)!;
    }
    public USE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.USE_SYMBOL, 0);
    }
    public LOGFILE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LOGFILE_SYMBOL, 0);
    }
    public GROUP_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
    }
    public logfileGroupRef(): LogfileGroupRefContext | null {
        return this.getRuleContext(0, LogfileGroupRefContext);
    }
    public tablespaceOptions(): TablespaceOptionsContext | null {
        return this.getRuleContext(0, TablespaceOptionsContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_createTablespace;
    }
}


export class CreateUndoTablespaceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UNDO_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.UNDO_SYMBOL, 0)!;
    }
    public TABLESPACE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0)!;
    }
    public tablespaceName(): TablespaceNameContext {
        return this.getRuleContext(0, TablespaceNameContext)!;
    }
    public ADD_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.ADD_SYMBOL, 0)!;
    }
    public tsDataFile(): TsDataFileContext {
        return this.getRuleContext(0, TsDataFileContext)!;
    }
    public undoTableSpaceOptions(): UndoTableSpaceOptionsContext | null {
        return this.getRuleContext(0, UndoTableSpaceOptionsContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_createUndoTablespace;
    }
}


export class TsDataFileNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ADD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ADD_SYMBOL, 0);
    }
    public tsDataFile(): TsDataFileContext | null {
        return this.getRuleContext(0, TsDataFileContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_tsDataFileName;
    }
}


export class TsDataFileContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DATAFILE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.DATAFILE_SYMBOL, 0)!;
    }
    public textLiteral(): TextLiteralContext {
        return this.getRuleContext(0, TextLiteralContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_tsDataFile;
    }
}


export class TablespaceOptionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tablespaceOption(): TablespaceOptionContext[];
    public tablespaceOption(i: number): TablespaceOptionContext | null;
    public tablespaceOption(i?: number): TablespaceOptionContext[] | TablespaceOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TablespaceOptionContext);
        }

        return this.getRuleContext(i, TablespaceOptionContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_tablespaceOptions;
    }
}


export class TablespaceOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tsOptionInitialSize(): TsOptionInitialSizeContext | null {
        return this.getRuleContext(0, TsOptionInitialSizeContext);
    }
    public tsOptionAutoextendSize(): TsOptionAutoextendSizeContext | null {
        return this.getRuleContext(0, TsOptionAutoextendSizeContext);
    }
    public tsOptionMaxSize(): TsOptionMaxSizeContext | null {
        return this.getRuleContext(0, TsOptionMaxSizeContext);
    }
    public tsOptionExtentSize(): TsOptionExtentSizeContext | null {
        return this.getRuleContext(0, TsOptionExtentSizeContext);
    }
    public tsOptionNodegroup(): TsOptionNodegroupContext | null {
        return this.getRuleContext(0, TsOptionNodegroupContext);
    }
    public tsOptionEngine(): TsOptionEngineContext | null {
        return this.getRuleContext(0, TsOptionEngineContext);
    }
    public tsOptionWait(): TsOptionWaitContext | null {
        return this.getRuleContext(0, TsOptionWaitContext);
    }
    public tsOptionComment(): TsOptionCommentContext | null {
        return this.getRuleContext(0, TsOptionCommentContext);
    }
    public tsOptionFileblockSize(): TsOptionFileblockSizeContext | null {
        return this.getRuleContext(0, TsOptionFileblockSizeContext);
    }
    public tsOptionEncryption(): TsOptionEncryptionContext | null {
        return this.getRuleContext(0, TsOptionEncryptionContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_tablespaceOption;
    }
}


export class TsOptionInitialSizeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INITIAL_SIZE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0)!;
    }
    public sizeNumber(): SizeNumberContext {
        return this.getRuleContext(0, SizeNumberContext)!;
    }
    public EQUAL_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_tsOptionInitialSize;
    }
}


export class TsOptionUndoRedoBufferSizeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sizeNumber(): SizeNumberContext {
        return this.getRuleContext(0, SizeNumberContext)!;
    }
    public UNDO_BUFFER_SIZE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0);
    }
    public REDO_BUFFER_SIZE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REDO_BUFFER_SIZE_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_tsOptionUndoRedoBufferSize;
    }
}


export class TsOptionAutoextendSizeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AUTOEXTEND_SIZE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0)!;
    }
    public sizeNumber(): SizeNumberContext {
        return this.getRuleContext(0, SizeNumberContext)!;
    }
    public EQUAL_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_tsOptionAutoextendSize;
    }
}


export class TsOptionMaxSizeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MAX_SIZE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.MAX_SIZE_SYMBOL, 0)!;
    }
    public sizeNumber(): SizeNumberContext {
        return this.getRuleContext(0, SizeNumberContext)!;
    }
    public EQUAL_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_tsOptionMaxSize;
    }
}


export class TsOptionExtentSizeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EXTENT_SIZE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.EXTENT_SIZE_SYMBOL, 0)!;
    }
    public sizeNumber(): SizeNumberContext {
        return this.getRuleContext(0, SizeNumberContext)!;
    }
    public EQUAL_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_tsOptionExtentSize;
    }
}


export class TsOptionNodegroupContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NODEGROUP_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.NODEGROUP_SYMBOL, 0)!;
    }
    public real_ulong_number(): Real_ulong_numberContext {
        return this.getRuleContext(0, Real_ulong_numberContext)!;
    }
    public EQUAL_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_tsOptionNodegroup;
    }
}


export class TsOptionEngineContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ENGINE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.ENGINE_SYMBOL, 0)!;
    }
    public engineRef(): EngineRefContext {
        return this.getRuleContext(0, EngineRefContext)!;
    }
    public STORAGE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.STORAGE_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_tsOptionEngine;
    }
}


export class TsOptionWaitContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WAIT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.WAIT_SYMBOL, 0);
    }
    public NO_WAIT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NO_WAIT_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_tsOptionWait;
    }
}


export class TsOptionCommentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COMMENT_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.COMMENT_SYMBOL, 0)!;
    }
    public textLiteral(): TextLiteralContext {
        return this.getRuleContext(0, TextLiteralContext)!;
    }
    public EQUAL_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_tsOptionComment;
    }
}


export class TsOptionFileblockSizeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FILE_BLOCK_SIZE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.FILE_BLOCK_SIZE_SYMBOL, 0)!;
    }
    public sizeNumber(): SizeNumberContext {
        return this.getRuleContext(0, SizeNumberContext)!;
    }
    public EQUAL_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_tsOptionFileblockSize;
    }
}


export class TsOptionEncryptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ENCRYPTION_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.ENCRYPTION_SYMBOL, 0)!;
    }
    public textStringLiteral(): TextStringLiteralContext {
        return this.getRuleContext(0, TextStringLiteralContext)!;
    }
    public EQUAL_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_tsOptionEncryption;
    }
}


export class TsOptionEngineAttributeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ENGINE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.ENGINE_SYMBOL, 0)!;
    }
    public jsonAttribute(): JsonAttributeContext {
        return this.getRuleContext(0, JsonAttributeContext)!;
    }
    public EQUAL_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_tsOptionEngineAttribute;
    }
}


export class CreateViewContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public VIEW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.VIEW_SYMBOL, 0)!;
    }
    public viewName(): ViewNameContext {
        return this.getRuleContext(0, ViewNameContext)!;
    }
    public viewTail(): ViewTailContext {
        return this.getRuleContext(0, ViewTailContext)!;
    }
    public viewReplaceOrAlgorithm(): ViewReplaceOrAlgorithmContext | null {
        return this.getRuleContext(0, ViewReplaceOrAlgorithmContext);
    }
    public definerClause(): DefinerClauseContext | null {
        return this.getRuleContext(0, DefinerClauseContext);
    }
    public viewSuid(): ViewSuidContext | null {
        return this.getRuleContext(0, ViewSuidContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_createView;
    }
}


export class ViewReplaceOrAlgorithmContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OR_SYMBOL, 0);
    }
    public REPLACE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
    }
    public viewAlgorithm(): ViewAlgorithmContext | null {
        return this.getRuleContext(0, ViewAlgorithmContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_viewReplaceOrAlgorithm;
    }
}


export class ViewAlgorithmContext extends antlr.ParserRuleContext {
    public _algorithm?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALGORITHM_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.ALGORITHM_SYMBOL, 0)!;
    }
    public EQUAL_OPERATOR(): antlr.TerminalNode {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0)!;
    }
    public UNDEFINED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.UNDEFINED_SYMBOL, 0);
    }
    public MERGE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MERGE_SYMBOL, 0);
    }
    public TEMPTABLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TEMPTABLE_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_viewAlgorithm;
    }
}


export class ViewSuidContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SQL_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SQL_SYMBOL, 0)!;
    }
    public SECURITY_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SECURITY_SYMBOL, 0)!;
    }
    public DEFINER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DEFINER_SYMBOL, 0);
    }
    public INVOKER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INVOKER_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_viewSuid;
    }
}


export class CreateTriggerContext extends antlr.ParserRuleContext {
    public _timing?: Token | null;
    public _event?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TRIGGER_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.TRIGGER_SYMBOL, 0)!;
    }
    public triggerName(): TriggerNameContext {
        return this.getRuleContext(0, TriggerNameContext)!;
    }
    public ON_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.ON_SYMBOL, 0)!;
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(0, TableRefContext)!;
    }
    public FOR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0)!;
    }
    public EACH_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.EACH_SYMBOL, 0)!;
    }
    public ROW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.ROW_SYMBOL, 0)!;
    }
    public compoundStatement(): CompoundStatementContext {
        return this.getRuleContext(0, CompoundStatementContext)!;
    }
    public BEFORE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BEFORE_SYMBOL, 0);
    }
    public AFTER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.AFTER_SYMBOL, 0);
    }
    public INSERT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INSERT_SYMBOL, 0);
    }
    public UPDATE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.UPDATE_SYMBOL, 0);
    }
    public DELETE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DELETE_SYMBOL, 0);
    }
    public definerClause(): DefinerClauseContext | null {
        return this.getRuleContext(0, DefinerClauseContext);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public triggerFollowsPrecedesClause(): TriggerFollowsPrecedesClauseContext | null {
        return this.getRuleContext(0, TriggerFollowsPrecedesClauseContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_createTrigger;
    }
}


export class TriggerFollowsPrecedesClauseContext extends antlr.ParserRuleContext {
    public _ordering?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textOrIdentifier(): TextOrIdentifierContext {
        return this.getRuleContext(0, TextOrIdentifierContext)!;
    }
    public FOLLOWS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FOLLOWS_SYMBOL, 0);
    }
    public PRECEDES_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PRECEDES_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_triggerFollowsPrecedesClause;
    }
}


export class CreateEventContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EVENT_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.EVENT_SYMBOL, 0)!;
    }
    public eventName(): EventNameContext {
        return this.getRuleContext(0, EventNameContext)!;
    }
    public ON_SYMBOL(): antlr.TerminalNode[];
    public ON_SYMBOL(i: number): antlr.TerminalNode | null;
    public ON_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.ON_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.ON_SYMBOL, i);
    	}
    }
    public SCHEDULE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SCHEDULE_SYMBOL, 0)!;
    }
    public schedule(): ScheduleContext {
        return this.getRuleContext(0, ScheduleContext)!;
    }
    public DO_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.DO_SYMBOL, 0)!;
    }
    public compoundStatement(): CompoundStatementContext {
        return this.getRuleContext(0, CompoundStatementContext)!;
    }
    public definerClause(): DefinerClauseContext | null {
        return this.getRuleContext(0, DefinerClauseContext);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public COMPLETION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COMPLETION_SYMBOL, 0);
    }
    public PRESERVE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PRESERVE_SYMBOL, 0);
    }
    public ENABLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ENABLE_SYMBOL, 0);
    }
    public DISABLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DISABLE_SYMBOL, 0);
    }
    public COMMENT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
    }
    public textLiteral(): TextLiteralContext | null {
        return this.getRuleContext(0, TextLiteralContext);
    }
    public NOT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NOT_SYMBOL, 0);
    }
    public replica(): ReplicaContext | null {
        return this.getRuleContext(0, ReplicaContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_createEvent;
    }
}


export class CreateRoleContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ROLE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.ROLE_SYMBOL, 0)!;
    }
    public roleList(): RoleListContext {
        return this.getRuleContext(0, RoleListContext)!;
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_createRole;
    }
}


export class CreateSpatialReferenceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OR_SYMBOL, 0);
    }
    public REPLACE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
    }
    public SPATIAL_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SPATIAL_SYMBOL, 0)!;
    }
    public REFERENCE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.REFERENCE_SYMBOL, 0)!;
    }
    public SYSTEM_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SYSTEM_SYMBOL, 0)!;
    }
    public real_ulonglong_number(): Real_ulonglong_numberContext {
        return this.getRuleContext(0, Real_ulonglong_numberContext)!;
    }
    public srsAttribute(): SrsAttributeContext[];
    public srsAttribute(i: number): SrsAttributeContext | null;
    public srsAttribute(i?: number): SrsAttributeContext[] | SrsAttributeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SrsAttributeContext);
        }

        return this.getRuleContext(i, SrsAttributeContext);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_createSpatialReference;
    }
}


export class SrsAttributeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NAME_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NAME_SYMBOL, 0);
    }
    public TEXT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TEXT_SYMBOL, 0);
    }
    public textStringNoLinebreak(): TextStringNoLinebreakContext {
        return this.getRuleContext(0, TextStringNoLinebreakContext)!;
    }
    public DEFINITION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DEFINITION_SYMBOL, 0);
    }
    public ORGANIZATION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ORGANIZATION_SYMBOL, 0);
    }
    public IDENTIFIED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
    }
    public BY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BY_SYMBOL, 0);
    }
    public real_ulonglong_number(): Real_ulonglong_numberContext | null {
        return this.getRuleContext(0, Real_ulonglong_numberContext);
    }
    public DESCRIPTION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DESCRIPTION_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_srsAttribute;
    }
}


export class DropStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.DROP_SYMBOL, 0)!;
    }
    public dropDatabase(): DropDatabaseContext | null {
        return this.getRuleContext(0, DropDatabaseContext);
    }
    public dropEvent(): DropEventContext | null {
        return this.getRuleContext(0, DropEventContext);
    }
    public dropFunction(): DropFunctionContext | null {
        return this.getRuleContext(0, DropFunctionContext);
    }
    public dropProcedure(): DropProcedureContext | null {
        return this.getRuleContext(0, DropProcedureContext);
    }
    public dropIndex(): DropIndexContext | null {
        return this.getRuleContext(0, DropIndexContext);
    }
    public dropLogfileGroup(): DropLogfileGroupContext | null {
        return this.getRuleContext(0, DropLogfileGroupContext);
    }
    public dropServer(): DropServerContext | null {
        return this.getRuleContext(0, DropServerContext);
    }
    public dropTable(): DropTableContext | null {
        return this.getRuleContext(0, DropTableContext);
    }
    public dropTableSpace(): DropTableSpaceContext | null {
        return this.getRuleContext(0, DropTableSpaceContext);
    }
    public dropTrigger(): DropTriggerContext | null {
        return this.getRuleContext(0, DropTriggerContext);
    }
    public dropView(): DropViewContext | null {
        return this.getRuleContext(0, DropViewContext);
    }
    public dropRole(): DropRoleContext | null {
        return this.getRuleContext(0, DropRoleContext);
    }
    public dropSpatialReference(): DropSpatialReferenceContext | null {
        return this.getRuleContext(0, DropSpatialReferenceContext);
    }
    public dropUndoTablespace(): DropUndoTablespaceContext | null {
        return this.getRuleContext(0, DropUndoTablespaceContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_dropStatement;
    }
}


export class DropDatabaseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DATABASE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.DATABASE_SYMBOL, 0)!;
    }
    public schemaRef(): SchemaRefContext {
        return this.getRuleContext(0, SchemaRefContext)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_dropDatabase;
    }
}


export class DropEventContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EVENT_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.EVENT_SYMBOL, 0)!;
    }
    public eventRef(): EventRefContext {
        return this.getRuleContext(0, EventRefContext)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_dropEvent;
    }
}


export class DropFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FUNCTION_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.FUNCTION_SYMBOL, 0)!;
    }
    public functionRef(): FunctionRefContext {
        return this.getRuleContext(0, FunctionRefContext)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_dropFunction;
    }
}


export class DropProcedureContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PROCEDURE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.PROCEDURE_SYMBOL, 0)!;
    }
    public procedureRef(): ProcedureRefContext {
        return this.getRuleContext(0, ProcedureRefContext)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_dropProcedure;
    }
}


export class DropIndexContext extends antlr.ParserRuleContext {
    public _type_?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public indexRef(): IndexRefContext {
        return this.getRuleContext(0, IndexRefContext)!;
    }
    public ON_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.ON_SYMBOL, 0)!;
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(0, TableRefContext)!;
    }
    public INDEX_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.INDEX_SYMBOL, 0)!;
    }
    public onlineOption(): OnlineOptionContext | null {
        return this.getRuleContext(0, OnlineOptionContext);
    }
    public indexLockAndAlgorithm(): IndexLockAndAlgorithmContext | null {
        return this.getRuleContext(0, IndexLockAndAlgorithmContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_dropIndex;
    }
}


export class DropLogfileGroupContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOGFILE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.LOGFILE_SYMBOL, 0)!;
    }
    public GROUP_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.GROUP_SYMBOL, 0)!;
    }
    public logfileGroupRef(): LogfileGroupRefContext {
        return this.getRuleContext(0, LogfileGroupRefContext)!;
    }
    public dropLogfileGroupOption(): DropLogfileGroupOptionContext[];
    public dropLogfileGroupOption(i: number): DropLogfileGroupOptionContext | null;
    public dropLogfileGroupOption(i?: number): DropLogfileGroupOptionContext[] | DropLogfileGroupOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DropLogfileGroupOptionContext);
        }

        return this.getRuleContext(i, DropLogfileGroupOptionContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_dropLogfileGroup;
    }
}


export class DropLogfileGroupOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tsOptionWait(): TsOptionWaitContext | null {
        return this.getRuleContext(0, TsOptionWaitContext);
    }
    public tsOptionEngine(): TsOptionEngineContext | null {
        return this.getRuleContext(0, TsOptionEngineContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_dropLogfileGroupOption;
    }
}


export class DropServerContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SERVER_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SERVER_SYMBOL, 0)!;
    }
    public serverRef(): ServerRefContext {
        return this.getRuleContext(0, ServerRefContext)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_dropServer;
    }
}


export class DropTableContext extends antlr.ParserRuleContext {
    public _type_?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableRefList(): TableRefListContext {
        return this.getRuleContext(0, TableRefListContext)!;
    }
    public TABLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
    }
    public TABLES_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
    }
    public TEMPORARY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TEMPORARY_SYMBOL, 0);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public RESTRICT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RESTRICT_SYMBOL, 0);
    }
    public CASCADE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CASCADE_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_dropTable;
    }
}


export class DropTableSpaceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABLESPACE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0)!;
    }
    public tablespaceRef(): TablespaceRefContext {
        return this.getRuleContext(0, TablespaceRefContext)!;
    }
    public dropLogfileGroupOption(): DropLogfileGroupOptionContext[];
    public dropLogfileGroupOption(i: number): DropLogfileGroupOptionContext | null;
    public dropLogfileGroupOption(i?: number): DropLogfileGroupOptionContext[] | DropLogfileGroupOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DropLogfileGroupOptionContext);
        }

        return this.getRuleContext(i, DropLogfileGroupOptionContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_dropTableSpace;
    }
}


export class DropTriggerContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TRIGGER_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.TRIGGER_SYMBOL, 0)!;
    }
    public triggerRef(): TriggerRefContext {
        return this.getRuleContext(0, TriggerRefContext)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_dropTrigger;
    }
}


export class DropViewContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public VIEW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.VIEW_SYMBOL, 0)!;
    }
    public viewRefList(): ViewRefListContext {
        return this.getRuleContext(0, ViewRefListContext)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public RESTRICT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RESTRICT_SYMBOL, 0);
    }
    public CASCADE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CASCADE_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_dropView;
    }
}


export class DropRoleContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ROLE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.ROLE_SYMBOL, 0)!;
    }
    public roleList(): RoleListContext {
        return this.getRuleContext(0, RoleListContext)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_dropRole;
    }
}


export class DropSpatialReferenceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SPATIAL_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SPATIAL_SYMBOL, 0)!;
    }
    public REFERENCE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.REFERENCE_SYMBOL, 0)!;
    }
    public SYSTEM_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SYSTEM_SYMBOL, 0)!;
    }
    public real_ulonglong_number(): Real_ulonglong_numberContext {
        return this.getRuleContext(0, Real_ulonglong_numberContext)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_dropSpatialReference;
    }
}


export class DropUndoTablespaceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UNDO_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.UNDO_SYMBOL, 0)!;
    }
    public TABLESPACE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0)!;
    }
    public tablespaceRef(): TablespaceRefContext {
        return this.getRuleContext(0, TablespaceRefContext)!;
    }
    public undoTableSpaceOptions(): UndoTableSpaceOptionsContext | null {
        return this.getRuleContext(0, UndoTableSpaceOptionsContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_dropUndoTablespace;
    }
}


export class RenameTableStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RENAME_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.RENAME_SYMBOL, 0)!;
    }
    public renamePair(): RenamePairContext[];
    public renamePair(i: number): RenamePairContext | null;
    public renamePair(i?: number): RenamePairContext[] | RenamePairContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RenamePairContext);
        }

        return this.getRuleContext(i, RenamePairContext);
    }
    public TABLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
    }
    public TABLES_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_renameTableStatement;
    }
}


export class RenamePairContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(0, TableRefContext)!;
    }
    public TO_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.TO_SYMBOL, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_renamePair;
    }
}


export class TruncateTableStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TRUNCATE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.TRUNCATE_SYMBOL, 0)!;
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(0, TableRefContext)!;
    }
    public TABLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_truncateTableStatement;
    }
}


export class ImportStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IMPORT_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.IMPORT_SYMBOL, 0)!;
    }
    public TABLE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0)!;
    }
    public FROM_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0)!;
    }
    public textStringLiteralList(): TextStringLiteralListContext {
        return this.getRuleContext(0, TextStringLiteralListContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_importStatement;
    }
}


export class CallStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CALL_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CALL_SYMBOL, 0)!;
    }
    public procedureRef(): ProcedureRefContext {
        return this.getRuleContext(0, ProcedureRefContext)!;
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public exprList(): ExprListContext | null {
        return this.getRuleContext(0, ExprListContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_callStatement;
    }
}


export class DeleteStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DELETE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.DELETE_SYMBOL, 0)!;
    }
    public FROM_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public tableAliasRefList(): TableAliasRefListContext | null {
        return this.getRuleContext(0, TableAliasRefListContext);
    }
    public tableReferenceList(): TableReferenceListContext | null {
        return this.getRuleContext(0, TableReferenceListContext);
    }
    public withClause(): WithClauseContext | null {
        return this.getRuleContext(0, WithClauseContext);
    }
    public deleteStatementOption(): DeleteStatementOptionContext[];
    public deleteStatementOption(i: number): DeleteStatementOptionContext | null;
    public deleteStatementOption(i?: number): DeleteStatementOptionContext[] | DeleteStatementOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DeleteStatementOptionContext);
        }

        return this.getRuleContext(i, DeleteStatementOptionContext);
    }
    public USING_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.USING_SYMBOL, 0);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(0, TableRefContext);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public tableAlias(): TableAliasContext | null {
        return this.getRuleContext(0, TableAliasContext);
    }
    public partitionDelete(): PartitionDeleteContext | null {
        return this.getRuleContext(0, PartitionDeleteContext);
    }
    public orderClause(): OrderClauseContext | null {
        return this.getRuleContext(0, OrderClauseContext);
    }
    public simpleLimitClause(): SimpleLimitClauseContext | null {
        return this.getRuleContext(0, SimpleLimitClauseContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_deleteStatement;
    }
}


export class PartitionDeleteContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARTITION_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.PARTITION_SYMBOL, 0)!;
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)!;
    }
    public identifierList(): IdentifierListContext {
        return this.getRuleContext(0, IdentifierListContext)!;
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_partitionDelete;
    }
}


export class DeleteStatementOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public QUICK_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.QUICK_SYMBOL, 0);
    }
    public LOW_PRIORITY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0);
    }
    public IGNORE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_deleteStatementOption;
    }
}


export class DoStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DO_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.DO_SYMBOL, 0)!;
    }
    public selectItemList(): SelectItemListContext {
        return this.getRuleContext(0, SelectItemListContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_doStatement;
    }
}


export class HandlerStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public HANDLER_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.HANDLER_SYMBOL, 0)!;
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(0, TableRefContext);
    }
    public OPEN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public CLOSE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_SYMBOL, 0);
    }
    public READ_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.READ_SYMBOL, 0);
    }
    public handlerReadOrScan(): HandlerReadOrScanContext | null {
        return this.getRuleContext(0, HandlerReadOrScanContext);
    }
    public tableAlias(): TableAliasContext | null {
        return this.getRuleContext(0, TableAliasContext);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(0, LimitClauseContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_handlerStatement;
    }
}


export class HandlerReadOrScanContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FIRST_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FIRST_SYMBOL, 0);
    }
    public NEXT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NEXT_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public values(): ValuesContext | null {
        return this.getRuleContext(0, ValuesContext);
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public PREV_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PREV_SYMBOL, 0);
    }
    public LAST_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LAST_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public LESS_THAN_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LESS_THAN_OPERATOR, 0);
    }
    public GREATER_THAN_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.GREATER_THAN_OPERATOR, 0);
    }
    public LESS_OR_EQUAL_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LESS_OR_EQUAL_OPERATOR, 0);
    }
    public GREATER_OR_EQUAL_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.GREATER_OR_EQUAL_OPERATOR, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_handlerReadOrScan;
    }
}


export class InsertStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INSERT_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.INSERT_SYMBOL, 0)!;
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(0, TableRefContext)!;
    }
    public insertFromConstructor(): InsertFromConstructorContext | null {
        return this.getRuleContext(0, InsertFromConstructorContext);
    }
    public SET_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SET_SYMBOL, 0);
    }
    public updateList(): UpdateListContext | null {
        return this.getRuleContext(0, UpdateListContext);
    }
    public insertQueryExpression(): InsertQueryExpressionContext | null {
        return this.getRuleContext(0, InsertQueryExpressionContext);
    }
    public insertLockOption(): InsertLockOptionContext | null {
        return this.getRuleContext(0, InsertLockOptionContext);
    }
    public IGNORE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
    }
    public INTO_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INTO_SYMBOL, 0);
    }
    public usePartition(): UsePartitionContext | null {
        return this.getRuleContext(0, UsePartitionContext);
    }
    public insertUpdateList(): InsertUpdateListContext | null {
        return this.getRuleContext(0, InsertUpdateListContext);
    }
    public valuesReference(): ValuesReferenceContext | null {
        return this.getRuleContext(0, ValuesReferenceContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_insertStatement;
    }
}


export class InsertLockOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOW_PRIORITY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0);
    }
    public DELAYED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DELAYED_SYMBOL, 0);
    }
    public HIGH_PRIORITY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.HIGH_PRIORITY_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_insertLockOption;
    }
}


export class InsertFromConstructorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public insertValues(): InsertValuesContext {
        return this.getRuleContext(0, InsertValuesContext)!;
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public fields(): FieldsContext | null {
        return this.getRuleContext(0, FieldsContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_insertFromConstructor;
    }
}


export class FieldsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public insertIdentifier(): InsertIdentifierContext[];
    public insertIdentifier(i: number): InsertIdentifierContext | null;
    public insertIdentifier(i?: number): InsertIdentifierContext[] | InsertIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(InsertIdentifierContext);
        }

        return this.getRuleContext(i, InsertIdentifierContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_fields;
    }
}


export class InsertValuesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public valueList(): ValueListContext {
        return this.getRuleContext(0, ValueListContext)!;
    }
    public VALUES_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.VALUES_SYMBOL, 0);
    }
    public VALUE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.VALUE_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_insertValues;
    }
}


export class InsertQueryExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public queryExpression(): QueryExpressionContext | null {
        return this.getRuleContext(0, QueryExpressionContext);
    }
    public queryExpressionParens(): QueryExpressionParensContext | null {
        return this.getRuleContext(0, QueryExpressionParensContext);
    }
    public queryExpressionWithOptLockingClauses(): QueryExpressionWithOptLockingClausesContext | null {
        return this.getRuleContext(0, QueryExpressionWithOptLockingClausesContext);
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public fields(): FieldsContext | null {
        return this.getRuleContext(0, FieldsContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_insertQueryExpression;
    }
}


export class ValueListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode[];
    public OPEN_PAR_SYMBOL(i: number): antlr.TerminalNode | null;
    public OPEN_PAR_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.OPEN_PAR_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, i);
    	}
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode[];
    public CLOSE_PAR_SYMBOL(i: number): antlr.TerminalNode | null;
    public CLOSE_PAR_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.CLOSE_PAR_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, i);
    	}
    }
    public values(): ValuesContext[];
    public values(i: number): ValuesContext | null;
    public values(i?: number): ValuesContext[] | ValuesContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValuesContext);
        }

        return this.getRuleContext(i, ValuesContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_valueList;
    }
}


export class ValuesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext[];
    public expr(i: number): ExprContext | null;
    public expr(i?: number): ExprContext[] | ExprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExprContext);
        }

        return this.getRuleContext(i, ExprContext);
    }
    public DEFAULT_SYMBOL(): antlr.TerminalNode[];
    public DEFAULT_SYMBOL(i: number): antlr.TerminalNode | null;
    public DEFAULT_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.DEFAULT_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.DEFAULT_SYMBOL, i);
    	}
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_values;
    }
}


export class ValuesReferenceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AS_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.AS_SYMBOL, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public columnInternalRefList(): ColumnInternalRefListContext | null {
        return this.getRuleContext(0, ColumnInternalRefListContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_valuesReference;
    }
}


export class InsertUpdateListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ON_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.ON_SYMBOL, 0)!;
    }
    public DUPLICATE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.DUPLICATE_SYMBOL, 0)!;
    }
    public KEY_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.KEY_SYMBOL, 0)!;
    }
    public UPDATE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.UPDATE_SYMBOL, 0)!;
    }
    public updateList(): UpdateListContext {
        return this.getRuleContext(0, UpdateListContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_insertUpdateList;
    }
}


export class LoadStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOAD_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.LOAD_SYMBOL, 0)!;
    }
    public dataOrXml(): DataOrXmlContext {
        return this.getRuleContext(0, DataOrXmlContext)!;
    }
    public textStringLiteral(): TextStringLiteralContext {
        return this.getRuleContext(0, TextStringLiteralContext)!;
    }
    public INTO_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.INTO_SYMBOL, 0)!;
    }
    public TABLE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0)!;
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(0, TableRefContext)!;
    }
    public loadDataFileTail(): LoadDataFileTailContext {
        return this.getRuleContext(0, LoadDataFileTailContext)!;
    }
    public loadDataLock(): LoadDataLockContext | null {
        return this.getRuleContext(0, LoadDataLockContext);
    }
    public loadFrom(): LoadFromContext | null {
        return this.getRuleContext(0, LoadFromContext);
    }
    public LOCAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
    }
    public loadSourceType(): LoadSourceTypeContext | null {
        return this.getRuleContext(0, LoadSourceTypeContext);
    }
    public sourceCount(): SourceCountContext | null {
        return this.getRuleContext(0, SourceCountContext);
    }
    public sourceOrder(): SourceOrderContext | null {
        return this.getRuleContext(0, SourceOrderContext);
    }
    public usePartition(): UsePartitionContext | null {
        return this.getRuleContext(0, UsePartitionContext);
    }
    public charsetClause(): CharsetClauseContext | null {
        return this.getRuleContext(0, CharsetClauseContext);
    }
    public xmlRowsIdentifiedBy(): XmlRowsIdentifiedByContext | null {
        return this.getRuleContext(0, XmlRowsIdentifiedByContext);
    }
    public fieldsClause(): FieldsClauseContext | null {
        return this.getRuleContext(0, FieldsClauseContext);
    }
    public linesClause(): LinesClauseContext | null {
        return this.getRuleContext(0, LinesClauseContext);
    }
    public loadParallel(): LoadParallelContext | null {
        return this.getRuleContext(0, LoadParallelContext);
    }
    public loadMemory(): LoadMemoryContext | null {
        return this.getRuleContext(0, LoadMemoryContext);
    }
    public loadAlgorithm(): LoadAlgorithmContext | null {
        return this.getRuleContext(0, LoadAlgorithmContext);
    }
    public REPLACE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
    }
    public IGNORE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_loadStatement;
    }
}


export class DataOrXmlContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DATA_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DATA_SYMBOL, 0);
    }
    public XML_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.XML_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_dataOrXml;
    }
}


export class LoadDataLockContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOW_PRIORITY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0);
    }
    public CONCURRENT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CONCURRENT_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_loadDataLock;
    }
}


export class LoadFromContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FROM_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_loadFrom;
    }
}


export class LoadSourceTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INFILE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INFILE_SYMBOL, 0);
    }
    public URL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.URL_SYMBOL, 0);
    }
    public S3_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.S3_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_loadSourceType;
    }
}


export class SourceCountContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COUNT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COUNT_SYMBOL, 0);
    }
    public INT_NUMBER(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, 0);
    }
    public pureIdentifier(): PureIdentifierContext | null {
        return this.getRuleContext(0, PureIdentifierContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_sourceCount;
    }
}


export class SourceOrderContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IN_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.IN_SYMBOL, 0)!;
    }
    public PRIMARY_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.PRIMARY_SYMBOL, 0)!;
    }
    public KEY_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.KEY_SYMBOL, 0)!;
    }
    public ORDER_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.ORDER_SYMBOL, 0)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_sourceOrder;
    }
}


export class XmlRowsIdentifiedByContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ROWS_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.ROWS_SYMBOL, 0)!;
    }
    public IDENTIFIED_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0)!;
    }
    public BY_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.BY_SYMBOL, 0)!;
    }
    public textString(): TextStringContext {
        return this.getRuleContext(0, TextStringContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_xmlRowsIdentifiedBy;
    }
}


export class LoadDataFileTailContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IGNORE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
    }
    public INT_NUMBER(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, 0);
    }
    public loadDataFileTargetList(): LoadDataFileTargetListContext | null {
        return this.getRuleContext(0, LoadDataFileTargetListContext);
    }
    public SET_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SET_SYMBOL, 0);
    }
    public updateList(): UpdateListContext | null {
        return this.getRuleContext(0, UpdateListContext);
    }
    public LINES_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LINES_SYMBOL, 0);
    }
    public ROWS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ROWS_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_loadDataFileTail;
    }
}


export class LoadDataFileTargetListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)!;
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)!;
    }
    public fieldOrVariableList(): FieldOrVariableListContext | null {
        return this.getRuleContext(0, FieldOrVariableListContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_loadDataFileTargetList;
    }
}


export class FieldOrVariableListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnRef(): ColumnRefContext[];
    public columnRef(i: number): ColumnRefContext | null;
    public columnRef(i?: number): ColumnRefContext[] | ColumnRefContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnRefContext);
        }

        return this.getRuleContext(i, ColumnRefContext);
    }
    public AT_SIGN_SYMBOL(): antlr.TerminalNode[];
    public AT_SIGN_SYMBOL(i: number): antlr.TerminalNode | null;
    public AT_SIGN_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.AT_SIGN_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.AT_SIGN_SYMBOL, i);
    	}
    }
    public textOrIdentifier(): TextOrIdentifierContext[];
    public textOrIdentifier(i: number): TextOrIdentifierContext | null;
    public textOrIdentifier(i?: number): TextOrIdentifierContext[] | TextOrIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TextOrIdentifierContext);
        }

        return this.getRuleContext(i, TextOrIdentifierContext);
    }
    public AT_AT_SIGN_SYMBOL(): antlr.TerminalNode[];
    public AT_AT_SIGN_SYMBOL(i: number): antlr.TerminalNode | null;
    public AT_AT_SIGN_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.AT_AT_SIGN_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.AT_AT_SIGN_SYMBOL, i);
    	}
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public AT_TEXT_SUFFIX(): antlr.TerminalNode[];
    public AT_TEXT_SUFFIX(i: number): antlr.TerminalNode | null;
    public AT_TEXT_SUFFIX(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.AT_TEXT_SUFFIX);
    	} else {
    		return this.getToken(MySQLParser.AT_TEXT_SUFFIX, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_fieldOrVariableList;
    }
}


export class LoadAlgorithmContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALGORITHM_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.ALGORITHM_SYMBOL, 0)!;
    }
    public EQUAL_OPERATOR(): antlr.TerminalNode {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0)!;
    }
    public BULK_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.BULK_SYMBOL, 0)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_loadAlgorithm;
    }
}


export class LoadParallelContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARALLEL_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.PARALLEL_SYMBOL, 0)!;
    }
    public EQUAL_OPERATOR(): antlr.TerminalNode {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0)!;
    }
    public INT_NUMBER(): antlr.TerminalNode {
        return this.getToken(MySQLParser.INT_NUMBER, 0)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_loadParallel;
    }
}


export class LoadMemoryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MEMORY_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.MEMORY_SYMBOL, 0)!;
    }
    public EQUAL_OPERATOR(): antlr.TerminalNode {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0)!;
    }
    public sizeNumber(): SizeNumberContext {
        return this.getRuleContext(0, SizeNumberContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_loadMemory;
    }
}


export class ReplaceStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REPLACE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.REPLACE_SYMBOL, 0)!;
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(0, TableRefContext)!;
    }
    public insertFromConstructor(): InsertFromConstructorContext | null {
        return this.getRuleContext(0, InsertFromConstructorContext);
    }
    public SET_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SET_SYMBOL, 0);
    }
    public updateList(): UpdateListContext | null {
        return this.getRuleContext(0, UpdateListContext);
    }
    public insertQueryExpression(): InsertQueryExpressionContext | null {
        return this.getRuleContext(0, InsertQueryExpressionContext);
    }
    public INTO_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INTO_SYMBOL, 0);
    }
    public usePartition(): UsePartitionContext | null {
        return this.getRuleContext(0, UsePartitionContext);
    }
    public LOW_PRIORITY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0);
    }
    public DELAYED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DELAYED_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_replaceStatement;
    }
}


export class SelectStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public queryExpression(): QueryExpressionContext | null {
        return this.getRuleContext(0, QueryExpressionContext);
    }
    public lockingClauseList(): LockingClauseListContext | null {
        return this.getRuleContext(0, LockingClauseListContext);
    }
    public selectStatementWithInto(): SelectStatementWithIntoContext | null {
        return this.getRuleContext(0, SelectStatementWithIntoContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_selectStatement;
    }
}


export class SelectStatementWithIntoContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public selectStatementWithInto(): SelectStatementWithIntoContext | null {
        return this.getRuleContext(0, SelectStatementWithIntoContext);
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public queryExpression(): QueryExpressionContext | null {
        return this.getRuleContext(0, QueryExpressionContext);
    }
    public intoClause(): IntoClauseContext | null {
        return this.getRuleContext(0, IntoClauseContext);
    }
    public lockingClauseList(): LockingClauseListContext | null {
        return this.getRuleContext(0, LockingClauseListContext);
    }
    public queryExpressionParens(): QueryExpressionParensContext | null {
        return this.getRuleContext(0, QueryExpressionParensContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_selectStatementWithInto;
    }
}


export class QueryExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public queryExpressionBody(): QueryExpressionBodyContext {
        return this.getRuleContext(0, QueryExpressionBodyContext)!;
    }
    public withClause(): WithClauseContext | null {
        return this.getRuleContext(0, WithClauseContext);
    }
    public orderClause(): OrderClauseContext | null {
        return this.getRuleContext(0, OrderClauseContext);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(0, LimitClauseContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_queryExpression;
    }
}


export class QueryExpressionBodyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public queryPrimary(): QueryPrimaryContext | null {
        return this.getRuleContext(0, QueryPrimaryContext);
    }
    public queryExpressionParens(): QueryExpressionParensContext | null {
        return this.getRuleContext(0, QueryExpressionParensContext);
    }
    public queryExpressionBody(): QueryExpressionBodyContext[];
    public queryExpressionBody(i: number): QueryExpressionBodyContext | null;
    public queryExpressionBody(i?: number): QueryExpressionBodyContext[] | QueryExpressionBodyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QueryExpressionBodyContext);
        }

        return this.getRuleContext(i, QueryExpressionBodyContext);
    }
    public UNION_SYMBOL(): antlr.TerminalNode[];
    public UNION_SYMBOL(i: number): antlr.TerminalNode | null;
    public UNION_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.UNION_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.UNION_SYMBOL, i);
    	}
    }
    public EXCEPT_SYMBOL(): antlr.TerminalNode[];
    public EXCEPT_SYMBOL(i: number): antlr.TerminalNode | null;
    public EXCEPT_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.EXCEPT_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.EXCEPT_SYMBOL, i);
    	}
    }
    public INTERSECT_SYMBOL(): antlr.TerminalNode[];
    public INTERSECT_SYMBOL(i: number): antlr.TerminalNode | null;
    public INTERSECT_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.INTERSECT_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.INTERSECT_SYMBOL, i);
    	}
    }
    public unionOption(): UnionOptionContext[];
    public unionOption(i: number): UnionOptionContext | null;
    public unionOption(i?: number): UnionOptionContext[] | UnionOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UnionOptionContext);
        }

        return this.getRuleContext(i, UnionOptionContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_queryExpressionBody;
    }
}


export class QueryExpressionParensContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)!;
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)!;
    }
    public queryExpressionParens(): QueryExpressionParensContext | null {
        return this.getRuleContext(0, QueryExpressionParensContext);
    }
    public queryExpressionWithOptLockingClauses(): QueryExpressionWithOptLockingClausesContext | null {
        return this.getRuleContext(0, QueryExpressionWithOptLockingClausesContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_queryExpressionParens;
    }
}


export class QueryPrimaryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public querySpecification(): QuerySpecificationContext | null {
        return this.getRuleContext(0, QuerySpecificationContext);
    }
    public tableValueConstructor(): TableValueConstructorContext | null {
        return this.getRuleContext(0, TableValueConstructorContext);
    }
    public explicitTable(): ExplicitTableContext | null {
        return this.getRuleContext(0, ExplicitTableContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_queryPrimary;
    }
}


export class QuerySpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SELECT_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SELECT_SYMBOL, 0)!;
    }
    public selectItemList(): SelectItemListContext {
        return this.getRuleContext(0, SelectItemListContext)!;
    }
    public selectOption(): SelectOptionContext[];
    public selectOption(i: number): SelectOptionContext | null;
    public selectOption(i?: number): SelectOptionContext[] | SelectOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SelectOptionContext);
        }

        return this.getRuleContext(i, SelectOptionContext);
    }
    public intoClause(): IntoClauseContext | null {
        return this.getRuleContext(0, IntoClauseContext);
    }
    public fromClause(): FromClauseContext | null {
        return this.getRuleContext(0, FromClauseContext);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public groupByClause(): GroupByClauseContext | null {
        return this.getRuleContext(0, GroupByClauseContext);
    }
    public havingClause(): HavingClauseContext | null {
        return this.getRuleContext(0, HavingClauseContext);
    }
    public windowClause(): WindowClauseContext | null {
        return this.getRuleContext(0, WindowClauseContext);
    }
    public qualifyClause(): QualifyClauseContext | null {
        return this.getRuleContext(0, QualifyClauseContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_querySpecification;
    }
}


export class SubqueryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public queryExpressionParens(): QueryExpressionParensContext {
        return this.getRuleContext(0, QueryExpressionParensContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_subquery;
    }
}


export class QuerySpecOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public DISTINCT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DISTINCT_SYMBOL, 0);
    }
    public STRAIGHT_JOIN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.STRAIGHT_JOIN_SYMBOL, 0);
    }
    public HIGH_PRIORITY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.HIGH_PRIORITY_SYMBOL, 0);
    }
    public SQL_SMALL_RESULT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SQL_SMALL_RESULT_SYMBOL, 0);
    }
    public SQL_BIG_RESULT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SQL_BIG_RESULT_SYMBOL, 0);
    }
    public SQL_BUFFER_RESULT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SQL_BUFFER_RESULT_SYMBOL, 0);
    }
    public SQL_CALC_FOUND_ROWS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SQL_CALC_FOUND_ROWS_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_querySpecOption;
    }
}


export class LimitClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIMIT_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.LIMIT_SYMBOL, 0)!;
    }
    public limitOptions(): LimitOptionsContext {
        return this.getRuleContext(0, LimitOptionsContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_limitClause;
    }
}


export class SimpleLimitClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIMIT_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.LIMIT_SYMBOL, 0)!;
    }
    public limitOption(): LimitOptionContext {
        return this.getRuleContext(0, LimitOptionContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_simpleLimitClause;
    }
}


export class LimitOptionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public limitOption(): LimitOptionContext[];
    public limitOption(i: number): LimitOptionContext | null;
    public limitOption(i?: number): LimitOptionContext[] | LimitOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LimitOptionContext);
        }

        return this.getRuleContext(i, LimitOptionContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
    }
    public OFFSET_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OFFSET_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_limitOptions;
    }
}


export class LimitOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public PARAM_MARKER(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PARAM_MARKER, 0);
    }
    public ULONGLONG_NUMBER(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ULONGLONG_NUMBER, 0);
    }
    public LONG_NUMBER(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LONG_NUMBER, 0);
    }
    public INT_NUMBER(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_limitOption;
    }
}


export class IntoClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INTO_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.INTO_SYMBOL, 0)!;
    }
    public OUTFILE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OUTFILE_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(0, TextStringLiteralContext);
    }
    public DUMPFILE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DUMPFILE_SYMBOL, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext[];
    public textOrIdentifier(i: number): TextOrIdentifierContext | null;
    public textOrIdentifier(i?: number): TextOrIdentifierContext[] | TextOrIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TextOrIdentifierContext);
        }

        return this.getRuleContext(i, TextOrIdentifierContext);
    }
    public userVariable(): UserVariableContext[];
    public userVariable(i: number): UserVariableContext | null;
    public userVariable(i?: number): UserVariableContext[] | UserVariableContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UserVariableContext);
        }

        return this.getRuleContext(i, UserVariableContext);
    }
    public charsetClause(): CharsetClauseContext | null {
        return this.getRuleContext(0, CharsetClauseContext);
    }
    public fieldsClause(): FieldsClauseContext | null {
        return this.getRuleContext(0, FieldsClauseContext);
    }
    public linesClause(): LinesClauseContext | null {
        return this.getRuleContext(0, LinesClauseContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_intoClause;
    }
}


export class ProcedureAnalyseClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PROCEDURE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.PROCEDURE_SYMBOL, 0)!;
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)!;
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)!;
    }
    public INT_NUMBER(): antlr.TerminalNode[];
    public INT_NUMBER(i: number): antlr.TerminalNode | null;
    public INT_NUMBER(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.INT_NUMBER);
    	} else {
    		return this.getToken(MySQLParser.INT_NUMBER, i);
    	}
    }
    public COMMA_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_procedureAnalyseClause;
    }
}


export class HavingClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public HAVING_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.HAVING_SYMBOL, 0)!;
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_havingClause;
    }
}


export class QualifyClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public QUALIFY_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.QUALIFY_SYMBOL, 0)!;
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_qualifyClause;
    }
}


export class WindowClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WINDOW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.WINDOW_SYMBOL, 0)!;
    }
    public windowDefinition(): WindowDefinitionContext[];
    public windowDefinition(i: number): WindowDefinitionContext | null;
    public windowDefinition(i?: number): WindowDefinitionContext[] | WindowDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(WindowDefinitionContext);
        }

        return this.getRuleContext(i, WindowDefinitionContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_windowClause;
    }
}


export class WindowDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public windowName(): WindowNameContext {
        return this.getRuleContext(0, WindowNameContext)!;
    }
    public AS_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.AS_SYMBOL, 0)!;
    }
    public windowSpec(): WindowSpecContext {
        return this.getRuleContext(0, WindowSpecContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_windowDefinition;
    }
}


export class WindowSpecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)!;
    }
    public windowSpecDetails(): WindowSpecDetailsContext {
        return this.getRuleContext(0, WindowSpecDetailsContext)!;
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_windowSpec;
    }
}


export class WindowSpecDetailsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public windowName(): WindowNameContext | null {
        return this.getRuleContext(0, WindowNameContext);
    }
    public PARTITION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
    }
    public BY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BY_SYMBOL, 0);
    }
    public orderList(): OrderListContext | null {
        return this.getRuleContext(0, OrderListContext);
    }
    public orderClause(): OrderClauseContext | null {
        return this.getRuleContext(0, OrderClauseContext);
    }
    public windowFrameClause(): WindowFrameClauseContext | null {
        return this.getRuleContext(0, WindowFrameClauseContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_windowSpecDetails;
    }
}


export class WindowFrameClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public windowFrameUnits(): WindowFrameUnitsContext {
        return this.getRuleContext(0, WindowFrameUnitsContext)!;
    }
    public windowFrameExtent(): WindowFrameExtentContext {
        return this.getRuleContext(0, WindowFrameExtentContext)!;
    }
    public windowFrameExclusion(): WindowFrameExclusionContext | null {
        return this.getRuleContext(0, WindowFrameExclusionContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_windowFrameClause;
    }
}


export class WindowFrameUnitsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ROWS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ROWS_SYMBOL, 0);
    }
    public RANGE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RANGE_SYMBOL, 0);
    }
    public GROUPS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.GROUPS_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_windowFrameUnits;
    }
}


export class WindowFrameExtentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public windowFrameStart(): WindowFrameStartContext | null {
        return this.getRuleContext(0, WindowFrameStartContext);
    }
    public windowFrameBetween(): WindowFrameBetweenContext | null {
        return this.getRuleContext(0, WindowFrameBetweenContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_windowFrameExtent;
    }
}


export class WindowFrameStartContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UNBOUNDED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.UNBOUNDED_SYMBOL, 0);
    }
    public PRECEDING_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PRECEDING_SYMBOL, 0);
    }
    public ulonglongNumber(): UlonglongNumberContext | null {
        return this.getRuleContext(0, UlonglongNumberContext);
    }
    public PARAM_MARKER(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PARAM_MARKER, 0);
    }
    public INTERVAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INTERVAL_SYMBOL, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(0, ExprContext);
    }
    public interval(): IntervalContext | null {
        return this.getRuleContext(0, IntervalContext);
    }
    public CURRENT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CURRENT_SYMBOL, 0);
    }
    public ROW_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ROW_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_windowFrameStart;
    }
}


export class WindowFrameBetweenContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BETWEEN_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.BETWEEN_SYMBOL, 0)!;
    }
    public windowFrameBound(): WindowFrameBoundContext[];
    public windowFrameBound(i: number): WindowFrameBoundContext | null;
    public windowFrameBound(i?: number): WindowFrameBoundContext[] | WindowFrameBoundContext | null {
        if (i === undefined) {
            return this.getRuleContexts(WindowFrameBoundContext);
        }

        return this.getRuleContext(i, WindowFrameBoundContext);
    }
    public AND_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.AND_SYMBOL, 0)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_windowFrameBetween;
    }
}


export class WindowFrameBoundContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public windowFrameStart(): WindowFrameStartContext | null {
        return this.getRuleContext(0, WindowFrameStartContext);
    }
    public UNBOUNDED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.UNBOUNDED_SYMBOL, 0);
    }
    public FOLLOWING_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FOLLOWING_SYMBOL, 0);
    }
    public ulonglongNumber(): UlonglongNumberContext | null {
        return this.getRuleContext(0, UlonglongNumberContext);
    }
    public PARAM_MARKER(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PARAM_MARKER, 0);
    }
    public INTERVAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INTERVAL_SYMBOL, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(0, ExprContext);
    }
    public interval(): IntervalContext | null {
        return this.getRuleContext(0, IntervalContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_windowFrameBound;
    }
}


export class WindowFrameExclusionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EXCLUDE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.EXCLUDE_SYMBOL, 0)!;
    }
    public CURRENT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CURRENT_SYMBOL, 0);
    }
    public ROW_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ROW_SYMBOL, 0);
    }
    public GROUP_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
    }
    public TIES_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TIES_SYMBOL, 0);
    }
    public NO_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NO_SYMBOL, 0);
    }
    public OTHERS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OTHERS_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_windowFrameExclusion;
    }
}


export class WithClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0)!;
    }
    public commonTableExpression(): CommonTableExpressionContext[];
    public commonTableExpression(i: number): CommonTableExpressionContext | null;
    public commonTableExpression(i?: number): CommonTableExpressionContext[] | CommonTableExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CommonTableExpressionContext);
        }

        return this.getRuleContext(i, CommonTableExpressionContext);
    }
    public RECURSIVE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RECURSIVE_SYMBOL, 0);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_withClause;
    }
}


export class CommonTableExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public AS_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.AS_SYMBOL, 0)!;
    }
    public subquery(): SubqueryContext {
        return this.getRuleContext(0, SubqueryContext)!;
    }
    public columnInternalRefList(): ColumnInternalRefListContext | null {
        return this.getRuleContext(0, ColumnInternalRefListContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_commonTableExpression;
    }
}


export class GroupByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GROUP_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.GROUP_SYMBOL, 0)!;
    }
    public BY_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.BY_SYMBOL, 0)!;
    }
    public orderList(): OrderListContext | null {
        return this.getRuleContext(0, OrderListContext);
    }
    public olapOption(): OlapOptionContext | null {
        return this.getRuleContext(0, OlapOptionContext);
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public groupList(): GroupListContext | null {
        return this.getRuleContext(0, GroupListContext);
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public ROLLUP_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ROLLUP_SYMBOL, 0);
    }
    public CUBE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CUBE_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_groupByClause;
    }
}


export class OlapOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0)!;
    }
    public ROLLUP_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.ROLLUP_SYMBOL, 0)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_olapOption;
    }
}


export class OrderClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ORDER_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.ORDER_SYMBOL, 0)!;
    }
    public BY_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.BY_SYMBOL, 0)!;
    }
    public orderList(): OrderListContext {
        return this.getRuleContext(0, OrderListContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_orderClause;
    }
}


export class DirectionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ASC_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ASC_SYMBOL, 0);
    }
    public DESC_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DESC_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_direction;
    }
}


export class FromClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FROM_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0)!;
    }
    public DUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DUAL_SYMBOL, 0);
    }
    public tableReferenceList(): TableReferenceListContext | null {
        return this.getRuleContext(0, TableReferenceListContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_fromClause;
    }
}


export class TableReferenceListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableReference(): TableReferenceContext[];
    public tableReference(i: number): TableReferenceContext | null;
    public tableReference(i?: number): TableReferenceContext[] | TableReferenceContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableReferenceContext);
        }

        return this.getRuleContext(i, TableReferenceContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_tableReferenceList;
    }
}


export class TableValueConstructorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public VALUES_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.VALUES_SYMBOL, 0)!;
    }
    public rowValueExplicit(): RowValueExplicitContext[];
    public rowValueExplicit(i: number): RowValueExplicitContext | null;
    public rowValueExplicit(i?: number): RowValueExplicitContext[] | RowValueExplicitContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RowValueExplicitContext);
        }

        return this.getRuleContext(i, RowValueExplicitContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_tableValueConstructor;
    }
}


export class ExplicitTableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABLE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0)!;
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(0, TableRefContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_explicitTable;
    }
}


export class RowValueExplicitContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ROW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.ROW_SYMBOL, 0)!;
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)!;
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)!;
    }
    public values(): ValuesContext | null {
        return this.getRuleContext(0, ValuesContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_rowValueExplicit;
    }
}


export class SelectOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public querySpecOption(): QuerySpecOptionContext | null {
        return this.getRuleContext(0, QuerySpecOptionContext);
    }
    public SQL_NO_CACHE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SQL_NO_CACHE_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_selectOption;
    }
}


export class LockingClauseListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public lockingClause(): LockingClauseContext[];
    public lockingClause(i: number): LockingClauseContext | null;
    public lockingClause(i?: number): LockingClauseContext[] | LockingClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LockingClauseContext);
        }

        return this.getRuleContext(i, LockingClauseContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_lockingClauseList;
    }
}


export class LockingClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FOR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public lockStrengh(): LockStrenghContext | null {
        return this.getRuleContext(0, LockStrenghContext);
    }
    public OF_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OF_SYMBOL, 0);
    }
    public tableAliasRefList(): TableAliasRefListContext | null {
        return this.getRuleContext(0, TableAliasRefListContext);
    }
    public lockedRowAction(): LockedRowActionContext | null {
        return this.getRuleContext(0, LockedRowActionContext);
    }
    public LOCK_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LOCK_SYMBOL, 0);
    }
    public IN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.IN_SYMBOL, 0);
    }
    public SHARE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SHARE_SYMBOL, 0);
    }
    public MODE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MODE_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_lockingClause;
    }
}


export class LockStrenghContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UPDATE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.UPDATE_SYMBOL, 0);
    }
    public SHARE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SHARE_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_lockStrengh;
    }
}


export class LockedRowActionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SKIP_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SKIP_SYMBOL, 0);
    }
    public LOCKED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LOCKED_SYMBOL, 0);
    }
    public NOWAIT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NOWAIT_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_lockedRowAction;
    }
}


export class SelectItemListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public selectItem(): SelectItemContext[];
    public selectItem(i: number): SelectItemContext | null;
    public selectItem(i?: number): SelectItemContext[] | SelectItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SelectItemContext);
        }

        return this.getRuleContext(i, SelectItemContext);
    }
    public MULT_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MULT_OPERATOR, 0);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_selectItemList;
    }
}


export class SelectItemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableWild(): TableWildContext | null {
        return this.getRuleContext(0, TableWildContext);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(0, ExprContext);
    }
    public selectAlias(): SelectAliasContext | null {
        return this.getRuleContext(0, SelectAliasContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_selectItem;
    }
}


export class SelectAliasContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(0, TextStringLiteralContext);
    }
    public AS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.AS_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_selectAlias;
    }
}


export class WhereClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WHERE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.WHERE_SYMBOL, 0)!;
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_whereClause;
    }
}


export class TableReferenceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableFactor(): TableFactorContext | null {
        return this.getRuleContext(0, TableFactorContext);
    }
    public OPEN_CURLY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_CURLY_SYMBOL, 0);
    }
    public escapedTableReference(): EscapedTableReferenceContext | null {
        return this.getRuleContext(0, EscapedTableReferenceContext);
    }
    public CLOSE_CURLY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_CURLY_SYMBOL, 0);
    }
    public joinedTable(): JoinedTableContext[];
    public joinedTable(i: number): JoinedTableContext | null;
    public joinedTable(i?: number): JoinedTableContext[] | JoinedTableContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JoinedTableContext);
        }

        return this.getRuleContext(i, JoinedTableContext);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public OJ_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OJ_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_tableReference;
    }
}


export class EscapedTableReferenceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableFactor(): TableFactorContext {
        return this.getRuleContext(0, TableFactorContext)!;
    }
    public joinedTable(): JoinedTableContext[];
    public joinedTable(i: number): JoinedTableContext | null;
    public joinedTable(i?: number): JoinedTableContext[] | JoinedTableContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JoinedTableContext);
        }

        return this.getRuleContext(i, JoinedTableContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_escapedTableReference;
    }
}


export class JoinedTableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public innerJoinType(): InnerJoinTypeContext | null {
        return this.getRuleContext(0, InnerJoinTypeContext);
    }
    public tableReference(): TableReferenceContext | null {
        return this.getRuleContext(0, TableReferenceContext);
    }
    public ON_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(0, ExprContext);
    }
    public USING_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.USING_SYMBOL, 0);
    }
    public identifierListWithParentheses(): IdentifierListWithParenthesesContext | null {
        return this.getRuleContext(0, IdentifierListWithParenthesesContext);
    }
    public outerJoinType(): OuterJoinTypeContext | null {
        return this.getRuleContext(0, OuterJoinTypeContext);
    }
    public naturalJoinType(): NaturalJoinTypeContext | null {
        return this.getRuleContext(0, NaturalJoinTypeContext);
    }
    public tableFactor(): TableFactorContext | null {
        return this.getRuleContext(0, TableFactorContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_joinedTable;
    }
}


export class NaturalJoinTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NATURAL_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.NATURAL_SYMBOL, 0)!;
    }
    public JOIN_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.JOIN_SYMBOL, 0)!;
    }
    public INNER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INNER_SYMBOL, 0);
    }
    public LEFT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LEFT_SYMBOL, 0);
    }
    public RIGHT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RIGHT_SYMBOL, 0);
    }
    public OUTER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OUTER_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_naturalJoinType;
    }
}


export class InnerJoinTypeContext extends antlr.ParserRuleContext {
    public _type_?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public JOIN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.JOIN_SYMBOL, 0);
    }
    public INNER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INNER_SYMBOL, 0);
    }
    public CROSS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CROSS_SYMBOL, 0);
    }
    public STRAIGHT_JOIN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.STRAIGHT_JOIN_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_innerJoinType;
    }
}


export class OuterJoinTypeContext extends antlr.ParserRuleContext {
    public _type_?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public JOIN_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.JOIN_SYMBOL, 0)!;
    }
    public LEFT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LEFT_SYMBOL, 0);
    }
    public RIGHT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RIGHT_SYMBOL, 0);
    }
    public OUTER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OUTER_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_outerJoinType;
    }
}


export class TableFactorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public singleTable(): SingleTableContext | null {
        return this.getRuleContext(0, SingleTableContext);
    }
    public singleTableParens(): SingleTableParensContext | null {
        return this.getRuleContext(0, SingleTableParensContext);
    }
    public derivedTable(): DerivedTableContext | null {
        return this.getRuleContext(0, DerivedTableContext);
    }
    public tableReferenceListParens(): TableReferenceListParensContext | null {
        return this.getRuleContext(0, TableReferenceListParensContext);
    }
    public tableFunction(): TableFunctionContext | null {
        return this.getRuleContext(0, TableFunctionContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_tableFactor;
    }
}


export class SingleTableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(0, TableRefContext)!;
    }
    public usePartition(): UsePartitionContext | null {
        return this.getRuleContext(0, UsePartitionContext);
    }
    public tableAlias(): TableAliasContext | null {
        return this.getRuleContext(0, TableAliasContext);
    }
    public indexHintList(): IndexHintListContext | null {
        return this.getRuleContext(0, IndexHintListContext);
    }
    public tablesampleClause(): TablesampleClauseContext | null {
        return this.getRuleContext(0, TablesampleClauseContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_singleTable;
    }
}


export class SingleTableParensContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)!;
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)!;
    }
    public singleTable(): SingleTableContext | null {
        return this.getRuleContext(0, SingleTableContext);
    }
    public singleTableParens(): SingleTableParensContext | null {
        return this.getRuleContext(0, SingleTableParensContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_singleTableParens;
    }
}


export class DerivedTableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public subquery(): SubqueryContext {
        return this.getRuleContext(0, SubqueryContext)!;
    }
    public tableAlias(): TableAliasContext | null {
        return this.getRuleContext(0, TableAliasContext);
    }
    public columnInternalRefList(): ColumnInternalRefListContext | null {
        return this.getRuleContext(0, ColumnInternalRefListContext);
    }
    public LATERAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LATERAL_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_derivedTable;
    }
}


export class TableReferenceListParensContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)!;
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)!;
    }
    public tableReferenceList(): TableReferenceListContext | null {
        return this.getRuleContext(0, TableReferenceListContext);
    }
    public tableReferenceListParens(): TableReferenceListParensContext | null {
        return this.getRuleContext(0, TableReferenceListParensContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_tableReferenceListParens;
    }
}


export class TableFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public JSON_TABLE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.JSON_TABLE_SYMBOL, 0)!;
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)!;
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public COMMA_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.COMMA_SYMBOL, 0)!;
    }
    public textStringLiteral(): TextStringLiteralContext {
        return this.getRuleContext(0, TextStringLiteralContext)!;
    }
    public columnsClause(): ColumnsClauseContext {
        return this.getRuleContext(0, ColumnsClauseContext)!;
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)!;
    }
    public tableAlias(): TableAliasContext | null {
        return this.getRuleContext(0, TableAliasContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_tableFunction;
    }
}


export class ColumnsClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COLUMNS_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.COLUMNS_SYMBOL, 0)!;
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)!;
    }
    public jtColumn(): JtColumnContext[];
    public jtColumn(i: number): JtColumnContext | null;
    public jtColumn(i?: number): JtColumnContext[] | JtColumnContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JtColumnContext);
        }

        return this.getRuleContext(i, JtColumnContext);
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)!;
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_columnsClause;
    }
}


export class JtColumnContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public FOR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public ORDINALITY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ORDINALITY_SYMBOL, 0);
    }
    public dataType(): DataTypeContext | null {
        return this.getRuleContext(0, DataTypeContext);
    }
    public PATH_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PATH_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(0, TextStringLiteralContext);
    }
    public collate(): CollateContext | null {
        return this.getRuleContext(0, CollateContext);
    }
    public EXISTS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EXISTS_SYMBOL, 0);
    }
    public onEmptyOrErrorJsonTable(): OnEmptyOrErrorJsonTableContext | null {
        return this.getRuleContext(0, OnEmptyOrErrorJsonTableContext);
    }
    public NESTED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NESTED_SYMBOL, 0);
    }
    public columnsClause(): ColumnsClauseContext | null {
        return this.getRuleContext(0, ColumnsClauseContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_jtColumn;
    }
}


export class OnEmptyOrErrorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public onEmpty(): OnEmptyContext | null {
        return this.getRuleContext(0, OnEmptyContext);
    }
    public onError(): OnErrorContext | null {
        return this.getRuleContext(0, OnErrorContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_onEmptyOrError;
    }
}


export class OnEmptyOrErrorJsonTableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public onEmptyOrError(): OnEmptyOrErrorContext | null {
        return this.getRuleContext(0, OnEmptyOrErrorContext);
    }
    public onError(): OnErrorContext | null {
        return this.getRuleContext(0, OnErrorContext);
    }
    public onEmpty(): OnEmptyContext | null {
        return this.getRuleContext(0, OnEmptyContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_onEmptyOrErrorJsonTable;
    }
}


export class OnEmptyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public jsonOnResponse(): JsonOnResponseContext {
        return this.getRuleContext(0, JsonOnResponseContext)!;
    }
    public ON_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.ON_SYMBOL, 0)!;
    }
    public EMPTY_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.EMPTY_SYMBOL, 0)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_onEmpty;
    }
}


export class OnErrorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public jsonOnResponse(): JsonOnResponseContext {
        return this.getRuleContext(0, JsonOnResponseContext)!;
    }
    public ON_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.ON_SYMBOL, 0)!;
    }
    public ERROR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.ERROR_SYMBOL, 0)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_onError;
    }
}


export class JsonOnResponseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ERROR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ERROR_SYMBOL, 0);
    }
    public NULL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NULL_SYMBOL, 0);
    }
    public DEFAULT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(0, TextStringLiteralContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_jsonOnResponse;
    }
}


export class UnionOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DISTINCT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DISTINCT_SYMBOL, 0);
    }
    public ALL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_unionOption;
    }
}


export class TableAliasContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public AS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.AS_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_tableAlias;
    }
}


export class IndexHintListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public indexHint(): IndexHintContext[];
    public indexHint(i: number): IndexHintContext | null;
    public indexHint(i?: number): IndexHintContext[] | IndexHintContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IndexHintContext);
        }

        return this.getRuleContext(i, IndexHintContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_indexHintList;
    }
}


export class IndexHintContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public indexHintType(): IndexHintTypeContext | null {
        return this.getRuleContext(0, IndexHintTypeContext);
    }
    public keyOrIndex(): KeyOrIndexContext {
        return this.getRuleContext(0, KeyOrIndexContext)!;
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)!;
    }
    public indexList(): IndexListContext | null {
        return this.getRuleContext(0, IndexListContext);
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)!;
    }
    public indexHintClause(): IndexHintClauseContext | null {
        return this.getRuleContext(0, IndexHintClauseContext);
    }
    public USE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.USE_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_indexHint;
    }
}


export class IndexHintTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FORCE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FORCE_SYMBOL, 0);
    }
    public IGNORE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_indexHintType;
    }
}


export class KeyOrIndexContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KEY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.KEY_SYMBOL, 0);
    }
    public INDEX_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_keyOrIndex;
    }
}


export class ConstraintKeyTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PRIMARY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PRIMARY_SYMBOL, 0);
    }
    public KEY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.KEY_SYMBOL, 0);
    }
    public UNIQUE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.UNIQUE_SYMBOL, 0);
    }
    public keyOrIndex(): KeyOrIndexContext | null {
        return this.getRuleContext(0, KeyOrIndexContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_constraintKeyType;
    }
}


export class IndexHintClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FOR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0)!;
    }
    public JOIN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.JOIN_SYMBOL, 0);
    }
    public ORDER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ORDER_SYMBOL, 0);
    }
    public BY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BY_SYMBOL, 0);
    }
    public GROUP_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_indexHintClause;
    }
}


export class IndexListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public indexListElement(): IndexListElementContext[];
    public indexListElement(i: number): IndexListElementContext | null;
    public indexListElement(i?: number): IndexListElementContext[] | IndexListElementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IndexListElementContext);
        }

        return this.getRuleContext(i, IndexListElementContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_indexList;
    }
}


export class IndexListElementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public PRIMARY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PRIMARY_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_indexListElement;
    }
}


export class UpdateStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UPDATE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.UPDATE_SYMBOL, 0)!;
    }
    public tableReferenceList(): TableReferenceListContext {
        return this.getRuleContext(0, TableReferenceListContext)!;
    }
    public SET_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SET_SYMBOL, 0)!;
    }
    public updateList(): UpdateListContext {
        return this.getRuleContext(0, UpdateListContext)!;
    }
    public withClause(): WithClauseContext | null {
        return this.getRuleContext(0, WithClauseContext);
    }
    public LOW_PRIORITY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0);
    }
    public IGNORE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public orderClause(): OrderClauseContext | null {
        return this.getRuleContext(0, OrderClauseContext);
    }
    public simpleLimitClause(): SimpleLimitClauseContext | null {
        return this.getRuleContext(0, SimpleLimitClauseContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_updateStatement;
    }
}


export class TransactionOrLockingStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public transactionStatement(): TransactionStatementContext | null {
        return this.getRuleContext(0, TransactionStatementContext);
    }
    public savepointStatement(): SavepointStatementContext | null {
        return this.getRuleContext(0, SavepointStatementContext);
    }
    public lockStatement(): LockStatementContext | null {
        return this.getRuleContext(0, LockStatementContext);
    }
    public xaStatement(): XaStatementContext | null {
        return this.getRuleContext(0, XaStatementContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_transactionOrLockingStatement;
    }
}


export class TransactionStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public START_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.START_SYMBOL, 0);
    }
    public TRANSACTION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TRANSACTION_SYMBOL, 0);
    }
    public startTransactionOptionList(): StartTransactionOptionListContext[];
    public startTransactionOptionList(i: number): StartTransactionOptionListContext | null;
    public startTransactionOptionList(i?: number): StartTransactionOptionListContext[] | StartTransactionOptionListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StartTransactionOptionListContext);
        }

        return this.getRuleContext(i, StartTransactionOptionListContext);
    }
    public COMMIT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COMMIT_SYMBOL, 0);
    }
    public WORK_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.WORK_SYMBOL, 0);
    }
    public AND_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.AND_SYMBOL, 0);
    }
    public CHAIN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CHAIN_SYMBOL, 0);
    }
    public RELEASE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RELEASE_SYMBOL, 0);
    }
    public NO_SYMBOL(): antlr.TerminalNode[];
    public NO_SYMBOL(i: number): antlr.TerminalNode | null;
    public NO_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.NO_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.NO_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_transactionStatement;
    }
}


export class BeginWorkContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BEGIN_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.BEGIN_SYMBOL, 0)!;
    }
    public WORK_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.WORK_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_beginWork;
    }
}


export class StartTransactionOptionListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public CONSISTENT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CONSISTENT_SYMBOL, 0);
    }
    public SNAPSHOT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SNAPSHOT_SYMBOL, 0);
    }
    public READ_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.READ_SYMBOL, 0);
    }
    public WRITE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.WRITE_SYMBOL, 0);
    }
    public ONLY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ONLY_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_startTransactionOptionList;
    }
}


export class SavepointStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SAVEPOINT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SAVEPOINT_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public ROLLBACK_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ROLLBACK_SYMBOL, 0);
    }
    public TO_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TO_SYMBOL, 0);
    }
    public WORK_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.WORK_SYMBOL, 0);
    }
    public AND_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.AND_SYMBOL, 0);
    }
    public CHAIN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CHAIN_SYMBOL, 0);
    }
    public RELEASE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RELEASE_SYMBOL, 0);
    }
    public NO_SYMBOL(): antlr.TerminalNode[];
    public NO_SYMBOL(i: number): antlr.TerminalNode | null;
    public NO_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.NO_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.NO_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_savepointStatement;
    }
}


export class LockStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOCK_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LOCK_SYMBOL, 0);
    }
    public lockItem(): LockItemContext[];
    public lockItem(i: number): LockItemContext | null;
    public lockItem(i?: number): LockItemContext[] | LockItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LockItemContext);
        }

        return this.getRuleContext(i, LockItemContext);
    }
    public TABLES_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
    }
    public TABLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public INSTANCE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INSTANCE_SYMBOL, 0);
    }
    public FOR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public BACKUP_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BACKUP_SYMBOL, 0);
    }
    public UNLOCK_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.UNLOCK_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_lockStatement;
    }
}


export class LockItemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(0, TableRefContext)!;
    }
    public lockOption(): LockOptionContext {
        return this.getRuleContext(0, LockOptionContext)!;
    }
    public tableAlias(): TableAliasContext | null {
        return this.getRuleContext(0, TableAliasContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_lockItem;
    }
}


export class LockOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public READ_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.READ_SYMBOL, 0);
    }
    public LOCAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
    }
    public WRITE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.WRITE_SYMBOL, 0);
    }
    public LOW_PRIORITY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_lockOption;
    }
}


export class XaStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public XA_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.XA_SYMBOL, 0)!;
    }
    public xid(): XidContext | null {
        return this.getRuleContext(0, XidContext);
    }
    public END_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.END_SYMBOL, 0);
    }
    public PREPARE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PREPARE_SYMBOL, 0);
    }
    public COMMIT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COMMIT_SYMBOL, 0);
    }
    public ROLLBACK_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ROLLBACK_SYMBOL, 0);
    }
    public RECOVER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RECOVER_SYMBOL, 0);
    }
    public START_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.START_SYMBOL, 0);
    }
    public BEGIN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BEGIN_SYMBOL, 0);
    }
    public SUSPEND_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SUSPEND_SYMBOL, 0);
    }
    public ONE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ONE_SYMBOL, 0);
    }
    public PHASE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PHASE_SYMBOL, 0);
    }
    public xaConvert(): XaConvertContext | null {
        return this.getRuleContext(0, XaConvertContext);
    }
    public JOIN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.JOIN_SYMBOL, 0);
    }
    public RESUME_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RESUME_SYMBOL, 0);
    }
    public FOR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public MIGRATE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MIGRATE_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_xaStatement;
    }
}


export class XaConvertContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CONVERT_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CONVERT_SYMBOL, 0)!;
    }
    public XID_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.XID_SYMBOL, 0)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_xaConvert;
    }
}


export class XidContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textString(): TextStringContext[];
    public textString(i: number): TextStringContext | null;
    public textString(i?: number): TextStringContext[] | TextStringContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TextStringContext);
        }

        return this.getRuleContext(i, TextStringContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public ulong_number(): Ulong_numberContext | null {
        return this.getRuleContext(0, Ulong_numberContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_xid;
    }
}


export class ReplicationStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PURGE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PURGE_SYMBOL, 0);
    }
    public purgeOptions(): PurgeOptionsContext | null {
        return this.getRuleContext(0, PurgeOptionsContext);
    }
    public changeSource(): ChangeSourceContext | null {
        return this.getRuleContext(0, ChangeSourceContext);
    }
    public RESET_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RESET_SYMBOL, 0);
    }
    public resetOption(): ResetOptionContext[];
    public resetOption(i: number): ResetOptionContext | null;
    public resetOption(i?: number): ResetOptionContext[] | ResetOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ResetOptionContext);
        }

        return this.getRuleContext(i, ResetOptionContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public PERSIST_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PERSIST_SYMBOL, 0);
    }
    public ifExistsIdentifier(): IfExistsIdentifierContext | null {
        return this.getRuleContext(0, IfExistsIdentifierContext);
    }
    public startReplicaStatement(): StartReplicaStatementContext | null {
        return this.getRuleContext(0, StartReplicaStatementContext);
    }
    public stopReplicaStatement(): StopReplicaStatementContext | null {
        return this.getRuleContext(0, StopReplicaStatementContext);
    }
    public changeReplication(): ChangeReplicationContext | null {
        return this.getRuleContext(0, ChangeReplicationContext);
    }
    public replicationLoad(): ReplicationLoadContext | null {
        return this.getRuleContext(0, ReplicationLoadContext);
    }
    public groupReplication(): GroupReplicationContext | null {
        return this.getRuleContext(0, GroupReplicationContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_replicationStatement;
    }
}


export class PurgeOptionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOGS_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.LOGS_SYMBOL, 0)!;
    }
    public BINARY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
    }
    public MASTER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
    }
    public TO_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TO_SYMBOL, 0);
    }
    public textLiteral(): TextLiteralContext | null {
        return this.getRuleContext(0, TextLiteralContext);
    }
    public BEFORE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BEFORE_SYMBOL, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(0, ExprContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_purgeOptions;
    }
}


export class ResetOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public masterOrBinaryLogsAndGtids(): MasterOrBinaryLogsAndGtidsContext | null {
        return this.getRuleContext(0, MasterOrBinaryLogsAndGtidsContext);
    }
    public sourceResetOptions(): SourceResetOptionsContext | null {
        return this.getRuleContext(0, SourceResetOptionsContext);
    }
    public replica(): ReplicaContext | null {
        return this.getRuleContext(0, ReplicaContext);
    }
    public ALL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public channel(): ChannelContext | null {
        return this.getRuleContext(0, ChannelContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_resetOption;
    }
}


export class MasterOrBinaryLogsAndGtidsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
    }
    public BINARY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
    }
    public LOGS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LOGS_SYMBOL, 0);
    }
    public AND_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.AND_SYMBOL, 0);
    }
    public GTIDS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.GTIDS_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_masterOrBinaryLogsAndGtids;
    }
}


export class SourceResetOptionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TO_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.TO_SYMBOL, 0)!;
    }
    public real_ulonglong_number(): Real_ulonglong_numberContext {
        return this.getRuleContext(0, Real_ulonglong_numberContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_sourceResetOptions;
    }
}


export class ReplicationLoadContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOAD_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.LOAD_SYMBOL, 0)!;
    }
    public FROM_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0)!;
    }
    public MASTER_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.MASTER_SYMBOL, 0)!;
    }
    public DATA_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DATA_SYMBOL, 0);
    }
    public TABLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(0, TableRefContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_replicationLoad;
    }
}


export class ChangeReplicationSourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
    }
    public REPLICATION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATION_SYMBOL, 0);
    }
    public SOURCE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_changeReplicationSource;
    }
}


export class ChangeSourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CHANGE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CHANGE_SYMBOL, 0)!;
    }
    public changeReplicationSource(): ChangeReplicationSourceContext {
        return this.getRuleContext(0, ChangeReplicationSourceContext)!;
    }
    public TO_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.TO_SYMBOL, 0)!;
    }
    public sourceDefinitions(): SourceDefinitionsContext {
        return this.getRuleContext(0, SourceDefinitionsContext)!;
    }
    public channel(): ChannelContext | null {
        return this.getRuleContext(0, ChannelContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_changeSource;
    }
}


export class SourceDefinitionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sourceDefinition(): SourceDefinitionContext[];
    public sourceDefinition(i: number): SourceDefinitionContext | null;
    public sourceDefinition(i?: number): SourceDefinitionContext[] | SourceDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SourceDefinitionContext);
        }

        return this.getRuleContext(i, SourceDefinitionContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_sourceDefinitions;
    }
}


export class SourceDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public changeReplicationSourceHost(): ChangeReplicationSourceHostContext | null {
        return this.getRuleContext(0, ChangeReplicationSourceHostContext);
    }
    public EQUAL_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public textStringNoLinebreak(): TextStringNoLinebreakContext | null {
        return this.getRuleContext(0, TextStringNoLinebreakContext);
    }
    public NETWORK_NAMESPACE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NETWORK_NAMESPACE_SYMBOL, 0);
    }
    public changeReplicationSourceBind(): ChangeReplicationSourceBindContext | null {
        return this.getRuleContext(0, ChangeReplicationSourceBindContext);
    }
    public changeReplicationSourceUser(): ChangeReplicationSourceUserContext | null {
        return this.getRuleContext(0, ChangeReplicationSourceUserContext);
    }
    public changeReplicationSourcePassword(): ChangeReplicationSourcePasswordContext | null {
        return this.getRuleContext(0, ChangeReplicationSourcePasswordContext);
    }
    public changeReplicationSourcePort(): ChangeReplicationSourcePortContext | null {
        return this.getRuleContext(0, ChangeReplicationSourcePortContext);
    }
    public ulong_number(): Ulong_numberContext | null {
        return this.getRuleContext(0, Ulong_numberContext);
    }
    public changeReplicationSourceConnectRetry(): ChangeReplicationSourceConnectRetryContext | null {
        return this.getRuleContext(0, ChangeReplicationSourceConnectRetryContext);
    }
    public changeReplicationSourceRetryCount(): ChangeReplicationSourceRetryCountContext | null {
        return this.getRuleContext(0, ChangeReplicationSourceRetryCountContext);
    }
    public changeReplicationSourceDelay(): ChangeReplicationSourceDelayContext | null {
        return this.getRuleContext(0, ChangeReplicationSourceDelayContext);
    }
    public changeReplicationSourceSSL(): ChangeReplicationSourceSSLContext | null {
        return this.getRuleContext(0, ChangeReplicationSourceSSLContext);
    }
    public changeReplicationSourceSSLCA(): ChangeReplicationSourceSSLCAContext | null {
        return this.getRuleContext(0, ChangeReplicationSourceSSLCAContext);
    }
    public changeReplicationSourceSSLCApath(): ChangeReplicationSourceSSLCApathContext | null {
        return this.getRuleContext(0, ChangeReplicationSourceSSLCApathContext);
    }
    public changeReplicationSourceTLSVersion(): ChangeReplicationSourceTLSVersionContext | null {
        return this.getRuleContext(0, ChangeReplicationSourceTLSVersionContext);
    }
    public changeReplicationSourceSSLCert(): ChangeReplicationSourceSSLCertContext | null {
        return this.getRuleContext(0, ChangeReplicationSourceSSLCertContext);
    }
    public changeReplicationSourceTLSCiphersuites(): ChangeReplicationSourceTLSCiphersuitesContext | null {
        return this.getRuleContext(0, ChangeReplicationSourceTLSCiphersuitesContext);
    }
    public sourceTlsCiphersuitesDef(): SourceTlsCiphersuitesDefContext | null {
        return this.getRuleContext(0, SourceTlsCiphersuitesDefContext);
    }
    public changeReplicationSourceSSLCipher(): ChangeReplicationSourceSSLCipherContext | null {
        return this.getRuleContext(0, ChangeReplicationSourceSSLCipherContext);
    }
    public changeReplicationSourceSSLKey(): ChangeReplicationSourceSSLKeyContext | null {
        return this.getRuleContext(0, ChangeReplicationSourceSSLKeyContext);
    }
    public changeReplicationSourceSSLVerifyServerCert(): ChangeReplicationSourceSSLVerifyServerCertContext | null {
        return this.getRuleContext(0, ChangeReplicationSourceSSLVerifyServerCertContext);
    }
    public changeReplicationSourceSSLCLR(): ChangeReplicationSourceSSLCLRContext | null {
        return this.getRuleContext(0, ChangeReplicationSourceSSLCLRContext);
    }
    public textLiteral(): TextLiteralContext | null {
        return this.getRuleContext(0, TextLiteralContext);
    }
    public changeReplicationSourceSSLCLRpath(): ChangeReplicationSourceSSLCLRpathContext | null {
        return this.getRuleContext(0, ChangeReplicationSourceSSLCLRpathContext);
    }
    public changeReplicationSourcePublicKey(): ChangeReplicationSourcePublicKeyContext | null {
        return this.getRuleContext(0, ChangeReplicationSourcePublicKeyContext);
    }
    public changeReplicationSourceGetSourcePublicKey(): ChangeReplicationSourceGetSourcePublicKeyContext | null {
        return this.getRuleContext(0, ChangeReplicationSourceGetSourcePublicKeyContext);
    }
    public changeReplicationSourceHeartbeatPeriod(): ChangeReplicationSourceHeartbeatPeriodContext | null {
        return this.getRuleContext(0, ChangeReplicationSourceHeartbeatPeriodContext);
    }
    public IGNORE_SERVER_IDS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.IGNORE_SERVER_IDS_SYMBOL, 0);
    }
    public serverIdList(): ServerIdListContext | null {
        return this.getRuleContext(0, ServerIdListContext);
    }
    public changeReplicationSourceCompressionAlgorithm(): ChangeReplicationSourceCompressionAlgorithmContext | null {
        return this.getRuleContext(0, ChangeReplicationSourceCompressionAlgorithmContext);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(0, TextStringLiteralContext);
    }
    public changeReplicationSourceZstdCompressionLevel(): ChangeReplicationSourceZstdCompressionLevelContext | null {
        return this.getRuleContext(0, ChangeReplicationSourceZstdCompressionLevelContext);
    }
    public changeReplicationSourceAutoPosition(): ChangeReplicationSourceAutoPositionContext | null {
        return this.getRuleContext(0, ChangeReplicationSourceAutoPositionContext);
    }
    public PRIVILEGE_CHECKS_USER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL, 0);
    }
    public privilegeCheckDef(): PrivilegeCheckDefContext | null {
        return this.getRuleContext(0, PrivilegeCheckDefContext);
    }
    public REQUIRE_ROW_FORMAT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REQUIRE_ROW_FORMAT_SYMBOL, 0);
    }
    public REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL, 0);
    }
    public tablePrimaryKeyCheckDef(): TablePrimaryKeyCheckDefContext | null {
        return this.getRuleContext(0, TablePrimaryKeyCheckDefContext);
    }
    public SOURCE_CONNECTION_AUTO_FAILOVER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_CONNECTION_AUTO_FAILOVER_SYMBOL, 0);
    }
    public real_ulong_number(): Real_ulong_numberContext | null {
        return this.getRuleContext(0, Real_ulong_numberContext);
    }
    public ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_SYMBOL, 0);
    }
    public assignGtidsToAnonymousTransactionsDefinition(): AssignGtidsToAnonymousTransactionsDefinitionContext | null {
        return this.getRuleContext(0, AssignGtidsToAnonymousTransactionsDefinitionContext);
    }
    public GTID_ONLY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.GTID_ONLY_SYMBOL, 0);
    }
    public sourceFileDef(): SourceFileDefContext | null {
        return this.getRuleContext(0, SourceFileDefContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_sourceDefinition;
    }
}


export class ChangeReplicationSourceAutoPositionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_AUTO_POSITION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_AUTO_POSITION_SYMBOL, 0);
    }
    public SOURCE_AUTO_POSITION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_AUTO_POSITION_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceAutoPosition;
    }
}


export class ChangeReplicationSourceHostContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_HOST_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_HOST_SYMBOL, 0);
    }
    public SOURCE_HOST_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_HOST_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceHost;
    }
}


export class ChangeReplicationSourceBindContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_BIND_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_BIND_SYMBOL, 0);
    }
    public SOURCE_BIND_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_BIND_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceBind;
    }
}


export class ChangeReplicationSourceUserContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_USER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_USER_SYMBOL, 0);
    }
    public SOURCE_USER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_USER_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceUser;
    }
}


export class ChangeReplicationSourcePasswordContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_PASSWORD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_PASSWORD_SYMBOL, 0);
    }
    public SOURCE_PASSWORD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_PASSWORD_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourcePassword;
    }
}


export class ChangeReplicationSourcePortContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_PORT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_PORT_SYMBOL, 0);
    }
    public SOURCE_PORT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_PORT_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourcePort;
    }
}


export class ChangeReplicationSourceConnectRetryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_CONNECT_RETRY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0);
    }
    public SOURCE_CONNECT_RETRY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_CONNECT_RETRY_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceConnectRetry;
    }
}


export class ChangeReplicationSourceRetryCountContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_RETRY_COUNT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_RETRY_COUNT_SYMBOL, 0);
    }
    public SOURCE_RETRY_COUNT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_RETRY_COUNT_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceRetryCount;
    }
}


export class ChangeReplicationSourceDelayContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_DELAY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_DELAY_SYMBOL, 0);
    }
    public SOURCE_DELAY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_DELAY_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceDelay;
    }
}


export class ChangeReplicationSourceSSLContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_SSL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_SYMBOL, 0);
    }
    public SOURCE_SSL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceSSL;
    }
}


export class ChangeReplicationSourceSSLCAContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_SSL_CA_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CA_SYMBOL, 0);
    }
    public SOURCE_SSL_CA_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_CA_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceSSLCA;
    }
}


export class ChangeReplicationSourceSSLCApathContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_SSL_CAPATH_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CAPATH_SYMBOL, 0);
    }
    public SOURCE_SSL_CAPATH_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_CAPATH_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceSSLCApath;
    }
}


export class ChangeReplicationSourceSSLCipherContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_SSL_CIPHER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CIPHER_SYMBOL, 0);
    }
    public SOURCE_SSL_CIPHER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_CIPHER_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceSSLCipher;
    }
}


export class ChangeReplicationSourceSSLCLRContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_SSL_CRL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CRL_SYMBOL, 0);
    }
    public SOURCE_SSL_CRL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_CRL_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceSSLCLR;
    }
}


export class ChangeReplicationSourceSSLCLRpathContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_SSL_CRLPATH_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0);
    }
    public SOURCE_SSL_CRLPATH_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_CRLPATH_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceSSLCLRpath;
    }
}


export class ChangeReplicationSourceSSLKeyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_SSL_KEY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_KEY_SYMBOL, 0);
    }
    public SOURCE_SSL_KEY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_KEY_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceSSLKey;
    }
}


export class ChangeReplicationSourceSSLVerifyServerCertContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL, 0);
    }
    public SOURCE_SSL_VERIFY_SERVER_CERT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_VERIFY_SERVER_CERT_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceSSLVerifyServerCert;
    }
}


export class ChangeReplicationSourceTLSVersionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_TLS_VERSION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_TLS_VERSION_SYMBOL, 0);
    }
    public SOURCE_TLS_VERSION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_TLS_VERSION_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceTLSVersion;
    }
}


export class ChangeReplicationSourceTLSCiphersuitesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_TLS_CIPHERSUITES_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL, 0);
    }
    public SOURCE_TLS_CIPHERSUITES_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_TLS_CIPHERSUITES_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceTLSCiphersuites;
    }
}


export class ChangeReplicationSourceSSLCertContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_SSL_CERT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CERT_SYMBOL, 0);
    }
    public SOURCE_SSL_CERT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_CERT_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceSSLCert;
    }
}


export class ChangeReplicationSourcePublicKeyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_PUBLIC_KEY_PATH_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0);
    }
    public SOURCE_PUBLIC_KEY_PATH_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_PUBLIC_KEY_PATH_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourcePublicKey;
    }
}


export class ChangeReplicationSourceGetSourcePublicKeyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GET_MASTER_PUBLIC_KEY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL, 0);
    }
    public GET_SOURCE_PUBLIC_KEY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.GET_SOURCE_PUBLIC_KEY_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceGetSourcePublicKey;
    }
}


export class ChangeReplicationSourceHeartbeatPeriodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_HEARTBEAT_PERIOD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0);
    }
    public SOURCE_HEARTBEAT_PERIOD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_HEARTBEAT_PERIOD_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceHeartbeatPeriod;
    }
}


export class ChangeReplicationSourceCompressionAlgorithmContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_COMPRESSION_ALGORITHM_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL, 0);
    }
    public SOURCE_COMPRESSION_ALGORITHM_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_COMPRESSION_ALGORITHM_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceCompressionAlgorithm;
    }
}


export class ChangeReplicationSourceZstdCompressionLevelContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL, 0);
    }
    public SOURCE_ZSTD_COMPRESSION_LEVEL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_ZSTD_COMPRESSION_LEVEL_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceZstdCompressionLevel;
    }
}


export class PrivilegeCheckDefContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public userIdentifierOrText(): UserIdentifierOrTextContext | null {
        return this.getRuleContext(0, UserIdentifierOrTextContext);
    }
    public NULL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NULL_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_privilegeCheckDef;
    }
}


export class TablePrimaryKeyCheckDefContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STREAM_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.STREAM_SYMBOL, 0);
    }
    public ON_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, 0);
    }
    public OFF_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OFF_SYMBOL, 0);
    }
    public GENERATE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.GENERATE_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_tablePrimaryKeyCheckDef;
    }
}


export class AssignGtidsToAnonymousTransactionsDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OFF_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OFF_SYMBOL, 0);
    }
    public LOCAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(0, TextStringLiteralContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_assignGtidsToAnonymousTransactionsDefinition;
    }
}


export class SourceTlsCiphersuitesDefContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textStringNoLinebreak(): TextStringNoLinebreakContext | null {
        return this.getRuleContext(0, TextStringNoLinebreakContext);
    }
    public NULL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NULL_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_sourceTlsCiphersuitesDef;
    }
}


export class SourceFileDefContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sourceLogFile(): SourceLogFileContext | null {
        return this.getRuleContext(0, SourceLogFileContext);
    }
    public EQUAL_OPERATOR(): antlr.TerminalNode {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0)!;
    }
    public textStringNoLinebreak(): TextStringNoLinebreakContext | null {
        return this.getRuleContext(0, TextStringNoLinebreakContext);
    }
    public sourceLogPos(): SourceLogPosContext | null {
        return this.getRuleContext(0, SourceLogPosContext);
    }
    public ulonglongNumber(): UlonglongNumberContext | null {
        return this.getRuleContext(0, UlonglongNumberContext);
    }
    public RELAY_LOG_FILE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RELAY_LOG_FILE_SYMBOL, 0);
    }
    public RELAY_LOG_POS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RELAY_LOG_POS_SYMBOL, 0);
    }
    public ulong_number(): Ulong_numberContext | null {
        return this.getRuleContext(0, Ulong_numberContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_sourceFileDef;
    }
}


export class SourceLogFileContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_LOG_FILE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_LOG_FILE_SYMBOL, 0);
    }
    public SOURCE_LOG_FILE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_LOG_FILE_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_sourceLogFile;
    }
}


export class SourceLogPosContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_LOG_POS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_LOG_POS_SYMBOL, 0);
    }
    public SOURCE_LOG_POS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_LOG_POS_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_sourceLogPos;
    }
}


export class ServerIdListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)!;
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)!;
    }
    public ulong_number(): Ulong_numberContext[];
    public ulong_number(i: number): Ulong_numberContext | null;
    public ulong_number(i?: number): Ulong_numberContext[] | Ulong_numberContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Ulong_numberContext);
        }

        return this.getRuleContext(i, Ulong_numberContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_serverIdList;
    }
}


export class ChangeReplicationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CHANGE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CHANGE_SYMBOL, 0)!;
    }
    public REPLICATION_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.REPLICATION_SYMBOL, 0)!;
    }
    public FILTER_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.FILTER_SYMBOL, 0)!;
    }
    public filterDefinition(): FilterDefinitionContext[];
    public filterDefinition(i: number): FilterDefinitionContext | null;
    public filterDefinition(i?: number): FilterDefinitionContext[] | FilterDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FilterDefinitionContext);
        }

        return this.getRuleContext(i, FilterDefinitionContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public channel(): ChannelContext | null {
        return this.getRuleContext(0, ChannelContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_changeReplication;
    }
}


export class FilterDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REPLICATE_DO_DB_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_DO_DB_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): antlr.TerminalNode {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0)!;
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)!;
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)!;
    }
    public filterDbList(): FilterDbListContext | null {
        return this.getRuleContext(0, FilterDbListContext);
    }
    public REPLICATE_IGNORE_DB_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0);
    }
    public REPLICATE_DO_TABLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_DO_TABLE_SYMBOL, 0);
    }
    public filterTableList(): FilterTableListContext | null {
        return this.getRuleContext(0, FilterTableListContext);
    }
    public REPLICATE_IGNORE_TABLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0);
    }
    public REPLICATE_WILD_DO_TABLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0);
    }
    public filterStringList(): FilterStringListContext | null {
        return this.getRuleContext(0, FilterStringListContext);
    }
    public REPLICATE_WILD_IGNORE_TABLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0);
    }
    public REPLICATE_REWRITE_DB_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0);
    }
    public filterDbPairList(): FilterDbPairListContext | null {
        return this.getRuleContext(0, FilterDbPairListContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_filterDefinition;
    }
}


export class FilterDbListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public schemaRef(): SchemaRefContext[];
    public schemaRef(i: number): SchemaRefContext | null;
    public schemaRef(i?: number): SchemaRefContext[] | SchemaRefContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SchemaRefContext);
        }

        return this.getRuleContext(i, SchemaRefContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_filterDbList;
    }
}


export class FilterTableListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public filterTableRef(): FilterTableRefContext[];
    public filterTableRef(i: number): FilterTableRefContext | null;
    public filterTableRef(i?: number): FilterTableRefContext[] | FilterTableRefContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FilterTableRefContext);
        }

        return this.getRuleContext(i, FilterTableRefContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_filterTableList;
    }
}


export class FilterStringListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public filterWildDbTableString(): FilterWildDbTableStringContext[];
    public filterWildDbTableString(i: number): FilterWildDbTableStringContext | null;
    public filterWildDbTableString(i?: number): FilterWildDbTableStringContext[] | FilterWildDbTableStringContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FilterWildDbTableStringContext);
        }

        return this.getRuleContext(i, FilterWildDbTableStringContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_filterStringList;
    }
}


export class FilterWildDbTableStringContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textStringNoLinebreak(): TextStringNoLinebreakContext {
        return this.getRuleContext(0, TextStringNoLinebreakContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_filterWildDbTableString;
    }
}


export class FilterDbPairListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public schemaIdentifierPair(): SchemaIdentifierPairContext[];
    public schemaIdentifierPair(i: number): SchemaIdentifierPairContext | null;
    public schemaIdentifierPair(i?: number): SchemaIdentifierPairContext[] | SchemaIdentifierPairContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SchemaIdentifierPairContext);
        }

        return this.getRuleContext(i, SchemaIdentifierPairContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_filterDbPairList;
    }
}


export class StartReplicaStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public START_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.START_SYMBOL, 0)!;
    }
    public replica(): ReplicaContext {
        return this.getRuleContext(0, ReplicaContext)!;
    }
    public replicaThreadOptions(): ReplicaThreadOptionsContext | null {
        return this.getRuleContext(0, ReplicaThreadOptionsContext);
    }
    public UNTIL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.UNTIL_SYMBOL, 0);
    }
    public replicaUntil(): ReplicaUntilContext | null {
        return this.getRuleContext(0, ReplicaUntilContext);
    }
    public userOption(): UserOptionContext | null {
        return this.getRuleContext(0, UserOptionContext);
    }
    public passwordOption(): PasswordOptionContext | null {
        return this.getRuleContext(0, PasswordOptionContext);
    }
    public defaultAuthOption(): DefaultAuthOptionContext | null {
        return this.getRuleContext(0, DefaultAuthOptionContext);
    }
    public pluginDirOption(): PluginDirOptionContext | null {
        return this.getRuleContext(0, PluginDirOptionContext);
    }
    public channel(): ChannelContext | null {
        return this.getRuleContext(0, ChannelContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_startReplicaStatement;
    }
}


export class StopReplicaStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STOP_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.STOP_SYMBOL, 0)!;
    }
    public replica(): ReplicaContext {
        return this.getRuleContext(0, ReplicaContext)!;
    }
    public replicaThreadOptions(): ReplicaThreadOptionsContext | null {
        return this.getRuleContext(0, ReplicaThreadOptionsContext);
    }
    public channel(): ChannelContext | null {
        return this.getRuleContext(0, ChannelContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_stopReplicaStatement;
    }
}


export class ReplicaUntilContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sourceFileDef(): SourceFileDefContext[];
    public sourceFileDef(i: number): SourceFileDefContext | null;
    public sourceFileDef(i?: number): SourceFileDefContext[] | SourceFileDefContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SourceFileDefContext);
        }

        return this.getRuleContext(i, SourceFileDefContext);
    }
    public EQUAL_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public textString(): TextStringContext | null {
        return this.getRuleContext(0, TextStringContext);
    }
    public SQL_AFTER_MTS_GAPS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0);
    }
    public SQL_BEFORE_GTIDS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0);
    }
    public SQL_AFTER_GTIDS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SQL_AFTER_GTIDS_SYMBOL, 0);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_replicaUntil;
    }
}


export class UserOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public USER_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.USER_SYMBOL, 0)!;
    }
    public EQUAL_OPERATOR(): antlr.TerminalNode {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0)!;
    }
    public textString(): TextStringContext {
        return this.getRuleContext(0, TextStringContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_userOption;
    }
}


export class PasswordOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PASSWORD_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0)!;
    }
    public EQUAL_OPERATOR(): antlr.TerminalNode {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0)!;
    }
    public textString(): TextStringContext {
        return this.getRuleContext(0, TextStringContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_passwordOption;
    }
}


export class DefaultAuthOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DEFAULT_AUTH_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.DEFAULT_AUTH_SYMBOL, 0)!;
    }
    public EQUAL_OPERATOR(): antlr.TerminalNode {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0)!;
    }
    public textString(): TextStringContext {
        return this.getRuleContext(0, TextStringContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_defaultAuthOption;
    }
}


export class PluginDirOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PLUGIN_DIR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.PLUGIN_DIR_SYMBOL, 0)!;
    }
    public EQUAL_OPERATOR(): antlr.TerminalNode {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0)!;
    }
    public textString(): TextStringContext {
        return this.getRuleContext(0, TextStringContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_pluginDirOption;
    }
}


export class ReplicaThreadOptionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public replicaThreadOption(): ReplicaThreadOptionContext[];
    public replicaThreadOption(i: number): ReplicaThreadOptionContext | null;
    public replicaThreadOption(i?: number): ReplicaThreadOptionContext[] | ReplicaThreadOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ReplicaThreadOptionContext);
        }

        return this.getRuleContext(i, ReplicaThreadOptionContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_replicaThreadOptions;
    }
}


export class ReplicaThreadOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SQL_THREAD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SQL_THREAD_SYMBOL, 0);
    }
    public RELAY_THREAD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RELAY_THREAD_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_replicaThreadOption;
    }
}


export class GroupReplicationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GROUP_REPLICATION_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.GROUP_REPLICATION_SYMBOL, 0)!;
    }
    public START_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.START_SYMBOL, 0);
    }
    public STOP_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.STOP_SYMBOL, 0);
    }
    public groupReplicationStartOptions(): GroupReplicationStartOptionsContext | null {
        return this.getRuleContext(0, GroupReplicationStartOptionsContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_groupReplication;
    }
}


export class GroupReplicationStartOptionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public groupReplicationStartOption(): GroupReplicationStartOptionContext[];
    public groupReplicationStartOption(i: number): GroupReplicationStartOptionContext | null;
    public groupReplicationStartOption(i?: number): GroupReplicationStartOptionContext[] | GroupReplicationStartOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(GroupReplicationStartOptionContext);
        }

        return this.getRuleContext(i, GroupReplicationStartOptionContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_groupReplicationStartOptions;
    }
}


export class GroupReplicationStartOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public groupReplicationUser(): GroupReplicationUserContext | null {
        return this.getRuleContext(0, GroupReplicationUserContext);
    }
    public groupReplicationPassword(): GroupReplicationPasswordContext | null {
        return this.getRuleContext(0, GroupReplicationPasswordContext);
    }
    public groupReplicationPluginAuth(): GroupReplicationPluginAuthContext | null {
        return this.getRuleContext(0, GroupReplicationPluginAuthContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_groupReplicationStartOption;
    }
}


export class GroupReplicationUserContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public USER_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.USER_SYMBOL, 0)!;
    }
    public EQUAL_OPERATOR(): antlr.TerminalNode {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0)!;
    }
    public textStringNoLinebreak(): TextStringNoLinebreakContext {
        return this.getRuleContext(0, TextStringNoLinebreakContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_groupReplicationUser;
    }
}


export class GroupReplicationPasswordContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PASSWORD_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0)!;
    }
    public EQUAL_OPERATOR(): antlr.TerminalNode {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0)!;
    }
    public textStringNoLinebreak(): TextStringNoLinebreakContext {
        return this.getRuleContext(0, TextStringNoLinebreakContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_groupReplicationPassword;
    }
}


export class GroupReplicationPluginAuthContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DEFAULT_AUTH_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.DEFAULT_AUTH_SYMBOL, 0)!;
    }
    public EQUAL_OPERATOR(): antlr.TerminalNode {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0)!;
    }
    public textStringNoLinebreak(): TextStringNoLinebreakContext {
        return this.getRuleContext(0, TextStringNoLinebreakContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_groupReplicationPluginAuth;
    }
}


export class ReplicaContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SLAVE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SLAVE_SYMBOL, 0);
    }
    public REPLICA_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REPLICA_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_replica;
    }
}


export class PreparedStatementContext extends antlr.ParserRuleContext {
    public _type_?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public FROM_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public PREPARE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PREPARE_SYMBOL, 0);
    }
    public textLiteral(): TextLiteralContext | null {
        return this.getRuleContext(0, TextLiteralContext);
    }
    public userVariable(): UserVariableContext | null {
        return this.getRuleContext(0, UserVariableContext);
    }
    public executeStatement(): ExecuteStatementContext | null {
        return this.getRuleContext(0, ExecuteStatementContext);
    }
    public DEALLOCATE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DEALLOCATE_SYMBOL, 0);
    }
    public DROP_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DROP_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_preparedStatement;
    }
}


export class ExecuteStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EXECUTE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.EXECUTE_SYMBOL, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public USING_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.USING_SYMBOL, 0);
    }
    public executeVarList(): ExecuteVarListContext | null {
        return this.getRuleContext(0, ExecuteVarListContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_executeStatement;
    }
}


export class ExecuteVarListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public userVariable(): UserVariableContext[];
    public userVariable(i: number): UserVariableContext | null;
    public userVariable(i?: number): UserVariableContext[] | UserVariableContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UserVariableContext);
        }

        return this.getRuleContext(i, UserVariableContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_executeVarList;
    }
}


export class CloneStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CLONE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CLONE_SYMBOL, 0)!;
    }
    public LOCAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
    }
    public DATA_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DATA_SYMBOL, 0);
    }
    public DIRECTORY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DIRECTORY_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(0, TextStringLiteralContext);
    }
    public REMOTE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REMOTE_SYMBOL, 0);
    }
    public INSTANCE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INSTANCE_SYMBOL, 0);
    }
    public FROM_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public user(): UserContext | null {
        return this.getRuleContext(0, UserContext);
    }
    public COLON_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COLON_SYMBOL, 0);
    }
    public ulong_number(): Ulong_numberContext | null {
        return this.getRuleContext(0, Ulong_numberContext);
    }
    public IDENTIFIED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
    }
    public BY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BY_SYMBOL, 0);
    }
    public equal(): EqualContext | null {
        return this.getRuleContext(0, EqualContext);
    }
    public FOR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public REPLICATION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATION_SYMBOL, 0);
    }
    public dataDirSSL(): DataDirSSLContext | null {
        return this.getRuleContext(0, DataDirSSLContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_cloneStatement;
    }
}


export class DataDirSSLContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ssl(): SslContext | null {
        return this.getRuleContext(0, SslContext);
    }
    public DATA_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DATA_SYMBOL, 0);
    }
    public DIRECTORY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DIRECTORY_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(0, TextStringLiteralContext);
    }
    public equal(): EqualContext | null {
        return this.getRuleContext(0, EqualContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_dataDirSSL;
    }
}


export class SslContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REQUIRE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.REQUIRE_SYMBOL, 0)!;
    }
    public SSL_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SSL_SYMBOL, 0)!;
    }
    public NO_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NO_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_ssl;
    }
}


export class AccountManagementStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alterUserStatement(): AlterUserStatementContext | null {
        return this.getRuleContext(0, AlterUserStatementContext);
    }
    public createUserStatement(): CreateUserStatementContext | null {
        return this.getRuleContext(0, CreateUserStatementContext);
    }
    public dropUserStatement(): DropUserStatementContext | null {
        return this.getRuleContext(0, DropUserStatementContext);
    }
    public grantStatement(): GrantStatementContext | null {
        return this.getRuleContext(0, GrantStatementContext);
    }
    public renameUserStatement(): RenameUserStatementContext | null {
        return this.getRuleContext(0, RenameUserStatementContext);
    }
    public revokeStatement(): RevokeStatementContext | null {
        return this.getRuleContext(0, RevokeStatementContext);
    }
    public setRoleStatement(): SetRoleStatementContext | null {
        return this.getRuleContext(0, SetRoleStatementContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_accountManagementStatement;
    }
}


export class AlterUserStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.ALTER_SYMBOL, 0)!;
    }
    public USER_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.USER_SYMBOL, 0)!;
    }
    public createUserTail(): CreateUserTailContext | null {
        return this.getRuleContext(0, CreateUserTailContext);
    }
    public userFunction(): UserFunctionContext | null {
        return this.getRuleContext(0, UserFunctionContext);
    }
    public user(): UserContext | null {
        return this.getRuleContext(0, UserContext);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public createUserList(): CreateUserListContext | null {
        return this.getRuleContext(0, CreateUserListContext);
    }
    public alterUserList(): AlterUserListContext | null {
        return this.getRuleContext(0, AlterUserListContext);
    }
    public DISCARD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DISCARD_SYMBOL, 0);
    }
    public OLD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OLD_SYMBOL, 0);
    }
    public PASSWORD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
    }
    public DEFAULT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public ROLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
    }
    public identifiedByRandomPassword(): IdentifiedByRandomPasswordContext | null {
        return this.getRuleContext(0, IdentifiedByRandomPasswordContext);
    }
    public identifiedByPassword(): IdentifiedByPasswordContext | null {
        return this.getRuleContext(0, IdentifiedByPasswordContext);
    }
    public ALL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public NONE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NONE_SYMBOL, 0);
    }
    public roleList(): RoleListContext | null {
        return this.getRuleContext(0, RoleListContext);
    }
    public replacePassword(): ReplacePasswordContext | null {
        return this.getRuleContext(0, ReplacePasswordContext);
    }
    public retainCurrentPassword(): RetainCurrentPasswordContext | null {
        return this.getRuleContext(0, RetainCurrentPasswordContext);
    }
    public userRegistration(): UserRegistrationContext | null {
        return this.getRuleContext(0, UserRegistrationContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_alterUserStatement;
    }
}


export class AlterUserListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alterUser(): AlterUserContext[];
    public alterUser(i: number): AlterUserContext | null;
    public alterUser(i?: number): AlterUserContext[] | AlterUserContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AlterUserContext);
        }

        return this.getRuleContext(i, AlterUserContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_alterUserList;
    }
}


export class AlterUserContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public oldAlterUser(): OldAlterUserContext | null {
        return this.getRuleContext(0, OldAlterUserContext);
    }
    public user(): UserContext | null {
        return this.getRuleContext(0, UserContext);
    }
    public identifiedByPassword(): IdentifiedByPasswordContext | null {
        return this.getRuleContext(0, IdentifiedByPasswordContext);
    }
    public identifiedByRandomPassword(): IdentifiedByRandomPasswordContext | null {
        return this.getRuleContext(0, IdentifiedByRandomPasswordContext);
    }
    public identifiedWithPlugin(): IdentifiedWithPluginContext | null {
        return this.getRuleContext(0, IdentifiedWithPluginContext);
    }
    public identifiedWithPluginAsAuth(): IdentifiedWithPluginAsAuthContext | null {
        return this.getRuleContext(0, IdentifiedWithPluginAsAuthContext);
    }
    public identifiedWithPluginByPassword(): IdentifiedWithPluginByPasswordContext | null {
        return this.getRuleContext(0, IdentifiedWithPluginByPasswordContext);
    }
    public identifiedWithPluginByRandomPassword(): IdentifiedWithPluginByRandomPasswordContext | null {
        return this.getRuleContext(0, IdentifiedWithPluginByRandomPasswordContext);
    }
    public ADD_SYMBOL(): antlr.TerminalNode[];
    public ADD_SYMBOL(i: number): antlr.TerminalNode | null;
    public ADD_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.ADD_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.ADD_SYMBOL, i);
    	}
    }
    public factor(): FactorContext[];
    public factor(i: number): FactorContext | null;
    public factor(i?: number): FactorContext[] | FactorContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FactorContext);
        }

        return this.getRuleContext(i, FactorContext);
    }
    public identification(): IdentificationContext[];
    public identification(i: number): IdentificationContext | null;
    public identification(i?: number): IdentificationContext[] | IdentificationContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentificationContext);
        }

        return this.getRuleContext(i, IdentificationContext);
    }
    public MODIFY_SYMBOL(): antlr.TerminalNode[];
    public MODIFY_SYMBOL(i: number): antlr.TerminalNode | null;
    public MODIFY_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.MODIFY_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.MODIFY_SYMBOL, i);
    	}
    }
    public DROP_SYMBOL(): antlr.TerminalNode[];
    public DROP_SYMBOL(i: number): antlr.TerminalNode | null;
    public DROP_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.DROP_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.DROP_SYMBOL, i);
    	}
    }
    public REPLACE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(0, TextStringLiteralContext);
    }
    public retainCurrentPassword(): RetainCurrentPasswordContext | null {
        return this.getRuleContext(0, RetainCurrentPasswordContext);
    }
    public discardOldPassword(): DiscardOldPasswordContext | null {
        return this.getRuleContext(0, DiscardOldPasswordContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_alterUser;
    }
}


export class OldAlterUserContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public user(): UserContext {
        return this.getRuleContext(0, UserContext)!;
    }
    public IDENTIFIED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
    }
    public BY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BY_SYMBOL, 0);
    }
    public textString(): TextStringContext[];
    public textString(i: number): TextStringContext | null;
    public textString(i?: number): TextStringContext[] | TextStringContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TextStringContext);
        }

        return this.getRuleContext(i, TextStringContext);
    }
    public REPLACE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
    }
    public RANDOM_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RANDOM_SYMBOL, 0);
    }
    public PASSWORD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
    }
    public retainCurrentPassword(): RetainCurrentPasswordContext | null {
        return this.getRuleContext(0, RetainCurrentPasswordContext);
    }
    public WITH_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(0, TextOrIdentifierContext);
    }
    public AS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.AS_SYMBOL, 0);
    }
    public textStringHash(): TextStringHashContext | null {
        return this.getRuleContext(0, TextStringHashContext);
    }
    public discardOldPassword(): DiscardOldPasswordContext | null {
        return this.getRuleContext(0, DiscardOldPasswordContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_oldAlterUser;
    }
}


export class UserFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public USER_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.USER_SYMBOL, 0)!;
    }
    public parentheses(): ParenthesesContext {
        return this.getRuleContext(0, ParenthesesContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_userFunction;
    }
}


export class CreateUserStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0)!;
    }
    public USER_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.USER_SYMBOL, 0)!;
    }
    public createUserList(): CreateUserListContext {
        return this.getRuleContext(0, CreateUserListContext)!;
    }
    public createUserTail(): CreateUserTailContext {
        return this.getRuleContext(0, CreateUserTailContext)!;
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public defaultRoleClause(): DefaultRoleClauseContext | null {
        return this.getRuleContext(0, DefaultRoleClauseContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_createUserStatement;
    }
}


export class CreateUserTailContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public requireClause(): RequireClauseContext | null {
        return this.getRuleContext(0, RequireClauseContext);
    }
    public connectOptions(): ConnectOptionsContext | null {
        return this.getRuleContext(0, ConnectOptionsContext);
    }
    public accountLockPasswordExpireOptions(): AccountLockPasswordExpireOptionsContext[];
    public accountLockPasswordExpireOptions(i: number): AccountLockPasswordExpireOptionsContext | null;
    public accountLockPasswordExpireOptions(i?: number): AccountLockPasswordExpireOptionsContext[] | AccountLockPasswordExpireOptionsContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AccountLockPasswordExpireOptionsContext);
        }

        return this.getRuleContext(i, AccountLockPasswordExpireOptionsContext);
    }
    public userAttributes(): UserAttributesContext | null {
        return this.getRuleContext(0, UserAttributesContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_createUserTail;
    }
}


export class UserAttributesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ATTRIBUTE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ATTRIBUTE_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext {
        return this.getRuleContext(0, TextStringLiteralContext)!;
    }
    public COMMENT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_userAttributes;
    }
}


export class DefaultRoleClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DEFAULT_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0)!;
    }
    public ROLE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.ROLE_SYMBOL, 0)!;
    }
    public roleList(): RoleListContext {
        return this.getRuleContext(0, RoleListContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_defaultRoleClause;
    }
}


export class RequireClauseContext extends antlr.ParserRuleContext {
    public _option?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REQUIRE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.REQUIRE_SYMBOL, 0)!;
    }
    public requireList(): RequireListContext | null {
        return this.getRuleContext(0, RequireListContext);
    }
    public SSL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SSL_SYMBOL, 0);
    }
    public X509_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.X509_SYMBOL, 0);
    }
    public NONE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NONE_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_requireClause;
    }
}


export class ConnectOptionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0)!;
    }
    public MAX_QUERIES_PER_HOUR_SYMBOL(): antlr.TerminalNode[];
    public MAX_QUERIES_PER_HOUR_SYMBOL(i: number): antlr.TerminalNode | null;
    public MAX_QUERIES_PER_HOUR_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, i);
    	}
    }
    public ulong_number(): Ulong_numberContext[];
    public ulong_number(i: number): Ulong_numberContext | null;
    public ulong_number(i?: number): Ulong_numberContext[] | Ulong_numberContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Ulong_numberContext);
        }

        return this.getRuleContext(i, Ulong_numberContext);
    }
    public MAX_UPDATES_PER_HOUR_SYMBOL(): antlr.TerminalNode[];
    public MAX_UPDATES_PER_HOUR_SYMBOL(i: number): antlr.TerminalNode | null;
    public MAX_UPDATES_PER_HOUR_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, i);
    	}
    }
    public MAX_CONNECTIONS_PER_HOUR_SYMBOL(): antlr.TerminalNode[];
    public MAX_CONNECTIONS_PER_HOUR_SYMBOL(i: number): antlr.TerminalNode | null;
    public MAX_CONNECTIONS_PER_HOUR_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, i);
    	}
    }
    public MAX_USER_CONNECTIONS_SYMBOL(): antlr.TerminalNode[];
    public MAX_USER_CONNECTIONS_SYMBOL(i: number): antlr.TerminalNode | null;
    public MAX_USER_CONNECTIONS_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_connectOptions;
    }
}


export class AccountLockPasswordExpireOptionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ACCOUNT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ACCOUNT_SYMBOL, 0);
    }
    public LOCK_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LOCK_SYMBOL, 0);
    }
    public UNLOCK_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.UNLOCK_SYMBOL, 0);
    }
    public PASSWORD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
    }
    public EXPIRE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EXPIRE_SYMBOL, 0);
    }
    public HISTORY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.HISTORY_SYMBOL, 0);
    }
    public REUSE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REUSE_SYMBOL, 0);
    }
    public INTERVAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INTERVAL_SYMBOL, 0);
    }
    public REQUIRE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REQUIRE_SYMBOL, 0);
    }
    public CURRENT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CURRENT_SYMBOL, 0);
    }
    public real_ulong_number(): Real_ulong_numberContext | null {
        return this.getRuleContext(0, Real_ulong_numberContext);
    }
    public DEFAULT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public DAY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DAY_SYMBOL, 0);
    }
    public NEVER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NEVER_SYMBOL, 0);
    }
    public OPTIONAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OPTIONAL_SYMBOL, 0);
    }
    public FAILED_LOGIN_ATTEMPTS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FAILED_LOGIN_ATTEMPTS_SYMBOL, 0);
    }
    public PASSWORD_LOCK_TIME_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_LOCK_TIME_SYMBOL, 0);
    }
    public UNBOUNDED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.UNBOUNDED_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_accountLockPasswordExpireOptions;
    }
}


export class UserAttributeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ATTRIBUTE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ATTRIBUTE_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(0, TextStringLiteralContext);
    }
    public COMMENT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_userAttribute;
    }
}


export class DropUserStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.DROP_SYMBOL, 0)!;
    }
    public USER_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.USER_SYMBOL, 0)!;
    }
    public userList(): UserListContext {
        return this.getRuleContext(0, UserListContext)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_dropUserStatement;
    }
}


export class GrantStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GRANT_SYMBOL(): antlr.TerminalNode[];
    public GRANT_SYMBOL(i: number): antlr.TerminalNode | null;
    public GRANT_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.GRANT_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.GRANT_SYMBOL, i);
    	}
    }
    public roleOrPrivilegesList(): RoleOrPrivilegesListContext | null {
        return this.getRuleContext(0, RoleOrPrivilegesListContext);
    }
    public TO_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TO_SYMBOL, 0);
    }
    public userList(): UserListContext | null {
        return this.getRuleContext(0, UserListContext);
    }
    public ON_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, 0);
    }
    public grantIdentifier(): GrantIdentifierContext | null {
        return this.getRuleContext(0, GrantIdentifierContext);
    }
    public grantTargetList(): GrantTargetListContext | null {
        return this.getRuleContext(0, GrantTargetListContext);
    }
    public PROXY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PROXY_SYMBOL, 0);
    }
    public user(): UserContext | null {
        return this.getRuleContext(0, UserContext);
    }
    public ALL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public WITH_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public ADMIN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ADMIN_SYMBOL, 0);
    }
    public OPTION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OPTION_SYMBOL, 0);
    }
    public aclType(): AclTypeContext | null {
        return this.getRuleContext(0, AclTypeContext);
    }
    public versionedRequireClause(): VersionedRequireClauseContext | null {
        return this.getRuleContext(0, VersionedRequireClauseContext);
    }
    public grantOptions(): GrantOptionsContext | null {
        return this.getRuleContext(0, GrantOptionsContext);
    }
    public grantAs(): GrantAsContext | null {
        return this.getRuleContext(0, GrantAsContext);
    }
    public PRIVILEGES_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PRIVILEGES_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_grantStatement;
    }
}


export class GrantTargetListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public createUserList(): CreateUserListContext | null {
        return this.getRuleContext(0, CreateUserListContext);
    }
    public userList(): UserListContext | null {
        return this.getRuleContext(0, UserListContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_grantTargetList;
    }
}


export class GrantOptionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0)!;
    }
    public grantOption(): GrantOptionContext {
        return this.getRuleContext(0, GrantOptionContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_grantOptions;
    }
}


export class ExceptRoleListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EXCEPT_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.EXCEPT_SYMBOL, 0)!;
    }
    public roleList(): RoleListContext {
        return this.getRuleContext(0, RoleListContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_exceptRoleList;
    }
}


export class WithRolesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0)!;
    }
    public ROLE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.ROLE_SYMBOL, 0)!;
    }
    public roleList(): RoleListContext | null {
        return this.getRuleContext(0, RoleListContext);
    }
    public ALL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public NONE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NONE_SYMBOL, 0);
    }
    public DEFAULT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public exceptRoleList(): ExceptRoleListContext | null {
        return this.getRuleContext(0, ExceptRoleListContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_withRoles;
    }
}


export class GrantAsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AS_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.AS_SYMBOL, 0)!;
    }
    public USER_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.USER_SYMBOL, 0)!;
    }
    public withRoles(): WithRolesContext | null {
        return this.getRuleContext(0, WithRolesContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_grantAs;
    }
}


export class VersionedRequireClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public requireClause(): RequireClauseContext {
        return this.getRuleContext(0, RequireClauseContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_versionedRequireClause;
    }
}


export class RenameUserStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RENAME_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.RENAME_SYMBOL, 0)!;
    }
    public USER_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.USER_SYMBOL, 0)!;
    }
    public user(): UserContext[];
    public user(i: number): UserContext | null;
    public user(i?: number): UserContext[] | UserContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UserContext);
        }

        return this.getRuleContext(i, UserContext);
    }
    public TO_SYMBOL(): antlr.TerminalNode[];
    public TO_SYMBOL(i: number): antlr.TerminalNode | null;
    public TO_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.TO_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.TO_SYMBOL, i);
    	}
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_renameUserStatement;
    }
}


export class RevokeStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REVOKE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.REVOKE_SYMBOL, 0)!;
    }
    public roleOrPrivilegesList(): RoleOrPrivilegesListContext | null {
        return this.getRuleContext(0, RoleOrPrivilegesListContext);
    }
    public FROM_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public userList(): UserListContext | null {
        return this.getRuleContext(0, UserListContext);
    }
    public ON_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, 0);
    }
    public grantIdentifier(): GrantIdentifierContext | null {
        return this.getRuleContext(0, GrantIdentifierContext);
    }
    public ALL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public PROXY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PROXY_SYMBOL, 0);
    }
    public user(): UserContext | null {
        return this.getRuleContext(0, UserContext);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public ignoreUnknownUser(): IgnoreUnknownUserContext | null {
        return this.getRuleContext(0, IgnoreUnknownUserContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
    }
    public GRANT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.GRANT_SYMBOL, 0);
    }
    public OPTION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OPTION_SYMBOL, 0);
    }
    public aclType(): AclTypeContext | null {
        return this.getRuleContext(0, AclTypeContext);
    }
    public PRIVILEGES_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PRIVILEGES_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_revokeStatement;
    }
}


export class AclTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
    }
    public FUNCTION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FUNCTION_SYMBOL, 0);
    }
    public PROCEDURE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PROCEDURE_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_aclType;
    }
}


export class RoleOrPrivilegesListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public roleOrPrivilege(): RoleOrPrivilegeContext[];
    public roleOrPrivilege(i: number): RoleOrPrivilegeContext | null;
    public roleOrPrivilege(i?: number): RoleOrPrivilegeContext[] | RoleOrPrivilegeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RoleOrPrivilegeContext);
        }

        return this.getRuleContext(i, RoleOrPrivilegeContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_roleOrPrivilegesList;
    }
}


export class RoleOrPrivilegeContext extends antlr.ParserRuleContext {
    public _object?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public roleIdentifierOrText(): RoleIdentifierOrTextContext | null {
        return this.getRuleContext(0, RoleIdentifierOrTextContext);
    }
    public AT_TEXT_SUFFIX(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.AT_TEXT_SUFFIX, 0);
    }
    public AT_SIGN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.AT_SIGN_SYMBOL, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(0, TextOrIdentifierContext);
    }
    public columnInternalRefList(): ColumnInternalRefListContext | null {
        return this.getRuleContext(0, ColumnInternalRefListContext);
    }
    public SELECT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SELECT_SYMBOL, 0);
    }
    public INSERT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INSERT_SYMBOL, 0);
    }
    public UPDATE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.UPDATE_SYMBOL, 0);
    }
    public REFERENCES_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REFERENCES_SYMBOL, 0);
    }
    public DELETE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DELETE_SYMBOL, 0);
    }
    public USAGE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.USAGE_SYMBOL, 0);
    }
    public INDEX_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
    }
    public DROP_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DROP_SYMBOL, 0);
    }
    public EXECUTE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EXECUTE_SYMBOL, 0);
    }
    public RELOAD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RELOAD_SYMBOL, 0);
    }
    public SHUTDOWN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SHUTDOWN_SYMBOL, 0);
    }
    public PROCESS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PROCESS_SYMBOL, 0);
    }
    public FILE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FILE_SYMBOL, 0);
    }
    public PROXY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PROXY_SYMBOL, 0);
    }
    public SUPER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SUPER_SYMBOL, 0);
    }
    public EVENT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EVENT_SYMBOL, 0);
    }
    public TRIGGER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TRIGGER_SYMBOL, 0);
    }
    public GRANT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.GRANT_SYMBOL, 0);
    }
    public OPTION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OPTION_SYMBOL, 0);
    }
    public SHOW_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public DATABASES_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DATABASES_SYMBOL, 0);
    }
    public CREATE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
    }
    public TEMPORARY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TEMPORARY_SYMBOL, 0);
    }
    public TABLES_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
    }
    public ROUTINE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ROUTINE_SYMBOL, 0);
    }
    public TABLESPACE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
    }
    public USER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.USER_SYMBOL, 0);
    }
    public VIEW_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.VIEW_SYMBOL, 0);
    }
    public LOCK_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LOCK_SYMBOL, 0);
    }
    public REPLICATION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATION_SYMBOL, 0);
    }
    public CLIENT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CLIENT_SYMBOL, 0);
    }
    public replica(): ReplicaContext | null {
        return this.getRuleContext(0, ReplicaContext);
    }
    public ALTER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ALTER_SYMBOL, 0);
    }
    public ROLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_roleOrPrivilege;
    }
}


export class GrantIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MULT_OPERATOR(): antlr.TerminalNode[];
    public MULT_OPERATOR(i: number): antlr.TerminalNode | null;
    public MULT_OPERATOR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.MULT_OPERATOR);
    	} else {
    		return this.getToken(MySQLParser.MULT_OPERATOR, i);
    	}
    }
    public DOT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DOT_SYMBOL, 0);
    }
    public schemaRef(): SchemaRefContext | null {
        return this.getRuleContext(0, SchemaRefContext);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(0, TableRefContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_grantIdentifier;
    }
}


export class RequireListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public requireListElement(): RequireListElementContext[];
    public requireListElement(i: number): RequireListElementContext | null;
    public requireListElement(i?: number): RequireListElementContext[] | RequireListElementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RequireListElementContext);
        }

        return this.getRuleContext(i, RequireListElementContext);
    }
    public AND_SYMBOL(): antlr.TerminalNode[];
    public AND_SYMBOL(i: number): antlr.TerminalNode | null;
    public AND_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.AND_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.AND_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_requireList;
    }
}


export class RequireListElementContext extends antlr.ParserRuleContext {
    public _element?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textString(): TextStringContext {
        return this.getRuleContext(0, TextStringContext)!;
    }
    public CIPHER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CIPHER_SYMBOL, 0);
    }
    public ISSUER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ISSUER_SYMBOL, 0);
    }
    public SUBJECT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SUBJECT_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_requireListElement;
    }
}


export class GrantOptionContext extends antlr.ParserRuleContext {
    public _option?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPTION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OPTION_SYMBOL, 0);
    }
    public GRANT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.GRANT_SYMBOL, 0);
    }
    public ulong_number(): Ulong_numberContext | null {
        return this.getRuleContext(0, Ulong_numberContext);
    }
    public MAX_QUERIES_PER_HOUR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0);
    }
    public MAX_UPDATES_PER_HOUR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0);
    }
    public MAX_CONNECTIONS_PER_HOUR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0);
    }
    public MAX_USER_CONNECTIONS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_grantOption;
    }
}


export class SetRoleStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SET_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SET_SYMBOL, 0)!;
    }
    public ROLE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.ROLE_SYMBOL, 0)!;
    }
    public roleList(): RoleListContext[];
    public roleList(i: number): RoleListContext | null;
    public roleList(i?: number): RoleListContext[] | RoleListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RoleListContext);
        }

        return this.getRuleContext(i, RoleListContext);
    }
    public NONE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NONE_SYMBOL, 0);
    }
    public DEFAULT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public TO_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TO_SYMBOL, 0);
    }
    public ALL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public EXCEPT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EXCEPT_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_setRoleStatement;
    }
}


export class RoleListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public role(): RoleContext[];
    public role(i: number): RoleContext | null;
    public role(i?: number): RoleContext[] | RoleContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RoleContext);
        }

        return this.getRuleContext(i, RoleContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_roleList;
    }
}


export class RoleContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public roleIdentifierOrText(): RoleIdentifierOrTextContext {
        return this.getRuleContext(0, RoleIdentifierOrTextContext)!;
    }
    public userVariable(): UserVariableContext | null {
        return this.getRuleContext(0, UserVariableContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_role;
    }
}


export class TableAdministrationStatementContext extends antlr.ParserRuleContext {
    public _type_?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABLE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0)!;
    }
    public tableRefList(): TableRefListContext {
        return this.getRuleContext(0, TableRefListContext)!;
    }
    public ANALYZE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ANALYZE_SYMBOL, 0);
    }
    public noWriteToBinLog(): NoWriteToBinLogContext | null {
        return this.getRuleContext(0, NoWriteToBinLogContext);
    }
    public histogram(): HistogramContext | null {
        return this.getRuleContext(0, HistogramContext);
    }
    public CHECK_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CHECK_SYMBOL, 0);
    }
    public checkOption(): CheckOptionContext[];
    public checkOption(i: number): CheckOptionContext | null;
    public checkOption(i?: number): CheckOptionContext[] | CheckOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CheckOptionContext);
        }

        return this.getRuleContext(i, CheckOptionContext);
    }
    public CHECKSUM_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CHECKSUM_SYMBOL, 0);
    }
    public QUICK_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.QUICK_SYMBOL, 0);
    }
    public EXTENDED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EXTENDED_SYMBOL, 0);
    }
    public OPTIMIZE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OPTIMIZE_SYMBOL, 0);
    }
    public REPAIR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REPAIR_SYMBOL, 0);
    }
    public repairType(): RepairTypeContext[];
    public repairType(i: number): RepairTypeContext | null;
    public repairType(i?: number): RepairTypeContext[] | RepairTypeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RepairTypeContext);
        }

        return this.getRuleContext(i, RepairTypeContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_tableAdministrationStatement;
    }
}


export class HistogramAutoUpdateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UPDATE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.UPDATE_SYMBOL, 0)!;
    }
    public MANUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MANUAL_SYMBOL, 0);
    }
    public AUTO_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.AUTO_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_histogramAutoUpdate;
    }
}


export class HistogramUpdateParamContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public histogramNumBuckets(): HistogramNumBucketsContext | null {
        return this.getRuleContext(0, HistogramNumBucketsContext);
    }
    public histogramAutoUpdate(): HistogramAutoUpdateContext | null {
        return this.getRuleContext(0, HistogramAutoUpdateContext);
    }
    public USING_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.USING_SYMBOL, 0);
    }
    public DATA_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DATA_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(0, TextStringLiteralContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_histogramUpdateParam;
    }
}


export class HistogramNumBucketsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0)!;
    }
    public INT_NUMBER(): antlr.TerminalNode {
        return this.getToken(MySQLParser.INT_NUMBER, 0)!;
    }
    public BUCKETS_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.BUCKETS_SYMBOL, 0)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_histogramNumBuckets;
    }
}


export class HistogramContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UPDATE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.UPDATE_SYMBOL, 0);
    }
    public HISTOGRAM_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.HISTOGRAM_SYMBOL, 0)!;
    }
    public ON_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.ON_SYMBOL, 0)!;
    }
    public identifierList(): IdentifierListContext {
        return this.getRuleContext(0, IdentifierListContext)!;
    }
    public histogramUpdateParam(): HistogramUpdateParamContext | null {
        return this.getRuleContext(0, HistogramUpdateParamContext);
    }
    public DROP_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DROP_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_histogram;
    }
}


export class CheckOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FOR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public UPGRADE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.UPGRADE_SYMBOL, 0);
    }
    public QUICK_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.QUICK_SYMBOL, 0);
    }
    public FAST_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FAST_SYMBOL, 0);
    }
    public MEDIUM_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MEDIUM_SYMBOL, 0);
    }
    public EXTENDED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EXTENDED_SYMBOL, 0);
    }
    public CHANGED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CHANGED_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_checkOption;
    }
}


export class RepairTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public QUICK_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.QUICK_SYMBOL, 0);
    }
    public EXTENDED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EXTENDED_SYMBOL, 0);
    }
    public USE_FRM_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.USE_FRM_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_repairType;
    }
}


export class UninstallStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UNINSTALL_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.UNINSTALL_SYMBOL, 0)!;
    }
    public PLUGIN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PLUGIN_SYMBOL, 0);
    }
    public pluginRef(): PluginRefContext | null {
        return this.getRuleContext(0, PluginRefContext);
    }
    public COMPONENT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COMPONENT_SYMBOL, 0);
    }
    public componentRef(): ComponentRefContext[];
    public componentRef(i: number): ComponentRefContext | null;
    public componentRef(i?: number): ComponentRefContext[] | ComponentRefContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ComponentRefContext);
        }

        return this.getRuleContext(i, ComponentRefContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_uninstallStatement;
    }
}


export class InstallStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INSTALL_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.INSTALL_SYMBOL, 0)!;
    }
    public PLUGIN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PLUGIN_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public SONAME_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SONAME_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(0, TextStringLiteralContext);
    }
    public COMPONENT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COMPONENT_SYMBOL, 0);
    }
    public textStringLiteralList(): TextStringLiteralListContext | null {
        return this.getRuleContext(0, TextStringLiteralListContext);
    }
    public installSetValueList(): InstallSetValueListContext | null {
        return this.getRuleContext(0, InstallSetValueListContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_installStatement;
    }
}


export class InstallOptionTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GLOBAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.GLOBAL_SYMBOL, 0);
    }
    public PERSIST_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PERSIST_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_installOptionType;
    }
}


export class InstallSetRvalueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(0, ExprContext);
    }
    public ON_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_installSetRvalue;
    }
}


export class InstallSetValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public installOptionType(): InstallOptionTypeContext {
        return this.getRuleContext(0, InstallOptionTypeContext)!;
    }
    public lvalueVariable(): LvalueVariableContext {
        return this.getRuleContext(0, LvalueVariableContext)!;
    }
    public equal(): EqualContext {
        return this.getRuleContext(0, EqualContext)!;
    }
    public installSetRvalue(): InstallSetRvalueContext {
        return this.getRuleContext(0, InstallSetRvalueContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_installSetValue;
    }
}


export class InstallSetValueListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SET_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SET_SYMBOL, 0)!;
    }
    public installSetValue(): InstallSetValueContext[];
    public installSetValue(i: number): InstallSetValueContext | null;
    public installSetValue(i?: number): InstallSetValueContext[] | InstallSetValueContext | null {
        if (i === undefined) {
            return this.getRuleContexts(InstallSetValueContext);
        }

        return this.getRuleContext(i, InstallSetValueContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_installSetValueList;
    }
}


export class SetStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SET_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SET_SYMBOL, 0)!;
    }
    public startOptionValueList(): StartOptionValueListContext {
        return this.getRuleContext(0, StartOptionValueListContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_setStatement;
    }
}


export class StartOptionValueListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public optionValueNoOptionType(): OptionValueNoOptionTypeContext | null {
        return this.getRuleContext(0, OptionValueNoOptionTypeContext);
    }
    public optionValueListContinued(): OptionValueListContinuedContext | null {
        return this.getRuleContext(0, OptionValueListContinuedContext);
    }
    public TRANSACTION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TRANSACTION_SYMBOL, 0);
    }
    public transactionCharacteristics(): TransactionCharacteristicsContext | null {
        return this.getRuleContext(0, TransactionCharacteristicsContext);
    }
    public optionType(): OptionTypeContext | null {
        return this.getRuleContext(0, OptionTypeContext);
    }
    public startOptionValueListFollowingOptionType(): StartOptionValueListFollowingOptionTypeContext | null {
        return this.getRuleContext(0, StartOptionValueListFollowingOptionTypeContext);
    }
    public PASSWORD_SYMBOL(): antlr.TerminalNode[];
    public PASSWORD_SYMBOL(i: number): antlr.TerminalNode | null;
    public PASSWORD_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.PASSWORD_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.PASSWORD_SYMBOL, i);
    	}
    }
    public equal(): EqualContext | null {
        return this.getRuleContext(0, EqualContext);
    }
    public textString(): TextStringContext | null {
        return this.getRuleContext(0, TextStringContext);
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public FOR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public user(): UserContext | null {
        return this.getRuleContext(0, UserContext);
    }
    public replacePassword(): ReplacePasswordContext | null {
        return this.getRuleContext(0, ReplacePasswordContext);
    }
    public retainCurrentPassword(): RetainCurrentPasswordContext | null {
        return this.getRuleContext(0, RetainCurrentPasswordContext);
    }
    public TO_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TO_SYMBOL, 0);
    }
    public RANDOM_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RANDOM_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_startOptionValueList;
    }
}


export class TransactionCharacteristicsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public transactionAccessMode(): TransactionAccessModeContext | null {
        return this.getRuleContext(0, TransactionAccessModeContext);
    }
    public isolationLevel(): IsolationLevelContext | null {
        return this.getRuleContext(0, IsolationLevelContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_transactionCharacteristics;
    }
}


export class TransactionAccessModeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public READ_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.READ_SYMBOL, 0)!;
    }
    public WRITE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.WRITE_SYMBOL, 0);
    }
    public ONLY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ONLY_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_transactionAccessMode;
    }
}


export class IsolationLevelContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ISOLATION_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.ISOLATION_SYMBOL, 0)!;
    }
    public LEVEL_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.LEVEL_SYMBOL, 0)!;
    }
    public REPEATABLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REPEATABLE_SYMBOL, 0);
    }
    public READ_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.READ_SYMBOL, 0);
    }
    public SERIALIZABLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SERIALIZABLE_SYMBOL, 0);
    }
    public COMMITTED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COMMITTED_SYMBOL, 0);
    }
    public UNCOMMITTED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.UNCOMMITTED_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_isolationLevel;
    }
}


export class OptionValueListContinuedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public optionValue(): OptionValueContext[];
    public optionValue(i: number): OptionValueContext | null;
    public optionValue(i?: number): OptionValueContext[] | OptionValueContext | null {
        if (i === undefined) {
            return this.getRuleContexts(OptionValueContext);
        }

        return this.getRuleContext(i, OptionValueContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_optionValueListContinued;
    }
}


export class OptionValueNoOptionTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public lvalueVariable(): LvalueVariableContext | null {
        return this.getRuleContext(0, LvalueVariableContext);
    }
    public equal(): EqualContext | null {
        return this.getRuleContext(0, EqualContext);
    }
    public setExprOrDefault(): SetExprOrDefaultContext | null {
        return this.getRuleContext(0, SetExprOrDefaultContext);
    }
    public charsetClause(): CharsetClauseContext | null {
        return this.getRuleContext(0, CharsetClauseContext);
    }
    public userVariable(): UserVariableContext | null {
        return this.getRuleContext(0, UserVariableContext);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(0, ExprContext);
    }
    public AT_AT_SIGN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.AT_AT_SIGN_SYMBOL, 0);
    }
    public setVarIdentType(): SetVarIdentTypeContext | null {
        return this.getRuleContext(0, SetVarIdentTypeContext);
    }
    public NAMES_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NAMES_SYMBOL, 0);
    }
    public charsetName(): CharsetNameContext | null {
        return this.getRuleContext(0, CharsetNameContext);
    }
    public DEFAULT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public collate(): CollateContext | null {
        return this.getRuleContext(0, CollateContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_optionValueNoOptionType;
    }
}


export class OptionValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public optionType(): OptionTypeContext | null {
        return this.getRuleContext(0, OptionTypeContext);
    }
    public lvalueVariable(): LvalueVariableContext | null {
        return this.getRuleContext(0, LvalueVariableContext);
    }
    public equal(): EqualContext | null {
        return this.getRuleContext(0, EqualContext);
    }
    public setExprOrDefault(): SetExprOrDefaultContext | null {
        return this.getRuleContext(0, SetExprOrDefaultContext);
    }
    public optionValueNoOptionType(): OptionValueNoOptionTypeContext | null {
        return this.getRuleContext(0, OptionValueNoOptionTypeContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_optionValue;
    }
}


export class SetSystemVariableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AT_AT_SIGN_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.AT_AT_SIGN_SYMBOL, 0)!;
    }
    public lvalueVariable(): LvalueVariableContext {
        return this.getRuleContext(0, LvalueVariableContext)!;
    }
    public setVarIdentType(): SetVarIdentTypeContext | null {
        return this.getRuleContext(0, SetVarIdentTypeContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_setSystemVariable;
    }
}


export class StartOptionValueListFollowingOptionTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public optionValueFollowingOptionType(): OptionValueFollowingOptionTypeContext | null {
        return this.getRuleContext(0, OptionValueFollowingOptionTypeContext);
    }
    public optionValueListContinued(): OptionValueListContinuedContext | null {
        return this.getRuleContext(0, OptionValueListContinuedContext);
    }
    public TRANSACTION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TRANSACTION_SYMBOL, 0);
    }
    public transactionCharacteristics(): TransactionCharacteristicsContext | null {
        return this.getRuleContext(0, TransactionCharacteristicsContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_startOptionValueListFollowingOptionType;
    }
}


export class OptionValueFollowingOptionTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public lvalueVariable(): LvalueVariableContext {
        return this.getRuleContext(0, LvalueVariableContext)!;
    }
    public equal(): EqualContext {
        return this.getRuleContext(0, EqualContext)!;
    }
    public setExprOrDefault(): SetExprOrDefaultContext {
        return this.getRuleContext(0, SetExprOrDefaultContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_optionValueFollowingOptionType;
    }
}


export class SetExprOrDefaultContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(0, ExprContext);
    }
    public DEFAULT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public ON_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, 0);
    }
    public ALL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public BINARY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
    }
    public ROW_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ROW_SYMBOL, 0);
    }
    public SYSTEM_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SYSTEM_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_setExprOrDefault;
    }
}


export class ShowDatabasesStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0)!;
    }
    public DATABASES_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.DATABASES_SYMBOL, 0)!;
    }
    public likeOrWhere(): LikeOrWhereContext | null {
        return this.getRuleContext(0, LikeOrWhereContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_showDatabasesStatement;
    }
}


export class ShowTablesStatementContext extends antlr.ParserRuleContext {
    public _value?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0)!;
    }
    public TABLES_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.TABLES_SYMBOL, 0)!;
    }
    public showCommandType(): ShowCommandTypeContext | null {
        return this.getRuleContext(0, ShowCommandTypeContext);
    }
    public inDb(): InDbContext | null {
        return this.getRuleContext(0, InDbContext);
    }
    public likeOrWhere(): LikeOrWhereContext | null {
        return this.getRuleContext(0, LikeOrWhereContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_showTablesStatement;
    }
}


export class ShowTriggersStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0)!;
    }
    public TRIGGERS_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.TRIGGERS_SYMBOL, 0)!;
    }
    public FULL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FULL_SYMBOL, 0);
    }
    public inDb(): InDbContext | null {
        return this.getRuleContext(0, InDbContext);
    }
    public likeOrWhere(): LikeOrWhereContext | null {
        return this.getRuleContext(0, LikeOrWhereContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_showTriggersStatement;
    }
}


export class ShowEventsStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0)!;
    }
    public EVENTS_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.EVENTS_SYMBOL, 0)!;
    }
    public inDb(): InDbContext | null {
        return this.getRuleContext(0, InDbContext);
    }
    public likeOrWhere(): LikeOrWhereContext | null {
        return this.getRuleContext(0, LikeOrWhereContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_showEventsStatement;
    }
}


export class ShowTableStatusStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0)!;
    }
    public TABLE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0)!;
    }
    public STATUS_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.STATUS_SYMBOL, 0)!;
    }
    public inDb(): InDbContext | null {
        return this.getRuleContext(0, InDbContext);
    }
    public likeOrWhere(): LikeOrWhereContext | null {
        return this.getRuleContext(0, LikeOrWhereContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_showTableStatusStatement;
    }
}


export class ShowOpenTablesStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0)!;
    }
    public OPEN_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPEN_SYMBOL, 0)!;
    }
    public TABLES_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.TABLES_SYMBOL, 0)!;
    }
    public inDb(): InDbContext | null {
        return this.getRuleContext(0, InDbContext);
    }
    public likeOrWhere(): LikeOrWhereContext | null {
        return this.getRuleContext(0, LikeOrWhereContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_showOpenTablesStatement;
    }
}


export class ShowParseTreeStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0)!;
    }
    public PARSE_TREE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.PARSE_TREE_SYMBOL, 0)!;
    }
    public simpleStatement(): SimpleStatementContext {
        return this.getRuleContext(0, SimpleStatementContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_showParseTreeStatement;
    }
}


export class ShowPluginsStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0)!;
    }
    public PLUGINS_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.PLUGINS_SYMBOL, 0)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_showPluginsStatement;
    }
}


export class ShowEngineLogsStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0)!;
    }
    public ENGINE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.ENGINE_SYMBOL, 0)!;
    }
    public engineOrAll(): EngineOrAllContext {
        return this.getRuleContext(0, EngineOrAllContext)!;
    }
    public LOGS_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.LOGS_SYMBOL, 0)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_showEngineLogsStatement;
    }
}


export class ShowEngineMutexStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0)!;
    }
    public ENGINE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.ENGINE_SYMBOL, 0)!;
    }
    public engineOrAll(): EngineOrAllContext {
        return this.getRuleContext(0, EngineOrAllContext)!;
    }
    public MUTEX_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.MUTEX_SYMBOL, 0)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_showEngineMutexStatement;
    }
}


export class ShowEngineStatusStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0)!;
    }
    public ENGINE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.ENGINE_SYMBOL, 0)!;
    }
    public engineOrAll(): EngineOrAllContext {
        return this.getRuleContext(0, EngineOrAllContext)!;
    }
    public STATUS_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.STATUS_SYMBOL, 0)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_showEngineStatusStatement;
    }
}


export class ShowColumnsStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0)!;
    }
    public COLUMNS_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.COLUMNS_SYMBOL, 0)!;
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(0, TableRefContext)!;
    }
    public FROM_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public IN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.IN_SYMBOL, 0);
    }
    public showCommandType(): ShowCommandTypeContext | null {
        return this.getRuleContext(0, ShowCommandTypeContext);
    }
    public inDb(): InDbContext | null {
        return this.getRuleContext(0, InDbContext);
    }
    public likeOrWhere(): LikeOrWhereContext | null {
        return this.getRuleContext(0, LikeOrWhereContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_showColumnsStatement;
    }
}


export class ShowBinaryLogsStatementContext extends antlr.ParserRuleContext {
    public _value?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0)!;
    }
    public BINARY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
    }
    public MASTER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
    }
    public LOGS_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.LOGS_SYMBOL, 0)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_showBinaryLogsStatement;
    }
}


export class ShowBinaryLogStatusStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0)!;
    }
    public BINARY_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.BINARY_SYMBOL, 0)!;
    }
    public LOG_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.LOG_SYMBOL, 0)!;
    }
    public STATUS_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.STATUS_SYMBOL, 0)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_showBinaryLogStatusStatement;
    }
}


export class ShowReplicasStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0)!;
    }
    public replica(): ReplicaContext | null {
        return this.getRuleContext(0, ReplicaContext);
    }
    public HOSTS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.HOSTS_SYMBOL, 0);
    }
    public REPLICAS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REPLICAS_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_showReplicasStatement;
    }
}


export class ShowBinlogEventsStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0)!;
    }
    public BINLOG_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.BINLOG_SYMBOL, 0)!;
    }
    public EVENTS_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.EVENTS_SYMBOL, 0)!;
    }
    public IN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.IN_SYMBOL, 0);
    }
    public textString(): TextStringContext | null {
        return this.getRuleContext(0, TextStringContext);
    }
    public FROM_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public ulonglongNumber(): UlonglongNumberContext | null {
        return this.getRuleContext(0, UlonglongNumberContext);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(0, LimitClauseContext);
    }
    public channel(): ChannelContext | null {
        return this.getRuleContext(0, ChannelContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_showBinlogEventsStatement;
    }
}


export class ShowRelaylogEventsStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0)!;
    }
    public RELAYLOG_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.RELAYLOG_SYMBOL, 0)!;
    }
    public EVENTS_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.EVENTS_SYMBOL, 0)!;
    }
    public IN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.IN_SYMBOL, 0);
    }
    public textString(): TextStringContext | null {
        return this.getRuleContext(0, TextStringContext);
    }
    public FROM_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public ulonglongNumber(): UlonglongNumberContext | null {
        return this.getRuleContext(0, UlonglongNumberContext);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(0, LimitClauseContext);
    }
    public channel(): ChannelContext | null {
        return this.getRuleContext(0, ChannelContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_showRelaylogEventsStatement;
    }
}


export class ShowKeysStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0)!;
    }
    public fromOrIn(): FromOrInContext {
        return this.getRuleContext(0, FromOrInContext)!;
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(0, TableRefContext)!;
    }
    public INDEX_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
    }
    public INDEXES_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INDEXES_SYMBOL, 0);
    }
    public KEYS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.KEYS_SYMBOL, 0);
    }
    public EXTENDED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EXTENDED_SYMBOL, 0);
    }
    public inDb(): InDbContext | null {
        return this.getRuleContext(0, InDbContext);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_showKeysStatement;
    }
}


export class ShowEnginesStatementContext extends antlr.ParserRuleContext {
    public _value?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0)!;
    }
    public ENGINES_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.ENGINES_SYMBOL, 0)!;
    }
    public STORAGE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.STORAGE_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_showEnginesStatement;
    }
}


export class ShowCountWarningsStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0)!;
    }
    public COUNT_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.COUNT_SYMBOL, 0)!;
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)!;
    }
    public MULT_OPERATOR(): antlr.TerminalNode {
        return this.getToken(MySQLParser.MULT_OPERATOR, 0)!;
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)!;
    }
    public WARNINGS_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.WARNINGS_SYMBOL, 0)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_showCountWarningsStatement;
    }
}


export class ShowCountErrorsStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0)!;
    }
    public COUNT_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.COUNT_SYMBOL, 0)!;
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)!;
    }
    public MULT_OPERATOR(): antlr.TerminalNode {
        return this.getToken(MySQLParser.MULT_OPERATOR, 0)!;
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)!;
    }
    public ERRORS_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.ERRORS_SYMBOL, 0)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_showCountErrorsStatement;
    }
}


export class ShowWarningsStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0)!;
    }
    public WARNINGS_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.WARNINGS_SYMBOL, 0)!;
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(0, LimitClauseContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_showWarningsStatement;
    }
}


export class ShowErrorsStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0)!;
    }
    public ERRORS_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.ERRORS_SYMBOL, 0)!;
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(0, LimitClauseContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_showErrorsStatement;
    }
}


export class ShowProfilesStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0)!;
    }
    public PROFILES_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.PROFILES_SYMBOL, 0)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_showProfilesStatement;
    }
}


export class ShowProfileStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0)!;
    }
    public PROFILE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.PROFILE_SYMBOL, 0)!;
    }
    public profileDefinitions(): ProfileDefinitionsContext | null {
        return this.getRuleContext(0, ProfileDefinitionsContext);
    }
    public FOR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public QUERY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.QUERY_SYMBOL, 0);
    }
    public INT_NUMBER(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, 0);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(0, LimitClauseContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_showProfileStatement;
    }
}


export class ShowStatusStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0)!;
    }
    public STATUS_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.STATUS_SYMBOL, 0)!;
    }
    public optionType(): OptionTypeContext | null {
        return this.getRuleContext(0, OptionTypeContext);
    }
    public likeOrWhere(): LikeOrWhereContext | null {
        return this.getRuleContext(0, LikeOrWhereContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_showStatusStatement;
    }
}


export class ShowProcessListStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0)!;
    }
    public PROCESSLIST_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.PROCESSLIST_SYMBOL, 0)!;
    }
    public FULL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FULL_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_showProcessListStatement;
    }
}


export class ShowVariablesStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0)!;
    }
    public VARIABLES_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.VARIABLES_SYMBOL, 0)!;
    }
    public optionType(): OptionTypeContext | null {
        return this.getRuleContext(0, OptionTypeContext);
    }
    public likeOrWhere(): LikeOrWhereContext | null {
        return this.getRuleContext(0, LikeOrWhereContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_showVariablesStatement;
    }
}


export class ShowCharacterSetStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0)!;
    }
    public charset(): CharsetContext {
        return this.getRuleContext(0, CharsetContext)!;
    }
    public likeOrWhere(): LikeOrWhereContext | null {
        return this.getRuleContext(0, LikeOrWhereContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_showCharacterSetStatement;
    }
}


export class ShowCollationStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0)!;
    }
    public COLLATION_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.COLLATION_SYMBOL, 0)!;
    }
    public likeOrWhere(): LikeOrWhereContext | null {
        return this.getRuleContext(0, LikeOrWhereContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_showCollationStatement;
    }
}


export class ShowPrivilegesStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0)!;
    }
    public PRIVILEGES_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.PRIVILEGES_SYMBOL, 0)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_showPrivilegesStatement;
    }
}


export class ShowGrantsStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0)!;
    }
    public GRANTS_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.GRANTS_SYMBOL, 0)!;
    }
    public FOR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public user(): UserContext | null {
        return this.getRuleContext(0, UserContext);
    }
    public USING_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.USING_SYMBOL, 0);
    }
    public userList(): UserListContext | null {
        return this.getRuleContext(0, UserListContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_showGrantsStatement;
    }
}


export class ShowCreateDatabaseStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0)!;
    }
    public CREATE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0)!;
    }
    public DATABASE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.DATABASE_SYMBOL, 0)!;
    }
    public schemaRef(): SchemaRefContext {
        return this.getRuleContext(0, SchemaRefContext)!;
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_showCreateDatabaseStatement;
    }
}


export class ShowCreateTableStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0)!;
    }
    public CREATE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0)!;
    }
    public TABLE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0)!;
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(0, TableRefContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_showCreateTableStatement;
    }
}


export class ShowCreateViewStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0)!;
    }
    public CREATE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0)!;
    }
    public VIEW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.VIEW_SYMBOL, 0)!;
    }
    public viewRef(): ViewRefContext {
        return this.getRuleContext(0, ViewRefContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_showCreateViewStatement;
    }
}


export class ShowMasterStatusStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0)!;
    }
    public MASTER_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.MASTER_SYMBOL, 0)!;
    }
    public STATUS_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.STATUS_SYMBOL, 0)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_showMasterStatusStatement;
    }
}


export class ShowReplicaStatusStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0)!;
    }
    public replica(): ReplicaContext {
        return this.getRuleContext(0, ReplicaContext)!;
    }
    public STATUS_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.STATUS_SYMBOL, 0)!;
    }
    public channel(): ChannelContext | null {
        return this.getRuleContext(0, ChannelContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_showReplicaStatusStatement;
    }
}


export class ShowCreateProcedureStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0)!;
    }
    public CREATE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0)!;
    }
    public PROCEDURE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.PROCEDURE_SYMBOL, 0)!;
    }
    public procedureRef(): ProcedureRefContext {
        return this.getRuleContext(0, ProcedureRefContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_showCreateProcedureStatement;
    }
}


export class ShowCreateFunctionStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0)!;
    }
    public CREATE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0)!;
    }
    public FUNCTION_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.FUNCTION_SYMBOL, 0)!;
    }
    public functionRef(): FunctionRefContext {
        return this.getRuleContext(0, FunctionRefContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_showCreateFunctionStatement;
    }
}


export class ShowCreateTriggerStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0)!;
    }
    public CREATE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0)!;
    }
    public TRIGGER_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.TRIGGER_SYMBOL, 0)!;
    }
    public triggerRef(): TriggerRefContext {
        return this.getRuleContext(0, TriggerRefContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_showCreateTriggerStatement;
    }
}


export class ShowCreateProcedureStatusStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0)!;
    }
    public CREATE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0)!;
    }
    public PROCEDURE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.PROCEDURE_SYMBOL, 0)!;
    }
    public STATUS_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.STATUS_SYMBOL, 0)!;
    }
    public likeOrWhere(): LikeOrWhereContext | null {
        return this.getRuleContext(0, LikeOrWhereContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_showCreateProcedureStatusStatement;
    }
}


export class ShowCreateFunctionStatusStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0)!;
    }
    public CREATE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0)!;
    }
    public FUNCTION_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.FUNCTION_SYMBOL, 0)!;
    }
    public STATUS_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.STATUS_SYMBOL, 0)!;
    }
    public likeOrWhere(): LikeOrWhereContext | null {
        return this.getRuleContext(0, LikeOrWhereContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_showCreateFunctionStatusStatement;
    }
}


export class ShowCreateProcedureCodeStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0)!;
    }
    public CREATE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0)!;
    }
    public PROCEDURE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.PROCEDURE_SYMBOL, 0)!;
    }
    public CODE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CODE_SYMBOL, 0)!;
    }
    public procedureRef(): ProcedureRefContext {
        return this.getRuleContext(0, ProcedureRefContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_showCreateProcedureCodeStatement;
    }
}


export class ShowCreateFunctionCodeStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0)!;
    }
    public CREATE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0)!;
    }
    public FUNCTION_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.FUNCTION_SYMBOL, 0)!;
    }
    public CODE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CODE_SYMBOL, 0)!;
    }
    public functionRef(): FunctionRefContext {
        return this.getRuleContext(0, FunctionRefContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_showCreateFunctionCodeStatement;
    }
}


export class ShowCreateEventStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0)!;
    }
    public CREATE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0)!;
    }
    public EVENT_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.EVENT_SYMBOL, 0)!;
    }
    public eventRef(): EventRefContext {
        return this.getRuleContext(0, EventRefContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_showCreateEventStatement;
    }
}


export class ShowCreateUserStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0)!;
    }
    public CREATE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0)!;
    }
    public USER_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.USER_SYMBOL, 0)!;
    }
    public user(): UserContext {
        return this.getRuleContext(0, UserContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_showCreateUserStatement;
    }
}


export class ShowCommandTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FULL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FULL_SYMBOL, 0);
    }
    public EXTENDED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EXTENDED_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_showCommandType;
    }
}


export class EngineOrAllContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public engineRef(): EngineRefContext | null {
        return this.getRuleContext(0, EngineRefContext);
    }
    public ALL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_engineOrAll;
    }
}


export class FromOrInContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FROM_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public IN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.IN_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_fromOrIn;
    }
}


export class InDbContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public fromOrIn(): FromOrInContext {
        return this.getRuleContext(0, FromOrInContext)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_inDb;
    }
}


export class ProfileDefinitionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public profileDefinition(): ProfileDefinitionContext[];
    public profileDefinition(i: number): ProfileDefinitionContext | null;
    public profileDefinition(i?: number): ProfileDefinitionContext[] | ProfileDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ProfileDefinitionContext);
        }

        return this.getRuleContext(i, ProfileDefinitionContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_profileDefinitions;
    }
}


export class ProfileDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BLOCK_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BLOCK_SYMBOL, 0);
    }
    public IO_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.IO_SYMBOL, 0);
    }
    public CONTEXT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CONTEXT_SYMBOL, 0);
    }
    public SWITCHES_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SWITCHES_SYMBOL, 0);
    }
    public PAGE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PAGE_SYMBOL, 0);
    }
    public FAULTS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FAULTS_SYMBOL, 0);
    }
    public ALL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public CPU_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CPU_SYMBOL, 0);
    }
    public IPC_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.IPC_SYMBOL, 0);
    }
    public MEMORY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MEMORY_SYMBOL, 0);
    }
    public SOURCE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SYMBOL, 0);
    }
    public SWAPS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SWAPS_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_profileDefinition;
    }
}


export class OtherAdministrativeStatementContext extends antlr.ParserRuleContext {
    public _type_?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textLiteral(): TextLiteralContext | null {
        return this.getRuleContext(0, TextLiteralContext);
    }
    public BINLOG_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BINLOG_SYMBOL, 0);
    }
    public INDEX_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
    }
    public keyCacheListOrParts(): KeyCacheListOrPartsContext | null {
        return this.getRuleContext(0, KeyCacheListOrPartsContext);
    }
    public IN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.IN_SYMBOL, 0);
    }
    public CACHE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CACHE_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public DEFAULT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public FLUSH_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FLUSH_SYMBOL, 0);
    }
    public flushTables(): FlushTablesContext | null {
        return this.getRuleContext(0, FlushTablesContext);
    }
    public flushOption(): FlushOptionContext[];
    public flushOption(i: number): FlushOptionContext | null;
    public flushOption(i?: number): FlushOptionContext[] | FlushOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FlushOptionContext);
        }

        return this.getRuleContext(i, FlushOptionContext);
    }
    public noWriteToBinLog(): NoWriteToBinLogContext | null {
        return this.getRuleContext(0, NoWriteToBinLogContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(0, ExprContext);
    }
    public KILL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.KILL_SYMBOL, 0);
    }
    public CONNECTION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CONNECTION_SYMBOL, 0);
    }
    public QUERY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.QUERY_SYMBOL, 0);
    }
    public INTO_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INTO_SYMBOL, 0);
    }
    public preloadTail(): PreloadTailContext | null {
        return this.getRuleContext(0, PreloadTailContext);
    }
    public LOAD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LOAD_SYMBOL, 0);
    }
    public SHUTDOWN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SHUTDOWN_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_otherAdministrativeStatement;
    }
}


export class KeyCacheListOrPartsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public keyCacheList(): KeyCacheListContext | null {
        return this.getRuleContext(0, KeyCacheListContext);
    }
    public assignToKeycachePartition(): AssignToKeycachePartitionContext | null {
        return this.getRuleContext(0, AssignToKeycachePartitionContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_keyCacheListOrParts;
    }
}


export class KeyCacheListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public assignToKeycache(): AssignToKeycacheContext[];
    public assignToKeycache(i: number): AssignToKeycacheContext | null;
    public assignToKeycache(i?: number): AssignToKeycacheContext[] | AssignToKeycacheContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AssignToKeycacheContext);
        }

        return this.getRuleContext(i, AssignToKeycacheContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_keyCacheList;
    }
}


export class AssignToKeycacheContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(0, TableRefContext)!;
    }
    public cacheKeyList(): CacheKeyListContext | null {
        return this.getRuleContext(0, CacheKeyListContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_assignToKeycache;
    }
}


export class AssignToKeycachePartitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(0, TableRefContext)!;
    }
    public PARTITION_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.PARTITION_SYMBOL, 0)!;
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)!;
    }
    public allOrPartitionNameList(): AllOrPartitionNameListContext {
        return this.getRuleContext(0, AllOrPartitionNameListContext)!;
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)!;
    }
    public cacheKeyList(): CacheKeyListContext | null {
        return this.getRuleContext(0, CacheKeyListContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_assignToKeycachePartition;
    }
}


export class CacheKeyListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public keyOrIndex(): KeyOrIndexContext {
        return this.getRuleContext(0, KeyOrIndexContext)!;
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)!;
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)!;
    }
    public keyUsageList(): KeyUsageListContext | null {
        return this.getRuleContext(0, KeyUsageListContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_cacheKeyList;
    }
}


export class KeyUsageElementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public PRIMARY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PRIMARY_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_keyUsageElement;
    }
}


export class KeyUsageListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public keyUsageElement(): KeyUsageElementContext[];
    public keyUsageElement(i: number): KeyUsageElementContext | null;
    public keyUsageElement(i?: number): KeyUsageElementContext[] | KeyUsageElementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(KeyUsageElementContext);
        }

        return this.getRuleContext(i, KeyUsageElementContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_keyUsageList;
    }
}


export class FlushOptionContext extends antlr.ParserRuleContext {
    public _option?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public HOSTS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.HOSTS_SYMBOL, 0);
    }
    public PRIVILEGES_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PRIVILEGES_SYMBOL, 0);
    }
    public STATUS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.STATUS_SYMBOL, 0);
    }
    public USER_RESOURCES_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.USER_RESOURCES_SYMBOL, 0);
    }
    public LOGS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LOGS_SYMBOL, 0);
    }
    public logType(): LogTypeContext | null {
        return this.getRuleContext(0, LogTypeContext);
    }
    public RELAY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RELAY_SYMBOL, 0);
    }
    public channel(): ChannelContext | null {
        return this.getRuleContext(0, ChannelContext);
    }
    public OPTIMIZER_COSTS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OPTIMIZER_COSTS_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_flushOption;
    }
}


export class LogTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BINARY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
    }
    public ENGINE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ENGINE_SYMBOL, 0);
    }
    public ERROR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ERROR_SYMBOL, 0);
    }
    public GENERAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.GENERAL_SYMBOL, 0);
    }
    public SLOW_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SLOW_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_logType;
    }
}


export class FlushTablesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABLES_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
    }
    public TABLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
    }
    public WITH_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public READ_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.READ_SYMBOL, 0);
    }
    public LOCK_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LOCK_SYMBOL, 0);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(0, IdentifierListContext);
    }
    public flushTablesOptions(): FlushTablesOptionsContext | null {
        return this.getRuleContext(0, FlushTablesOptionsContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_flushTables;
    }
}


export class FlushTablesOptionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FOR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public EXPORT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EXPORT_SYMBOL, 0);
    }
    public WITH_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public READ_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.READ_SYMBOL, 0);
    }
    public LOCK_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LOCK_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_flushTablesOptions;
    }
}


export class PreloadTailContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(0, TableRefContext);
    }
    public adminPartition(): AdminPartitionContext | null {
        return this.getRuleContext(0, AdminPartitionContext);
    }
    public cacheKeyList(): CacheKeyListContext | null {
        return this.getRuleContext(0, CacheKeyListContext);
    }
    public IGNORE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
    }
    public LEAVES_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LEAVES_SYMBOL, 0);
    }
    public preloadList(): PreloadListContext | null {
        return this.getRuleContext(0, PreloadListContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_preloadTail;
    }
}


export class PreloadListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public preloadKeys(): PreloadKeysContext[];
    public preloadKeys(i: number): PreloadKeysContext | null;
    public preloadKeys(i?: number): PreloadKeysContext[] | PreloadKeysContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PreloadKeysContext);
        }

        return this.getRuleContext(i, PreloadKeysContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_preloadList;
    }
}


export class PreloadKeysContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(0, TableRefContext)!;
    }
    public cacheKeyList(): CacheKeyListContext | null {
        return this.getRuleContext(0, CacheKeyListContext);
    }
    public IGNORE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
    }
    public LEAVES_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LEAVES_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_preloadKeys;
    }
}


export class AdminPartitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARTITION_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.PARTITION_SYMBOL, 0)!;
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)!;
    }
    public allOrPartitionNameList(): AllOrPartitionNameListContext {
        return this.getRuleContext(0, AllOrPartitionNameListContext)!;
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_adminPartition;
    }
}


export class ResourceGroupManagementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public createResourceGroup(): CreateResourceGroupContext | null {
        return this.getRuleContext(0, CreateResourceGroupContext);
    }
    public alterResourceGroup(): AlterResourceGroupContext | null {
        return this.getRuleContext(0, AlterResourceGroupContext);
    }
    public setResourceGroup(): SetResourceGroupContext | null {
        return this.getRuleContext(0, SetResourceGroupContext);
    }
    public dropResourceGroup(): DropResourceGroupContext | null {
        return this.getRuleContext(0, DropResourceGroupContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_resourceGroupManagement;
    }
}


export class CreateResourceGroupContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0)!;
    }
    public RESOURCE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.RESOURCE_SYMBOL, 0)!;
    }
    public GROUP_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.GROUP_SYMBOL, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public TYPE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.TYPE_SYMBOL, 0)!;
    }
    public USER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.USER_SYMBOL, 0);
    }
    public SYSTEM_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SYSTEM_SYMBOL, 0);
    }
    public equal(): EqualContext | null {
        return this.getRuleContext(0, EqualContext);
    }
    public resourceGroupVcpuList(): ResourceGroupVcpuListContext | null {
        return this.getRuleContext(0, ResourceGroupVcpuListContext);
    }
    public resourceGroupPriority(): ResourceGroupPriorityContext | null {
        return this.getRuleContext(0, ResourceGroupPriorityContext);
    }
    public resourceGroupEnableDisable(): ResourceGroupEnableDisableContext | null {
        return this.getRuleContext(0, ResourceGroupEnableDisableContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_createResourceGroup;
    }
}


export class ResourceGroupVcpuListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public VCPU_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.VCPU_SYMBOL, 0)!;
    }
    public vcpuNumOrRange(): VcpuNumOrRangeContext[];
    public vcpuNumOrRange(i: number): VcpuNumOrRangeContext | null;
    public vcpuNumOrRange(i?: number): VcpuNumOrRangeContext[] | VcpuNumOrRangeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(VcpuNumOrRangeContext);
        }

        return this.getRuleContext(i, VcpuNumOrRangeContext);
    }
    public equal(): EqualContext | null {
        return this.getRuleContext(0, EqualContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_resourceGroupVcpuList;
    }
}


export class VcpuNumOrRangeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INT_NUMBER(): antlr.TerminalNode[];
    public INT_NUMBER(i: number): antlr.TerminalNode | null;
    public INT_NUMBER(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.INT_NUMBER);
    	} else {
    		return this.getToken(MySQLParser.INT_NUMBER, i);
    	}
    }
    public MINUS_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MINUS_OPERATOR, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_vcpuNumOrRange;
    }
}


export class ResourceGroupPriorityContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public THREAD_PRIORITY_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.THREAD_PRIORITY_SYMBOL, 0)!;
    }
    public INT_NUMBER(): antlr.TerminalNode {
        return this.getToken(MySQLParser.INT_NUMBER, 0)!;
    }
    public equal(): EqualContext | null {
        return this.getRuleContext(0, EqualContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_resourceGroupPriority;
    }
}


export class ResourceGroupEnableDisableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ENABLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ENABLE_SYMBOL, 0);
    }
    public DISABLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DISABLE_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_resourceGroupEnableDisable;
    }
}


export class AlterResourceGroupContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.ALTER_SYMBOL, 0)!;
    }
    public RESOURCE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.RESOURCE_SYMBOL, 0)!;
    }
    public GROUP_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.GROUP_SYMBOL, 0)!;
    }
    public resourceGroupRef(): ResourceGroupRefContext {
        return this.getRuleContext(0, ResourceGroupRefContext)!;
    }
    public resourceGroupVcpuList(): ResourceGroupVcpuListContext | null {
        return this.getRuleContext(0, ResourceGroupVcpuListContext);
    }
    public resourceGroupPriority(): ResourceGroupPriorityContext | null {
        return this.getRuleContext(0, ResourceGroupPriorityContext);
    }
    public resourceGroupEnableDisable(): ResourceGroupEnableDisableContext | null {
        return this.getRuleContext(0, ResourceGroupEnableDisableContext);
    }
    public FORCE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FORCE_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_alterResourceGroup;
    }
}


export class SetResourceGroupContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SET_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SET_SYMBOL, 0)!;
    }
    public RESOURCE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.RESOURCE_SYMBOL, 0)!;
    }
    public GROUP_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.GROUP_SYMBOL, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public FOR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public threadIdList(): ThreadIdListContext | null {
        return this.getRuleContext(0, ThreadIdListContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_setResourceGroup;
    }
}


export class ThreadIdListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public real_ulong_number(): Real_ulong_numberContext[];
    public real_ulong_number(i: number): Real_ulong_numberContext | null;
    public real_ulong_number(i?: number): Real_ulong_numberContext[] | Real_ulong_numberContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Real_ulong_numberContext);
        }

        return this.getRuleContext(i, Real_ulong_numberContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_threadIdList;
    }
}


export class DropResourceGroupContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.DROP_SYMBOL, 0)!;
    }
    public RESOURCE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.RESOURCE_SYMBOL, 0)!;
    }
    public GROUP_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.GROUP_SYMBOL, 0)!;
    }
    public resourceGroupRef(): ResourceGroupRefContext {
        return this.getRuleContext(0, ResourceGroupRefContext)!;
    }
    public FORCE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FORCE_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_dropResourceGroup;
    }
}


export class UtilityStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public describeStatement(): DescribeStatementContext | null {
        return this.getRuleContext(0, DescribeStatementContext);
    }
    public explainStatement(): ExplainStatementContext | null {
        return this.getRuleContext(0, ExplainStatementContext);
    }
    public helpCommand(): HelpCommandContext | null {
        return this.getRuleContext(0, HelpCommandContext);
    }
    public useCommand(): UseCommandContext | null {
        return this.getRuleContext(0, UseCommandContext);
    }
    public restartServer(): RestartServerContext | null {
        return this.getRuleContext(0, RestartServerContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_utilityStatement;
    }
}


export class DescribeStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(0, TableRefContext)!;
    }
    public EXPLAIN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EXPLAIN_SYMBOL, 0);
    }
    public DESCRIBE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DESCRIBE_SYMBOL, 0);
    }
    public DESC_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DESC_SYMBOL, 0);
    }
    public textString(): TextStringContext | null {
        return this.getRuleContext(0, TextStringContext);
    }
    public columnRef(): ColumnRefContext | null {
        return this.getRuleContext(0, ColumnRefContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_describeStatement;
    }
}


export class ExplainStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public explainableStatement(): ExplainableStatementContext {
        return this.getRuleContext(0, ExplainableStatementContext)!;
    }
    public EXPLAIN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EXPLAIN_SYMBOL, 0);
    }
    public DESCRIBE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DESCRIBE_SYMBOL, 0);
    }
    public DESC_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DESC_SYMBOL, 0);
    }
    public explainOptions(): ExplainOptionsContext | null {
        return this.getRuleContext(0, ExplainOptionsContext);
    }
    public FOR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public DATABASE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DATABASE_SYMBOL, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(0, TextOrIdentifierContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_explainStatement;
    }
}


export class ExplainOptionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FORMAT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FORMAT_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(0, TextOrIdentifierContext);
    }
    public explainInto(): ExplainIntoContext | null {
        return this.getRuleContext(0, ExplainIntoContext);
    }
    public EXTENDED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EXTENDED_SYMBOL, 0);
    }
    public ANALYZE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ANALYZE_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_explainOptions;
    }
}


export class ExplainableStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public selectStatement(): SelectStatementContext | null {
        return this.getRuleContext(0, SelectStatementContext);
    }
    public deleteStatement(): DeleteStatementContext | null {
        return this.getRuleContext(0, DeleteStatementContext);
    }
    public insertStatement(): InsertStatementContext | null {
        return this.getRuleContext(0, InsertStatementContext);
    }
    public replaceStatement(): ReplaceStatementContext | null {
        return this.getRuleContext(0, ReplaceStatementContext);
    }
    public updateStatement(): UpdateStatementContext | null {
        return this.getRuleContext(0, UpdateStatementContext);
    }
    public FOR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public CONNECTION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CONNECTION_SYMBOL, 0);
    }
    public real_ulong_number(): Real_ulong_numberContext | null {
        return this.getRuleContext(0, Real_ulong_numberContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_explainableStatement;
    }
}


export class ExplainIntoContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INTO_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.INTO_SYMBOL, 0)!;
    }
    public AT_SIGN_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.AT_SIGN_SYMBOL, 0)!;
    }
    public textOrIdentifier(): TextOrIdentifierContext {
        return this.getRuleContext(0, TextOrIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_explainInto;
    }
}


export class HelpCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public HELP_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.HELP_SYMBOL, 0)!;
    }
    public textOrIdentifier(): TextOrIdentifierContext {
        return this.getRuleContext(0, TextOrIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_helpCommand;
    }
}


export class UseCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public USE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.USE_SYMBOL, 0)!;
    }
    public schemaRef(): SchemaRefContext {
        return this.getRuleContext(0, SchemaRefContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_useCommand;
    }
}


export class RestartServerContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RESTART_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.RESTART_SYMBOL, 0)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_restartServer;
    }
}


export class ExprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_expr;
    }
    public override copyFrom(ctx: ExprContext): void {
        super.copyFrom(ctx);
    }
}
export class ExprOrContext extends ExprContext {
    public _op?: Token | null;
    public constructor(ctx: ExprContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public expr(): ExprContext[];
    public expr(i: number): ExprContext | null;
    public expr(i?: number): ExprContext[] | ExprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExprContext);
        }

        return this.getRuleContext(i, ExprContext);
    }
    public OR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OR_SYMBOL, 0);
    }
    public LOGICAL_OR_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LOGICAL_OR_OPERATOR, 0);
    }
}
export class ExprNotContext extends ExprContext {
    public constructor(ctx: ExprContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public NOT_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.NOT_SYMBOL, 0)!;
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
}
export class ExprIsContext extends ExprContext {
    public _type_?: Token | null;
    public constructor(ctx: ExprContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public boolPri(): BoolPriContext {
        return this.getRuleContext(0, BoolPriContext)!;
    }
    public IS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.IS_SYMBOL, 0);
    }
    public TRUE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TRUE_SYMBOL, 0);
    }
    public FALSE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FALSE_SYMBOL, 0);
    }
    public UNKNOWN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.UNKNOWN_SYMBOL, 0);
    }
    public notRule(): NotRuleContext | null {
        return this.getRuleContext(0, NotRuleContext);
    }
}
export class ExprAndContext extends ExprContext {
    public _op?: Token | null;
    public constructor(ctx: ExprContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public expr(): ExprContext[];
    public expr(i: number): ExprContext | null;
    public expr(i?: number): ExprContext[] | ExprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExprContext);
        }

        return this.getRuleContext(i, ExprContext);
    }
    public AND_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.AND_SYMBOL, 0);
    }
    public LOGICAL_AND_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LOGICAL_AND_OPERATOR, 0);
    }
}
export class ExprXorContext extends ExprContext {
    public constructor(ctx: ExprContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public expr(): ExprContext[];
    public expr(i: number): ExprContext | null;
    public expr(i?: number): ExprContext[] | ExprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExprContext);
        }

        return this.getRuleContext(i, ExprContext);
    }
    public XOR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.XOR_SYMBOL, 0)!;
    }
}


export class BoolPriContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_boolPri;
    }
    public override copyFrom(ctx: BoolPriContext): void {
        super.copyFrom(ctx);
    }
}
export class PrimaryExprPredicateContext extends BoolPriContext {
    public constructor(ctx: BoolPriContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public predicate(): PredicateContext {
        return this.getRuleContext(0, PredicateContext)!;
    }
}
export class PrimaryExprCompareContext extends BoolPriContext {
    public constructor(ctx: BoolPriContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public boolPri(): BoolPriContext {
        return this.getRuleContext(0, BoolPriContext)!;
    }
    public compOp(): CompOpContext {
        return this.getRuleContext(0, CompOpContext)!;
    }
    public predicate(): PredicateContext {
        return this.getRuleContext(0, PredicateContext)!;
    }
}
export class PrimaryExprAllAnyContext extends BoolPriContext {
    public constructor(ctx: BoolPriContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public boolPri(): BoolPriContext {
        return this.getRuleContext(0, BoolPriContext)!;
    }
    public compOp(): CompOpContext {
        return this.getRuleContext(0, CompOpContext)!;
    }
    public subquery(): SubqueryContext {
        return this.getRuleContext(0, SubqueryContext)!;
    }
    public ALL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public ANY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ANY_SYMBOL, 0);
    }
}
export class PrimaryExprIsNullContext extends BoolPriContext {
    public constructor(ctx: BoolPriContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public boolPri(): BoolPriContext {
        return this.getRuleContext(0, BoolPriContext)!;
    }
    public IS_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.IS_SYMBOL, 0)!;
    }
    public NULL_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.NULL_SYMBOL, 0)!;
    }
    public notRule(): NotRuleContext | null {
        return this.getRuleContext(0, NotRuleContext);
    }
}


export class CompOpContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQUAL_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public NULL_SAFE_EQUAL_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NULL_SAFE_EQUAL_OPERATOR, 0);
    }
    public GREATER_OR_EQUAL_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.GREATER_OR_EQUAL_OPERATOR, 0);
    }
    public GREATER_THAN_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.GREATER_THAN_OPERATOR, 0);
    }
    public LESS_OR_EQUAL_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LESS_OR_EQUAL_OPERATOR, 0);
    }
    public LESS_THAN_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LESS_THAN_OPERATOR, 0);
    }
    public NOT_EQUAL_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NOT_EQUAL_OPERATOR, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_compOp;
    }
}


export class PredicateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public bitExpr(): BitExprContext[];
    public bitExpr(i: number): BitExprContext | null;
    public bitExpr(i?: number): BitExprContext[] | BitExprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(BitExprContext);
        }

        return this.getRuleContext(i, BitExprContext);
    }
    public predicateOperations(): PredicateOperationsContext | null {
        return this.getRuleContext(0, PredicateOperationsContext);
    }
    public MEMBER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MEMBER_SYMBOL, 0);
    }
    public simpleExprWithParentheses(): SimpleExprWithParenthesesContext | null {
        return this.getRuleContext(0, SimpleExprWithParenthesesContext);
    }
    public SOUNDS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOUNDS_SYMBOL, 0);
    }
    public LIKE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LIKE_SYMBOL, 0);
    }
    public notRule(): NotRuleContext | null {
        return this.getRuleContext(0, NotRuleContext);
    }
    public OF_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OF_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_predicate;
    }
}


export class PredicateOperationsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_predicateOperations;
    }
    public override copyFrom(ctx: PredicateOperationsContext): void {
        super.copyFrom(ctx);
    }
}
export class PredicateExprRegexContext extends PredicateOperationsContext {
    public constructor(ctx: PredicateOperationsContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public REGEXP_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.REGEXP_SYMBOL, 0)!;
    }
    public bitExpr(): BitExprContext {
        return this.getRuleContext(0, BitExprContext)!;
    }
}
export class PredicateExprBetweenContext extends PredicateOperationsContext {
    public constructor(ctx: PredicateOperationsContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public BETWEEN_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.BETWEEN_SYMBOL, 0)!;
    }
    public bitExpr(): BitExprContext {
        return this.getRuleContext(0, BitExprContext)!;
    }
    public AND_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.AND_SYMBOL, 0)!;
    }
    public predicate(): PredicateContext {
        return this.getRuleContext(0, PredicateContext)!;
    }
}
export class PredicateExprInContext extends PredicateOperationsContext {
    public constructor(ctx: PredicateOperationsContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public IN_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.IN_SYMBOL, 0)!;
    }
    public subquery(): SubqueryContext | null {
        return this.getRuleContext(0, SubqueryContext);
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public exprList(): ExprListContext | null {
        return this.getRuleContext(0, ExprListContext);
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
}
export class PredicateExprLikeContext extends PredicateOperationsContext {
    public constructor(ctx: PredicateOperationsContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LIKE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.LIKE_SYMBOL, 0)!;
    }
    public simpleExpr(): SimpleExprContext[];
    public simpleExpr(i: number): SimpleExprContext | null;
    public simpleExpr(i?: number): SimpleExprContext[] | SimpleExprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SimpleExprContext);
        }

        return this.getRuleContext(i, SimpleExprContext);
    }
    public ESCAPE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ESCAPE_SYMBOL, 0);
    }
}


export class BitExprContext extends antlr.ParserRuleContext {
    public _op?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public simpleExpr(): SimpleExprContext | null {
        return this.getRuleContext(0, SimpleExprContext);
    }
    public bitExpr(): BitExprContext[];
    public bitExpr(i: number): BitExprContext | null;
    public bitExpr(i?: number): BitExprContext[] | BitExprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(BitExprContext);
        }

        return this.getRuleContext(i, BitExprContext);
    }
    public BITWISE_XOR_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BITWISE_XOR_OPERATOR, 0);
    }
    public MULT_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MULT_OPERATOR, 0);
    }
    public DIV_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DIV_OPERATOR, 0);
    }
    public MOD_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MOD_OPERATOR, 0);
    }
    public DIV_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DIV_SYMBOL, 0);
    }
    public MOD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MOD_SYMBOL, 0);
    }
    public PLUS_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PLUS_OPERATOR, 0);
    }
    public MINUS_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MINUS_OPERATOR, 0);
    }
    public SHIFT_LEFT_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SHIFT_LEFT_OPERATOR, 0);
    }
    public SHIFT_RIGHT_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SHIFT_RIGHT_OPERATOR, 0);
    }
    public BITWISE_AND_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BITWISE_AND_OPERATOR, 0);
    }
    public BITWISE_OR_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BITWISE_OR_OPERATOR, 0);
    }
    public INTERVAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INTERVAL_SYMBOL, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(0, ExprContext);
    }
    public interval(): IntervalContext | null {
        return this.getRuleContext(0, IntervalContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_bitExpr;
    }
}


export class SimpleExprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_simpleExpr;
    }
    public override copyFrom(ctx: SimpleExprContext): void {
        super.copyFrom(ctx);
    }
}
export class SimpleExprConvertContext extends SimpleExprContext {
    public constructor(ctx: SimpleExprContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CONVERT_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CONVERT_SYMBOL, 0)!;
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)!;
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public COMMA_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.COMMA_SYMBOL, 0)!;
    }
    public castType(): CastTypeContext {
        return this.getRuleContext(0, CastTypeContext)!;
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)!;
    }
}
export class SimpleExprCastContext extends SimpleExprContext {
    public constructor(ctx: SimpleExprContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CAST_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CAST_SYMBOL, 0)!;
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)!;
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public AS_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.AS_SYMBOL, 0)!;
    }
    public castType(): CastTypeContext {
        return this.getRuleContext(0, CastTypeContext)!;
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)!;
    }
    public AT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.AT_SYMBOL, 0);
    }
    public LOCAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
    }
    public arrayCast(): ArrayCastContext | null {
        return this.getRuleContext(0, ArrayCastContext);
    }
}
export class SimpleExprUnaryContext extends SimpleExprContext {
    public _op?: Token | null;
    public constructor(ctx: SimpleExprContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public simpleExpr(): SimpleExprContext {
        return this.getRuleContext(0, SimpleExprContext)!;
    }
    public PLUS_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PLUS_OPERATOR, 0);
    }
    public MINUS_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MINUS_OPERATOR, 0);
    }
    public BITWISE_NOT_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BITWISE_NOT_OPERATOR, 0);
    }
}
export class SimpleExpressionRValueContext extends SimpleExprContext {
    public constructor(ctx: SimpleExprContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public rvalueSystemOrUserVariable(): RvalueSystemOrUserVariableContext {
        return this.getRuleContext(0, RvalueSystemOrUserVariableContext)!;
    }
}
export class SimpleExprOdbcContext extends SimpleExprContext {
    public constructor(ctx: SimpleExprContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public OPEN_CURLY_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPEN_CURLY_SYMBOL, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public CLOSE_CURLY_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CLOSE_CURLY_SYMBOL, 0)!;
    }
}
export class SimpleExprRuntimeFunctionContext extends SimpleExprContext {
    public constructor(ctx: SimpleExprContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public runtimeFunctionCall(): RuntimeFunctionCallContext {
        return this.getRuleContext(0, RuntimeFunctionCallContext)!;
    }
}
export class SimpleExprFunctionContext extends SimpleExprContext {
    public constructor(ctx: SimpleExprContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public functionCall(): FunctionCallContext {
        return this.getRuleContext(0, FunctionCallContext)!;
    }
}
export class SimpleExprCollateContext extends SimpleExprContext {
    public constructor(ctx: SimpleExprContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public simpleExpr(): SimpleExprContext {
        return this.getRuleContext(0, SimpleExprContext)!;
    }
    public COLLATE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.COLLATE_SYMBOL, 0)!;
    }
    public textOrIdentifier(): TextOrIdentifierContext {
        return this.getRuleContext(0, TextOrIdentifierContext)!;
    }
}
export class SimpleExprMatchContext extends SimpleExprContext {
    public constructor(ctx: SimpleExprContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public MATCH_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.MATCH_SYMBOL, 0)!;
    }
    public identListArg(): IdentListArgContext {
        return this.getRuleContext(0, IdentListArgContext)!;
    }
    public AGAINST_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.AGAINST_SYMBOL, 0)!;
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)!;
    }
    public bitExpr(): BitExprContext {
        return this.getRuleContext(0, BitExprContext)!;
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)!;
    }
    public fulltextOptions(): FulltextOptionsContext | null {
        return this.getRuleContext(0, FulltextOptionsContext);
    }
}
export class SimpleExprWindowingFunctionContext extends SimpleExprContext {
    public constructor(ctx: SimpleExprContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public windowFunctionCall(): WindowFunctionCallContext {
        return this.getRuleContext(0, WindowFunctionCallContext)!;
    }
}
export class SimpleExprBinaryContext extends SimpleExprContext {
    public constructor(ctx: SimpleExprContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public BINARY_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.BINARY_SYMBOL, 0)!;
    }
    public simpleExpr(): SimpleExprContext {
        return this.getRuleContext(0, SimpleExprContext)!;
    }
}
export class SimpleExprColumnRefContext extends SimpleExprContext {
    public constructor(ctx: SimpleExprContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnRef(): ColumnRefContext {
        return this.getRuleContext(0, ColumnRefContext)!;
    }
    public jsonOperator(): JsonOperatorContext | null {
        return this.getRuleContext(0, JsonOperatorContext);
    }
}
export class SimpleExprParamMarkerContext extends SimpleExprContext {
    public constructor(ctx: SimpleExprContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public PARAM_MARKER(): antlr.TerminalNode {
        return this.getToken(MySQLParser.PARAM_MARKER, 0)!;
    }
}
export class SimpleExprSumContext extends SimpleExprContext {
    public constructor(ctx: SimpleExprContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public sumExpr(): SumExprContext {
        return this.getRuleContext(0, SumExprContext)!;
    }
}
export class SimpleExprCastTimeContext extends SimpleExprContext {
    public constructor(ctx: SimpleExprContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CAST_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CAST_SYMBOL, 0)!;
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)!;
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public AT_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.AT_SYMBOL, 0)!;
    }
    public TIME_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.TIME_SYMBOL, 0)!;
    }
    public ZONE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.ZONE_SYMBOL, 0)!;
    }
    public textStringLiteral(): TextStringLiteralContext {
        return this.getRuleContext(0, TextStringLiteralContext)!;
    }
    public AS_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.AS_SYMBOL, 0)!;
    }
    public DATETIME_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.DATETIME_SYMBOL, 0)!;
    }
    public typeDatetimePrecision(): TypeDatetimePrecisionContext {
        return this.getRuleContext(0, TypeDatetimePrecisionContext)!;
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)!;
    }
    public INTERVAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INTERVAL_SYMBOL, 0);
    }
}
export class SimpleExprConvertUsingContext extends SimpleExprContext {
    public constructor(ctx: SimpleExprContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CONVERT_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CONVERT_SYMBOL, 0)!;
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)!;
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public USING_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.USING_SYMBOL, 0)!;
    }
    public charsetName(): CharsetNameContext {
        return this.getRuleContext(0, CharsetNameContext)!;
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)!;
    }
}
export class SimpleExprSubQueryContext extends SimpleExprContext {
    public constructor(ctx: SimpleExprContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public subquery(): SubqueryContext {
        return this.getRuleContext(0, SubqueryContext)!;
    }
    public EXISTS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EXISTS_SYMBOL, 0);
    }
}
export class SimpleExprGroupingOperationContext extends SimpleExprContext {
    public constructor(ctx: SimpleExprContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public groupingOperation(): GroupingOperationContext {
        return this.getRuleContext(0, GroupingOperationContext)!;
    }
}
export class SimpleExprNotContext extends SimpleExprContext {
    public constructor(ctx: SimpleExprContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public not2Rule(): Not2RuleContext {
        return this.getRuleContext(0, Not2RuleContext)!;
    }
    public simpleExpr(): SimpleExprContext {
        return this.getRuleContext(0, SimpleExprContext)!;
    }
}
export class SimpleExprValuesContext extends SimpleExprContext {
    public constructor(ctx: SimpleExprContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public VALUES_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.VALUES_SYMBOL, 0)!;
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)!;
    }
    public simpleIdentifier(): SimpleIdentifierContext {
        return this.getRuleContext(0, SimpleIdentifierContext)!;
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)!;
    }
}
export class SimpleExprUserVariableAssignmentContext extends SimpleExprContext {
    public constructor(ctx: SimpleExprContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public inExpressionUserVariableAssignment(): InExpressionUserVariableAssignmentContext {
        return this.getRuleContext(0, InExpressionUserVariableAssignmentContext)!;
    }
}
export class SimpleExprDefaultContext extends SimpleExprContext {
    public constructor(ctx: SimpleExprContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DEFAULT_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0)!;
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)!;
    }
    public simpleIdentifier(): SimpleIdentifierContext {
        return this.getRuleContext(0, SimpleIdentifierContext)!;
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)!;
    }
}
export class SimpleExprListContext extends SimpleExprContext {
    public constructor(ctx: SimpleExprContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)!;
    }
    public exprList(): ExprListContext {
        return this.getRuleContext(0, ExprListContext)!;
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)!;
    }
    public ROW_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ROW_SYMBOL, 0);
    }
}
export class SimpleExprIntervalContext extends SimpleExprContext {
    public constructor(ctx: SimpleExprContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public INTERVAL_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.INTERVAL_SYMBOL, 0)!;
    }
    public expr(): ExprContext[];
    public expr(i: number): ExprContext | null;
    public expr(i?: number): ExprContext[] | ExprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExprContext);
        }

        return this.getRuleContext(i, ExprContext);
    }
    public interval(): IntervalContext {
        return this.getRuleContext(0, IntervalContext)!;
    }
    public PLUS_OPERATOR(): antlr.TerminalNode {
        return this.getToken(MySQLParser.PLUS_OPERATOR, 0)!;
    }
}
export class SimpleExprCaseContext extends SimpleExprContext {
    public constructor(ctx: SimpleExprContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CASE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CASE_SYMBOL, 0)!;
    }
    public END_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.END_SYMBOL, 0)!;
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(0, ExprContext);
    }
    public whenExpression(): WhenExpressionContext[];
    public whenExpression(i: number): WhenExpressionContext | null;
    public whenExpression(i?: number): WhenExpressionContext[] | WhenExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(WhenExpressionContext);
        }

        return this.getRuleContext(i, WhenExpressionContext);
    }
    public thenExpression(): ThenExpressionContext[];
    public thenExpression(i: number): ThenExpressionContext | null;
    public thenExpression(i?: number): ThenExpressionContext[] | ThenExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ThenExpressionContext);
        }

        return this.getRuleContext(i, ThenExpressionContext);
    }
    public elseExpression(): ElseExpressionContext | null {
        return this.getRuleContext(0, ElseExpressionContext);
    }
}
export class SimpleExprConcatContext extends SimpleExprContext {
    public constructor(ctx: SimpleExprContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public simpleExpr(): SimpleExprContext[];
    public simpleExpr(i: number): SimpleExprContext | null;
    public simpleExpr(i?: number): SimpleExprContext[] | SimpleExprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SimpleExprContext);
        }

        return this.getRuleContext(i, SimpleExprContext);
    }
    public CONCAT_PIPES_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CONCAT_PIPES_SYMBOL, 0)!;
    }
}
export class SimpleExprLiteralContext extends SimpleExprContext {
    public constructor(ctx: SimpleExprContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public literalOrNull(): LiteralOrNullContext {
        return this.getRuleContext(0, LiteralOrNullContext)!;
    }
}


export class ArrayCastContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ARRAY_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.ARRAY_SYMBOL, 0)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_arrayCast;
    }
}


export class JsonOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public JSON_SEPARATOR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.JSON_SEPARATOR_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext {
        return this.getRuleContext(0, TextStringLiteralContext)!;
    }
    public JSON_UNQUOTED_SEPARATOR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.JSON_UNQUOTED_SEPARATOR_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_jsonOperator;
    }
}


export class SumExprContext extends antlr.ParserRuleContext {
    public _name?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public inSumExpr(): InSumExprContext | null {
        return this.getRuleContext(0, InSumExprContext);
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public AVG_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.AVG_SYMBOL, 0);
    }
    public DISTINCT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DISTINCT_SYMBOL, 0);
    }
    public windowingClause(): WindowingClauseContext | null {
        return this.getRuleContext(0, WindowingClauseContext);
    }
    public BIT_AND_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BIT_AND_SYMBOL, 0);
    }
    public BIT_OR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BIT_OR_SYMBOL, 0);
    }
    public BIT_XOR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BIT_XOR_SYMBOL, 0);
    }
    public jsonFunction(): JsonFunctionContext | null {
        return this.getRuleContext(0, JsonFunctionContext);
    }
    public ST_COLLECT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ST_COLLECT_SYMBOL, 0);
    }
    public COUNT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COUNT_SYMBOL, 0);
    }
    public MULT_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MULT_OPERATOR, 0);
    }
    public exprList(): ExprListContext | null {
        return this.getRuleContext(0, ExprListContext);
    }
    public ALL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public MIN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MIN_SYMBOL, 0);
    }
    public MAX_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MAX_SYMBOL, 0);
    }
    public STD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.STD_SYMBOL, 0);
    }
    public VARIANCE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.VARIANCE_SYMBOL, 0);
    }
    public STDDEV_SAMP_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.STDDEV_SAMP_SYMBOL, 0);
    }
    public VAR_SAMP_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.VAR_SAMP_SYMBOL, 0);
    }
    public SUM_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SUM_SYMBOL, 0);
    }
    public GROUP_CONCAT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.GROUP_CONCAT_SYMBOL, 0);
    }
    public orderClause(): OrderClauseContext | null {
        return this.getRuleContext(0, OrderClauseContext);
    }
    public SEPARATOR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SEPARATOR_SYMBOL, 0);
    }
    public textString(): TextStringContext | null {
        return this.getRuleContext(0, TextStringContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_sumExpr;
    }
}


export class GroupingOperationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GROUPING_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.GROUPING_SYMBOL, 0)!;
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)!;
    }
    public exprList(): ExprListContext {
        return this.getRuleContext(0, ExprListContext)!;
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_groupingOperation;
    }
}


export class WindowFunctionCallContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public parentheses(): ParenthesesContext | null {
        return this.getRuleContext(0, ParenthesesContext);
    }
    public windowingClause(): WindowingClauseContext {
        return this.getRuleContext(0, WindowingClauseContext)!;
    }
    public ROW_NUMBER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ROW_NUMBER_SYMBOL, 0);
    }
    public RANK_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RANK_SYMBOL, 0);
    }
    public DENSE_RANK_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DENSE_RANK_SYMBOL, 0);
    }
    public CUME_DIST_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CUME_DIST_SYMBOL, 0);
    }
    public PERCENT_RANK_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PERCENT_RANK_SYMBOL, 0);
    }
    public NTILE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NTILE_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public stableInteger(): StableIntegerContext | null {
        return this.getRuleContext(0, StableIntegerContext);
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public simpleExprWithParentheses(): SimpleExprWithParenthesesContext | null {
        return this.getRuleContext(0, SimpleExprWithParenthesesContext);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(0, ExprContext);
    }
    public LEAD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LEAD_SYMBOL, 0);
    }
    public LAG_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LAG_SYMBOL, 0);
    }
    public leadLagInfo(): LeadLagInfoContext | null {
        return this.getRuleContext(0, LeadLagInfoContext);
    }
    public nullTreatment(): NullTreatmentContext | null {
        return this.getRuleContext(0, NullTreatmentContext);
    }
    public exprWithParentheses(): ExprWithParenthesesContext | null {
        return this.getRuleContext(0, ExprWithParenthesesContext);
    }
    public FIRST_VALUE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FIRST_VALUE_SYMBOL, 0);
    }
    public LAST_VALUE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LAST_VALUE_SYMBOL, 0);
    }
    public NTH_VALUE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NTH_VALUE_SYMBOL, 0);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
    }
    public simpleExpr(): SimpleExprContext | null {
        return this.getRuleContext(0, SimpleExprContext);
    }
    public FROM_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public FIRST_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FIRST_SYMBOL, 0);
    }
    public LAST_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LAST_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_windowFunctionCall;
    }
}


export class SamplingMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SYSTEM_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SYSTEM_SYMBOL, 0);
    }
    public BERNOULLI_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BERNOULLI_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_samplingMethod;
    }
}


export class SamplingPercentageContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ulonglongNumber(): UlonglongNumberContext | null {
        return this.getRuleContext(0, UlonglongNumberContext);
    }
    public AT_SIGN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.AT_SIGN_SYMBOL, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(0, TextOrIdentifierContext);
    }
    public PARAM_MARKER(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PARAM_MARKER, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_samplingPercentage;
    }
}


export class TablesampleClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABLESAMPLE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.TABLESAMPLE_SYMBOL, 0)!;
    }
    public samplingMethod(): SamplingMethodContext {
        return this.getRuleContext(0, SamplingMethodContext)!;
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)!;
    }
    public samplingPercentage(): SamplingPercentageContext {
        return this.getRuleContext(0, SamplingPercentageContext)!;
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_tablesampleClause;
    }
}


export class WindowingClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OVER_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OVER_SYMBOL, 0)!;
    }
    public windowName(): WindowNameContext | null {
        return this.getRuleContext(0, WindowNameContext);
    }
    public windowSpec(): WindowSpecContext | null {
        return this.getRuleContext(0, WindowSpecContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_windowingClause;
    }
}


export class LeadLagInfoContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public ulonglongNumber(): UlonglongNumberContext | null {
        return this.getRuleContext(0, UlonglongNumberContext);
    }
    public PARAM_MARKER(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PARAM_MARKER, 0);
    }
    public stableInteger(): StableIntegerContext | null {
        return this.getRuleContext(0, StableIntegerContext);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(0, ExprContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_leadLagInfo;
    }
}


export class StableIntegerContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public int64Literal(): Int64LiteralContext | null {
        return this.getRuleContext(0, Int64LiteralContext);
    }
    public paramOrVar(): ParamOrVarContext | null {
        return this.getRuleContext(0, ParamOrVarContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_stableInteger;
    }
}


export class ParamOrVarContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARAM_MARKER(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PARAM_MARKER, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public AT_SIGN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.AT_SIGN_SYMBOL, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(0, TextOrIdentifierContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_paramOrVar;
    }
}


export class NullTreatmentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NULLS_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.NULLS_SYMBOL, 0)!;
    }
    public RESPECT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RESPECT_SYMBOL, 0);
    }
    public IGNORE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_nullTreatment;
    }
}


export class JsonFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public JSON_ARRAYAGG_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.JSON_ARRAYAGG_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)!;
    }
    public inSumExpr(): InSumExprContext[];
    public inSumExpr(i: number): InSumExprContext | null;
    public inSumExpr(i?: number): InSumExprContext[] | InSumExprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(InSumExprContext);
        }

        return this.getRuleContext(i, InSumExprContext);
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)!;
    }
    public windowingClause(): WindowingClauseContext | null {
        return this.getRuleContext(0, WindowingClauseContext);
    }
    public JSON_OBJECTAGG_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.JSON_OBJECTAGG_SYMBOL, 0);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_jsonFunction;
    }
}


export class InSumExprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public ALL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_inSumExpr;
    }
}


export class IdentListArgContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identList(): IdentListContext {
        return this.getRuleContext(0, IdentListContext)!;
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_identListArg;
    }
}


export class IdentListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public simpleIdentifier(): SimpleIdentifierContext[];
    public simpleIdentifier(i: number): SimpleIdentifierContext | null;
    public simpleIdentifier(i?: number): SimpleIdentifierContext[] | SimpleIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SimpleIdentifierContext);
        }

        return this.getRuleContext(i, SimpleIdentifierContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_identList;
    }
}


export class FulltextOptionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.IN_SYMBOL, 0);
    }
    public BOOLEAN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BOOLEAN_SYMBOL, 0);
    }
    public MODE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MODE_SYMBOL, 0);
    }
    public NATURAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NATURAL_SYMBOL, 0);
    }
    public LANGUAGE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LANGUAGE_SYMBOL, 0);
    }
    public WITH_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public QUERY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.QUERY_SYMBOL, 0);
    }
    public EXPANSION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EXPANSION_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_fulltextOptions;
    }
}


export class RuntimeFunctionCallContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CHAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CHAR_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public exprList(): ExprListContext | null {
        return this.getRuleContext(0, ExprListContext);
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public USING_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.USING_SYMBOL, 0);
    }
    public charsetName(): CharsetNameContext | null {
        return this.getRuleContext(0, CharsetNameContext);
    }
    public CURRENT_USER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CURRENT_USER_SYMBOL, 0);
    }
    public parentheses(): ParenthesesContext | null {
        return this.getRuleContext(0, ParenthesesContext);
    }
    public DATE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DATE_SYMBOL, 0);
    }
    public exprWithParentheses(): ExprWithParenthesesContext | null {
        return this.getRuleContext(0, ExprWithParenthesesContext);
    }
    public DAY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DAY_SYMBOL, 0);
    }
    public HOUR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.HOUR_SYMBOL, 0);
    }
    public INSERT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INSERT_SYMBOL, 0);
    }
    public expr(): ExprContext[];
    public expr(i: number): ExprContext | null;
    public expr(i?: number): ExprContext[] | ExprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExprContext);
        }

        return this.getRuleContext(i, ExprContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public INTERVAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INTERVAL_SYMBOL, 0);
    }
    public JSON_VALUE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.JSON_VALUE_SYMBOL, 0);
    }
    public simpleExpr(): SimpleExprContext | null {
        return this.getRuleContext(0, SimpleExprContext);
    }
    public textLiteral(): TextLiteralContext | null {
        return this.getRuleContext(0, TextLiteralContext);
    }
    public onEmptyOrError(): OnEmptyOrErrorContext | null {
        return this.getRuleContext(0, OnEmptyOrErrorContext);
    }
    public returningType(): ReturningTypeContext | null {
        return this.getRuleContext(0, ReturningTypeContext);
    }
    public LEFT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LEFT_SYMBOL, 0);
    }
    public MINUTE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MINUTE_SYMBOL, 0);
    }
    public MONTH_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MONTH_SYMBOL, 0);
    }
    public RIGHT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RIGHT_SYMBOL, 0);
    }
    public SECOND_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SECOND_SYMBOL, 0);
    }
    public TIME_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TIME_SYMBOL, 0);
    }
    public TIMESTAMP_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TIMESTAMP_SYMBOL, 0);
    }
    public trimFunction(): TrimFunctionContext | null {
        return this.getRuleContext(0, TrimFunctionContext);
    }
    public userFunction(): UserFunctionContext | null {
        return this.getRuleContext(0, UserFunctionContext);
    }
    public VALUES_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.VALUES_SYMBOL, 0);
    }
    public YEAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.YEAR_SYMBOL, 0);
    }
    public ADDDATE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ADDDATE_SYMBOL, 0);
    }
    public SUBDATE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SUBDATE_SYMBOL, 0);
    }
    public interval(): IntervalContext | null {
        return this.getRuleContext(0, IntervalContext);
    }
    public CURDATE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CURDATE_SYMBOL, 0);
    }
    public CURTIME_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CURTIME_SYMBOL, 0);
    }
    public timeFunctionParameters(): TimeFunctionParametersContext | null {
        return this.getRuleContext(0, TimeFunctionParametersContext);
    }
    public DATE_ADD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DATE_ADD_SYMBOL, 0);
    }
    public DATE_SUB_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DATE_SUB_SYMBOL, 0);
    }
    public EXTRACT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EXTRACT_SYMBOL, 0);
    }
    public FROM_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public GET_FORMAT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.GET_FORMAT_SYMBOL, 0);
    }
    public dateTimeTtype(): DateTimeTtypeContext | null {
        return this.getRuleContext(0, DateTimeTtypeContext);
    }
    public LOG_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LOG_SYMBOL, 0);
    }
    public NOW_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NOW_SYMBOL, 0);
    }
    public POSITION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.POSITION_SYMBOL, 0);
    }
    public bitExpr(): BitExprContext | null {
        return this.getRuleContext(0, BitExprContext);
    }
    public IN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.IN_SYMBOL, 0);
    }
    public substringFunction(): SubstringFunctionContext | null {
        return this.getRuleContext(0, SubstringFunctionContext);
    }
    public SYSDATE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SYSDATE_SYMBOL, 0);
    }
    public intervalTimeStamp(): IntervalTimeStampContext | null {
        return this.getRuleContext(0, IntervalTimeStampContext);
    }
    public TIMESTAMPADD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TIMESTAMPADD_SYMBOL, 0);
    }
    public TIMESTAMPDIFF_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TIMESTAMPDIFF_SYMBOL, 0);
    }
    public UTC_DATE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.UTC_DATE_SYMBOL, 0);
    }
    public UTC_TIME_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.UTC_TIME_SYMBOL, 0);
    }
    public UTC_TIMESTAMP_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.UTC_TIMESTAMP_SYMBOL, 0);
    }
    public ASCII_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ASCII_SYMBOL, 0);
    }
    public CHARSET_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CHARSET_SYMBOL, 0);
    }
    public COALESCE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COALESCE_SYMBOL, 0);
    }
    public exprListWithParentheses(): ExprListWithParenthesesContext | null {
        return this.getRuleContext(0, ExprListWithParenthesesContext);
    }
    public COLLATION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COLLATION_SYMBOL, 0);
    }
    public DATABASE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DATABASE_SYMBOL, 0);
    }
    public IF_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.IF_SYMBOL, 0);
    }
    public FORMAT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FORMAT_SYMBOL, 0);
    }
    public MICROSECOND_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MICROSECOND_SYMBOL, 0);
    }
    public MOD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MOD_SYMBOL, 0);
    }
    public PASSWORD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
    }
    public QUARTER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.QUARTER_SYMBOL, 0);
    }
    public REPEAT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REPEAT_SYMBOL, 0);
    }
    public REPLACE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
    }
    public REVERSE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REVERSE_SYMBOL, 0);
    }
    public ROW_COUNT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ROW_COUNT_SYMBOL, 0);
    }
    public TRUNCATE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TRUNCATE_SYMBOL, 0);
    }
    public WEEK_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.WEEK_SYMBOL, 0);
    }
    public WEIGHT_STRING_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.WEIGHT_STRING_SYMBOL, 0);
    }
    public AS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.AS_SYMBOL, 0);
    }
    public BINARY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
    }
    public wsNumCodepoints(): WsNumCodepointsContext | null {
        return this.getRuleContext(0, WsNumCodepointsContext);
    }
    public ulong_number(): Ulong_numberContext[];
    public ulong_number(i: number): Ulong_numberContext | null;
    public ulong_number(i?: number): Ulong_numberContext[] | Ulong_numberContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Ulong_numberContext);
        }

        return this.getRuleContext(i, Ulong_numberContext);
    }
    public geometryFunction(): GeometryFunctionContext | null {
        return this.getRuleContext(0, GeometryFunctionContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_runtimeFunctionCall;
    }
}


export class ReturningTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RETURNING_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.RETURNING_SYMBOL, 0)!;
    }
    public castType(): CastTypeContext {
        return this.getRuleContext(0, CastTypeContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_returningType;
    }
}


export class GeometryFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GEOMETRYCOLLECTION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public exprList(): ExprListContext | null {
        return this.getRuleContext(0, ExprListContext);
    }
    public LINESTRING_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LINESTRING_SYMBOL, 0);
    }
    public exprListWithParentheses(): ExprListWithParenthesesContext | null {
        return this.getRuleContext(0, ExprListWithParenthesesContext);
    }
    public MULTILINESTRING_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MULTILINESTRING_SYMBOL, 0);
    }
    public MULTIPOINT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MULTIPOINT_SYMBOL, 0);
    }
    public MULTIPOLYGON_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0);
    }
    public POINT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.POINT_SYMBOL, 0);
    }
    public expr(): ExprContext[];
    public expr(i: number): ExprContext | null;
    public expr(i?: number): ExprContext[] | ExprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExprContext);
        }

        return this.getRuleContext(i, ExprContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
    }
    public POLYGON_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.POLYGON_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_geometryFunction;
    }
}


export class TimeFunctionParametersContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)!;
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)!;
    }
    public fractionalPrecision(): FractionalPrecisionContext | null {
        return this.getRuleContext(0, FractionalPrecisionContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_timeFunctionParameters;
    }
}


export class FractionalPrecisionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INT_NUMBER(): antlr.TerminalNode {
        return this.getToken(MySQLParser.INT_NUMBER, 0)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_fractionalPrecision;
    }
}


export class WeightStringLevelsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEVEL_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.LEVEL_SYMBOL, 0)!;
    }
    public real_ulong_number(): Real_ulong_numberContext[];
    public real_ulong_number(i: number): Real_ulong_numberContext | null;
    public real_ulong_number(i?: number): Real_ulong_numberContext[] | Real_ulong_numberContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Real_ulong_numberContext);
        }

        return this.getRuleContext(i, Real_ulong_numberContext);
    }
    public MINUS_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MINUS_OPERATOR, 0);
    }
    public weightStringLevelListItem(): WeightStringLevelListItemContext[];
    public weightStringLevelListItem(i: number): WeightStringLevelListItemContext | null;
    public weightStringLevelListItem(i?: number): WeightStringLevelListItemContext[] | WeightStringLevelListItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(WeightStringLevelListItemContext);
        }

        return this.getRuleContext(i, WeightStringLevelListItemContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_weightStringLevels;
    }
}


export class WeightStringLevelListItemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public real_ulong_number(): Real_ulong_numberContext {
        return this.getRuleContext(0, Real_ulong_numberContext)!;
    }
    public REVERSE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REVERSE_SYMBOL, 0);
    }
    public ASC_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ASC_SYMBOL, 0);
    }
    public DESC_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DESC_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_weightStringLevelListItem;
    }
}


export class DateTimeTtypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DATE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DATE_SYMBOL, 0);
    }
    public TIME_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TIME_SYMBOL, 0);
    }
    public DATETIME_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DATETIME_SYMBOL, 0);
    }
    public TIMESTAMP_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TIMESTAMP_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_dateTimeTtype;
    }
}


export class TrimFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TRIM_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.TRIM_SYMBOL, 0)!;
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)!;
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)!;
    }
    public expr(): ExprContext[];
    public expr(i: number): ExprContext | null;
    public expr(i?: number): ExprContext[] | ExprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExprContext);
        }

        return this.getRuleContext(i, ExprContext);
    }
    public LEADING_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LEADING_SYMBOL, 0);
    }
    public FROM_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public TRAILING_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TRAILING_SYMBOL, 0);
    }
    public BOTH_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BOTH_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_trimFunction;
    }
}


export class SubstringFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SUBSTRING_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SUBSTRING_SYMBOL, 0)!;
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)!;
    }
    public expr(): ExprContext[];
    public expr(i: number): ExprContext | null;
    public expr(i?: number): ExprContext[] | ExprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExprContext);
        }

        return this.getRuleContext(i, ExprContext);
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)!;
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public FROM_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public FOR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_substringFunction;
    }
}


export class FunctionCallContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public pureIdentifier(): PureIdentifierContext | null {
        return this.getRuleContext(0, PureIdentifierContext);
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)!;
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)!;
    }
    public udfExprList(): UdfExprListContext | null {
        return this.getRuleContext(0, UdfExprListContext);
    }
    public qualifiedIdentifier(): QualifiedIdentifierContext | null {
        return this.getRuleContext(0, QualifiedIdentifierContext);
    }
    public exprList(): ExprListContext | null {
        return this.getRuleContext(0, ExprListContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_functionCall;
    }
}


export class UdfExprListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public udfExpr(): UdfExprContext[];
    public udfExpr(i: number): UdfExprContext | null;
    public udfExpr(i?: number): UdfExprContext[] | UdfExprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UdfExprContext);
        }

        return this.getRuleContext(i, UdfExprContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_udfExprList;
    }
}


export class UdfExprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public selectAlias(): SelectAliasContext | null {
        return this.getRuleContext(0, SelectAliasContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_udfExpr;
    }
}


export class UserVariableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AT_SIGN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.AT_SIGN_SYMBOL, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(0, TextOrIdentifierContext);
    }
    public AT_TEXT_SUFFIX(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.AT_TEXT_SUFFIX, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_userVariable;
    }
}


export class InExpressionUserVariableAssignmentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public userVariable(): UserVariableContext {
        return this.getRuleContext(0, UserVariableContext)!;
    }
    public ASSIGN_OPERATOR(): antlr.TerminalNode {
        return this.getToken(MySQLParser.ASSIGN_OPERATOR, 0)!;
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_inExpressionUserVariableAssignment;
    }
}


export class RvalueSystemOrUserVariableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public userVariable(): UserVariableContext | null {
        return this.getRuleContext(0, UserVariableContext);
    }
    public AT_AT_SIGN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.AT_AT_SIGN_SYMBOL, 0);
    }
    public rvalueSystemVariable(): RvalueSystemVariableContext | null {
        return this.getRuleContext(0, RvalueSystemVariableContext);
    }
    public rvalueSystemVariableType(): RvalueSystemVariableTypeContext | null {
        return this.getRuleContext(0, RvalueSystemVariableTypeContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_rvalueSystemOrUserVariable;
    }
}


export class LvalueVariableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public lValueIdentifier(): LValueIdentifierContext | null {
        return this.getRuleContext(0, LValueIdentifierContext);
    }
    public dotIdentifier(): DotIdentifierContext | null {
        return this.getRuleContext(0, DotIdentifierContext);
    }
    public DEFAULT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_lvalueVariable;
    }
}


export class RvalueSystemVariableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textOrIdentifier(): TextOrIdentifierContext {
        return this.getRuleContext(0, TextOrIdentifierContext)!;
    }
    public dotIdentifier(): DotIdentifierContext | null {
        return this.getRuleContext(0, DotIdentifierContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_rvalueSystemVariable;
    }
}


export class WhenExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WHEN_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.WHEN_SYMBOL, 0)!;
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_whenExpression;
    }
}


export class ThenExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public THEN_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.THEN_SYMBOL, 0)!;
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_thenExpression;
    }
}


export class ElseExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ELSE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.ELSE_SYMBOL, 0)!;
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_elseExpression;
    }
}


export class CastTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BINARY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
    }
    public fieldLength(): FieldLengthContext | null {
        return this.getRuleContext(0, FieldLengthContext);
    }
    public CHAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CHAR_SYMBOL, 0);
    }
    public charsetWithOptBinary(): CharsetWithOptBinaryContext | null {
        return this.getRuleContext(0, CharsetWithOptBinaryContext);
    }
    public nchar(): NcharContext | null {
        return this.getRuleContext(0, NcharContext);
    }
    public SIGNED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SIGNED_SYMBOL, 0);
    }
    public INT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INT_SYMBOL, 0);
    }
    public UNSIGNED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.UNSIGNED_SYMBOL, 0);
    }
    public DATE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DATE_SYMBOL, 0);
    }
    public YEAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.YEAR_SYMBOL, 0);
    }
    public TIME_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TIME_SYMBOL, 0);
    }
    public typeDatetimePrecision(): TypeDatetimePrecisionContext | null {
        return this.getRuleContext(0, TypeDatetimePrecisionContext);
    }
    public DATETIME_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DATETIME_SYMBOL, 0);
    }
    public DECIMAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DECIMAL_SYMBOL, 0);
    }
    public floatOptions(): FloatOptionsContext | null {
        return this.getRuleContext(0, FloatOptionsContext);
    }
    public JSON_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.JSON_SYMBOL, 0);
    }
    public realType(): RealTypeContext | null {
        return this.getRuleContext(0, RealTypeContext);
    }
    public FLOAT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FLOAT_SYMBOL, 0);
    }
    public standardFloatOptions(): StandardFloatOptionsContext | null {
        return this.getRuleContext(0, StandardFloatOptionsContext);
    }
    public POINT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.POINT_SYMBOL, 0);
    }
    public LINESTRING_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LINESTRING_SYMBOL, 0);
    }
    public POLYGON_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.POLYGON_SYMBOL, 0);
    }
    public MULTIPOINT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MULTIPOINT_SYMBOL, 0);
    }
    public MULTILINESTRING_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MULTILINESTRING_SYMBOL, 0);
    }
    public MULTIPOLYGON_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0);
    }
    public GEOMETRYCOLLECTION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_castType;
    }
}


export class ExprListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext[];
    public expr(i: number): ExprContext | null;
    public expr(i?: number): ExprContext[] | ExprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExprContext);
        }

        return this.getRuleContext(i, ExprContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_exprList;
    }
}


export class CharsetContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CHAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CHAR_SYMBOL, 0);
    }
    public SET_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SET_SYMBOL, 0);
    }
    public CHARSET_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CHARSET_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_charset;
    }
}


export class NotRuleContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NOT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NOT_SYMBOL, 0);
    }
    public NOT2_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NOT2_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_notRule;
    }
}


export class Not2RuleContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOGICAL_NOT_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LOGICAL_NOT_OPERATOR, 0);
    }
    public NOT2_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NOT2_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_not2Rule;
    }
}


export class IntervalContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public intervalTimeStamp(): IntervalTimeStampContext | null {
        return this.getRuleContext(0, IntervalTimeStampContext);
    }
    public SECOND_MICROSECOND_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SECOND_MICROSECOND_SYMBOL, 0);
    }
    public MINUTE_MICROSECOND_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MINUTE_MICROSECOND_SYMBOL, 0);
    }
    public MINUTE_SECOND_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MINUTE_SECOND_SYMBOL, 0);
    }
    public HOUR_MICROSECOND_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.HOUR_MICROSECOND_SYMBOL, 0);
    }
    public HOUR_SECOND_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.HOUR_SECOND_SYMBOL, 0);
    }
    public HOUR_MINUTE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.HOUR_MINUTE_SYMBOL, 0);
    }
    public DAY_MICROSECOND_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DAY_MICROSECOND_SYMBOL, 0);
    }
    public DAY_SECOND_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DAY_SECOND_SYMBOL, 0);
    }
    public DAY_MINUTE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DAY_MINUTE_SYMBOL, 0);
    }
    public DAY_HOUR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DAY_HOUR_SYMBOL, 0);
    }
    public YEAR_MONTH_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.YEAR_MONTH_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_interval;
    }
}


export class IntervalTimeStampContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MICROSECOND_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MICROSECOND_SYMBOL, 0);
    }
    public SECOND_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SECOND_SYMBOL, 0);
    }
    public MINUTE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MINUTE_SYMBOL, 0);
    }
    public HOUR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.HOUR_SYMBOL, 0);
    }
    public DAY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DAY_SYMBOL, 0);
    }
    public WEEK_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.WEEK_SYMBOL, 0);
    }
    public MONTH_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MONTH_SYMBOL, 0);
    }
    public QUARTER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.QUARTER_SYMBOL, 0);
    }
    public YEAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.YEAR_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_intervalTimeStamp;
    }
}


export class ExprListWithParenthesesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)!;
    }
    public exprList(): ExprListContext {
        return this.getRuleContext(0, ExprListContext)!;
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_exprListWithParentheses;
    }
}


export class ExprWithParenthesesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)!;
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_exprWithParentheses;
    }
}


export class SimpleExprWithParenthesesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)!;
    }
    public simpleExpr(): SimpleExprContext {
        return this.getRuleContext(0, SimpleExprContext)!;
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_simpleExprWithParentheses;
    }
}


export class OrderListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public orderExpression(): OrderExpressionContext[];
    public orderExpression(i: number): OrderExpressionContext | null;
    public orderExpression(i?: number): OrderExpressionContext[] | OrderExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(OrderExpressionContext);
        }

        return this.getRuleContext(i, OrderExpressionContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_orderList;
    }
}


export class OrderExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public direction(): DirectionContext | null {
        return this.getRuleContext(0, DirectionContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_orderExpression;
    }
}


export class GroupListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public groupingExpression(): GroupingExpressionContext[];
    public groupingExpression(i: number): GroupingExpressionContext | null;
    public groupingExpression(i?: number): GroupingExpressionContext[] | GroupingExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(GroupingExpressionContext);
        }

        return this.getRuleContext(i, GroupingExpressionContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_groupList;
    }
}


export class GroupingExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_groupingExpression;
    }
}


export class ChannelContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FOR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0)!;
    }
    public CHANNEL_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CHANNEL_SYMBOL, 0)!;
    }
    public textStringNoLinebreak(): TextStringNoLinebreakContext {
        return this.getRuleContext(0, TextStringNoLinebreakContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_channel;
    }
}


export class CompoundStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public simpleStatement(): SimpleStatementContext | null {
        return this.getRuleContext(0, SimpleStatementContext);
    }
    public returnStatement(): ReturnStatementContext | null {
        return this.getRuleContext(0, ReturnStatementContext);
    }
    public ifStatement(): IfStatementContext | null {
        return this.getRuleContext(0, IfStatementContext);
    }
    public caseStatement(): CaseStatementContext | null {
        return this.getRuleContext(0, CaseStatementContext);
    }
    public labeledBlock(): LabeledBlockContext | null {
        return this.getRuleContext(0, LabeledBlockContext);
    }
    public unlabeledBlock(): UnlabeledBlockContext | null {
        return this.getRuleContext(0, UnlabeledBlockContext);
    }
    public labeledControl(): LabeledControlContext | null {
        return this.getRuleContext(0, LabeledControlContext);
    }
    public unlabeledControl(): UnlabeledControlContext | null {
        return this.getRuleContext(0, UnlabeledControlContext);
    }
    public leaveStatement(): LeaveStatementContext | null {
        return this.getRuleContext(0, LeaveStatementContext);
    }
    public iterateStatement(): IterateStatementContext | null {
        return this.getRuleContext(0, IterateStatementContext);
    }
    public cursorOpen(): CursorOpenContext | null {
        return this.getRuleContext(0, CursorOpenContext);
    }
    public cursorFetch(): CursorFetchContext | null {
        return this.getRuleContext(0, CursorFetchContext);
    }
    public cursorClose(): CursorCloseContext | null {
        return this.getRuleContext(0, CursorCloseContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_compoundStatement;
    }
}


export class ReturnStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RETURN_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.RETURN_SYMBOL, 0)!;
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_returnStatement;
    }
}


export class IfStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IF_SYMBOL(): antlr.TerminalNode[];
    public IF_SYMBOL(i: number): antlr.TerminalNode | null;
    public IF_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.IF_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.IF_SYMBOL, i);
    	}
    }
    public ifBody(): IfBodyContext {
        return this.getRuleContext(0, IfBodyContext)!;
    }
    public END_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.END_SYMBOL, 0)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_ifStatement;
    }
}


export class IfBodyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public thenStatement(): ThenStatementContext {
        return this.getRuleContext(0, ThenStatementContext)!;
    }
    public ELSEIF_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ELSEIF_SYMBOL, 0);
    }
    public ifBody(): IfBodyContext | null {
        return this.getRuleContext(0, IfBodyContext);
    }
    public ELSE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ELSE_SYMBOL, 0);
    }
    public compoundStatementList(): CompoundStatementListContext | null {
        return this.getRuleContext(0, CompoundStatementListContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_ifBody;
    }
}


export class ThenStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public THEN_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.THEN_SYMBOL, 0)!;
    }
    public compoundStatementList(): CompoundStatementListContext {
        return this.getRuleContext(0, CompoundStatementListContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_thenStatement;
    }
}


export class CompoundStatementListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public compoundStatement(): CompoundStatementContext[];
    public compoundStatement(i: number): CompoundStatementContext | null;
    public compoundStatement(i?: number): CompoundStatementContext[] | CompoundStatementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CompoundStatementContext);
        }

        return this.getRuleContext(i, CompoundStatementContext);
    }
    public SEMICOLON_SYMBOL(): antlr.TerminalNode[];
    public SEMICOLON_SYMBOL(i: number): antlr.TerminalNode | null;
    public SEMICOLON_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.SEMICOLON_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.SEMICOLON_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_compoundStatementList;
    }
}


export class CaseStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CASE_SYMBOL(): antlr.TerminalNode[];
    public CASE_SYMBOL(i: number): antlr.TerminalNode | null;
    public CASE_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.CASE_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.CASE_SYMBOL, i);
    	}
    }
    public END_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.END_SYMBOL, 0)!;
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(0, ExprContext);
    }
    public whenExpression(): WhenExpressionContext[];
    public whenExpression(i: number): WhenExpressionContext | null;
    public whenExpression(i?: number): WhenExpressionContext[] | WhenExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(WhenExpressionContext);
        }

        return this.getRuleContext(i, WhenExpressionContext);
    }
    public thenStatement(): ThenStatementContext[];
    public thenStatement(i: number): ThenStatementContext | null;
    public thenStatement(i?: number): ThenStatementContext[] | ThenStatementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ThenStatementContext);
        }

        return this.getRuleContext(i, ThenStatementContext);
    }
    public elseStatement(): ElseStatementContext | null {
        return this.getRuleContext(0, ElseStatementContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_caseStatement;
    }
}


export class ElseStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ELSE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.ELSE_SYMBOL, 0)!;
    }
    public compoundStatementList(): CompoundStatementListContext {
        return this.getRuleContext(0, CompoundStatementListContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_elseStatement;
    }
}


export class LabeledBlockContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public label(): LabelContext {
        return this.getRuleContext(0, LabelContext)!;
    }
    public beginEndBlock(): BeginEndBlockContext {
        return this.getRuleContext(0, BeginEndBlockContext)!;
    }
    public labelRef(): LabelRefContext | null {
        return this.getRuleContext(0, LabelRefContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_labeledBlock;
    }
}


export class UnlabeledBlockContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public beginEndBlock(): BeginEndBlockContext {
        return this.getRuleContext(0, BeginEndBlockContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_unlabeledBlock;
    }
}


export class LabelContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public labelIdentifier(): LabelIdentifierContext {
        return this.getRuleContext(0, LabelIdentifierContext)!;
    }
    public COLON_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.COLON_SYMBOL, 0)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_label;
    }
}


export class BeginEndBlockContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BEGIN_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.BEGIN_SYMBOL, 0)!;
    }
    public END_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.END_SYMBOL, 0)!;
    }
    public spDeclarations(): SpDeclarationsContext | null {
        return this.getRuleContext(0, SpDeclarationsContext);
    }
    public compoundStatementList(): CompoundStatementListContext | null {
        return this.getRuleContext(0, CompoundStatementListContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_beginEndBlock;
    }
}


export class LabeledControlContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public label(): LabelContext {
        return this.getRuleContext(0, LabelContext)!;
    }
    public unlabeledControl(): UnlabeledControlContext {
        return this.getRuleContext(0, UnlabeledControlContext)!;
    }
    public labelRef(): LabelRefContext | null {
        return this.getRuleContext(0, LabelRefContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_labeledControl;
    }
}


export class UnlabeledControlContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public loopBlock(): LoopBlockContext | null {
        return this.getRuleContext(0, LoopBlockContext);
    }
    public whileDoBlock(): WhileDoBlockContext | null {
        return this.getRuleContext(0, WhileDoBlockContext);
    }
    public repeatUntilBlock(): RepeatUntilBlockContext | null {
        return this.getRuleContext(0, RepeatUntilBlockContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_unlabeledControl;
    }
}


export class LoopBlockContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOOP_SYMBOL(): antlr.TerminalNode[];
    public LOOP_SYMBOL(i: number): antlr.TerminalNode | null;
    public LOOP_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.LOOP_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.LOOP_SYMBOL, i);
    	}
    }
    public compoundStatementList(): CompoundStatementListContext {
        return this.getRuleContext(0, CompoundStatementListContext)!;
    }
    public END_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.END_SYMBOL, 0)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_loopBlock;
    }
}


export class WhileDoBlockContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WHILE_SYMBOL(): antlr.TerminalNode[];
    public WHILE_SYMBOL(i: number): antlr.TerminalNode | null;
    public WHILE_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.WHILE_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.WHILE_SYMBOL, i);
    	}
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public DO_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.DO_SYMBOL, 0)!;
    }
    public compoundStatementList(): CompoundStatementListContext {
        return this.getRuleContext(0, CompoundStatementListContext)!;
    }
    public END_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.END_SYMBOL, 0)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_whileDoBlock;
    }
}


export class RepeatUntilBlockContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REPEAT_SYMBOL(): antlr.TerminalNode[];
    public REPEAT_SYMBOL(i: number): antlr.TerminalNode | null;
    public REPEAT_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.REPEAT_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.REPEAT_SYMBOL, i);
    	}
    }
    public compoundStatementList(): CompoundStatementListContext {
        return this.getRuleContext(0, CompoundStatementListContext)!;
    }
    public UNTIL_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.UNTIL_SYMBOL, 0)!;
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public END_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.END_SYMBOL, 0)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_repeatUntilBlock;
    }
}


export class SpDeclarationsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public spDeclaration(): SpDeclarationContext[];
    public spDeclaration(i: number): SpDeclarationContext | null;
    public spDeclaration(i?: number): SpDeclarationContext[] | SpDeclarationContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SpDeclarationContext);
        }

        return this.getRuleContext(i, SpDeclarationContext);
    }
    public SEMICOLON_SYMBOL(): antlr.TerminalNode[];
    public SEMICOLON_SYMBOL(i: number): antlr.TerminalNode | null;
    public SEMICOLON_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.SEMICOLON_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.SEMICOLON_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_spDeclarations;
    }
}


export class SpDeclarationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public variableDeclaration(): VariableDeclarationContext | null {
        return this.getRuleContext(0, VariableDeclarationContext);
    }
    public conditionDeclaration(): ConditionDeclarationContext | null {
        return this.getRuleContext(0, ConditionDeclarationContext);
    }
    public handlerDeclaration(): HandlerDeclarationContext | null {
        return this.getRuleContext(0, HandlerDeclarationContext);
    }
    public cursorDeclaration(): CursorDeclarationContext | null {
        return this.getRuleContext(0, CursorDeclarationContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_spDeclaration;
    }
}


export class VariableDeclarationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DECLARE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.DECLARE_SYMBOL, 0)!;
    }
    public identifierList(): IdentifierListContext {
        return this.getRuleContext(0, IdentifierListContext)!;
    }
    public dataType(): DataTypeContext {
        return this.getRuleContext(0, DataTypeContext)!;
    }
    public collate(): CollateContext | null {
        return this.getRuleContext(0, CollateContext);
    }
    public DEFAULT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(0, ExprContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_variableDeclaration;
    }
}


export class ConditionDeclarationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DECLARE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.DECLARE_SYMBOL, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public CONDITION_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CONDITION_SYMBOL, 0)!;
    }
    public FOR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0)!;
    }
    public spCondition(): SpConditionContext {
        return this.getRuleContext(0, SpConditionContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_conditionDeclaration;
    }
}


export class SpConditionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ulong_number(): Ulong_numberContext | null {
        return this.getRuleContext(0, Ulong_numberContext);
    }
    public sqlstate(): SqlstateContext | null {
        return this.getRuleContext(0, SqlstateContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_spCondition;
    }
}


export class SqlstateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SQLSTATE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SQLSTATE_SYMBOL, 0)!;
    }
    public textLiteral(): TextLiteralContext {
        return this.getRuleContext(0, TextLiteralContext)!;
    }
    public VALUE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.VALUE_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_sqlstate;
    }
}


export class HandlerDeclarationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DECLARE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.DECLARE_SYMBOL, 0)!;
    }
    public HANDLER_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.HANDLER_SYMBOL, 0)!;
    }
    public FOR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0)!;
    }
    public handlerCondition(): HandlerConditionContext[];
    public handlerCondition(i: number): HandlerConditionContext | null;
    public handlerCondition(i?: number): HandlerConditionContext[] | HandlerConditionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(HandlerConditionContext);
        }

        return this.getRuleContext(i, HandlerConditionContext);
    }
    public compoundStatement(): CompoundStatementContext {
        return this.getRuleContext(0, CompoundStatementContext)!;
    }
    public CONTINUE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CONTINUE_SYMBOL, 0);
    }
    public EXIT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EXIT_SYMBOL, 0);
    }
    public UNDO_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.UNDO_SYMBOL, 0);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_handlerDeclaration;
    }
}


export class HandlerConditionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public spCondition(): SpConditionContext | null {
        return this.getRuleContext(0, SpConditionContext);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public SQLWARNING_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SQLWARNING_SYMBOL, 0);
    }
    public notRule(): NotRuleContext | null {
        return this.getRuleContext(0, NotRuleContext);
    }
    public FOUND_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FOUND_SYMBOL, 0);
    }
    public SQLEXCEPTION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SQLEXCEPTION_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_handlerCondition;
    }
}


export class CursorDeclarationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DECLARE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.DECLARE_SYMBOL, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public CURSOR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CURSOR_SYMBOL, 0)!;
    }
    public FOR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0)!;
    }
    public selectStatement(): SelectStatementContext {
        return this.getRuleContext(0, SelectStatementContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_cursorDeclaration;
    }
}


export class IterateStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ITERATE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.ITERATE_SYMBOL, 0)!;
    }
    public labelRef(): LabelRefContext {
        return this.getRuleContext(0, LabelRefContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_iterateStatement;
    }
}


export class LeaveStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEAVE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.LEAVE_SYMBOL, 0)!;
    }
    public labelRef(): LabelRefContext {
        return this.getRuleContext(0, LabelRefContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_leaveStatement;
    }
}


export class GetDiagnosticsStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GET_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.GET_SYMBOL, 0)!;
    }
    public DIAGNOSTICS_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.DIAGNOSTICS_SYMBOL, 0)!;
    }
    public statementInformationItem(): StatementInformationItemContext[];
    public statementInformationItem(i: number): StatementInformationItemContext | null;
    public statementInformationItem(i?: number): StatementInformationItemContext[] | StatementInformationItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StatementInformationItemContext);
        }

        return this.getRuleContext(i, StatementInformationItemContext);
    }
    public CONDITION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CONDITION_SYMBOL, 0);
    }
    public signalAllowedExpr(): SignalAllowedExprContext | null {
        return this.getRuleContext(0, SignalAllowedExprContext);
    }
    public conditionInformationItem(): ConditionInformationItemContext[];
    public conditionInformationItem(i: number): ConditionInformationItemContext | null;
    public conditionInformationItem(i?: number): ConditionInformationItemContext[] | ConditionInformationItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ConditionInformationItemContext);
        }

        return this.getRuleContext(i, ConditionInformationItemContext);
    }
    public CURRENT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CURRENT_SYMBOL, 0);
    }
    public STACKED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.STACKED_SYMBOL, 0);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_getDiagnosticsStatement;
    }
}


export class SignalAllowedExprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public literal(): LiteralContext | null {
        return this.getRuleContext(0, LiteralContext);
    }
    public rvalueSystemOrUserVariable(): RvalueSystemOrUserVariableContext | null {
        return this.getRuleContext(0, RvalueSystemOrUserVariableContext);
    }
    public qualifiedIdentifier(): QualifiedIdentifierContext | null {
        return this.getRuleContext(0, QualifiedIdentifierContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_signalAllowedExpr;
    }
}


export class StatementInformationItemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQUAL_OPERATOR(): antlr.TerminalNode {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0)!;
    }
    public NUMBER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NUMBER_SYMBOL, 0);
    }
    public ROW_COUNT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ROW_COUNT_SYMBOL, 0);
    }
    public userVariable(): UserVariableContext | null {
        return this.getRuleContext(0, UserVariableContext);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_statementInformationItem;
    }
}


export class ConditionInformationItemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQUAL_OPERATOR(): antlr.TerminalNode {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0)!;
    }
    public userVariable(): UserVariableContext | null {
        return this.getRuleContext(0, UserVariableContext);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public signalInformationItemName(): SignalInformationItemNameContext | null {
        return this.getRuleContext(0, SignalInformationItemNameContext);
    }
    public RETURNED_SQLSTATE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RETURNED_SQLSTATE_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_conditionInformationItem;
    }
}


export class SignalInformationItemNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CLASS_ORIGIN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CLASS_ORIGIN_SYMBOL, 0);
    }
    public SUBCLASS_ORIGIN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SUBCLASS_ORIGIN_SYMBOL, 0);
    }
    public CONSTRAINT_CATALOG_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CONSTRAINT_CATALOG_SYMBOL, 0);
    }
    public CONSTRAINT_SCHEMA_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0);
    }
    public CONSTRAINT_NAME_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CONSTRAINT_NAME_SYMBOL, 0);
    }
    public CATALOG_NAME_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CATALOG_NAME_SYMBOL, 0);
    }
    public SCHEMA_NAME_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SCHEMA_NAME_SYMBOL, 0);
    }
    public TABLE_NAME_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_NAME_SYMBOL, 0);
    }
    public COLUMN_NAME_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COLUMN_NAME_SYMBOL, 0);
    }
    public CURSOR_NAME_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CURSOR_NAME_SYMBOL, 0);
    }
    public MESSAGE_TEXT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MESSAGE_TEXT_SYMBOL, 0);
    }
    public MYSQL_ERRNO_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MYSQL_ERRNO_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_signalInformationItemName;
    }
}


export class SignalStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SIGNAL_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SIGNAL_SYMBOL, 0)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public sqlstate(): SqlstateContext | null {
        return this.getRuleContext(0, SqlstateContext);
    }
    public SET_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SET_SYMBOL, 0);
    }
    public signalInformationItem(): SignalInformationItemContext[];
    public signalInformationItem(i: number): SignalInformationItemContext | null;
    public signalInformationItem(i?: number): SignalInformationItemContext[] | SignalInformationItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SignalInformationItemContext);
        }

        return this.getRuleContext(i, SignalInformationItemContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_signalStatement;
    }
}


export class ResignalStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RESIGNAL_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.RESIGNAL_SYMBOL, 0)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public sqlstate(): SqlstateContext | null {
        return this.getRuleContext(0, SqlstateContext);
    }
    public SET_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SET_SYMBOL, 0);
    }
    public signalInformationItem(): SignalInformationItemContext[];
    public signalInformationItem(i: number): SignalInformationItemContext | null;
    public signalInformationItem(i?: number): SignalInformationItemContext[] | SignalInformationItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SignalInformationItemContext);
        }

        return this.getRuleContext(i, SignalInformationItemContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_resignalStatement;
    }
}


export class SignalInformationItemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public signalInformationItemName(): SignalInformationItemNameContext {
        return this.getRuleContext(0, SignalInformationItemNameContext)!;
    }
    public EQUAL_OPERATOR(): antlr.TerminalNode {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0)!;
    }
    public signalAllowedExpr(): SignalAllowedExprContext {
        return this.getRuleContext(0, SignalAllowedExprContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_signalInformationItem;
    }
}


export class CursorOpenContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPEN_SYMBOL, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_cursorOpen;
    }
}


export class CursorCloseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CLOSE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CLOSE_SYMBOL, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_cursorClose;
    }
}


export class CursorFetchContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FETCH_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.FETCH_SYMBOL, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public INTO_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.INTO_SYMBOL, 0)!;
    }
    public identifierList(): IdentifierListContext {
        return this.getRuleContext(0, IdentifierListContext)!;
    }
    public FROM_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public NEXT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NEXT_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_cursorFetch;
    }
}


export class ScheduleContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.AT_SYMBOL, 0);
    }
    public expr(): ExprContext[];
    public expr(i: number): ExprContext | null;
    public expr(i?: number): ExprContext[] | ExprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExprContext);
        }

        return this.getRuleContext(i, ExprContext);
    }
    public EVERY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EVERY_SYMBOL, 0);
    }
    public interval(): IntervalContext | null {
        return this.getRuleContext(0, IntervalContext);
    }
    public STARTS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.STARTS_SYMBOL, 0);
    }
    public ENDS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ENDS_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_schedule;
    }
}


export class ColumnDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnName(): ColumnNameContext {
        return this.getRuleContext(0, ColumnNameContext)!;
    }
    public fieldDefinition(): FieldDefinitionContext {
        return this.getRuleContext(0, FieldDefinitionContext)!;
    }
    public checkOrReferences(): CheckOrReferencesContext | null {
        return this.getRuleContext(0, CheckOrReferencesContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_columnDefinition;
    }
}


export class CheckOrReferencesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public checkConstraint(): CheckConstraintContext | null {
        return this.getRuleContext(0, CheckConstraintContext);
    }
    public references(): ReferencesContext | null {
        return this.getRuleContext(0, ReferencesContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_checkOrReferences;
    }
}


export class CheckConstraintContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CHECK_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CHECK_SYMBOL, 0)!;
    }
    public exprWithParentheses(): ExprWithParenthesesContext {
        return this.getRuleContext(0, ExprWithParenthesesContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_checkConstraint;
    }
}


export class ConstraintEnforcementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ENFORCED_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.ENFORCED_SYMBOL, 0)!;
    }
    public NOT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NOT_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_constraintEnforcement;
    }
}


export class TableConstraintDefContext extends antlr.ParserRuleContext {
    public _type_?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public keyListWithExpression(): KeyListWithExpressionContext | null {
        return this.getRuleContext(0, KeyListWithExpressionContext);
    }
    public KEY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.KEY_SYMBOL, 0);
    }
    public INDEX_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
    }
    public indexNameAndType(): IndexNameAndTypeContext | null {
        return this.getRuleContext(0, IndexNameAndTypeContext);
    }
    public indexOption(): IndexOptionContext[];
    public indexOption(i: number): IndexOptionContext | null;
    public indexOption(i?: number): IndexOptionContext[] | IndexOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IndexOptionContext);
        }

        return this.getRuleContext(i, IndexOptionContext);
    }
    public FULLTEXT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FULLTEXT_SYMBOL, 0);
    }
    public keyOrIndex(): KeyOrIndexContext | null {
        return this.getRuleContext(0, KeyOrIndexContext);
    }
    public indexName(): IndexNameContext | null {
        return this.getRuleContext(0, IndexNameContext);
    }
    public fulltextIndexOption(): FulltextIndexOptionContext[];
    public fulltextIndexOption(i: number): FulltextIndexOptionContext | null;
    public fulltextIndexOption(i?: number): FulltextIndexOptionContext[] | FulltextIndexOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FulltextIndexOptionContext);
        }

        return this.getRuleContext(i, FulltextIndexOptionContext);
    }
    public SPATIAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SPATIAL_SYMBOL, 0);
    }
    public spatialIndexOption(): SpatialIndexOptionContext[];
    public spatialIndexOption(i: number): SpatialIndexOptionContext | null;
    public spatialIndexOption(i?: number): SpatialIndexOptionContext[] | SpatialIndexOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SpatialIndexOptionContext);
        }

        return this.getRuleContext(i, SpatialIndexOptionContext);
    }
    public keyList(): KeyListContext | null {
        return this.getRuleContext(0, KeyListContext);
    }
    public references(): ReferencesContext | null {
        return this.getRuleContext(0, ReferencesContext);
    }
    public checkConstraint(): CheckConstraintContext | null {
        return this.getRuleContext(0, CheckConstraintContext);
    }
    public constraintName(): ConstraintNameContext | null {
        return this.getRuleContext(0, ConstraintNameContext);
    }
    public FOREIGN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FOREIGN_SYMBOL, 0);
    }
    public PRIMARY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PRIMARY_SYMBOL, 0);
    }
    public UNIQUE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.UNIQUE_SYMBOL, 0);
    }
    public constraintEnforcement(): ConstraintEnforcementContext | null {
        return this.getRuleContext(0, ConstraintEnforcementContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_tableConstraintDef;
    }
}


export class ConstraintNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CONSTRAINT_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CONSTRAINT_SYMBOL, 0)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_constraintName;
    }
}


export class FieldDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public dataType(): DataTypeContext {
        return this.getRuleContext(0, DataTypeContext)!;
    }
    public AS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.AS_SYMBOL, 0);
    }
    public exprWithParentheses(): ExprWithParenthesesContext | null {
        return this.getRuleContext(0, ExprWithParenthesesContext);
    }
    public columnAttribute(): ColumnAttributeContext[];
    public columnAttribute(i: number): ColumnAttributeContext | null;
    public columnAttribute(i?: number): ColumnAttributeContext[] | ColumnAttributeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnAttributeContext);
        }

        return this.getRuleContext(i, ColumnAttributeContext);
    }
    public collate(): CollateContext | null {
        return this.getRuleContext(0, CollateContext);
    }
    public GENERATED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.GENERATED_SYMBOL, 0);
    }
    public ALWAYS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ALWAYS_SYMBOL, 0);
    }
    public VIRTUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.VIRTUAL_SYMBOL, 0);
    }
    public STORED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.STORED_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_fieldDefinition;
    }
}


export class ColumnAttributeContext extends antlr.ParserRuleContext {
    public _value?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public nullLiteral(): NullLiteralContext | null {
        return this.getRuleContext(0, NullLiteralContext);
    }
    public NOT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NOT_SYMBOL, 0);
    }
    public SECONDARY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_SYMBOL, 0);
    }
    public DEFAULT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public nowOrSignedLiteral(): NowOrSignedLiteralContext | null {
        return this.getRuleContext(0, NowOrSignedLiteralContext);
    }
    public exprWithParentheses(): ExprWithParenthesesContext | null {
        return this.getRuleContext(0, ExprWithParenthesesContext);
    }
    public UPDATE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.UPDATE_SYMBOL, 0);
    }
    public NOW_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NOW_SYMBOL, 0);
    }
    public ON_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, 0);
    }
    public timeFunctionParameters(): TimeFunctionParametersContext | null {
        return this.getRuleContext(0, TimeFunctionParametersContext);
    }
    public AUTO_INCREMENT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0);
    }
    public VALUE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.VALUE_SYMBOL, 0);
    }
    public SERIAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SERIAL_SYMBOL, 0);
    }
    public KEY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.KEY_SYMBOL, 0);
    }
    public PRIMARY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PRIMARY_SYMBOL, 0);
    }
    public UNIQUE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.UNIQUE_SYMBOL, 0);
    }
    public textLiteral(): TextLiteralContext | null {
        return this.getRuleContext(0, TextLiteralContext);
    }
    public COMMENT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
    }
    public collate(): CollateContext | null {
        return this.getRuleContext(0, CollateContext);
    }
    public columnFormat(): ColumnFormatContext | null {
        return this.getRuleContext(0, ColumnFormatContext);
    }
    public COLUMN_FORMAT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COLUMN_FORMAT_SYMBOL, 0);
    }
    public storageMedia(): StorageMediaContext | null {
        return this.getRuleContext(0, StorageMediaContext);
    }
    public STORAGE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.STORAGE_SYMBOL, 0);
    }
    public real_ulonglong_number(): Real_ulonglong_numberContext | null {
        return this.getRuleContext(0, Real_ulonglong_numberContext);
    }
    public SRID_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SRID_SYMBOL, 0);
    }
    public checkConstraint(): CheckConstraintContext | null {
        return this.getRuleContext(0, CheckConstraintContext);
    }
    public constraintName(): ConstraintNameContext | null {
        return this.getRuleContext(0, ConstraintNameContext);
    }
    public constraintEnforcement(): ConstraintEnforcementContext | null {
        return this.getRuleContext(0, ConstraintEnforcementContext);
    }
    public jsonAttribute(): JsonAttributeContext | null {
        return this.getRuleContext(0, JsonAttributeContext);
    }
    public ENGINE_ATTRIBUTE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ENGINE_ATTRIBUTE_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public SECONDARY_ENGINE_ATTRIBUTE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_ENGINE_ATTRIBUTE_SYMBOL, 0);
    }
    public visibility(): VisibilityContext | null {
        return this.getRuleContext(0, VisibilityContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_columnAttribute;
    }
}


export class ColumnFormatContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FIXED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FIXED_SYMBOL, 0);
    }
    public DYNAMIC_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DYNAMIC_SYMBOL, 0);
    }
    public DEFAULT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_columnFormat;
    }
}


export class StorageMediaContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DISK_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DISK_SYMBOL, 0);
    }
    public MEMORY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MEMORY_SYMBOL, 0);
    }
    public DEFAULT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_storageMedia;
    }
}


export class NowContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NOW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.NOW_SYMBOL, 0)!;
    }
    public functionDatetimePrecision(): FunctionDatetimePrecisionContext {
        return this.getRuleContext(0, FunctionDatetimePrecisionContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_now;
    }
}


export class NowOrSignedLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public now(): NowContext | null {
        return this.getRuleContext(0, NowContext);
    }
    public signedLiteralOrNull(): SignedLiteralOrNullContext | null {
        return this.getRuleContext(0, SignedLiteralOrNullContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_nowOrSignedLiteral;
    }
}


export class GcolAttributeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UNIQUE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.UNIQUE_SYMBOL, 0);
    }
    public KEY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.KEY_SYMBOL, 0);
    }
    public COMMENT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
    }
    public textString(): TextStringContext | null {
        return this.getRuleContext(0, TextStringContext);
    }
    public NULL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NULL_SYMBOL, 0);
    }
    public notRule(): NotRuleContext | null {
        return this.getRuleContext(0, NotRuleContext);
    }
    public PRIMARY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PRIMARY_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_gcolAttribute;
    }
}


export class ReferencesContext extends antlr.ParserRuleContext {
    public _match?: Token | null;
    public _option?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REFERENCES_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.REFERENCES_SYMBOL, 0)!;
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(0, TableRefContext)!;
    }
    public identifierListWithParentheses(): IdentifierListWithParenthesesContext | null {
        return this.getRuleContext(0, IdentifierListWithParenthesesContext);
    }
    public MATCH_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MATCH_SYMBOL, 0);
    }
    public ON_SYMBOL(): antlr.TerminalNode[];
    public ON_SYMBOL(i: number): antlr.TerminalNode | null;
    public ON_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.ON_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.ON_SYMBOL, i);
    	}
    }
    public deleteOption(): DeleteOptionContext[];
    public deleteOption(i: number): DeleteOptionContext | null;
    public deleteOption(i?: number): DeleteOptionContext[] | DeleteOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DeleteOptionContext);
        }

        return this.getRuleContext(i, DeleteOptionContext);
    }
    public UPDATE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.UPDATE_SYMBOL, 0);
    }
    public DELETE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DELETE_SYMBOL, 0);
    }
    public FULL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FULL_SYMBOL, 0);
    }
    public PARTIAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PARTIAL_SYMBOL, 0);
    }
    public SIMPLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SIMPLE_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_references;
    }
}


export class DeleteOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RESTRICT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RESTRICT_SYMBOL, 0);
    }
    public CASCADE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CASCADE_SYMBOL, 0);
    }
    public SET_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SET_SYMBOL, 0);
    }
    public nullLiteral(): NullLiteralContext | null {
        return this.getRuleContext(0, NullLiteralContext);
    }
    public DEFAULT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public NO_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NO_SYMBOL, 0);
    }
    public ACTION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ACTION_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_deleteOption;
    }
}


export class KeyListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)!;
    }
    public keyPart(): KeyPartContext[];
    public keyPart(i: number): KeyPartContext | null;
    public keyPart(i?: number): KeyPartContext[] | KeyPartContext | null {
        if (i === undefined) {
            return this.getRuleContexts(KeyPartContext);
        }

        return this.getRuleContext(i, KeyPartContext);
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)!;
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_keyList;
    }
}


export class KeyPartContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public fieldLength(): FieldLengthContext | null {
        return this.getRuleContext(0, FieldLengthContext);
    }
    public direction(): DirectionContext | null {
        return this.getRuleContext(0, DirectionContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_keyPart;
    }
}


export class KeyListWithExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)!;
    }
    public keyPartOrExpression(): KeyPartOrExpressionContext[];
    public keyPartOrExpression(i: number): KeyPartOrExpressionContext | null;
    public keyPartOrExpression(i?: number): KeyPartOrExpressionContext[] | KeyPartOrExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(KeyPartOrExpressionContext);
        }

        return this.getRuleContext(i, KeyPartOrExpressionContext);
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)!;
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_keyListWithExpression;
    }
}


export class KeyPartOrExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public keyPart(): KeyPartContext | null {
        return this.getRuleContext(0, KeyPartContext);
    }
    public exprWithParentheses(): ExprWithParenthesesContext | null {
        return this.getRuleContext(0, ExprWithParenthesesContext);
    }
    public direction(): DirectionContext | null {
        return this.getRuleContext(0, DirectionContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_keyPartOrExpression;
    }
}


export class IndexTypeContext extends antlr.ParserRuleContext {
    public _algorithm?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BTREE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BTREE_SYMBOL, 0);
    }
    public RTREE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RTREE_SYMBOL, 0);
    }
    public HASH_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.HASH_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_indexType;
    }
}


export class IndexOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public commonIndexOption(): CommonIndexOptionContext | null {
        return this.getRuleContext(0, CommonIndexOptionContext);
    }
    public indexTypeClause(): IndexTypeClauseContext | null {
        return this.getRuleContext(0, IndexTypeClauseContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_indexOption;
    }
}


export class CommonIndexOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KEY_BLOCK_SIZE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0);
    }
    public ulong_number(): Ulong_numberContext | null {
        return this.getRuleContext(0, Ulong_numberContext);
    }
    public EQUAL_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public COMMENT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
    }
    public textLiteral(): TextLiteralContext | null {
        return this.getRuleContext(0, TextLiteralContext);
    }
    public visibility(): VisibilityContext | null {
        return this.getRuleContext(0, VisibilityContext);
    }
    public ENGINE_ATTRIBUTE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ENGINE_ATTRIBUTE_SYMBOL, 0);
    }
    public jsonAttribute(): JsonAttributeContext | null {
        return this.getRuleContext(0, JsonAttributeContext);
    }
    public SECONDARY_ENGINE_ATTRIBUTE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_ENGINE_ATTRIBUTE_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_commonIndexOption;
    }
}


export class VisibilityContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public VISIBLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.VISIBLE_SYMBOL, 0);
    }
    public INVISIBLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INVISIBLE_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_visibility;
    }
}


export class IndexTypeClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public indexType(): IndexTypeContext {
        return this.getRuleContext(0, IndexTypeContext)!;
    }
    public USING_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.USING_SYMBOL, 0);
    }
    public TYPE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TYPE_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_indexTypeClause;
    }
}


export class FulltextIndexOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public commonIndexOption(): CommonIndexOptionContext | null {
        return this.getRuleContext(0, CommonIndexOptionContext);
    }
    public WITH_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public PARSER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PARSER_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_fulltextIndexOption;
    }
}


export class SpatialIndexOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public commonIndexOption(): CommonIndexOptionContext {
        return this.getRuleContext(0, CommonIndexOptionContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_spatialIndexOption;
    }
}


export class DataTypeDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public dataType(): DataTypeContext {
        return this.getRuleContext(0, DataTypeContext)!;
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(MySQLParser.EOF, 0)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_dataTypeDefinition;
    }
}


export class DataTypeContext extends antlr.ParserRuleContext {
    public _type_?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INT_SYMBOL, 0);
    }
    public TINYINT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TINYINT_SYMBOL, 0);
    }
    public SMALLINT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SMALLINT_SYMBOL, 0);
    }
    public MEDIUMINT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MEDIUMINT_SYMBOL, 0);
    }
    public BIGINT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BIGINT_SYMBOL, 0);
    }
    public fieldLength(): FieldLengthContext | null {
        return this.getRuleContext(0, FieldLengthContext);
    }
    public fieldOptions(): FieldOptionsContext | null {
        return this.getRuleContext(0, FieldOptionsContext);
    }
    public REAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REAL_SYMBOL, 0);
    }
    public DOUBLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DOUBLE_SYMBOL, 0);
    }
    public precision(): PrecisionContext | null {
        return this.getRuleContext(0, PrecisionContext);
    }
    public PRECISION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PRECISION_SYMBOL, 0);
    }
    public FLOAT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FLOAT_SYMBOL, 0);
    }
    public DECIMAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DECIMAL_SYMBOL, 0);
    }
    public NUMERIC_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NUMERIC_SYMBOL, 0);
    }
    public FIXED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FIXED_SYMBOL, 0);
    }
    public floatOptions(): FloatOptionsContext | null {
        return this.getRuleContext(0, FloatOptionsContext);
    }
    public BIT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BIT_SYMBOL, 0);
    }
    public BOOL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BOOL_SYMBOL, 0);
    }
    public BOOLEAN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BOOLEAN_SYMBOL, 0);
    }
    public CHAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CHAR_SYMBOL, 0);
    }
    public charsetWithOptBinary(): CharsetWithOptBinaryContext | null {
        return this.getRuleContext(0, CharsetWithOptBinaryContext);
    }
    public nchar(): NcharContext | null {
        return this.getRuleContext(0, NcharContext);
    }
    public BINARY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
    }
    public VARYING_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.VARYING_SYMBOL, 0);
    }
    public VARCHAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.VARCHAR_SYMBOL, 0);
    }
    public NATIONAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NATIONAL_SYMBOL, 0);
    }
    public NVARCHAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NVARCHAR_SYMBOL, 0);
    }
    public NCHAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NCHAR_SYMBOL, 0);
    }
    public VARBINARY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.VARBINARY_SYMBOL, 0);
    }
    public YEAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.YEAR_SYMBOL, 0);
    }
    public DATE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DATE_SYMBOL, 0);
    }
    public TIME_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TIME_SYMBOL, 0);
    }
    public typeDatetimePrecision(): TypeDatetimePrecisionContext | null {
        return this.getRuleContext(0, TypeDatetimePrecisionContext);
    }
    public TIMESTAMP_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TIMESTAMP_SYMBOL, 0);
    }
    public DATETIME_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DATETIME_SYMBOL, 0);
    }
    public TINYBLOB_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TINYBLOB_SYMBOL, 0);
    }
    public BLOB_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BLOB_SYMBOL, 0);
    }
    public MEDIUMBLOB_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MEDIUMBLOB_SYMBOL, 0);
    }
    public LONGBLOB_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LONGBLOB_SYMBOL, 0);
    }
    public LONG_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LONG_SYMBOL, 0);
    }
    public TINYTEXT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TINYTEXT_SYMBOL, 0);
    }
    public TEXT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TEXT_SYMBOL, 0);
    }
    public MEDIUMTEXT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MEDIUMTEXT_SYMBOL, 0);
    }
    public LONGTEXT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LONGTEXT_SYMBOL, 0);
    }
    public stringList(): StringListContext | null {
        return this.getRuleContext(0, StringListContext);
    }
    public ENUM_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ENUM_SYMBOL, 0);
    }
    public SET_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SET_SYMBOL, 0);
    }
    public SERIAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SERIAL_SYMBOL, 0);
    }
    public JSON_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.JSON_SYMBOL, 0);
    }
    public GEOMETRY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.GEOMETRY_SYMBOL, 0);
    }
    public GEOMETRYCOLLECTION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0);
    }
    public POINT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.POINT_SYMBOL, 0);
    }
    public MULTIPOINT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MULTIPOINT_SYMBOL, 0);
    }
    public LINESTRING_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LINESTRING_SYMBOL, 0);
    }
    public MULTILINESTRING_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MULTILINESTRING_SYMBOL, 0);
    }
    public POLYGON_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.POLYGON_SYMBOL, 0);
    }
    public MULTIPOLYGON_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_dataType;
    }
}


export class NcharContext extends antlr.ParserRuleContext {
    public _type_?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NCHAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NCHAR_SYMBOL, 0);
    }
    public CHAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CHAR_SYMBOL, 0);
    }
    public NATIONAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NATIONAL_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_nchar;
    }
}


export class RealTypeContext extends antlr.ParserRuleContext {
    public _type_?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REAL_SYMBOL, 0);
    }
    public DOUBLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DOUBLE_SYMBOL, 0);
    }
    public PRECISION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PRECISION_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_realType;
    }
}


export class FieldLengthContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)!;
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)!;
    }
    public real_ulonglong_number(): Real_ulonglong_numberContext | null {
        return this.getRuleContext(0, Real_ulonglong_numberContext);
    }
    public DECIMAL_NUMBER(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DECIMAL_NUMBER, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_fieldLength;
    }
}


export class FieldOptionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SIGNED_SYMBOL(): antlr.TerminalNode[];
    public SIGNED_SYMBOL(i: number): antlr.TerminalNode | null;
    public SIGNED_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.SIGNED_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.SIGNED_SYMBOL, i);
    	}
    }
    public UNSIGNED_SYMBOL(): antlr.TerminalNode[];
    public UNSIGNED_SYMBOL(i: number): antlr.TerminalNode | null;
    public UNSIGNED_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.UNSIGNED_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.UNSIGNED_SYMBOL, i);
    	}
    }
    public ZEROFILL_SYMBOL(): antlr.TerminalNode[];
    public ZEROFILL_SYMBOL(i: number): antlr.TerminalNode | null;
    public ZEROFILL_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.ZEROFILL_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.ZEROFILL_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_fieldOptions;
    }
}


export class CharsetWithOptBinaryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ascii(): AsciiContext | null {
        return this.getRuleContext(0, AsciiContext);
    }
    public unicode(): UnicodeContext | null {
        return this.getRuleContext(0, UnicodeContext);
    }
    public BYTE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BYTE_SYMBOL, 0);
    }
    public charset(): CharsetContext | null {
        return this.getRuleContext(0, CharsetContext);
    }
    public charsetName(): CharsetNameContext | null {
        return this.getRuleContext(0, CharsetNameContext);
    }
    public BINARY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_charsetWithOptBinary;
    }
}


export class AsciiContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ASCII_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.ASCII_SYMBOL, 0)!;
    }
    public BINARY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_ascii;
    }
}


export class UnicodeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UNICODE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.UNICODE_SYMBOL, 0)!;
    }
    public BINARY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_unicode;
    }
}


export class WsNumCodepointsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)!;
    }
    public real_ulong_number(): Real_ulong_numberContext {
        return this.getRuleContext(0, Real_ulong_numberContext)!;
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_wsNumCodepoints;
    }
}


export class TypeDatetimePrecisionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)!;
    }
    public INT_NUMBER(): antlr.TerminalNode {
        return this.getToken(MySQLParser.INT_NUMBER, 0)!;
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_typeDatetimePrecision;
    }
}


export class FunctionDatetimePrecisionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public parentheses(): ParenthesesContext | null {
        return this.getRuleContext(0, ParenthesesContext);
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public INT_NUMBER(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, 0);
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_functionDatetimePrecision;
    }
}


export class CharsetNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(0, TextOrIdentifierContext);
    }
    public BINARY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
    }
    public DEFAULT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_charsetName;
    }
}


export class CollationNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(0, TextOrIdentifierContext);
    }
    public DEFAULT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public BINARY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_collationName;
    }
}


export class CreateTableOptionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public createTableOption(): CreateTableOptionContext[];
    public createTableOption(i: number): CreateTableOptionContext | null;
    public createTableOption(i?: number): CreateTableOptionContext[] | CreateTableOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CreateTableOptionContext);
        }

        return this.getRuleContext(i, CreateTableOptionContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_createTableOptions;
    }
}


export class CreateTableOptionsEtcContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public createTableOptions(): CreateTableOptionsContext | null {
        return this.getRuleContext(0, CreateTableOptionsContext);
    }
    public createPartitioningEtc(): CreatePartitioningEtcContext | null {
        return this.getRuleContext(0, CreatePartitioningEtcContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_createTableOptionsEtc;
    }
}


export class CreatePartitioningEtcContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public partitionClause(): PartitionClauseContext | null {
        return this.getRuleContext(0, PartitionClauseContext);
    }
    public duplicateAsQe(): DuplicateAsQeContext | null {
        return this.getRuleContext(0, DuplicateAsQeContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_createPartitioningEtc;
    }
}


export class CreateTableOptionsSpaceSeparatedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public createTableOption(): CreateTableOptionContext[];
    public createTableOption(i: number): CreateTableOptionContext | null;
    public createTableOption(i?: number): CreateTableOptionContext[] | CreateTableOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CreateTableOptionContext);
        }

        return this.getRuleContext(i, CreateTableOptionContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_createTableOptionsSpaceSeparated;
    }
}


export class CreateTableOptionContext extends antlr.ParserRuleContext {
    public _option?: Token | null;
    public _format?: Token | null;
    public _method?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public engineRef(): EngineRefContext | null {
        return this.getRuleContext(0, EngineRefContext);
    }
    public ENGINE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ENGINE_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public SECONDARY_ENGINE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_ENGINE_SYMBOL, 0);
    }
    public NULL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NULL_SYMBOL, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(0, TextOrIdentifierContext);
    }
    public equal(): EqualContext | null {
        return this.getRuleContext(0, EqualContext);
    }
    public ulonglongNumber(): UlonglongNumberContext | null {
        return this.getRuleContext(0, UlonglongNumberContext);
    }
    public MAX_ROWS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MAX_ROWS_SYMBOL, 0);
    }
    public MIN_ROWS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MIN_ROWS_SYMBOL, 0);
    }
    public AVG_ROW_LENGTH_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.AVG_ROW_LENGTH_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(0, TextStringLiteralContext);
    }
    public PASSWORD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
    }
    public COMMENT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
    }
    public textString(): TextStringContext | null {
        return this.getRuleContext(0, TextStringContext);
    }
    public COMPRESSION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COMPRESSION_SYMBOL, 0);
    }
    public ENCRYPTION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ENCRYPTION_SYMBOL, 0);
    }
    public AUTO_INCREMENT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0);
    }
    public ternaryOption(): TernaryOptionContext | null {
        return this.getRuleContext(0, TernaryOptionContext);
    }
    public PACK_KEYS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PACK_KEYS_SYMBOL, 0);
    }
    public STATS_AUTO_RECALC_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.STATS_AUTO_RECALC_SYMBOL, 0);
    }
    public STATS_PERSISTENT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.STATS_PERSISTENT_SYMBOL, 0);
    }
    public STATS_SAMPLE_PAGES_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0);
    }
    public ulong_number(): Ulong_numberContext | null {
        return this.getRuleContext(0, Ulong_numberContext);
    }
    public CHECKSUM_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CHECKSUM_SYMBOL, 0);
    }
    public TABLE_CHECKSUM_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_CHECKSUM_SYMBOL, 0);
    }
    public DELAY_KEY_WRITE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DELAY_KEY_WRITE_SYMBOL, 0);
    }
    public ROW_FORMAT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ROW_FORMAT_SYMBOL, 0);
    }
    public DEFAULT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public DYNAMIC_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DYNAMIC_SYMBOL, 0);
    }
    public FIXED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FIXED_SYMBOL, 0);
    }
    public COMPRESSED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COMPRESSED_SYMBOL, 0);
    }
    public REDUNDANT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REDUNDANT_SYMBOL, 0);
    }
    public COMPACT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COMPACT_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public tableRefList(): TableRefListContext | null {
        return this.getRuleContext(0, TableRefListContext);
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public UNION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.UNION_SYMBOL, 0);
    }
    public defaultCharset(): DefaultCharsetContext | null {
        return this.getRuleContext(0, DefaultCharsetContext);
    }
    public defaultCollation(): DefaultCollationContext | null {
        return this.getRuleContext(0, DefaultCollationContext);
    }
    public INSERT_METHOD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INSERT_METHOD_SYMBOL, 0);
    }
    public NO_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NO_SYMBOL, 0);
    }
    public FIRST_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FIRST_SYMBOL, 0);
    }
    public LAST_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LAST_SYMBOL, 0);
    }
    public DIRECTORY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DIRECTORY_SYMBOL, 0);
    }
    public DATA_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DATA_SYMBOL, 0);
    }
    public INDEX_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public TABLESPACE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
    }
    public STORAGE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.STORAGE_SYMBOL, 0);
    }
    public DISK_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DISK_SYMBOL, 0);
    }
    public MEMORY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MEMORY_SYMBOL, 0);
    }
    public CONNECTION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CONNECTION_SYMBOL, 0);
    }
    public KEY_BLOCK_SIZE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0);
    }
    public TRANSACTION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TRANSACTION_SYMBOL, 0);
    }
    public START_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.START_SYMBOL, 0);
    }
    public jsonAttribute(): JsonAttributeContext | null {
        return this.getRuleContext(0, JsonAttributeContext);
    }
    public ENGINE_ATTRIBUTE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ENGINE_ATTRIBUTE_SYMBOL, 0);
    }
    public SECONDARY_ENGINE_ATTRIBUTE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_ENGINE_ATTRIBUTE_SYMBOL, 0);
    }
    public tsOptionAutoextendSize(): TsOptionAutoextendSizeContext | null {
        return this.getRuleContext(0, TsOptionAutoextendSizeContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_createTableOption;
    }
}


export class TernaryOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ulong_number(): Ulong_numberContext | null {
        return this.getRuleContext(0, Ulong_numberContext);
    }
    public DEFAULT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_ternaryOption;
    }
}


export class DefaultCollationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COLLATE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.COLLATE_SYMBOL, 0)!;
    }
    public collationName(): CollationNameContext {
        return this.getRuleContext(0, CollationNameContext)!;
    }
    public DEFAULT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_defaultCollation;
    }
}


export class DefaultEncryptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ENCRYPTION_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.ENCRYPTION_SYMBOL, 0)!;
    }
    public textStringLiteral(): TextStringLiteralContext {
        return this.getRuleContext(0, TextStringLiteralContext)!;
    }
    public DEFAULT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_defaultEncryption;
    }
}


export class DefaultCharsetContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public charset(): CharsetContext {
        return this.getRuleContext(0, CharsetContext)!;
    }
    public charsetName(): CharsetNameContext {
        return this.getRuleContext(0, CharsetNameContext)!;
    }
    public DEFAULT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_defaultCharset;
    }
}


export class PartitionClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARTITION_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.PARTITION_SYMBOL, 0)!;
    }
    public BY_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.BY_SYMBOL, 0)!;
    }
    public partitionTypeDef(): PartitionTypeDefContext {
        return this.getRuleContext(0, PartitionTypeDefContext)!;
    }
    public PARTITIONS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PARTITIONS_SYMBOL, 0);
    }
    public real_ulong_number(): Real_ulong_numberContext | null {
        return this.getRuleContext(0, Real_ulong_numberContext);
    }
    public subPartitions(): SubPartitionsContext | null {
        return this.getRuleContext(0, SubPartitionsContext);
    }
    public partitionDefinitions(): PartitionDefinitionsContext | null {
        return this.getRuleContext(0, PartitionDefinitionsContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_partitionClause;
    }
}


export class PartitionTypeDefContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_partitionTypeDef;
    }
    public override copyFrom(ctx: PartitionTypeDefContext): void {
        super.copyFrom(ctx);
    }
}
export class PartitionDefRangeListContext extends PartitionTypeDefContext {
    public constructor(ctx: PartitionTypeDefContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public RANGE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RANGE_SYMBOL, 0);
    }
    public LIST_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LIST_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public bitExpr(): BitExprContext | null {
        return this.getRuleContext(0, BitExprContext);
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public COLUMNS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COLUMNS_SYMBOL, 0);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(0, IdentifierListContext);
    }
}
export class PartitionDefKeyContext extends PartitionTypeDefContext {
    public constructor(ctx: PartitionTypeDefContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KEY_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.KEY_SYMBOL, 0)!;
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)!;
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)!;
    }
    public LINEAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LINEAR_SYMBOL, 0);
    }
    public partitionKeyAlgorithm(): PartitionKeyAlgorithmContext | null {
        return this.getRuleContext(0, PartitionKeyAlgorithmContext);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(0, IdentifierListContext);
    }
}
export class PartitionDefHashContext extends PartitionTypeDefContext {
    public constructor(ctx: PartitionTypeDefContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public HASH_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.HASH_SYMBOL, 0)!;
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)!;
    }
    public bitExpr(): BitExprContext {
        return this.getRuleContext(0, BitExprContext)!;
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)!;
    }
    public LINEAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LINEAR_SYMBOL, 0);
    }
}


export class SubPartitionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SUBPARTITION_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SUBPARTITION_SYMBOL, 0)!;
    }
    public BY_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.BY_SYMBOL, 0)!;
    }
    public HASH_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.HASH_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public bitExpr(): BitExprContext | null {
        return this.getRuleContext(0, BitExprContext);
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public KEY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.KEY_SYMBOL, 0);
    }
    public identifierListWithParentheses(): IdentifierListWithParenthesesContext | null {
        return this.getRuleContext(0, IdentifierListWithParenthesesContext);
    }
    public LINEAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LINEAR_SYMBOL, 0);
    }
    public SUBPARTITIONS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SUBPARTITIONS_SYMBOL, 0);
    }
    public real_ulong_number(): Real_ulong_numberContext | null {
        return this.getRuleContext(0, Real_ulong_numberContext);
    }
    public partitionKeyAlgorithm(): PartitionKeyAlgorithmContext | null {
        return this.getRuleContext(0, PartitionKeyAlgorithmContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_subPartitions;
    }
}


export class PartitionKeyAlgorithmContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALGORITHM_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.ALGORITHM_SYMBOL, 0)!;
    }
    public EQUAL_OPERATOR(): antlr.TerminalNode {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0)!;
    }
    public real_ulong_number(): Real_ulong_numberContext {
        return this.getRuleContext(0, Real_ulong_numberContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_partitionKeyAlgorithm;
    }
}


export class PartitionDefinitionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)!;
    }
    public partitionDefinition(): PartitionDefinitionContext[];
    public partitionDefinition(i: number): PartitionDefinitionContext | null;
    public partitionDefinition(i?: number): PartitionDefinitionContext[] | PartitionDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionDefinitionContext);
        }

        return this.getRuleContext(i, PartitionDefinitionContext);
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)!;
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_partitionDefinitions;
    }
}


export class PartitionDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARTITION_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.PARTITION_SYMBOL, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public VALUES_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.VALUES_SYMBOL, 0);
    }
    public LESS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LESS_SYMBOL, 0);
    }
    public THAN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.THAN_SYMBOL, 0);
    }
    public IN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.IN_SYMBOL, 0);
    }
    public partitionValuesIn(): PartitionValuesInContext | null {
        return this.getRuleContext(0, PartitionValuesInContext);
    }
    public partitionOption(): PartitionOptionContext[];
    public partitionOption(i: number): PartitionOptionContext | null;
    public partitionOption(i?: number): PartitionOptionContext[] | PartitionOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionOptionContext);
        }

        return this.getRuleContext(i, PartitionOptionContext);
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public subpartitionDefinition(): SubpartitionDefinitionContext[];
    public subpartitionDefinition(i: number): SubpartitionDefinitionContext | null;
    public subpartitionDefinition(i?: number): SubpartitionDefinitionContext[] | SubpartitionDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SubpartitionDefinitionContext);
        }

        return this.getRuleContext(i, SubpartitionDefinitionContext);
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public partitionValueItemListParen(): PartitionValueItemListParenContext | null {
        return this.getRuleContext(0, PartitionValueItemListParenContext);
    }
    public MAXVALUE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MAXVALUE_SYMBOL, 0);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_partitionDefinition;
    }
}


export class PartitionValuesInContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public partitionValueItemListParen(): PartitionValueItemListParenContext[];
    public partitionValueItemListParen(i: number): PartitionValueItemListParenContext | null;
    public partitionValueItemListParen(i?: number): PartitionValueItemListParenContext[] | PartitionValueItemListParenContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionValueItemListParenContext);
        }

        return this.getRuleContext(i, PartitionValueItemListParenContext);
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_partitionValuesIn;
    }
}


export class PartitionOptionContext extends antlr.ParserRuleContext {
    public _option?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public TABLESPACE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public engineRef(): EngineRefContext | null {
        return this.getRuleContext(0, EngineRefContext);
    }
    public ENGINE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ENGINE_SYMBOL, 0);
    }
    public STORAGE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.STORAGE_SYMBOL, 0);
    }
    public real_ulong_number(): Real_ulong_numberContext | null {
        return this.getRuleContext(0, Real_ulong_numberContext);
    }
    public NODEGROUP_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NODEGROUP_SYMBOL, 0);
    }
    public MAX_ROWS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MAX_ROWS_SYMBOL, 0);
    }
    public MIN_ROWS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MIN_ROWS_SYMBOL, 0);
    }
    public DIRECTORY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DIRECTORY_SYMBOL, 0);
    }
    public textLiteral(): TextLiteralContext | null {
        return this.getRuleContext(0, TextLiteralContext);
    }
    public DATA_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DATA_SYMBOL, 0);
    }
    public INDEX_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
    }
    public COMMENT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_partitionOption;
    }
}


export class SubpartitionDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SUBPARTITION_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SUBPARTITION_SYMBOL, 0)!;
    }
    public textOrIdentifier(): TextOrIdentifierContext {
        return this.getRuleContext(0, TextOrIdentifierContext)!;
    }
    public partitionOption(): PartitionOptionContext[];
    public partitionOption(i: number): PartitionOptionContext | null;
    public partitionOption(i?: number): PartitionOptionContext[] | PartitionOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionOptionContext);
        }

        return this.getRuleContext(i, PartitionOptionContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_subpartitionDefinition;
    }
}


export class PartitionValueItemListParenContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)!;
    }
    public partitionValueItem(): PartitionValueItemContext[];
    public partitionValueItem(i: number): PartitionValueItemContext | null;
    public partitionValueItem(i?: number): PartitionValueItemContext[] | PartitionValueItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionValueItemContext);
        }

        return this.getRuleContext(i, PartitionValueItemContext);
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)!;
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_partitionValueItemListParen;
    }
}


export class PartitionValueItemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public bitExpr(): BitExprContext | null {
        return this.getRuleContext(0, BitExprContext);
    }
    public MAXVALUE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MAXVALUE_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_partitionValueItem;
    }
}


export class DefinerClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DEFINER_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.DEFINER_SYMBOL, 0)!;
    }
    public EQUAL_OPERATOR(): antlr.TerminalNode {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0)!;
    }
    public user(): UserContext {
        return this.getRuleContext(0, UserContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_definerClause;
    }
}


export class IfExistsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IF_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.IF_SYMBOL, 0)!;
    }
    public EXISTS_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.EXISTS_SYMBOL, 0)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_ifExists;
    }
}


export class IfExistsIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ifExists(): IfExistsContext {
        return this.getRuleContext(0, IfExistsContext)!;
    }
    public persistedVariableIdentifier(): PersistedVariableIdentifierContext {
        return this.getRuleContext(0, PersistedVariableIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_ifExistsIdentifier;
    }
}


export class PersistedVariableIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public qualifiedIdentifier(): QualifiedIdentifierContext | null {
        return this.getRuleContext(0, QualifiedIdentifierContext);
    }
    public DEFAULT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public dotIdentifier(): DotIdentifierContext | null {
        return this.getRuleContext(0, DotIdentifierContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_persistedVariableIdentifier;
    }
}


export class IfNotExistsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IF_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.IF_SYMBOL, 0)!;
    }
    public notRule(): NotRuleContext {
        return this.getRuleContext(0, NotRuleContext)!;
    }
    public EXISTS_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.EXISTS_SYMBOL, 0)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_ifNotExists;
    }
}


export class IgnoreUnknownUserContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IGNORE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.IGNORE_SYMBOL, 0)!;
    }
    public UNKNOWN_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.UNKNOWN_SYMBOL, 0)!;
    }
    public USER_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.USER_SYMBOL, 0)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_ignoreUnknownUser;
    }
}


export class ProcedureParameterContext extends antlr.ParserRuleContext {
    public _type_?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public functionParameter(): FunctionParameterContext {
        return this.getRuleContext(0, FunctionParameterContext)!;
    }
    public IN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.IN_SYMBOL, 0);
    }
    public OUT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OUT_SYMBOL, 0);
    }
    public INOUT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INOUT_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_procedureParameter;
    }
}


export class FunctionParameterContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public parameterName(): ParameterNameContext {
        return this.getRuleContext(0, ParameterNameContext)!;
    }
    public typeWithOptCollate(): TypeWithOptCollateContext {
        return this.getRuleContext(0, TypeWithOptCollateContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_functionParameter;
    }
}


export class CollateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COLLATE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.COLLATE_SYMBOL, 0)!;
    }
    public collationName(): CollationNameContext {
        return this.getRuleContext(0, CollationNameContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_collate;
    }
}


export class TypeWithOptCollateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public dataType(): DataTypeContext {
        return this.getRuleContext(0, DataTypeContext)!;
    }
    public collate(): CollateContext | null {
        return this.getRuleContext(0, CollateContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_typeWithOptCollate;
    }
}


export class SchemaIdentifierPairContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)!;
    }
    public schemaRef(): SchemaRefContext[];
    public schemaRef(i: number): SchemaRefContext | null;
    public schemaRef(i?: number): SchemaRefContext[] | SchemaRefContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SchemaRefContext);
        }

        return this.getRuleContext(i, SchemaRefContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.COMMA_SYMBOL, 0)!;
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_schemaIdentifierPair;
    }
}


export class ViewRefListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public viewRef(): ViewRefContext[];
    public viewRef(i: number): ViewRefContext | null;
    public viewRef(i?: number): ViewRefContext[] | ViewRefContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ViewRefContext);
        }

        return this.getRuleContext(i, ViewRefContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_viewRefList;
    }
}


export class UpdateListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public updateElement(): UpdateElementContext[];
    public updateElement(i: number): UpdateElementContext | null;
    public updateElement(i?: number): UpdateElementContext[] | UpdateElementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UpdateElementContext);
        }

        return this.getRuleContext(i, UpdateElementContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_updateList;
    }
}


export class UpdateElementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnRef(): ColumnRefContext {
        return this.getRuleContext(0, ColumnRefContext)!;
    }
    public EQUAL_OPERATOR(): antlr.TerminalNode {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0)!;
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(0, ExprContext);
    }
    public DEFAULT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_updateElement;
    }
}


export class CharsetClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public charset(): CharsetContext {
        return this.getRuleContext(0, CharsetContext)!;
    }
    public charsetName(): CharsetNameContext {
        return this.getRuleContext(0, CharsetNameContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_charsetClause;
    }
}


export class FieldsClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COLUMNS_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.COLUMNS_SYMBOL, 0)!;
    }
    public fieldTerm(): FieldTermContext[];
    public fieldTerm(i: number): FieldTermContext | null;
    public fieldTerm(i?: number): FieldTermContext[] | FieldTermContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FieldTermContext);
        }

        return this.getRuleContext(i, FieldTermContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_fieldsClause;
    }
}


export class FieldTermContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TERMINATED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TERMINATED_SYMBOL, 0);
    }
    public BY_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.BY_SYMBOL, 0)!;
    }
    public textString(): TextStringContext {
        return this.getRuleContext(0, TextStringContext)!;
    }
    public ENCLOSED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ENCLOSED_SYMBOL, 0);
    }
    public OPTIONALLY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OPTIONALLY_SYMBOL, 0);
    }
    public ESCAPED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ESCAPED_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_fieldTerm;
    }
}


export class LinesClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LINES_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.LINES_SYMBOL, 0)!;
    }
    public lineTerm(): LineTermContext[];
    public lineTerm(i: number): LineTermContext | null;
    public lineTerm(i?: number): LineTermContext[] | LineTermContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LineTermContext);
        }

        return this.getRuleContext(i, LineTermContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_linesClause;
    }
}


export class LineTermContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BY_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.BY_SYMBOL, 0)!;
    }
    public textString(): TextStringContext {
        return this.getRuleContext(0, TextStringContext)!;
    }
    public TERMINATED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TERMINATED_SYMBOL, 0);
    }
    public STARTING_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.STARTING_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_lineTerm;
    }
}


export class UserListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public user(): UserContext[];
    public user(i: number): UserContext | null;
    public user(i?: number): UserContext[] | UserContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UserContext);
        }

        return this.getRuleContext(i, UserContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_userList;
    }
}


export class CreateUserListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public createUser(): CreateUserContext[];
    public createUser(i: number): CreateUserContext | null;
    public createUser(i?: number): CreateUserContext[] | CreateUserContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CreateUserContext);
        }

        return this.getRuleContext(i, CreateUserContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_createUserList;
    }
}


export class CreateUserContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public user(): UserContext {
        return this.getRuleContext(0, UserContext)!;
    }
    public identification(): IdentificationContext | null {
        return this.getRuleContext(0, IdentificationContext);
    }
    public identifiedWithPlugin(): IdentifiedWithPluginContext | null {
        return this.getRuleContext(0, IdentifiedWithPluginContext);
    }
    public createUserWithMfa(): CreateUserWithMfaContext | null {
        return this.getRuleContext(0, CreateUserWithMfaContext);
    }
    public initialAuth(): InitialAuthContext | null {
        return this.getRuleContext(0, InitialAuthContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_createUser;
    }
}


export class CreateUserWithMfaContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AND_SYMBOL(): antlr.TerminalNode[];
    public AND_SYMBOL(i: number): antlr.TerminalNode | null;
    public AND_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.AND_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.AND_SYMBOL, i);
    	}
    }
    public identification(): IdentificationContext[];
    public identification(i: number): IdentificationContext | null;
    public identification(i?: number): IdentificationContext[] | IdentificationContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentificationContext);
        }

        return this.getRuleContext(i, IdentificationContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_createUserWithMfa;
    }
}


export class IdentificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifiedByPassword(): IdentifiedByPasswordContext | null {
        return this.getRuleContext(0, IdentifiedByPasswordContext);
    }
    public identifiedByRandomPassword(): IdentifiedByRandomPasswordContext | null {
        return this.getRuleContext(0, IdentifiedByRandomPasswordContext);
    }
    public identifiedWithPlugin(): IdentifiedWithPluginContext | null {
        return this.getRuleContext(0, IdentifiedWithPluginContext);
    }
    public identifiedWithPluginAsAuth(): IdentifiedWithPluginAsAuthContext | null {
        return this.getRuleContext(0, IdentifiedWithPluginAsAuthContext);
    }
    public identifiedWithPluginByPassword(): IdentifiedWithPluginByPasswordContext | null {
        return this.getRuleContext(0, IdentifiedWithPluginByPasswordContext);
    }
    public identifiedWithPluginByRandomPassword(): IdentifiedWithPluginByRandomPasswordContext | null {
        return this.getRuleContext(0, IdentifiedWithPluginByRandomPasswordContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_identification;
    }
}


export class IdentifiedByPasswordContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IDENTIFIED_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0)!;
    }
    public BY_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.BY_SYMBOL, 0)!;
    }
    public textStringLiteral(): TextStringLiteralContext {
        return this.getRuleContext(0, TextStringLiteralContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_identifiedByPassword;
    }
}


export class IdentifiedByRandomPasswordContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IDENTIFIED_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0)!;
    }
    public BY_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.BY_SYMBOL, 0)!;
    }
    public RANDOM_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.RANDOM_SYMBOL, 0)!;
    }
    public PASSWORD_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_identifiedByRandomPassword;
    }
}


export class IdentifiedWithPluginContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IDENTIFIED_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0)!;
    }
    public WITH_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0)!;
    }
    public textOrIdentifier(): TextOrIdentifierContext {
        return this.getRuleContext(0, TextOrIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_identifiedWithPlugin;
    }
}


export class IdentifiedWithPluginAsAuthContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IDENTIFIED_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0)!;
    }
    public WITH_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0)!;
    }
    public textOrIdentifier(): TextOrIdentifierContext {
        return this.getRuleContext(0, TextOrIdentifierContext)!;
    }
    public AS_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.AS_SYMBOL, 0)!;
    }
    public textStringHash(): TextStringHashContext {
        return this.getRuleContext(0, TextStringHashContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_identifiedWithPluginAsAuth;
    }
}


export class IdentifiedWithPluginByPasswordContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IDENTIFIED_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0)!;
    }
    public WITH_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0)!;
    }
    public textOrIdentifier(): TextOrIdentifierContext {
        return this.getRuleContext(0, TextOrIdentifierContext)!;
    }
    public BY_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.BY_SYMBOL, 0)!;
    }
    public textStringLiteral(): TextStringLiteralContext {
        return this.getRuleContext(0, TextStringLiteralContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_identifiedWithPluginByPassword;
    }
}


export class IdentifiedWithPluginByRandomPasswordContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IDENTIFIED_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0)!;
    }
    public WITH_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0)!;
    }
    public textOrIdentifier(): TextOrIdentifierContext {
        return this.getRuleContext(0, TextOrIdentifierContext)!;
    }
    public BY_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.BY_SYMBOL, 0)!;
    }
    public RANDOM_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.RANDOM_SYMBOL, 0)!;
    }
    public PASSWORD_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_identifiedWithPluginByRandomPassword;
    }
}


export class InitialAuthContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INITIAL_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.INITIAL_SYMBOL, 0)!;
    }
    public AUTHENTICATION_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.AUTHENTICATION_SYMBOL, 0)!;
    }
    public identifiedByRandomPassword(): IdentifiedByRandomPasswordContext | null {
        return this.getRuleContext(0, IdentifiedByRandomPasswordContext);
    }
    public identifiedWithPluginAsAuth(): IdentifiedWithPluginAsAuthContext | null {
        return this.getRuleContext(0, IdentifiedWithPluginAsAuthContext);
    }
    public identifiedByPassword(): IdentifiedByPasswordContext | null {
        return this.getRuleContext(0, IdentifiedByPasswordContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_initialAuth;
    }
}


export class RetainCurrentPasswordContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RETAIN_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.RETAIN_SYMBOL, 0)!;
    }
    public CURRENT_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CURRENT_SYMBOL, 0)!;
    }
    public PASSWORD_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_retainCurrentPassword;
    }
}


export class DiscardOldPasswordContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DISCARD_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.DISCARD_SYMBOL, 0)!;
    }
    public OLD_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OLD_SYMBOL, 0)!;
    }
    public PASSWORD_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_discardOldPassword;
    }
}


export class UserRegistrationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public factor(): FactorContext {
        return this.getRuleContext(0, FactorContext)!;
    }
    public INITIATE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INITIATE_SYMBOL, 0);
    }
    public REGISTRATION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REGISTRATION_SYMBOL, 0);
    }
    public UNREGISTER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.UNREGISTER_SYMBOL, 0);
    }
    public FINISH_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FINISH_SYMBOL, 0);
    }
    public SET_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SET_SYMBOL, 0);
    }
    public CHALLENGE_RESPONSE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CHALLENGE_RESPONSE_SYMBOL, 0);
    }
    public AS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.AS_SYMBOL, 0);
    }
    public textStringHash(): TextStringHashContext | null {
        return this.getRuleContext(0, TextStringHashContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_userRegistration;
    }
}


export class FactorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public numLiteral(): NumLiteralContext {
        return this.getRuleContext(0, NumLiteralContext)!;
    }
    public FACTOR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.FACTOR_SYMBOL, 0)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_factor;
    }
}


export class ReplacePasswordContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REPLACE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.REPLACE_SYMBOL, 0)!;
    }
    public textString(): TextStringContext {
        return this.getRuleContext(0, TextStringContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_replacePassword;
    }
}


export class UserIdentifierOrTextContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textOrIdentifier(): TextOrIdentifierContext {
        return this.getRuleContext(0, TextOrIdentifierContext)!;
    }
    public userVariable(): UserVariableContext | null {
        return this.getRuleContext(0, UserVariableContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_userIdentifierOrText;
    }
}


export class UserContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public userIdentifierOrText(): UserIdentifierOrTextContext | null {
        return this.getRuleContext(0, UserIdentifierOrTextContext);
    }
    public CURRENT_USER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CURRENT_USER_SYMBOL, 0);
    }
    public parentheses(): ParenthesesContext | null {
        return this.getRuleContext(0, ParenthesesContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_user;
    }
}


export class LikeClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIKE_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.LIKE_SYMBOL, 0)!;
    }
    public textStringLiteral(): TextStringLiteralContext {
        return this.getRuleContext(0, TextStringLiteralContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_likeClause;
    }
}


export class LikeOrWhereContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public likeClause(): LikeClauseContext | null {
        return this.getRuleContext(0, LikeClauseContext);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_likeOrWhere;
    }
}


export class OnlineOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ONLINE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ONLINE_SYMBOL, 0);
    }
    public OFFLINE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OFFLINE_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_onlineOption;
    }
}


export class NoWriteToBinLogContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOCAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
    }
    public NO_WRITE_TO_BINLOG_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NO_WRITE_TO_BINLOG_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_noWriteToBinLog;
    }
}


export class UsePartitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARTITION_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.PARTITION_SYMBOL, 0)!;
    }
    public identifierListWithParentheses(): IdentifierListWithParenthesesContext {
        return this.getRuleContext(0, IdentifierListWithParenthesesContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_usePartition;
    }
}


export class FieldIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public dotIdentifier(): DotIdentifierContext | null {
        return this.getRuleContext(0, DotIdentifierContext);
    }
    public qualifiedIdentifier(): QualifiedIdentifierContext | null {
        return this.getRuleContext(0, QualifiedIdentifierContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_fieldIdentifier;
    }
}


export class ColumnNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_columnName;
    }
}


export class ColumnInternalRefContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_columnInternalRef;
    }
}


export class ColumnInternalRefListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)!;
    }
    public columnInternalRef(): ColumnInternalRefContext[];
    public columnInternalRef(i: number): ColumnInternalRefContext | null;
    public columnInternalRef(i?: number): ColumnInternalRefContext[] | ColumnInternalRefContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnInternalRefContext);
        }

        return this.getRuleContext(i, ColumnInternalRefContext);
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)!;
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_columnInternalRefList;
    }
}


export class ColumnRefContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public fieldIdentifier(): FieldIdentifierContext {
        return this.getRuleContext(0, FieldIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_columnRef;
    }
}


export class InsertIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnRef(): ColumnRefContext | null {
        return this.getRuleContext(0, ColumnRefContext);
    }
    public tableWild(): TableWildContext | null {
        return this.getRuleContext(0, TableWildContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_insertIdentifier;
    }
}


export class IndexNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_indexName;
    }
}


export class IndexRefContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public fieldIdentifier(): FieldIdentifierContext {
        return this.getRuleContext(0, FieldIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_indexRef;
    }
}


export class TableWildContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public DOT_SYMBOL(): antlr.TerminalNode[];
    public DOT_SYMBOL(i: number): antlr.TerminalNode | null;
    public DOT_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.DOT_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.DOT_SYMBOL, i);
    	}
    }
    public MULT_OPERATOR(): antlr.TerminalNode {
        return this.getToken(MySQLParser.MULT_OPERATOR, 0)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_tableWild;
    }
}


export class SchemaNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_schemaName;
    }
}


export class SchemaRefContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_schemaRef;
    }
}


export class ProcedureNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedIdentifier(): QualifiedIdentifierContext {
        return this.getRuleContext(0, QualifiedIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_procedureName;
    }
}


export class ProcedureRefContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedIdentifier(): QualifiedIdentifierContext {
        return this.getRuleContext(0, QualifiedIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_procedureRef;
    }
}


export class FunctionNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedIdentifier(): QualifiedIdentifierContext {
        return this.getRuleContext(0, QualifiedIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_functionName;
    }
}


export class FunctionRefContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedIdentifier(): QualifiedIdentifierContext {
        return this.getRuleContext(0, QualifiedIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_functionRef;
    }
}


export class TriggerNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedIdentifier(): QualifiedIdentifierContext {
        return this.getRuleContext(0, QualifiedIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_triggerName;
    }
}


export class TriggerRefContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedIdentifier(): QualifiedIdentifierContext {
        return this.getRuleContext(0, QualifiedIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_triggerRef;
    }
}


export class ViewNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedIdentifier(): QualifiedIdentifierContext | null {
        return this.getRuleContext(0, QualifiedIdentifierContext);
    }
    public dotIdentifier(): DotIdentifierContext | null {
        return this.getRuleContext(0, DotIdentifierContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_viewName;
    }
}


export class ViewRefContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedIdentifier(): QualifiedIdentifierContext | null {
        return this.getRuleContext(0, QualifiedIdentifierContext);
    }
    public dotIdentifier(): DotIdentifierContext | null {
        return this.getRuleContext(0, DotIdentifierContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_viewRef;
    }
}


export class TablespaceNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_tablespaceName;
    }
}


export class TablespaceRefContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_tablespaceRef;
    }
}


export class LogfileGroupNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_logfileGroupName;
    }
}


export class LogfileGroupRefContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_logfileGroupRef;
    }
}


export class EventNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedIdentifier(): QualifiedIdentifierContext {
        return this.getRuleContext(0, QualifiedIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_eventName;
    }
}


export class EventRefContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedIdentifier(): QualifiedIdentifierContext {
        return this.getRuleContext(0, QualifiedIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_eventRef;
    }
}


export class UdfNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_udfName;
    }
}


export class ServerNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textOrIdentifier(): TextOrIdentifierContext {
        return this.getRuleContext(0, TextOrIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_serverName;
    }
}


export class ServerRefContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textOrIdentifier(): TextOrIdentifierContext {
        return this.getRuleContext(0, TextOrIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_serverRef;
    }
}


export class EngineRefContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textOrIdentifier(): TextOrIdentifierContext {
        return this.getRuleContext(0, TextOrIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_engineRef;
    }
}


export class TableNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedIdentifier(): QualifiedIdentifierContext | null {
        return this.getRuleContext(0, QualifiedIdentifierContext);
    }
    public dotIdentifier(): DotIdentifierContext | null {
        return this.getRuleContext(0, DotIdentifierContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_tableName;
    }
}


export class FilterTableRefContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public schemaRef(): SchemaRefContext {
        return this.getRuleContext(0, SchemaRefContext)!;
    }
    public dotIdentifier(): DotIdentifierContext {
        return this.getRuleContext(0, DotIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_filterTableRef;
    }
}


export class TableRefWithWildcardContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public DOT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DOT_SYMBOL, 0);
    }
    public MULT_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MULT_OPERATOR, 0);
    }
    public dotIdentifier(): DotIdentifierContext | null {
        return this.getRuleContext(0, DotIdentifierContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_tableRefWithWildcard;
    }
}


export class TableRefContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedIdentifier(): QualifiedIdentifierContext | null {
        return this.getRuleContext(0, QualifiedIdentifierContext);
    }
    public dotIdentifier(): DotIdentifierContext | null {
        return this.getRuleContext(0, DotIdentifierContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_tableRef;
    }
}


export class TableRefListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableRef(): TableRefContext[];
    public tableRef(i: number): TableRefContext | null;
    public tableRef(i?: number): TableRefContext[] | TableRefContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableRefContext);
        }

        return this.getRuleContext(i, TableRefContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_tableRefList;
    }
}


export class TableAliasRefListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableRefWithWildcard(): TableRefWithWildcardContext[];
    public tableRefWithWildcard(i: number): TableRefWithWildcardContext | null;
    public tableRefWithWildcard(i?: number): TableRefWithWildcardContext[] | TableRefWithWildcardContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableRefWithWildcardContext);
        }

        return this.getRuleContext(i, TableRefWithWildcardContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_tableAliasRefList;
    }
}


export class ParameterNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_parameterName;
    }
}


export class LabelIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public pureIdentifier(): PureIdentifierContext | null {
        return this.getRuleContext(0, PureIdentifierContext);
    }
    public labelKeyword(): LabelKeywordContext | null {
        return this.getRuleContext(0, LabelKeywordContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_labelIdentifier;
    }
}


export class LabelRefContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public labelIdentifier(): LabelIdentifierContext {
        return this.getRuleContext(0, LabelIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_labelRef;
    }
}


export class RoleIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public pureIdentifier(): PureIdentifierContext | null {
        return this.getRuleContext(0, PureIdentifierContext);
    }
    public roleKeyword(): RoleKeywordContext | null {
        return this.getRuleContext(0, RoleKeywordContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_roleIdentifier;
    }
}


export class PluginRefContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_pluginRef;
    }
}


export class ComponentRefContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textStringLiteral(): TextStringLiteralContext {
        return this.getRuleContext(0, TextStringLiteralContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_componentRef;
    }
}


export class ResourceGroupRefContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_resourceGroupRef;
    }
}


export class WindowNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_windowName;
    }
}


export class PureIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IDENTIFIER(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.IDENTIFIER, 0);
    }
    public BACK_TICK_QUOTED_ID(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BACK_TICK_QUOTED_ID, 0);
    }
    public DOUBLE_QUOTED_TEXT(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DOUBLE_QUOTED_TEXT, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_pureIdentifier;
    }
}


export class IdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public pureIdentifier(): PureIdentifierContext | null {
        return this.getRuleContext(0, PureIdentifierContext);
    }
    public identifierKeyword(): IdentifierKeywordContext | null {
        return this.getRuleContext(0, IdentifierKeywordContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_identifier;
    }
}


export class IdentifierListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_identifierList;
    }
}


export class IdentifierListWithParenthesesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)!;
    }
    public identifierList(): IdentifierListContext {
        return this.getRuleContext(0, IdentifierListContext)!;
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_identifierListWithParentheses;
    }
}


export class QualifiedIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public dotIdentifier(): DotIdentifierContext | null {
        return this.getRuleContext(0, DotIdentifierContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_qualifiedIdentifier;
    }
}


export class SimpleIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public dotIdentifier(): DotIdentifierContext[];
    public dotIdentifier(i: number): DotIdentifierContext | null;
    public dotIdentifier(i?: number): DotIdentifierContext[] | DotIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DotIdentifierContext);
        }

        return this.getRuleContext(i, DotIdentifierContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_simpleIdentifier;
    }
}


export class DotIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DOT_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.DOT_SYMBOL, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_dotIdentifier;
    }
}


export class Ulong_numberContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INT_NUMBER(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, 0);
    }
    public HEX_NUMBER(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.HEX_NUMBER, 0);
    }
    public LONG_NUMBER(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LONG_NUMBER, 0);
    }
    public ULONGLONG_NUMBER(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ULONGLONG_NUMBER, 0);
    }
    public DECIMAL_NUMBER(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DECIMAL_NUMBER, 0);
    }
    public FLOAT_NUMBER(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FLOAT_NUMBER, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_ulong_number;
    }
}


export class Real_ulong_numberContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INT_NUMBER(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, 0);
    }
    public HEX_NUMBER(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.HEX_NUMBER, 0);
    }
    public LONG_NUMBER(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LONG_NUMBER, 0);
    }
    public ULONGLONG_NUMBER(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ULONGLONG_NUMBER, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_real_ulong_number;
    }
}


export class UlonglongNumberContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INT_NUMBER(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, 0);
    }
    public LONG_NUMBER(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LONG_NUMBER, 0);
    }
    public ULONGLONG_NUMBER(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ULONGLONG_NUMBER, 0);
    }
    public DECIMAL_NUMBER(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DECIMAL_NUMBER, 0);
    }
    public FLOAT_NUMBER(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FLOAT_NUMBER, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_ulonglongNumber;
    }
}


export class Real_ulonglong_numberContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INT_NUMBER(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, 0);
    }
    public HEX_NUMBER(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.HEX_NUMBER, 0);
    }
    public ULONGLONG_NUMBER(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ULONGLONG_NUMBER, 0);
    }
    public LONG_NUMBER(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LONG_NUMBER, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_real_ulonglong_number;
    }
}


export class SignedLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public literal(): LiteralContext | null {
        return this.getRuleContext(0, LiteralContext);
    }
    public PLUS_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PLUS_OPERATOR, 0);
    }
    public ulong_number(): Ulong_numberContext | null {
        return this.getRuleContext(0, Ulong_numberContext);
    }
    public MINUS_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MINUS_OPERATOR, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_signedLiteral;
    }
}


export class SignedLiteralOrNullContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public signedLiteral(): SignedLiteralContext | null {
        return this.getRuleContext(0, SignedLiteralContext);
    }
    public nullAsLiteral(): NullAsLiteralContext | null {
        return this.getRuleContext(0, NullAsLiteralContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_signedLiteralOrNull;
    }
}


export class LiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textLiteral(): TextLiteralContext | null {
        return this.getRuleContext(0, TextLiteralContext);
    }
    public numLiteral(): NumLiteralContext | null {
        return this.getRuleContext(0, NumLiteralContext);
    }
    public temporalLiteral(): TemporalLiteralContext | null {
        return this.getRuleContext(0, TemporalLiteralContext);
    }
    public nullLiteral(): NullLiteralContext | null {
        return this.getRuleContext(0, NullLiteralContext);
    }
    public boolLiteral(): BoolLiteralContext | null {
        return this.getRuleContext(0, BoolLiteralContext);
    }
    public HEX_NUMBER(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.HEX_NUMBER, 0);
    }
    public BIN_NUMBER(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BIN_NUMBER, 0);
    }
    public UNDERSCORE_CHARSET(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.UNDERSCORE_CHARSET, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_literal;
    }
}


export class LiteralOrNullContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public literal(): LiteralContext | null {
        return this.getRuleContext(0, LiteralContext);
    }
    public nullAsLiteral(): NullAsLiteralContext | null {
        return this.getRuleContext(0, NullAsLiteralContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_literalOrNull;
    }
}


export class NullAsLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NULL_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.NULL_SYMBOL, 0)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_nullAsLiteral;
    }
}


export class StringListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)!;
    }
    public textString(): TextStringContext[];
    public textString(i: number): TextStringContext | null;
    public textString(i?: number): TextStringContext[] | TextStringContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TextStringContext);
        }

        return this.getRuleContext(i, TextStringContext);
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)!;
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_stringList;
    }
}


export class TextStringLiteralContext extends antlr.ParserRuleContext {
    public _value?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SINGLE_QUOTED_TEXT(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SINGLE_QUOTED_TEXT, 0);
    }
    public DOUBLE_QUOTED_TEXT(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DOUBLE_QUOTED_TEXT, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_textStringLiteral;
    }
}


export class TextStringContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(0, TextStringLiteralContext);
    }
    public HEX_NUMBER(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.HEX_NUMBER, 0);
    }
    public BIN_NUMBER(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BIN_NUMBER, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_textString;
    }
}


export class TextStringHashContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(0, TextStringLiteralContext);
    }
    public HEX_NUMBER(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.HEX_NUMBER, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_textStringHash;
    }
}


export class TextLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textStringLiteral(): TextStringLiteralContext[];
    public textStringLiteral(i: number): TextStringLiteralContext | null;
    public textStringLiteral(i?: number): TextStringLiteralContext[] | TextStringLiteralContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TextStringLiteralContext);
        }

        return this.getRuleContext(i, TextStringLiteralContext);
    }
    public NCHAR_TEXT(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NCHAR_TEXT, 0);
    }
    public UNDERSCORE_CHARSET(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.UNDERSCORE_CHARSET, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_textLiteral;
    }
}


export class TextStringNoLinebreakContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textStringLiteral(): TextStringLiteralContext {
        return this.getRuleContext(0, TextStringLiteralContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_textStringNoLinebreak;
    }
}


export class TextStringLiteralListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textStringLiteral(): TextStringLiteralContext[];
    public textStringLiteral(i: number): TextStringLiteralContext | null;
    public textStringLiteral(i?: number): TextStringLiteralContext[] | TextStringLiteralContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TextStringLiteralContext);
        }

        return this.getRuleContext(i, TextStringLiteralContext);
    }
    public COMMA_SYMBOL(): antlr.TerminalNode[];
    public COMMA_SYMBOL(i: number): antlr.TerminalNode | null;
    public COMMA_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.COMMA_SYMBOL);
    	} else {
    		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_textStringLiteralList;
    }
}


export class NumLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public int64Literal(): Int64LiteralContext | null {
        return this.getRuleContext(0, Int64LiteralContext);
    }
    public DECIMAL_NUMBER(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DECIMAL_NUMBER, 0);
    }
    public FLOAT_NUMBER(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FLOAT_NUMBER, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_numLiteral;
    }
}


export class BoolLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TRUE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TRUE_SYMBOL, 0);
    }
    public FALSE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FALSE_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_boolLiteral;
    }
}


export class NullLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NULL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NULL_SYMBOL, 0);
    }
    public NULL2_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NULL2_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_nullLiteral;
    }
}


export class Int64LiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INT_NUMBER(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, 0);
    }
    public LONG_NUMBER(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LONG_NUMBER, 0);
    }
    public ULONGLONG_NUMBER(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ULONGLONG_NUMBER, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_int64Literal;
    }
}


export class TemporalLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DATE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DATE_SYMBOL, 0);
    }
    public SINGLE_QUOTED_TEXT(): antlr.TerminalNode {
        return this.getToken(MySQLParser.SINGLE_QUOTED_TEXT, 0)!;
    }
    public TIME_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TIME_SYMBOL, 0);
    }
    public TIMESTAMP_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TIMESTAMP_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_temporalLiteral;
    }
}


export class FloatOptionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public fieldLength(): FieldLengthContext | null {
        return this.getRuleContext(0, FieldLengthContext);
    }
    public precision(): PrecisionContext | null {
        return this.getRuleContext(0, PrecisionContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_floatOptions;
    }
}


export class StandardFloatOptionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public precision(): PrecisionContext {
        return this.getRuleContext(0, PrecisionContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_standardFloatOptions;
    }
}


export class PrecisionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)!;
    }
    public INT_NUMBER(): antlr.TerminalNode[];
    public INT_NUMBER(i: number): antlr.TerminalNode | null;
    public INT_NUMBER(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySQLParser.INT_NUMBER);
    	} else {
    		return this.getToken(MySQLParser.INT_NUMBER, i);
    	}
    }
    public COMMA_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.COMMA_SYMBOL, 0)!;
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_precision;
    }
}


export class TextOrIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(0, TextStringLiteralContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_textOrIdentifier;
    }
}


export class LValueIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public pureIdentifier(): PureIdentifierContext | null {
        return this.getRuleContext(0, PureIdentifierContext);
    }
    public lValueKeyword(): LValueKeywordContext | null {
        return this.getRuleContext(0, LValueKeywordContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_lValueIdentifier;
    }
}


export class RoleIdentifierOrTextContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public roleIdentifier(): RoleIdentifierContext | null {
        return this.getRuleContext(0, RoleIdentifierContext);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(0, TextStringLiteralContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_roleIdentifierOrText;
    }
}


export class SizeNumberContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public real_ulonglong_number(): Real_ulonglong_numberContext | null {
        return this.getRuleContext(0, Real_ulonglong_numberContext);
    }
    public pureIdentifier(): PureIdentifierContext | null {
        return this.getRuleContext(0, PureIdentifierContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_sizeNumber;
    }
}


export class ParenthesesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)!;
    }
    public CLOSE_PAR_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_parentheses;
    }
}


export class EqualContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQUAL_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public ASSIGN_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ASSIGN_OPERATOR, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_equal;
    }
}


export class OptionTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PERSIST_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PERSIST_SYMBOL, 0);
    }
    public PERSIST_ONLY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PERSIST_ONLY_SYMBOL, 0);
    }
    public GLOBAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.GLOBAL_SYMBOL, 0);
    }
    public LOCAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
    }
    public SESSION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SESSION_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_optionType;
    }
}


export class RvalueSystemVariableTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GLOBAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.GLOBAL_SYMBOL, 0);
    }
    public DOT_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.DOT_SYMBOL, 0)!;
    }
    public LOCAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
    }
    public SESSION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SESSION_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_rvalueSystemVariableType;
    }
}


export class SetVarIdentTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DOT_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySQLParser.DOT_SYMBOL, 0)!;
    }
    public PERSIST_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PERSIST_SYMBOL, 0);
    }
    public PERSIST_ONLY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PERSIST_ONLY_SYMBOL, 0);
    }
    public GLOBAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.GLOBAL_SYMBOL, 0);
    }
    public LOCAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
    }
    public SESSION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SESSION_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_setVarIdentType;
    }
}


export class JsonAttributeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textStringLiteral(): TextStringLiteralContext {
        return this.getRuleContext(0, TextStringLiteralContext)!;
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_jsonAttribute;
    }
}


export class IdentifierKeywordContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public labelKeyword(): LabelKeywordContext | null {
        return this.getRuleContext(0, LabelKeywordContext);
    }
    public roleOrIdentifierKeyword(): RoleOrIdentifierKeywordContext | null {
        return this.getRuleContext(0, RoleOrIdentifierKeywordContext);
    }
    public EXECUTE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EXECUTE_SYMBOL, 0);
    }
    public SHUTDOWN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SHUTDOWN_SYMBOL, 0);
    }
    public RESTART_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RESTART_SYMBOL, 0);
    }
    public identifierKeywordsUnambiguous(): IdentifierKeywordsUnambiguousContext | null {
        return this.getRuleContext(0, IdentifierKeywordsUnambiguousContext);
    }
    public identifierKeywordsAmbiguous1RolesAndLabels(): IdentifierKeywordsAmbiguous1RolesAndLabelsContext | null {
        return this.getRuleContext(0, IdentifierKeywordsAmbiguous1RolesAndLabelsContext);
    }
    public identifierKeywordsAmbiguous2Labels(): IdentifierKeywordsAmbiguous2LabelsContext | null {
        return this.getRuleContext(0, IdentifierKeywordsAmbiguous2LabelsContext);
    }
    public identifierKeywordsAmbiguous3Roles(): IdentifierKeywordsAmbiguous3RolesContext | null {
        return this.getRuleContext(0, IdentifierKeywordsAmbiguous3RolesContext);
    }
    public identifierKeywordsAmbiguous4SystemVariables(): IdentifierKeywordsAmbiguous4SystemVariablesContext | null {
        return this.getRuleContext(0, IdentifierKeywordsAmbiguous4SystemVariablesContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_identifierKeyword;
    }
}


export class IdentifierKeywordsAmbiguous1RolesAndLabelsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EXECUTE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EXECUTE_SYMBOL, 0);
    }
    public RESTART_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RESTART_SYMBOL, 0);
    }
    public SHUTDOWN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SHUTDOWN_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_identifierKeywordsAmbiguous1RolesAndLabels;
    }
}


export class IdentifierKeywordsAmbiguous2LabelsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ASCII_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ASCII_SYMBOL, 0);
    }
    public BEGIN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BEGIN_SYMBOL, 0);
    }
    public BYTE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BYTE_SYMBOL, 0);
    }
    public CACHE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CACHE_SYMBOL, 0);
    }
    public CHARSET_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CHARSET_SYMBOL, 0);
    }
    public CHECKSUM_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CHECKSUM_SYMBOL, 0);
    }
    public CLONE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CLONE_SYMBOL, 0);
    }
    public COMMENT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
    }
    public COMMIT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COMMIT_SYMBOL, 0);
    }
    public CONTAINS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CONTAINS_SYMBOL, 0);
    }
    public DEALLOCATE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DEALLOCATE_SYMBOL, 0);
    }
    public DO_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DO_SYMBOL, 0);
    }
    public END_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.END_SYMBOL, 0);
    }
    public FLUSH_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FLUSH_SYMBOL, 0);
    }
    public FOLLOWS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FOLLOWS_SYMBOL, 0);
    }
    public HANDLER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.HANDLER_SYMBOL, 0);
    }
    public HELP_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.HELP_SYMBOL, 0);
    }
    public IMPORT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.IMPORT_SYMBOL, 0);
    }
    public INSTALL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INSTALL_SYMBOL, 0);
    }
    public LANGUAGE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LANGUAGE_SYMBOL, 0);
    }
    public NO_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NO_SYMBOL, 0);
    }
    public PRECEDES_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PRECEDES_SYMBOL, 0);
    }
    public PREPARE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PREPARE_SYMBOL, 0);
    }
    public REPAIR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REPAIR_SYMBOL, 0);
    }
    public RESET_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RESET_SYMBOL, 0);
    }
    public ROLLBACK_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ROLLBACK_SYMBOL, 0);
    }
    public SAVEPOINT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SAVEPOINT_SYMBOL, 0);
    }
    public SIGNED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SIGNED_SYMBOL, 0);
    }
    public SLAVE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SLAVE_SYMBOL, 0);
    }
    public START_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.START_SYMBOL, 0);
    }
    public STOP_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.STOP_SYMBOL, 0);
    }
    public TRUNCATE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TRUNCATE_SYMBOL, 0);
    }
    public UNICODE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.UNICODE_SYMBOL, 0);
    }
    public UNINSTALL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.UNINSTALL_SYMBOL, 0);
    }
    public XA_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.XA_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_identifierKeywordsAmbiguous2Labels;
    }
}


export class LabelKeywordContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public roleOrLabelKeyword(): RoleOrLabelKeywordContext | null {
        return this.getRuleContext(0, RoleOrLabelKeywordContext);
    }
    public EVENT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EVENT_SYMBOL, 0);
    }
    public FILE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FILE_SYMBOL, 0);
    }
    public NONE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NONE_SYMBOL, 0);
    }
    public PROCESS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PROCESS_SYMBOL, 0);
    }
    public PROXY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PROXY_SYMBOL, 0);
    }
    public RELOAD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RELOAD_SYMBOL, 0);
    }
    public REPLICATION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATION_SYMBOL, 0);
    }
    public RESOURCE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RESOURCE_SYMBOL, 0);
    }
    public SUPER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SUPER_SYMBOL, 0);
    }
    public identifierKeywordsUnambiguous(): IdentifierKeywordsUnambiguousContext | null {
        return this.getRuleContext(0, IdentifierKeywordsUnambiguousContext);
    }
    public identifierKeywordsAmbiguous3Roles(): IdentifierKeywordsAmbiguous3RolesContext | null {
        return this.getRuleContext(0, IdentifierKeywordsAmbiguous3RolesContext);
    }
    public identifierKeywordsAmbiguous4SystemVariables(): IdentifierKeywordsAmbiguous4SystemVariablesContext | null {
        return this.getRuleContext(0, IdentifierKeywordsAmbiguous4SystemVariablesContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_labelKeyword;
    }
}


export class IdentifierKeywordsAmbiguous3RolesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EVENT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EVENT_SYMBOL, 0);
    }
    public FILE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FILE_SYMBOL, 0);
    }
    public NONE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NONE_SYMBOL, 0);
    }
    public PROCESS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PROCESS_SYMBOL, 0);
    }
    public PROXY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PROXY_SYMBOL, 0);
    }
    public RELOAD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RELOAD_SYMBOL, 0);
    }
    public REPLICATION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATION_SYMBOL, 0);
    }
    public RESOURCE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RESOURCE_SYMBOL, 0);
    }
    public SUPER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SUPER_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_identifierKeywordsAmbiguous3Roles;
    }
}


export class IdentifierKeywordsUnambiguousContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ACTION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ACTION_SYMBOL, 0);
    }
    public ACCOUNT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ACCOUNT_SYMBOL, 0);
    }
    public ACTIVE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ACTIVE_SYMBOL, 0);
    }
    public ADDDATE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ADDDATE_SYMBOL, 0);
    }
    public ADMIN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ADMIN_SYMBOL, 0);
    }
    public AFTER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.AFTER_SYMBOL, 0);
    }
    public AGAINST_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.AGAINST_SYMBOL, 0);
    }
    public AGGREGATE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.AGGREGATE_SYMBOL, 0);
    }
    public ALGORITHM_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ALGORITHM_SYMBOL, 0);
    }
    public ALWAYS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ALWAYS_SYMBOL, 0);
    }
    public ANY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ANY_SYMBOL, 0);
    }
    public AT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.AT_SYMBOL, 0);
    }
    public ATTRIBUTE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ATTRIBUTE_SYMBOL, 0);
    }
    public AUTHENTICATION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.AUTHENTICATION_SYMBOL, 0);
    }
    public AUTOEXTEND_SIZE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0);
    }
    public AUTO_INCREMENT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0);
    }
    public AVG_ROW_LENGTH_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.AVG_ROW_LENGTH_SYMBOL, 0);
    }
    public AVG_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.AVG_SYMBOL, 0);
    }
    public BACKUP_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BACKUP_SYMBOL, 0);
    }
    public BINLOG_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BINLOG_SYMBOL, 0);
    }
    public BIT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BIT_SYMBOL, 0);
    }
    public BLOCK_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BLOCK_SYMBOL, 0);
    }
    public BOOLEAN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BOOLEAN_SYMBOL, 0);
    }
    public BOOL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BOOL_SYMBOL, 0);
    }
    public BTREE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BTREE_SYMBOL, 0);
    }
    public BUCKETS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BUCKETS_SYMBOL, 0);
    }
    public CASCADED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CASCADED_SYMBOL, 0);
    }
    public CATALOG_NAME_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CATALOG_NAME_SYMBOL, 0);
    }
    public CHAIN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CHAIN_SYMBOL, 0);
    }
    public CHALLENGE_RESPONSE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CHALLENGE_RESPONSE_SYMBOL, 0);
    }
    public CHANGED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CHANGED_SYMBOL, 0);
    }
    public CHANNEL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CHANNEL_SYMBOL, 0);
    }
    public CIPHER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CIPHER_SYMBOL, 0);
    }
    public CLASS_ORIGIN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CLASS_ORIGIN_SYMBOL, 0);
    }
    public CLIENT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CLIENT_SYMBOL, 0);
    }
    public CLOSE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_SYMBOL, 0);
    }
    public COALESCE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COALESCE_SYMBOL, 0);
    }
    public CODE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CODE_SYMBOL, 0);
    }
    public COLLATION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COLLATION_SYMBOL, 0);
    }
    public COLUMNS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COLUMNS_SYMBOL, 0);
    }
    public COLUMN_FORMAT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COLUMN_FORMAT_SYMBOL, 0);
    }
    public COLUMN_NAME_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COLUMN_NAME_SYMBOL, 0);
    }
    public COMMITTED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COMMITTED_SYMBOL, 0);
    }
    public COMPACT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COMPACT_SYMBOL, 0);
    }
    public COMPLETION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COMPLETION_SYMBOL, 0);
    }
    public COMPONENT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COMPONENT_SYMBOL, 0);
    }
    public COMPRESSED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COMPRESSED_SYMBOL, 0);
    }
    public COMPRESSION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COMPRESSION_SYMBOL, 0);
    }
    public CONCURRENT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CONCURRENT_SYMBOL, 0);
    }
    public CONNECTION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CONNECTION_SYMBOL, 0);
    }
    public CONSISTENT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CONSISTENT_SYMBOL, 0);
    }
    public CONSTRAINT_CATALOG_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CONSTRAINT_CATALOG_SYMBOL, 0);
    }
    public CONSTRAINT_NAME_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CONSTRAINT_NAME_SYMBOL, 0);
    }
    public CONSTRAINT_SCHEMA_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0);
    }
    public CONTEXT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CONTEXT_SYMBOL, 0);
    }
    public CPU_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CPU_SYMBOL, 0);
    }
    public CURRENT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CURRENT_SYMBOL, 0);
    }
    public CURSOR_NAME_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CURSOR_NAME_SYMBOL, 0);
    }
    public DATAFILE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DATAFILE_SYMBOL, 0);
    }
    public DATA_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DATA_SYMBOL, 0);
    }
    public DATETIME_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DATETIME_SYMBOL, 0);
    }
    public DATE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DATE_SYMBOL, 0);
    }
    public DAY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DAY_SYMBOL, 0);
    }
    public DEFAULT_AUTH_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_AUTH_SYMBOL, 0);
    }
    public DEFINER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DEFINER_SYMBOL, 0);
    }
    public DEFINITION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DEFINITION_SYMBOL, 0);
    }
    public DELAY_KEY_WRITE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DELAY_KEY_WRITE_SYMBOL, 0);
    }
    public DESCRIPTION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DESCRIPTION_SYMBOL, 0);
    }
    public DIAGNOSTICS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DIAGNOSTICS_SYMBOL, 0);
    }
    public DIRECTORY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DIRECTORY_SYMBOL, 0);
    }
    public DISABLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DISABLE_SYMBOL, 0);
    }
    public DISCARD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DISCARD_SYMBOL, 0);
    }
    public DISK_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DISK_SYMBOL, 0);
    }
    public DUMPFILE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DUMPFILE_SYMBOL, 0);
    }
    public DUPLICATE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DUPLICATE_SYMBOL, 0);
    }
    public DYNAMIC_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DYNAMIC_SYMBOL, 0);
    }
    public ENABLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ENABLE_SYMBOL, 0);
    }
    public ENCRYPTION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ENCRYPTION_SYMBOL, 0);
    }
    public ENDS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ENDS_SYMBOL, 0);
    }
    public ENFORCED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ENFORCED_SYMBOL, 0);
    }
    public ENGINES_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ENGINES_SYMBOL, 0);
    }
    public ENGINE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ENGINE_SYMBOL, 0);
    }
    public ENUM_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ENUM_SYMBOL, 0);
    }
    public ERRORS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ERRORS_SYMBOL, 0);
    }
    public ERROR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ERROR_SYMBOL, 0);
    }
    public ESCAPE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ESCAPE_SYMBOL, 0);
    }
    public EVENTS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EVENTS_SYMBOL, 0);
    }
    public EVERY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EVERY_SYMBOL, 0);
    }
    public EXCHANGE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EXCHANGE_SYMBOL, 0);
    }
    public EXCLUDE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EXCLUDE_SYMBOL, 0);
    }
    public EXPANSION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EXPANSION_SYMBOL, 0);
    }
    public EXPIRE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EXPIRE_SYMBOL, 0);
    }
    public EXPORT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EXPORT_SYMBOL, 0);
    }
    public EXTENDED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EXTENDED_SYMBOL, 0);
    }
    public EXTENT_SIZE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EXTENT_SIZE_SYMBOL, 0);
    }
    public FACTOR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FACTOR_SYMBOL, 0);
    }
    public FAST_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FAST_SYMBOL, 0);
    }
    public FAULTS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FAULTS_SYMBOL, 0);
    }
    public FILE_BLOCK_SIZE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FILE_BLOCK_SIZE_SYMBOL, 0);
    }
    public FILTER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FILTER_SYMBOL, 0);
    }
    public FINISH_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FINISH_SYMBOL, 0);
    }
    public FIRST_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FIRST_SYMBOL, 0);
    }
    public FIXED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FIXED_SYMBOL, 0);
    }
    public FOLLOWING_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FOLLOWING_SYMBOL, 0);
    }
    public FORMAT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FORMAT_SYMBOL, 0);
    }
    public FOUND_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FOUND_SYMBOL, 0);
    }
    public FULL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FULL_SYMBOL, 0);
    }
    public GENERAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.GENERAL_SYMBOL, 0);
    }
    public GEOMETRYCOLLECTION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0);
    }
    public GEOMETRY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.GEOMETRY_SYMBOL, 0);
    }
    public GET_FORMAT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.GET_FORMAT_SYMBOL, 0);
    }
    public GET_MASTER_PUBLIC_KEY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL, 0);
    }
    public GET_SOURCE_PUBLIC_KEY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.GET_SOURCE_PUBLIC_KEY_SYMBOL, 0);
    }
    public GRANTS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.GRANTS_SYMBOL, 0);
    }
    public GROUP_REPLICATION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.GROUP_REPLICATION_SYMBOL, 0);
    }
    public GTID_ONLY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.GTID_ONLY_SYMBOL, 0);
    }
    public HASH_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.HASH_SYMBOL, 0);
    }
    public HISTOGRAM_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.HISTOGRAM_SYMBOL, 0);
    }
    public HISTORY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.HISTORY_SYMBOL, 0);
    }
    public HOSTS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.HOSTS_SYMBOL, 0);
    }
    public HOST_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.HOST_SYMBOL, 0);
    }
    public HOUR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.HOUR_SYMBOL, 0);
    }
    public IDENTIFIED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
    }
    public IGNORE_SERVER_IDS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.IGNORE_SERVER_IDS_SYMBOL, 0);
    }
    public INACTIVE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INACTIVE_SYMBOL, 0);
    }
    public INDEXES_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INDEXES_SYMBOL, 0);
    }
    public INITIAL_SIZE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0);
    }
    public INITIAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INITIAL_SYMBOL, 0);
    }
    public INITIATE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INITIATE_SYMBOL, 0);
    }
    public INSERT_METHOD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INSERT_METHOD_SYMBOL, 0);
    }
    public INSTANCE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INSTANCE_SYMBOL, 0);
    }
    public INVISIBLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INVISIBLE_SYMBOL, 0);
    }
    public INVOKER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INVOKER_SYMBOL, 0);
    }
    public IO_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.IO_SYMBOL, 0);
    }
    public IPC_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.IPC_SYMBOL, 0);
    }
    public ISOLATION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ISOLATION_SYMBOL, 0);
    }
    public ISSUER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ISSUER_SYMBOL, 0);
    }
    public JSON_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.JSON_SYMBOL, 0);
    }
    public JSON_VALUE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.JSON_VALUE_SYMBOL, 0);
    }
    public KEY_BLOCK_SIZE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0);
    }
    public KEYRING_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.KEYRING_SYMBOL, 0);
    }
    public LAST_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LAST_SYMBOL, 0);
    }
    public LEAVES_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LEAVES_SYMBOL, 0);
    }
    public LESS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LESS_SYMBOL, 0);
    }
    public LEVEL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LEVEL_SYMBOL, 0);
    }
    public LINESTRING_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LINESTRING_SYMBOL, 0);
    }
    public LIST_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LIST_SYMBOL, 0);
    }
    public LOCKED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LOCKED_SYMBOL, 0);
    }
    public LOCKS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LOCKS_SYMBOL, 0);
    }
    public LOGFILE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LOGFILE_SYMBOL, 0);
    }
    public LOGS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LOGS_SYMBOL, 0);
    }
    public MASTER_AUTO_POSITION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_AUTO_POSITION_SYMBOL, 0);
    }
    public MASTER_COMPRESSION_ALGORITHM_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL, 0);
    }
    public MASTER_CONNECT_RETRY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0);
    }
    public MASTER_DELAY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_DELAY_SYMBOL, 0);
    }
    public MASTER_HEARTBEAT_PERIOD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0);
    }
    public MASTER_HOST_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_HOST_SYMBOL, 0);
    }
    public NETWORK_NAMESPACE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NETWORK_NAMESPACE_SYMBOL, 0);
    }
    public MASTER_LOG_FILE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_LOG_FILE_SYMBOL, 0);
    }
    public MASTER_LOG_POS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_LOG_POS_SYMBOL, 0);
    }
    public MASTER_PASSWORD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_PASSWORD_SYMBOL, 0);
    }
    public MASTER_PORT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_PORT_SYMBOL, 0);
    }
    public MASTER_PUBLIC_KEY_PATH_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0);
    }
    public MASTER_RETRY_COUNT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_RETRY_COUNT_SYMBOL, 0);
    }
    public MASTER_SSL_CAPATH_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CAPATH_SYMBOL, 0);
    }
    public MASTER_SSL_CA_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CA_SYMBOL, 0);
    }
    public MASTER_SSL_CERT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CERT_SYMBOL, 0);
    }
    public MASTER_SSL_CIPHER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CIPHER_SYMBOL, 0);
    }
    public MASTER_SSL_CRLPATH_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0);
    }
    public MASTER_SSL_CRL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CRL_SYMBOL, 0);
    }
    public MASTER_SSL_KEY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_KEY_SYMBOL, 0);
    }
    public MASTER_SSL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_SYMBOL, 0);
    }
    public MASTER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
    }
    public MASTER_TLS_CIPHERSUITES_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL, 0);
    }
    public MASTER_TLS_VERSION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_TLS_VERSION_SYMBOL, 0);
    }
    public MASTER_USER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_USER_SYMBOL, 0);
    }
    public MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL, 0);
    }
    public MAX_CONNECTIONS_PER_HOUR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0);
    }
    public MAX_QUERIES_PER_HOUR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0);
    }
    public MAX_ROWS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MAX_ROWS_SYMBOL, 0);
    }
    public MAX_SIZE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MAX_SIZE_SYMBOL, 0);
    }
    public MAX_UPDATES_PER_HOUR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0);
    }
    public MAX_USER_CONNECTIONS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0);
    }
    public MEDIUM_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MEDIUM_SYMBOL, 0);
    }
    public MEMORY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MEMORY_SYMBOL, 0);
    }
    public MERGE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MERGE_SYMBOL, 0);
    }
    public MESSAGE_TEXT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MESSAGE_TEXT_SYMBOL, 0);
    }
    public MICROSECOND_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MICROSECOND_SYMBOL, 0);
    }
    public MIGRATE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MIGRATE_SYMBOL, 0);
    }
    public MINUTE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MINUTE_SYMBOL, 0);
    }
    public MIN_ROWS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MIN_ROWS_SYMBOL, 0);
    }
    public MODE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MODE_SYMBOL, 0);
    }
    public MODIFY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MODIFY_SYMBOL, 0);
    }
    public MONTH_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MONTH_SYMBOL, 0);
    }
    public MULTILINESTRING_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MULTILINESTRING_SYMBOL, 0);
    }
    public MULTIPOINT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MULTIPOINT_SYMBOL, 0);
    }
    public MULTIPOLYGON_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0);
    }
    public MUTEX_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MUTEX_SYMBOL, 0);
    }
    public MYSQL_ERRNO_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MYSQL_ERRNO_SYMBOL, 0);
    }
    public NAMES_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NAMES_SYMBOL, 0);
    }
    public NAME_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NAME_SYMBOL, 0);
    }
    public NATIONAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NATIONAL_SYMBOL, 0);
    }
    public NCHAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NCHAR_SYMBOL, 0);
    }
    public NDBCLUSTER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NDBCLUSTER_SYMBOL, 0);
    }
    public NESTED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NESTED_SYMBOL, 0);
    }
    public NEVER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NEVER_SYMBOL, 0);
    }
    public NEW_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NEW_SYMBOL, 0);
    }
    public NEXT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NEXT_SYMBOL, 0);
    }
    public NODEGROUP_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NODEGROUP_SYMBOL, 0);
    }
    public NOWAIT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NOWAIT_SYMBOL, 0);
    }
    public NO_WAIT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NO_WAIT_SYMBOL, 0);
    }
    public NULLS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NULLS_SYMBOL, 0);
    }
    public NUMBER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NUMBER_SYMBOL, 0);
    }
    public NVARCHAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NVARCHAR_SYMBOL, 0);
    }
    public OFFSET_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OFFSET_SYMBOL, 0);
    }
    public OJ_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OJ_SYMBOL, 0);
    }
    public OLD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OLD_SYMBOL, 0);
    }
    public ONE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ONE_SYMBOL, 0);
    }
    public ONLY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ONLY_SYMBOL, 0);
    }
    public OPEN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_SYMBOL, 0);
    }
    public OPTIONAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OPTIONAL_SYMBOL, 0);
    }
    public OPTIONS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OPTIONS_SYMBOL, 0);
    }
    public ORDINALITY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ORDINALITY_SYMBOL, 0);
    }
    public ORGANIZATION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ORGANIZATION_SYMBOL, 0);
    }
    public OTHERS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OTHERS_SYMBOL, 0);
    }
    public OWNER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OWNER_SYMBOL, 0);
    }
    public PACK_KEYS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PACK_KEYS_SYMBOL, 0);
    }
    public PAGE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PAGE_SYMBOL, 0);
    }
    public PARSER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PARSER_SYMBOL, 0);
    }
    public PARTIAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PARTIAL_SYMBOL, 0);
    }
    public PARTITIONING_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PARTITIONING_SYMBOL, 0);
    }
    public PARTITIONS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PARTITIONS_SYMBOL, 0);
    }
    public PASSWORD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
    }
    public PATH_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PATH_SYMBOL, 0);
    }
    public PHASE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PHASE_SYMBOL, 0);
    }
    public PLUGINS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PLUGINS_SYMBOL, 0);
    }
    public PLUGIN_DIR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PLUGIN_DIR_SYMBOL, 0);
    }
    public PLUGIN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PLUGIN_SYMBOL, 0);
    }
    public POINT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.POINT_SYMBOL, 0);
    }
    public POLYGON_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.POLYGON_SYMBOL, 0);
    }
    public PORT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PORT_SYMBOL, 0);
    }
    public PRECEDING_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PRECEDING_SYMBOL, 0);
    }
    public PRESERVE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PRESERVE_SYMBOL, 0);
    }
    public PREV_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PREV_SYMBOL, 0);
    }
    public PRIVILEGES_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PRIVILEGES_SYMBOL, 0);
    }
    public PRIVILEGE_CHECKS_USER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL, 0);
    }
    public PROCESSLIST_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PROCESSLIST_SYMBOL, 0);
    }
    public PROFILES_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PROFILES_SYMBOL, 0);
    }
    public PROFILE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PROFILE_SYMBOL, 0);
    }
    public QUARTER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.QUARTER_SYMBOL, 0);
    }
    public QUERY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.QUERY_SYMBOL, 0);
    }
    public QUICK_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.QUICK_SYMBOL, 0);
    }
    public READ_ONLY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.READ_ONLY_SYMBOL, 0);
    }
    public REBUILD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REBUILD_SYMBOL, 0);
    }
    public RECOVER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RECOVER_SYMBOL, 0);
    }
    public REDO_BUFFER_SIZE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REDO_BUFFER_SIZE_SYMBOL, 0);
    }
    public REDUNDANT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REDUNDANT_SYMBOL, 0);
    }
    public REFERENCE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REFERENCE_SYMBOL, 0);
    }
    public REGISTRATION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REGISTRATION_SYMBOL, 0);
    }
    public RELAY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RELAY_SYMBOL, 0);
    }
    public RELAYLOG_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RELAYLOG_SYMBOL, 0);
    }
    public RELAY_LOG_FILE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RELAY_LOG_FILE_SYMBOL, 0);
    }
    public RELAY_LOG_POS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RELAY_LOG_POS_SYMBOL, 0);
    }
    public RELAY_THREAD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RELAY_THREAD_SYMBOL, 0);
    }
    public REMOVE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REMOVE_SYMBOL, 0);
    }
    public ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_SYMBOL, 0);
    }
    public REORGANIZE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REORGANIZE_SYMBOL, 0);
    }
    public REPEATABLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REPEATABLE_SYMBOL, 0);
    }
    public REPLICAS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REPLICAS_SYMBOL, 0);
    }
    public REPLICATE_DO_DB_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_DO_DB_SYMBOL, 0);
    }
    public REPLICATE_DO_TABLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_DO_TABLE_SYMBOL, 0);
    }
    public REPLICATE_IGNORE_DB_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0);
    }
    public REPLICATE_IGNORE_TABLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0);
    }
    public REPLICATE_REWRITE_DB_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0);
    }
    public REPLICATE_WILD_DO_TABLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0);
    }
    public REPLICATE_WILD_IGNORE_TABLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0);
    }
    public REPLICA_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REPLICA_SYMBOL, 0);
    }
    public USER_RESOURCES_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.USER_RESOURCES_SYMBOL, 0);
    }
    public RESPECT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RESPECT_SYMBOL, 0);
    }
    public RESTORE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RESTORE_SYMBOL, 0);
    }
    public RESUME_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RESUME_SYMBOL, 0);
    }
    public RETAIN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RETAIN_SYMBOL, 0);
    }
    public RETURNED_SQLSTATE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RETURNED_SQLSTATE_SYMBOL, 0);
    }
    public RETURNING_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RETURNING_SYMBOL, 0);
    }
    public RETURNS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RETURNS_SYMBOL, 0);
    }
    public REUSE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REUSE_SYMBOL, 0);
    }
    public REVERSE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REVERSE_SYMBOL, 0);
    }
    public ROLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
    }
    public ROLLUP_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ROLLUP_SYMBOL, 0);
    }
    public ROTATE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ROTATE_SYMBOL, 0);
    }
    public ROUTINE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ROUTINE_SYMBOL, 0);
    }
    public ROW_COUNT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ROW_COUNT_SYMBOL, 0);
    }
    public ROW_FORMAT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ROW_FORMAT_SYMBOL, 0);
    }
    public RTREE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RTREE_SYMBOL, 0);
    }
    public SCHEDULE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SCHEDULE_SYMBOL, 0);
    }
    public SCHEMA_NAME_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SCHEMA_NAME_SYMBOL, 0);
    }
    public SECONDARY_ENGINE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_ENGINE_SYMBOL, 0);
    }
    public SECONDARY_ENGINE_ATTRIBUTE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_ENGINE_ATTRIBUTE_SYMBOL, 0);
    }
    public SECONDARY_LOAD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_LOAD_SYMBOL, 0);
    }
    public SECONDARY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_SYMBOL, 0);
    }
    public SECONDARY_UNLOAD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_UNLOAD_SYMBOL, 0);
    }
    public SECOND_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SECOND_SYMBOL, 0);
    }
    public SECURITY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SECURITY_SYMBOL, 0);
    }
    public SERIALIZABLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SERIALIZABLE_SYMBOL, 0);
    }
    public SERIAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SERIAL_SYMBOL, 0);
    }
    public SERVER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SERVER_SYMBOL, 0);
    }
    public SHARE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SHARE_SYMBOL, 0);
    }
    public SIMPLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SIMPLE_SYMBOL, 0);
    }
    public SKIP_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SKIP_SYMBOL, 0);
    }
    public SLOW_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SLOW_SYMBOL, 0);
    }
    public SNAPSHOT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SNAPSHOT_SYMBOL, 0);
    }
    public SOCKET_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOCKET_SYMBOL, 0);
    }
    public SONAME_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SONAME_SYMBOL, 0);
    }
    public SOUNDS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOUNDS_SYMBOL, 0);
    }
    public SOURCE_AUTO_POSITION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_AUTO_POSITION_SYMBOL, 0);
    }
    public SOURCE_BIND_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_BIND_SYMBOL, 0);
    }
    public SOURCE_COMPRESSION_ALGORITHM_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_COMPRESSION_ALGORITHM_SYMBOL, 0);
    }
    public SOURCE_CONNECTION_AUTO_FAILOVER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_CONNECTION_AUTO_FAILOVER_SYMBOL, 0);
    }
    public SOURCE_CONNECT_RETRY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_CONNECT_RETRY_SYMBOL, 0);
    }
    public SOURCE_DELAY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_DELAY_SYMBOL, 0);
    }
    public SOURCE_HEARTBEAT_PERIOD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_HEARTBEAT_PERIOD_SYMBOL, 0);
    }
    public SOURCE_HOST_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_HOST_SYMBOL, 0);
    }
    public SOURCE_LOG_FILE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_LOG_FILE_SYMBOL, 0);
    }
    public SOURCE_LOG_POS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_LOG_POS_SYMBOL, 0);
    }
    public SOURCE_PASSWORD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_PASSWORD_SYMBOL, 0);
    }
    public SOURCE_PORT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_PORT_SYMBOL, 0);
    }
    public SOURCE_PUBLIC_KEY_PATH_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_PUBLIC_KEY_PATH_SYMBOL, 0);
    }
    public SOURCE_RETRY_COUNT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_RETRY_COUNT_SYMBOL, 0);
    }
    public SOURCE_SSL_CAPATH_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_CAPATH_SYMBOL, 0);
    }
    public SOURCE_SSL_CA_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_CA_SYMBOL, 0);
    }
    public SOURCE_SSL_CERT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_CERT_SYMBOL, 0);
    }
    public SOURCE_SSL_CIPHER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_CIPHER_SYMBOL, 0);
    }
    public SOURCE_SSL_CRLPATH_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_CRLPATH_SYMBOL, 0);
    }
    public SOURCE_SSL_CRL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_CRL_SYMBOL, 0);
    }
    public SOURCE_SSL_KEY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_KEY_SYMBOL, 0);
    }
    public SOURCE_SSL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_SYMBOL, 0);
    }
    public SOURCE_SSL_VERIFY_SERVER_CERT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_VERIFY_SERVER_CERT_SYMBOL, 0);
    }
    public SOURCE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SYMBOL, 0);
    }
    public SOURCE_TLS_CIPHERSUITES_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_TLS_CIPHERSUITES_SYMBOL, 0);
    }
    public SOURCE_TLS_VERSION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_TLS_VERSION_SYMBOL, 0);
    }
    public SOURCE_USER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_USER_SYMBOL, 0);
    }
    public SOURCE_ZSTD_COMPRESSION_LEVEL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_ZSTD_COMPRESSION_LEVEL_SYMBOL, 0);
    }
    public SQL_AFTER_GTIDS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SQL_AFTER_GTIDS_SYMBOL, 0);
    }
    public SQL_AFTER_MTS_GAPS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0);
    }
    public SQL_BEFORE_GTIDS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0);
    }
    public SQL_BUFFER_RESULT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SQL_BUFFER_RESULT_SYMBOL, 0);
    }
    public SQL_NO_CACHE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SQL_NO_CACHE_SYMBOL, 0);
    }
    public SQL_THREAD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SQL_THREAD_SYMBOL, 0);
    }
    public SRID_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SRID_SYMBOL, 0);
    }
    public STACKED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.STACKED_SYMBOL, 0);
    }
    public STARTS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.STARTS_SYMBOL, 0);
    }
    public STATS_AUTO_RECALC_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.STATS_AUTO_RECALC_SYMBOL, 0);
    }
    public STATS_PERSISTENT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.STATS_PERSISTENT_SYMBOL, 0);
    }
    public STATS_SAMPLE_PAGES_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0);
    }
    public STATUS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.STATUS_SYMBOL, 0);
    }
    public STORAGE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.STORAGE_SYMBOL, 0);
    }
    public STRING_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.STRING_SYMBOL, 0);
    }
    public ST_COLLECT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ST_COLLECT_SYMBOL, 0);
    }
    public SUBCLASS_ORIGIN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SUBCLASS_ORIGIN_SYMBOL, 0);
    }
    public SUBDATE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SUBDATE_SYMBOL, 0);
    }
    public SUBJECT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SUBJECT_SYMBOL, 0);
    }
    public SUBPARTITIONS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SUBPARTITIONS_SYMBOL, 0);
    }
    public SUBPARTITION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SUBPARTITION_SYMBOL, 0);
    }
    public SUSPEND_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SUSPEND_SYMBOL, 0);
    }
    public SWAPS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SWAPS_SYMBOL, 0);
    }
    public SWITCHES_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SWITCHES_SYMBOL, 0);
    }
    public TABLES_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
    }
    public TABLESPACE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
    }
    public TABLE_CHECKSUM_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_CHECKSUM_SYMBOL, 0);
    }
    public TABLE_NAME_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_NAME_SYMBOL, 0);
    }
    public TEMPORARY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TEMPORARY_SYMBOL, 0);
    }
    public TEMPTABLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TEMPTABLE_SYMBOL, 0);
    }
    public TEXT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TEXT_SYMBOL, 0);
    }
    public THAN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.THAN_SYMBOL, 0);
    }
    public THREAD_PRIORITY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.THREAD_PRIORITY_SYMBOL, 0);
    }
    public TIES_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TIES_SYMBOL, 0);
    }
    public TIMESTAMPADD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TIMESTAMPADD_SYMBOL, 0);
    }
    public TIMESTAMPDIFF_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TIMESTAMPDIFF_SYMBOL, 0);
    }
    public TIMESTAMP_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TIMESTAMP_SYMBOL, 0);
    }
    public TIME_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TIME_SYMBOL, 0);
    }
    public TLS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TLS_SYMBOL, 0);
    }
    public TRANSACTION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TRANSACTION_SYMBOL, 0);
    }
    public TRIGGERS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TRIGGERS_SYMBOL, 0);
    }
    public TYPES_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TYPES_SYMBOL, 0);
    }
    public TYPE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TYPE_SYMBOL, 0);
    }
    public UNBOUNDED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.UNBOUNDED_SYMBOL, 0);
    }
    public UNCOMMITTED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.UNCOMMITTED_SYMBOL, 0);
    }
    public UNDEFINED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.UNDEFINED_SYMBOL, 0);
    }
    public UNDOFILE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.UNDOFILE_SYMBOL, 0);
    }
    public UNDO_BUFFER_SIZE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0);
    }
    public UNKNOWN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.UNKNOWN_SYMBOL, 0);
    }
    public UNREGISTER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.UNREGISTER_SYMBOL, 0);
    }
    public UNTIL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.UNTIL_SYMBOL, 0);
    }
    public UPGRADE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.UPGRADE_SYMBOL, 0);
    }
    public USER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.USER_SYMBOL, 0);
    }
    public USE_FRM_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.USE_FRM_SYMBOL, 0);
    }
    public VALIDATION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.VALIDATION_SYMBOL, 0);
    }
    public VALUE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.VALUE_SYMBOL, 0);
    }
    public VARIABLES_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.VARIABLES_SYMBOL, 0);
    }
    public VCPU_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.VCPU_SYMBOL, 0);
    }
    public VIEW_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.VIEW_SYMBOL, 0);
    }
    public VISIBLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.VISIBLE_SYMBOL, 0);
    }
    public WAIT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.WAIT_SYMBOL, 0);
    }
    public WARNINGS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.WARNINGS_SYMBOL, 0);
    }
    public WEEK_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.WEEK_SYMBOL, 0);
    }
    public WEIGHT_STRING_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.WEIGHT_STRING_SYMBOL, 0);
    }
    public WITHOUT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.WITHOUT_SYMBOL, 0);
    }
    public WORK_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.WORK_SYMBOL, 0);
    }
    public WRAPPER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.WRAPPER_SYMBOL, 0);
    }
    public X509_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.X509_SYMBOL, 0);
    }
    public XID_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.XID_SYMBOL, 0);
    }
    public XML_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.XML_SYMBOL, 0);
    }
    public YEAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.YEAR_SYMBOL, 0);
    }
    public ZONE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ZONE_SYMBOL, 0);
    }
    public ARRAY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ARRAY_SYMBOL, 0);
    }
    public FAILED_LOGIN_ATTEMPTS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FAILED_LOGIN_ATTEMPTS_SYMBOL, 0);
    }
    public MEMBER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MEMBER_SYMBOL, 0);
    }
    public OFF_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OFF_SYMBOL, 0);
    }
    public PASSWORD_LOCK_TIME_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_LOCK_TIME_SYMBOL, 0);
    }
    public RANDOM_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RANDOM_SYMBOL, 0);
    }
    public REQUIRE_ROW_FORMAT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REQUIRE_ROW_FORMAT_SYMBOL, 0);
    }
    public REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL, 0);
    }
    public STREAM_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.STREAM_SYMBOL, 0);
    }
    public BULK_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BULK_SYMBOL, 0);
    }
    public GENERATE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.GENERATE_SYMBOL, 0);
    }
    public GTIDS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.GTIDS_SYMBOL, 0);
    }
    public LOG_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LOG_SYMBOL, 0);
    }
    public PARSE_TREE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PARSE_TREE_SYMBOL, 0);
    }
    public S3_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.S3_SYMBOL, 0);
    }
    public BERNOULLI_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BERNOULLI_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_identifierKeywordsUnambiguous;
    }
}


export class RoleKeywordContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public roleOrLabelKeyword(): RoleOrLabelKeywordContext | null {
        return this.getRuleContext(0, RoleOrLabelKeywordContext);
    }
    public roleOrIdentifierKeyword(): RoleOrIdentifierKeywordContext | null {
        return this.getRuleContext(0, RoleOrIdentifierKeywordContext);
    }
    public identifierKeywordsUnambiguous(): IdentifierKeywordsUnambiguousContext | null {
        return this.getRuleContext(0, IdentifierKeywordsUnambiguousContext);
    }
    public identifierKeywordsAmbiguous2Labels(): IdentifierKeywordsAmbiguous2LabelsContext | null {
        return this.getRuleContext(0, IdentifierKeywordsAmbiguous2LabelsContext);
    }
    public identifierKeywordsAmbiguous4SystemVariables(): IdentifierKeywordsAmbiguous4SystemVariablesContext | null {
        return this.getRuleContext(0, IdentifierKeywordsAmbiguous4SystemVariablesContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_roleKeyword;
    }
}


export class LValueKeywordContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifierKeywordsUnambiguous(): IdentifierKeywordsUnambiguousContext | null {
        return this.getRuleContext(0, IdentifierKeywordsUnambiguousContext);
    }
    public identifierKeywordsAmbiguous1RolesAndLabels(): IdentifierKeywordsAmbiguous1RolesAndLabelsContext | null {
        return this.getRuleContext(0, IdentifierKeywordsAmbiguous1RolesAndLabelsContext);
    }
    public identifierKeywordsAmbiguous2Labels(): IdentifierKeywordsAmbiguous2LabelsContext | null {
        return this.getRuleContext(0, IdentifierKeywordsAmbiguous2LabelsContext);
    }
    public identifierKeywordsAmbiguous3Roles(): IdentifierKeywordsAmbiguous3RolesContext | null {
        return this.getRuleContext(0, IdentifierKeywordsAmbiguous3RolesContext);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_lValueKeyword;
    }
}


export class IdentifierKeywordsAmbiguous4SystemVariablesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GLOBAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.GLOBAL_SYMBOL, 0);
    }
    public LOCAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
    }
    public PERSIST_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PERSIST_SYMBOL, 0);
    }
    public PERSIST_ONLY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PERSIST_ONLY_SYMBOL, 0);
    }
    public SESSION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SESSION_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_identifierKeywordsAmbiguous4SystemVariables;
    }
}


export class RoleOrIdentifierKeywordContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ACCOUNT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ACCOUNT_SYMBOL, 0);
    }
    public ASCII_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ASCII_SYMBOL, 0);
    }
    public ALWAYS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ALWAYS_SYMBOL, 0);
    }
    public BACKUP_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BACKUP_SYMBOL, 0);
    }
    public BEGIN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BEGIN_SYMBOL, 0);
    }
    public BYTE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BYTE_SYMBOL, 0);
    }
    public CACHE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CACHE_SYMBOL, 0);
    }
    public CHARSET_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CHARSET_SYMBOL, 0);
    }
    public CHECKSUM_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CHECKSUM_SYMBOL, 0);
    }
    public CLONE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CLONE_SYMBOL, 0);
    }
    public CLOSE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_SYMBOL, 0);
    }
    public COMMENT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
    }
    public COMMIT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COMMIT_SYMBOL, 0);
    }
    public CONTAINS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CONTAINS_SYMBOL, 0);
    }
    public DEALLOCATE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DEALLOCATE_SYMBOL, 0);
    }
    public DO_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DO_SYMBOL, 0);
    }
    public END_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.END_SYMBOL, 0);
    }
    public FLUSH_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FLUSH_SYMBOL, 0);
    }
    public FOLLOWS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FOLLOWS_SYMBOL, 0);
    }
    public FORMAT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FORMAT_SYMBOL, 0);
    }
    public GROUP_REPLICATION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.GROUP_REPLICATION_SYMBOL, 0);
    }
    public HANDLER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.HANDLER_SYMBOL, 0);
    }
    public HELP_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.HELP_SYMBOL, 0);
    }
    public HOST_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.HOST_SYMBOL, 0);
    }
    public INSTALL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INSTALL_SYMBOL, 0);
    }
    public INVISIBLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INVISIBLE_SYMBOL, 0);
    }
    public LANGUAGE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LANGUAGE_SYMBOL, 0);
    }
    public NO_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NO_SYMBOL, 0);
    }
    public OPEN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_SYMBOL, 0);
    }
    public OPTIONS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OPTIONS_SYMBOL, 0);
    }
    public OWNER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OWNER_SYMBOL, 0);
    }
    public PARSER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PARSER_SYMBOL, 0);
    }
    public PARTITION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
    }
    public PORT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PORT_SYMBOL, 0);
    }
    public PRECEDES_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PRECEDES_SYMBOL, 0);
    }
    public PREPARE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PREPARE_SYMBOL, 0);
    }
    public REMOVE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REMOVE_SYMBOL, 0);
    }
    public REPAIR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REPAIR_SYMBOL, 0);
    }
    public RESET_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RESET_SYMBOL, 0);
    }
    public RESTORE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RESTORE_SYMBOL, 0);
    }
    public ROLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
    }
    public ROLLBACK_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ROLLBACK_SYMBOL, 0);
    }
    public SAVEPOINT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SAVEPOINT_SYMBOL, 0);
    }
    public SECONDARY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_SYMBOL, 0);
    }
    public SECONDARY_ENGINE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_ENGINE_SYMBOL, 0);
    }
    public SECONDARY_LOAD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_LOAD_SYMBOL, 0);
    }
    public SECONDARY_UNLOAD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_UNLOAD_SYMBOL, 0);
    }
    public SECURITY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SECURITY_SYMBOL, 0);
    }
    public SERVER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SERVER_SYMBOL, 0);
    }
    public SIGNED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SIGNED_SYMBOL, 0);
    }
    public SOCKET_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOCKET_SYMBOL, 0);
    }
    public SLAVE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SLAVE_SYMBOL, 0);
    }
    public SONAME_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SONAME_SYMBOL, 0);
    }
    public START_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.START_SYMBOL, 0);
    }
    public STOP_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.STOP_SYMBOL, 0);
    }
    public TRUNCATE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TRUNCATE_SYMBOL, 0);
    }
    public UNICODE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.UNICODE_SYMBOL, 0);
    }
    public UNINSTALL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.UNINSTALL_SYMBOL, 0);
    }
    public UPGRADE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.UPGRADE_SYMBOL, 0);
    }
    public VISIBLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.VISIBLE_SYMBOL, 0);
    }
    public WRAPPER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.WRAPPER_SYMBOL, 0);
    }
    public XA_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.XA_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_roleOrIdentifierKeyword;
    }
}


export class RoleOrLabelKeywordContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ACTION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ACTION_SYMBOL, 0);
    }
    public ACTIVE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ACTIVE_SYMBOL, 0);
    }
    public ADDDATE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ADDDATE_SYMBOL, 0);
    }
    public AFTER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.AFTER_SYMBOL, 0);
    }
    public AGAINST_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.AGAINST_SYMBOL, 0);
    }
    public AGGREGATE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.AGGREGATE_SYMBOL, 0);
    }
    public ALGORITHM_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ALGORITHM_SYMBOL, 0);
    }
    public ANY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ANY_SYMBOL, 0);
    }
    public AT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.AT_SYMBOL, 0);
    }
    public AUTO_INCREMENT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0);
    }
    public AUTOEXTEND_SIZE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0);
    }
    public AVG_ROW_LENGTH_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.AVG_ROW_LENGTH_SYMBOL, 0);
    }
    public AVG_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.AVG_SYMBOL, 0);
    }
    public BINLOG_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BINLOG_SYMBOL, 0);
    }
    public BIT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BIT_SYMBOL, 0);
    }
    public BLOCK_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BLOCK_SYMBOL, 0);
    }
    public BOOL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BOOL_SYMBOL, 0);
    }
    public BOOLEAN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BOOLEAN_SYMBOL, 0);
    }
    public BTREE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BTREE_SYMBOL, 0);
    }
    public BUCKETS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.BUCKETS_SYMBOL, 0);
    }
    public CASCADED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CASCADED_SYMBOL, 0);
    }
    public CATALOG_NAME_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CATALOG_NAME_SYMBOL, 0);
    }
    public CHAIN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CHAIN_SYMBOL, 0);
    }
    public CHANGED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CHANGED_SYMBOL, 0);
    }
    public CHANNEL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CHANNEL_SYMBOL, 0);
    }
    public CIPHER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CIPHER_SYMBOL, 0);
    }
    public CLIENT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CLIENT_SYMBOL, 0);
    }
    public CLASS_ORIGIN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CLASS_ORIGIN_SYMBOL, 0);
    }
    public COALESCE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COALESCE_SYMBOL, 0);
    }
    public CODE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CODE_SYMBOL, 0);
    }
    public COLLATION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COLLATION_SYMBOL, 0);
    }
    public COLUMN_NAME_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COLUMN_NAME_SYMBOL, 0);
    }
    public COLUMN_FORMAT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COLUMN_FORMAT_SYMBOL, 0);
    }
    public COLUMNS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COLUMNS_SYMBOL, 0);
    }
    public COMMITTED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COMMITTED_SYMBOL, 0);
    }
    public COMPACT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COMPACT_SYMBOL, 0);
    }
    public COMPLETION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COMPLETION_SYMBOL, 0);
    }
    public COMPONENT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COMPONENT_SYMBOL, 0);
    }
    public COMPRESSED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COMPRESSED_SYMBOL, 0);
    }
    public COMPRESSION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.COMPRESSION_SYMBOL, 0);
    }
    public CONCURRENT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CONCURRENT_SYMBOL, 0);
    }
    public CONNECTION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CONNECTION_SYMBOL, 0);
    }
    public CONSISTENT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CONSISTENT_SYMBOL, 0);
    }
    public CONSTRAINT_CATALOG_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CONSTRAINT_CATALOG_SYMBOL, 0);
    }
    public CONSTRAINT_SCHEMA_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0);
    }
    public CONSTRAINT_NAME_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CONSTRAINT_NAME_SYMBOL, 0);
    }
    public CONTEXT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CONTEXT_SYMBOL, 0);
    }
    public CPU_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CPU_SYMBOL, 0);
    }
    public CURRENT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CURRENT_SYMBOL, 0);
    }
    public CURSOR_NAME_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.CURSOR_NAME_SYMBOL, 0);
    }
    public DATA_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DATA_SYMBOL, 0);
    }
    public DATAFILE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DATAFILE_SYMBOL, 0);
    }
    public DATETIME_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DATETIME_SYMBOL, 0);
    }
    public DATE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DATE_SYMBOL, 0);
    }
    public DAY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DAY_SYMBOL, 0);
    }
    public DEFAULT_AUTH_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_AUTH_SYMBOL, 0);
    }
    public DEFINER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DEFINER_SYMBOL, 0);
    }
    public DELAY_KEY_WRITE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DELAY_KEY_WRITE_SYMBOL, 0);
    }
    public DESCRIPTION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DESCRIPTION_SYMBOL, 0);
    }
    public DIAGNOSTICS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DIAGNOSTICS_SYMBOL, 0);
    }
    public DIRECTORY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DIRECTORY_SYMBOL, 0);
    }
    public DISABLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DISABLE_SYMBOL, 0);
    }
    public DISCARD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DISCARD_SYMBOL, 0);
    }
    public DISK_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DISK_SYMBOL, 0);
    }
    public DUMPFILE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DUMPFILE_SYMBOL, 0);
    }
    public DUPLICATE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DUPLICATE_SYMBOL, 0);
    }
    public DYNAMIC_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.DYNAMIC_SYMBOL, 0);
    }
    public ENCRYPTION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ENCRYPTION_SYMBOL, 0);
    }
    public ENDS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ENDS_SYMBOL, 0);
    }
    public ENUM_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ENUM_SYMBOL, 0);
    }
    public ENGINE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ENGINE_SYMBOL, 0);
    }
    public ENGINES_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ENGINES_SYMBOL, 0);
    }
    public ENGINE_ATTRIBUTE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ENGINE_ATTRIBUTE_SYMBOL, 0);
    }
    public ERROR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ERROR_SYMBOL, 0);
    }
    public ERRORS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ERRORS_SYMBOL, 0);
    }
    public ESCAPE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ESCAPE_SYMBOL, 0);
    }
    public EVENTS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EVENTS_SYMBOL, 0);
    }
    public EVERY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EVERY_SYMBOL, 0);
    }
    public EXCLUDE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EXCLUDE_SYMBOL, 0);
    }
    public EXPANSION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EXPANSION_SYMBOL, 0);
    }
    public EXPORT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EXPORT_SYMBOL, 0);
    }
    public EXTENDED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EXTENDED_SYMBOL, 0);
    }
    public EXTENT_SIZE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.EXTENT_SIZE_SYMBOL, 0);
    }
    public FAULTS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FAULTS_SYMBOL, 0);
    }
    public FAST_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FAST_SYMBOL, 0);
    }
    public FOLLOWING_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FOLLOWING_SYMBOL, 0);
    }
    public FOUND_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FOUND_SYMBOL, 0);
    }
    public ENABLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ENABLE_SYMBOL, 0);
    }
    public FULL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FULL_SYMBOL, 0);
    }
    public FILE_BLOCK_SIZE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FILE_BLOCK_SIZE_SYMBOL, 0);
    }
    public FILTER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FILTER_SYMBOL, 0);
    }
    public FIRST_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FIRST_SYMBOL, 0);
    }
    public FIXED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.FIXED_SYMBOL, 0);
    }
    public GENERAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.GENERAL_SYMBOL, 0);
    }
    public GEOMETRY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.GEOMETRY_SYMBOL, 0);
    }
    public GEOMETRYCOLLECTION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0);
    }
    public GET_FORMAT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.GET_FORMAT_SYMBOL, 0);
    }
    public GRANTS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.GRANTS_SYMBOL, 0);
    }
    public GLOBAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.GLOBAL_SYMBOL, 0);
    }
    public HASH_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.HASH_SYMBOL, 0);
    }
    public HISTOGRAM_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.HISTOGRAM_SYMBOL, 0);
    }
    public HISTORY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.HISTORY_SYMBOL, 0);
    }
    public HOSTS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.HOSTS_SYMBOL, 0);
    }
    public HOUR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.HOUR_SYMBOL, 0);
    }
    public IDENTIFIED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
    }
    public IGNORE_SERVER_IDS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.IGNORE_SERVER_IDS_SYMBOL, 0);
    }
    public INVOKER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INVOKER_SYMBOL, 0);
    }
    public INDEXES_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INDEXES_SYMBOL, 0);
    }
    public INITIAL_SIZE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0);
    }
    public INSTANCE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INSTANCE_SYMBOL, 0);
    }
    public INACTIVE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INACTIVE_SYMBOL, 0);
    }
    public IO_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.IO_SYMBOL, 0);
    }
    public IPC_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.IPC_SYMBOL, 0);
    }
    public ISOLATION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ISOLATION_SYMBOL, 0);
    }
    public ISSUER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ISSUER_SYMBOL, 0);
    }
    public INSERT_METHOD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.INSERT_METHOD_SYMBOL, 0);
    }
    public JSON_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.JSON_SYMBOL, 0);
    }
    public KEY_BLOCK_SIZE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0);
    }
    public LAST_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LAST_SYMBOL, 0);
    }
    public LEAVES_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LEAVES_SYMBOL, 0);
    }
    public LESS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LESS_SYMBOL, 0);
    }
    public LEVEL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LEVEL_SYMBOL, 0);
    }
    public LINESTRING_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LINESTRING_SYMBOL, 0);
    }
    public LIST_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LIST_SYMBOL, 0);
    }
    public LOCAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
    }
    public LOCKED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LOCKED_SYMBOL, 0);
    }
    public LOCKS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LOCKS_SYMBOL, 0);
    }
    public LOGFILE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LOGFILE_SYMBOL, 0);
    }
    public LOGS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.LOGS_SYMBOL, 0);
    }
    public MAX_ROWS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MAX_ROWS_SYMBOL, 0);
    }
    public MASTER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
    }
    public MASTER_HEARTBEAT_PERIOD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0);
    }
    public MASTER_HOST_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_HOST_SYMBOL, 0);
    }
    public MASTER_PORT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_PORT_SYMBOL, 0);
    }
    public MASTER_LOG_FILE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_LOG_FILE_SYMBOL, 0);
    }
    public MASTER_LOG_POS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_LOG_POS_SYMBOL, 0);
    }
    public MASTER_USER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_USER_SYMBOL, 0);
    }
    public MASTER_PASSWORD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_PASSWORD_SYMBOL, 0);
    }
    public MASTER_PUBLIC_KEY_PATH_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0);
    }
    public MASTER_CONNECT_RETRY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0);
    }
    public MASTER_RETRY_COUNT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_RETRY_COUNT_SYMBOL, 0);
    }
    public MASTER_DELAY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_DELAY_SYMBOL, 0);
    }
    public MASTER_SSL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_SYMBOL, 0);
    }
    public MASTER_SSL_CA_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CA_SYMBOL, 0);
    }
    public MASTER_SSL_CAPATH_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CAPATH_SYMBOL, 0);
    }
    public MASTER_TLS_VERSION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_TLS_VERSION_SYMBOL, 0);
    }
    public MASTER_SSL_CERT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CERT_SYMBOL, 0);
    }
    public MASTER_SSL_CIPHER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CIPHER_SYMBOL, 0);
    }
    public MASTER_SSL_CRL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CRL_SYMBOL, 0);
    }
    public MASTER_SSL_CRLPATH_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0);
    }
    public MASTER_SSL_KEY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_KEY_SYMBOL, 0);
    }
    public MASTER_AUTO_POSITION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_AUTO_POSITION_SYMBOL, 0);
    }
    public MAX_CONNECTIONS_PER_HOUR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0);
    }
    public MAX_QUERIES_PER_HOUR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0);
    }
    public MAX_SIZE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MAX_SIZE_SYMBOL, 0);
    }
    public MAX_UPDATES_PER_HOUR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0);
    }
    public MAX_USER_CONNECTIONS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0);
    }
    public MEDIUM_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MEDIUM_SYMBOL, 0);
    }
    public MEMORY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MEMORY_SYMBOL, 0);
    }
    public MERGE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MERGE_SYMBOL, 0);
    }
    public MESSAGE_TEXT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MESSAGE_TEXT_SYMBOL, 0);
    }
    public MICROSECOND_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MICROSECOND_SYMBOL, 0);
    }
    public MIGRATE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MIGRATE_SYMBOL, 0);
    }
    public MINUTE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MINUTE_SYMBOL, 0);
    }
    public MIN_ROWS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MIN_ROWS_SYMBOL, 0);
    }
    public MODIFY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MODIFY_SYMBOL, 0);
    }
    public MODE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MODE_SYMBOL, 0);
    }
    public MONTH_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MONTH_SYMBOL, 0);
    }
    public MULTILINESTRING_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MULTILINESTRING_SYMBOL, 0);
    }
    public MULTIPOINT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MULTIPOINT_SYMBOL, 0);
    }
    public MULTIPOLYGON_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0);
    }
    public MUTEX_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MUTEX_SYMBOL, 0);
    }
    public MYSQL_ERRNO_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.MYSQL_ERRNO_SYMBOL, 0);
    }
    public NAME_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NAME_SYMBOL, 0);
    }
    public NAMES_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NAMES_SYMBOL, 0);
    }
    public NATIONAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NATIONAL_SYMBOL, 0);
    }
    public NCHAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NCHAR_SYMBOL, 0);
    }
    public NDBCLUSTER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NDBCLUSTER_SYMBOL, 0);
    }
    public NESTED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NESTED_SYMBOL, 0);
    }
    public NEVER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NEVER_SYMBOL, 0);
    }
    public NEXT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NEXT_SYMBOL, 0);
    }
    public NEW_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NEW_SYMBOL, 0);
    }
    public NO_WAIT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NO_WAIT_SYMBOL, 0);
    }
    public NODEGROUP_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NODEGROUP_SYMBOL, 0);
    }
    public NULLS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NULLS_SYMBOL, 0);
    }
    public NOWAIT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NOWAIT_SYMBOL, 0);
    }
    public NUMBER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NUMBER_SYMBOL, 0);
    }
    public NVARCHAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.NVARCHAR_SYMBOL, 0);
    }
    public OFFSET_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OFFSET_SYMBOL, 0);
    }
    public OLD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OLD_SYMBOL, 0);
    }
    public ONE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ONE_SYMBOL, 0);
    }
    public OPTIONAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OPTIONAL_SYMBOL, 0);
    }
    public ORDINALITY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ORDINALITY_SYMBOL, 0);
    }
    public ORGANIZATION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ORGANIZATION_SYMBOL, 0);
    }
    public OTHERS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.OTHERS_SYMBOL, 0);
    }
    public PACK_KEYS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PACK_KEYS_SYMBOL, 0);
    }
    public PAGE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PAGE_SYMBOL, 0);
    }
    public PARTIAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PARTIAL_SYMBOL, 0);
    }
    public PARTITIONING_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PARTITIONING_SYMBOL, 0);
    }
    public PARTITIONS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PARTITIONS_SYMBOL, 0);
    }
    public PASSWORD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
    }
    public PATH_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PATH_SYMBOL, 0);
    }
    public PHASE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PHASE_SYMBOL, 0);
    }
    public PLUGIN_DIR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PLUGIN_DIR_SYMBOL, 0);
    }
    public PLUGIN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PLUGIN_SYMBOL, 0);
    }
    public PLUGINS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PLUGINS_SYMBOL, 0);
    }
    public POINT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.POINT_SYMBOL, 0);
    }
    public POLYGON_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.POLYGON_SYMBOL, 0);
    }
    public PRECEDING_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PRECEDING_SYMBOL, 0);
    }
    public PRESERVE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PRESERVE_SYMBOL, 0);
    }
    public PREV_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PREV_SYMBOL, 0);
    }
    public THREAD_PRIORITY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.THREAD_PRIORITY_SYMBOL, 0);
    }
    public PRIVILEGES_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PRIVILEGES_SYMBOL, 0);
    }
    public PROCESSLIST_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PROCESSLIST_SYMBOL, 0);
    }
    public PROFILE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PROFILE_SYMBOL, 0);
    }
    public PROFILES_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.PROFILES_SYMBOL, 0);
    }
    public QUARTER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.QUARTER_SYMBOL, 0);
    }
    public QUERY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.QUERY_SYMBOL, 0);
    }
    public QUICK_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.QUICK_SYMBOL, 0);
    }
    public READ_ONLY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.READ_ONLY_SYMBOL, 0);
    }
    public REBUILD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REBUILD_SYMBOL, 0);
    }
    public RECOVER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RECOVER_SYMBOL, 0);
    }
    public REDO_BUFFER_SIZE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REDO_BUFFER_SIZE_SYMBOL, 0);
    }
    public REDUNDANT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REDUNDANT_SYMBOL, 0);
    }
    public RELAY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RELAY_SYMBOL, 0);
    }
    public RELAYLOG_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RELAYLOG_SYMBOL, 0);
    }
    public RELAY_LOG_FILE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RELAY_LOG_FILE_SYMBOL, 0);
    }
    public RELAY_LOG_POS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RELAY_LOG_POS_SYMBOL, 0);
    }
    public RELAY_THREAD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RELAY_THREAD_SYMBOL, 0);
    }
    public REMOTE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REMOTE_SYMBOL, 0);
    }
    public REORGANIZE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REORGANIZE_SYMBOL, 0);
    }
    public REPEATABLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REPEATABLE_SYMBOL, 0);
    }
    public REPLICATE_DO_DB_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_DO_DB_SYMBOL, 0);
    }
    public REPLICATE_IGNORE_DB_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0);
    }
    public REPLICATE_DO_TABLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_DO_TABLE_SYMBOL, 0);
    }
    public REPLICATE_IGNORE_TABLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0);
    }
    public REPLICATE_WILD_DO_TABLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0);
    }
    public REPLICATE_WILD_IGNORE_TABLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0);
    }
    public REPLICATE_REWRITE_DB_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0);
    }
    public USER_RESOURCES_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.USER_RESOURCES_SYMBOL, 0);
    }
    public RESPECT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RESPECT_SYMBOL, 0);
    }
    public RESUME_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RESUME_SYMBOL, 0);
    }
    public RETAIN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RETAIN_SYMBOL, 0);
    }
    public RETURNED_SQLSTATE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RETURNED_SQLSTATE_SYMBOL, 0);
    }
    public RETURNS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RETURNS_SYMBOL, 0);
    }
    public REUSE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REUSE_SYMBOL, 0);
    }
    public REVERSE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.REVERSE_SYMBOL, 0);
    }
    public ROLLUP_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ROLLUP_SYMBOL, 0);
    }
    public ROTATE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ROTATE_SYMBOL, 0);
    }
    public ROUTINE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ROUTINE_SYMBOL, 0);
    }
    public ROW_COUNT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ROW_COUNT_SYMBOL, 0);
    }
    public ROW_FORMAT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ROW_FORMAT_SYMBOL, 0);
    }
    public RTREE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.RTREE_SYMBOL, 0);
    }
    public SCHEDULE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SCHEDULE_SYMBOL, 0);
    }
    public SCHEMA_NAME_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SCHEMA_NAME_SYMBOL, 0);
    }
    public SECOND_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SECOND_SYMBOL, 0);
    }
    public SERIAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SERIAL_SYMBOL, 0);
    }
    public SERIALIZABLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SERIALIZABLE_SYMBOL, 0);
    }
    public SESSION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SESSION_SYMBOL, 0);
    }
    public SHARE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SHARE_SYMBOL, 0);
    }
    public SIMPLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SIMPLE_SYMBOL, 0);
    }
    public SKIP_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SKIP_SYMBOL, 0);
    }
    public SLOW_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SLOW_SYMBOL, 0);
    }
    public SNAPSHOT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SNAPSHOT_SYMBOL, 0);
    }
    public SOUNDS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOUNDS_SYMBOL, 0);
    }
    public SOURCE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SYMBOL, 0);
    }
    public SQL_AFTER_GTIDS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SQL_AFTER_GTIDS_SYMBOL, 0);
    }
    public SQL_AFTER_MTS_GAPS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0);
    }
    public SQL_BEFORE_GTIDS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0);
    }
    public SQL_BUFFER_RESULT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SQL_BUFFER_RESULT_SYMBOL, 0);
    }
    public SQL_NO_CACHE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SQL_NO_CACHE_SYMBOL, 0);
    }
    public SQL_THREAD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SQL_THREAD_SYMBOL, 0);
    }
    public SRID_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SRID_SYMBOL, 0);
    }
    public STACKED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.STACKED_SYMBOL, 0);
    }
    public STARTS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.STARTS_SYMBOL, 0);
    }
    public STATS_AUTO_RECALC_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.STATS_AUTO_RECALC_SYMBOL, 0);
    }
    public STATS_PERSISTENT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.STATS_PERSISTENT_SYMBOL, 0);
    }
    public STATS_SAMPLE_PAGES_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0);
    }
    public STATUS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.STATUS_SYMBOL, 0);
    }
    public STORAGE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.STORAGE_SYMBOL, 0);
    }
    public STRING_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.STRING_SYMBOL, 0);
    }
    public SUBCLASS_ORIGIN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SUBCLASS_ORIGIN_SYMBOL, 0);
    }
    public SUBDATE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SUBDATE_SYMBOL, 0);
    }
    public SUBJECT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SUBJECT_SYMBOL, 0);
    }
    public SUBPARTITION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SUBPARTITION_SYMBOL, 0);
    }
    public SUBPARTITIONS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SUBPARTITIONS_SYMBOL, 0);
    }
    public SUPER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SUPER_SYMBOL, 0);
    }
    public SUSPEND_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SUSPEND_SYMBOL, 0);
    }
    public SWAPS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SWAPS_SYMBOL, 0);
    }
    public SWITCHES_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.SWITCHES_SYMBOL, 0);
    }
    public TABLE_NAME_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_NAME_SYMBOL, 0);
    }
    public TABLES_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
    }
    public TABLE_CHECKSUM_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_CHECKSUM_SYMBOL, 0);
    }
    public TABLESPACE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
    }
    public TEMPORARY_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TEMPORARY_SYMBOL, 0);
    }
    public TEMPTABLE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TEMPTABLE_SYMBOL, 0);
    }
    public TEXT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TEXT_SYMBOL, 0);
    }
    public THAN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.THAN_SYMBOL, 0);
    }
    public TIES_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TIES_SYMBOL, 0);
    }
    public TRANSACTION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TRANSACTION_SYMBOL, 0);
    }
    public TRIGGERS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TRIGGERS_SYMBOL, 0);
    }
    public TIMESTAMP_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TIMESTAMP_SYMBOL, 0);
    }
    public TIMESTAMPADD_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TIMESTAMPADD_SYMBOL, 0);
    }
    public TIMESTAMPDIFF_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TIMESTAMPDIFF_SYMBOL, 0);
    }
    public TIME_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TIME_SYMBOL, 0);
    }
    public TYPES_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TYPES_SYMBOL, 0);
    }
    public TYPE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.TYPE_SYMBOL, 0);
    }
    public UDF_RETURNS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.UDF_RETURNS_SYMBOL, 0);
    }
    public UNBOUNDED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.UNBOUNDED_SYMBOL, 0);
    }
    public UNCOMMITTED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.UNCOMMITTED_SYMBOL, 0);
    }
    public UNDEFINED_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.UNDEFINED_SYMBOL, 0);
    }
    public UNDO_BUFFER_SIZE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0);
    }
    public UNDOFILE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.UNDOFILE_SYMBOL, 0);
    }
    public UNKNOWN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.UNKNOWN_SYMBOL, 0);
    }
    public UNTIL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.UNTIL_SYMBOL, 0);
    }
    public USER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.USER_SYMBOL, 0);
    }
    public USE_FRM_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.USE_FRM_SYMBOL, 0);
    }
    public VARIABLES_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.VARIABLES_SYMBOL, 0);
    }
    public VCPU_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.VCPU_SYMBOL, 0);
    }
    public VIEW_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.VIEW_SYMBOL, 0);
    }
    public VALUE_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.VALUE_SYMBOL, 0);
    }
    public WARNINGS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.WARNINGS_SYMBOL, 0);
    }
    public WAIT_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.WAIT_SYMBOL, 0);
    }
    public WEEK_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.WEEK_SYMBOL, 0);
    }
    public WORK_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.WORK_SYMBOL, 0);
    }
    public WEIGHT_STRING_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.WEIGHT_STRING_SYMBOL, 0);
    }
    public X509_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.X509_SYMBOL, 0);
    }
    public XID_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.XID_SYMBOL, 0);
    }
    public XML_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.XML_SYMBOL, 0);
    }
    public YEAR_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.YEAR_SYMBOL, 0);
    }
    public ADMIN_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySQLParser.ADMIN_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySQLParser.RULE_roleOrLabelKeyword;
    }
}
