program
 stmtList
  stmt
   appClassImport
    import
    appPkgPath
     SSF_SS_PMT
     :
     EXCEPTION
     :
     *
  ;
  stmt
   appClassImport
    import
    appPkgPath
     SSF_SS_PMT
     :
     SSF_Student
     :
     *
  ;
  stmt
   appClassImport
    import
    appPkgPath
     SSF_SS_PMT
     :
     SSF_Construct
     :
     *
  ;
  stmt
   appClassImport
    import
    appPkgPath
     SSF_SS_PMT
     :
     *
  ;
  stmt
   appClassImport
    import
    appClassPath
     SCC_SI_VALIDITY
     :
     PERSON
     :
     SrvcIndPeriod
  ;
  stmt
   classDeclaration
    class
    Student
    classBlock
     classBlockStmt
      property_
       property
       varType
        string
       StdntISet
     ;
     classBlockStmt
      property_
       property
       varType
        string
       Emplid
     ;
     classBlockStmt
      property_
       property
       varType
        boolean
       TCalcIsRequired
       get
     ;
     classBlockStmt
      property_
       property
       varType
        boolean
       TCalcIsRequiredSS
       get
     ;
     classBlockStmt
      method
       method
       get_Todays_Payments
       formalParamList
        (
        )
       returnType
        Returns
        varType
         integer
     ;
     classBlockStmt
      method
       method
       get_deposit_due
       formalParamList
        (
        )
       returnType
        Returns
        varType
         number
     ;
     classBlockStmt
      method
       method
       get_charges_due
       formalParamList
        (
        )
       returnType
        Returns
        varType
         number
     ;
     classBlockStmt
      method
       method
       get_deposit_due_by_date
       formalParamList
        (
        param
         &as_of_date
         As
         varType
          date
        )
       returnType
        Returns
        varType
         number
     ;
     classBlockStmt
      method
       method
       get_charges_due_by_date
       formalParamList
        (
        param
         &as_of_date
         As
         varType
          date
        )
       returnType
        Returns
        varType
         number
     ;
     classBlockStmt
      method
       method
       Student
       formalParamList
        (
        param
         &Id
         As
         varType
          string
        )
     ;
     classBlockStmt
      method
       method
       ValidateStdnt
       formalParamList
        (
        param
         &Iset
         As
         varType
          string
        )
     ;
     classBlockStmt
      method
       method
       ValidatePurchase
       formalParamList
        (
        param
         &Iset
         As
         varType
          string
        )
     ;
     classBlockStmt
      method
       method
       CheckInternetHold
       formalParamList
        (
        param
         &Srvc_rs
         As
         varType
          Rowset
        )
     ;
     classBlockStmt
      method
       method
       OverrideLimit
       formalParamList
        (
        )
       returnType
        Returns
        varType
         boolean
     ;
     classBlockStmt
      method
       method
       CalcTuition
       formalParamList
        (
        )
     ;
     classBlockStmt
      method
       method
       CheckDailyUsage
       formalParamList
        (
        )
       returnType
        Returns
        varType
         integer
     ;
     classBlockStmt
      method
       method
       DisplayTCalcMsg
       formalParamList
        (
        )
       returnType
        Returns
        varType
         boolean
     ;
    classBlock
     private
     classBlockStmt
      method
       method
       GetStudentIset
       formalParamList
        (
        )
     ;
     classBlockStmt
      method
       method
       ValidateImpact
       formalParamList
        (
        param
         &rs
         As
         varType
          Rowset
        )
     ;
     classBlockStmt
      constant
       Constant
       &msgNoInstSet
       =
       expr
        literal
         17
     ;
     classBlockStmt
      constant
       Constant
       &msgTuitionError
       =
       expr
        literal
         124
     ;
     classBlockStmt
      constant
       Constant
       &msgCannotPay
       =
       expr
        literal
         45
     ;
     classBlockStmt
      constant
       Constant
       &msgCannotPurchase
       =
       expr
        literal
         1018
     ;
     classBlockStmt
      constant
       Constant
       &set
       =
       expr
        literal
         14870
     ;
     classBlockStmt
      constant
       Constant
       &msgInternetHolds
       =
       expr
        literal
         18
     ;
     classBlockStmt
      constant
       Constant
       &MostCurrentEnrol
       =
       expr
        literal
         "E"
     ;
     classBlockStmt
      constant
       Constant
       &LastEnrol
       =
       expr
        literal
         "L"
     ;
     classBlockStmt
      constant
       Constant
       &SFTermDefault
       =
       expr
        literal
         "T"
     ;
     classBlockStmt
      constant
       Constant
       &msgDailyLimit
       =
       expr
        literal
         13
     ;
     classBlockStmt
      instance
       instance
       varType
        number
       &award
     ;
     classBlockStmt
      instance
       instance
       varType
        Record
       &hcr_rec
     ;
     classBlockStmt
      instance
       instance
       varType
        appClassPath
         SSF_SS_PMT
         :
         SSF_Construct
         :
         InstitutionSet
       &IS
     ;
     classBlockStmt
      instance
       instance
       varType
        appClassPath
         SSF_SS_PMT
         :
         SSF_Calculate_Tuition
       &obj_Tuition
     ;
     classBlockStmt
      instance
       instance
       varType
        appClassPath
         SCC_SI_VALIDITY
         :
         PERSON
         :
         SrvcIndPeriod
       &srvc
     ;
    end-class
  ;
  stmt
   methodImpl
    method
    Student
    stmtList
     stmt
      expr
       expr
        expr
         id_
          %This
        .
        id_
         GetStudentIset
       (
       )
     ;
     stmt
      expr
       expr
        id_
         %This
       .
       id_
        Emplid
      =
      expr
       id_
        &Id
     ;
    end-method
  ;
  stmt
   methodImpl
    method
    GetStudentIset
    stmtList
     stmt
      varDeclaration
       Local
       varType
        Record
       varDeclarator
        &r
        =
        expr
         expr
          id_
           CreateRecord
         (
         exprList
          expr
           expr
            id_
             Record
           .
           id_
            OPR_DEF_TBL_CS
         )
     ;
     stmt
      expr
       expr
        expr
         id_
          &r
        .
        id_
         OPRID
       .
       id_
        Value
      =
      expr
       id_
        %OperatorId
     ;
     stmt
      expr
       expr
        expr
         id_
          &r
        .
        id_
         SelectByKey
       (
       )
     ;
     stmt
      varDeclaration
       Local
       varType
        string
       varDeclarator
        &iset
        =
        expr
         expr
          expr
           id_
            &r
          .
          id_
           ISET_OVRD
         .
         id_
          Value
     ;
     stmt
      ifStmt
       If
       expr
        expr
         id_
          None
        (
        exprList
         expr
          id_
           &iset
        )
       Then
       stmtList
        stmt
         expr
          id_
           &iset
         =
         expr
          expr
           expr
            id_
             &r
           .
           id_
            INSTITUTION_SET
          .
          id_
           Value
        ;
       End-If
     ;
     stmt
      ifStmt
       If
       expr
        expr
         id_
          None
        (
        exprList
         expr
          id_
           &iset
        )
       Then
       stmtList
        stmt
         throw
         expr
          createInvocation
           create
           appClassPath
            SSF_SS_PMT
            :
            EXCEPTION
            :
            StudentException
           (
           exprList
            expr
             id_
              &msgNoInstSet
            ,
            expr
             id_
              &set
           )
        ;
       Else
       stmtList
        stmt
         expr
          expr
           id_
            %This
          .
          id_
           StdntISet
         =
         expr
          id_
           &iset
        ;
        stmt
         expr
          id_
           &IS
         =
         expr
          createInvocation
           create
           appClassPath
            SSF_SS_PMT
            :
            SSF_Construct
            :
            InstitutionSet
           (
           exprList
            expr
             expr
              id_
               %This
             .
             id_
              StdntISet
           )
        ;
       End-If
     ;
    end-method
  ;
  stmt
   getImpl
    get
    TCalcIsRequired
    stmtList
     stmt
      varDeclaration
       Local
       varType
        Rowset
       varDeclarator
        &temp_rs
        =
        expr
         expr
          id_
           CreateRowset
         (
         exprList
          expr
           expr
            id_
             Record
           .
           id_
            SF_ISET_TERM_VW
         )
     ;
     stmt
      varDeclaration
       Local
       varType
        number
       varDeclarator
        &cnt
        =
        expr
         expr
          expr
           id_
            &temp_rs
          .
          id_
           Fill
         (
         exprList
          expr
           literal
            "where  emplid = :1 and INSTITUTION_SET =:2"
          ,
          expr
           id_
            &Emplid
          ,
          expr
           id_
            &StdntISet
         )
     ;
     stmt
      ifStmt
       If
       expr
        expr
         id_
          &cnt
        >
        expr
         literal
          0
       Then
       stmtList
        stmt
         Return
         expr
          literal
           True
        ;
       Else
       stmtList
        stmt
         Return
         expr
          literal
           False
        ;
       End-If
     ;
    end-get
  ;
  stmt
   getImpl
    get
    TCalcIsRequiredSS
    stmtList
     stmt
      varDeclaration
       Local
       varType
        Rowset
       varDeclarator
        &temp_rs
        =
        expr
         expr
          id_
           CreateRowset
         (
         exprList
          expr
           expr
            id_
             Record
           .
           id_
            SF_ISET_TERM_VW
         )
     ;
     stmt
      varDeclaration
       Local
       varType
        number
       varDeclarator
        &cnt
     ;
     stmt
      ifStmt
       If
       expr
        expr
         id_
          &IS
        .
        id_
         TuitionCalcReq
       Then
       stmtList
        stmt
         expr
          id_
           &cnt
         =
         expr
          expr
           expr
            id_
             &temp_rs
           .
           id_
            Fill
          (
          exprList
           expr
            literal
             "where  emplid = :1 and INSTITUTION_SET =:2 AND SSF_SS_AUTO_CALC = 'Y'"
           ,
           expr
            id_
             &Emplid
           ,
           expr
            id_
             &StdntISet
          )
        ;
       End-If
     ;
     stmt
      ifStmt
       If
       expr
        expr
         id_
          &cnt
        >
        expr
         literal
          0
       Then
       stmtList
        stmt
         Return
         expr
          literal
           True
        ;
       Else
       stmtList
        stmt
         Return
         expr
          literal
           False
        ;
       End-If
     ;
    end-get
  ;
  stmt
   methodImpl
    method
    ValidateStdnt
    stmtList
     stmt
      ifStmt
       If
       expr
        Not
        expr
         expr
          id_
           &IS
         .
         id_
          EnableWebPay
       Then
       stmtList
        stmt
         throw
         expr
          createInvocation
           create
           appClassPath
            SSF_SS_PMT
            :
            EXCEPTION
            :
            StudentException
           (
           exprList
            expr
             id_
              &msgCannotPay
            ,
            expr
             id_
              &set
           )
        ;
       End-If
     ;
    end-method
  ;
  stmt
   methodImpl
    method
    ValidatePurchase
    stmtList
     stmt
      ifStmt
       If
       expr
        Not
        expr
         expr
          id_
           &IS
         .
         id_
          EnableWebPurchase
       Then
       stmtList
        stmt
         throw
         expr
          createInvocation
           create
           appClassPath
            SSF_SS_PMT
            :
            EXCEPTION
            :
            StudentException
           (
           exprList
            expr
             id_
              &msgCannotPurchase
            ,
            expr
             id_
              &set
           )
        ;
       End-If
     ;
    end-method
  ;
  stmt
   methodImpl
    method
    CalcTuition
    stmtList
     stmt
      varDeclaration
       Local
       varType
        Rowset
       varDeclarator
        &temp_rs
        =
        expr
         expr
          id_
           CreateRowset
         (
         exprList
          expr
           expr
            id_
             Record
           .
           id_
            SF_ISET_TERM_VW
         )
     ;
     stmt
      varDeclaration
       Local
       varType
        number
       varDeclarator
        &i
     ;
     stmt
      varDeclaration
       Local
       varType
        Record
       varDeclarator
        &rec
     ;
     stmt
      varDeclaration
       Local
       varType
        number
       varDeclarator
        &cnt
        =
        expr
         expr
          expr
           id_
            &temp_rs
          .
          id_
           Fill
         (
         exprList
          expr
           literal
            "where  emplid = :1 and INSTITUTION_SET =:2 AND SSF_SS_AUTO_CALC = 'Y'"
          ,
          expr
           id_
            &Emplid
          ,
          expr
           id_
            &StdntISet
         )
     ;
     stmt
      ifStmt
       If
       expr
        expr
         id_
          &cnt
        >
        expr
         literal
          0
       Then
       stmtList
        stmt
         forStmt
          For
          &i
          =
          expr
           literal
            1
          To
          expr
           expr
            id_
             &temp_rs
           .
           id_
            ActiveRowCount
          stmtList
           stmt
            expr
             id_
              &rec
            =
            expr
             expr
              expr
               id_
                &temp_rs
              (
              exprList
               expr
                id_
                 &i
              )
             .
             id_
              SF_ISET_TERM_VW
           ;
           stmt
            expr
             id_
              &obj_Tuition
            =
            expr
             createInvocation
              create
              appClassPath
               SSF_SS_PMT
               :
               SSF_Calculate_Tuition
              (
              exprList
               expr
                expr
                 expr
                  id_
                   &rec
                 .
                 id_
                  EMPLID
                .
                id_
                 Value
               ,
               expr
                expr
                 expr
                  id_
                   &rec
                 .
                 id_
                  BUSINESS_UNIT
                .
                id_
                 Value
               ,
               expr
                expr
                 expr
                  id_
                   &rec
                 .
                 id_
                  STRM
                .
                id_
                 Value
              )
           ;
           stmt
            ifStmt
             If
             expr
              Not
              expr
               expr
                id_
                 &obj_Tuition
               .
               id_
                Success
             Then
             ;
             stmtList
              stmt
               throw
               expr
                createInvocation
                 create
                 appClassPath
                  SSF_SS_PMT
                  :
                  EXCEPTION
                  :
                  TuitionException
                 (
                 exprList
                  expr
                   literal
                    124
                  ,
                  expr
                   expr
                    expr
                     id_
                      &rec
                    .
                    id_
                     BUSINESS_UNIT
                   .
                   id_
                    Value
                  ,
                  expr
                   id_
                    &StdntISet
                 )
              ;
             End-If
           ;
          End-For
        ;
       End-If
     ;
    end-method
  ;
  stmt
   methodImpl
    method
    CheckInternetHold
    stmtList
     stmt
      varDeclaration
       Local
       varType
        Rowset
       varDeclarator
        &rs
        =
        expr
         expr
          id_
           CreateRowset
         (
         exprList
          expr
           expr
            id_
             Record
           .
           id_
            SF_ISET_SRVC_VW
         )
     ;
     stmt
      expr
       expr
        expr
         id_
          %This
        .
        id_
         ValidateImpact
       (
       exprList
        expr
         id_
          &rs
       )
     ;
     stmt
      ifStmt
       If
       expr
        Not
        expr
         expr
          expr
           id_
            &rs
          (
          exprList
           expr
            literal
             1
          )
         .
         id_
          IsDeleted
       Then
       stmtList
        stmt
         expr
          expr
           expr
            id_
             &rs
           .
           id_
            CopyTo
          (
          exprList
           expr
            id_
             &Srvc_rs
          )
        ;
        stmt
         throw
         expr
          createInvocation
           create
           appClassPath
            SSF_SS_PMT
            :
            EXCEPTION
            :
            StudentException
           (
           exprList
            expr
             id_
              &msgInternetHolds
            ,
            expr
             id_
              &set
           )
        ;
       End-If
     ;
    end-method
  ;
  stmt
   methodImpl
    method
    ValidateImpact
    stmtList
     stmt
      varDeclaration
       Local
       varType
        integer
       varDeclarator
        &i
     ;
     stmt
      varDeclaration
       Local
       varType
        Record
       varDeclarator
        &srvc_rec
     ;
     stmt
      ifStmt
       If
       expr
        expr
         expr
          expr
           id_
            &rs
          .
          id_
           Fill
         (
         exprList
          expr
           literal
            "where  emplid = :1 and INSTITUTION_SET = :2"
          ,
          expr
           id_
            &Emplid
          ,
          expr
           id_
            &StdntISet
         )
        >
        expr
         literal
          0
       Then
       stmtList
        stmt
         forStmt
          For
          &i
          =
          expr
           expr
            id_
             &rs
           .
           id_
            ActiveRowCount
          To
          expr
           literal
            1
          Step
          expr
           -
           expr
            literal
             1
          stmtList
           stmt
            expr
             id_
              &srvc_rec
            =
            expr
             expr
              expr
               expr
                id_
                 &rs
               (
               exprList
                expr
                 id_
                  &i
               )
              .
              id_
               GetRecord
             (
             exprList
              expr
               literal
                1
             )
           ;
           stmt
            expr
             id_
              &srvc
            =
            expr
             createInvocation
              create
              appClassPath
               SCC_SI_VALIDITY
               :
               PERSON
               :
               SrvcIndPeriod
              (
              exprList
               expr
                expr
                 expr
                  id_
                   &srvc_rec
                 .
                 id_
                  INSTITUTION
                .
                id_
                 Value
               ,
               expr
                expr
                 expr
                  id_
                   &srvc_rec
                 .
                 id_
                  SERVICE_IMPACT
                .
                id_
                 Value
              )
           ;
           stmt
            ifStmt
             If
             expr
              Not
              expr
               expr
                expr
                 id_
                  &srvc
                .
                id_
                 ImpactValidate
               (
               exprList
                expr
                 literal
                  ""
               )
             Then
             stmtList
              stmt
               expr
                expr
                 expr
                  id_
                   &rs
                 .
                 id_
                  DeleteRow
                (
                exprList
                 expr
                  id_
                   &i
                )
              ;
             End-If
           ;
          End-For
        ;
       End-If
     ;
    end-method
  ;
  stmt
   methodImpl
    method
    OverrideLimit
    stmtList
     stmt
      varDeclaration
       Local
       varType
        Rowset
       varDeclarator
        &rs
        =
        expr
         expr
          id_
           CreateRowset
         (
         exprList
          expr
           expr
            id_
             Record
           .
           id_
            SF_ISET_SRVC2VW
         )
     ;
     stmt
      expr
       expr
        expr
         id_
          %This
        .
        id_
         ValidateImpact
       (
       exprList
        expr
         id_
          &rs
       )
     ;
     stmt
      ifStmt
       If
       expr
        expr
         expr
          id_
           &rs
         (
         exprList
          expr
           literal
            1
         )
        .
        id_
         IsDeleted
       Then
       stmtList
        stmt
         Return
         expr
          literal
           False
        ;
       Else
       stmtList
        stmt
         Return
         expr
          literal
           True
        ;
       End-If
     ;
    end-method
  ;
  stmt
   methodImpl
    method
    get_deposit_due
    stmtList
     stmt
      varDeclaration
       Local
       varType
        number
       varDeclarator
        &amt
     ;
     stmt
      expr
       expr
        id_
         SQLExec
       (
       exprList
        expr
         literal
          "select sum(item_amt) from ps_ssf_ss_dep_due where emplid = :1 and institution_set = :2"
        ,
        expr
         id_
          &Emplid
        ,
        expr
         id_
          &StdntISet
        ,
        expr
         id_
          &amt
       )
     ;
     stmt
      Return
      expr
       id_
        &amt
     ;
    end-method
  ;
  stmt
   methodImpl
    method
    get_deposit_due_by_date
    stmtList
     stmt
      varDeclaration
       Local
       varType
        number
       varDeclarator
        &amt
     ;
     stmt
      expr
       expr
        id_
         SQLExec
       (
       exprList
        expr
         literal
          "select sum(item_amt) from ps_ssf_ss_dep_due where emplid = :1 and institution_set = :2 and due_dt <= %datein(:3)"
        ,
        expr
         id_
          &Emplid
        ,
        expr
         id_
          &StdntISet
        ,
        expr
         id_
          &as_of_date
        ,
        expr
         id_
          &amt
       )
     ;
     stmt
      Return
      expr
       id_
        &amt
     ;
    end-method
  ;
  stmt
   methodImpl
    method
    get_charges_due
    stmtList
     stmt
      varDeclaration
       Local
       varType
        number
       varDeclarator
        &amt
     ;
     stmt
      expr
       expr
        id_
         SQLExec
       (
       exprList
        expr
         literal
          "select sum(due_amt) from ps_ssf_due_chrg_vw where common_id = :1 and institution_set = :2"
        ,
        expr
         id_
          &Emplid
        ,
        expr
         id_
          &StdntISet
        ,
        expr
         id_
          &amt
       )
     ;
     stmt
      Return
      expr
       id_
        &amt
     ;
    end-method
  ;
  stmt
   methodImpl
    method
    get_charges_due_by_date
    stmtList
     stmt
      varDeclaration
       Local
       varType
        number
       varDeclarator
        &amt
     ;
     stmt
      expr
       expr
        id_
         SQLExec
       (
       exprList
        expr
         literal
          "select sum(due_amt) from ps_ssf_due_chrg_vw where common_id = :1 and institution_set = :2 and due_dt <= %datein(:3)"
        ,
        expr
         id_
          &Emplid
        ,
        expr
         id_
          &StdntISet
        ,
        expr
         id_
          &as_of_date
        ,
        expr
         id_
          &amt
       )
     ;
     stmt
      Return
      expr
       id_
        &amt
     ;
    end-method
  ;
  stmt
   methodImpl
    method
    get_Todays_Payments
    stmtList
     stmt
      varDeclaration
       Local
       varType
        Rowset
       varDeclarator
        &pend_rs
        =
        expr
         expr
          id_
           CreateRowset
         (
         exprList
          expr
           expr
            id_
             Record
           .
           id_
            SF_PAYMENT_VW
         )
     ;
     stmt
      varDeclaration
       Local
       varType
        integer
       varDeclarator
        &i
        =
        expr
         expr
          expr
           id_
            &pend_rs
          .
          id_
           Fill
         (
         exprList
          expr
           literal
            "where EMPLID =:1 AND SA_ID_TYPE ='P' AND SF_PAYMENT_STATUS='S' AND SF_POST_STATUS = 'P' AND CR_CARD_TRANS_SRC IN ('P','M') AND NOT( CR_CARD_AUTH_REPLY= 'ETIMEOUT') and %dateout(%datepart(LAST_DTTM_UPDATE)) = :2"
          ,
          expr
           id_
            &Emplid
          ,
          expr
           id_
            %Date
         )
     ;
     stmt
      varDeclaration
       Local
       varType
        Rowset
       varDeclarator
        &log_rs
        =
        expr
         expr
          id_
           CreateRowset
         (
         exprList
          expr
           expr
            id_
             Record
           .
           id_
            SF_PAY_LOG_VW
         )
     ;
     stmt
      varDeclaration
       Local
       varType
        integer
       varDeclarator
        &l
        =
        expr
         expr
          expr
           id_
            &log_rs
          .
          id_
           Fill
         (
         exprList
          expr
           literal
            "where COMMON_ID =:1 AND SA_ID_TYPE ='P' AND PROCESS_INSTANCE = 0 AND CR_CARD_TRANS_SRC IN ('P','M') and %dateout(%datepart(LAST_DTTM_UPDATE)) = :2"
          ,
          expr
           id_
            &Emplid
          ,
          expr
           id_
            %Date
         )
     ;
     stmt
      Return
      expr
       expr
        id_
         &l
       +
       expr
        id_
         &i
     ;
    end-method
  ;
  stmt
   methodImpl
    method
    CheckDailyUsage
    stmtList
     stmt
      varDeclaration
       Local
       varType
        integer
       varDeclarator
        &num_payments
        =
        expr
         literal
          0
     ;
     stmt
      ifStmt
       If
       expr
        expr
         expr
          id_
           &IS
         .
         id_
          CheckUsage
        And
        expr
         Not
         expr
          expr
           expr
            id_
             %This
           .
           id_
            OverrideLimit
          (
          )
       Then
       stmtList
        stmt
         expr
          id_
           &num_payments
         =
         expr
          expr
           expr
            id_
             %This
           .
           id_
            get_Todays_Payments
          (
          )
        ;
        stmt
         ifStmt
          If
          expr
           expr
            id_
             &num_payments
           >=
           expr
            expr
             id_
              INSTITUTION_SET
            .
            id_
             CR_CARD_DAY_LIMIT
          Then
          stmtList
           stmt
            throw
            expr
             createInvocation
              create
              appClassPath
               SSF_SS_PMT
               :
               EXCEPTION
               :
               StudentException
              (
              exprList
               expr
                id_
                 &msgDailyLimit
               ,
               expr
                id_
                 &set
              )
           ;
          End-If
        ;
       End-If
     ;
     stmt
      Return
      expr
       id_
        &num_payments
     ;
    end-method
  ;
  stmt
   methodImpl
    method
    DisplayTCalcMsg
    stmtList
     stmt
      varDeclaration
       Local
       varType
        boolean
       varDeclarator
        &DispMsg
        =
        expr
         literal
          False
     ;
     stmt
      ifStmt
       If
       expr
        expr
         id_
          &IS
        .
        id_
         Disp_Tcalc_Msg
       Then
       stmtList
        stmt
         ifStmt
          If
          expr
           expr
            (
            expr
             expr
              Not
              expr
               expr
                id_
                 &IS
               .
               id_
                TuitionCalcReq
             And
             expr
              expr
               id_
                %This
              .
              id_
               TCalcIsRequired
            )
           Or
           expr
            (
            expr
             expr
              expr
               id_
                &IS
              .
              id_
               TuitionCalcReq
             And
             expr
              expr
               id_
                %This
              .
              id_
               TCalcIsRequiredSS
            )
          Then
          stmtList
           stmt
            expr
             id_
              &DispMsg
            =
            expr
             literal
              True
           ;
          End-If
        ;
       End-If
     ;
     stmt
      Return
      expr
       id_
        &DispMsg
     ;
    end-method
  ;
 <EOF>
