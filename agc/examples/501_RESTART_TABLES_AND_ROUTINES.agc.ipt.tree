(prog (line (blank_line (label prog) (eol \n))) line (line  ) (line (blank_line (label line) (eol \n))) line (line   ) (line (blank_line (label comment_line) (eol \n))) line (line    ) (line (blank_line (label comment) (eol \n))) (line (comment_line (ws     ) (comment ### FILE="Main.annotation") (eol \n))) line (line    ) (line (blank_line (label eol) (eol \n))) line (line     ) (line (blank_line (label \n) (eol \n))) line (line  ) (line (blank_line (label line) (eol \n))) line (line   ) (line (blank_line (label comment_line) (eol \n))) line (line    ) (line (blank_line (label comment) (eol \n))) (line (comment_line (ws     ) (comment # Copyright:\tPublic domain.) (eol \n))) line (line    ) (line (blank_line (label eol) (eol \n))) line (line     ) (line (blank_line (label \n) (eol \n))) line (line  ) (line (blank_line (label line) (eol \n))) line (line   ) (line (blank_line (label comment_line) (eol \n))) line (line    ) (line (blank_line (label comment) (eol \n))) (line (comment_line (ws     ) (comment # Filename:\t501_RESTART_TABLES_AND_ROUTINES.agc) (eol \n))) line (line    ) (line (blank_line (label eol) (eol \n))) line (line     ) (line (blank_line (label \n) (eol \n))) line (line  ) (line (blank_line (label line) (eol \n))) line (line   ) (line (blank_line (label comment_line) (eol \n))) line (line    ) (line (blank_line (label comment) (eol \n))) (line (comment_line (ws     ) (comment # Purpose:\tPart of the source code for Solarium build 55. This) (eol \n))) line (line    ) (line (blank_line (label eol) (eol \n))) line (line     ) (line (blank_line (label \n) (eol \n))) line (line  ) (line (blank_line (label line) (eol \n))) line (line   ) (line (blank_line (label comment_line) (eol \n))) line (line    ) (line (blank_line (label comment) (eol \n))) (line (comment_line (ws     ) (comment #\t\tis for the Command Module's (CM) Apollo Guidance) (eol \n))) line (line    ) (line (blank_line (label eol) (eol \n))) line (line     ) (line (blank_line (label \n) (eol \n))) line (line  ) (line (blank_line (label line) (eol \n))) line (line   ) (line (blank_line (label comment_line) (eol \n))) line (line    ) (line (blank_line (label comment) (eol \n))) (line (comment_line (ws     ) (comment #\t\tComputer (AGC), for Apollo 4.) (eol \n))) line (line    ) (line (blank_line (label eol) (eol \n))) line (line     ) (line (blank_line (label \n) (eol \n))) line (line  ) (line (blank_line (label line) (eol \n))) line (line   ) (line (blank_line (label comment_line) (eol \n))) line (line    ) (line (blank_line (label comment) (eol \n))) (line (comment_line (ws     ) (comment # Assembler:\tyaYUL --block1) (eol \n))) line (line    ) (line (blank_line (label eol) (eol \n))) line (line     ) (line (blank_line (label \n) (eol \n))) line (line  ) (line (blank_line (label line) (eol \n))) line (line   ) (line (blank_line (label comment_line) (eol \n))) line (line    ) (line (blank_line (label comment) (eol \n))) (line (comment_line (ws     ) (comment # Contact:\tJim Lawton <jim DOT lawton AT gmail DOT com>) (eol \n))) line (line    ) (line (blank_line (label eol) (eol \n))) line (line     ) (line (blank_line (label \n) (eol \n))) line (line  ) (line (blank_line (label line) (eol \n))) line (line   ) (line (blank_line (label comment_line) (eol \n))) line (line    ) (line (blank_line (label comment) (eol \n))) (line (comment_line (ws     ) (comment # Website:\twww.ibiblio.org/apollo/index.html) (eol \n))) line (line    ) (line (blank_line (label eol) (eol \n))) line (line     ) (line (blank_line (label \n) (eol \n))) line (line  ) (line (blank_line (label line) (eol \n))) line (line   ) (line (blank_line (label comment_line) (eol \n))) line (line    ) (line (blank_line (label comment) (eol \n))) (line (comment_line (ws     ) (comment # Page scans:\twww.ibiblio.org/apollo/ScansForConversion/Solarium055/) (eol \n))) line (line    ) (line (blank_line (label eol) (eol \n))) line (line     ) (line (blank_line (label \n) (eol \n))) line (line  ) (line (blank_line (label line) (eol \n))) line (line   ) (line (blank_line (label comment_line) (eol \n))) line (line    ) (line (blank_line (label comment) (eol \n))) (line (comment_line (ws     ) (comment # Mod history:\t2009-10-02 JL\tCreated.) (eol \n))) line (line    ) (line (blank_line (label eol) (eol \n))) line (line     ) (line (blank_line (label \n\n) (eol \n))) line (line  ) (line (blank_line (label line) (eol \n))) line (line   ) (line (blank_line (label comment_line) (eol \n))) line (line    ) (line (blank_line (label comment) (eol \n))) (line (comment_line (ws     ) (comment ## Page 125) (eol \n))) line (line    ) (line (blank_line (label eol) (eol \n))) line (line     ) (line (blank_line (label \n) (eol \n))) line (line  ) (line (blank_line (label line) (eol \n))) line (line   ) (line (blank_line (label comment_line) (eol \n))) line (line    ) (line (blank_line (label comment) (eol \n))) (line (comment_line (ws     ) (comment #  RESTART  TABLES) (eol \n))) line (line    ) (line (blank_line (label eol) (eol \n))) line (line     ) (line (blank_line (label \n) (eol \n))) line (line  ) (line (blank_line (label line) (eol \n))) line (line   ) (line (blank_line (label comment_line) (eol \n))) line (line    ) (line (blank_line (label comment) (eol \n))) (line (comment_line (ws     ) (comment #  ----------------) (eol \n))) line (line    ) (line (blank_line (label eol) (eol \n))) line (line     ) (line (blank_line (label \n) (eol \n))) line (line  ) (line (blank_line (label line) (eol \n))) line (line   ) (line (blank_line (label comment_line) (eol \n))) line (line    ) (line (blank_line (label comment) (eol \n))) (line (comment_line (ws     ) (comment #) (eol \n))) line (line    ) (line (blank_line (label eol) (eol \n))) line (line     ) (line (blank_line (label \n) (eol \n))) line (line  ) (line (blank_line (label line) (eol \n))) line (line   ) (line (blank_line (label comment_line) (eol \n))) line (line    ) (line (blank_line (label comment) (eol \n))) (line (comment_line (ws     ) (comment #\tTHESE CONTROL RESTART OPERATION.) (eol \n))) line (line    ) (line (blank_line (label eol) (eol \n))) line (line     ) (line (blank_line (label \n) (eol \n))) line (line  ) (line (blank_line (label line) (eol \n))) line (line   ) (line (blank_line (label comment_line) (eol \n))) line (line    ) (line (blank_line (label comment) (eol \n))) (line (comment_line (ws     ) (comment #) (eol \n))) line (line    ) (line (blank_line (label eol) (eol \n))) line (line     ) (line (blank_line (label \n\n\n\n) (eol \n))) line (line  ) (line (blank_line (label line) (eol \n))) line (line   ) (line (blank_line (label comment_line) (eol \n))) line (line    ) (line (blank_line (label comment) (eol \n))) (line (comment_line (ws     ) (comment #  ...IMPORTANT...   DO NOT MOVE THIS SECTION FROM BEGINNING OF BANK. DJL) (eol \n))) line (line    ) (line (blank_line (label eol) (eol \n))) line (line     ) (line (blank_line (label \n\n) (eol \n))) line (line  ) (line (blank_line (label line) (eol \n))) line (line   ) (line (blank_line (label instruction_line) (eol \n))) line (line    ) (line (blank_line (label ws) (eol \n))) line (line     ) (line (blank_line (label \t\t) (eol \n))) line (line    ) (line (blank_line (label opcodes) (eol \n))) line (line     ) (line (blank_line (label opcode) (eol \n))) line (line      ) (line (blank_line (label pseudo_opcode) (eol \n))) (line (instruction_line (ws       ) (opcodes (opcode (pseudo_opcode SETLOC))) argument (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 26000))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # START OF BANK 13.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable WTDTTAB))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # WAITLIST DT FOR RESTART 1.0)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable WCADRTAB))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # WAITLIST CADR.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable PRIOTAB))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # PRIORITY VALUE.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable CADRTAB))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # CADR OF CURRENT JOB.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment # ANY JOB 1 RESTARTS SHOULD GO HERE.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable 2.1SPOT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (pseudo_opcode 2DEC)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0.0))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 2.1 RESTART)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode 2DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0.0))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable 2.2SPOT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # RESTART 2.2 VALUES.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 12000))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # PRIO12)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable SOAKINIT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable 2.3SPOT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 2.3 RESTART)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 12000))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable ATTIJOB))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) argument (eol        \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable -1))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable 2.4SPOT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # RESTART 2.4)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 12000))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable ATTIJOB))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable 2.5SPOT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (pseudo_opcode 2DEC)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 2.5 RESTART)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode 2DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment # ANY MORE GROUP 2 RESTART VALUES SHOULD GO HERE.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment #)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable 3.1SPOT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 77777))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 3.1 RESTART.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 77777))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable TROLL))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) argument (eol        \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable +1))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable MONITASK))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable 3.2SPOT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 77777))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 3.2 RESTART)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 77777))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable TTUMON))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment ## Page 126)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable TUMBTSK1))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 3.3 RESTART)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 77777))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable REDO3.3))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 700))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 3.4 RESTART.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable GIMPOWOF))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 1050))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 3.5 RESTART)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable DVMODOFF))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 1075))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 3.6 RESTART.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable ATTCONON))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 75))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 3.7RESTART)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable CGTASK))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 200))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 3.8 RESTART.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable GMPOFF3))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 3.9 RESTART.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 77777))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable SETMOD23))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 3.10 RESTART.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 27000))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable SHUTJOB))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 500))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 3.11 RESTART.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable CDUXTASK))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 5SECS FROM TBASE3)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable 3.12SPOT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 1000))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 3.12 RESTART.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable CM/SMTSK))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 10SECS FROM TBASE3)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 20000))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment ## Page 127)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable CDUXJOB))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 1000))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 3.13 RESTART.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable CM/SMTSK))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 20000))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable REDO3.13))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 1000))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 3.14 RESTART.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable CM/SMTSK))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable 3.15SPOT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 1500))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 3.15 RESTART)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable ENTATASK))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 15SECS FROM TBASE3)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable 3.16SPOT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 3.16 RESTART.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 15000))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # PRIO TO REDO HUNTEST.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable PREHUNT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable 3.17SPOT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (pseudo_opcode 2DEC)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 3.17 RESTART.  ...PRELAUNCH...)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 20000))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable REPLI1))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode 2DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 3.18 RESTART.  ...PRELAUNCH...)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 20000))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable REPLI2))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode 2DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 3.19 RESTART.  ...PRELAUNCH...)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 20000))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable REDO3.21))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode 2DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 3.20 RESTART.  ...PRELAUNCH...)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 77777))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable REDO3.20))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 50))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 3.21 RESTART.  ...PRELAUNCH...)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable REPRELAL))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 21000))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable REDO3.21))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 50))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 3.22 RESTART.  ...PRELAUNCH...)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable REPRELAL))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode 2DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0.0))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment ## Page 128)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable 3.23SPOT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 200))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 3.23 RESTART)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable GMPOFF2))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode 2DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0.0))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable 3.24SPOT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 350))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 3.24 RESTART)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable DVMODOF2))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode 2DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0.0))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 550))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 3.25 RESTART)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable DVMODOF2))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode 2DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0.0))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment #  ANY MORE GROUP 3 RESTART VALUES SHOULD GO HERE.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (pseudo_opcode 2DEC)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0.0))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 3.26 RESTART)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 05000))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable MONITJOB))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode 2DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0.0))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 3.27 RESTART)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 77777))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable TUMBTSK1))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment #\tANY MORE GROUP 3 RESTARTS GO IN HERE)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable 4.1SPOT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 4.1 RESTART.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 34000))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # HIGH PRIO.  (WATCH THIS.))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable REDO4.1))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable 4.2SPOT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 77777))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 4.2 RESTART.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 77777))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable LONGTIME))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) argument (eol        \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable +1))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable ENGINOFF))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable 4.3SPOT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 1050))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 4.3 RESTART.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable COASTPHS))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 77777))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable REDO4.3))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable 4.4SPOT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (pseudo_opcode 2DEC)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable -30000))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 4.4 RESTART)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode 2DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 14616))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 4.5 RESTART  (DT = 146.16 SEC)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable FDAOFTSK))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment #    (310 - 163.84 SEC.))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode 2DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 77777))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 4.6 RESTART)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable TCOAST))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # TCOAST = TIME FROM CUTOFF TO UPTASK.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment ## Page 129)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (pseudo_opcode 2DEC)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 4.7 RESTART)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 77777))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable UPTASK))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 11500))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 4.8 RESTART)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable PREAVGON))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 06000))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable UPJOB))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 11500))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 4.9 RESTART)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable PREAVGON))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 06000))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable REDO4.9))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 600))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 4.10 RESTART)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable GIMPOWON))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 77777))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable REDO4.10))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 200))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 4.11 RESTART.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable TARGTASK))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode 2DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 170))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 4.12 RESTART.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable ABRTWAIT))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment #  IN 1.7 SEC.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 25000))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable SET54SEP))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 9950))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 4.13 RESTART)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable ATTCNOFF))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # IN 95.5 SEC.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 77777))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable REDO4.13))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable 4.14SPOT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 600))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 4.14 RESTART.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable GIMPOWON))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 77777))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable REDO4.14))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 250))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 4.15 RESTART.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable ATTCNOFF))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # IN 2.5 SEC)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 25000))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable ABRTRPT))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) argument (eol        \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable -3))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment #  WATCH THIS LOC.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 550))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 4.16 RESTART)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable ATTCNOFF))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 25000))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable REDO4.16))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment ## Page 130)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 10800))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 4.17 RESTART)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable GIMPOWON))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode 2DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode 2DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 4.18 RESTART.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 77777))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable ATTCNOFF))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 25))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 4.19 RESTART.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable DVMODEON))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode 2DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 50))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 4.20 RESTART.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable ENGINEON))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode 2DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable 4.21SPOT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 1000))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 4.21 RESTART)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable PLUSXOFF))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 25000))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable REDO4.21))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode 2DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 4.22 RESTART.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 77777))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable REDO4.22))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 350))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 4.23 RESTART)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable ENGINOFF))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 77777))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable STEEROFF))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode 2DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 4.24 RESTART.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 77777))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable GIMPOWON))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 1150))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 4.25 RESTART)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable ATTCNOFF))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode 2DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable 4.26SPOT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (pseudo_opcode 2DEC)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 4.26 RESTSRT.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 12000))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # LOWERED.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable UPTHETA1))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable 4.27SPOT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 12000))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 4.27 RESTART)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable AVGON))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 120 SEC FROM UPTASK.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode 2DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment ## Page 131)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable 4.28SPOT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (pseudo_opcode 2DEC)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 4.28 RESTART SAVES ENGIN OFF SEQUENCE)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 77777))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # WHILE TBASE4 UPDATED)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable SPS1TEST))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable 4.29SPOT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 11500))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 4.29 RESTART)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable PREAVGON))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 06000))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable REDO4.29))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable 4.30SPOT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 9000))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 4.30 RESTART)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable PLUSX2))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode 2DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0.0))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable 4.31SPOT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (pseudo_opcode 2DEC)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0.0))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 4.31 RESTART)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 77777))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable REDO4.31))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable 4.32SPOT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (pseudo_opcode 2DEC)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0.0))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 4.32 RESTART)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 77777))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable REDO4.32))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable 4.33SPOT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (pseudo_opcode 2DEC)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0.0))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 4.33 RESTART)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 77777))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable ENGINOFF))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment #  ANY MORE GROUP 4 RESTART VALUES SHOULD GO HERE.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable 5.1SPOT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 200))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 5.1 RESTART)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable REREADAC))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode 2DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable 5.2SPOT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (pseudo_opcode 2DEC)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 77777))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable REDO5.2))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 200))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 5.3 RESTART)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable REREADAC))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 17000))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable REDO5.3))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 200))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 5.4 RESTART)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable REREADAC))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 17000))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable REFAZE6))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment ## Page 132)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 200))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 5.5 RESTART.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable REREADAC))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 17000))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CAD)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable RREDO5.5))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 200))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 5.6 RESTART)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable REREADAC))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 35000))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable MODE26))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable 5.7SPOT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (pseudo_opcode 2DEC)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 5.7 RESTART)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 77777))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable REDO5.7))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 200))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 5.8 RESTART)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable SOAKTSK1))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 14000))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable SOAKJOB))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 200))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 5.9 RESTART.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable SOAKTSK1))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 13000))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable REFAZE6))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode 2DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 5.10 RESTART.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 12000))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable REDO5.10))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 200))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 5.11 RESTART)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable SOAKTSK1))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode 2DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable 5.12SPOT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 200))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 5.12 RESTART.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable REPIPUP))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode 2DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode 2DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 5.13 RESTART.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 77777))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable REDO5.13))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 200))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable REPIPUP))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 17000))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable ENTRYTOP))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) argument (eol        \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable +3))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 200))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 5.15 RESTART.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable REPIPUP))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment ## Page 133)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 17000))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable REFAZE4))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 200))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 5.16)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable REPIPUP))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 16000))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable REFAZE6))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 200))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 5.17 RESTART.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable REPIPUP))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 17000))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable REFAZE8))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable 5.18SPOT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 200))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 5.18 RESTART)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable REPIPUP))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 17000))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable REFAZE10))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable 5.19SPOT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 200))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 5.19 RESTART.  (PIPUP IN 2 SEC.))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable REPIPUP))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 17000))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable NUMODE63))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # SETS MODE 63 AND FINISHES ENTRY INITIAL.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable 5.20SPOT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (pseudo_opcode 2DEC)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0.0))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 5.20 RESTART FOR VERB 76)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 34000))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable REDO5.20))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable 5.21SPOT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0.))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 5.21 RESTART IS SPARE)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable 5.22SPOT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0.))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 5.22 RESTART IS SPARE)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable 5.23SPOT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 200))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 5.23 RESTART)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable REREADAC))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 17000))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable REDO5.23))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 200))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # REDO POINT AFTER AVG STATE VECTOR UPDATE)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable REREADAC))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 17000))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable REDO5.24))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 200))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable REREADAC))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment ## Page 134)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 17000))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable REFAZE6))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment # \tANY MORE GROUP 5 RESTARTS GO HERE.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment #)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable 6.1SPOT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 6.1 RESTART  (UNDEFINED))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n\n\n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment #)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment #   ANY MORE GROUP 6 RESTART VALUES SHOULD GO HERE.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment #)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n\n\n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable SIZETAB))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (pseudo_opcode DEC)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 0 INCREMENT FOR GROUP 1.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 2.1SPOT))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) argument (eol        \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable -26004))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # INCREMENT TO INDEX GROUP 2 TABLE)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 3.1SPOT))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) argument (eol        \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable -26004))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # INCREMENT TO INDEX GROUP 3)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 4.1SPOT))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) argument (eol        \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable -26004))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # INCREMENT TO INDEX GROUP 4 TABLE.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 5.1SPOT))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) argument (eol        \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable -26004))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # INCREMENT TO INDEX GROUP 5 TABLE.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 6.1SPOT))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) argument (eol        \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable -26004))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # INCREMENT TO INDEX GROUP 6 TABLE.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment ## Page 135)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment #   GENERALIZED RESTART ROUTINE.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n\n\n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment # FOR EACH FAZEBIT VALUE , THE ASUMPTION IS MADE THAT THERE MAY EXIST)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment #  ONE WAITLIST OR LONGCALL TASK TO BE RECALLED.  AND ONE CURRENT TASK OR)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment #  JOB TO BE RESTARTED.  (SPECIAL RESTARTS ARE POSSIBLE FOR SITUATIONS )) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment #  WHICH DONOT FIT THE GENERAL FORM.)  FOR THE GENERAL CASE,  FOUR TABLE)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment #  ARE USED.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment #\t(RATHER,  ONE TABLE WITH 4 ENTRIES PER FAZEBIT VALUE.))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment #\t\t1.  WTDTTAB.  WAITLIST DT TABLE.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment #\t\t2.  WCADRTAB  WAITLIST CADR TABLE.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment #\t\t3.  PRIOTAB  CURRENT JOB PRIORITY. (NEG NUMB IF TASK.))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment #\t\t4.  CADRTAB  CURRENT JOB (OR TASK) RESTART LOCATION.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment #  IN ADDITION, THERE EXISTS A SIZE TABLE THAT LISTS THE NUMBER OF)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment #  LOCATIONS USED BY EACH PROFRAM FOR RESTARTS.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment #\t\t...MORE TO COME LATER...\t\t(DJL))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n\n\n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable RESTARTS))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (standard_opcode XCH)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable MPAC))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # FAZE BITS FOR THIS PROG IN MPAC.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode DOUBLE)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode DOUBLE)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # MULTIPLY BY 4.  (4 ITEMS PER ENTRY.))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode INDEX)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable LOC))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # LOC CONTAINS THE PROGRAM NUMBER-1. (0-5))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode AD)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable SIZETAB))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable POINTER))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CAF)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable TCURRENT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable GOLOC))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) argument (eol        \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable +1))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # EXIT LOCATION.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CAF)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable TCWAIT))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # SET A WAITLIST CALL IN ERASABLE.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable GOLOC))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) argument (eol        \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable -1))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode INDEX)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable POINTER))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CAF)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable WTDTTAB))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CCS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable register_))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (register_ A)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable WTCALL))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # +N = WAITLIST CALL)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable CURNTJOB))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # +0 = NO CALL)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable LONGCLER))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # -n = LONGCALL)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode INDEX)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable POINTER))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # -0 = INDIRECT (PROBABLY))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CAF)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable WCADRTAB))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CCS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable register_))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (register_ A)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable INDIRECT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable TCURRENT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable CURNTJOB))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # NO ZERO CALLS)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable LONGCLER))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) argument (eol        \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable -1))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # NEG OF TIME FOR SHORT LONG.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable SINDIR))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable ONE))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable LONGCLER))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (standard_opcode AD)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable ONE))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # RESTORE LONGTIME)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable RECALL))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode INDEX)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable POINTER))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable WCADRTAB))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # STORED NEGATIVELY.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment ## Page 136)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (standard_opcode TS)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable RECALL))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) argument (eol        \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable +1))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable IBNKCALL))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable NULONGDT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable IBNKCALL))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable LONGCALL))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable CURNTJOB))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n\n\n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment # )) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n\n\n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment #  INDIRECT SECTION TAKES THE DP TIME FRON THE ERASABLE LOCATIONS BY THE)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment #     NUMBER IN THE WCADRTAB.    (WTDTTAB = -0.))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable INDIRECT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (standard_opcode TS)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable ECADTEM))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # CADR-1 IS STORED.  (DUE TO CCS.) )) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode INDEX)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable register_))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (register_ A)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 1))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # (1 NOT 0 BECAUSE CADR OFF BY 1.))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode COM)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # (NOT NEEDED IF NEG TIME STROED.USAGE..))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable RECALL))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # AND STORE MAJOR PART.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode INDEX)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable ECADTEM))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 2))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # AGAIN ONE MORE THAN USUAL.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode COM)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable LONGCLER))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) argument (eol        \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable +4))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # STORE MINOR PART THERE.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n\n\n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment # ASSIGNMENTS ETC.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable assignment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable GOLOC))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n))) line (line     EQUALS) (line (blank_line (eol \n))) line (line    ) (line (blank_line (label ws) (eol \n))) line (line     ) (line (blank_line (label \t) (eol \n))) line (line    ) (line (blank_line (label expression) (eol \n))) line (line     ) (line (blank_line (label multiplyingExpression) (eol \n))) line (line      ) (line (blank_line (label atom) (eol \n))) line (line       ) (line (blank_line (label variable) (eol \n))) line (line        ) (line (blank_line (label OVFIND) (eol \n))) line (line    ) (line (blank_line (label ws) (eol \n))) line (line     ) (line (blank_line (label \t\t) (eol \n))) line (line    ) (line (blank_line (label comment) (eol \n))) (line (comment_line (ws     ) (comment # USES ONE LOCATION ON EACH SIDE OF IT.) (eol \n))) line (line    ) (line (blank_line (label eol) (eol \n))) line (line     ) (line (blank_line (label \n) (eol \n))) line (line  ) (line (blank_line (label line) (eol \n))) line (line   ) (line (blank_line (label assignment_line) (eol \n))) line (line    ) (line (blank_line (label variable) (eol \n))) line (line     ) (line (blank_line (label TEMDT) (eol \n))) line (line    ) (line (blank_line (label ws) (eol \n))) line (line     ) (line (blank_line (label \t\t) (eol \n))) line (line     EQUALS) (line (blank_line (eol \n))) line (line    ) (line (blank_line (label ws) (eol \n))) line (line     ) (line (blank_line (label \t) (eol \n))) line (line    ) (line (blank_line (label expression) (eol \n))) line (line     ) (line (blank_line (label multiplyingExpression) (eol \n))) line (line      ) (line (blank_line (label atom) (eol \n))) line (line       ) (line (blank_line (label variable) (eol \n))) line (line        ) (line (blank_line (label MPAC) (eol \n))) line (line    ) (line (blank_line (label ws) (eol \n))) (line (blank_line (eol       \n))) line (line    ) (line (blank_line (label expression) (eol \n))) line (line     ) (line (blank_line (label multiplyingExpression) (eol \n))) line (line      ) (line (blank_line (label atom) (eol \n))) line (line       ) (line (blank_line (label variable) (eol \n))) line (line        ) (line (blank_line (label +2) (eol \n))) line (line    ) (line (blank_line (label eol) (eol \n))) line (line     ) (line (blank_line (label \n) (eol \n))) line (line  ) (line (blank_line (label line) (eol \n))) line (line   ) (line (blank_line (label assignment_line) (eol \n))) line (line    ) (line (blank_line (label variable) (eol \n))) line (line     ) (line (blank_line (label RECALL) (eol \n))) line (line    ) (line (blank_line (label ws) (eol \n))) line (line     ) (line (blank_line (label \t\t) (eol \n))) line (line     EQUALS) (line (blank_line (eol \n))) line (line    ) (line (blank_line (label ws) (eol \n))) line (line     ) (line (blank_line (label \t) (eol \n))) line (line    ) (line (blank_line (label expression) (eol \n))) line (line     ) (line (blank_line (label multiplyingExpression) (eol \n))) line (line      ) (line (blank_line (label atom) (eol \n))) line (line       ) (line (blank_line (label variable) (eol \n))) line (line        ) (line (blank_line (label MPAC) (eol \n))) line (line    ) (line (blank_line (label ws) (eol \n))) (line (blank_line (eol       \n))) line (line    ) (line (blank_line (label expression) (eol \n))) line (line     ) (line (blank_line (label multiplyingExpression) (eol \n))) line (line      ) (line (blank_line (label atom) (eol \n))) line (line       ) (line (blank_line (label variable) (eol \n))) line (line        ) (line (blank_line (label +1) (eol \n))) line (line    ) (line (blank_line (label ws) (eol \n))) line (line     ) (line (blank_line (label \t\t) (eol \n))) line (line    ) (line (blank_line (label comment) (eol \n))) (line (comment_line (ws     ) (comment # MUNTZ NOW USINF LOC IN RESTART CONTROL.) (eol \n))) line (line    ) (line (blank_line (label eol) (eol \n))) line (line     ) (line (blank_line (label \n) (eol \n))) line (line  ) (line (blank_line (label line) (eol \n))) line (line   ) (line (blank_line (label assignment_line) (eol \n))) line (line    ) (line (blank_line (label variable) (eol \n))) line (line     ) (line (blank_line (label ECADTEM) (eol \n))) line (line    ) (line (blank_line (label ws) (eol \n))) line (line     ) (line (blank_line (label \t\t) (eol \n))) line (line     EQUALS) (line (blank_line (eol \n))) line (line    ) (line (blank_line (label ws) (eol \n))) line (line     ) (line (blank_line (label \t) (eol \n))) line (line    ) (line (blank_line (label expression) (eol \n))) line (line     ) (line (blank_line (label multiplyingExpression) (eol \n))) line (line      ) (line (blank_line (label atom) (eol \n))) line (line       ) (line (blank_line (label variable) (eol \n))) line (line        ) (line (blank_line (label RECALL) (eol \n))) line (line    ) (line (blank_line (label ws) (eol \n))) (line (blank_line (eol       \n))) line (line    ) (line (blank_line (label expression) (eol \n))) line (line     ) (line (blank_line (label multiplyingExpression) (eol \n))) line (line      ) (line (blank_line (label atom) (eol \n))) line (line       ) (line (blank_line (label variable) (eol \n))) line (line        ) (line (blank_line (label +1) (eol \n))) line (line    ) (line (blank_line (label ws) (eol \n))) line (line     ) (line (blank_line (label \t) (eol \n))) line (line    ) (line (blank_line (label comment) (eol \n))) (line (comment_line (ws     ) (comment # LOOKS OK.) (eol \n))) line (line    ) (line (blank_line (label eol) (eol \n))) line (line     ) (line (blank_line (label \n) (eol \n))) line (line  ) (line (blank_line (label line) (eol \n))) line (line   ) (line (blank_line (label assignment_line) (eol \n))) line (line    ) (line (blank_line (label variable) (eol \n))) line (line     ) (line (blank_line (label POINTER) (eol \n))) line (line    ) (line (blank_line (label ws) (eol \n))) line (line     ) (line (blank_line (label \t\t) (eol \n))) line (line     EQUALS) (line (blank_line (eol \n))) line (line    ) (line (blank_line (label ws) (eol \n))) line (line     ) (line (blank_line (label \t) (eol \n))) line (line    ) (line (blank_line (label expression) (eol \n))) line (line     ) (line (blank_line (label multiplyingExpression) (eol \n))) line (line      ) (line (blank_line (label atom) (eol \n))) line (line       ) (line (blank_line (label variable) (eol \n))) line (line        ) (line (blank_line (label MPAC) (eol \n))) line (line    ) (line (blank_line (label eol) (eol \n))) line (line     ) (line (blank_line (label \n) (eol \n))) line (line  ) (line (blank_line (label line) (eol \n))) line (line   ) (line (blank_line (label comment_line) (eol \n))) line (line    ) (line (blank_line (label comment) (eol \n))) (line (comment_line (ws     ) (comment #   MPAC + 1 SAVED BECAUSE OF USE IN RESTART CONTROL.  (CCS MPAC + 1)) (eol \n))) line (line    ) (line (blank_line (label eol) (eol \n))) line (line     ) (line (blank_line (label \n\n) (eol \n))) line (line  ) (line (blank_line (label line) (eol \n))) line (line   ) (line (blank_line (label comment_line) (eol \n))) line (line    ) (line (blank_line (label comment) (eol \n))) (line (comment_line (ws     ) (comment #    THIS ROUTINE LEAVES THE WTLIST CALL AS GIVEN BY WCADRTAB.) (eol \n))) line (line    ) (line (blank_line (label eol) (eol \n))) line (line     ) (line (blank_line (label \n\n) (eol \n))) line (line  ) (line (blank_line (label line) (eol \n))) line (line   ) (line (blank_line (label instruction_line) (eol \n))) line (line    ) (line (blank_line (label label) (eol \n))) line (line     ) (line (blank_line (label WTCALL) (eol \n))) line (line    ) (line (blank_line (label ws) (eol \n))) line (line     ) (line (blank_line (label \t\t) (eol \n))) line (line    ) (line (blank_line (label opcodes) (eol \n))) line (line     ) (line (blank_line (label opcode) (eol \n))) line (line      ) (line (blank_line (label standard_opcode) (eol \n))) (line (instruction_line (ws       ) (opcodes (opcode (standard_opcode AD))) argument (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable ONE))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # DT-1 IN A ON ENTRY.  (FROM CCS.))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode COM)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # STORE NEGATIVE OF DT IN TEMDT.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable TEMDT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode INDEX)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable POINTER))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CAF)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable WCADRTAB))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # PICK UP CADR FOR THIS CALL.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable GOLOC))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # GOLOC+1 AND -1 ALREADY SET-UP.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable WTCALL2))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (standard_opcode INDEX)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable LOC))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # FIRST GET TBASE - TIME1)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable TBASE2))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) argument (eol        \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable -1))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # TBASE STORED NEGATIVELY)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode EXTEND)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode SU)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable register_))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (register_ TIME1)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # TBASE - TIME1)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment ## Page 137)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (standard_opcode CCS)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable register_))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (register_ A)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # THIS SHOULD BE NEGATIVE IF ALL OK.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode COM)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # GET POSMAX - A.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode AD)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable OCT37776))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 1 BIT SHY OF POSMAX.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode AD)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable ONE))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # RESTORE BIT LOST BY CCS.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode AD)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable TEMDT))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # TIME1 - TBASE -DT  NOW IN A.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CCS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable register_))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (register_ A)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # TEST IT.  SHOULD BE NEGATIVE.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CAF)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable ZERO))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # EXCEEDED TIME.  BAD,BAD...)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable +2))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # (+0 JUST POSSIBLE.))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable +1))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # YES, EVERYTHING OK.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode AD)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable ONE))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # NOW IS THE TIME.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable GOLOC))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) argument (eol        \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable -1))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n\n\n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable OCT37776))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 37776))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # POSMAX - 1)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n\n\n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable SINDIR))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (standard_opcode CAF)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable TCSWRET))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable GOLOC))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) argument (eol        \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable +1))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode INDEX)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable POINTER))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CAF)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable CADRTAB))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # PICK UP CADR TO GO TO.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable GOLOC))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode INDEX)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable POINTER))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode INDEX)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable PRIOTAB))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # IT POINTS ATTHE ERASABLE LOCATION OF DT)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 0))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # NEG OF DT IN A.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable TEMDT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable WTCALL2))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # JOIN THERE TO RECOMPUTE TIME REMAINING.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment ## Page 138)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment #  GETS CURRENT JOB (OR TASK) RERUNNING.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable CURNTJOB))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (standard_opcode INDEX)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable POINTER))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CAF)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable CADRTAB))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable GOLOC))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # PUT ADDRESS THERE (CADR))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CAF)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable TCSWRET))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable GOLOC))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) argument (eol        \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable +1))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # WHERE TO WHEN DONE.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode INDEX)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable POINTER))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CAF)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable PRIOTAB))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # PRIORITY TABLE.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CCS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable register_))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (register_ A)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # TEST IT.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable ITSAPRIO))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # +N = PRIORITY.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable TCSWRET))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable SWRETURN))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # +0 = NO JOB OR TASK.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable SHINDIRT))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # -N = SHORT INDIRECT FORM.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode AD)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable ONE))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # -0 = IMMEDIATE WAITLIST CALL.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable GOLOC))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) argument (eol        \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable -1))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # -0 WILL CRASH OUT HERE...)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ITSAPRIO))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (standard_opcode AD)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable ONE))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # RESTORE CORRECT PRIORITY VALUE.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable GOLOC))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) argument (eol        \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable -1))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # SAVE THERE TEMPORARILY.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CAF)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable TCFINDVC))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # N3 RPOVISION FOR NOVAC.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode XCH)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable GOLOC))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) argument (eol        \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable -1))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # PICKING UP PRIORITY AGAIN.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable GOLOC))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) argument (eol        \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable -1))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # AND GET THE JOB STARTED. (EXIT VIA SWRET))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n\n\n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment #   SHORT INDIRECT SECTION IS NOT USED AS YET.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable SHINDIRT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (standard_opcode INDEX)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable register_))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (register_ A)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 1))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # CCS DECREASED ADDRESS BY 1 OF DT LOC.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable TEMDT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable WTCALL2))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # -DT IN A WHHEN REJOINING WTCALL.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n\n\n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment #  TBASE REGISTERS CONTAIN NEGATIVE OF TIME AT START OF SEQUENCE.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment #  ROUTINE TO GENERATE  NEW DELTA T (LONGTIME) FOR LONGCALL.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable NULONGDT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable READTIME))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) argument (eol        \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable +1))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # GET TIME.  (ALREADY INHIBITED.))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CAF)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable ZERO))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode AD)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable TCUTOFF))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) argument (eol        \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable +1))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment #  (POSITIVE NUMBER))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode AD)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable RUPTSTOR))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) argument (eol        \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable +1))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # (NEGATIVE NUMBER))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode AD)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable RECALL))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) argument (eol        \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable +1))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable LONGTIME))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) argument (eol        \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable +1))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # (COULD OVERFLOW))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CAF)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable ZERO))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode AD)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable TCUTOFF))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode AD)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable RUPTSTOR))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode AD)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable RECALL))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode XCH)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable LONGTIME))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # NO OVERFLOW.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CCS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable LONGTIME))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # TEST FOR POSITIVE DT.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable ISWRETRN))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # (DONT HAVE TO USE ICALLS IF SAME BANK.))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment ## Page 139)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable -2))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable BADLONG))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CCS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable LONGTIME))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) argument (eol        \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable +1))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable ISWRETRN))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable +1))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable BADLONG))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (standard_opcode CAF)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable ZERO))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable LONGTIME))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CAF)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable ONE))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # LEAVE A CALL FOR 1 DT.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable LONGTIME))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) argument (eol        \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable +1))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable ISWRETRN))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # ...AND EXIT.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment #    THIS COULD BE MODIFIED EASILY TO CHANGE BAD DT POLICY.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable EOF))))) (eol \n))) <EOF>)