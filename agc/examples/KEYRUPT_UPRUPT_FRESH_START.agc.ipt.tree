(prog (line (blank_line (label prog) (eol \n))) line (line  ) (line (blank_line (label line) (eol \n))) line (line   ) (line (blank_line (label comment_line) (eol \n))) line (line    ) (line (blank_line (label comment) (eol \n))) (line (comment_line (ws     ) (comment ### FILE="Main.annotation") (eol \n))) line (line    ) (line (blank_line (label eol) (eol \n))) line (line     ) (line (blank_line (label \n) (eol \n))) line (line  ) (line (blank_line (label line) (eol \n))) line (line   ) (line (blank_line (label comment_line) (eol \n))) line (line    ) (line (blank_line (label comment) (eol \n))) (line (comment_line (ws     ) (comment # Copyright:\tPublic domain.) (eol \n))) line (line    ) (line (blank_line (label eol) (eol \n))) line (line     ) (line (blank_line (label \n) (eol \n))) line (line  ) (line (blank_line (label line) (eol \n))) line (line   ) (line (blank_line (label comment_line) (eol \n))) line (line    ) (line (blank_line (label comment) (eol \n))) (line (comment_line (ws     ) (comment # Filename:\tKEYRUPT_UPRUPT_FRESH_START.agc) (eol \n))) line (line    ) (line (blank_line (label eol) (eol \n))) line (line     ) (line (blank_line (label \n) (eol \n))) line (line  ) (line (blank_line (label line) (eol \n))) line (line   ) (line (blank_line (label comment_line) (eol \n))) line (line    ) (line (blank_line (label comment) (eol \n))) (line (comment_line (ws     ) (comment # Purpose:\tPart of the source code for Solarium build 55. This) (eol \n))) line (line    ) (line (blank_line (label eol) (eol \n))) line (line     ) (line (blank_line (label \n) (eol \n))) line (line  ) (line (blank_line (label line) (eol \n))) line (line   ) (line (blank_line (label comment_line) (eol \n))) line (line    ) (line (blank_line (label comment) (eol \n))) (line (comment_line (ws     ) (comment #\t\tis for the Command Module's (CM) Apollo Guidance) (eol \n))) line (line    ) (line (blank_line (label eol) (eol \n))) line (line     ) (line (blank_line (label \n) (eol \n))) line (line  ) (line (blank_line (label line) (eol \n))) line (line   ) (line (blank_line (label comment_line) (eol \n))) line (line    ) (line (blank_line (label comment) (eol \n))) (line (comment_line (ws     ) (comment #\t\tComputer (AGC), for Apollo 4.) (eol \n))) line (line    ) (line (blank_line (label eol) (eol \n))) line (line     ) (line (blank_line (label \n) (eol \n))) line (line  ) (line (blank_line (label line) (eol \n))) line (line   ) (line (blank_line (label comment_line) (eol \n))) line (line    ) (line (blank_line (label comment) (eol \n))) (line (comment_line (ws     ) (comment # Assembler:\tyaYUL --block1) (eol \n))) line (line    ) (line (blank_line (label eol) (eol \n))) line (line     ) (line (blank_line (label \n) (eol \n))) line (line  ) (line (blank_line (label line) (eol \n))) line (line   ) (line (blank_line (label comment_line) (eol \n))) line (line    ) (line (blank_line (label comment) (eol \n))) (line (comment_line (ws     ) (comment # Contact:\tJim Lawton <jim DOT lawton AT gmail DOT com>) (eol \n))) line (line    ) (line (blank_line (label eol) (eol \n))) line (line     ) (line (blank_line (label \n) (eol \n))) line (line  ) (line (blank_line (label line) (eol \n))) line (line   ) (line (blank_line (label comment_line) (eol \n))) line (line    ) (line (blank_line (label comment) (eol \n))) (line (comment_line (ws     ) (comment # Website:\twww.ibiblio.org/apollo/index.html) (eol \n))) line (line    ) (line (blank_line (label eol) (eol \n))) line (line     ) (line (blank_line (label \n) (eol \n))) line (line  ) (line (blank_line (label line) (eol \n))) line (line   ) (line (blank_line (label comment_line) (eol \n))) line (line    ) (line (blank_line (label comment) (eol \n))) (line (comment_line (ws     ) (comment # Page scans:\twww.ibiblio.org/apollo/ScansForConversion/Solarium055/) (eol \n))) line (line    ) (line (blank_line (label eol) (eol \n))) line (line     ) (line (blank_line (label \n) (eol \n))) line (line  ) (line (blank_line (label line) (eol \n))) line (line   ) (line (blank_line (label comment_line) (eol \n))) line (line    ) (line (blank_line (label comment) (eol \n))) (line (comment_line (ws     ) (comment # Mod history:\t2009-09-15 JL\tCreated.) (eol \n))) line (line    ) (line (blank_line (label eol) (eol \n))) line (line     ) (line (blank_line (label \n\n) (eol \n))) line (line  ) (line (blank_line (label line) (eol \n))) line (line   ) (line (blank_line (label comment_line) (eol \n))) line (line    ) (line (blank_line (label comment) (eol \n))) (line (comment_line (ws     ) (comment ## Page 477) (eol \n))) line (line    ) (line (blank_line (label eol) (eol \n))) line (line     ) (line (blank_line (label \n\n) (eol \n))) line (line  ) (line (blank_line (label line) (eol \n))) line (line   ) (line (blank_line (label instruction_line) (eol \n))) line (line    ) (line (blank_line (label ws) (eol \n))) line (line     ) (line (blank_line (label \t\t) (eol \n))) line (line    ) (line (blank_line (label opcodes) (eol \n))) line (line     ) (line (blank_line (label opcode) (eol \n))) line (line      ) (line (blank_line (label pseudo_opcode) (eol \n))) (line (instruction_line (ws       ) (opcodes (opcode (pseudo_opcode BANK))) argument (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 4))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable KEYRUPT1))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (standard_opcode MASK)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable LOW5))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # C(IN0) IN A)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable RUPTREG4))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable LODSAMPT))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # TIME IS SNATCHED IN RUPT FOR NOUN 65)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CAF)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable PRIO33))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable NOVAC))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable CHARIN))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable NOKEYBUF))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (standard_opcode XCH)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable RUPTREG4))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode INDEX)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable LOCCTR))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable MPAC))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # LEAVE 5 BIT KEY CODE IN MPAC FOR CHARIN)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode RESUME)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment ## Page 478)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable UPRUPTB))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (standard_opcode TS)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable BANKRUPT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable READTIME))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) argument (eol        \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable +1))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # TIME IS SNATCHED IN RUPT FOR NOUN 65)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CAF)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable ZERO))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode XCH)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable UPLINK))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # ZERO UPLINK)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable KEYTEMP1))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CCS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable DSPTAB))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) argument (eol        \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable +7))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # TURN ON UPACT LIGHT)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable +2))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # UPACT = BIT 11 OF DSPTAB +7)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CAF)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable B12-1))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # SAFETY PLAY)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode AD)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable ONE))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable KEYTEMP2))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # MAG OF DSPTAB +7 INTO KEYTEMP2)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode MASK)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable BIT11))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CCS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable register_))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (register_ A)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable UPRPT1))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # BIT 11 ALREADY DONE)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode XCH)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable KEYTEMP2))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # BIT 11 = 0)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode AD)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable BIT11))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable register_))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (register_ A)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # STORE NEGATIVELY)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode XCH)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable DSPTAB))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) argument (eol        \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable +7))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CCS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable register_))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (register_ A)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable INCNOUTU))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # PREVIOUS CONTENTS WAS +)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode NOOP)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # SAFETY PLAY)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable UPRPT1))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (standard_opcode CAF)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable LOW5))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # TEST FOR TRIPLE CHAR REDUNDANCY)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode MASK)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable KEYTEMP1))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # LOW5 OF WORD)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode XCH)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable KEYTEMP1))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # LOW5 INTO KEYTEMP1)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode XCH)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable register_))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (register_ SR)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # WHOLE WORD INTO SR)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable KEYTEMP2))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # ORIGINAL SR INTO KEYTEMP2)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable SRGHT5))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode MASK)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable LOW5))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # MID 5)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode AD)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable HI10))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable UPTEST))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable SRGHT5))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode MASK)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable LOW5))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # HIGH 5)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode COM)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable UPTEST))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable UPOK))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable RESTORSR))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # CODE IS GOOD)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable ELRCODE))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # IF CODE = ERROR LIGHT RESET, PUT +0)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode AD)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable KEYTEMP1))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # INTO UPLOCK (BIT2 OF STATE))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CCS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable register_))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (register_ A)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # IF CODE NOT= ELR, PASS CODE ONLY IF)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable TSTUPLOK))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # UPLOCK=0 (BIT 2 OF STATE))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ELRCODE))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 22))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable TSTUPLOK))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable BIT2))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # 0 INTO UPLOCK (BIT 2 OF STATE))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode MASK)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable UPLOCK))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable UPLOCK))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable ACCEPTUP))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable TSTUPLOK))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (standard_opcode CAF)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable BIT2))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode MASK)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable UPLOCK))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CCS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable register_))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (register_ A)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode RESUME)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # UPLOCK = 1 (BIT2 OF STATE))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ACCEPTUP))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (standard_opcode XCH)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable KEYTEMP1))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # UPLOCK = 0 (BIT2 OF STATE))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable KEYRUPT1))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) argument (eol        \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable +1))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment ## Page 479)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable TMFAIL2))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable RESTORSR))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # CODE IS BAD)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable BIT2))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # LOCK OUT FURTHER UPLINK ACTIVITY (BY)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode MASK)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable UPLOCK))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # PUTTING 1 INTO UPLOCK, BIT 2 OF STATE))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode AD)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable BIT2))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # UNTIL ERROR LIGHT RESET IS SENT UP)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable UPLOCK))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # UPLINK.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable TMFAIL2))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable TMALM))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode RESUME)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable RESTORSR))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (standard_opcode XCH)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable KEYTEMP2))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode DOUBLE)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable register_))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (register_ SR)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable register_))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (register_ Q)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable assignment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable TMALM))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n))) line (line     EQUALS) (line (blank_line (eol \n))) line (line    ) (line (blank_line (label ws) (eol \n))) line (line     ) (line (blank_line (label \t) (eol \n))) line (line    ) (line (blank_line (label expression) (eol \n))) line (line     ) (line (blank_line (label multiplyingExpression) (eol \n))) line (line      ) (line (blank_line (label atom) (eol \n))) line (line       ) (line (blank_line (label variable) (eol \n))) line (line        ) (line (blank_line (label TMFAIL) (eol \n))) line (line    ) (line (blank_line (label ws) (eol \n))) line (line     ) (line (blank_line (label \t\t) (eol \n))) line (line    ) (line (blank_line (label comment) (eol \n))) (line (comment_line (ws     ) (comment # TM FAIL LIGHT ON (IN DOWNRUPT).) (eol \n))) line (line    ) (line (blank_line (label eol) (eol \n))) line (line     ) (line (blank_line (label \n\n) (eol \n))) line (line  ) (line (blank_line (label line) (eol \n))) line (line   ) (line (blank_line (label instruction_line) (eol \n))) line (line    ) (line (blank_line (label label) (eol \n))) line (line     ) (line (blank_line (label SRGHT5) (eol \n))) line (line    ) (line (blank_line (label ws) (eol \n))) line (line     ) (line (blank_line (label \t\t) (eol \n))) line (line    ) (line (blank_line (label opcodes) (eol \n))) line (line     ) (line (blank_line (label opcode) (eol \n))) line (line      ) (line (blank_line (label standard_opcode) (eol \n))) (line (instruction_line (ws       ) (opcodes (opcode (standard_opcode CS))) argument (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable register_))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (register_ SR)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable register_))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (register_ SR)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable register_))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (register_ SR)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable register_))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (register_ SR)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable register_))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (register_ SR)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable register_))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (register_ A)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable register_))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (register_ Q)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # DELIVERS WORD UNCOMPLEMENTED)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable UPTEST))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (standard_opcode AD)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable KEYTEMP1))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CCS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable register_))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (register_ A)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable TMFAIL2))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable CCSHOLE))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable TMFAIL2))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable register_))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (register_ Q)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable HI10))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 77740))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable assignment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable UPBANK))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n))) line (line     EQUALS) (line (blank_line (eol \n))) line (line    ) (line (blank_line (label ws) (eol \n))) line (line     ) (line (blank_line (label \t) (eol \n))) line (line    ) (line (blank_line (label expression) (eol \n))) line (line     ) (line (blank_line (label multiplyingExpression) (eol \n))) line (line      ) (line (blank_line (label atom) (eol \n))) line (line       ) (line (blank_line (label variable) (eol \n))) line (line        ) (line (blank_line (label EXECBANK) (eol \n))) line (line    ) (line (blank_line (label ws) (eol \n))) line (line     ) (line (blank_line (label \t) (eol \n))) line (line    ) (line (blank_line (label comment) (eol \n))) (line (comment_line (ws     ) (comment # IN SAME BANK AS EXEC.) (eol \n))) line (line    ) (line (blank_line (label eol) (eol \n))) line (line     ) (line (blank_line (label \n\n) (eol \n))) line (line  ) (line (blank_line (label line) (eol \n))) line (line   ) (line (blank_line (label instruction_line) (eol \n))) line (line    ) (line (blank_line (label label) (eol \n))) line (line     ) (line (blank_line (label B12-1) (eol \n))) line (line    ) (line (blank_line (label ws) (eol \n))) line (line     ) (line (blank_line (label \t\t) (eol \n))) line (line    ) (line (blank_line (label opcodes) (eol \n))) line (line     ) (line (blank_line (label opcode) (eol \n))) line (line      ) (line (blank_line (label pseudo_opcode) (eol \n))) (line (instruction_line (ws       ) (opcodes (opcode (pseudo_opcode OCT))) argument (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 3777))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable INCNOUTU))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (standard_opcode XCH)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable NOUT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode AD)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable ONE))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable NOUT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode INDEX)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable register_))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (register_ Q)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable UPLAST))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 1))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment # UPACT IS TURNED OFF BY VBRELDSP, ALSO BY ERROR LIGHT RESET.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment ## Page 480)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment # THE RECEPTION OF A BAD CODE BY UPLINK LOCKS OUT FURTHER UPLINK ACTIVITY )) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment # BY PLACING A 1 INTO UPLOCK (BIT2 OF STATE). BIT9 (AND BIT11) OF TMKEYBUF)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment # IS SET TO 1 TO SEND AN INDICATION OF THIS SITUATION DOWN THE DOWNLINK.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment # THE UPLINK INTERLOCK IS ALLOWED WHEN AN ERROR LIGHT RESET CODE IS SENT)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment # UP THE UPLINK, OR WHEN A FRESH START IS PERFORMED.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable EOF))))) (eol \n))) <EOF>)