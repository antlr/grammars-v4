(prog (line (blank_line (label prog) (eol \n))) line (line  ) (line (blank_line (label line) (eol \n))) line (line   ) (line (blank_line (label comment_line) (eol \n))) line (line    ) (line (blank_line (label comment) (eol \n))) (line (comment_line (ws     ) (comment ### FILE="Main.annotation") (eol \n))) line (line    ) (line (blank_line (label eol) (eol \n))) line (line     ) (line (blank_line (label \n) (eol \n))) line (line  ) (line (blank_line (label line) (eol \n))) line (line   ) (line (blank_line (label comment_line) (eol \n))) line (line    ) (line (blank_line (label comment) (eol \n))) (line (comment_line (ws     ) (comment # Copyright:\tPublic domain.) (eol \n))) line (line    ) (line (blank_line (label eol) (eol \n))) line (line     ) (line (blank_line (label \n) (eol \n))) line (line  ) (line (blank_line (label line) (eol \n))) line (line   ) (line (blank_line (label comment_line) (eol \n))) line (line    ) (line (blank_line (label comment) (eol \n))) (line (comment_line (ws     ) (comment # Filename:\tINTERRUPT_TRANSFER_ROUTINES.agc) (eol \n))) line (line    ) (line (blank_line (label eol) (eol \n))) line (line     ) (line (blank_line (label \n) (eol \n))) line (line  ) (line (blank_line (label line) (eol \n))) line (line   ) (line (blank_line (label comment_line) (eol \n))) line (line    ) (line (blank_line (label comment) (eol \n))) (line (comment_line (ws     ) (comment # Purpose:\tPart of the source code for Solarium build 55. This) (eol \n))) line (line    ) (line (blank_line (label eol) (eol \n))) line (line     ) (line (blank_line (label \n) (eol \n))) line (line  ) (line (blank_line (label line) (eol \n))) line (line   ) (line (blank_line (label comment_line) (eol \n))) line (line    ) (line (blank_line (label comment) (eol \n))) (line (comment_line (ws     ) (comment #\t\tis for the Command Module's (CM) Apollo Guidance) (eol \n))) line (line    ) (line (blank_line (label eol) (eol \n))) line (line     ) (line (blank_line (label \n) (eol \n))) line (line  ) (line (blank_line (label line) (eol \n))) line (line   ) (line (blank_line (label comment_line) (eol \n))) line (line    ) (line (blank_line (label comment) (eol \n))) (line (comment_line (ws     ) (comment #\t\tComputer (AGC), for Apollo 4.) (eol \n))) line (line    ) (line (blank_line (label eol) (eol \n))) line (line     ) (line (blank_line (label \n) (eol \n))) line (line  ) (line (blank_line (label line) (eol \n))) line (line   ) (line (blank_line (label comment_line) (eol \n))) line (line    ) (line (blank_line (label comment) (eol \n))) (line (comment_line (ws     ) (comment # Assembler:\tyaYUL --block1) (eol \n))) line (line    ) (line (blank_line (label eol) (eol \n))) line (line     ) (line (blank_line (label \n) (eol \n))) line (line  ) (line (blank_line (label line) (eol \n))) line (line   ) (line (blank_line (label comment_line) (eol \n))) line (line    ) (line (blank_line (label comment) (eol \n))) (line (comment_line (ws     ) (comment # Contact:\tJim Lawton <jim DOT lawton AT gmail DOT com>) (eol \n))) line (line    ) (line (blank_line (label eol) (eol \n))) line (line     ) (line (blank_line (label \n) (eol \n))) line (line  ) (line (blank_line (label line) (eol \n))) line (line   ) (line (blank_line (label comment_line) (eol \n))) line (line    ) (line (blank_line (label comment) (eol \n))) (line (comment_line (ws     ) (comment # Website:\twww.ibiblio.org/apollo/index.html) (eol \n))) line (line    ) (line (blank_line (label eol) (eol \n))) line (line     ) (line (blank_line (label \n) (eol \n))) line (line  ) (line (blank_line (label line) (eol \n))) line (line   ) (line (blank_line (label comment_line) (eol \n))) line (line    ) (line (blank_line (label comment) (eol \n))) (line (comment_line (ws     ) (comment # Page scans:\twww.ibiblio.org/apollo/ScansForConversion/Solarium055/) (eol \n))) line (line    ) (line (blank_line (label eol) (eol \n))) line (line     ) (line (blank_line (label \n) (eol \n))) line (line  ) (line (blank_line (label line) (eol \n))) line (line   ) (line (blank_line (label comment_line) (eol \n))) line (line    ) (line (blank_line (label comment) (eol \n))) (line (comment_line (ws     ) (comment # Mod history:\t2009-09-14 JL\tCreated.) (eol \n))) line (line    ) (line (blank_line (label eol) (eol \n))) line (line     ) (line (blank_line (label \n\n) (eol \n))) line (line  ) (line (blank_line (label line) (eol \n))) line (line   ) (line (blank_line (label comment_line) (eol \n))) line (line    ) (line (blank_line (label comment) (eol \n))) (line (comment_line (ws     ) (comment ## Page 35) (eol \n))) line (line    ) (line (blank_line (label eol) (eol \n))) line (line     ) (line (blank_line (label \n) (eol \n))) line (line  ) (line (blank_line (label line) (eol \n))) line (line   ) (line (blank_line (label instruction_line) (eol \n))) line (line    ) (line (blank_line (label ws) (eol \n))) line (line     ) (line (blank_line (label \t\t) (eol \n))) line (line    ) (line (blank_line (label opcodes) (eol \n))) line (line     ) (line (blank_line (label opcode) (eol \n))) line (line      ) (line (blank_line (label pseudo_opcode) (eol \n))) (line (instruction_line (ws       ) (opcodes (opcode (pseudo_opcode SETLOC))) argument (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 2000))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable register_))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (register_ ARUPT)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode XCH)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable register_))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (register_ Q)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode XCH)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable register_))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (register_ QRUPT)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable T3RUPT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable register_))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (register_ ARUPT)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode XCH)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable register_))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (register_ Q)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode XCH)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable register_))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (register_ QRUPT)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable ERRUPT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable register_))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (register_ ARUPT)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode XCH)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable register_))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (register_ Q)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode XCH)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable register_))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (register_ QRUPT)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable T4RUPT))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # OUTPUT CONTROL.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable register_))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (register_ ARUPT)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode XCH)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable register_))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (register_ Q)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode XCH)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable register_))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (register_ QRUPT)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable KEYRUPT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable register_))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (register_ ARUPT)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode XCH)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable register_))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (register_ Q)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode XCH)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable register_))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (register_ QRUPT)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable UPRUPT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable register_))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (register_ ARUPT)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode XCH)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable register_))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (register_ Q)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode XCH)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable register_))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (register_ QRUPT)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable DOWNRUPT))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # DOWNLINK.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode INHINT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # GOJAM - PARITY ALARM, POWER FAIL, ETC.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode CAF)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable EXECBANK))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TS)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable BANKREG))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable GOPROG))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable comment_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws     ) (comment ## Page 36)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ERRUPT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable ALARM))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # ***NO ERRUPTS IN SYSTEM 5***)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable pseudo_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (pseudo_opcode OCT)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable 01101))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable NBRESUME))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable UPRUPT))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (standard_opcode CAF)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable UPBANK))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable comment))))) (eol \n) (argument (ws      ) (comment # CALL IN BANK WITH UPRUPT PROGRAM.)) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode XCH)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable BANKREG))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t\t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws          ) (expression (multiplyingExpression (atom (variable (standard_opcode TC)))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable KEYRUPTA))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n\n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable line))))) (eol \n) (argument (ws   ) (expression (multiplyingExpression (atom (variable instruction_line))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable label))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable MODEBANK))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable opcodes))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable opcode))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable standard_opcode))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable (standard_opcode CADR)))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable argument))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable ws))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable \t))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable expression))))) (eol \n) (argument (ws      ) (expression (multiplyingExpression (atom (variable multiplyingExpression))))) (eol \n) (argument (ws       ) (expression (multiplyingExpression (atom (variable atom))))) (eol \n) (argument (ws        ) (expression (multiplyingExpression (atom (variable variable))))) (eol \n) (argument (ws         ) (expression (multiplyingExpression (atom (variable KEYRUPTA))))) (eol \n) (argument (ws    ) (expression (multiplyingExpression (atom (variable eol))))) (eol \n) (argument (ws     ) (expression (multiplyingExpression (atom (variable \n))))) (eol \n) (argument (ws  ) (expression (multiplyingExpression (atom (variable EOF))))) (eol \n))) <EOF>)