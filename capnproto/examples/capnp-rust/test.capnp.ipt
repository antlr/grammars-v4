document
 file_identifier
  @0x99d187209d25cee7
  ;
 document_content
  struct_def
   struct
   type_
    TestPrimList
   {
   struct_content
    field_def
     uint8List
     @0
     :
     type_
      List
      inner_type
       (
       type_
        UInt8
       )
     ;
   struct_content
    field_def
     int8List
     @1
     :
     type_
      List
      inner_type
       (
       type_
        Int8
       )
     ;
   struct_content
    field_def
     uint16List
     @2
     :
     type_
      List
      inner_type
       (
       type_
        UInt16
       )
     ;
   struct_content
    field_def
     int16List
     @3
     :
     type_
      List
      inner_type
       (
       type_
        Int16
       )
     ;
   struct_content
    field_def
     uint32List
     @4
     :
     type_
      List
      inner_type
       (
       type_
        UInt32
       )
     ;
   struct_content
    field_def
     int32List
     @5
     :
     type_
      List
      inner_type
       (
       type_
        Int32
       )
     ;
   struct_content
    field_def
     uint64List
     @6
     :
     type_
      List
      inner_type
       (
       type_
        UInt64
       )
     ;
   struct_content
    field_def
     int64List
     @7
     :
     type_
      List
      inner_type
       (
       type_
        Int64
       )
     ;
   struct_content
    field_def
     float32List
     @8
     :
     type_
      List
      inner_type
       (
       type_
        Float32
       )
     ;
   struct_content
    field_def
     boolList
     @9
     :
     type_
      List
      inner_type
       (
       type_
        Bool
       )
     ;
   struct_content
    field_def
     voidList
     @10
     :
     type_
      List
      inner_type
       (
       type_
        Void
       )
     ;
   }
 document_content
  struct_def
   struct
   type_
    TestStructList
   {
   struct_content
    field_def
     structList
     @0
     :
     type_
      List
      inner_type
       (
       type_
        TestPrimList
       )
     ;
   }
 document_content
  struct_def
   struct
   type_
    TestBlob
   {
   struct_content
    field_def
     textField
     @0
     :
     type_
      Text
     ;
   struct_content
    field_def
     dataField
     @1
     :
     type_
      Data
     ;
   }
 document_content
  struct_def
   struct
   type_
    TestBigStruct
   {
   struct_content
    field_def
     voidField
     @0
     :
     type_
      Void
     ;
   struct_content
    field_def
     boolField
     @1
     :
     type_
      Bool
     ;
   struct_content
    field_def
     int8Field
     @2
     :
     type_
      Int8
     ;
   struct_content
    field_def
     int16Field
     @3
     :
     type_
      Int16
     ;
   struct_content
    field_def
     int32Field
     @4
     :
     type_
      Int32
     ;
   struct_content
    field_def
     int64Field
     @5
     :
     type_
      Int64
     ;
   struct_content
    field_def
     uint8Field
     @6
     :
     type_
      UInt8
     ;
   struct_content
    field_def
     uint16Field
     @7
     :
     type_
      UInt16
     ;
   struct_content
    field_def
     uint32Field
     @8
     :
     type_
      UInt32
     ;
   struct_content
    field_def
     uint64Field
     @9
     :
     type_
      UInt64
     ;
   struct_content
    field_def
     float32Field
     @10
     :
     type_
      Float32
     ;
   struct_content
    field_def
     float64Field
     @11
     :
     type_
      Float64
     ;
   struct_content
    field_def
     structField
     @12
     :
     type_
      Inner
     ;
   struct_content
    field_def
     anotherStructField
     @13
     :
     type_
      Inner
     ;
   struct_content
    struct_def
     struct
     type_
      Inner
     {
     struct_content
      field_def
       uint32Field
       @0
       :
       type_
        UInt32
       ;
     struct_content
      field_def
       uint64Field
       @1
       :
       type_
        UInt64
       ;
     struct_content
      field_def
       float32Field
       @2
       :
       type_
        Float32
       ;
     struct_content
      field_def
       float64Field
       @3
       :
       type_
        Float64
       ;
     struct_content
      field_def
       boolFieldA
       @4
       :
       type_
        Bool
       ;
     struct_content
      field_def
       boolFieldB
       @5
       :
       type_
        Bool
       ;
     struct_content
      field_def
       boolFieldC
       @6
       :
       type_
        Bool
       ;
     struct_content
      field_def
       boolFieldD
       @7
       :
       type_
        Bool
       ;
     }
   }
 document_content
  enum_def
   enum
   AnEnum
   {
   enum_content
    foo
    @0
    ;
   enum_content
    bar
    @1
    ;
   enum_content
    baz
    @2
    ;
   enum_content
    qux
    @3
    ;
   }
 document_content
  struct_def
   struct
   type_
    TestComplexList
   {
   struct_content
    field_def
     enumList
     @0
     :
     type_
      List
      inner_type
       (
       type_
        AnEnum
       )
     ;
   struct_content
    field_def
     textList
     @1
     :
     type_
      List
      inner_type
       (
       type_
        Text
       )
     ;
   struct_content
    field_def
     dataList
     @2
     :
     type_
      List
      inner_type
       (
       type_
        Data
       )
     ;
   struct_content
    field_def
     primListList
     @3
     :
     type_
      List
      inner_type
       (
       type_
        List
        inner_type
         (
         type_
          Int32
         )
       )
     ;
   struct_content
    field_def
     primListListList
     @4
     :
     type_
      List
      inner_type
       (
       type_
        List
        inner_type
         (
         type_
          List
          inner_type
           (
           type_
            Int16
           )
         )
       )
     ;
   struct_content
    field_def
     enumListList
     @5
     :
     type_
      List
      inner_type
       (
       type_
        List
        inner_type
         (
         type_
          AnEnum
         )
       )
     ;
   struct_content
    field_def
     textListList
     @6
     :
     type_
      List
      inner_type
       (
       type_
        List
        inner_type
         (
         type_
          Text
         )
       )
     ;
   struct_content
    field_def
     dataListList
     @7
     :
     type_
      List
      inner_type
       (
       type_
        List
        inner_type
         (
         type_
          Data
         )
       )
     ;
   struct_content
    field_def
     structListList
     @8
     :
     type_
      List
      inner_type
       (
       type_
        List
        inner_type
         (
         type_
          TestBigStruct
         )
       )
     ;
   }
 document_content
  enum_def
   enum
   TestEnum
   {
   enum_content
    foo
    @0
    ;
   enum_content
    bar
    @1
    ;
   enum_content
    baz
    @2
    ;
   enum_content
    qux
    @3
    ;
   enum_content
    quux
    @4
    ;
   enum_content
    corge
    @5
    ;
   enum_content
    grault
    @6
    ;
   enum_content
    garply
    @7
    ;
   }
 document_content
  struct_def
   struct
   type_
    TestAllTypes
   {
   struct_content
    field_def
     voidField
     @0
     :
     type_
      Void
     ;
   struct_content
    field_def
     boolField
     @1
     :
     type_
      Bool
     ;
   struct_content
    field_def
     int8Field
     @2
     :
     type_
      Int8
     ;
   struct_content
    field_def
     int16Field
     @3
     :
     type_
      Int16
     ;
   struct_content
    field_def
     int32Field
     @4
     :
     type_
      Int32
     ;
   struct_content
    field_def
     int64Field
     @5
     :
     type_
      Int64
     ;
   struct_content
    field_def
     uInt8Field
     @6
     :
     type_
      UInt8
     ;
   struct_content
    field_def
     uInt16Field
     @7
     :
     type_
      UInt16
     ;
   struct_content
    field_def
     uInt32Field
     @8
     :
     type_
      UInt32
     ;
   struct_content
    field_def
     uInt64Field
     @9
     :
     type_
      UInt64
     ;
   struct_content
    field_def
     float32Field
     @10
     :
     type_
      Float32
     ;
   struct_content
    field_def
     float64Field
     @11
     :
     type_
      Float64
     ;
   struct_content
    field_def
     textField
     @12
     :
     type_
      Text
     ;
   struct_content
    field_def
     dataField
     @13
     :
     type_
      Data
     ;
   struct_content
    field_def
     structField
     @14
     :
     type_
      TestAllTypes
     ;
   struct_content
    field_def
     enumField
     @15
     :
     type_
      TestEnum
     ;
   struct_content
    field_def
     interfaceField
     @16
     :
     type_
      Void
     ;
   struct_content
    field_def
     voidList
     @17
     :
     type_
      List
      inner_type
       (
       type_
        Void
       )
     ;
   struct_content
    field_def
     boolList
     @18
     :
     type_
      List
      inner_type
       (
       type_
        Bool
       )
     ;
   struct_content
    field_def
     int8List
     @19
     :
     type_
      List
      inner_type
       (
       type_
        Int8
       )
     ;
   struct_content
    field_def
     int16List
     @20
     :
     type_
      List
      inner_type
       (
       type_
        Int16
       )
     ;
   struct_content
    field_def
     int32List
     @21
     :
     type_
      List
      inner_type
       (
       type_
        Int32
       )
     ;
   struct_content
    field_def
     int64List
     @22
     :
     type_
      List
      inner_type
       (
       type_
        Int64
       )
     ;
   struct_content
    field_def
     uInt8List
     @23
     :
     type_
      List
      inner_type
       (
       type_
        UInt8
       )
     ;
   struct_content
    field_def
     uInt16List
     @24
     :
     type_
      List
      inner_type
       (
       type_
        UInt16
       )
     ;
   struct_content
    field_def
     uInt32List
     @25
     :
     type_
      List
      inner_type
       (
       type_
        UInt32
       )
     ;
   struct_content
    field_def
     uInt64List
     @26
     :
     type_
      List
      inner_type
       (
       type_
        UInt64
       )
     ;
   struct_content
    field_def
     float32List
     @27
     :
     type_
      List
      inner_type
       (
       type_
        Float32
       )
     ;
   struct_content
    field_def
     float64List
     @28
     :
     type_
      List
      inner_type
       (
       type_
        Float64
       )
     ;
   struct_content
    field_def
     textList
     @29
     :
     type_
      List
      inner_type
       (
       type_
        Text
       )
     ;
   struct_content
    field_def
     dataList
     @30
     :
     type_
      List
      inner_type
       (
       type_
        Data
       )
     ;
   struct_content
    field_def
     structList
     @31
     :
     type_
      List
      inner_type
       (
       type_
        TestAllTypes
       )
     ;
   struct_content
    field_def
     enumList
     @32
     :
     type_
      List
      inner_type
       (
       type_
        TestEnum
       )
     ;
   struct_content
    field_def
     interfaceList
     @33
     :
     type_
      List
      inner_type
       (
       type_
        Void
       )
     ;
   }
 document_content
  struct_def
   struct
   type_
    TestDefaults
   {
   struct_content
    field_def
     voidField
     @0
     :
     type_
      Void
     =
     const_value
      void
     ;
   struct_content
    field_def
     boolField
     @1
     :
     type_
      Bool
     =
     const_value
      true
     ;
   struct_content
    field_def
     int8Field
     @2
     :
     type_
      Int8
     =
     const_value
      -123
     ;
   struct_content
    field_def
     int16Field
     @3
     :
     type_
      Int16
     =
     const_value
      -12345
     ;
   struct_content
    field_def
     int32Field
     @4
     :
     type_
      Int32
     =
     const_value
      -12345678
     ;
   struct_content
    field_def
     int64Field
     @5
     :
     type_
      Int64
     =
     const_value
      -123456789012345
     ;
   struct_content
    field_def
     uint8Field
     @6
     :
     type_
      UInt8
     =
     const_value
      234
     ;
   struct_content
    field_def
     uint16Field
     @7
     :
     type_
      UInt16
     =
     const_value
      45678
     ;
   struct_content
    field_def
     uint32Field
     @8
     :
     type_
      UInt32
     =
     const_value
      3456789012
     ;
   struct_content
    field_def
     uint64Field
     @9
     :
     type_
      UInt64
     =
     const_value
      12345678901234567890
     ;
   struct_content
    field_def
     float32Field
     @10
     :
     type_
      Float32
     =
     const_value
      1234.5
     ;
   struct_content
    field_def
     float64Field
     @11
     :
     type_
      Float64
     =
     const_value
      -123e45
     ;
   struct_content
    field_def
     textField
     @12
     :
     type_
      Text
     =
     const_value
      "foo"
     ;
   struct_content
    field_def
     dataField
     @13
     :
     type_
      Data
     =
     const_value
      literal_bytes
       0x
       "62 61 72"
     ;
   struct_content
    field_def
     structField
     @14
     :
     type_
      TestAllTypes
     =
     const_value
      literal_union
       (
       voidField
       =
       union_mapping
        const_value
         void
       ,
       boolField
       =
       union_mapping
        const_value
         true
       ,
       int8Field
       =
       union_mapping
        const_value
         -12
       ,
       int16Field
       =
       union_mapping
        const_value
         3456
       ,
       int32Field
       =
       union_mapping
        const_value
         -78901234
       ,
       int64Field
       =
       union_mapping
        const_value
         56789012345678
       ,
       uInt8Field
       =
       union_mapping
        const_value
         90
       ,
       uInt16Field
       =
       union_mapping
        const_value
         1234
       ,
       uInt32Field
       =
       union_mapping
        const_value
         56789012
       ,
       uInt64Field
       =
       union_mapping
        const_value
         345678901234567890
       ,
       float32Field
       =
       union_mapping
        const_value
         -1.25e-10
       ,
       float64Field
       =
       union_mapping
        const_value
         345
       ,
       textField
       =
       union_mapping
        const_value
         "baz"
       ,
       dataField
       =
       union_mapping
        const_value
         "qux"
       ,
       structField
       =
       union_mapping
        const_value
         literal_union
          (
          textField
          =
          union_mapping
           const_value
            "nested"
          ,
          structField
          =
          union_mapping
           (
           textField
           =
           const_value
            "really nested"
           )
          )
       ,
       enumField
       =
       union_mapping
        const_value
         baz
       ,
       voidList
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           void
          ,
          const_value
           void
          ,
          const_value
           void
          ]
       ,
       boolList
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           false
          ,
          const_value
           true
          ,
          const_value
           false
          ,
          const_value
           true
          ,
          const_value
           true
          ]
       ,
       int8List
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           12
          ,
          const_value
           -34
          ,
          const_value
           -0x80
          ,
          const_value
           0x7f
          ]
       ,
       int16List
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           1234
          ,
          const_value
           -5678
          ,
          const_value
           -0x8000
          ,
          const_value
           0x7fff
          ]
       ,
       int32List
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           12345678
          ,
          const_value
           -90123456
          ,
          const_value
           -0x80000000
          ,
          const_value
           0x7fffffff
          ]
       ,
       int64List
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           123456789012345
          ,
          const_value
           -678901234567890
          ,
          const_value
           -0x8000000000000000
          ,
          const_value
           0x7fffffffffffffff
          ]
       ,
       uInt8List
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           12
          ,
          const_value
           34
          ,
          const_value
           0
          ,
          const_value
           0xff
          ]
       ,
       uInt16List
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           1234
          ,
          const_value
           5678
          ,
          const_value
           0
          ,
          const_value
           0xffff
          ]
       ,
       uInt32List
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           12345678
          ,
          const_value
           90123456
          ,
          const_value
           0
          ,
          const_value
           0xffffffff
          ]
       ,
       uInt64List
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           123456789012345
          ,
          const_value
           678901234567890
          ,
          const_value
           0
          ,
          const_value
           0xffffffffffffffff
          ]
       ,
       float32List
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           0
          ,
          const_value
           1234567
          ,
          const_value
           1e37
          ,
          const_value
           -1e37
          ,
          const_value
           1e-37
          ,
          const_value
           -1e-37
          ]
       ,
       float64List
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           0
          ,
          const_value
           123456789012345
          ,
          const_value
           1e306
          ,
          const_value
           -1e306
          ,
          const_value
           1e-306
          ,
          const_value
           -1e-306
          ]
       ,
       textList
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           "quux"
          ,
          const_value
           "corge"
          ,
          const_value
           "grault"
          ]
       ,
       dataList
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           "garply"
          ,
          const_value
           "waldo"
          ,
          const_value
           "fred"
          ]
       ,
       structList
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           literal_union
            (
            textField
            =
            union_mapping
             const_value
              "x structlist 1"
            )
          ,
          const_value
           literal_union
            (
            textField
            =
            union_mapping
             const_value
              "x structlist 2"
            )
          ,
          const_value
           literal_union
            (
            textField
            =
            union_mapping
             const_value
              "x structlist 3"
            )
          ]
       ,
       enumList
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           qux
          ,
          const_value
           bar
          ,
          const_value
           grault
          ]
       )
     ;
   struct_content
    field_def
     enumField
     @15
     :
     type_
      TestEnum
     =
     const_value
      corge
     ;
   struct_content
    field_def
     interfaceField
     @16
     :
     type_
      Void
     ;
   struct_content
    field_def
     voidList
     @17
     :
     type_
      List
      inner_type
       (
       type_
        Void
       )
     =
     const_value
      literal_list
       [
       const_value
        void
       ,
       const_value
        void
       ,
       const_value
        void
       ,
       const_value
        void
       ,
       const_value
        void
       ,
       const_value
        void
       ]
     ;
   struct_content
    field_def
     boolList
     @18
     :
     type_
      List
      inner_type
       (
       type_
        Bool
       )
     =
     const_value
      literal_list
       [
       const_value
        true
       ,
       const_value
        false
       ,
       const_value
        false
       ,
       const_value
        true
       ]
     ;
   struct_content
    field_def
     int8List
     @19
     :
     type_
      List
      inner_type
       (
       type_
        Int8
       )
     =
     const_value
      literal_list
       [
       const_value
        111
       ,
       const_value
        -111
       ]
     ;
   struct_content
    field_def
     int16List
     @20
     :
     type_
      List
      inner_type
       (
       type_
        Int16
       )
     =
     const_value
      literal_list
       [
       const_value
        11111
       ,
       const_value
        -11111
       ]
     ;
   struct_content
    field_def
     int32List
     @21
     :
     type_
      List
      inner_type
       (
       type_
        Int32
       )
     =
     const_value
      literal_list
       [
       const_value
        111111111
       ,
       const_value
        -111111111
       ]
     ;
   struct_content
    field_def
     int64List
     @22
     :
     type_
      List
      inner_type
       (
       type_
        Int64
       )
     =
     const_value
      literal_list
       [
       const_value
        1111111111111111111
       ,
       const_value
        -1111111111111111111
       ]
     ;
   struct_content
    field_def
     uInt8List
     @23
     :
     type_
      List
      inner_type
       (
       type_
        UInt8
       )
     =
     const_value
      literal_list
       [
       const_value
        111
       ,
       const_value
        222
       ]
     ;
   struct_content
    field_def
     uInt16List
     @24
     :
     type_
      List
      inner_type
       (
       type_
        UInt16
       )
     =
     const_value
      literal_list
       [
       const_value
        33333
       ,
       const_value
        44444
       ]
     ;
   struct_content
    field_def
     uInt32List
     @25
     :
     type_
      List
      inner_type
       (
       type_
        UInt32
       )
     =
     const_value
      literal_list
       [
       const_value
        3333333333
       ]
     ;
   struct_content
    field_def
     uInt64List
     @26
     :
     type_
      List
      inner_type
       (
       type_
        UInt64
       )
     =
     const_value
      literal_list
       [
       const_value
        11111111111111111111
       ]
     ;
   struct_content
    field_def
     float32List
     @27
     :
     type_
      List
      inner_type
       (
       type_
        Float32
       )
     =
     const_value
      literal_list
       [
       const_value
        5555.5
       ,
       const_value
        inf
       ,
       const_value
        -
        inf
       ,
       const_value
        nan
       ]
     ;
   struct_content
    field_def
     float64List
     @28
     :
     type_
      List
      inner_type
       (
       type_
        Float64
       )
     =
     const_value
      literal_list
       [
       const_value
        7777.75
       ,
       const_value
        inf
       ,
       const_value
        -
        inf
       ,
       const_value
        nan
       ]
     ;
   struct_content
    field_def
     textList
     @29
     :
     type_
      List
      inner_type
       (
       type_
        Text
       )
     =
     const_value
      literal_list
       [
       const_value
        "plugh"
       ,
       const_value
        "xyzzy"
       ,
       const_value
        "thud"
       ]
     ;
   struct_content
    field_def
     dataList
     @30
     :
     type_
      List
      inner_type
       (
       type_
        Data
       )
     =
     const_value
      literal_list
       [
       const_value
        "oops"
       ,
       const_value
        "exhausted"
       ,
       const_value
        "rfc3092"
       ]
     ;
   struct_content
    field_def
     structList
     @31
     :
     type_
      List
      inner_type
       (
       type_
        TestAllTypes
       )
     =
     const_value
      literal_list
       [
       const_value
        literal_union
         (
         textField
         =
         union_mapping
          const_value
           "structlist 1"
         )
       ,
       const_value
        literal_union
         (
         textField
         =
         union_mapping
          const_value
           "structlist 2"
         )
       ,
       const_value
        literal_union
         (
         textField
         =
         union_mapping
          const_value
           "structlist 3"
         )
       ]
     ;
   struct_content
    field_def
     enumList
     @32
     :
     type_
      List
      inner_type
       (
       type_
        TestEnum
       )
     =
     const_value
      literal_list
       [
       const_value
        foo
       ,
       const_value
        garply
       ]
     ;
   struct_content
    field_def
     interfaceList
     @33
     :
     type_
      List
      inner_type
       (
       type_
        Void
       )
     ;
   }
 document_content
  struct_def
   struct
   type_
    TestAnyPointer
   {
   struct_content
    field_def
     anyPointerField
     @0
     :
     type_
      AnyPointer
     ;
   }
 document_content
  struct_def
   struct
   type_
    TestUnion
   {
   struct_content
    named_union_def
     union0
     :union
     {
     union_content
      field_def
       u0f0s0
       @0
       :
       type_
        Void
       ;
     union_content
      field_def
       u0f0s1
       @1
       :
       type_
        Bool
       ;
     union_content
      field_def
       u0f0s8
       @2
       :
       type_
        Int8
       ;
     union_content
      field_def
       u0f0s16
       @3
       :
       type_
        Int16
       ;
     union_content
      field_def
       u0f0s32
       @4
       :
       type_
        Int32
       ;
     union_content
      field_def
       u0f0s64
       @5
       :
       type_
        Int64
       ;
     union_content
      field_def
       u0f0sp
       @6
       :
       type_
        Text
       ;
     }
   }
 document_content
  struct_def
   struct
   type_
    TestGroups
   {
   struct_content
    named_union_def
     groups
     :union
     {
     union_content
      group_def
       foo
       :group
       {
       group_content
        field_def
         corge
         @0
         :
         type_
          Int32
         ;
       group_content
        field_def
         grault
         @2
         :
         type_
          Int64
         ;
       group_content
        field_def
         garply
         @8
         :
         type_
          Text
         ;
       }
     union_content
      group_def
       bar
       :group
       {
       group_content
        field_def
         corge
         @3
         :
         type_
          Int32
         ;
       group_content
        field_def
         grault
         @4
         :
         type_
          Text
         ;
       group_content
        field_def
         garply
         @5
         :
         type_
          Int64
         ;
       }
     union_content
      group_def
       baz
       :group
       {
       group_content
        field_def
         corge
         @1
         :
         type_
          Int32
         ;
       group_content
        field_def
         grault
         @6
         :
         type_
          Text
         ;
       group_content
        field_def
         garply
         @7
         :
         type_
          Text
         ;
       group_content
        field_def
         quz
         @9
         :
         type_
          Float64
         ;
       group_content
        field_def
         anEnum
         @10
         :
         type_
          TestEnum
         ;
       }
     }
   }
 document_content
  struct_def
   struct
   type_
    TestLists
   {
   struct_content
    struct_def
     struct
     type_
      Struct0
     {
     struct_content
      field_def
       f
       @0
       :
       type_
        Void
       ;
     }
   struct_content
    struct_def
     struct
     type_
      Struct1
     {
     struct_content
      field_def
       f
       @0
       :
       type_
        Bool
       ;
     }
   struct_content
    struct_def
     struct
     type_
      Struct8
     {
     struct_content
      field_def
       f
       @0
       :
       type_
        UInt8
       ;
     }
   struct_content
    struct_def
     struct
     type_
      Struct16
     {
     struct_content
      field_def
       f
       @0
       :
       type_
        UInt16
       ;
     }
   struct_content
    struct_def
     struct
     type_
      Struct32
     {
     struct_content
      field_def
       f
       @0
       :
       type_
        UInt32
       ;
     }
   struct_content
    struct_def
     struct
     type_
      Struct64
     {
     struct_content
      field_def
       f
       @0
       :
       type_
        UInt64
       ;
     }
   struct_content
    struct_def
     struct
     type_
      StructP
     {
     struct_content
      field_def
       f
       @0
       :
       type_
        Text
       ;
     }
   struct_content
    struct_def
     struct
     type_
      Struct0c
     {
     struct_content
      field_def
       f
       @0
       :
       type_
        Void
       ;
     struct_content
      field_def
       pad
       @1
       :
       type_
        Text
       ;
     }
   struct_content
    struct_def
     struct
     type_
      Struct1c
     {
     struct_content
      field_def
       f
       @0
       :
       type_
        Bool
       ;
     struct_content
      field_def
       pad
       @1
       :
       type_
        Text
       ;
     }
   struct_content
    struct_def
     struct
     type_
      Struct8c
     {
     struct_content
      field_def
       f
       @0
       :
       type_
        UInt8
       ;
     struct_content
      field_def
       pad
       @1
       :
       type_
        Text
       ;
     }
   struct_content
    struct_def
     struct
     type_
      Struct16c
     {
     struct_content
      field_def
       f
       @0
       :
       type_
        UInt16
       ;
     struct_content
      field_def
       pad
       @1
       :
       type_
        Text
       ;
     }
   struct_content
    struct_def
     struct
     type_
      Struct32c
     {
     struct_content
      field_def
       f
       @0
       :
       type_
        UInt32
       ;
     struct_content
      field_def
       pad
       @1
       :
       type_
        Text
       ;
     }
   struct_content
    struct_def
     struct
     type_
      Struct64c
     {
     struct_content
      field_def
       f
       @0
       :
       type_
        UInt64
       ;
     struct_content
      field_def
       pad
       @1
       :
       type_
        Text
       ;
     }
   struct_content
    struct_def
     struct
     type_
      StructPc
     {
     struct_content
      field_def
       f
       @0
       :
       type_
        Text
       ;
     struct_content
      field_def
       pad
       @1
       :
       type_
        UInt64
       ;
     }
   struct_content
    field_def
     list0
     @0
     :
     type_
      List
      inner_type
       (
       type_
        Struct0
       )
     ;
   struct_content
    field_def
     list1
     @1
     :
     type_
      List
      inner_type
       (
       type_
        Struct1
       )
     ;
   struct_content
    field_def
     list8
     @2
     :
     type_
      List
      inner_type
       (
       type_
        Struct8
       )
     ;
   struct_content
    field_def
     list16
     @3
     :
     type_
      List
      inner_type
       (
       type_
        Struct16
       )
     ;
   struct_content
    field_def
     list32
     @4
     :
     type_
      List
      inner_type
       (
       type_
        Struct32
       )
     ;
   struct_content
    field_def
     list64
     @5
     :
     type_
      List
      inner_type
       (
       type_
        Struct64
       )
     ;
   struct_content
    field_def
     listP
     @6
     :
     type_
      List
      inner_type
       (
       type_
        StructP
       )
     ;
   struct_content
    field_def
     int32ListList
     @7
     :
     type_
      List
      inner_type
       (
       type_
        List
        inner_type
         (
         type_
          Int32
         )
       )
     ;
   struct_content
    field_def
     textListList
     @8
     :
     type_
      List
      inner_type
       (
       type_
        List
        inner_type
         (
         type_
          Text
         )
       )
     ;
   struct_content
    field_def
     structListList
     @9
     :
     type_
      List
      inner_type
       (
       type_
        List
        inner_type
         (
         type_
          TestAllTypes
         )
       )
     ;
   }
 document_content
  struct_def
   struct
   type_
    TestOldVersion
   {
   struct_content
    field_def
     old1
     @0
     :
     type_
      Int64
     ;
   struct_content
    field_def
     old2
     @1
     :
     type_
      Text
     ;
   struct_content
    field_def
     old3
     @2
     :
     type_
      TestOldVersion
     ;
   }
 document_content
  struct_def
   struct
   type_
    TestNewVersion
   {
   struct_content
    field_def
     old1
     @0
     :
     type_
      Int64
     ;
   struct_content
    field_def
     old2
     @1
     :
     type_
      Text
     ;
   struct_content
    field_def
     old3
     @2
     :
     type_
      TestNewVersion
     ;
   struct_content
    field_def
     new1
     @3
     :
     type_
      Int64
     =
     const_value
      987
     ;
   struct_content
    field_def
     new2
     @4
     :
     type_
      Text
     =
     const_value
      "baz"
     ;
   struct_content
    field_def
     new3
     @5
     :
     type_
      TestDefaults
     ;
   }
 document_content
  struct_def
   struct
   type_
    TestOldUnionVersion
   {
   struct_content
    unnamed_union_def
     union
     {
     union_content
      field_def
       a
       @0
       :
       type_
        Void
       ;
     union_content
      field_def
       b
       @1
       :
       type_
        UInt64
       ;
     }
   }
 document_content
  struct_def
   struct
   type_
    TestNewUnionVersion
   {
   struct_content
    unnamed_union_def
     union
     {
     union_content
      named_union_def
       a
       :union
       {
       union_content
        field_def
         a0
         @0
         :
         type_
          Void
         ;
       union_content
        field_def
         a1
         @2
         :
         type_
          UInt64
         ;
       }
     union_content
      field_def
       b
       @1
       :
       type_
        UInt64
       ;
     }
   }
 document_content
  struct_def
   struct
   type_
    TestGenerics
    inner_type
     (
     type_
      Foo
     ,
     type_
      Bar
     )
   {
   struct_content
    field_def
     foo
     @0
     :
     type_
      Foo
     ;
   struct_content
    field_def
     bar
     @1
     :
     type_
      Bar
     ;
   struct_content
    field_def
     rev
     @2
     :
     type_
      TestGenerics
      inner_type
       (
       type_
        Bar
       ,
       type_
        Foo
       )
     ;
   struct_content
    field_def
     dub
     @3
     :
     type_
      TestGenerics
      inner_type
       (
       type_
        Text
       ,
       type_
        List
        inner_type
         (
         type_
          UInt8
         )
       )
     ;
   struct_content
    struct_def
     struct
     type_
      Inner
     {
     struct_content
      field_def
       foo
       @0
       :
       type_
        Foo
       ;
     struct_content
      field_def
       bar
       @1
       :
       type_
        Bar
       ;
     }
   struct_content
    struct_def
     struct
     type_
      Inner2
      inner_type
       (
       type_
        Baz
       )
     {
     struct_content
      field_def
       bar
       @0
       :
       type_
        Bar
       ;
     struct_content
      field_def
       baz
       @1
       :
       type_
        Baz
       ;
     struct_content
      field_def
       innerBound
       @2
       :
       type_
        Inner
       ;
     struct_content
      field_def
       innerUnbound
       @3
       :
       type_
        TestGenerics
        .
        type_
         Inner
       ;
     struct_content
      struct_def
       struct
       type_
        DeepNest
        inner_type
         (
         type_
          Qux
         )
       {
       struct_content
        field_def
         foo
         @0
         :
         type_
          Foo
         ;
       struct_content
        field_def
         bar
         @1
         :
         type_
          Bar
         ;
       struct_content
        field_def
         baz
         @2
         :
         type_
          Baz
         ;
       struct_content
        field_def
         qux
         @3
         :
         type_
          Qux
         ;
       }
     }
   struct_content
    interface_def
     interface
     type_
      Inter2face
      inner_type
       (
       type_
        Qux
       )
     {
     interface_content
      function_def
       call
       @0
       type_
        Inner2
        inner_type
         (
         type_
          Text
         )
       ->
       function_parameters
        (
        qux
        :
        type_
         Qux
        ,
        gen
        :
        type_
         TestGenerics
         inner_type
          (
          type_
           TestAllTypes
          ,
          type_
           TestAnyPointer
          )
        )
       ;
     interface_content
      function_def
       otherCall
       @1
       type_
        Inner2
        inner_type
         (
         type_
          List
          inner_type
           (
           type_
            Text
           )
         )
       ->
       type_
        Inner2
        inner_type
         (
         type_
          List
          inner_type
           (
           type_
            Int16
           )
         )
       ;
     }
   struct_content
    annotation_def
     annotation
     type_
      ann
     annotation_parameters
      (
      struct
      )
     :
     type_
      Foo
     ;
   struct_content
    inner_using
     using
     AliasFoo
     =
     type_
      Foo
     ;
   struct_content
    inner_using
     using
     AliasInner
     =
     type_
      Inner
     ;
   struct_content
    inner_using
     using
     AliasInner2
     =
     type_
      Inner2
     ;
   struct_content
    inner_using
     using
     AliasInner2Text
     =
     type_
      Inner2
      inner_type
       (
       type_
        Text
       )
     ;
   struct_content
    inner_using
     using
     AliasRev
     =
     type_
      TestGenerics
      inner_type
       (
       type_
        Bar
       ,
       type_
        Foo
       )
     ;
   struct_content
    struct_def
     struct
     type_
      UseAliases
     {
     struct_content
      field_def
       foo
       @0
       :
       type_
        AliasFoo
       ;
     struct_content
      field_def
       inner
       @1
       :
       type_
        AliasInner
       ;
     struct_content
      field_def
       inner2
       @2
       :
       type_
        AliasInner2
       ;
     struct_content
      field_def
       inner2Bind
       @3
       :
       type_
        AliasInner2
        inner_type
         (
         type_
          Text
         )
       ;
     struct_content
      field_def
       inner2Text
       @4
       :
       type_
        AliasInner2Text
       ;
     struct_content
      field_def
       revFoo
       @5
       :
       type_
        AliasRev
        .
        type_
         AliasFoo
       ;
     }
   }
 document_content
  struct_def
   struct
   type_
    TestGenericsWrapper
    inner_type
     (
     type_
      Foo
     ,
     type_
      Bar
     )
   {
   struct_content
    field_def
     value
     @0
     :
     type_
      TestGenerics
      inner_type
       (
       type_
        Foo
       ,
       type_
        Bar
       )
     ;
   }
 document_content
  struct_def
   struct
   type_
    TestGenericsWrapper2
   {
   struct_content
    field_def
     value
     @0
     :
     type_
      TestGenericsWrapper
      inner_type
       (
       type_
        Text
       ,
       type_
        TestAllTypes
       )
     ;
   }
 document_content
  interface_def
   interface
   type_
    TestImplicitMethodParams
   {
   interface_content
    function_def
     call
     @0
     generic_type_parameters
      [
      T
      ,
      U
      ]
     function_parameters
      (
      foo
      :
      type_
       T
      ,
      bar
      :
      type_
       U
      )
     ->
     type_
      TestGenerics
      inner_type
       (
       type_
        T
       ,
       type_
        U
       )
     ;
   }
 document_content
  interface_def
   interface
   type_
    TestImplicitMethodParamsInGeneric
    inner_type
     (
     type_
      V
     )
   {
   interface_content
    function_def
     call
     @0
     generic_type_parameters
      [
      T
      ,
      U
      ]
     function_parameters
      (
      foo
      :
      type_
       T
      ,
      bar
      :
      type_
       U
      )
     ->
     type_
      TestGenerics
      inner_type
       (
       type_
        T
       ,
       type_
        U
       )
     ;
   interface_content
    function_def
     call1
     @1
     generic_type_parameters
      [
      T
      ,
      U
      ]
     type_
      TestGenerics
      inner_type
       (
       type_
        T
       ,
       type_
        U
       )
     ->
     function_parameters
      (
      foo
      :
      type_
       T
      ,
      bar
      :
      type_
       U
      )
     ;
   interface_content
    function_def
     call2
     @2
     generic_type_parameters
      [
      T
      ,
      U
      ]
     type_
      TestGenerics
      inner_type
       (
       type_
        T
       ,
       type_
        U
       )
     ->
     type_
      TestAllTypes
     ;
   interface_content
    function_def
     call3
     @3
     generic_type_parameters
      [
      T
      ,
      U
      ]
     type_
      TestAllTypes
     ->
     type_
      TestAllTypes
     ;
   interface_content
    function_def
     call4
     @4
     generic_type_parameters
      [
      T
      ,
      U
      ]
     type_
      TestGenerics
      inner_type
       (
       type_
        V
       ,
       type_
        V
       )
     ->
     type_
      TestGenerics
      inner_type
       (
       type_
        V
       ,
       type_
        AnyPointer
       )
     ;
   }
 document_content
  struct_def
   struct
   type_
    TestGenericsUnion
    inner_type
     (
     type_
      Foo
     ,
     type_
      Bar
     )
   {
   struct_content
    unnamed_union_def
     union
     {
     union_content
      field_def
       foo1
       @0
       :
       type_
        Foo
       ;
     union_content
      field_def
       bar1
       @1
       :
       type_
        Bar
       ;
     union_content
      field_def
       foo2
       @2
       :
       type_
        Foo
       ;
     }
   }
 document_content
  struct_def
   struct
   type_
    TestUseGenerics
   annotation_reference
    $
    type_
     TestGenerics
     inner_type
      (
      type_
       Text
      ,
      type_
       Data
      )
    .ann
    (
    "foo"
    )
   {
   struct_content
    field_def
     basic
     @0
     :
     type_
      TestGenerics
      inner_type
       (
       type_
        TestAllTypes
       ,
       type_
        TestAnyPointer
       )
     ;
   struct_content
    field_def
     inner
     @1
     :
     type_
      TestGenerics
      inner_type
       (
       type_
        TestAllTypes
       ,
       type_
        TestAnyPointer
       )
      .
      type_
       Inner
     ;
   struct_content
    field_def
     inner2
     @2
     :
     type_
      TestGenerics
      inner_type
       (
       type_
        TestAllTypes
       ,
       type_
        TestAnyPointer
       )
      .
      type_
       Inner2
       inner_type
        (
        type_
         Text
        )
     ;
   struct_content
    field_def
     unspecified
     @3
     :
     type_
      TestGenerics
     ;
   struct_content
    field_def
     unspecifiedInner
     @4
     :
     type_
      TestGenerics
      .
      type_
       Inner2
       inner_type
        (
        type_
         Text
        )
     ;
   struct_content
    field_def
     wrapper
     @8
     :
     type_
      TestGenericsWrapper
      inner_type
       (
       type_
        TestAllTypes
       ,
       type_
        TestAnyPointer
       )
     ;
   struct_content
    field_def
     cap
     @18
     :
     type_
      TestGenerics
      inner_type
       (
       type_
        TestInterface
       ,
       type_
        Text
       )
     ;
   struct_content
    field_def
     genericCap
     @19
     :
     type_
      TestGenerics
      inner_type
       (
       type_
        TestAllTypes
       ,
       type_
        List
        inner_type
         (
         type_
          UInt32
         )
       )
      .
      type_
       Interface
       inner_type
        (
        type_
         Data
        )
     ;
   struct_content
    field_def
     default
     @5
     :
     type_
      TestGenerics
      inner_type
       (
       type_
        TestAllTypes
       ,
       type_
        Text
       )
     =
     const_value
      literal_union
       (
       foo
       =
       union_mapping
        (
        int16Field
        =
        const_value
         123
        )
       ,
       rev
       =
       union_mapping
        const_value
         literal_union
          (
          foo
          =
          union_mapping
           const_value
            "text"
          ,
          rev
          =
          union_mapping
           (
           foo
           =
           const_value
            literal_union
             (
             int16Field
             =
             union_mapping
              const_value
               321
             )
           )
          )
       )
     ;
   struct_content
    field_def
     defaultInner
     @6
     :
     type_
      TestGenerics
      inner_type
       (
       type_
        TestAllTypes
       ,
       type_
        Text
       )
      .
      type_
       Inner
     =
     const_value
      literal_union
       (
       foo
       =
       union_mapping
        (
        int16Field
        =
        const_value
         123
        )
       ,
       bar
       =
       union_mapping
        const_value
         "text"
       )
     ;
   struct_content
    field_def
     defaultUser
     @7
     :
     type_
      TestUseGenerics
     =
     const_value
      literal_union
       (
       basic
       =
       union_mapping
        (
        foo
        =
        const_value
         literal_union
          (
          int16Field
          =
          union_mapping
           const_value
            123
          )
        )
       )
     ;
   struct_content
    field_def
     defaultWrapper
     @9
     :
     type_
      TestGenericsWrapper
      inner_type
       (
       type_
        Text
       ,
       type_
        TestAllTypes
       )
     =
     const_value
      literal_union
       (
       value
       =
       union_mapping
        const_value
         literal_union
          (
          foo
          =
          union_mapping
           const_value
            "text"
          ,
          rev
          =
          union_mapping
           (
           foo
           =
           const_value
            literal_union
             (
             int16Field
             =
             union_mapping
              const_value
               321
             )
           )
          )
       )
     ;
   struct_content
    field_def
     defaultWrapper2
     @10
     :
     type_
      TestGenericsWrapper2
     =
     const_value
      literal_union
       (
       value
       =
       union_mapping
        (
        value
        =
        const_value
         literal_union
          (
          foo
          =
          union_mapping
           const_value
            "text"
          ,
          rev
          =
          union_mapping
           (
           foo
           =
           const_value
            literal_union
             (
             int16Field
             =
             union_mapping
              const_value
               321
             )
           )
          )
        )
       )
     ;
   struct_content
    field_def
     aliasFoo
     @11
     :
     type_
      TestGenerics
      inner_type
       (
       type_
        TestAllTypes
       ,
       type_
        TestAnyPointer
       )
      .
      type_
       AliasFoo
     =
     const_value
      literal_union
       (
       int16Field
       =
       union_mapping
        const_value
         123
       )
     ;
   struct_content
    field_def
     aliasInner
     @12
     :
     type_
      TestGenerics
      inner_type
       (
       type_
        TestAllTypes
       ,
       type_
        TestAnyPointer
       )
      .
      type_
       AliasInner
     =
     const_value
      literal_union
       (
       foo
       =
       union_mapping
        (
        int16Field
        =
        const_value
         123
        )
       )
     ;
   struct_content
    field_def
     aliasInner2
     @13
     :
     type_
      TestGenerics
      inner_type
       (
       type_
        TestAllTypes
       ,
       type_
        TestAnyPointer
       )
      .
      type_
       AliasInner2
     =
     const_value
      literal_union
       (
       innerBound
       =
       union_mapping
        (
        foo
        =
        const_value
         literal_union
          (
          int16Field
          =
          union_mapping
           const_value
            123
          )
        )
       )
     ;
   struct_content
    field_def
     aliasInner2Bind
     @14
     :
     type_
      TestGenerics
      inner_type
       (
       type_
        TestAllTypes
       ,
       type_
        TestAnyPointer
       )
      .
      type_
       AliasInner2
       inner_type
        (
        type_
         List
         inner_type
          (
          type_
           UInt32
          )
        )
     =
     const_value
      literal_union
       (
       baz
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           12
          ,
          const_value
           34
          ]
       ,
       innerBound
       =
       union_mapping
        (
        foo
        =
        const_value
         literal_union
          (
          int16Field
          =
          union_mapping
           const_value
            123
          )
        )
       )
     ;
   struct_content
    field_def
     aliasInner2Text
     @15
     :
     type_
      TestGenerics
      inner_type
       (
       type_
        TestAllTypes
       ,
       type_
        TestAnyPointer
       )
      .
      type_
       AliasInner2Text
     =
     const_value
      literal_union
       (
       baz
       =
       union_mapping
        const_value
         "text"
       ,
       innerBound
       =
       union_mapping
        (
        foo
        =
        const_value
         literal_union
          (
          int16Field
          =
          union_mapping
           const_value
            123
          )
        )
       )
     ;
   struct_content
    field_def
     aliasRev
     @16
     :
     type_
      TestGenerics
      inner_type
       (
       type_
        TestAnyPointer
       ,
       type_
        Text
       )
      .
      type_
       AliasRev
       .
       type_
        AliasFoo
     =
     const_value
      "text"
     ;
   struct_content
    field_def
     useAliases
     @17
     :
     type_
      TestGenerics
      inner_type
       (
       type_
        TestAllTypes
       ,
       type_
        List
        inner_type
         (
         type_
          UInt32
         )
       )
      .
      type_
       UseAliases
     =
     const_value
      literal_union
       (
       foo
       =
       union_mapping
        (
        int16Field
        =
        const_value
         123
        )
       ,
       inner
       =
       union_mapping
        (
        foo
        =
        const_value
         literal_union
          (
          int16Field
          =
          union_mapping
           const_value
            123
          )
        )
       ,
       inner2
       =
       union_mapping
        (
        innerBound
        =
        const_value
         literal_union
          (
          foo
          =
          union_mapping
           (
           int16Field
           =
           const_value
            123
           )
          )
        )
       ,
       inner2Bind
       =
       union_mapping
        const_value
         literal_union
          (
          baz
          =
          union_mapping
           const_value
            "text"
          ,
          innerBound
          =
          union_mapping
           (
           foo
           =
           const_value
            literal_union
             (
             int16Field
             =
             union_mapping
              const_value
               123
             )
           )
          )
       ,
       inner2Text
       =
       union_mapping
        const_value
         literal_union
          (
          baz
          =
          union_mapping
           const_value
            "text"
          ,
          innerBound
          =
          union_mapping
           (
           foo
           =
           const_value
            literal_union
             (
             int16Field
             =
             union_mapping
              const_value
               123
             )
           )
          )
       )
     ;
   }
 document_content
  struct_def
   struct
   type_
    TestEmptyStruct
   {
   }
 document_content
  struct_def
   struct
   type_
    TestConstants
   {
   struct_content
    const_def
     const
     voidConst
     :
     type_
      Void
     =
     const_value
      void
     ;
   struct_content
    const_def
     const
     boolConst
     :
     type_
      Bool
     =
     const_value
      true
     ;
   struct_content
    const_def
     const
     int8Const
     :
     type_
      Int8
     =
     const_value
      -123
     ;
   struct_content
    const_def
     const
     int16Const
     :
     type_
      Int16
     =
     const_value
      -12345
     ;
   struct_content
    const_def
     const
     int32Const
     :
     type_
      Int32
     =
     const_value
      -12345678
     ;
   struct_content
    const_def
     const
     int64Const
     :
     type_
      Int64
     =
     const_value
      -123456789012345
     ;
   struct_content
    const_def
     const
     uint8Const
     :
     type_
      UInt8
     =
     const_value
      234
     ;
   struct_content
    const_def
     const
     uint16Const
     :
     type_
      UInt16
     =
     const_value
      45678
     ;
   struct_content
    const_def
     const
     uint32Const
     :
     type_
      UInt32
     =
     const_value
      3456789012
     ;
   struct_content
    const_def
     const
     uint64Const
     :
     type_
      UInt64
     =
     const_value
      12345678901234567890
     ;
   struct_content
    const_def
     const
     float32Const
     :
     type_
      Float32
     =
     const_value
      1234.5
     ;
   struct_content
    const_def
     const
     float64Const
     :
     type_
      Float64
     =
     const_value
      -123e45
     ;
   struct_content
    const_def
     const
     textConst
     :
     type_
      Text
     =
     const_value
      "foo"
     ;
   struct_content
    const_def
     const
     dataConst
     :
     type_
      Data
     =
     const_value
      "bar"
     ;
   struct_content
    const_def
     const
     structConst
     :
     type_
      TestAllTypes
     =
     const_value
      literal_union
       (
       voidField
       =
       union_mapping
        const_value
         void
       ,
       boolField
       =
       union_mapping
        const_value
         true
       ,
       int8Field
       =
       union_mapping
        const_value
         -12
       ,
       int16Field
       =
       union_mapping
        const_value
         3456
       ,
       int32Field
       =
       union_mapping
        const_value
         -78901234
       ,
       int64Field
       =
       union_mapping
        const_value
         56789012345678
       ,
       uInt8Field
       =
       union_mapping
        const_value
         90
       ,
       uInt16Field
       =
       union_mapping
        const_value
         1234
       ,
       uInt32Field
       =
       union_mapping
        const_value
         56789012
       ,
       uInt64Field
       =
       union_mapping
        const_value
         345678901234567890
       ,
       float32Field
       =
       union_mapping
        const_value
         -1.25e-10
       ,
       float64Field
       =
       union_mapping
        const_value
         345
       ,
       textField
       =
       union_mapping
        const_value
         "baz"
       ,
       dataField
       =
       union_mapping
        const_value
         "qux"
       ,
       structField
       =
       union_mapping
        const_value
         literal_union
          (
          textField
          =
          union_mapping
           const_value
            "nested"
          ,
          structField
          =
          union_mapping
           (
           textField
           =
           const_value
            "really nested"
           )
          )
       ,
       enumField
       =
       union_mapping
        const_value
         baz
       ,
       voidList
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           void
          ,
          const_value
           void
          ,
          const_value
           void
          ]
       ,
       boolList
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           false
          ,
          const_value
           true
          ,
          const_value
           false
          ,
          const_value
           true
          ,
          const_value
           true
          ]
       ,
       int8List
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           12
          ,
          const_value
           -34
          ,
          const_value
           -0x80
          ,
          const_value
           0x7f
          ]
       ,
       int16List
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           1234
          ,
          const_value
           -5678
          ,
          const_value
           -0x8000
          ,
          const_value
           0x7fff
          ]
       ,
       int32List
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           12345678
          ,
          const_value
           -90123456
          ,
          const_value
           -0x80000000
          ,
          const_value
           0x7fffffff
          ]
       ,
       int64List
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           123456789012345
          ,
          const_value
           -678901234567890
          ,
          const_value
           -0x8000000000000000
          ,
          const_value
           0x7fffffffffffffff
          ]
       ,
       uInt8List
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           12
          ,
          const_value
           34
          ,
          const_value
           0
          ,
          const_value
           0xff
          ]
       ,
       uInt16List
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           1234
          ,
          const_value
           5678
          ,
          const_value
           0
          ,
          const_value
           0xffff
          ]
       ,
       uInt32List
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           12345678
          ,
          const_value
           90123456
          ,
          const_value
           0
          ,
          const_value
           0xffffffff
          ]
       ,
       uInt64List
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           123456789012345
          ,
          const_value
           678901234567890
          ,
          const_value
           0
          ,
          const_value
           0xffffffffffffffff
          ]
       ,
       float32List
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           0
          ,
          const_value
           1234567
          ,
          const_value
           1e37
          ,
          const_value
           -1e37
          ,
          const_value
           1e-37
          ,
          const_value
           -1e-37
          ]
       ,
       float64List
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           0
          ,
          const_value
           123456789012345
          ,
          const_value
           1e306
          ,
          const_value
           -1e306
          ,
          const_value
           1e-306
          ,
          const_value
           -1e-306
          ]
       ,
       textList
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           "quux"
          ,
          const_value
           "corge"
          ,
          const_value
           "grault"
          ]
       ,
       dataList
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           "garply"
          ,
          const_value
           "waldo"
          ,
          const_value
           "fred"
          ]
       ,
       structList
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           literal_union
            (
            textField
            =
            union_mapping
             const_value
              "x structlist 1"
            )
          ,
          const_value
           literal_union
            (
            textField
            =
            union_mapping
             const_value
              "x structlist 2"
            )
          ,
          const_value
           literal_union
            (
            textField
            =
            union_mapping
             const_value
              "x structlist 3"
            )
          ]
       ,
       enumList
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           qux
          ,
          const_value
           bar
          ,
          const_value
           grault
          ]
       )
     ;
   struct_content
    const_def
     const
     enumConst
     :
     type_
      TestEnum
     =
     const_value
      corge
     ;
   struct_content
    const_def
     const
     voidListConst
     :
     type_
      List
      inner_type
       (
       type_
        Void
       )
     =
     const_value
      literal_list
       [
       const_value
        void
       ,
       const_value
        void
       ,
       const_value
        void
       ,
       const_value
        void
       ,
       const_value
        void
       ,
       const_value
        void
       ]
     ;
   struct_content
    const_def
     const
     boolListConst
     :
     type_
      List
      inner_type
       (
       type_
        Bool
       )
     =
     const_value
      literal_list
       [
       const_value
        true
       ,
       const_value
        false
       ,
       const_value
        false
       ,
       const_value
        true
       ]
     ;
   struct_content
    const_def
     const
     int8ListConst
     :
     type_
      List
      inner_type
       (
       type_
        Int8
       )
     =
     const_value
      literal_list
       [
       const_value
        111
       ,
       const_value
        -111
       ]
     ;
   struct_content
    const_def
     const
     int16ListConst
     :
     type_
      List
      inner_type
       (
       type_
        Int16
       )
     =
     const_value
      literal_list
       [
       const_value
        11111
       ,
       const_value
        -11111
       ]
     ;
   struct_content
    const_def
     const
     int32ListConst
     :
     type_
      List
      inner_type
       (
       type_
        Int32
       )
     =
     const_value
      literal_list
       [
       const_value
        111111111
       ,
       const_value
        -111111111
       ]
     ;
   struct_content
    const_def
     const
     int64ListConst
     :
     type_
      List
      inner_type
       (
       type_
        Int64
       )
     =
     const_value
      literal_list
       [
       const_value
        1111111111111111111
       ,
       const_value
        -1111111111111111111
       ]
     ;
   struct_content
    const_def
     const
     uint8ListConst
     :
     type_
      List
      inner_type
       (
       type_
        UInt8
       )
     =
     const_value
      literal_list
       [
       const_value
        111
       ,
       const_value
        222
       ]
     ;
   struct_content
    const_def
     const
     uint16ListConst
     :
     type_
      List
      inner_type
       (
       type_
        UInt16
       )
     =
     const_value
      literal_list
       [
       const_value
        33333
       ,
       const_value
        44444
       ]
     ;
   struct_content
    const_def
     const
     uint32ListConst
     :
     type_
      List
      inner_type
       (
       type_
        UInt32
       )
     =
     const_value
      literal_list
       [
       const_value
        3333333333
       ]
     ;
   struct_content
    const_def
     const
     uint64ListConst
     :
     type_
      List
      inner_type
       (
       type_
        UInt64
       )
     =
     const_value
      literal_list
       [
       const_value
        11111111111111111111
       ]
     ;
   struct_content
    const_def
     const
     float32ListConst
     :
     type_
      List
      inner_type
       (
       type_
        Float32
       )
     =
     const_value
      literal_list
       [
       const_value
        5555.5
       ,
       const_value
        inf
       ,
       const_value
        -
        inf
       ,
       const_value
        nan
       ]
     ;
   struct_content
    const_def
     const
     float64ListConst
     :
     type_
      List
      inner_type
       (
       type_
        Float64
       )
     =
     const_value
      literal_list
       [
       const_value
        7777.75
       ,
       const_value
        inf
       ,
       const_value
        -
        inf
       ,
       const_value
        nan
       ]
     ;
   struct_content
    const_def
     const
     textListConst
     :
     type_
      List
      inner_type
       (
       type_
        Text
       )
     =
     const_value
      literal_list
       [
       const_value
        "plugh"
       ,
       const_value
        "xyzzy"
       ,
       const_value
        "thud"
       ]
     ;
   struct_content
    const_def
     const
     dataListConst
     :
     type_
      List
      inner_type
       (
       type_
        Data
       )
     =
     const_value
      literal_list
       [
       const_value
        "oops"
       ,
       const_value
        "exhausted"
       ,
       const_value
        "rfc3092"
       ]
     ;
   struct_content
    const_def
     const
     structListConst
     :
     type_
      List
      inner_type
       (
       type_
        TestAllTypes
       )
     =
     const_value
      literal_list
       [
       const_value
        literal_union
         (
         textField
         =
         union_mapping
          const_value
           "structlist 1"
         )
       ,
       const_value
        literal_union
         (
         textField
         =
         union_mapping
          const_value
           "structlist 2"
         )
       ,
       const_value
        literal_union
         (
         textField
         =
         union_mapping
          const_value
           "structlist 3"
         )
       ]
     ;
   struct_content
    const_def
     const
     enumListConst
     :
     type_
      List
      inner_type
       (
       type_
        TestEnum
       )
     =
     const_value
      literal_list
       [
       const_value
        foo
       ,
       const_value
        garply
       ]
     ;
   }
 document_content
  const_def
   const
   globalInt
   :
   type_
    UInt32
   =
   const_value
    12345
   ;
 document_content
  interface_def
   interface
   type_
    TestInterface
   {
   interface_content
    function_def
     foo
     @0
     function_parameters
      (
      i
      :
      type_
       UInt32
      ,
      j
      :
      type_
       Bool
      )
     ->
     function_parameters
      (
      x
      :
      type_
       Text
      )
     ;
   interface_content
    function_def
     bar
     @1
     function_parameters
      (
      )
     ->
     function_parameters
      (
      )
     ;
   interface_content
    function_def
     baz
     @2
     function_parameters
      (
      s
      :
      type_
       TestBigStruct
      )
     ;
   interface_content
    function_def
     bazz
     @3
     function_parameters
      (
      s
      :
      type_
       TestBigStruct
      )
     ->
     function_parameters
      (
      r
      :
      type_
       TestBigStruct
      )
     ;
   }
 document_content
  interface_def
   interface
   type_
    TestExtends
   extends
   (
   type_
    TestInterface
   )
   {
   interface_content
    function_def
     qux
     @0
     function_parameters
      (
      )
     ;
   interface_content
    function_def
     corge
     @1
     type_
      TestBigStruct
     ->
     function_parameters
      (
      )
     ;
   interface_content
    function_def
     grault
     @2
     function_parameters
      (
      )
     ->
     type_
      TestBigStruct
     ;
   }
 document_content
  struct_def
   struct
   type_
    TestCapabilityList
   {
   struct_content
    field_def
     foo
     @0
     :
     type_
      List
      inner_type
       (
       type_
        TestInterface
       )
     ;
   }
 document_content
  interface_def
   interface
   type_
    EmptyInterface
   {
   }
 document_content
  struct_def
   struct
   type_
    TestKeywords
   {
   struct_content
    struct_def
     struct
     type_
      As
     {
     }
   struct_content
    struct_def
     struct
     type_
      Box
     {
     }
   struct_content
    struct_def
     struct
     type_
      Break
     {
     }
   struct_content
    struct_def
     struct
     type_
      Continue
     {
     }
   struct_content
    struct_def
     struct
     type_
      Crate
     {
     }
   struct_content
    struct_def
     struct
     type_
      Else
     {
     }
   struct_content
    struct_def
     struct
     type_
      Enum
     {
     }
   struct_content
    struct_def
     struct
     type_
      Extern
     {
     }
   struct_content
    struct_def
     struct
     type_
      Struct
     {
     }
   struct_content
    struct_def
     struct
     type_
      Super
     {
     }
   struct_content
    struct_def
     struct
     type_
      True
     {
     }
   struct_content
    struct_def
     struct
     type_
      Trait
     {
     }
   struct_content
    struct_def
     struct
     type_
      Type
     {
     }
   struct_content
    struct_def
     struct
     type_
      Unsafe
     {
     }
   struct_content
    struct_def
     struct
     type_
      Use
     {
     }
   struct_content
    struct_def
     struct
     type_
      While
     {
     }
   }
 document_content
  struct_def
   struct
   type_
    Issue77
   {
   struct_content
    named_union_def
     data
     :union
     {
     union_content
      field_def
       a
       @0
       :
       type_
        UInt16
       ;
     union_content
      field_def
       b
       @1
       :
       type_
        UInt8
       ;
     }
   struct_content
    named_union_def
     text
     :union
     {
     union_content
      field_def
       c
       @2
       :
       type_
        Bool
       ;
     union_content
      field_def
       d
       @3
       :
       type_
        Int32
       ;
     }
   struct_content
    named_union_def
     layout
     :union
     {
     union_content
      field_def
       e
       @4
       :
       type_
        Void
       ;
     union_content
      field_def
       f
       @5
       :
       type_
        Void
       ;
     }
   struct_content
    named_union_def
     structList
     :union
     {
     union_content
      field_def
       g
       @6
       :
       type_
        Void
       ;
     union_content
      field_def
       h
       @7
       :
       type_
        Void
       ;
     }
   struct_content
    named_union_def
     enumList
     :union
     {
     union_content
      field_def
       i
       @8
       :
       type_
        Void
       ;
     union_content
      field_def
       j
       @9
       :
       type_
        Void
       ;
     }
   struct_content
    named_union_def
     primitiveList
     :union
     {
     union_content
      field_def
       k
       @10
       :
       type_
        Void
       ;
     union_content
      field_def
       l
       @11
       :
       type_
        Void
       ;
     }
   struct_content
    named_union_def
     dataList
     :union
     {
     union_content
      field_def
       m
       @12
       :
       type_
        Void
       ;
     union_content
      field_def
       n
       @13
       :
       type_
        Void
       ;
     }
   struct_content
    named_union_def
     textList
     :union
     {
     union_content
      field_def
       o
       @14
       :
       type_
        Void
       ;
     union_content
      field_def
       p
       @15
       :
       type_
        Void
       ;
     }
   struct_content
    named_union_def
     listList
     :union
     {
     union_content
      field_def
       q
       @16
       :
       type_
        Void
       ;
     union_content
      field_def
       r
       @17
       :
       type_
        Void
       ;
     }
   }
 document_content
  struct_def
   struct
   type_
    GenericOnce
    inner_type
     (
     type_
      Foo
     )
   {
   struct_content
    field_def
     genericField
     @0
     :
     type_
      Foo
     ;
   }
 document_content
  struct_def
   struct
   type_
    BrandOnce
   {
   struct_content
    field_def
     brandedField
     @0
     :
     type_
      GenericOnce
      inner_type
       (
       type_
        TestAllTypes
       )
     ;
   }
 document_content
  struct_def
   struct
   type_
    GenericTwice
    inner_type
     (
     type_
      Foo
     ,
     type_
      Bar
     )
   {
   struct_content
    field_def
     fooField
     @0
     :
     type_
      Foo
     ;
   struct_content
    field_def
     barField
     @1
     :
     type_
      Bar
     ;
   }
 document_content
  struct_def
   struct
   type_
    BrandTwice
   {
   struct_content
    field_def
     bazField
     @0
     :
     type_
      GenericTwice
      inner_type
       (
       type_
        Text
       ,
       type_
        TestBlob
       )
     ;
   }
 document_content
  struct_def
   struct
   type_
    Map
    inner_type
     (
     type_
      Key
     ,
     type_
      Value
     )
   {
   struct_content
    field_def
     entries
     @0
     :
     type_
      List
      inner_type
       (
       type_
        Entry
       )
     ;
   struct_content
    struct_def
     struct
     type_
      Entry
     {
     struct_content
      field_def
       key
       @0
       :
       type_
        Key
       ;
     struct_content
      field_def
       value
       @1
       :
       type_
        Value
       ;
     }
   }
 document_content
  interface_def
   interface
   type_
    GenericBase
    inner_type
     (
     type_
      T
     )
   {
   }
 document_content
  interface_def
   interface
   type_
    GenericExtend
   extends
   (
   type_
    GenericBase
    inner_type
     (
     type_
      Data
     )
   )
   {
   }
 <EOF>
