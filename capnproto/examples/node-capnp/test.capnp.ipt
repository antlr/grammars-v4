document
 file_identifier
  @0xd508eebdc2dc42b8
  ;
 using_import
  using
  Cxx
  =
  import
  "/capnp/c++.capnp"
  ;
 namespace_
  $
  Cxx
  .namespace
  (
  "capnproto_test::capnp::test"
  )
  ;
 document_content
  enum_def
   enum
   TestEnum
   {
   enum_content
    foo
    @0
    ;
   enum_content
    bar
    @1
    ;
   enum_content
    baz
    @2
    ;
   enum_content
    qux
    @3
    ;
   enum_content
    quux
    @4
    ;
   enum_content
    corge
    @5
    ;
   enum_content
    grault
    @6
    ;
   enum_content
    garply
    @7
    ;
   }
 document_content
  struct_def
   struct
   type_
    TestAllTypes
   {
   struct_content
    field_def
     voidField
     @0
     :
     type_
      Void
     ;
   struct_content
    field_def
     boolField
     @1
     :
     type_
      Bool
     ;
   struct_content
    field_def
     int8Field
     @2
     :
     type_
      Int8
     ;
   struct_content
    field_def
     int16Field
     @3
     :
     type_
      Int16
     ;
   struct_content
    field_def
     int32Field
     @4
     :
     type_
      Int32
     ;
   struct_content
    field_def
     int64Field
     @5
     :
     type_
      Int64
     ;
   struct_content
    field_def
     uInt8Field
     @6
     :
     type_
      UInt8
     ;
   struct_content
    field_def
     uInt16Field
     @7
     :
     type_
      UInt16
     ;
   struct_content
    field_def
     uInt32Field
     @8
     :
     type_
      UInt32
     ;
   struct_content
    field_def
     uInt64Field
     @9
     :
     type_
      UInt64
     ;
   struct_content
    field_def
     float32Field
     @10
     :
     type_
      Float32
     ;
   struct_content
    field_def
     float64Field
     @11
     :
     type_
      Float64
     ;
   struct_content
    field_def
     textField
     @12
     :
     type_
      Text
     ;
   struct_content
    field_def
     dataField
     @13
     :
     type_
      Data
     ;
   struct_content
    field_def
     structField
     @14
     :
     type_
      TestAllTypes
     ;
   struct_content
    field_def
     enumField
     @15
     :
     type_
      TestEnum
     ;
   struct_content
    field_def
     interfaceField
     @16
     :
     type_
      Void
     ;
   struct_content
    field_def
     voidList
     @17
     :
     type_
      List
      inner_type
       (
       type_
        Void
       )
     ;
   struct_content
    field_def
     boolList
     @18
     :
     type_
      List
      inner_type
       (
       type_
        Bool
       )
     ;
   struct_content
    field_def
     int8List
     @19
     :
     type_
      List
      inner_type
       (
       type_
        Int8
       )
     ;
   struct_content
    field_def
     int16List
     @20
     :
     type_
      List
      inner_type
       (
       type_
        Int16
       )
     ;
   struct_content
    field_def
     int32List
     @21
     :
     type_
      List
      inner_type
       (
       type_
        Int32
       )
     ;
   struct_content
    field_def
     int64List
     @22
     :
     type_
      List
      inner_type
       (
       type_
        Int64
       )
     ;
   struct_content
    field_def
     uInt8List
     @23
     :
     type_
      List
      inner_type
       (
       type_
        UInt8
       )
     ;
   struct_content
    field_def
     uInt16List
     @24
     :
     type_
      List
      inner_type
       (
       type_
        UInt16
       )
     ;
   struct_content
    field_def
     uInt32List
     @25
     :
     type_
      List
      inner_type
       (
       type_
        UInt32
       )
     ;
   struct_content
    field_def
     uInt64List
     @26
     :
     type_
      List
      inner_type
       (
       type_
        UInt64
       )
     ;
   struct_content
    field_def
     float32List
     @27
     :
     type_
      List
      inner_type
       (
       type_
        Float32
       )
     ;
   struct_content
    field_def
     float64List
     @28
     :
     type_
      List
      inner_type
       (
       type_
        Float64
       )
     ;
   struct_content
    field_def
     textList
     @29
     :
     type_
      List
      inner_type
       (
       type_
        Text
       )
     ;
   struct_content
    field_def
     dataList
     @30
     :
     type_
      List
      inner_type
       (
       type_
        Data
       )
     ;
   struct_content
    field_def
     structList
     @31
     :
     type_
      List
      inner_type
       (
       type_
        TestAllTypes
       )
     ;
   struct_content
    field_def
     enumList
     @32
     :
     type_
      List
      inner_type
       (
       type_
        TestEnum
       )
     ;
   struct_content
    field_def
     interfaceList
     @33
     :
     type_
      List
      inner_type
       (
       type_
        Void
       )
     ;
   }
 document_content
  struct_def
   struct
   type_
    TestDefaults
   {
   struct_content
    field_def
     voidField
     @0
     :
     type_
      Void
     =
     const_value
      void
     ;
   struct_content
    field_def
     boolField
     @1
     :
     type_
      Bool
     =
     const_value
      true
     ;
   struct_content
    field_def
     int8Field
     @2
     :
     type_
      Int8
     =
     const_value
      -123
     ;
   struct_content
    field_def
     int16Field
     @3
     :
     type_
      Int16
     =
     const_value
      -12345
     ;
   struct_content
    field_def
     int32Field
     @4
     :
     type_
      Int32
     =
     const_value
      -12345678
     ;
   struct_content
    field_def
     int64Field
     @5
     :
     type_
      Int64
     =
     const_value
      -123456789012345
     ;
   struct_content
    field_def
     uInt8Field
     @6
     :
     type_
      UInt8
     =
     const_value
      234
     ;
   struct_content
    field_def
     uInt16Field
     @7
     :
     type_
      UInt16
     =
     const_value
      45678
     ;
   struct_content
    field_def
     uInt32Field
     @8
     :
     type_
      UInt32
     =
     const_value
      3456789012
     ;
   struct_content
    field_def
     uInt64Field
     @9
     :
     type_
      UInt64
     =
     const_value
      12345678901234567890
     ;
   struct_content
    field_def
     float32Field
     @10
     :
     type_
      Float32
     =
     const_value
      1234.5
     ;
   struct_content
    field_def
     float64Field
     @11
     :
     type_
      Float64
     =
     const_value
      -123e45
     ;
   struct_content
    field_def
     textField
     @12
     :
     type_
      Text
     =
     const_value
      "foo"
     ;
   struct_content
    field_def
     dataField
     @13
     :
     type_
      Data
     =
     const_value
      "bar"
     ;
   struct_content
    field_def
     structField
     @14
     :
     type_
      TestAllTypes
     =
     const_value
      literal_union
       (
       voidField
       =
       union_mapping
        const_value
         void
       ,
       boolField
       =
       union_mapping
        const_value
         true
       ,
       int8Field
       =
       union_mapping
        const_value
         -12
       ,
       int16Field
       =
       union_mapping
        const_value
         3456
       ,
       int32Field
       =
       union_mapping
        const_value
         -78901234
       ,
       int64Field
       =
       union_mapping
        const_value
         56789012345678
       ,
       uInt8Field
       =
       union_mapping
        const_value
         90
       ,
       uInt16Field
       =
       union_mapping
        const_value
         1234
       ,
       uInt32Field
       =
       union_mapping
        const_value
         56789012
       ,
       uInt64Field
       =
       union_mapping
        const_value
         345678901234567890
       ,
       float32Field
       =
       union_mapping
        const_value
         -1.25e-10
       ,
       float64Field
       =
       union_mapping
        const_value
         345
       ,
       textField
       =
       union_mapping
        const_value
         "baz"
       ,
       dataField
       =
       union_mapping
        const_value
         "qux"
       ,
       structField
       =
       union_mapping
        const_value
         literal_union
          (
          textField
          =
          union_mapping
           const_value
            "nested"
          ,
          structField
          =
          union_mapping
           (
           textField
           =
           const_value
            "really nested"
           )
          )
       ,
       enumField
       =
       union_mapping
        const_value
         baz
       ,
       voidList
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           void
          ,
          const_value
           void
          ,
          const_value
           void
          ]
       ,
       boolList
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           false
          ,
          const_value
           true
          ,
          const_value
           false
          ,
          const_value
           true
          ,
          const_value
           true
          ]
       ,
       int8List
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           12
          ,
          const_value
           -34
          ,
          const_value
           -0x80
          ,
          const_value
           0x7f
          ]
       ,
       int16List
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           1234
          ,
          const_value
           -5678
          ,
          const_value
           -0x8000
          ,
          const_value
           0x7fff
          ]
       ,
       int32List
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           12345678
          ,
          const_value
           -90123456
          ,
          const_value
           -0x80000000
          ,
          const_value
           0x7fffffff
          ]
       ,
       int64List
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           123456789012345
          ,
          const_value
           -678901234567890
          ,
          const_value
           -0x8000000000000000
          ,
          const_value
           0x7fffffffffffffff
          ]
       ,
       uInt8List
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           12
          ,
          const_value
           34
          ,
          const_value
           0
          ,
          const_value
           0xff
          ]
       ,
       uInt16List
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           1234
          ,
          const_value
           5678
          ,
          const_value
           0
          ,
          const_value
           0xffff
          ]
       ,
       uInt32List
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           12345678
          ,
          const_value
           90123456
          ,
          const_value
           0
          ,
          const_value
           0xffffffff
          ]
       ,
       uInt64List
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           123456789012345
          ,
          const_value
           678901234567890
          ,
          const_value
           0
          ,
          const_value
           0xffffffffffffffff
          ]
       ,
       float32List
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           0
          ,
          const_value
           1234567
          ,
          const_value
           1e37
          ,
          const_value
           -1e37
          ,
          const_value
           1e-37
          ,
          const_value
           -1e-37
          ]
       ,
       float64List
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           0
          ,
          const_value
           123456789012345
          ,
          const_value
           1e306
          ,
          const_value
           -1e306
          ,
          const_value
           1e-306
          ,
          const_value
           -1e-306
          ]
       ,
       textList
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           "quux"
          ,
          const_value
           "corge"
          ,
          const_value
           "grault"
          ]
       ,
       dataList
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           "garply"
          ,
          const_value
           "waldo"
          ,
          const_value
           "fred"
          ]
       ,
       structList
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           literal_union
            (
            textField
            =
            union_mapping
             const_value
              "x structlist 1"
            )
          ,
          const_value
           literal_union
            (
            textField
            =
            union_mapping
             const_value
              "x structlist 2"
            )
          ,
          const_value
           literal_union
            (
            textField
            =
            union_mapping
             const_value
              "x structlist 3"
            )
          ]
       ,
       enumList
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           qux
          ,
          const_value
           bar
          ,
          const_value
           grault
          ]
       )
     ;
   struct_content
    field_def
     enumField
     @15
     :
     type_
      TestEnum
     =
     const_value
      corge
     ;
   struct_content
    field_def
     interfaceField
     @16
     :
     type_
      Void
     ;
   struct_content
    field_def
     voidList
     @17
     :
     type_
      List
      inner_type
       (
       type_
        Void
       )
     =
     const_value
      literal_list
       [
       const_value
        void
       ,
       const_value
        void
       ,
       const_value
        void
       ,
       const_value
        void
       ,
       const_value
        void
       ,
       const_value
        void
       ]
     ;
   struct_content
    field_def
     boolList
     @18
     :
     type_
      List
      inner_type
       (
       type_
        Bool
       )
     =
     const_value
      literal_list
       [
       const_value
        true
       ,
       const_value
        false
       ,
       const_value
        false
       ,
       const_value
        true
       ]
     ;
   struct_content
    field_def
     int8List
     @19
     :
     type_
      List
      inner_type
       (
       type_
        Int8
       )
     =
     const_value
      literal_list
       [
       const_value
        111
       ,
       const_value
        -111
       ]
     ;
   struct_content
    field_def
     int16List
     @20
     :
     type_
      List
      inner_type
       (
       type_
        Int16
       )
     =
     const_value
      literal_list
       [
       const_value
        11111
       ,
       const_value
        -11111
       ]
     ;
   struct_content
    field_def
     int32List
     @21
     :
     type_
      List
      inner_type
       (
       type_
        Int32
       )
     =
     const_value
      literal_list
       [
       const_value
        111111111
       ,
       const_value
        -111111111
       ]
     ;
   struct_content
    field_def
     int64List
     @22
     :
     type_
      List
      inner_type
       (
       type_
        Int64
       )
     =
     const_value
      literal_list
       [
       const_value
        1111111111111111111
       ,
       const_value
        -1111111111111111111
       ]
     ;
   struct_content
    field_def
     uInt8List
     @23
     :
     type_
      List
      inner_type
       (
       type_
        UInt8
       )
     =
     const_value
      literal_list
       [
       const_value
        111
       ,
       const_value
        222
       ]
     ;
   struct_content
    field_def
     uInt16List
     @24
     :
     type_
      List
      inner_type
       (
       type_
        UInt16
       )
     =
     const_value
      literal_list
       [
       const_value
        33333
       ,
       const_value
        44444
       ]
     ;
   struct_content
    field_def
     uInt32List
     @25
     :
     type_
      List
      inner_type
       (
       type_
        UInt32
       )
     =
     const_value
      literal_list
       [
       const_value
        3333333333
       ]
     ;
   struct_content
    field_def
     uInt64List
     @26
     :
     type_
      List
      inner_type
       (
       type_
        UInt64
       )
     =
     const_value
      literal_list
       [
       const_value
        11111111111111111111
       ]
     ;
   struct_content
    field_def
     float32List
     @27
     :
     type_
      List
      inner_type
       (
       type_
        Float32
       )
     =
     const_value
      literal_list
       [
       const_value
        5555.5
       ,
       const_value
        inf
       ,
       const_value
        -
        inf
       ,
       const_value
        nan
       ]
     ;
   struct_content
    field_def
     float64List
     @28
     :
     type_
      List
      inner_type
       (
       type_
        Float64
       )
     =
     const_value
      literal_list
       [
       const_value
        7777.75
       ,
       const_value
        inf
       ,
       const_value
        -
        inf
       ,
       const_value
        nan
       ]
     ;
   struct_content
    field_def
     textList
     @29
     :
     type_
      List
      inner_type
       (
       type_
        Text
       )
     =
     const_value
      literal_list
       [
       const_value
        "plugh"
       ,
       const_value
        "xyzzy"
       ,
       const_value
        "thud"
       ]
     ;
   struct_content
    field_def
     dataList
     @30
     :
     type_
      List
      inner_type
       (
       type_
        Data
       )
     =
     const_value
      literal_list
       [
       const_value
        "oops"
       ,
       const_value
        "exhausted"
       ,
       const_value
        "rfc3092"
       ]
     ;
   struct_content
    field_def
     structList
     @31
     :
     type_
      List
      inner_type
       (
       type_
        TestAllTypes
       )
     =
     const_value
      literal_list
       [
       const_value
        literal_union
         (
         textField
         =
         union_mapping
          const_value
           "structlist 1"
         )
       ,
       const_value
        literal_union
         (
         textField
         =
         union_mapping
          const_value
           "structlist 2"
         )
       ,
       const_value
        literal_union
         (
         textField
         =
         union_mapping
          const_value
           "structlist 3"
         )
       ]
     ;
   struct_content
    field_def
     enumList
     @32
     :
     type_
      List
      inner_type
       (
       type_
        TestEnum
       )
     =
     const_value
      literal_list
       [
       const_value
        foo
       ,
       const_value
        garply
       ]
     ;
   struct_content
    field_def
     interfaceList
     @33
     :
     type_
      List
      inner_type
       (
       type_
        Void
       )
     ;
   }
 document_content
  struct_def
   struct
   type_
    TestAnyPointer
   {
   struct_content
    field_def
     anyPointerField
     @0
     :
     type_
      AnyPointer
     ;
   }
 document_content
  struct_def
   struct
   type_
    TestOutOfOrder
   {
   struct_content
    field_def
     foo
     @3
     :
     type_
      Text
     ;
   struct_content
    field_def
     bar
     @2
     :
     type_
      Text
     ;
   struct_content
    field_def
     baz
     @8
     :
     type_
      Text
     ;
   struct_content
    field_def
     qux
     @0
     :
     type_
      Text
     ;
   struct_content
    field_def
     quux
     @6
     :
     type_
      Text
     ;
   struct_content
    field_def
     corge
     @4
     :
     type_
      Text
     ;
   struct_content
    field_def
     grault
     @1
     :
     type_
      Text
     ;
   struct_content
    field_def
     garply
     @7
     :
     type_
      Text
     ;
   struct_content
    field_def
     waldo
     @5
     :
     type_
      Text
     ;
   }
 document_content
  struct_def
   struct
   type_
    TestUnion
   {
   struct_content
    named_union_def
     union0
     @0!
     :union
     {
     union_content
      field_def
       u0f0s0
       @4
       :
       type_
        Void
       ;
     union_content
      field_def
       u0f0s1
       @5
       :
       type_
        Bool
       ;
     union_content
      field_def
       u0f0s8
       @6
       :
       type_
        Int8
       ;
     union_content
      field_def
       u0f0s16
       @7
       :
       type_
        Int16
       ;
     union_content
      field_def
       u0f0s32
       @8
       :
       type_
        Int32
       ;
     union_content
      field_def
       u0f0s64
       @9
       :
       type_
        Int64
       ;
     union_content
      field_def
       u0f0sp
       @10
       :
       type_
        Text
       ;
     union_content
      field_def
       u0f1s0
       @11
       :
       type_
        Void
       ;
     union_content
      field_def
       u0f1s1
       @12
       :
       type_
        Bool
       ;
     union_content
      field_def
       u0f1s8
       @13
       :
       type_
        Int8
       ;
     union_content
      field_def
       u0f1s16
       @14
       :
       type_
        Int16
       ;
     union_content
      field_def
       u0f1s32
       @15
       :
       type_
        Int32
       ;
     union_content
      field_def
       u0f1s64
       @16
       :
       type_
        Int64
       ;
     union_content
      field_def
       u0f1sp
       @17
       :
       type_
        Text
       ;
     }
   struct_content
    field_def
     bit0
     @18
     :
     type_
      Bool
     ;
   struct_content
    named_union_def
     union1
     @1!
     :union
     {
     union_content
      field_def
       u1f0s0
       @19
       :
       type_
        Void
       ;
     union_content
      field_def
       u1f0s1
       @20
       :
       type_
        Bool
       ;
     union_content
      field_def
       u1f1s1
       @21
       :
       type_
        Bool
       ;
     union_content
      field_def
       u1f0s8
       @22
       :
       type_
        Int8
       ;
     union_content
      field_def
       u1f1s8
       @23
       :
       type_
        Int8
       ;
     union_content
      field_def
       u1f0s16
       @24
       :
       type_
        Int16
       ;
     union_content
      field_def
       u1f1s16
       @25
       :
       type_
        Int16
       ;
     union_content
      field_def
       u1f0s32
       @26
       :
       type_
        Int32
       ;
     union_content
      field_def
       u1f1s32
       @27
       :
       type_
        Int32
       ;
     union_content
      field_def
       u1f0s64
       @28
       :
       type_
        Int64
       ;
     union_content
      field_def
       u1f1s64
       @29
       :
       type_
        Int64
       ;
     union_content
      field_def
       u1f0sp
       @30
       :
       type_
        Text
       ;
     union_content
      field_def
       u1f1sp
       @31
       :
       type_
        Text
       ;
     union_content
      field_def
       u1f2s0
       @32
       :
       type_
        Void
       ;
     union_content
      field_def
       u1f2s1
       @33
       :
       type_
        Bool
       ;
     union_content
      field_def
       u1f2s8
       @34
       :
       type_
        Int8
       ;
     union_content
      field_def
       u1f2s16
       @35
       :
       type_
        Int16
       ;
     union_content
      field_def
       u1f2s32
       @36
       :
       type_
        Int32
       ;
     union_content
      field_def
       u1f2s64
       @37
       :
       type_
        Int64
       ;
     union_content
      field_def
       u1f2sp
       @38
       :
       type_
        Text
       ;
     }
   struct_content
    field_def
     bit2
     @39
     :
     type_
      Bool
     ;
   struct_content
    field_def
     bit3
     @40
     :
     type_
      Bool
     ;
   struct_content
    field_def
     bit4
     @41
     :
     type_
      Bool
     ;
   struct_content
    field_def
     bit5
     @42
     :
     type_
      Bool
     ;
   struct_content
    field_def
     bit6
     @43
     :
     type_
      Bool
     ;
   struct_content
    field_def
     bit7
     @44
     :
     type_
      Bool
     ;
   struct_content
    named_union_def
     union2
     @2!
     :union
     {
     union_content
      field_def
       u2f0s64
       @54
       :
       type_
        Int64
       ;
     union_content
      field_def
       u2f0s32
       @52
       :
       type_
        Int32
       ;
     union_content
      field_def
       u2f0s16
       @50
       :
       type_
        Int16
       ;
     union_content
      field_def
       u2f0s8
       @47
       :
       type_
        Int8
       ;
     union_content
      field_def
       u2f0s1
       @45
       :
       type_
        Bool
       ;
     }
   struct_content
    named_union_def
     union3
     @3!
     :union
     {
     union_content
      field_def
       u3f0s64
       @55
       :
       type_
        Int64
       ;
     union_content
      field_def
       u3f0s32
       @53
       :
       type_
        Int32
       ;
     union_content
      field_def
       u3f0s16
       @51
       :
       type_
        Int16
       ;
     union_content
      field_def
       u3f0s8
       @48
       :
       type_
        Int8
       ;
     union_content
      field_def
       u3f0s1
       @46
       :
       type_
        Bool
       ;
     }
   struct_content
    field_def
     byte0
     @49
     :
     type_
      UInt8
     ;
   }
 document_content
  struct_def
   struct
   type_
    TestUnnamedUnion
   {
   struct_content
    field_def
     before
     @0
     :
     type_
      Text
     ;
   struct_content
    unnamed_union_def
     union
     {
     union_content
      field_def
       foo
       @1
       :
       type_
        UInt16
       ;
     union_content
      field_def
       bar
       @3
       :
       type_
        UInt32
       ;
     }
   struct_content
    field_def
     middle
     @2
     :
     type_
      UInt16
     ;
   struct_content
    field_def
     after
     @4
     :
     type_
      Text
     ;
   }
 document_content
  struct_def
   struct
   type_
    TestUnionInUnion
   {
   struct_content
    named_union_def
     outer
     :union
     {
     union_content
      named_union_def
       inner
       :union
       {
       union_content
        field_def
         foo
         @0
         :
         type_
          Int32
         ;
       union_content
        field_def
         bar
         @1
         :
         type_
          Int32
         ;
       }
     union_content
      field_def
       baz
       @2
       :
       type_
        Int32
       ;
     }
   }
 document_content
  struct_def
   struct
   type_
    TestGroups
   {
   struct_content
    named_union_def
     groups
     :union
     {
     union_content
      group_def
       foo
       :group
       {
       group_content
        field_def
         corge
         @0
         :
         type_
          Int32
         ;
       group_content
        field_def
         grault
         @2
         :
         type_
          Int64
         ;
       group_content
        field_def
         garply
         @8
         :
         type_
          Text
         ;
       }
     union_content
      group_def
       bar
       :group
       {
       group_content
        field_def
         corge
         @3
         :
         type_
          Int32
         ;
       group_content
        field_def
         grault
         @4
         :
         type_
          Text
         ;
       group_content
        field_def
         garply
         @5
         :
         type_
          Int64
         ;
       }
     union_content
      group_def
       baz
       :group
       {
       group_content
        field_def
         corge
         @1
         :
         type_
          Int32
         ;
       group_content
        field_def
         grault
         @6
         :
         type_
          Text
         ;
       group_content
        field_def
         garply
         @7
         :
         type_
          Text
         ;
       }
     }
   }
 document_content
  struct_def
   struct
   type_
    TestInterleavedGroups
   {
   struct_content
    group_def
     group1
     :group
     {
     group_content
      field_def
       foo
       @0
       :
       type_
        UInt32
       ;
     group_content
      field_def
       bar
       @2
       :
       type_
        UInt64
       ;
     group_content
      unnamed_union_def
       union
       {
       union_content
        field_def
         qux
         @4
         :
         type_
          UInt16
         ;
       union_content
        group_def
         corge
         :group
         {
         group_content
          field_def
           grault
           @6
           :
           type_
            UInt64
           ;
         group_content
          field_def
           garply
           @8
           :
           type_
            UInt16
           ;
         group_content
          field_def
           plugh
           @14
           :
           type_
            Text
           ;
         group_content
          field_def
           xyzzy
           @16
           :
           type_
            Text
           ;
         }
       union_content
        field_def
         fred
         @12
         :
         type_
          Text
         ;
       }
     group_content
      field_def
       waldo
       @10
       :
       type_
        Text
       ;
     }
   struct_content
    group_def
     group2
     :group
     {
     group_content
      field_def
       foo
       @1
       :
       type_
        UInt32
       ;
     group_content
      field_def
       bar
       @3
       :
       type_
        UInt64
       ;
     group_content
      unnamed_union_def
       union
       {
       union_content
        field_def
         qux
         @5
         :
         type_
          UInt16
         ;
       union_content
        group_def
         corge
         :group
         {
         group_content
          field_def
           grault
           @7
           :
           type_
            UInt64
           ;
         group_content
          field_def
           garply
           @9
           :
           type_
            UInt16
           ;
         group_content
          field_def
           plugh
           @15
           :
           type_
            Text
           ;
         group_content
          field_def
           xyzzy
           @17
           :
           type_
            Text
           ;
         }
       union_content
        field_def
         fred
         @13
         :
         type_
          Text
         ;
       }
     group_content
      field_def
       waldo
       @11
       :
       type_
        Text
       ;
     }
   }
 document_content
  struct_def
   struct
   type_
    TestUnionDefaults
   {
   struct_content
    field_def
     s16s8s64s8Set
     @0
     :
     type_
      TestUnion
     =
     const_value
      literal_union
       (
       union0
       =
       union_mapping
        (
        u0f0s16
        =
        const_value
         321
        )
       ,
       union1
       =
       union_mapping
        (
        u1f0s8
        =
        const_value
         123
        )
       ,
       union2
       =
       union_mapping
        (
        u2f0s64
        =
        const_value
         12345678901234567
        )
       ,
       union3
       =
       union_mapping
        (
        u3f0s8
        =
        const_value
         55
        )
       )
     ;
   struct_content
    field_def
     s0sps1s32Set
     @1
     :
     type_
      TestUnion
     =
     const_value
      literal_union
       (
       union0
       =
       union_mapping
        (
        u0f1s0
        =
        const_value
         void
        )
       ,
       union1
       =
       union_mapping
        (
        u1f0sp
        =
        const_value
         "foo"
        )
       ,
       union2
       =
       union_mapping
        (
        u2f0s1
        =
        const_value
         true
        )
       ,
       union3
       =
       union_mapping
        (
        u3f0s32
        =
        const_value
         12345678
        )
       )
     ;
   struct_content
    field_def
     unnamed1
     @2
     :
     type_
      TestUnnamedUnion
     =
     const_value
      literal_union
       (
       foo
       =
       union_mapping
        const_value
         123
       )
     ;
   struct_content
    field_def
     unnamed2
     @3
     :
     type_
      TestUnnamedUnion
     =
     const_value
      literal_union
       (
       bar
       =
       union_mapping
        const_value
         321
       ,
       before
       =
       union_mapping
        const_value
         "foo"
       ,
       after
       =
       union_mapping
        const_value
         "bar"
       )
     ;
   }
 document_content
  struct_def
   struct
   type_
    TestNestedTypes
   {
   struct_content
    enum_def
     enum
     NestedEnum
     {
     enum_content
      foo
      @0
      ;
     enum_content
      bar
      @1
      ;
     }
   struct_content
    struct_def
     struct
     type_
      NestedStruct
     {
     struct_content
      enum_def
       enum
       NestedEnum
       {
       enum_content
        baz
        @0
        ;
       enum_content
        qux
        @1
        ;
       enum_content
        quux
        @2
        ;
       }
     struct_content
      field_def
       outerNestedEnum
       @0
       :
       type_
        TestNestedTypes
        .
        type_
         NestedEnum
       =
       const_value
        bar
       ;
     struct_content
      field_def
       innerNestedEnum
       @1
       :
       type_
        NestedEnum
       =
       const_value
        quux
       ;
     }
   struct_content
    field_def
     nestedStruct
     @0
     :
     type_
      NestedStruct
     ;
   struct_content
    field_def
     outerNestedEnum
     @1
     :
     type_
      NestedEnum
     =
     const_value
      bar
     ;
   struct_content
    field_def
     innerNestedEnum
     @2
     :
     type_
      NestedStruct
      .
      type_
       NestedEnum
     =
     const_value
      quux
     ;
   }
 document_content
  struct_def
   struct
   type_
    TestUsing
   {
   struct_content
    inner_using
     using
     OuterNestedEnum
     =
     type_
      TestNestedTypes
      .
      type_
       NestedEnum
     ;
   struct_content
    inner_using
     using
     TestNestedTypes
     .
     NestedStruct
     .
     NestedEnum
     ;
   struct_content
    field_def
     outerNestedEnum
     @1
     :
     type_
      OuterNestedEnum
     =
     const_value
      bar
     ;
   struct_content
    field_def
     innerNestedEnum
     @0
     :
     type_
      NestedEnum
     =
     const_value
      quux
     ;
   }
 document_content
  struct_def
   struct
   type_
    TestLists
   {
   struct_content
    struct_def
     struct
     type_
      Struct0
     {
     struct_content
      field_def
       f
       @0
       :
       type_
        Void
       ;
     }
   struct_content
    struct_def
     struct
     type_
      Struct1
     {
     struct_content
      field_def
       f
       @0
       :
       type_
        Bool
       ;
     }
   struct_content
    struct_def
     struct
     type_
      Struct8
     {
     struct_content
      field_def
       f
       @0
       :
       type_
        UInt8
       ;
     }
   struct_content
    struct_def
     struct
     type_
      Struct16
     {
     struct_content
      field_def
       f
       @0
       :
       type_
        UInt16
       ;
     }
   struct_content
    struct_def
     struct
     type_
      Struct32
     {
     struct_content
      field_def
       f
       @0
       :
       type_
        UInt32
       ;
     }
   struct_content
    struct_def
     struct
     type_
      Struct64
     {
     struct_content
      field_def
       f
       @0
       :
       type_
        UInt64
       ;
     }
   struct_content
    struct_def
     struct
     type_
      StructP
     {
     struct_content
      field_def
       f
       @0
       :
       type_
        Text
       ;
     }
   struct_content
    struct_def
     struct
     type_
      Struct0c
     {
     struct_content
      field_def
       f
       @0
       :
       type_
        Void
       ;
     struct_content
      field_def
       pad
       @1
       :
       type_
        Text
       ;
     }
   struct_content
    struct_def
     struct
     type_
      Struct1c
     {
     struct_content
      field_def
       f
       @0
       :
       type_
        Bool
       ;
     struct_content
      field_def
       pad
       @1
       :
       type_
        Text
       ;
     }
   struct_content
    struct_def
     struct
     type_
      Struct8c
     {
     struct_content
      field_def
       f
       @0
       :
       type_
        UInt8
       ;
     struct_content
      field_def
       pad
       @1
       :
       type_
        Text
       ;
     }
   struct_content
    struct_def
     struct
     type_
      Struct16c
     {
     struct_content
      field_def
       f
       @0
       :
       type_
        UInt16
       ;
     struct_content
      field_def
       pad
       @1
       :
       type_
        Text
       ;
     }
   struct_content
    struct_def
     struct
     type_
      Struct32c
     {
     struct_content
      field_def
       f
       @0
       :
       type_
        UInt32
       ;
     struct_content
      field_def
       pad
       @1
       :
       type_
        Text
       ;
     }
   struct_content
    struct_def
     struct
     type_
      Struct64c
     {
     struct_content
      field_def
       f
       @0
       :
       type_
        UInt64
       ;
     struct_content
      field_def
       pad
       @1
       :
       type_
        Text
       ;
     }
   struct_content
    struct_def
     struct
     type_
      StructPc
     {
     struct_content
      field_def
       f
       @0
       :
       type_
        Text
       ;
     struct_content
      field_def
       pad
       @1
       :
       type_
        UInt64
       ;
     }
   struct_content
    field_def
     list0
     @0
     :
     type_
      List
      inner_type
       (
       type_
        Struct0
       )
     ;
   struct_content
    field_def
     list1
     @1
     :
     type_
      List
      inner_type
       (
       type_
        Struct1
       )
     ;
   struct_content
    field_def
     list8
     @2
     :
     type_
      List
      inner_type
       (
       type_
        Struct8
       )
     ;
   struct_content
    field_def
     list16
     @3
     :
     type_
      List
      inner_type
       (
       type_
        Struct16
       )
     ;
   struct_content
    field_def
     list32
     @4
     :
     type_
      List
      inner_type
       (
       type_
        Struct32
       )
     ;
   struct_content
    field_def
     list64
     @5
     :
     type_
      List
      inner_type
       (
       type_
        Struct64
       )
     ;
   struct_content
    field_def
     listP
     @6
     :
     type_
      List
      inner_type
       (
       type_
        StructP
       )
     ;
   struct_content
    field_def
     int32ListList
     @7
     :
     type_
      List
      inner_type
       (
       type_
        List
        inner_type
         (
         type_
          Int32
         )
       )
     ;
   struct_content
    field_def
     textListList
     @8
     :
     type_
      List
      inner_type
       (
       type_
        List
        inner_type
         (
         type_
          Text
         )
       )
     ;
   struct_content
    field_def
     structListList
     @9
     :
     type_
      List
      inner_type
       (
       type_
        List
        inner_type
         (
         type_
          TestAllTypes
         )
       )
     ;
   }
 document_content
  struct_def
   struct
   type_
    TestFieldZeroIsBit
   {
   struct_content
    field_def
     bit
     @0
     :
     type_
      Bool
     ;
   struct_content
    field_def
     secondBit
     @1
     :
     type_
      Bool
     =
     const_value
      true
     ;
   struct_content
    field_def
     thirdField
     @2
     :
     type_
      UInt8
     =
     const_value
      123
     ;
   }
 document_content
  struct_def
   struct
   type_
    TestListDefaults
   {
   struct_content
    field_def
     lists
     @0
     :
     type_
      TestLists
     =
     const_value
      literal_union
       (
       list0
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           literal_union
            (
            f
            =
            union_mapping
             const_value
              void
            )
          ,
          const_value
           literal_union
            (
            f
            =
            union_mapping
             const_value
              void
            )
          ]
       ,
       list1
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           literal_union
            (
            f
            =
            union_mapping
             const_value
              true
            )
          ,
          const_value
           literal_union
            (
            f
            =
            union_mapping
             const_value
              false
            )
          ,
          const_value
           literal_union
            (
            f
            =
            union_mapping
             const_value
              true
            )
          ,
          const_value
           literal_union
            (
            f
            =
            union_mapping
             const_value
              true
            )
          ]
       ,
       list8
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           literal_union
            (
            f
            =
            union_mapping
             const_value
              123
            )
          ,
          const_value
           literal_union
            (
            f
            =
            union_mapping
             const_value
              45
            )
          ]
       ,
       list16
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           literal_union
            (
            f
            =
            union_mapping
             const_value
              12345
            )
          ,
          const_value
           literal_union
            (
            f
            =
            union_mapping
             const_value
              6789
            )
          ]
       ,
       list32
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           literal_union
            (
            f
            =
            union_mapping
             const_value
              123456789
            )
          ,
          const_value
           literal_union
            (
            f
            =
            union_mapping
             const_value
              234567890
            )
          ]
       ,
       list64
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           literal_union
            (
            f
            =
            union_mapping
             const_value
              1234567890123456
            )
          ,
          const_value
           literal_union
            (
            f
            =
            union_mapping
             const_value
              2345678901234567
            )
          ]
       ,
       listP
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           literal_union
            (
            f
            =
            union_mapping
             const_value
              "foo"
            )
          ,
          const_value
           literal_union
            (
            f
            =
            union_mapping
             const_value
              "bar"
            )
          ]
       ,
       int32ListList
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           literal_list
            [
            const_value
             1
            ,
            const_value
             2
            ,
            const_value
             3
            ]
          ,
          const_value
           literal_list
            [
            const_value
             4
            ,
            const_value
             5
            ]
          ,
          const_value
           literal_list
            [
            const_value
             12341234
            ]
          ]
       ,
       textListList
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           literal_list
            [
            const_value
             "foo"
            ,
            const_value
             "bar"
            ]
          ,
          const_value
           literal_list
            [
            const_value
             "baz"
            ]
          ,
          const_value
           literal_list
            [
            const_value
             "qux"
            ,
            const_value
             "corge"
            ]
          ]
       ,
       structListList
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           literal_list
            [
            const_value
             literal_union
              (
              int32Field
              =
              union_mapping
               const_value
                123
              )
            ,
            const_value
             literal_union
              (
              int32Field
              =
              union_mapping
               const_value
                456
              )
            ]
          ,
          const_value
           literal_list
            [
            const_value
             literal_union
              (
              int32Field
              =
              union_mapping
               const_value
                789
              )
            ]
          ]
       )
     ;
   }
 document_content
  struct_def
   struct
   type_
    TestLateUnion
   {
   struct_content
    field_def
     foo
     @0
     :
     type_
      Int32
     ;
   struct_content
    field_def
     bar
     @1
     :
     type_
      Text
     ;
   struct_content
    field_def
     baz
     @2
     :
     type_
      Int16
     ;
   struct_content
    named_union_def
     theUnion
     @3!
     :union
     {
     union_content
      field_def
       qux
       @4
       :
       type_
        Text
       ;
     union_content
      field_def
       corge
       @5
       :
       type_
        List
        inner_type
         (
         type_
          Int32
         )
       ;
     union_content
      field_def
       grault
       @6
       :
       type_
        Float32
       ;
     }
   struct_content
    named_union_def
     anotherUnion
     @7!
     :union
     {
     union_content
      field_def
       qux
       @8
       :
       type_
        Text
       ;
     union_content
      field_def
       corge
       @9
       :
       type_
        List
        inner_type
         (
         type_
          Int32
         )
       ;
     union_content
      field_def
       grault
       @10
       :
       type_
        Float32
       ;
     }
   }
 document_content
  struct_def
   struct
   type_
    TestOldVersion
   {
   struct_content
    field_def
     old1
     @0
     :
     type_
      Int64
     ;
   struct_content
    field_def
     old2
     @1
     :
     type_
      Text
     ;
   struct_content
    field_def
     old3
     @2
     :
     type_
      TestOldVersion
     ;
   }
 document_content
  struct_def
   struct
   type_
    TestNewVersion
   {
   struct_content
    field_def
     old1
     @0
     :
     type_
      Int64
     ;
   struct_content
    field_def
     old2
     @1
     :
     type_
      Text
     ;
   struct_content
    field_def
     old3
     @2
     :
     type_
      TestNewVersion
     ;
   struct_content
    field_def
     new1
     @3
     :
     type_
      Int64
     =
     const_value
      987
     ;
   struct_content
    field_def
     new2
     @4
     :
     type_
      Text
     =
     const_value
      "baz"
     ;
   }
 document_content
  struct_def
   struct
   type_
    TestStructUnion
   {
   struct_content
    named_union_def
     un
     @0!
     :union
     {
     union_content
      field_def
       str2uct
       @1
       :
       type_
        SomeStruct
       ;
     union_content
      field_def
       object
       @2
       :
       type_
        TestAnyPointer
       ;
     }
   struct_content
    struct_def
     struct
     type_
      SomeStruct
     {
     struct_content
      field_def
       someText
       @0
       :
       type_
        Text
       ;
     struct_content
      field_def
       moreText
       @1
       :
       type_
        Text
       ;
     }
   }
 document_content
  struct_def
   struct
   type_
    TestPrintInlineStructs
   {
   struct_content
    field_def
     someText
     @0
     :
     type_
      Text
     ;
   struct_content
    field_def
     structList
     @1
     :
     type_
      List
      inner_type
       (
       type_
        InlineStruct
       )
     ;
   struct_content
    struct_def
     struct
     type_
      InlineStruct
     {
     struct_content
      field_def
       int32Field
       @0
       :
       type_
        Int32
       ;
     struct_content
      field_def
       textField
       @1
       :
       type_
        Text
       ;
     }
   }
 document_content
  struct_def
   struct
   type_
    TestEmptyStruct
   {
   }
 document_content
  struct_def
   struct
   type_
    TestConstants
   {
   struct_content
    const_def
     const
     voidConst
     :
     type_
      Void
     =
     const_value
      void
     ;
   struct_content
    const_def
     const
     boolConst
     :
     type_
      Bool
     =
     const_value
      true
     ;
   struct_content
    const_def
     const
     int8Const
     :
     type_
      Int8
     =
     const_value
      -123
     ;
   struct_content
    const_def
     const
     int16Const
     :
     type_
      Int16
     =
     const_value
      -12345
     ;
   struct_content
    const_def
     const
     int32Const
     :
     type_
      Int32
     =
     const_value
      -12345678
     ;
   struct_content
    const_def
     const
     int64Const
     :
     type_
      Int64
     =
     const_value
      -123456789012345
     ;
   struct_content
    const_def
     const
     uint8Const
     :
     type_
      UInt8
     =
     const_value
      234
     ;
   struct_content
    const_def
     const
     uint16Const
     :
     type_
      UInt16
     =
     const_value
      45678
     ;
   struct_content
    const_def
     const
     uint32Const
     :
     type_
      UInt32
     =
     const_value
      3456789012
     ;
   struct_content
    const_def
     const
     uint64Const
     :
     type_
      UInt64
     =
     const_value
      12345678901234567890
     ;
   struct_content
    const_def
     const
     float32Const
     :
     type_
      Float32
     =
     const_value
      1234.5
     ;
   struct_content
    const_def
     const
     float64Const
     :
     type_
      Float64
     =
     const_value
      -123e45
     ;
   struct_content
    const_def
     const
     textConst
     :
     type_
      Text
     =
     const_value
      "foo"
     ;
   struct_content
    const_def
     const
     dataConst
     :
     type_
      Data
     =
     const_value
      "bar"
     ;
   struct_content
    const_def
     const
     structConst
     :
     type_
      TestAllTypes
     =
     const_value
      literal_union
       (
       voidField
       =
       union_mapping
        const_value
         void
       ,
       boolField
       =
       union_mapping
        const_value
         true
       ,
       int8Field
       =
       union_mapping
        const_value
         -12
       ,
       int16Field
       =
       union_mapping
        const_value
         3456
       ,
       int32Field
       =
       union_mapping
        const_value
         -78901234
       ,
       int64Field
       =
       union_mapping
        const_value
         56789012345678
       ,
       uInt8Field
       =
       union_mapping
        const_value
         90
       ,
       uInt16Field
       =
       union_mapping
        const_value
         1234
       ,
       uInt32Field
       =
       union_mapping
        const_value
         56789012
       ,
       uInt64Field
       =
       union_mapping
        const_value
         345678901234567890
       ,
       float32Field
       =
       union_mapping
        const_value
         -1.25e-10
       ,
       float64Field
       =
       union_mapping
        const_value
         345
       ,
       textField
       =
       union_mapping
        const_value
         "baz"
       ,
       dataField
       =
       union_mapping
        const_value
         "qux"
       ,
       structField
       =
       union_mapping
        const_value
         literal_union
          (
          textField
          =
          union_mapping
           const_value
            "nested"
          ,
          structField
          =
          union_mapping
           (
           textField
           =
           const_value
            "really nested"
           )
          )
       ,
       enumField
       =
       union_mapping
        const_value
         baz
       ,
       voidList
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           void
          ,
          const_value
           void
          ,
          const_value
           void
          ]
       ,
       boolList
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           false
          ,
          const_value
           true
          ,
          const_value
           false
          ,
          const_value
           true
          ,
          const_value
           true
          ]
       ,
       int8List
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           12
          ,
          const_value
           -34
          ,
          const_value
           -0x80
          ,
          const_value
           0x7f
          ]
       ,
       int16List
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           1234
          ,
          const_value
           -5678
          ,
          const_value
           -0x8000
          ,
          const_value
           0x7fff
          ]
       ,
       int32List
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           12345678
          ,
          const_value
           -90123456
          ,
          const_value
           -0x80000000
          ,
          const_value
           0x7fffffff
          ]
       ,
       int64List
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           123456789012345
          ,
          const_value
           -678901234567890
          ,
          const_value
           -0x8000000000000000
          ,
          const_value
           0x7fffffffffffffff
          ]
       ,
       uInt8List
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           12
          ,
          const_value
           34
          ,
          const_value
           0
          ,
          const_value
           0xff
          ]
       ,
       uInt16List
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           1234
          ,
          const_value
           5678
          ,
          const_value
           0
          ,
          const_value
           0xffff
          ]
       ,
       uInt32List
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           12345678
          ,
          const_value
           90123456
          ,
          const_value
           0
          ,
          const_value
           0xffffffff
          ]
       ,
       uInt64List
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           123456789012345
          ,
          const_value
           678901234567890
          ,
          const_value
           0
          ,
          const_value
           0xffffffffffffffff
          ]
       ,
       float32List
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           0
          ,
          const_value
           1234567
          ,
          const_value
           1e37
          ,
          const_value
           -1e37
          ,
          const_value
           1e-37
          ,
          const_value
           -1e-37
          ]
       ,
       float64List
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           0
          ,
          const_value
           123456789012345
          ,
          const_value
           1e306
          ,
          const_value
           -1e306
          ,
          const_value
           1e-306
          ,
          const_value
           -1e-306
          ]
       ,
       textList
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           "quux"
          ,
          const_value
           "corge"
          ,
          const_value
           "grault"
          ]
       ,
       dataList
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           "garply"
          ,
          const_value
           "waldo"
          ,
          const_value
           "fred"
          ]
       ,
       structList
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           literal_union
            (
            textField
            =
            union_mapping
             const_value
              "x structlist 1"
            )
          ,
          const_value
           literal_union
            (
            textField
            =
            union_mapping
             const_value
              "x structlist 2"
            )
          ,
          const_value
           literal_union
            (
            textField
            =
            union_mapping
             const_value
              "x structlist 3"
            )
          ]
       ,
       enumList
       =
       union_mapping
        const_value
         literal_list
          [
          const_value
           qux
          ,
          const_value
           bar
          ,
          const_value
           grault
          ]
       )
     ;
   struct_content
    const_def
     const
     enumConst
     :
     type_
      TestEnum
     =
     const_value
      corge
     ;
   struct_content
    const_def
     const
     voidListConst
     :
     type_
      List
      inner_type
       (
       type_
        Void
       )
     =
     const_value
      literal_list
       [
       const_value
        void
       ,
       const_value
        void
       ,
       const_value
        void
       ,
       const_value
        void
       ,
       const_value
        void
       ,
       const_value
        void
       ]
     ;
   struct_content
    const_def
     const
     boolListConst
     :
     type_
      List
      inner_type
       (
       type_
        Bool
       )
     =
     const_value
      literal_list
       [
       const_value
        true
       ,
       const_value
        false
       ,
       const_value
        false
       ,
       const_value
        true
       ]
     ;
   struct_content
    const_def
     const
     int8ListConst
     :
     type_
      List
      inner_type
       (
       type_
        Int8
       )
     =
     const_value
      literal_list
       [
       const_value
        111
       ,
       const_value
        -111
       ]
     ;
   struct_content
    const_def
     const
     int16ListConst
     :
     type_
      List
      inner_type
       (
       type_
        Int16
       )
     =
     const_value
      literal_list
       [
       const_value
        11111
       ,
       const_value
        -11111
       ]
     ;
   struct_content
    const_def
     const
     int32ListConst
     :
     type_
      List
      inner_type
       (
       type_
        Int32
       )
     =
     const_value
      literal_list
       [
       const_value
        111111111
       ,
       const_value
        -111111111
       ]
     ;
   struct_content
    const_def
     const
     int64ListConst
     :
     type_
      List
      inner_type
       (
       type_
        Int64
       )
     =
     const_value
      literal_list
       [
       const_value
        1111111111111111111
       ,
       const_value
        -1111111111111111111
       ]
     ;
   struct_content
    const_def
     const
     uint8ListConst
     :
     type_
      List
      inner_type
       (
       type_
        UInt8
       )
     =
     const_value
      literal_list
       [
       const_value
        111
       ,
       const_value
        222
       ]
     ;
   struct_content
    const_def
     const
     uint16ListConst
     :
     type_
      List
      inner_type
       (
       type_
        UInt16
       )
     =
     const_value
      literal_list
       [
       const_value
        33333
       ,
       const_value
        44444
       ]
     ;
   struct_content
    const_def
     const
     uint32ListConst
     :
     type_
      List
      inner_type
       (
       type_
        UInt32
       )
     =
     const_value
      literal_list
       [
       const_value
        3333333333
       ]
     ;
   struct_content
    const_def
     const
     uint64ListConst
     :
     type_
      List
      inner_type
       (
       type_
        UInt64
       )
     =
     const_value
      literal_list
       [
       const_value
        11111111111111111111
       ]
     ;
   struct_content
    const_def
     const
     float32ListConst
     :
     type_
      List
      inner_type
       (
       type_
        Float32
       )
     =
     const_value
      literal_list
       [
       const_value
        5555.5
       ,
       const_value
        inf
       ,
       const_value
        -
        inf
       ,
       const_value
        nan
       ]
     ;
   struct_content
    const_def
     const
     float64ListConst
     :
     type_
      List
      inner_type
       (
       type_
        Float64
       )
     =
     const_value
      literal_list
       [
       const_value
        7777.75
       ,
       const_value
        inf
       ,
       const_value
        -
        inf
       ,
       const_value
        nan
       ]
     ;
   struct_content
    const_def
     const
     textListConst
     :
     type_
      List
      inner_type
       (
       type_
        Text
       )
     =
     const_value
      literal_list
       [
       const_value
        "plugh"
       ,
       const_value
        "xyzzy"
       ,
       const_value
        "thud"
       ]
     ;
   struct_content
    const_def
     const
     dataListConst
     :
     type_
      List
      inner_type
       (
       type_
        Data
       )
     =
     const_value
      literal_list
       [
       const_value
        "oops"
       ,
       const_value
        "exhausted"
       ,
       const_value
        "rfc3092"
       ]
     ;
   struct_content
    const_def
     const
     structListConst
     :
     type_
      List
      inner_type
       (
       type_
        TestAllTypes
       )
     =
     const_value
      literal_list
       [
       const_value
        literal_union
         (
         textField
         =
         union_mapping
          const_value
           "structlist 1"
         )
       ,
       const_value
        literal_union
         (
         textField
         =
         union_mapping
          const_value
           "structlist 2"
         )
       ,
       const_value
        literal_union
         (
         textField
         =
         union_mapping
          const_value
           "structlist 3"
         )
       ]
     ;
   struct_content
    const_def
     const
     enumListConst
     :
     type_
      List
      inner_type
       (
       type_
        TestEnum
       )
     =
     const_value
      literal_list
       [
       const_value
        foo
       ,
       const_value
        garply
       ]
     ;
   }
 document_content
  const_def
   const
   globalInt
   :
   type_
    UInt32
   =
   const_value
    12345
   ;
 document_content
  const_def
   const
   globalText
   :
   type_
    Text
   =
   const_value
    "foobar"
   ;
 document_content
  const_def
   const
   globalStruct
   :
   type_
    TestAllTypes
   =
   const_value
    literal_union
     (
     int32Field
     =
     union_mapping
      const_value
       54321
     )
   ;
 document_content
  const_def
   const
   globalPrintableStruct
   :
   type_
    TestPrintInlineStructs
   =
   const_value
    literal_union
     (
     someText
     =
     union_mapping
      const_value
       "foo"
     )
   ;
 document_content
  const_def
   const
   derivedConstant
   :
   type_
    TestAllTypes
   =
   const_value
    literal_union
     (
     uInt32Field
     =
     union_mapping
      const_value
       .
       globalInt
     ,
     textField
     =
     union_mapping
      const_value
       TestConstants
       .
       textConst
     ,
     structField
     =
     union_mapping
      const_value
       TestConstants
       .
       structConst
     ,
     int16List
     =
     union_mapping
      const_value
       TestConstants
       .
       int16ListConst
     ,
     structList
     =
     union_mapping
      const_value
       TestConstants
       .
       structListConst
     )
   ;
 document_content
  interface_def
   interface
   type_
    TestInterface
   {
   interface_content
    function_def
     foo
     @0
     function_parameters
      (
      i
      :
      type_
       UInt32
      ,
      j
      :
      type_
       Bool
      )
     ->
     function_parameters
      (
      x
      :
      type_
       Text
      )
     ;
   interface_content
    function_def
     bar
     @1
     function_parameters
      (
      )
     ->
     function_parameters
      (
      )
     ;
   interface_content
    function_def
     baz
     @2
     function_parameters
      (
      s
      :
      type_
       TestAllTypes
      )
     ;
   }
 document_content
  interface_def
   interface
   type_
    TestExtends
   extends
   (
   type_
    TestInterface
   )
   {
   interface_content
    function_def
     qux
     @0
     function_parameters
      (
      )
     ;
   interface_content
    function_def
     corge
     @1
     type_
      TestAllTypes
     ->
     function_parameters
      (
      )
     ;
   interface_content
    function_def
     grault
     @2
     function_parameters
      (
      )
     ->
     type_
      TestAllTypes
     ;
   }
 document_content
  interface_def
   interface
   type_
    TestPipeline
   {
   interface_content
    function_def
     getCap
     @0
     function_parameters
      (
      n
      :
      type_
       UInt32
      ,
      inCap
      :
      type_
       TestInterface
      )
     ->
     function_parameters
      (
      s
      :
      type_
       Text
      ,
      outBox
      :
      type_
       Box
      )
     ;
   interface_content
    function_def
     testPointers
     @1
     function_parameters
      (
      cap
      :
      type_
       TestInterface
      ,
      obj
      :
      type_
       AnyPointer
      ,
      list
      :
      type_
       List
       inner_type
        (
        type_
         TestInterface
        )
      )
     ->
     function_parameters
      (
      )
     ;
   interface_content
    struct_def
     struct
     type_
      Box
     {
     struct_content
      field_def
       cap
       @0
       :
       type_
        TestInterface
       ;
     }
   }
 document_content
  interface_def
   interface
   type_
    TestCallOrder
   {
   interface_content
    function_def
     getCallSequence
     @0
     function_parameters
      (
      expected
      :
      type_
       UInt32
      )
     ->
     function_parameters
      (
      n
      :
      type_
       UInt32
      )
     ;
   }
 document_content
  interface_def
   interface
   type_
    TestTailCallee
   {
   interface_content
    struct_def
     struct
     type_
      TailResult
     {
     struct_content
      field_def
       i
       @0
       :
       type_
        UInt32
       ;
     struct_content
      field_def
       t
       @1
       :
       type_
        Text
       ;
     struct_content
      field_def
       c
       @2
       :
       type_
        TestCallOrder
       ;
     }
   interface_content
    function_def
     foo
     @0
     function_parameters
      (
      i
      :
      type_
       Int32
      ,
      t
      :
      type_
       Text
      )
     ->
     type_
      TailResult
     ;
   }
 document_content
  interface_def
   interface
   type_
    TestTailCaller
   {
   interface_content
    function_def
     foo
     @0
     function_parameters
      (
      i
      :
      type_
       Int32
      ,
      callee
      :
      type_
       TestTailCallee
      )
     ->
     type_
      TestTailCallee
      .
      type_
       TailResult
     ;
   }
 document_content
  interface_def
   interface
   type_
    TestMoreStuff
   extends
   (
   type_
    TestCallOrder
   )
   {
   interface_content
    function_def
     callFoo
     @0
     function_parameters
      (
      cap
      :
      type_
       TestInterface
      )
     ->
     function_parameters
      (
      s
      :
      type_
       Text
      )
     ;
   interface_content
    function_def
     callFooWhenResolved
     @1
     function_parameters
      (
      cap
      :
      type_
       TestInterface
      )
     ->
     function_parameters
      (
      s
      :
      type_
       Text
      )
     ;
   interface_content
    function_def
     neverReturn
     @2
     function_parameters
      (
      cap
      :
      type_
       TestInterface
      )
     ->
     function_parameters
      (
      capCopy
      :
      type_
       TestInterface
      )
     ;
   interface_content
    function_def
     hold
     @3
     function_parameters
      (
      cap
      :
      type_
       TestInterface
      )
     ->
     function_parameters
      (
      )
     ;
   interface_content
    function_def
     callHeld
     @4
     function_parameters
      (
      )
     ->
     function_parameters
      (
      s
      :
      type_
       Text
      )
     ;
   interface_content
    function_def
     getHeld
     @5
     function_parameters
      (
      )
     ->
     function_parameters
      (
      cap
      :
      type_
       TestInterface
      )
     ;
   interface_content
    function_def
     echo
     @6
     function_parameters
      (
      cap
      :
      type_
       TestCallOrder
      )
     ->
     function_parameters
      (
      cap
      :
      type_
       TestCallOrder
      )
     ;
   interface_content
    function_def
     expectCancel
     @7
     function_parameters
      (
      cap
      :
      type_
       TestInterface
      )
     ->
     function_parameters
      (
      )
     ;
   interface_content
    function_def
     methodWithDefaults
     @8
     function_parameters
      (
      a
      :
      type_
       Text
      ,
      b
      :
      type_
       UInt32
      =
      const_value
       123
      ,
      c
      :
      type_
       Text
      =
      const_value
       "foo"
      )
     ->
     function_parameters
      (
      d
      :
      type_
       Text
      ,
      e
      :
      type_
       Text
      =
      const_value
       "bar"
      )
     ;
   }
 document_content
  interface_def
   interface
   type_
    TestKeywordMethods
   {
   interface_content
    function_def
     delete
     @0
     function_parameters
      (
      )
     ;
   interface_content
    function_def
     class
     @1
     function_parameters
      (
      )
     ;
   interface_content
    function_def
     vo2id
     @2
     function_parameters
      (
      )
     ;
   interface_content
    function_def
     return
     @3
     function_parameters
      (
      )
     ;
   }
 document_content
  struct_def
   struct
   type_
    TestSturdyRefHostId
   {
   struct_content
    field_def
     host
     @0
     :
     type_
      Text
     ;
   }
 document_content
  struct_def
   struct
   type_
    TestSturdyRefObjectId
   {
   struct_content
    field_def
     tag
     @0
     :
     type_
      Tag
     ;
   struct_content
    enum_def
     enum
     Tag
     {
     enum_content
      testInterface
      @0
      ;
     enum_content
      testExtends
      @1
      ;
     enum_content
      testPipeline
      @2
      ;
     enum_content
      testTailCallee
      @3
      ;
     enum_content
      testTailCaller
      @4
      ;
     enum_content
      testMoreStuff
      @5
      ;
     }
   }
 document_content
  struct_def
   struct
   type_
    TestProvisionId
   {
   }
 document_content
  struct_def
   struct
   type_
    TestRecipientId
   {
   }
 document_content
  struct_def
   struct
   type_
    TestThirdPartyCapId
   {
   }
 document_content
  struct_def
   struct
   type_
    TestJoinResult
   {
   }
 <EOF>
