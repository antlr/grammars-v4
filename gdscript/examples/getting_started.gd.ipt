program
 inheritance
  extends
  BaseClass
 \n
 className
  class_name
  MyClass
  ,
  "res://path/to/optional/icon.svg"
  \n
 topLevelDecl
  classVarDecl
   var
   a
   =
   expression
    literal
     5
   \n
 topLevelDecl
  classVarDecl
   var
   s
   =
   expression
    literal
     "Hello"
   \n
 topLevelDecl
  classVarDecl
   var
   arr
   =
   expression
    [
    expression
     literal
      1
    ,
    expression
     literal
      2
    ,
    expression
     literal
      3
    ]
   \n
 topLevelDecl
  classVarDecl
   var
   dict
   =
   expression
    {
    keyValue
     expression
      literal
       "key"
     :
     expression
      literal
       "value"
    ,
    keyValue
     expression
      literal
       2
     :
     expression
      literal
       3
    }
   \n
 topLevelDecl
  classVarDecl
   var
   typed_var
   :
   typeHint
    int
   \n
 topLevelDecl
  classVarDecl
   var
   inferred_type
   :=
   expression
    literal
     "String"
   \n
 topLevelDecl
  constDecl
   const
   ANSWER
   =
   expression
    literal
     42
   \n
 topLevelDecl
  constDecl
   const
   THE_NAME
   =
   expression
    literal
     "Charly"
   \n
 topLevelDecl
  enumDecl
   enum
   {
   UNIT_NEUTRAL
   ,
   UNIT_ENEMY
   ,
   UNIT_ALLY
   }
   \n
 topLevelDecl
  enumDecl
   enum
   Named
   {
   THING_1
   ,
   THING_2
   ,
   ANOTHER_THING
   =
   expression
    -
    expression
     literal
      1
   }
   \n
 topLevelDecl
  classVarDecl
   var
   v2
   =
   expression
    expression
     literal
      Vector2
    (
    argList
     expression
      literal
       1
     ,
     expression
      literal
       2
    )
   \n
 topLevelDecl
  classVarDecl
   var
   v3
   =
   expression
    expression
     literal
      Vector3
    (
    argList
     expression
      literal
       1
     ,
     expression
      literal
       2
     ,
     expression
      literal
       3
    )
   \n
 topLevelDecl
  methodDecl
   func
   some_function
   (
   parList
    parameter
     param1
    ,
    parameter
     param2
   )
   :
   stmtOrSuite
     
        
    suite
     stmt
      varDeclStmt
       var
       local_var
       =
       expression
        literal
         5
       stmtEnd
         
     stmt
      ifStmt
       if
       expression
        expression
         literal
          param1
        <
        expression
         literal
          local_var
       :
       stmtOrSuite
         
                
        suite
         stmt
          exprStmt
           expression
            expression
             literal
              print
            (
            argList
             expression
              literal
               param1
            )
           stmtEnd
             
         
       elif
       expression
        expression
         literal
          param2
        >
        expression
         literal
          5
       :
       stmtOrSuite
         
                
        suite
         stmt
          exprStmt
           expression
            expression
             literal
              print
            (
            argList
             expression
              literal
               param2
            )
           stmtEnd
             
         
       else
       :
       stmtOrSuite
         
                
        suite
         stmt
          exprStmt
           expression
            expression
             literal
              print
            (
            argList
             expression
              literal
               "Fail!"
            )
           stmtEnd
             
         
     stmt
      forStmt
       for
       i
       in
       expression
        expression
         literal
          range
        (
        argList
         expression
          literal
           20
        )
       :
       stmtOrSuite
         
                
        suite
         stmt
          exprStmt
           expression
            expression
             literal
              print
            (
            argList
             expression
              literal
               i
            )
           stmtEnd
             
         
     stmt
      whileStmt
       while
       expression
        expression
         literal
          param2
        !=
        expression
         literal
          0
       :
       stmtOrSuite
         
                
        suite
         stmt
          assignmentStmt
           expression
            literal
             param2
           -=
           expression
            literal
             1
           stmtEnd
             
         
     stmt
      varDeclStmt
       var
       local_var2
       =
       expression
        expression
         literal
          param1
        +
        expression
         literal
          3
       stmtEnd
         
     stmt
      flowStmt
       return
       expression
        literal
         local_var2
       stmtEnd
        \n
    \n
 topLevelDecl
  methodDecl
   func
   something
   (
   parList
    parameter
     p1
    ,
    parameter
     p2
   )
   :
   stmtOrSuite
     
        
    suite
     stmt
      exprStmt
       expression
        .
        something
        (
        argList
         expression
          literal
           p1
         ,
         expression
          literal
           p2
        )
       stmtEnd
        \n
    \n
 topLevelDecl
  innerClass
   class
   Something
   :
    
       
   topLevelDecl
    classVarDecl
     var
     a
     =
     expression
      literal
       10
     \n
   \n
 topLevelDecl
  methodDecl
   func
   _init
   (
   )
   :
   stmtOrSuite
     
        
    suite
     stmt
      exprStmt
       expression
        expression
         literal
          print
        (
        argList
         expression
          literal
           "Constructed!"
        )
       stmtEnd
         
     stmt
      varDeclStmt
       var
       lv
       =
       expression
        expression
         expression
          literal
           Something
         .
         new
        (
        )
       stmtEnd
         
     stmt
      exprStmt
       expression
        expression
         literal
          print
        (
        argList
         expression
          expression
           literal
            lv
          .
          a
        )
       stmtEnd
        )
    )
 lv.a)
