startRule
 proceduralModuleHeader
  Attribute VB_Name = 
  "CCTEST"
 conditionalModuleBody
  ccBlock
   ccConst
    \n
    #Const
    ccVarLhs
     name
      untypedName
       conDebug
    =
    ccExpression
     literalExpression
      1
   ccIfBlock
    ccIf
     \n\n
     #If
     ccExpression
      ccExpression
       conDebuge
      =
      ccExpression
       literalExpression
        1
     Then
     'Run debug code
    ccBlock
     logicalLine
      \n
      Debug
      .
      Print
      "oops"
    ccElseifBlock
     ccElseif
      \n
      #Elseif
      ccExpression
       ccExpression
        conDebug
       >
       ccExpression
        literalExpression
         1
      Then
     ccBlock
      logicalLine
       \n
       Debug
       .
       Print
       "help"
    ccElseBlock
     ccElse
      \n
      #Else
     ccBlock
      ccIfBlock
       ccIf
        \n
        #If
        ccExpression
         ccExpression
          ccFunc
           Cdbl
          (
          ccExpression
           ccFunc
            Abs
           (
           ccExpression
            conDebug
           )
          )
         <
         ccExpression
          (
          ccExpression
           ccExpression
            literalExpression
             1
           Mod
           ccExpression
            literalExpression
             3
          )
        Then
       ccBlock
        logicalLine
         \n
        logicalLine
         \n
         foo
         =
         2
       ccEndif
        \n
        #Endif
    ccEndif
     \n
     #End If
   logicalLine
    \n\n
    Open
    pth
    for
    output
    as
    #
    ff
   logicalLine
    \n
    Print
    #
    ff
    ,
    cont
   logicalLine
    \n
    Close
    #
    ff
   logicalLine
    \n\n
    ' The blocks can each be empty.
   ccIfBlock
    ccIf
     \n
     #if
     ccExpression
      reservedKeywords
       Win64
     Then
    ccElseifBlock
     ccElseif
      \n
      #Elseif
      ccExpression
       reservedKeywords
        Win32
      Then
    ccElseBlock
     ccElse
      \n
      #Else
    ccEndif
     \n
     #Endif
   logicalLine
    \n\n
    ' The blocks can each be empty.
   ccIfBlock
    ccIf
     \n
     #if
     ccExpression
      ccExpression
       ccExpression
        literalExpression
         1
       /
       ccExpression
        literalExpression
         2
      =
      ccExpression
       literalExpression
        .5
     Then
    ccBlock
     logicalLine
      \n
      foo
      =
      4
    ccEndif
     \n
     #Endif
   logicalLine
    \n
 <EOF>
