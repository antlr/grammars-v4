program
 block
  unlabelled_block
   block_head
    block_head
     block_head
      block_head
       block_head
        block_head
         block_head
          block_head
           block_head
            block_head
             block_head
              block_head
               begin
               declaration
                type_declaration
                 local_or_own
                  empty_
                 type_
                  integer
                 type_list
                  simple_variable
                   variable_identifier
                    a_line
                  ,
                  type_list
                   simple_variable
                    variable_identifier
                     b_line
                   ,
                   type_list
                    simple_variable
                     variable_identifier
                      c_line
                    ,
                    type_list
                     simple_variable
                      variable_identifier
                       d_line
                     ,
                     type_list
                      simple_variable
                       variable_identifier
                        e_line
                      ,
                      type_list
                       simple_variable
                        variable_identifier
                         f_line
                       ,
                       type_list
                        simple_variable
                         variable_identifier
                          g_prime_line
                        ,
                        type_list
                         simple_variable
                          variable_identifier
                           h_line
              ;
              declaration
               array_declaration
                local_or_own
                 empty_
                array_declarer
                 type_
                  real
                 array
                array_list
                 array_segment
                  array_identifier
                   spectral_line
                  [
                  bound_pair_list
                   bound_pair
                    lower_bound
                     arithmetic_expression
                      simple_arithmetic_expression
                       term
                        factor
                         primary
                          variable
                           simple_variable
                            variable_identifier
                             1
                    :
                    upper_bound
                     arithmetic_expression
                      simple_arithmetic_expression
                       term
                        factor
                         primary
                          variable
                           simple_variable
                            variable_identifier
                             8
                  ]
             ;
             declaration
              type_declaration
               local_or_own
                empty_
               type_
                integer
               type_list
                simple_variable
                 variable_identifier
                  current_surfaces
            ;
            declaration
             array_declaration
              local_or_own
               empty_
              array_declarer
               type_
                real
               array
              array_list
               array_segment
                array_identifier
                 test_case
                [
                bound_pair_list
                 bound_pair_list
                  bound_pair
                   lower_bound
                    arithmetic_expression
                     simple_arithmetic_expression
                      term
                       factor
                        primary
                         variable
                          simple_variable
                           variable_identifier
                            1
                   :
                   upper_bound
                    arithmetic_expression
                     simple_arithmetic_expression
                      term
                       factor
                        primary
                         variable
                          simple_variable
                           variable_identifier
                            4
                 ,
                 bound_pair
                  lower_bound
                   arithmetic_expression
                    simple_arithmetic_expression
                     term
                      factor
                       primary
                        variable
                         simple_variable
                          variable_identifier
                           1
                  :
                  upper_bound
                   arithmetic_expression
                    simple_arithmetic_expression
                     term
                      factor
                       primary
                        variable
                         simple_variable
                          variable_identifier
                           4
                ]
           ;
           declaration
            type_declaration
             local_or_own
              empty_
             type_
              integer
             type_list
              simple_variable
               variable_identifier
                curvature_radius
              ,
              type_list
               simple_variable
                variable_identifier
                 index_of_refraction
               ,
               type_list
                simple_variable
                 variable_identifier
                  dispersion
                ,
                type_list
                 simple_variable
                  variable_identifier
                   edge_thickness
          ;
          declaration
           type_declaration
            local_or_own
             empty_
            type_
             real
            type_list
             simple_variable
              variable_identifier
               clear_aperture
             ,
             type_list
              simple_variable
               variable_identifier
                aber_lspher
              ,
              type_list
               simple_variable
                variable_identifier
                 aberr_osc
               ,
               type_list
                simple_variable
                 variable_identifier
                  aberr_lchrom
                ,
                type_list
                 simple_variable
                  variable_identifier
                   max_lspher
                 ,
                 type_list
                  simple_variable
                   variable_identifier
                    mac_osc
                  ,
                  type_list
                   simple_variable
                    variable_identifier
                     max_lchrom
                   ,
                   type_list
                    simple_variable
                     variable_identifier
                      radius_of_curvature
                    ,
                    type_list
                     simple_variable
                      variable_identifier
                       object_distance
                     ,
                     type_list
                      simple_variable
                       variable_identifier
                        ray_height
                      ,
                      type_list
                       simple_variable
                        variable_identifier
                         axis_slope_angle
                       ,
                       type_list
                        simple_variable
                         variable_identifier
                          from_index
                        ,
                        type_list
                         simple_variable
                          variable_identifier
                           to_index
         ;
         declaration
          type_declaration
           local_or_own
            empty_
           type_
            integer
           type_list
            simple_variable
             variable_identifier
              number_of_iterations
            ,
            type_list
             simple_variable
              variable_identifier
               iteration
        ;
        declaration
         type_declaration
          local_or_own
           empty_
          type_
           integer
          type_list
           simple_variable
            variable_identifier
             paraxial
           ,
           type_list
            simple_variable
             variable_identifier
              marginal_ray
            ,
            type_list
             simple_variable
              variable_identifier
               paraxial_ray
       ;
       declaration
        type_declaration
         local_or_own
          empty_
         type_
          integer
         type_list
          simple_variable
           variable_identifier
            of_field
          ,
          type_list
           simple_variable
            variable_identifier
             sa_field
      ;
      declaration
       array_declaration
        local_or_own
         empty_
        array_declarer
         type_
          real
         array
        array_list
         array_segment
          array_identifier
           od_sa
          [
          bound_pair_list
           bound_pair_list
            bound_pair
             lower_bound
              arithmetic_expression
               simple_arithmetic_expression
                term
                 factor
                  primary
                   variable
                    simple_variable
                     variable_identifier
                      1
             :
             upper_bound
              arithmetic_expression
               simple_arithmetic_expression
                term
                 factor
                  primary
                   variable
                    simple_variable
                     variable_identifier
                      2
           ,
           bound_pair
            lower_bound
             arithmetic_expression
              simple_arithmetic_expression
               term
                factor
                 primary
                  variable
                   simple_variable
                    variable_identifier
                     1
            :
            upper_bound
             arithmetic_expression
              simple_arithmetic_expression
               term
                factor
                 primary
                  variable
                   simple_variable
                    variable_identifier
                     2
          ]
     ;
     declaration
      type_declaration
       local_or_own
        empty_
       type_
        real
       type_list
        simple_variable
         variable_identifier
          od_cline
        ,
        type_list
         simple_variable
          variable_identifier
           od_fline
    ;
    declaration
     procedure_declaration
      type_
       real
      procedure
      procedure_heading
       procedure_identifier
        cot
       formal_parameter_part
        (
        formal_parameter_list
         formal_parameter
          x
        )
       ;
       value_part
        value
        identifier_list
         x
        ;
       specification_part
        specification_part
         empty_
        specifier
         type_
          real
        identifier_list
         x
      procedure_body
       code
        ;
        begin
        cot
        :=
        1
        /
        (
        sin
        (
        x
        )
        /
        cos
        (
        x
        )
        )
        end
        cot
        ;
        real
        procedure
        arc_sin
        (
        x
        )
        ;
        value
        x
        ;
        real
        x
        ;
        begin
        arc_sin
        :=
        2
        *
        arctan
        (
        x
        /
        (
        1
        +
        sqrt
        (
        1
        -
        x
        ^
        2
        )
        )
        )
        end
        arc_sin
        ;
        procedure
        outbigreal
        (
        channel
        ,
        x
        )
        ;
        value
        channel
        ,
        x
        ;
        integer
        channel
        ;
        real
        x
        ;
        begin
        outreal_16_11
        (
        channel
        ,
        x
        )
        ;
        end
        outbigreal
        ;
        procedure
        transit_surface
        ;
        begin
        real
        iang
        ,
        rang
        ,
        iang_sin
        ,
        rang_sin
        ,
        old_axis_slope_angle
        ,
        sagitta
        ;
        if
        paraxial
        =
        paraxial_ray
        then
        begin
        if
        radius_of_curvature
        !=
        0
        then
        begin
        if
        object_distance
        =
        0
        then
        begin
        axis_slope_angle
        :=
        0
        ;
        iang_sin
        :=
        ray_height
        /
        radius_of_curvature
        end
        else
        iang_sin
        :=
        (
        (
        object_distance
        -
        radius_of_curvature
        )
        /
        radius_of_curvature
        )
        *
        axis_slope_angle
        ;
        rang_sin
        :=
        (
        from_index
        /
        to_index
        )
        *
        iang_sin
        ;
        old_axis_slope_angle
        :=
        axis_slope_angle
        ;
        axis_slope_angle
        :=
        axis_slope_angle
        +
        iang_sin
        -
        rang_sin
        ;
        if
        object_distance
        !=
        0
        then
        ray_height
        :=
        object_distance
        *
        old_axis_slope_angle
        ;
        object_distance
        :=
        ray_height
        /
        axis_slope_angle
        end
        else
        begin
        object_distance
        :=
        object_distance
        *
        (
        to_index
        /
        from_index
        )
        ;
        axis_slope_angle
        :=
        axis_slope_angle
        *
        (
        from_index
        /
        to_index
        )
        end
        end
        else
        begin
        if
        radius_of_curvature
        !=
        0
        then
        begin
        if
        object_distance
        =
        0
        then
        begin
        axis_slope_angle
        :=
        0
        ;
        iang_sin
        :=
        ray_height
        /
        radius_of_curvature
        end
        else
        iang_sin
        :=
        (
        (
        object_distance
        -
        radius_of_curvature
        )
        /
        radius_of_curvature
        )
        *
        sin
        (
        axis_slope_angle
        )
        ;
        iang
        :=
        arc_sin
        (
        iang_sin
        )
        ;
        rang_sin
        :=
        (
        from_index
        /
        to_index
        )
        *
        iang_sin
        ;
        old_axis_slope_angle
        :=
        axis_slope_angle
        ;
        axis_slope_angle
        :=
        axis_slope_angle
        +
        iang
        -
        arc_sin
        (
        rang_sin
        )
        ;
        sagitta
        :=
        sin
        (
        (
        old_axis_slope_angle
        +
        iang
        )
        /
        2
        )
        ;
        sagitta
        :=
        2
        *
        radius_of_curvature
        *
        (
        sagitta
        ^
        2
        )
        ;
        object_distance
        :=
        (
        (
        radius_of_curvature
        *
        sin
        (
        old_axis_slope_angle
        +
        iang
        )
        )
        *
        cot
        (
        axis_slope_angle
        )
        )
        +
        sagitta
        end
        else
        begin
        rang
        :=
        -
        arc_sin
        (
        (
        from_index
        /
        to_index
        )
        *
        sin
        (
        axis_slope_angle
        )
        )
        ;
        object_distance
        :=
        object_distance
        *
        (
        (
        to_index
        *
        cos
        (
        -
        rang
        )
        )
        /
        (
        from_index
        *
        cos
        (
        axis_slope_angle
        )
        )
        )
        ;
        axis_slope_angle
        :=
        -
        rang
        end
        end
        end
        transit_surface
        ;
        procedure
        trace_line
        (
        line
        ,
        ray_h
        )
        ;
        value
        line
        ,
        ray_h
        ;
        integer
        line
        ;
        real
        ray_h
        ;
        begin
        integer
        i
        ;
        object_distance
        :=
        0
        ;
        ray_height
        :=
        ray_h
        ;
        from_index
        :=
        1
        ;
        for
        i
        :=
        1
        step
        1
        until
        current_surfaces
        do
        begin
        radius_of_curvature
        :=
        test_case
        [
        i
        ,
        curvature_radius
        ]
        ;
        to_index
        :=
        test_case
        [
        i
        ,
        index_of_refraction
        ]
        ;
        if
        to_index
        >
        1
        then
        to_index
        :=
        to_index
        +
        (
        (
        spectral_line
        [
        d_line
        ]
        -
        spectral_line
        [
        line
        ]
        )
        /
        (
        spectral_line
        [
        c_line
        ]
        -
        spectral_line
        [
        f_line
        ]
        )
        )
        *
        (
        (
        test_case
        [
        i
        ,
        index_of_refraction
        ]
        -
        1.0
        )
        /
        test_case
        [
        i
        ,
        dispersion
        ]
        )
        ;
        transit_surface
        ;
        from_index
        :=
        to_index
        ;
        if
        i
        <
        current_surfaces
        then
        object_distance
        :=
        object_distance
        -
        test_case
        [
        i
        ,
        edge_thickness
        ]
        end
        end
        trace_line
        ;
        number_of_iterations
        :=
        100000000
        ;
        outstring
        (
        1
        ,
        "Ready to begin John Walker's floating point accuracy and performance benchmark."
        )
        ;
        outinteger
        (
        1
        ,
        number_of_iterations
        )
        ;
        outstring
        (
        1
        ,
        " will be made\n"
        )
        ;
        a_line
        :=
        1
        ;
        b_line
        :=
        2
        ;
        c_line
        :=
        3
        ;
        d_line
        :=
        4
        ;
        e_line
        :=
        5
        ;
        f_line
        :=
        6
        ;
        g_prime_line
        :=
        7
        ;
        h_line
        :=
        8
        ;
        spectral_line
        [
        a_line
        ]
        :=
        7621.0
        ;
        spectral_line
        [
        b_line
        ]
        :=
        6869.955
        ;
        spectral_line
        [
        c_line
        ]
        :=
        6562.8160
        ;
        spectral_line
        [
        d_line
        ]
        :=
        5895.944
        ;
        spectral_line
        [
        e_line
        ]
        :=
        5269.557
        ;
        spectral_line
        [
        f_line
        ]
        :=
        4861.344
        ;
        spectral_line
        [
        g_prime_line
        ]
        :=
        4340.477
        ;
        spectral_line
        [
        h_line
        ]
        :=
        3968.494
        ;
        current_surfaces
        :=
        4
        ;
        curvature_radius
        :=
        1
        ;
        index_of_refraction
        :=
        2
        ;
        dispersion
        :=
        3
        ;
        edge_thickness
        :=
        4
        ;
        test_case
        [
        1
        ,
        curvature_radius
        ]
        :=
        27.05
        ;
        test_case
        [
        1
        ,
        index_of_refraction
        ]
        :=
        1.5137
        ;
        test_case
        [
        1
        ,
        dispersion
        ]
        :=
        63.6
        ;
        test_case
        [
        1
        ,
        edge_thickness
        ]
        :=
        0.52
        ;
        test_case
        [
        2
        ,
        curvature_radius
        ]
        :=
        -
        16.68
        ;
        test_case
        [
        2
        ,
        index_of_refraction
        ]
        :=
        1.0
        ;
        test_case
        [
        2
        ,
        dispersion
        ]
        :=
        0.0
        ;
        test_case
        [
        2
        ,
        edge_thickness
        ]
        :=
        0.138
        ;
        test_case
        [
        3
        ,
        curvature_radius
        ]
        :=
        -
        16.68
        ;
        test_case
        [
        3
        ,
        index_of_refraction
        ]
        :=
        1.6164
        ;
        test_case
        [
        3
        ,
        dispersion
        ]
        :=
        36.7
        ;
        test_case
        [
        3
        ,
        edge_thickness
        ]
        :=
        0.38
        ;
        test_case
        [
        4
        ,
        curvature_radius
        ]
        :=
        -
        78.1
        ;
        test_case
        [
        4
        ,
        index_of_refraction
        ]
        :=
        1.0
        ;
        test_case
        [
        4
        ,
        dispersion
        ]
        :=
        0.0
        ;
        test_case
        [
        4
        ,
        edge_thickness
        ]
        :=
        0.0
        ;
        marginal_ray
        :=
        1
        ;
        paraxial_ray
        :=
        2
        ;
        of_field
        :=
        1
        ;
        sa_field
        :=
        2
        ;
        clear_aperture
        :=
        4
        ;
        for
        iteration
        :=
        1
        step
        1
        until
        number_of_iterations
        do
        begin
        for
        paraxial
        :=
        marginal_ray
        step
        1
        until
        paraxial_ray
        do
        begin
        trace_line
        (
        d_line
        ,
        clear_aperture
        /
        2
        )
        ;
        od_sa
        [
        paraxial
        ,
        of_field
        ]
        :=
        object_distance
        ;
        od_sa
        [
        paraxial
        ,
        sa_field
        ]
        :=
        axis_slope_angle
        end
        ;
        paraxial
        :=
        marginal_ray
        ;
        trace_line
        (
        c_line
        ,
        clear_aperture
        /
        2
        )
        ;
        od_cline
        :=
        object_distance
        ;
        trace_line
        (
        f_line
        ,
        clear_aperture
        /
        2
        )
        ;
        od_fline
        :=
        object_distance
        ;
        aber_lspher
        :=
        od_sa
        [
        paraxial_ray
        ,
        of_field
        ]
        -
        od_sa
        [
        marginal_ray
        ,
        of_field
        ]
        ;
        aberr_osc
        :=
        1
        -
        (
        (
        od_sa
        [
        paraxial_ray
        ,
        of_field
        ]
        *
        od_sa
        [
        paraxial_ray
        ,
        sa_field
        ]
        )
        /
        (
        sin
        (
        od_sa
        [
        marginal_ray
        ,
        sa_field
        ]
        )
        *
        od_sa
        [
        marginal_ray
        ,
        of_field
        ]
        )
        )
        ;
        aberr_lchrom
        :=
        od_fline
        -
        od_cline
        ;
        max_lspher
        :=
        0.0000926
        /
        sin
        (
        od_sa
        [
        marginal_ray
        ,
        sa_field
        ]
        )
        ^
        2
        ;
        max_lchrom
        :=
        max_lspher
        ;
        mac_osc
        :=
        0.0025
        end
        ;
        outstring
        (
        1
        ,
        "  Marginal_ray    "
        )
        ;
        outbigreal
        (
        1
        ,
        od_sa
        [
        marginal_ray
        ,
        of_field
        ]
        )
        ;
        outstring
        (
        1
        ,
        "   "
        )
        ;
        outbigreal
        (
        1
        ,
        od_sa
        [
        marginal_ray
        ,
        sa_field
        ]
        )
        ;
        outstring
        (
        1
        ,
        "\n"
        )
        ;
        outstring
        (
        1
        ,
        "  Paraxial_ray    "
        )
        ;
        outbigreal
        (
        1
        ,
        od_sa
        [
        paraxial_ray
        ,
        of_field
        ]
        )
        ;
        outstring
        (
        1
        ,
        "   "
        )
        ;
        outbigreal
        (
        1
        ,
        od_sa
        [
        paraxial_ray
        ,
        sa_field
        ]
        )
        ;
        outstring
        (
        1
        ,
        "\n"
        )
        ;
        outstring
        (
        1
        ,
        "Longitudinal spherical aberration: "
        )
        ;
        outbigreal
        (
        1
        ,
        aber_lspher
        )
        ;
        outstring
        (
        1
        ,
        "\n"
        )
        ;
        outstring
        (
        1
        ,
        "    (Maximum permissible): "
        )
        ;
        outbigreal
        (
        1
        ,
        max_lspher
        )
        ;
        outstring
        (
        1
        ,
        "\n"
        )
        ;
        outstring
        (
        1
        ,
        "Offense against sine condition (coma): "
        )
        ;
        outbigreal
        (
        1
        ,
        aberr_osc
        )
        ;
        outstring
        (
        1
        ,
        "\n"
        )
        ;
        outstring
        (
        1
        ,
        "    (Maximum permissible): "
        )
        ;
        outbigreal
        (
        1
        ,
        mac_osc
        )
        ;
        outstring
        (
        1
        ,
        "\n"
        )
        ;
        outstring
        (
        1
        ,
        "Axial chromatic aberration: "
        )
        ;
        outbigreal
        (
        1
        ,
        aberr_lchrom
        )
        ;
        outstring
        (
        1
        ,
        "\n"
        )
        ;
        outstring
        (
        1
        ,
        "    (Maximum permissible): "
        )
        ;
        outbigreal
        (
        1
        ,
        max_lchrom
        )
        ;
        outstring
        (
        1
        ,
        "\n"
        )
        ;
        outstring
        (
        1
        ,
        "Measured run time in seconds should be divided by "
        )
        ;
        outinteger
        (
        1
        ,
        number_of_iterations
        /
        1000
        )
        ;
        outstring
        (
        1
        ,
        " to normalise for reporting results.\n"
        )
        ;
        outstring
        (
        1
        ,
        "For archival results, adjust iteration count so the benchmark runs about five minutes.\n"
        )
   ;
   compound_tail
    statement
     unconditional_statement
      basic_statement
       unlabelled_basic_statement
        dummy_statement
         empty_
    end
 <EOF>
