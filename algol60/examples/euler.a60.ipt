program
 block
  unlabelled_block
   block_head
    block_head
     begin
     declaration
      procedure_declaration
       procedure
       procedure_heading
        procedure_identifier
         euler
        formal_parameter_part
         (
         formal_parameter_list
          formal_parameter_list
           formal_parameter_list
            formal_parameter_list
             formal_parameter
              fct
            parameter_delimiter
             ,
            formal_parameter
             sum
           parameter_delimiter
            ,
           formal_parameter
            eps
          parameter_delimiter
           ,
          formal_parameter
           tim
         )
        ;
        value_part
         value
         identifier_list
          identifier_list
           eps
          ,
          tim
         ;
        specification_part
         specification_part
          empty_
         specifier
          type_
           integer
         identifier_list
          tim
       procedure_body
        statement
         unconditional_statement
          basic_statement
           unlabelled_basic_statement
            dummy_statement
             empty_
    ;
    declaration
     procedure_declaration
      type_
       real
      procedure
      procedure_heading
       procedure_identifier
        fct
       formal_parameter_part
        empty_
       ;
       value_part
        empty_
       specification_part
        specification_part
         empty_
        specifier
         type_
          real
        identifier_list
         identifier_list
          sum
         ,
         eps
      procedure_body
       code
        ;
        begin
        integer
        i
        ,
        k
        ,
        n
        ,
        t
        ;
        array
        m
        [
        0
        :
        15
        ]
        ;
        real
        mn
        ,
        mp
        ,
        ds
        ;
        i
        :=
        n
        :=
        t
        :=
        0
        ;
        m
        [
        0
        ]
        :=
        fct
        (
        0
        )
        ;
        sum
        :=
        m
        [
        0
        ]
        /
        2
        ;
        nextterm
        :
        i
        :=
        i
        +
        1
        ;
        mn
        :=
        fct
        (
        i
        )
        ;
        for
        k
        :=
        0
        step
        1
        until
        n
        do
        begin
        mp
        :=
        (
        mn
        +
        m
        [
        k
        ]
        )
        /
        2
        ;
        m
        [
        k
        ]
        :=
        mn
        ;
        mn
        :=
        mp
        end
        ;
        if
        (
        abs
        (
        mn
        )
        <
        abs
        (
        m
        [
        n
        ]
        )
        )
        &
        (
        n
        <
        15
        )
        then
        begin
        ds
        :=
        mn
        /
        2
        ;
        n
        :=
        n
        +
        1
        ;
        m
        [
        n
        ]
        :=
        mn
        end
        else
        ds
        :=
        mn
        ;
        sum
        :=
        sum
        +
        ds
        ;
        if
        abs
        (
        ds
        )
        <
        eps
        then
        t
        :=
        t
        +
        1
        else
        t
        :=
        0
        ;
        if
        t
        <
        tim
        then
        goto
        nextterm
        end
        ;
        procedure
        inv
        (
        v
        )
        ;
        inv
        :=
        1.0
        /
        (
        (
        v
        +
        1
        )
        ^
        2
        )
        ;
        real
        result
        ;
        euler
        (
        inv
        ,
        result
        ,
        0.00005
        ,
        10
        )
        ;
        printnln
        (
        result
        )
   ;
   compound_tail
    statement
     unconditional_statement
      basic_statement
       unlabelled_basic_statement
        dummy_statement
         empty_
    end
 <EOF>
