program
 sourceElements
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       literal
        "use strict"
     ;
  sourceElement
   statement
    classDeclaration
     class
     identifier
      Shape
     classHeritage
     classTail
      {
      classElement
       constructorDeclaration
        constructor
        (
        formalParameterList
         formalParameterArg
          assignable
           identifier
            id
         ,
         formalParameterArg
          assignable
           identifier
            x
         ,
         formalParameterArg
          assignable
           identifier
            y
        )
        {
        functionBody
         sourceElements
          sourceElement
           statement
            expressionStatement
             expressionSequence
              singleExpression
               singleExpression
                singleExpression
                 this
                .
                identifierName
                 identifier
                  id
               =
               singleExpression
                identifierName
                 identifier
                  id
                singleExpression
                 singleExpression
                  singleExpression
                   this
                  .
                  identifierName
                   identifier
                    move
                 arguments
                  (
                  argumentList
                   argument
                    singleExpression
                     identifierName
                      identifier
                       x
                   ,
                   argument
                    singleExpression
                     identifierName
                      identifier
                       y
                  )
        }
      classElement
       propertyMemberDeclaration
        propertyMemberBase
        propertyName
         identifierName
          identifier
           move
        callSignature
         (
         parameterList
          parameter
           requiredParameter
            identifierOrPattern
             identifierName
              identifier
               x
          ,
          parameter
           requiredParameter
            identifierOrPattern
             identifierName
              identifier
               y
         )
        {
        functionBody
         sourceElements
          sourceElement
           statement
            expressionStatement
             expressionSequence
              singleExpression
               singleExpression
                singleExpression
                 this
                .
                identifierName
                 identifier
                  x
               =
               singleExpression
                identifierName
                 identifier
                  x
                singleExpression
                 singleExpression
                  singleExpression
                   this
                  .
                  identifierName
                   identifier
                    y
                 =
                 singleExpression
                  identifierName
                   identifier
                    y
        }
      }
  sourceElement
   statement
    classDeclaration
     class
     identifier
      Rectangle
     classHeritage
      classExtendsClause
       extends
       typeReference
        typeName
         identifier
          Shape
     classTail
      {
      classElement
       constructorDeclaration
        constructor
        (
        formalParameterList
         formalParameterArg
          assignable
           identifier
            id
         ,
         formalParameterArg
          assignable
           identifier
            x
         ,
         formalParameterArg
          assignable
           identifier
            y
         ,
         formalParameterArg
          assignable
           identifier
            width
         ,
         formalParameterArg
          assignable
           identifier
            height
        )
        {
        functionBody
         sourceElements
          sourceElement
           statement
            expressionStatement
             expressionSequence
              singleExpression
               identifierName
                reservedWord
                 keyword
                  super
               singleExpression
                (
                expressionSequence
                 singleExpression
                  identifierName
                   identifier
                    id
                 ,
                 singleExpression
                  identifierName
                   identifier
                    x
                 ,
                 singleExpression
                  identifierName
                   identifier
                    y
                )
          sourceElement
           statement
            expressionStatement
             expressionSequence
              singleExpression
               singleExpression
                singleExpression
                 this
                .
                identifierName
                 identifier
                  width
               =
               singleExpression
                identifierName
                 identifier
                  width
                singleExpression
                 singleExpression
                  singleExpression
                   this
                  .
                  identifierName
                   identifier
                    height
                 =
                 singleExpression
                  identifierName
                   identifier
                    height
        }
      }
  sourceElement
   statement
    classDeclaration
     class
     identifier
      Circle
     classHeritage
      classExtendsClause
       extends
       typeReference
        typeName
         identifier
          Shape
     classTail
      {
      classElement
       constructorDeclaration
        constructor
        (
        formalParameterList
         formalParameterArg
          assignable
           identifier
            id
         ,
         formalParameterArg
          assignable
           identifier
            x
         ,
         formalParameterArg
          assignable
           identifier
            y
         ,
         formalParameterArg
          assignable
           identifier
            radius
        )
        {
        functionBody
         sourceElements
          sourceElement
           statement
            expressionStatement
             expressionSequence
              singleExpression
               identifierName
                reservedWord
                 keyword
                  super
               singleExpression
                (
                expressionSequence
                 singleExpression
                  identifierName
                   identifier
                    id
                 ,
                 singleExpression
                  identifierName
                   identifier
                    x
                 ,
                 singleExpression
                  identifierName
                   identifier
                    y
                )
          sourceElement
           statement
            expressionStatement
             expressionSequence
              singleExpression
               singleExpression
                singleExpression
                 this
                .
                identifierName
                 identifier
                  radius
               =
               singleExpression
                identifierName
                 identifier
                  radius
        }
      }
  sourceElement
   statement
    variableStatement
     varModifier
      var
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         aggregation
       =
       singleExpression
        anonymousFunction
         arrowFunctionDeclaration
          arrowFunctionParameters
           (
           formalParameterList
            formalParameterArg
             assignable
              identifier
               baseClass
            ,
            lastFormalParameterArg
             ...
             identifier
              mixins
           )
          =>
          arrowFunctionBody
           {
           functionBody
            sourceElements
             sourceElement
              statement
               variableStatement
                varModifier
                 let
                variableDeclarationList
                 variableDeclaration
                  identifierOrKeyWord
                   identifier
                    base
                  =
                  singleExpression
                   class
                   identifier
                    _Combined
                   classHeritage
                    classExtendsClause
                     extends
                     typeReference
                      typeName
                       identifier
                        baseClass
                   classTail
                    {
                    classElement
                     constructorDeclaration
                      constructor
                      (
                      formalParameterList
                       lastFormalParameterArg
                        ...
                        identifier
                         args
                      )
                      {
                      functionBody
                       sourceElements
                        sourceElement
                         statement
                          expressionStatement
                           expressionSequence
                            singleExpression
                             singleExpression
                              identifierName
                               reservedWord
                                keyword
                                 super
                             arguments
                              (
                              argumentList
                               argument
                                ...
                                singleExpression
                                 identifierName
                                  identifier
                                   args
                              )
                        sourceElement
                         statement
                          expressionStatement
                           expressionSequence
                            singleExpression
                             singleExpression
                              singleExpression
                               identifierName
                                identifier
                                 mixins
                              .
                              identifierName
                               identifier
                                forEach
                             arguments
                              (
                              argumentList
                               argument
                                singleExpression
                                 anonymousFunction
                                  arrowFunctionDeclaration
                                   arrowFunctionParameters
                                    (
                                    formalParameterList
                                     formalParameterArg
                                      assignable
                                       identifier
                                        mixin
                                    )
                                   =>
                                   arrowFunctionBody
                                    singleExpression
                                     objectLiteral
                                      {
                                      propertyAssignment
                                       singleExpression
                                        singleExpression
                                         singleExpression
                                          singleExpression
                                           singleExpression
                                            identifierName
                                             identifier
                                              mixin
                                           .
                                           identifierName
                                            identifier
                                             prototype
                                          .
                                          identifierName
                                           identifier
                                            initializer
                                         .
                                         identifierName
                                          identifier
                                           call
                                        arguments
                                         (
                                         argumentList
                                          argument
                                           singleExpression
                                            this
                                         )
                                      }
                              )
                      }
                    }
             sourceElement
              statement
               variableStatement
                varModifier
                 let
                variableDeclarationList
                 variableDeclaration
                  identifierOrKeyWord
                   identifier
                    copyProps
                  =
                  singleExpression
                   anonymousFunction
                    arrowFunctionDeclaration
                     arrowFunctionParameters
                      (
                      formalParameterList
                       formalParameterArg
                        assignable
                         identifier
                          target
                       ,
                       formalParameterArg
                        assignable
                         identifier
                          source
                      )
                     =>
                     arrowFunctionBody
                      singleExpression
                       objectLiteral
                        {
                        propertyAssignment
                         singleExpression
                          singleExpression
                           singleExpression
                            singleExpression
                             singleExpression
                              singleExpression
                               singleExpression
                                identifierName
                                 identifier
                                  Object
                               .
                               identifierName
                                identifier
                                 getOwnPropertyNames
                              arguments
                               (
                               argumentList
                                argument
                                 singleExpression
                                  identifierName
                                   identifier
                                    source
                               )
                             .
                             identifierName
                              identifier
                               concat
                            arguments
                             (
                             argumentList
                              argument
                               singleExpression
                                singleExpression
                                 singleExpression
                                  identifierName
                                   identifier
                                    Object
                                 .
                                 identifierName
                                  identifier
                                   getOwnPropertySymbols
                                arguments
                                 (
                                 argumentList
                                  argument
                                   singleExpression
                                    identifierName
                                     identifier
                                      source
                                 )
                             )
                           .
                           identifierName
                            identifier
                             forEach
                          arguments
                           (
                           argumentList
                            argument
                             singleExpression
                              anonymousFunction
                               arrowFunctionDeclaration
                                arrowFunctionParameters
                                 (
                                 formalParameterList
                                  formalParameterArg
                                   assignable
                                    identifier
                                     prop
                                 )
                                =>
                                arrowFunctionBody
                                 {
                                 functionBody
                                  sourceElements
                                   sourceElement
                                    statement
                                     expressionStatement
                                      expressionSequence
                                       singleExpression
                                        identifierName
                                         reservedWord
                                          keyword
                                           if
                                        singleExpression
                                         (
                                         expressionSequence
                                          singleExpression
                                           singleExpression
                                            singleExpression
                                             identifierName
                                              identifier
                                               prop
                                            .
                                            identifierName
                                             identifier
                                              match
                                           arguments
                                            (
                                            argumentList
                                             argument
                                              singleExpression
                                               literal
                                                /^(?:constructor|prototype|arguments|caller|name|bind|call|apply|toString|length)$/
                                            )
                                         )
                                   sourceElement
                                    statement
                                     expressionStatement
                                      expressionSequence
                                       singleExpression
                                        identifierName
                                         reservedWord
                                          keyword
                                           return
                                        singleExpression
                                         singleExpression
                                          singleExpression
                                           identifierName
                                            identifier
                                             Object
                                          .
                                          identifierName
                                           identifier
                                            defineProperty
                                         arguments
                                          (
                                          argumentList
                                           argument
                                            singleExpression
                                             identifierName
                                              identifier
                                               target
                                           ,
                                           argument
                                            singleExpression
                                             identifierName
                                              identifier
                                               prop
                                           ,
                                           argument
                                            singleExpression
                                             singleExpression
                                              singleExpression
                                               identifierName
                                                identifier
                                                 Object
                                              .
                                              identifierName
                                               identifier
                                                getOwnPropertyDescriptor
                                             arguments
                                              (
                                              argumentList
                                               argument
                                                singleExpression
                                                 identifierName
                                                  identifier
                                                   source
                                               ,
                                               argument
                                                singleExpression
                                                 identifierName
                                                  identifier
                                                   prop
                                              )
                                          )
                                 }
                           )
                        }
             sourceElement
              statement
               expressionStatement
                expressionSequence
                 singleExpression
                  singleExpression
                   singleExpression
                    identifierName
                     identifier
                      mixins
                   .
                   identifierName
                    identifier
                     forEach
                  arguments
                   (
                   argumentList
                    argument
                     singleExpression
                      anonymousFunction
                       arrowFunctionDeclaration
                        arrowFunctionParameters
                         (
                         formalParameterList
                          formalParameterArg
                           assignable
                            identifier
                             mixin
                         )
                        =>
                        arrowFunctionBody
                         {
                         functionBody
                          sourceElements
                           sourceElement
                            statement
                             variableStatement
                              variableDeclarationList
                               variableDeclaration
                                identifierOrKeyWord
                                 identifier
                                  copyProps
                                singleExpression
                                 (
                                 expressionSequence
                                  singleExpression
                                   singleExpression
                                    identifierName
                                     identifier
                                      base
                                   .
                                   identifierName
                                    identifier
                                     prototype
                                  ,
                                  singleExpression
                                   singleExpression
                                    identifierName
                                     identifier
                                      mixin
                                   .
                                   identifierName
                                    identifier
                                     prototype
                                 )
                           sourceElement
                            statement
                             variableStatement
                              variableDeclarationList
                               variableDeclaration
                                identifierOrKeyWord
                                 identifier
                                  copyProps
                                singleExpression
                                 (
                                 expressionSequence
                                  singleExpression
                                   identifierName
                                    identifier
                                     base
                                  ,
                                  singleExpression
                                   identifierName
                                    identifier
                                     mixin
                                 )
                         }
                   )
             sourceElement
              statement
               expressionStatement
                expressionSequence
                 singleExpression
                  identifierName
                   reservedWord
                    keyword
                     return
                  singleExpression
                   identifierName
                    identifier
                     base
           }
  sourceElement
   statement
    classDeclaration
     class
     identifier
      Colored
     classHeritage
     classTail
      {
      classElement
       propertyMemberDeclaration
        propertyMemberBase
        propertyName
         identifierName
          identifier
           initializer
        callSignature
         (
         )
        {
        functionBody
         sourceElements
          sourceElement
           statement
            expressionStatement
             expressionSequence
              singleExpression
               singleExpression
                singleExpression
                 this
                .
                identifierName
                 identifier
                  _color
               =
               singleExpression
                literal
                 "white"
        }
      classElement
       propertyMemberDeclaration
        propertyMemberBase
        getAccessor
         getter
          identifier
           get
          classElementName
           propertyName
            identifierName
             identifier
              color
         (
         )
         {
         functionBody
          sourceElements
           sourceElement
            statement
             expressionStatement
              expressionSequence
               singleExpression
                identifierName
                 reservedWord
                  keyword
                   return
                singleExpression
                 singleExpression
                  this
                 .
                 identifierName
                  identifier
                   _color
         }
      classElement
       propertyMemberDeclaration
        propertyMemberBase
        setAccessor
         setter
          identifier
           set
          classElementName
           propertyName
            identifierName
             identifier
              color
         (
         formalParameterList
          formalParameterArg
           assignable
            identifier
             v
         )
         {
         functionBody
          sourceElements
           sourceElement
            statement
             expressionStatement
              expressionSequence
               singleExpression
                singleExpression
                 singleExpression
                  this
                 .
                 identifierName
                  identifier
                   _color
                =
                singleExpression
                 identifierName
                  identifier
                   v
         }
      }
  sourceElement
   statement
    classDeclaration
     class
     identifier
      ZCoord
     classHeritage
     classTail
      {
      classElement
       propertyMemberDeclaration
        propertyMemberBase
        propertyName
         identifierName
          identifier
           initializer
        callSignature
         (
         )
        {
        functionBody
         sourceElements
          sourceElement
           statement
            expressionStatement
             expressionSequence
              singleExpression
               singleExpression
                singleExpression
                 this
                .
                identifierName
                 identifier
                  _z
               =
               singleExpression
                literal
                 numericLiteral
                  0
        }
      classElement
       propertyMemberDeclaration
        propertyMemberBase
        getAccessor
         getter
          identifier
           get
          classElementName
           propertyName
            identifierName
             identifier
              z
         (
         )
         {
         functionBody
          sourceElements
           sourceElement
            statement
             expressionStatement
              expressionSequence
               singleExpression
                identifierName
                 reservedWord
                  keyword
                   return
                singleExpression
                 singleExpression
                  this
                 .
                 identifierName
                  identifier
                   _z
         }
      classElement
       propertyMemberDeclaration
        propertyMemberBase
        setAccessor
         setter
          identifier
           set
          classElementName
           propertyName
            identifierName
             identifier
              z
         (
         formalParameterList
          formalParameterArg
           assignable
            identifier
             v
         )
         {
         functionBody
          sourceElements
           sourceElement
            statement
             expressionStatement
              expressionSequence
               singleExpression
                singleExpression
                 singleExpression
                  this
                 .
                 identifierName
                  identifier
                   _z
                =
                singleExpression
                 identifierName
                  identifier
                   v
         }
      }
  sourceElement
   statement
    classDeclaration
     class
     identifier
      Shape
     classHeritage
     classTail
      {
      classElement
       constructorDeclaration
        constructor
        (
        formalParameterList
         formalParameterArg
          assignable
           identifier
            x
         ,
         formalParameterArg
          assignable
           identifier
            y
        )
        {
        functionBody
         sourceElements
          sourceElement
           statement
            expressionStatement
             expressionSequence
              singleExpression
               singleExpression
                singleExpression
                 this
                .
                identifierName
                 identifier
                  _x
               =
               singleExpression
                identifierName
                 identifier
                  x
             ;
          sourceElement
           statement
            expressionStatement
             expressionSequence
              singleExpression
               singleExpression
                singleExpression
                 this
                .
                identifierName
                 identifier
                  _y
               =
               singleExpression
                identifierName
                 identifier
                  y
        }
      classElement
       propertyMemberDeclaration
        propertyMemberBase
        getAccessor
         getter
          identifier
           get
          classElementName
           propertyName
            identifierName
             identifier
              x
         (
         )
         {
         functionBody
          sourceElements
           sourceElement
            statement
             expressionStatement
              expressionSequence
               singleExpression
                identifierName
                 reservedWord
                  keyword
                   return
                singleExpression
                 singleExpression
                  this
                 .
                 identifierName
                  identifier
                   _x
         }
      classElement
       propertyMemberDeclaration
        propertyMemberBase
        setAccessor
         setter
          identifier
           set
          classElementName
           propertyName
            identifierName
             identifier
              x
         (
         formalParameterList
          formalParameterArg
           assignable
            identifier
             v
         )
         {
         functionBody
          sourceElements
           sourceElement
            statement
             expressionStatement
              expressionSequence
               singleExpression
                singleExpression
                 singleExpression
                  this
                 .
                 identifierName
                  identifier
                   _x
                =
                singleExpression
                 identifierName
                  identifier
                   v
         }
      classElement
       propertyMemberDeclaration
        propertyMemberBase
        getAccessor
         getter
          identifier
           get
          classElementName
           propertyName
            identifierName
             identifier
              y
         (
         )
         {
         functionBody
          sourceElements
           sourceElement
            statement
             expressionStatement
              expressionSequence
               singleExpression
                identifierName
                 reservedWord
                  keyword
                   return
                singleExpression
                 singleExpression
                  this
                 .
                 identifierName
                  identifier
                   _y
         }
      classElement
       propertyMemberDeclaration
        propertyMemberBase
        setAccessor
         setter
          identifier
           set
          classElementName
           propertyName
            identifierName
             identifier
              y
         (
         formalParameterList
          formalParameterArg
           assignable
            identifier
             v
         )
         {
         functionBody
          sourceElements
           sourceElement
            statement
             expressionStatement
              expressionSequence
               singleExpression
                singleExpression
                 singleExpression
                  this
                 .
                 identifierName
                  identifier
                   _y
                =
                singleExpression
                 identifierName
                  identifier
                   v
         }
      }
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       identifierName
        reservedWord
         keyword
          class
       singleExpression
        identifierName
         identifier
          Rectangle
        singleExpression
         identifierName
          reservedWord
           keyword
            extends
         singleExpression
          identifierName
           identifier
            aggregation
          singleExpression
           (
           expressionSequence
            singleExpression
             identifierName
              identifier
               Shape
            ,
            singleExpression
             identifierName
              identifier
               Colored
            ,
            singleExpression
             identifierName
              identifier
               ZCoord
           )
  sourceElement
   statement
    block
     {
     }
  sourceElement
   statement
    variableStatement
     varModifier
      var
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         rect
       =
       singleExpression
        new
        singleExpression
         identifierName
          identifier
           Rectangle
        arguments
         (
         argumentList
          argument
           singleExpression
            literal
             numericLiteral
              7
          ,
          argument
           singleExpression
            literal
             numericLiteral
              42
         )
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         identifierName
          identifier
           rect
        .
        identifierName
         identifier
          z
       =
       singleExpression
        literal
         numericLiteral
          1000
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         identifierName
          identifier
           rect
        .
        identifierName
         identifier
          color
       =
       singleExpression
        literal
         "red"
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         identifierName
          identifier
           console
        .
        identifierName
         identifier
          log
       arguments
        (
        argumentList
         argument
          singleExpression
           singleExpression
            identifierName
             identifier
              rect
           .
           identifierName
            identifier
             x
         ,
         argument
          singleExpression
           singleExpression
            identifierName
             identifier
              rect
           .
           identifierName
            identifier
             y
         ,
         argument
          singleExpression
           singleExpression
            identifierName
             identifier
              rect
           .
           identifierName
            identifier
             z
         ,
         argument
          singleExpression
           singleExpression
            identifierName
             identifier
              rect
           .
           identifierName
            identifier
             color
        )
  sourceElement
   statement
    classDeclaration
     class
     identifier
      Shape
     classHeritage
     classTail
      {
      classElement
       propertyMemberDeclaration
        propertyMemberBase
        propertyName
         identifierName
          identifier
           toString
        callSignature
         (
         )
        {
        functionBody
         sourceElements
          sourceElement
           statement
            expressionStatement
             expressionSequence
              singleExpression
               identifierName
                reservedWord
                 keyword
                  return
               singleExpression
                literal
                 templateStringLiteral
                  `
                  templateStringAtom
                   S
                  templateStringAtom
                   h
                  templateStringAtom
                   a
                  templateStringAtom
                   p
                  templateStringAtom
                   e
                  templateStringAtom
                   (
                  templateStringAtom
                   ${
                   singleExpression
                    singleExpression
                     this
                    .
                    identifierName
                     identifier
                      id
                   }
                  templateStringAtom
                   )
                  `
        }
      }
  sourceElement
   statement
    classDeclaration
     class
     identifier
      Rectangle
     classHeritage
      classExtendsClause
       extends
       typeReference
        typeName
         identifier
          Shape
     classTail
      {
      classElement
       constructorDeclaration
        constructor
        (
        formalParameterList
         formalParameterArg
          assignable
           identifier
            id
         ,
         formalParameterArg
          assignable
           identifier
            x
         ,
         formalParameterArg
          assignable
           identifier
            y
         ,
         formalParameterArg
          assignable
           identifier
            width
         ,
         formalParameterArg
          assignable
           identifier
            height
        )
        {
        functionBody
         sourceElements
          sourceElement
           statement
            expressionStatement
             expressionSequence
              singleExpression
               identifierName
                reservedWord
                 keyword
                  super
               singleExpression
                (
                expressionSequence
                 singleExpression
                  identifierName
                   identifier
                    id
                 ,
                 singleExpression
                  identifierName
                   identifier
                    x
                 ,
                 singleExpression
                  identifierName
                   identifier
                    y
                )
        }
      classElement
       propertyMemberDeclaration
        propertyMemberBase
        propertyName
         identifierName
          identifier
           toString
        callSignature
         (
         )
        {
        functionBody
         sourceElements
          sourceElement
           statement
            expressionStatement
             expressionSequence
              singleExpression
               identifierName
                reservedWord
                 keyword
                  return
               singleExpression
                singleExpression
                 literal
                  "Rectangle > "
                +
                singleExpression
                 singleExpression
                  singleExpression
                   identifierName
                    reservedWord
                     keyword
                      super
                  .
                  identifierName
                   identifier
                    toString
                 arguments
                  (
                  )
        }
      }
  sourceElement
   statement
    classDeclaration
     class
     identifier
      Circle
     classHeritage
      classExtendsClause
       extends
       typeReference
        typeName
         identifier
          Shape
     classTail
      {
      classElement
       constructorDeclaration
        constructor
        (
        formalParameterList
         formalParameterArg
          assignable
           identifier
            id
         ,
         formalParameterArg
          assignable
           identifier
            x
         ,
         formalParameterArg
          assignable
           identifier
            y
         ,
         formalParameterArg
          assignable
           identifier
            radius
        )
        {
        functionBody
         sourceElements
          sourceElement
           statement
            expressionStatement
             expressionSequence
              singleExpression
               identifierName
                reservedWord
                 keyword
                  super
               singleExpression
                (
                expressionSequence
                 singleExpression
                  identifierName
                   identifier
                    id
                 ,
                 singleExpression
                  identifierName
                   identifier
                    x
                 ,
                 singleExpression
                  identifierName
                   identifier
                    y
                )
        }
      classElement
       propertyMemberDeclaration
        propertyMemberBase
        propertyName
         identifierName
          identifier
           toString
        callSignature
         (
         )
        {
        functionBody
         sourceElements
          sourceElement
           statement
            expressionStatement
             expressionSequence
              singleExpression
               identifierName
                reservedWord
                 keyword
                  return
               singleExpression
                singleExpression
                 literal
                  "Circle > "
                +
                singleExpression
                 singleExpression
                  singleExpression
                   identifierName
                    reservedWord
                     keyword
                      super
                  .
                  identifierName
                   identifier
                    toString
                 arguments
                  (
                  )
        }
      }
  sourceElement
   statement
    classDeclaration
     class
     identifier
      Rectangle
     classHeritage
      classExtendsClause
       extends
       typeReference
        typeName
         identifier
          Shape
     classTail
      {
      classElement
       propertyMemberDeclaration
        propertyMemberBase
         static
        propertyName
         identifierName
          identifier
           contextTypes
        initializer
         =
         singleExpression
          objectLiteral
           {
           propertyAssignment
            propertyName
             identifierName
              identifier
               router
            :
            singleExpression
             singleExpression
              identifierName
               identifier
                PropTypes
             .
             identifierName
              identifier
               object
           ,
           }
        ;
      classElement
       propertyMemberDeclaration
        propertyMemberBase
         static
        propertyName
         identifierName
          identifier
           defaultRectangle
        callSignature
         (
         )
        {
        functionBody
         sourceElements
          sourceElement
           statement
            expressionStatement
             expressionSequence
              singleExpression
               identifierName
                reservedWord
                 keyword
                  return
               singleExpression
                new
                singleExpression
                 identifierName
                  identifier
                   Rectangle
                arguments
                 (
                 argumentList
                  argument
                   singleExpression
                    literal
                     "default"
                  ,
                  argument
                   singleExpression
                    literal
                     numericLiteral
                      0
                  ,
                  argument
                   singleExpression
                    literal
                     numericLiteral
                      0
                  ,
                  argument
                   singleExpression
                    literal
                     numericLiteral
                      100
                  ,
                  argument
                   singleExpression
                    literal
                     numericLiteral
                      100
                 )
        }
      }
  sourceElement
   statement
    classDeclaration
     class
     identifier
      Circle
     classHeritage
      classExtendsClause
       extends
       typeReference
        typeName
         identifier
          Shape
     classTail
      {
      classElement
       propertyMemberDeclaration
        propertyMemberBase
         static
        propertyName
         identifierName
          identifier
           defaultCircle
        callSignature
         (
         )
        {
        functionBody
         sourceElements
          sourceElement
           statement
            expressionStatement
             expressionSequence
              singleExpression
               identifierName
                reservedWord
                 keyword
                  return
               singleExpression
                new
                singleExpression
                 identifierName
                  identifier
                   Circle
                arguments
                 (
                 argumentList
                  argument
                   singleExpression
                    literal
                     "default"
                  ,
                  argument
                   singleExpression
                    literal
                     numericLiteral
                      0
                  ,
                  argument
                   singleExpression
                    literal
                     numericLiteral
                      0
                  ,
                  argument
                   singleExpression
                    literal
                     numericLiteral
                      100
                 )
        }
      }
  sourceElement
   statement
    variableStatement
     varModifier
      var
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         defRectangle
       =
       singleExpression
        singleExpression
         singleExpression
          identifierName
           identifier
            Rectangle
         .
         identifierName
          identifier
           defaultRectangle
        arguments
         (
         )
  sourceElement
   statement
    variableStatement
     varModifier
      var
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         defCircle
       =
       singleExpression
        singleExpression
         singleExpression
          identifierName
           identifier
            Circle
         .
         identifierName
          identifier
           defaultCircle
        arguments
         (
         )
  sourceElement
   statement
    classDeclaration
     class
     identifier
      Rectangle
     classHeritage
     classTail
      {
      classElement
       constructorDeclaration
        constructor
        (
        formalParameterList
         formalParameterArg
          assignable
           identifier
            width
         ,
         formalParameterArg
          assignable
           identifier
            height
        )
        {
        functionBody
         sourceElements
          sourceElement
           statement
            expressionStatement
             expressionSequence
              singleExpression
               singleExpression
                singleExpression
                 this
                .
                identifierName
                 identifier
                  _width
               =
               singleExpression
                identifierName
                 identifier
                  width
                singleExpression
                 singleExpression
                  singleExpression
                   this
                  .
                  identifierName
                   identifier
                    _height
                 =
                 singleExpression
                  identifierName
                   identifier
                    height
        }
      classElement
       propertyMemberDeclaration
        propertyMemberBase
        setAccessor
         setter
          identifier
           set
          classElementName
           propertyName
            identifierName
             identifier
              width
         (
         formalParameterList
          formalParameterArg
           assignable
            identifier
             width
         )
         {
         functionBody
          sourceElements
           sourceElement
            statement
             expressionStatement
              expressionSequence
               singleExpression
                singleExpression
                 singleExpression
                  this
                 .
                 identifierName
                  identifier
                   _width
                =
                singleExpression
                 identifierName
                  identifier
                   width
         }
      classElement
       propertyMemberDeclaration
        propertyMemberBase
        getAccessor
         getter
          identifier
           get
          classElementName
           propertyName
            identifierName
             identifier
              width
         (
         )
         {
         functionBody
          sourceElements
           sourceElement
            statement
             expressionStatement
              expressionSequence
               singleExpression
                identifierName
                 reservedWord
                  keyword
                   return
                singleExpression
                 singleExpression
                  this
                 .
                 identifierName
                  identifier
                   _width
         }
      classElement
       propertyMemberDeclaration
        propertyMemberBase
        setAccessor
         setter
          identifier
           set
          classElementName
           propertyName
            identifierName
             identifier
              height
         (
         formalParameterList
          formalParameterArg
           assignable
            identifier
             height
         )
         {
         functionBody
          sourceElements
           sourceElement
            statement
             expressionStatement
              expressionSequence
               singleExpression
                singleExpression
                 singleExpression
                  this
                 .
                 identifierName
                  identifier
                   _height
                =
                singleExpression
                 identifierName
                  identifier
                   height
         }
      classElement
       propertyMemberDeclaration
        propertyMemberBase
        getAccessor
         getter
          identifier
           get
          classElementName
           propertyName
            identifierName
             identifier
              height
         (
         )
         {
         functionBody
          sourceElements
           sourceElement
            statement
             expressionStatement
              expressionSequence
               singleExpression
                identifierName
                 reservedWord
                  keyword
                   return
                singleExpression
                 singleExpression
                  this
                 .
                 identifierName
                  identifier
                   _height
         }
      classElement
       propertyMemberDeclaration
        propertyMemberBase
        getAccessor
         getter
          identifier
           get
          classElementName
           propertyName
            identifierName
             identifier
              area
         (
         )
         {
         functionBody
          sourceElements
           sourceElement
            statement
             expressionStatement
              expressionSequence
               singleExpression
                identifierName
                 reservedWord
                  keyword
                   return
                singleExpression
                 singleExpression
                  singleExpression
                   this
                  .
                  identifierName
                   identifier
                    _width
                 *
                 singleExpression
                  singleExpression
                   this
                  .
                  identifierName
                   identifier
                    _height
         }
      }
  sourceElement
   statement
    variableStatement
     varModifier
      var
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         r
       =
       singleExpression
        new
        singleExpression
         identifierName
          identifier
           Rectangle
        arguments
         (
         argumentList
          argument
           singleExpression
            literal
             numericLiteral
              50
          ,
          argument
           singleExpression
            literal
             numericLiteral
              20
         )
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         identifierName
          identifier
           r
        .
        identifierName
         identifier
          area
       ===
       singleExpression
        literal
         numericLiteral
          1000
  sourceElement
   statement
    classDeclaration
     class
     identifier
      A
     classHeritage
     classTail
      {
      classElement
       statement
        emptyStatement_
         ;
      }
  sourceElement
   statement
    classDeclaration
     class
     identifier
      B
     classHeritage
     classTail
      {
      classElement
       propertyMemberDeclaration
        propertyMemberBase
        getAccessor
         getter
          identifier
           get
          classElementName
           propertyName
            [
            singleExpression
             identifierName
              identifier
               runtimeCalc
            ]
         (
         )
         {
         functionBody
          sourceElements
           sourceElement
            statement
             expressionStatement
              expressionSequence
               singleExpression
                identifierName
                 reservedWord
                  keyword
                   return
                singleExpression
                 literal
                  numericLiteral
                   1
         }
      classElement
       statement
        emptyStatement_
         ;
      classElement
       propertyMemberDeclaration
        propertyMemberBase
        setAccessor
         setter
          identifier
           set
          classElementName
           propertyName
            [
            singleExpression
             identifierName
              identifier
               runtimeCalc
            ]
         (
         formalParameterList
          formalParameterArg
           assignable
            identifier
             p
         )
         {
         functionBody
         }
      classElement
       statement
        emptyStatement_
         ;
      classElement
       propertyMemberDeclaration
        propertyMemberBase
        getAccessor
         getter
          identifier
           get
          classElementName
           propertyName
            'string as key'
         (
         )
         {
         functionBody
         }
      classElement
       statement
        emptyStatement_
         ;
      }
  sourceElement
   statement
    variableStatement
     varModifier
      let
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         Obj
       =
       singleExpression
        objectLiteral
         {
         propertyAssignment
          generatorMethod
           propertyName
            [
            singleExpression
             identifierName
              identifier
               asdfg
            ]
           (
           formalParameterList
            formalParameterArg
             assignable
              identifier
               a
           )
           {
           functionBody
           }
         ,
         propertyAssignment
          generatorMethod
           *
           propertyName
            identifierName
             identifier
              foo
           (
           )
           {
           functionBody
           }
         ,
         propertyAssignment
          generatorMethod
           propertyName
            identifierName
             identifier
              f
           (
           )
           {
           functionBody
           }
         ,
         propertyAssignment
          getAccessor
           getter
            identifier
             get
            classElementName
             propertyName
              identifierName
               identifier
                a
           (
           )
           {
           functionBody
           }
         ,
         propertyAssignment
          setAccessor
           setter
            identifier
             set
            classElementName
             propertyName
              identifierName
               identifier
                a
           (
           formalParameterList
            formalParameterArg
             assignable
              arrayLiteral
               [
               elementList
                arrayElement
                 singleExpression
                  identifierName
                   identifier
                    aa
               ]
             =
             singleExpression
              literal
               numericLiteral
                123
           )
           {
           functionBody
           }
         ,
         propertyAssignment
          ...
          singleExpression
           identifierName
            identifier
             anotherObj
         ,
         propertyAssignment
          ...
          singleExpression
           objectLiteral
            {
            propertyAssignment
             identifierOrKeyWord
              identifier
               speradObjectLiteral
            }
         ,
         propertyAssignment
          ...
          singleExpression
           singleExpression
            identifierName
             identifier
              functionResult
           arguments
            (
            )
         }
  sourceElement
   statement
    variableStatement
     varModifier
      const
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         PREFIX
       =
       singleExpression
        literal
         "prefix"
     ;
  sourceElement
   statement
    classDeclaration
     class
     identifier
      ClassWithField
     classHeritage
     classTail
      {
      classElement
       propertyMemberDeclaration
        propertyMemberBase
        propertyName
         identifierName
          identifier
           field
        ;
      classElement
       propertyMemberDeclaration
        propertyMemberBase
        propertyName
         identifierName
          identifier
           fieldWithInitializer
        initializer
         =
         singleExpression
          literal
           "instance field"
        ;
      classElement
       propertyMemberDeclaration
        propertyMemberBase
        propertyName
         [
         singleExpression
          literal
           templateStringLiteral
            `
            templateStringAtom
             ${
             singleExpression
              identifierName
               identifier
                PREFIX
             }
            templateStringAtom
             F
            templateStringAtom
             i
            templateStringAtom
             e
            templateStringAtom
             l
            templateStringAtom
             d
            `
         ]
        initializer
         =
         singleExpression
          literal
           "prefixed field"
        ;
      }
  sourceElement
   statement
    variableStatement
     varModifier
      const
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         instance
       =
       singleExpression
        new
        singleExpression
         identifierName
          identifier
           ClassWithField
        arguments
         (
         )
     ;
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         identifierName
          identifier
           console
        .
        identifierName
         identifier
          log
       arguments
        (
        argumentList
         argument
          singleExpression
           singleExpression
            singleExpression
             identifierName
              identifier
               Object
            .
            identifierName
             identifier
              hasOwn
           arguments
            (
            argumentList
             argument
              singleExpression
               identifierName
                identifier
                 instance
             ,
             argument
              singleExpression
               literal
                "field"
            )
        )
     ;
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         identifierName
          identifier
           console
        .
        identifierName
         identifier
          log
       arguments
        (
        argumentList
         argument
          singleExpression
           singleExpression
            identifierName
             identifier
              instance
           .
           identifierName
            identifier
             field
        )
     ;
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         identifierName
          identifier
           console
        .
        identifierName
         identifier
          log
       arguments
        (
        argumentList
         argument
          singleExpression
           singleExpression
            identifierName
             identifier
              instance
           .
           identifierName
            identifier
             fieldWithInitializer
        )
     ;
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         identifierName
          identifier
           console
        .
        identifierName
         identifier
          log
       arguments
        (
        argumentList
         argument
          singleExpression
           singleExpression
            identifierName
             identifier
              instance
           .
           identifierName
            identifier
             prefixField
        )
     ;
  sourceElement
   statement
    classDeclaration
     class
     identifier
      ClassWithStaticInitializationBlock
     classHeritage
     classTail
      {
      classElement
       propertyMemberDeclaration
        propertyMemberBase
         static
        propertyName
         identifierName
          identifier
           staticProperty1
        initializer
         =
         singleExpression
          literal
           'Property 1'
        ;
      classElement
       propertyMemberDeclaration
        propertyMemberBase
         static
        propertyName
         identifierName
          identifier
           staticProperty2
        ;
      classElement
       statement
        expressionStatement
         expressionSequence
          singleExpression
           identifierName
            reservedWord
             keyword
              static
      classElement
       statement
        block
         {
         statementList
          statement
           expressionStatement
            expressionSequence
             singleExpression
              singleExpression
               singleExpression
                this
               .
               identifierName
                identifier
                 staticProperty2
              =
              singleExpression
               literal
                'Property 2'
            ;
         }
      }
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         identifierName
          identifier
           console
        .
        identifierName
         identifier
          log
       arguments
        (
        argumentList
         argument
          singleExpression
           singleExpression
            identifierName
             identifier
              ClassWithStaticInitializationBlock
           .
           identifierName
            identifier
             staticProperty1
        )
     ;
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         identifierName
          identifier
           console
        .
        identifierName
         identifier
          log
       arguments
        (
        argumentList
         argument
          singleExpression
           singleExpression
            identifierName
             identifier
              ClassWithStaticInitializationBlock
           .
           identifierName
            identifier
             staticProperty2
        )
     ;
 <EOF>
