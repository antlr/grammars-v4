program
 sourceElements
  sourceElement
   statement
    variableStatement
     varModifier
      let
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         x
       typeAnnotation
        :
        type_
         unionOrIntersectionOrPrimaryType
          primaryType
           predefinedType
            number
       =
       singleExpression
        literal
         numericLiteral
          10
      ,
      variableDeclaration
       identifierOrKeyWord
        identifier
         y
       =
       singleExpression
        literal
         numericLiteral
          20
     ;
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       identifierName
        reservedWord
         keyword
          if
       singleExpression
        (
        expressionSequence
         singleExpression
          singleExpression
           identifierName
            identifier
             x
          >
          singleExpression
           identifierName
            identifier
             y
        )
  sourceElement
   statement
    block
     {
     statementList
      statement
       expressionStatement
        expressionSequence
         singleExpression
          singleExpression
           singleExpression
            identifierName
             identifier
              console
           .
           identifierName
            identifier
             log
          arguments
           (
           argumentList
            argument
             singleExpression
              literal
               'x is greater than y.'
           )
        ;
     }
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       identifierName
        reservedWord
         keyword
          else
  sourceElement
   statement
    block
     {
     statementList
      statement
       expressionStatement
        expressionSequence
         singleExpression
          singleExpression
           singleExpression
            identifierName
             identifier
              console
           .
           identifierName
            identifier
             log
          arguments
           (
           argumentList
            argument
             singleExpression
              literal
               'x is less than or equal to y.'
           )
        ;
     }
  sourceElement
   statement
    switchStatement
     switch
     (
     expressionSequence
      singleExpression
       identifierName
        identifier
         x
       singleExpression
        -
        singleExpression
         identifierName
          identifier
           y
     )
     caseBlock
      {
      caseClauses
       caseClause
        case
        expressionSequence
         singleExpression
          literal
           numericLiteral
            0
        :
        statementList
         statement
          expressionStatement
           expressionSequence
            singleExpression
             singleExpression
              singleExpression
               identifierName
                identifier
                 console
              .
              identifierName
               identifier
                log
             arguments
              (
              argumentList
               argument
                singleExpression
                 literal
                  "Result: 0"
              )
           ;
         statement
          expressionStatement
           expressionSequence
            singleExpression
             identifierName
              reservedWord
               keyword
                break
           ;
       caseClause
        case
        expressionSequence
         singleExpression
          literal
           numericLiteral
            5
        :
        statementList
         statement
          expressionStatement
           expressionSequence
            singleExpression
             singleExpression
              singleExpression
               identifierName
                identifier
                 console
              .
              identifierName
               identifier
                log
             arguments
              (
              argumentList
               argument
                singleExpression
                 literal
                  "Result: 5"
              )
           ;
         statement
          expressionStatement
           expressionSequence
            singleExpression
             identifierName
              reservedWord
               keyword
                break
           ;
       caseClause
        case
        expressionSequence
         singleExpression
          literal
           numericLiteral
            10
        :
        statementList
         statement
          expressionStatement
           expressionSequence
            singleExpression
             singleExpression
              singleExpression
               identifierName
                identifier
                 console
              .
              identifierName
               identifier
                log
             arguments
              (
              argumentList
               argument
                singleExpression
                 literal
                  "Result: 10"
              )
           ;
         statement
          expressionStatement
           expressionSequence
            singleExpression
             identifierName
              reservedWord
               keyword
                break
           ;
      }
  sourceElement
   statement
    iterationStatement
     for
     (
     expressionSequence
      singleExpression
       identifierName
        reservedWord
         keyword
          let
       singleExpression
        singleExpression
         identifierName
          identifier
           i
        =
        singleExpression
         literal
          numericLiteral
           0
     ;
     expressionSequence
      singleExpression
       singleExpression
        identifierName
         identifier
          i
       <
       singleExpression
        literal
         numericLiteral
          3
     ;
     expressionSequence
      singleExpression
       singleExpression
        identifierName
         identifier
          i
       ++
     )
     statement
      block
       {
       statementList
        statement
         expressionStatement
          expressionSequence
           singleExpression
            singleExpression
             singleExpression
              identifierName
               identifier
                console
             .
             identifierName
              identifier
               log
            arguments
             (
             argumentList
              argument
               singleExpression
                singleExpression
                 literal
                  "Block statement execution no."
                +
                singleExpression
                 identifierName
                  identifier
                   i
             )
          ;
       }
  sourceElement
   statement
    variableStatement
     varModifier
      let
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         str
       =
       singleExpression
        literal
         "Hello World"
     ;
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       identifierName
        reservedWord
         keyword
          for
       singleExpression
        (
        expressionSequence
         singleExpression
          identifierName
           reservedWord
            keyword
             var
          singleExpression
           identifierName
            identifier
             char
           singleExpression
            identifierName
             identifier
              of
            singleExpression
             identifierName
              identifier
               str
        )
  sourceElement
   statement
    block
     {
     statementList
      statement
       expressionStatement
        expressionSequence
         singleExpression
          singleExpression
           singleExpression
            identifierName
             identifier
              console
           .
           identifierName
            identifier
             log
          arguments
           (
           argumentList
            argument
             singleExpression
              identifierName
               identifier
                char
           )
        ;
     }
  sourceElement
   statement
    variableStatement
     varModifier
      let
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         arr
       =
       singleExpression
        arrayLiteral
         [
         elementList
          arrayElement
           singleExpression
            literal
             numericLiteral
              10
          ,
          arrayElement
           singleExpression
            literal
             numericLiteral
              20
          ,
          arrayElement
           singleExpression
            literal
             numericLiteral
              30
          ,
          arrayElement
           singleExpression
            literal
             numericLiteral
              40
         ]
     ;
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       identifierName
        reservedWord
         keyword
          for
       singleExpression
        (
        expressionSequence
         singleExpression
          identifierName
           reservedWord
            keyword
             var
          singleExpression
           identifierName
            identifier
             index
           singleExpression
            identifierName
             reservedWord
              keyword
               in
            singleExpression
             identifierName
              identifier
               arr
        )
  sourceElement
   statement
    block
     {
     statementList
      statement
       expressionStatement
        expressionSequence
         singleExpression
          singleExpression
           singleExpression
            identifierName
             identifier
              console
           .
           identifierName
            identifier
             log
          arguments
           (
           argumentList
            argument
             singleExpression
              identifierName
               identifier
                index
           )
        ;
      statement
       expressionStatement
        expressionSequence
         singleExpression
          singleExpression
           singleExpression
            identifierName
             identifier
              console
           .
           identifierName
            identifier
             log
          arguments
           (
           argumentList
            argument
             singleExpression
              identifierName
               identifier
                arr
              singleExpression
               arrayLiteral
                [
                elementList
                 arrayElement
                  singleExpression
                   identifierName
                    identifier
                     index
                ]
           )
        ;
     }
  sourceElement
   statement
    variableStatement
     varModifier
      let
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         i
       typeAnnotation
        :
        type_
         unionOrIntersectionOrPrimaryType
          primaryType
           predefinedType
            number
       =
       singleExpression
        literal
         numericLiteral
          2
     ;
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       identifierName
        reservedWord
         keyword
          do
  sourceElement
   statement
    block
     {
     statementList
      statement
       expressionStatement
        expressionSequence
         singleExpression
          singleExpression
           singleExpression
            identifierName
             identifier
              console
           .
           identifierName
            identifier
             log
          arguments
           (
           argumentList
            argument
             singleExpression
              singleExpression
               literal
                "Block statement execution no."
              +
              singleExpression
               identifierName
                identifier
                 i
           )
      statement
       expressionStatement
        expressionSequence
         singleExpression
          singleExpression
           identifierName
            identifier
             i
          ++
        ;
     }
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       identifierName
        reservedWord
         keyword
          while
       singleExpression
        (
        expressionSequence
         singleExpression
          singleExpression
           identifierName
            identifier
             i
          <
          singleExpression
           literal
            numericLiteral
             4
        )
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       identifierName
        reservedWord
         keyword
          while
       singleExpression
        (
        expressionSequence
         singleExpression
          singleExpression
           identifierName
            identifier
             i
          <
          singleExpression
           literal
            numericLiteral
             4
        )
  sourceElement
   statement
    block
     {
     statementList
      statement
       expressionStatement
        expressionSequence
         singleExpression
          singleExpression
           singleExpression
            identifierName
             identifier
              console
           .
           identifierName
            identifier
             log
          arguments
           (
           argumentList
            argument
             singleExpression
              singleExpression
               literal
                "Block statement execution no."
              +
              singleExpression
               identifierName
                identifier
                 i
           )
      statement
       expressionStatement
        expressionSequence
         singleExpression
          singleExpression
           identifierName
            identifier
             i
          ++
        ;
     }
 <EOF>
