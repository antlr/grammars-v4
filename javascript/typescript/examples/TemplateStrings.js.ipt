program
 sourceElements
  sourceElement
   statement
    variableStatement
     varModifier
      var
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         empty
       =
       singleExpression
        literal
         templateStringLiteral
          `
          `
     ;
  sourceElement
   statement
    variableStatement
     varModifier
      var
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         simple
       =
       singleExpression
        literal
         templateStringLiteral
          `
          templateStringAtom
           f
          templateStringAtom
           o
          templateStringAtom
           o
          templateStringAtom
           b
          templateStringAtom
           a
          templateStringAtom
           r
          `
     ;
  sourceElement
   statement
    variableStatement
     varModifier
      var
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         lineBreak
       =
       singleExpression
        literal
         templateStringLiteral
          `
          templateStringAtom
           \n
          `
     ;
  sourceElement
   statement
    variableStatement
     varModifier
      var
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         nested
       =
       singleExpression
        literal
         templateStringLiteral
          `
          templateStringAtom
           a
          templateStringAtom
           a
          templateStringAtom
           a
          templateStringAtom
           ${
           singleExpression
            literal
             templateStringLiteral
              `
              templateStringAtom
               b
              templateStringAtom
               b
              templateStringAtom
               b
              `
           }
          templateStringAtom
           c
          templateStringAtom
           c
          templateStringAtom
           c
          `
     ;
  sourceElement
   statement
    variableStatement
     varModifier
      let
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         str
       =
       singleExpression
        literal
         templateStringLiteral
          `
          templateStringAtom
           ${
           singleExpression
            identifierName
             identifier
              dsName
           }
          templateStringAtom
           ${
           singleExpression
            singleExpression
             identifierName
              identifier
               parameterStr
            ?
            singleExpression
             literal
              templateStringLiteral
               `
               templateStringAtom
                (
               templateStringAtom
                 
               templateStringAtom
                ${
                singleExpression
                 identifierName
                  identifier
                   parameterStr
                }
               templateStringAtom
                 
               templateStringAtom
                )
               `
            :
            singleExpression
             literal
              ""
           }
          templateStringAtom
           ${
           singleExpression
            singleExpression
             identifierName
              identifier
               returns
            ?
            singleExpression
             literal
              templateStringLiteral
               `
               templateStringAtom
                {
               templateStringAtom
                \n
               templateStringAtom
                ${
                singleExpression
                 identifierName
                  identifier
                   returns
                }
               templateStringAtom
                }
               `
            :
            singleExpression
             literal
              ""
           }
          `
     ;
  sourceElement
   statement
    variableStatement
     varModifier
      let
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         templateStringWithEscapes
       =
       singleExpression
        literal
         templateStringLiteral
          `
          templateStringAtom
           \\
          templateStringAtom
            
          templateStringAtom
           \`
          templateStringAtom
            
          templateStringAtom
           \n
          templateStringAtom
            
          templateStringAtom
           \$
          `
     ;
  sourceElement
   statement
    variableStatement
     varModifier
      let
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         templateStringWithEscapedLineBreak
       =
       singleExpression
        literal
         templateStringLiteral
          `
          templateStringAtom
           \\n
          `
     ;
  sourceElement
   statement
    variableStatement
     varModifier
      let
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         nestedBracesTest
       =
       singleExpression
        literal
         templateStringLiteral
          `
          templateStringAtom
           ${
           singleExpression
            singleExpression
             singleExpression
              singleExpression
               singleExpression
                arrayLiteral
                 [
                 elementList
                  arrayElement
                   singleExpression
                    literal
                     numericLiteral
                      1
                  ,
                  arrayElement
                   singleExpression
                    literal
                     numericLiteral
                      2
                  ,
                  arrayElement
                   singleExpression
                    literal
                     numericLiteral
                      3
                 ]
               .
               identifierName
                identifier
                 map
              arguments
               (
               argumentList
                argument
                 singleExpression
                  anonymousFunction
                   arrowFunctionDeclaration
                    arrowFunctionParameters
                     propertyName
                      identifierName
                       identifier
                        x
                    =>
                    arrowFunctionBody
                     {
                     functionBody
                      sourceElements
                       sourceElement
                        statement
                         expressionStatement
                          expressionSequence
                           singleExpression
                            identifierName
                             reservedWord
                              keyword
                               return
                            singleExpression
                             singleExpression
                              identifierName
                               identifier
                                x
                             *
                             singleExpression
                              literal
                               numericLiteral
                                2
                          ;
                     }
               )
             .
             identifierName
              identifier
               join
            arguments
             (
             argumentList
              argument
               singleExpression
                literal
                 ""
             )
           }
          `
     ;
 <EOF>
