program
 sourceElements
  sourceElement
   statement
    variableStatement
     varModifier
      let
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         object
       =
       singleExpression
        objectLiteral
         {
         }
     ;
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       identifierName
        reservedWord
         keyword
          for
       singleExpression
        (
        expressionSequence
         singleExpression
          identifierName
           reservedWord
            keyword
             let
          singleExpression
           identifierName
            identifier
             field
           singleExpression
            identifierName
             reservedWord
              keyword
               in
            singleExpression
             identifierName
              identifier
               object
        )
  sourceElement
   statement
    block
     {
     }
  sourceElement
   statement
    emptyStatement_
     ;
  sourceElement
   statement
    variableStatement
     varModifier
      let
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         array
       =
       singleExpression
        arrayLiteral
         [
         elementList
         ]
     ;
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       identifierName
        reservedWord
         keyword
          for
       singleExpression
        (
        expressionSequence
         singleExpression
          identifierName
           reservedWord
            keyword
             let
          singleExpression
           identifierName
            identifier
             element
           singleExpression
            identifierName
             identifier
              of
            singleExpression
             identifierName
              identifier
               array
        )
  sourceElement
   statement
    block
     {
     }
  sourceElement
   statement
    emptyStatement_
     ;
  sourceElement
   statement
    iterationStatement
     for
     (
     varModifier
      let
     variableDeclaration
      identifierOrKeyWord
       identifier
        element
      typeAnnotation
       :
       type_
        unionOrIntersectionOrPrimaryType
         primaryType
          predefinedType
           number
     identifier
      of
     expressionSequence
      singleExpression
       identifierName
        identifier
         array
     )
     statement
      block
       {
       }
  sourceElement
   statement
    emptyStatement_
     ;
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       identifierName
        reservedWord
         keyword
          for
       singleExpression
        await
        singleExpression
         (
         expressionSequence
          singleExpression
           identifierName
            reservedWord
             keyword
              const
           singleExpression
            identifierName
             identifier
              document
            singleExpression
             identifierName
              identifier
               of
             singleExpression
              identifierName
               identifier
                array
         )
  sourceElement
   statement
    block
     {
     }
  sourceElement
   statement
    emptyStatement_
     ;
  sourceElement
   statement
    iterationStatement
     for
     await
     (
     varModifier
      const
     variableDeclaration
      identifierOrKeyWord
       identifier
        document
      typeAnnotation
       :
       type_
        unionOrIntersectionOrPrimaryType
         primaryType
          predefinedType
           string
     identifier
      of
     expressionSequence
      singleExpression
       identifierName
        identifier
         array
     )
     statement
      block
       {
       }
  sourceElement
   statement
    emptyStatement_
     ;
  sourceElement
   statement
    iterationStatement
     for
     (
     singleExpression
      identifierName
       reservedWord
        keyword
         let
      singleExpression
       arrayLiteral
        [
        elementList
         arrayElement
          singleExpression
           identifierName
            identifier
             field
         ,
         arrayElement
          singleExpression
           identifierName
            identifier
             value
        ]
     identifier
      of
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         singleExpression
          identifierName
           identifier
            Object
         .
         identifierName
          identifier
           entries
        arguments
         (
         argumentList
          argument
           singleExpression
            identifierName
             identifier
              object
         )
       as
       asExpression
        singleExpression
         arrayLiteral
          [
          elementList
           arrayElement
            singleExpression
             identifierName
              identifier
               string
           ,
           arrayElement
            singleExpression
             identifierName
              identifier
               any
          ]
     )
     statement
      block
       {
       }
  sourceElement
   statement
    emptyStatement_
     ;
 <EOF>
