program
 sourceElements
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       identifierName
        reservedWord
         keyword
          interface
       singleExpression
        identifierName
         identifier
          IPerson
  sourceElement
   statement
    block
     {
     statementList
      statement
       variableStatement
        variableDeclarationList
         variableDeclaration
          identifierOrKeyWord
           identifier
            name
          typeAnnotation
           :
           type_
            unionOrIntersectionOrPrimaryType
             primaryType
              predefinedType
               string
        ;
     }
  sourceElement
   statement
    classDeclaration
     class
     identifier
      Person
     classHeritage
      implementsClause
       implements
       classOrInterfaceTypeList
        typeReference
         typeName
          identifier
           IPerson
     classTail
      {
      classElement
       propertyMemberDeclaration
        propertyMemberBase
         accessibilityModifier
          public
        propertyName
         identifierName
          identifier
           publicString
        typeAnnotation
         :
         type_
          unionOrIntersectionOrPrimaryType
           primaryType
            predefinedType
             string
        ;
      classElement
       propertyMemberDeclaration
        propertyMemberBase
         accessibilityModifier
          private
        propertyName
         identifierName
          identifier
           privateString
        typeAnnotation
         :
         type_
          unionOrIntersectionOrPrimaryType
           primaryType
            predefinedType
             string
        ;
      classElement
       propertyMemberDeclaration
        propertyMemberBase
         accessibilityModifier
          protected
        propertyName
         identifierName
          identifier
           protectedString
        typeAnnotation
         :
         type_
          unionOrIntersectionOrPrimaryType
           primaryType
            predefinedType
             string
        ;
      classElement
       propertyMemberDeclaration
        propertyMemberBase
         readonly
        propertyName
         identifierName
          identifier
           readonlyString
        typeAnnotation
         :
         type_
          unionOrIntersectionOrPrimaryType
           primaryType
            predefinedType
             string
        ;
      classElement
       propertyMemberDeclaration
        propertyMemberBase
        propertyName
         identifierName
          identifier
           name
        typeAnnotation
         :
         type_
          unionOrIntersectionOrPrimaryType
           primaryType
            predefinedType
             string
        ;
      classElement
       constructorDeclaration
        constructor
        (
        formalParameterList
         formalParameterArg
          assignable
           identifier
            name
          typeAnnotation
           :
           type_
            unionOrIntersectionOrPrimaryType
             primaryType
              predefinedType
               string
        )
        {
        functionBody
         sourceElements
          sourceElement
           statement
            expressionStatement
             expressionSequence
              singleExpression
               singleExpression
                singleExpression
                 this
                .
                identifierName
                 identifier
                  name
               =
               singleExpression
                identifierName
                 identifier
                  name
             ;
        }
      }
  sourceElement
   statement
    classDeclaration
     class
     identifier
      Employee
     classHeritage
      classExtendsClause
       extends
       typeReference
        typeName
         identifier
          Person
     classTail
      {
      classElement
       propertyMemberDeclaration
        propertyMemberBase
        propertyName
         identifierName
          identifier
           empCode
        typeAnnotation
         :
         type_
          unionOrIntersectionOrPrimaryType
           primaryType
            predefinedType
             number
        ;
      classElement
       propertyMemberDeclaration
        propertyMemberBase
        propertyName
         identifierName
          identifier
           currentUser
        typeAnnotation
         :
         type_
          unionOrIntersectionOrPrimaryType
           primaryType
            predefinedType
             any
        ;
      classElement
       propertyMemberDeclaration
        propertyMemberBase
         static
        propertyName
         identifierName
          identifier
           pi
        typeAnnotation
         :
         type_
          unionOrIntersectionOrPrimaryType
           primaryType
            predefinedType
             number
        initializer
         =
         singleExpression
          literal
           numericLiteral
            3.14
        ;
      classElement
       constructorDeclaration
        constructor
        (
        formalParameterList
         formalParameterArg
          assignable
           identifier
            empcode
          typeAnnotation
           :
           type_
            unionOrIntersectionOrPrimaryType
             primaryType
              predefinedType
               number
         ,
         formalParameterArg
          assignable
           identifier
            name
          typeAnnotation
           :
           type_
            unionOrIntersectionOrPrimaryType
             primaryType
              predefinedType
               string
        )
        {
        functionBody
         sourceElements
          sourceElement
           statement
            expressionStatement
             expressionSequence
              singleExpression
               identifierName
                reservedWord
                 keyword
                  super
               singleExpression
                (
                expressionSequence
                 singleExpression
                  identifierName
                   identifier
                    name
                )
             ;
          sourceElement
           statement
            expressionStatement
             expressionSequence
              singleExpression
               singleExpression
                singleExpression
                 this
                .
                identifierName
                 identifier
                  empCode
               =
               singleExpression
                identifierName
                 identifier
                  empcode
             ;
        }
      classElement
       propertyMemberDeclaration
        propertyMemberBase
        getAccessor
         getter
          identifier
           get
          classElementName
           propertyName
            identifierName
             identifier
              user
         (
         )
         {
         functionBody
          sourceElements
           sourceElement
            statement
             expressionStatement
              expressionSequence
               singleExpression
                identifierName
                 reservedWord
                  keyword
                   return
                singleExpression
                 singleExpression
                  this
                 .
                 identifierName
                  identifier
                   currentUser
              ;
         }
      classElement
       propertyMemberDeclaration
        propertyMemberBase
        setAccessor
         setter
          identifier
           set
          classElementName
           propertyName
            identifierName
             identifier
              user
         (
         formalParameterList
          formalParameterArg
           assignable
            identifier
             usr
           typeAnnotation
            :
            type_
             unionOrIntersectionOrPrimaryType
              primaryType
               predefinedType
                any
         )
         {
         functionBody
          sourceElements
           sourceElement
            statement
             expressionStatement
              expressionSequence
               singleExpression
                singleExpression
                 singleExpression
                  this
                 .
                 identifierName
                  identifier
                   currentUser
                =
                singleExpression
                 identifierName
                  identifier
                   usr
              ;
         }
      classElement
       propertyMemberDeclaration
        propertyMemberBase
        propertyName
         identifierName
          identifier
           displayName
        callSignature
         (
         )
         typeAnnotation
          :
          type_
           unionOrIntersectionOrPrimaryType
            primaryType
             predefinedType
              void
        {
        functionBody
         sourceElements
          sourceElement
           statement
            expressionStatement
             expressionSequence
              singleExpression
               singleExpression
                singleExpression
                 identifierName
                  identifier
                   console
                .
                identifierName
                 identifier
                  log
               arguments
                (
                argumentList
                 argument
                  singleExpression
                   singleExpression
                    singleExpression
                     singleExpression
                      literal
                       "Name = "
                     +
                     singleExpression
                      singleExpression
                       this
                      .
                      identifierName
                       identifier
                        name
                    +
                    singleExpression
                     literal
                      ", Employee Code = "
                   +
                   singleExpression
                    singleExpression
                     this
                    .
                    identifierName
                     identifier
                      empCode
                )
             ;
        }
      }
  sourceElement
   export
   statement
    classDeclaration
     class
     identifier
      myClass
     classHeritage
     classTail
      {
      classElement
       propertyMemberDeclaration
        propertyMemberBase
         accessibilityModifier
          public
         async
        propertyName
         identifierName
          identifier
           foo
        callSignature
         (
         )
         typeAnnotation
          :
          type_
           unionOrIntersectionOrPrimaryType
            primaryType
             typeReference
              typeName
               identifier
                Promise
              typeGeneric
               <
               typeArgumentList
                typeArgument
                 type_
                  unionOrIntersectionOrPrimaryType
                   primaryType
                    predefinedType
                     any
               >
        {
        functionBody
        }
      }
  sourceElement
   statement
    variableStatement
     varModifier
      let
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         emp
       =
       singleExpression
        new
        singleExpression
         identifierName
          identifier
           Employee
        arguments
         (
         argumentList
          argument
           singleExpression
            literal
             numericLiteral
              100
          ,
          argument
           singleExpression
            literal
             "Steve"
         )
     ;
  sourceElement
   statement
    importStatement
     import
     importFromBlock
      importModuleItems
       {
       importAliasName
        moduleExportName
         identifierName
          identifier
           Controller
       ,
       importAliasName
        moduleExportName
         identifierName
          identifier
           Get
       ,
       importAliasName
        moduleExportName
         identifierName
          identifier
           Post
       }
      importFrom
       from
       '@nestjs/common'
      eos
       ;
  sourceElement
   export
   statement
    classDeclaration
     class
     identifier
      NotController
     classHeritage
     classTail
      {
      classElement
       decoratorList
        decorator
         @
         decoratorCallExpression
          decoratorMemberExpression
           identifier
            Post
          arguments
           (
           )
       propertyMemberDeclaration
        propertyMemberBase
        propertyName
         identifierName
          identifier
           notControllerPost
        callSignature
         (
         parameterList
          parameter
           requiredParameter
            identifierOrPattern
             identifierName
              identifier
               body
         )
        {
        functionBody
         sourceElements
          sourceElement
           statement
            expressionStatement
             expressionSequence
              singleExpression
               identifierName
                reservedWord
                 keyword
                  return
               singleExpression
                literal
                 'This is not an api method'
             ;
        }
      }
  sourceElement
   export
   statement
    expressionStatement
     expressionSequence
      singleExpression
       identifierName
        reservedWord
         keyword
          default
       singleExpression
        class
        identifier
         CustomerModel
        classHeritage
        classTail
         {
         classElement
          constructorDeclaration
           constructor
           (
           formalParameterList
            formalParameterArg
             assignable
              identifier
               data
           )
           {
           functionBody
            sourceElements
             sourceElement
              statement
               expressionStatement
                expressionSequence
                 singleExpression
                  singleExpression
                   singleExpression
                    this
                   .
                   identifierName
                    identifier
                     cardAccountId
                  =
                  singleExpression
                   singleExpression
                    identifierName
                     identifier
                      data
                   .
                   identifierName
                    identifier
                     cardAccountId
                ;
             sourceElement
              statement
               expressionStatement
                expressionSequence
                 singleExpression
                  singleExpression
                   singleExpression
                    this
                   .
                   identifierName
                    identifier
                     accountHolderId
                  =
                  singleExpression
                   singleExpression
                    identifierName
                     identifier
                      data
                   .
                   identifierName
                    identifier
                     accountHolderId
                ;
             sourceElement
              statement
               expressionStatement
                expressionSequence
                 singleExpression
                  singleExpression
                   singleExpression
                    this
                   .
                   identifierName
                    identifier
                     firstName
                  =
                  singleExpression
                   singleExpression
                    identifierName
                     identifier
                      data
                   .
                   identifierName
                    identifier
                     firstName
                ;
             sourceElement
              statement
               expressionStatement
                expressionSequence
                 singleExpression
                  singleExpression
                   singleExpression
                    this
                   .
                   identifierName
                    identifier
                     lastName
                  =
                  singleExpression
                   singleExpression
                    identifierName
                     identifier
                      data
                   .
                   identifierName
                    identifier
                     lastName
                ;
           }
         }
 <EOF>
