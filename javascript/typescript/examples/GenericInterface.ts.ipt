program
 sourceElements
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       identifierName
        reservedWord
         keyword
          interface
       singleExpression
        identifierName
         identifier
          IProcessor
  sourceElement
   statement
    block
     {
     statementList
      statement
       variableStatement
        variableDeclarationList
         variableDeclaration
          identifierOrKeyWord
           identifier
            result
          typeAnnotation
           :
           type_
            unionOrIntersectionOrPrimaryType
             primaryType
              typeReference
               typeName
                identifier
                 T
        ;
      statement
       variableStatement
        variableDeclarationList
         variableDeclaration
          identifierOrKeyWord
           identifier
            process
          singleExpression
           anonymousFunction
            arrowFunctionDeclaration
             arrowFunctionParameters
              (
              formalParameterList
               formalParameterArg
                assignable
                 identifier
                  a
                typeAnnotation
                 :
                 type_
                  unionOrIntersectionOrPrimaryType
                   primaryType
                    typeReference
                     typeName
                      identifier
                       T
               ,
               formalParameterArg
                assignable
                 identifier
                  b
                typeAnnotation
                 :
                 type_
                  unionOrIntersectionOrPrimaryType
                   primaryType
                    typeReference
                     typeName
                      identifier
                       T
              )
             =>
             arrowFunctionBody
              singleExpression
               identifierName
                identifier
                 T
        ;
     }
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       identifierName
        reservedWord
         keyword
          interface
       singleExpression
        identifierName
         identifier
          KeyPair
        singleExpression
         typeArguments
          <
          typeArgumentList
           typeArgument
            type_
             unionOrIntersectionOrPrimaryType
              primaryType
               typeReference
                typeName
                 identifier
                  T
           ,
           typeArgument
            type_
             unionOrIntersectionOrPrimaryType
              primaryType
               typeReference
                typeName
                 identifier
                  U
          >
  sourceElement
   statement
    block
     {
     statementList
      statement
       variableStatement
        variableDeclarationList
         variableDeclaration
          identifierOrKeyWord
           identifier
            key
          typeAnnotation
           :
           type_
            unionOrIntersectionOrPrimaryType
             primaryType
              typeReference
               typeName
                identifier
                 T
        ;
      statement
       variableStatement
        variableDeclarationList
         variableDeclaration
          identifierOrKeyWord
           identifier
            value
          typeAnnotation
           :
           type_
            unionOrIntersectionOrPrimaryType
             primaryType
              typeReference
               typeName
                identifier
                 U
        ;
     }
  sourceElement
   statement
    variableStatement
     varModifier
      let
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         kv1
       typeAnnotation
        :
        type_
         unionOrIntersectionOrPrimaryType
          primaryType
           typeReference
            typeName
             identifier
              KeyPair
            typeGeneric
             <
             typeArgumentList
              typeArgument
               type_
                unionOrIntersectionOrPrimaryType
                 primaryType
                  predefinedType
                   number
              ,
              typeArgument
               type_
                unionOrIntersectionOrPrimaryType
                 primaryType
                  predefinedType
                   string
             >
       =
       singleExpression
        objectLiteral
         {
         propertyAssignment
          propertyName
           identifierName
            identifier
             key
          :
          singleExpression
           literal
            numericLiteral
             1
         ,
         propertyAssignment
          propertyName
           identifierName
            identifier
             value
          :
          singleExpression
           literal
            "Steve"
         }
     ;
  sourceElement
   statement
    variableStatement
     varModifier
      let
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         kv2
       typeAnnotation
        :
        type_
         unionOrIntersectionOrPrimaryType
          primaryType
           typeReference
            typeName
             identifier
              KeyPair
            typeGeneric
             <
             typeArgumentList
              typeArgument
               type_
                unionOrIntersectionOrPrimaryType
                 primaryType
                  predefinedType
                   number
              ,
              typeArgument
               type_
                unionOrIntersectionOrPrimaryType
                 primaryType
                  predefinedType
                   number
             >
       =
       singleExpression
        objectLiteral
         {
         propertyAssignment
          propertyName
           identifierName
            identifier
             key
          :
          singleExpression
           literal
            numericLiteral
             1
         ,
         propertyAssignment
          propertyName
           identifierName
            identifier
             value
          :
          singleExpression
           literal
            numericLiteral
             12345
         }
     ;
  sourceElement
   statement
    interfaceDeclaration
     interface
     identifier
      KeyValueProcessor
     typeParameters
      <
      typeParameterList
       typeParameter
        identifier
         T
       ,
       typeParameter
        identifier
         U
      >
     objectType
      {
      typeBody
       typeMemberList
        typeMember
         callSignature
          (
          parameterList
           parameter
            requiredParameter
             identifierOrPattern
              identifierName
               identifier
                key
             typeAnnotation
              :
              type_
               unionOrIntersectionOrPrimaryType
                primaryType
                 typeReference
                  typeName
                   identifier
                    T
           ,
           parameter
            requiredParameter
             identifierOrPattern
              identifierName
               identifier
                val
             typeAnnotation
              :
              type_
               unionOrIntersectionOrPrimaryType
                primaryType
                 typeReference
                  typeName
                   identifier
                    U
          )
          typeAnnotation
           :
           type_
            unionOrIntersectionOrPrimaryType
             primaryType
              predefinedType
               void
       ;
      }
     ;
  sourceElement
   statement
    functionDeclaration
     function
     identifier
      processNumKeyPairs
     callSignature
      (
      parameterList
       parameter
        requiredParameter
         identifierOrPattern
          identifierName
           identifier
            key
         typeAnnotation
          :
          type_
           unionOrIntersectionOrPrimaryType
            primaryType
             predefinedType
              number
       ,
       parameter
        requiredParameter
         identifierOrPattern
          identifierName
           identifier
            value
         typeAnnotation
          :
          type_
           unionOrIntersectionOrPrimaryType
            primaryType
             predefinedType
              number
      )
      typeAnnotation
       :
       type_
        unionOrIntersectionOrPrimaryType
         primaryType
          predefinedType
           void
     {
     functionBody
      sourceElements
       sourceElement
        statement
         expressionStatement
          expressionSequence
           singleExpression
            singleExpression
             singleExpression
              identifierName
               identifier
                console
             .
             identifierName
              identifier
               log
            arguments
             (
             argumentList
              argument
               singleExpression
                singleExpression
                 literal
                  'processNumKeyPairs: key = '
                +
                singleExpression
                 identifierName
                  identifier
                   key
                 singleExpression
                  singleExpression
                   +
                   singleExpression
                    literal
                     ', value = '
                  +
                  singleExpression
                   identifierName
                    identifier
                     value
             )
     }
 <EOF>
