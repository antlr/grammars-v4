program
 sourceElements
  sourceElement
   statement
    classDeclaration
     class
     identifier
      KeyValuePair
     typeParameters
      <
      typeParameterList
       typeParameter
        identifier
         T
       ,
       typeParameter
        identifier
         U
      >
     classHeritage
     classTail
      {
      classElement
       propertyMemberDeclaration
        propertyMemberBase
         accessibilityModifier
          private
        propertyName
         identifierName
          identifier
           key
        typeAnnotation
         :
         type_
          unionOrIntersectionOrPrimaryType
           primaryType
            typeReference
             typeName
              identifier
               T
        ;
      classElement
       propertyMemberDeclaration
        propertyMemberBase
         accessibilityModifier
          private
        propertyName
         identifierName
          identifier
           val
        typeAnnotation
         :
         type_
          unionOrIntersectionOrPrimaryType
           primaryType
            typeReference
             typeName
              identifier
               U
        ;
      classElement
       propertyMemberDeclaration
        propertyMemberBase
        propertyName
         identifierName
          identifier
           setKeyValue
        callSignature
         (
         parameterList
          parameter
           requiredParameter
            identifierOrPattern
             identifierName
              identifier
               key
            typeAnnotation
             :
             type_
              unionOrIntersectionOrPrimaryType
               primaryType
                typeReference
                 typeName
                  identifier
                   T
          ,
          parameter
           requiredParameter
            identifierOrPattern
             identifierName
              identifier
               val
            typeAnnotation
             :
             type_
              unionOrIntersectionOrPrimaryType
               primaryType
                typeReference
                 typeName
                  identifier
                   U
         )
         typeAnnotation
          :
          type_
           unionOrIntersectionOrPrimaryType
            primaryType
             predefinedType
              void
        {
        functionBody
         sourceElements
          sourceElement
           statement
            expressionStatement
             expressionSequence
              singleExpression
               singleExpression
                singleExpression
                 this
                .
                identifierName
                 identifier
                  key
               =
               singleExpression
                identifierName
                 identifier
                  key
             ;
          sourceElement
           statement
            expressionStatement
             expressionSequence
              singleExpression
               singleExpression
                singleExpression
                 this
                .
                identifierName
                 identifier
                  val
               =
               singleExpression
                identifierName
                 identifier
                  val
             ;
        }
      classElement
       propertyMemberDeclaration
        propertyMemberBase
        propertyName
         identifierName
          identifier
           display
        callSignature
         (
         )
         typeAnnotation
          :
          type_
           unionOrIntersectionOrPrimaryType
            primaryType
             predefinedType
              void
        {
        functionBody
         sourceElements
          sourceElement
           statement
            expressionStatement
             expressionSequence
              singleExpression
               singleExpression
                singleExpression
                 identifierName
                  identifier
                   console
                .
                identifierName
                 identifier
                  log
               arguments
                (
                argumentList
                 argument
                  singleExpression
                   literal
                    templateStringLiteral
                     `
                     templateStringAtom
                      K
                     templateStringAtom
                      e
                     templateStringAtom
                      y
                     templateStringAtom
                       
                     templateStringAtom
                      =
                     templateStringAtom
                       
                     templateStringAtom
                      ${
                      singleExpression
                       singleExpression
                        this
                       .
                       identifierName
                        identifier
                         key
                      }
                     templateStringAtom
                      ,
                     templateStringAtom
                       
                     templateStringAtom
                      v
                     templateStringAtom
                      a
                     templateStringAtom
                      l
                     templateStringAtom
                       
                     templateStringAtom
                      =
                     templateStringAtom
                       
                     templateStringAtom
                      ${
                      singleExpression
                       singleExpression
                        this
                       .
                       identifierName
                        identifier
                         val
                      }
                     `
                )
             ;
        }
      }
  sourceElement
   statement
    variableStatement
     varModifier
      let
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         kvp1
       =
       singleExpression
        new
        singleExpression
         identifierName
          identifier
           KeyValuePair
         singleExpression
          typeArguments
           <
           typeArgumentList
            typeArgument
             type_
              unionOrIntersectionOrPrimaryType
               primaryType
                predefinedType
                 number
            ,
            typeArgument
             type_
              unionOrIntersectionOrPrimaryType
               primaryType
                predefinedType
                 string
           >
        arguments
         (
         )
     ;
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         identifierName
          identifier
           kvp1
        .
        identifierName
         identifier
          setKeyValue
       arguments
        (
        argumentList
         argument
          singleExpression
           literal
            numericLiteral
             1
         ,
         argument
          singleExpression
           literal
            "Steve"
        )
     ;
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         identifierName
          identifier
           kvp1
        .
        identifierName
         identifier
          display
       arguments
        (
        )
     ;
  sourceElement
   statement
    variableStatement
     varModifier
      let
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         kvp2
       =
       singleExpression
        new
        singleExpression
         identifierName
          identifier
           KayValuePair
         singleExpression
          typeArguments
           <
           typeArgumentList
            typeArgument
             type_
              unionOrIntersectionOrPrimaryType
               primaryType
                predefinedType
                 string
            ,
            typeArgument
             type_
              unionOrIntersectionOrPrimaryType
               primaryType
                predefinedType
                 string
           >
        arguments
         (
         )
     ;
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         identifierName
          identifier
           kvp2
        .
        identifierName
         identifier
          SetKeyValue
       arguments
        (
        argumentList
         argument
          singleExpression
           literal
            "CEO"
         ,
         argument
          singleExpression
           literal
            "Bill"
        )
     ;
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         identifierName
          identifier
           kvp2
        .
        identifierName
         identifier
          display
       arguments
        (
        )
     ;
  sourceElement
   statement
    interfaceDeclaration
     interface
     identifier
      IKeyValueProcessor
     typeParameters
      <
      typeParameterList
       typeParameter
        identifier
         T
       ,
       typeParameter
        identifier
         U
      >
     objectType
      {
      typeBody
       typeMemberList
        typeMember
         methodSignature
          propertyName
           identifierName
            identifier
             process
          callSignature
           (
           parameterList
            parameter
             requiredParameter
              identifierOrPattern
               identifierName
                identifier
                 key
              typeAnnotation
               :
               type_
                unionOrIntersectionOrPrimaryType
                 primaryType
                  typeReference
                   typeName
                    identifier
                     T
            ,
            parameter
             requiredParameter
              identifierOrPattern
               identifierName
                identifier
                 val
              typeAnnotation
               :
               type_
                unionOrIntersectionOrPrimaryType
                 primaryType
                  typeReference
                   typeName
                    identifier
                     U
           )
           typeAnnotation
            :
            type_
             unionOrIntersectionOrPrimaryType
              primaryType
               predefinedType
                void
       ;
      }
     ;
  sourceElement
   statement
    classDeclaration
     class
     identifier
      kvProcessor
     typeParameters
      <
      typeParameterList
       typeParameter
        identifier
         T
       ,
       typeParameter
        identifier
         U
      >
     classHeritage
      implementsClause
       implements
       classOrInterfaceTypeList
        typeReference
         typeName
          identifier
           IKeyValueProcessor
         typeGeneric
          <
          typeArgumentList
           typeArgument
            type_
             unionOrIntersectionOrPrimaryType
              primaryType
               typeReference
                typeName
                 identifier
                  T
           ,
           typeArgument
            type_
             unionOrIntersectionOrPrimaryType
              primaryType
               typeReference
                typeName
                 identifier
                  U
          >
     classTail
      {
      classElement
       propertyMemberDeclaration
        propertyMemberBase
        propertyName
         identifierName
          identifier
           process
        callSignature
         (
         parameterList
          parameter
           requiredParameter
            identifierOrPattern
             identifierName
              identifier
               key
            typeAnnotation
             :
             type_
              unionOrIntersectionOrPrimaryType
               primaryType
                typeReference
                 typeName
                  identifier
                   T
          ,
          parameter
           requiredParameter
            identifierOrPattern
             identifierName
              identifier
               val
            typeAnnotation
             :
             type_
              unionOrIntersectionOrPrimaryType
               primaryType
                typeReference
                 typeName
                  identifier
                   U
         )
         typeAnnotation
          :
          type_
           unionOrIntersectionOrPrimaryType
            primaryType
             predefinedType
              void
        {
        functionBody
         sourceElements
          sourceElement
           statement
            expressionStatement
             expressionSequence
              singleExpression
               singleExpression
                singleExpression
                 identifierName
                  identifier
                   console
                .
                identifierName
                 identifier
                  log
               arguments
                (
                argumentList
                 argument
                  singleExpression
                   literal
                    templateStringLiteral
                     `
                     templateStringAtom
                      K
                     templateStringAtom
                      e
                     templateStringAtom
                      y
                     templateStringAtom
                       
                     templateStringAtom
                      =
                     templateStringAtom
                       
                     templateStringAtom
                      ${
                      singleExpression
                       identifierName
                        identifier
                         key
                      }
                     templateStringAtom
                      ,
                     templateStringAtom
                       
                     templateStringAtom
                      v
                     templateStringAtom
                      a
                     templateStringAtom
                      l
                     templateStringAtom
                       
                     templateStringAtom
                      =
                     templateStringAtom
                       
                     templateStringAtom
                      ${
                      singleExpression
                       identifierName
                        identifier
                         val
                      }
                     `
                )
             ;
        }
      }
 <EOF>
