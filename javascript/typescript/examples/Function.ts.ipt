program
 sourceElements
  sourceElement
   statement
    functionDeclaration
     function
     identifier
      Sum
     callSignature
      (
      parameterList
       parameter
        requiredParameter
         identifierOrPattern
          identifierName
           identifier
            x
         typeAnnotation
          :
          type_
           unionOrIntersectionOrPrimaryType
            primaryType
             predefinedType
              number
       ,
       parameter
        requiredParameter
         identifierOrPattern
          identifierName
           identifier
            y
         typeAnnotation
          :
          type_
           unionOrIntersectionOrPrimaryType
            primaryType
             predefinedType
              number
      )
      typeAnnotation
       :
       type_
        unionOrIntersectionOrPrimaryType
         primaryType
          predefinedType
           void
     {
     functionBody
      sourceElements
       sourceElement
        statement
         expressionStatement
          expressionSequence
           singleExpression
            singleExpression
             singleExpression
              identifierName
               identifier
                console
             .
             identifierName
              identifier
               log
            arguments
             (
             argumentList
              argument
               singleExpression
                singleExpression
                 literal
                  'processNumKeyPairs: key = '
                +
                singleExpression
                 identifierName
                  identifier
                   key
                 singleExpression
                  singleExpression
                   +
                   singleExpression
                    literal
                     ', value = '
                  +
                  singleExpression
                   identifierName
                    identifier
                     value
             )
       sourceElement
        statement
         expressionStatement
          expressionSequence
           singleExpression
            identifierName
             reservedWord
              keyword
               return
            singleExpression
             identifierName
              identifier
               x
             singleExpression
              +
              singleExpression
               identifierName
                identifier
                 y
          ;
     }
  sourceElement
   statement
    variableStatement
     varModifier
      let
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         greeting
       =
       singleExpression
        anonymousFunction
         function
         (
         )
         {
         functionBody
          sourceElements
           sourceElement
            statement
             expressionStatement
              expressionSequence
               singleExpression
                singleExpression
                 singleExpression
                  identifierName
                   identifier
                    console
                 .
                 identifierName
                  identifier
                   log
                arguments
                 (
                 argumentList
                  argument
                   singleExpression
                    literal
                     "Hello TypeScript!"
                 )
              ;
         }
     ;
  sourceElement
   statement
    variableStatement
     varModifier
      let
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         SumAnon
       =
       singleExpression
        anonymousFunction
         function
         (
         formalParameterList
          formalParameterArg
           assignable
            identifier
             x
           typeAnnotation
            :
            type_
             unionOrIntersectionOrPrimaryType
              primaryType
               predefinedType
                number
          ,
          formalParameterArg
           assignable
            identifier
             y
           typeAnnotation
            :
            type_
             unionOrIntersectionOrPrimaryType
              primaryType
               predefinedType
                number
         )
         typeAnnotation
          :
          type_
           unionOrIntersectionOrPrimaryType
            primaryType
             predefinedType
              number
         {
         functionBody
          sourceElements
           sourceElement
            statement
             expressionStatement
              expressionSequence
               singleExpression
                identifierName
                 reservedWord
                  keyword
                   return
                singleExpression
                 identifierName
                  identifier
                   x
                 singleExpression
                  +
                  singleExpression
                   identifierName
                    identifier
                     y
              ;
         }
  sourceElement
   statement
    functionDeclaration
     function
     identifier
      Greet
     callSignature
      (
      parameterList
       parameter
        requiredParameter
         identifierOrPattern
          identifierName
           identifier
            greeting
         typeAnnotation
          :
          type_
           unionOrIntersectionOrPrimaryType
            primaryType
             predefinedType
              string
       ,
       parameter
        optionalParameter
         identifierOrPattern
          identifierName
           identifier
            name
         ?
         typeAnnotation
          :
          type_
           unionOrIntersectionOrPrimaryType
            primaryType
             predefinedType
              string
      )
      typeAnnotation
       :
       type_
        unionOrIntersectionOrPrimaryType
         primaryType
          predefinedType
           string
     {
     functionBody
      sourceElements
       sourceElement
        statement
         expressionStatement
          expressionSequence
           singleExpression
            identifierName
             reservedWord
              keyword
               return
            singleExpression
             identifierName
              identifier
               greeting
             singleExpression
              singleExpression
               +
               singleExpression
                literal
                 ' '
              +
              singleExpression
               identifierName
                identifier
                 name
               singleExpression
                +
                singleExpression
                 literal
                  '!'
          ;
     }
  sourceElement
   statement
    functionDeclaration
     function
     identifier
      terminateJob
     callSignature
      (
      parameterList
       parameter
        requiredParameter
         identifierOrPattern
          identifierName
           identifier
            jobId
         typeAnnotation
          :
          type_
           unionOrIntersectionOrPrimaryType
            primaryType
             predefinedType
              string
      )
     {
     functionBody
      sourceElements
       sourceElement
        statement
         expressionStatement
          expressionSequence
           singleExpression
            identifierName
             reservedWord
              keyword
               return
            singleExpression
             singleExpression
              singleExpression
               singleExpression
                this
               .
               identifierName
                identifier
                 http
              .
              identifierName
               reservedWord
                keyword
                 delete
              typeGeneric
               <
               typeArgumentList
                typeArgument
                 type_
                  unionOrIntersectionOrPrimaryType
                   primaryType
                    typeReference
                     typeName
                      identifier
                       IOperationResult
                     typeGeneric
                      <
                      typeArgumentList
                       typeArgument
                        type_
                         unionOrIntersectionOrPrimaryType
                          primaryType
                           predefinedType
                            any
                      >
               >
             arguments
              (
              )
          ;
     }
  sourceElement
   statement
    functionDeclaration
     function
     identifier
      Greet2
     callSignature
      (
      parameterList
       parameter
        requiredParameter
         identifierOrPattern
          identifierName
           identifier
            name
         typeAnnotation
          :
          type_
           unionOrIntersectionOrPrimaryType
            primaryType
             predefinedType
              string
       ,
       parameter
        optionalParameter
         identifierOrPattern
          identifierName
           identifier
            greeting
         typeAnnotation
          :
          type_
           unionOrIntersectionOrPrimaryType
            primaryType
             predefinedType
              string
         initializer
          =
          singleExpression
           literal
            "Hello"
      )
      typeAnnotation
       :
       type_
        unionOrIntersectionOrPrimaryType
         primaryType
          predefinedType
           string
     {
     functionBody
      sourceElements
       sourceElement
        statement
         expressionStatement
          expressionSequence
           singleExpression
            identifierName
             reservedWord
              keyword
               return
            singleExpression
             identifierName
              identifier
               greeting
             singleExpression
              singleExpression
               +
               singleExpression
                literal
                 ' '
              +
              singleExpression
               identifierName
                identifier
                 name
               singleExpression
                +
                singleExpression
                 literal
                  '!'
          ;
     }
  sourceElement
   statement
    variableStatement
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         Greet
       singleExpression
        (
        expressionSequence
         singleExpression
          identifierName
           identifier
            undefined
         ,
         singleExpression
          literal
           'Steve'
        )
     ;
  sourceElement
   statement
    variableStatement
     varModifier
      let
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         sumArrow
       =
       singleExpression
        anonymousFunction
         arrowFunctionDeclaration
          arrowFunctionParameters
           (
           formalParameterList
            formalParameterArg
             assignable
              identifier
               x
             typeAnnotation
              :
              type_
               unionOrIntersectionOrPrimaryType
                primaryType
                 predefinedType
                  number
            ,
            formalParameterArg
             assignable
              identifier
               y
             typeAnnotation
              :
              type_
               unionOrIntersectionOrPrimaryType
                primaryType
                 predefinedType
                  number
           )
          typeAnnotation
           :
           type_
            unionOrIntersectionOrPrimaryType
             primaryType
              predefinedType
               number
          =>
          arrowFunctionBody
           singleExpression
            objectLiteral
             {
             propertyAssignment
              singleExpression
               identifierName
                reservedWord
                 keyword
                  return
               singleExpression
                identifierName
                 identifier
                  x
                singleExpression
                 +
                 singleExpression
                  identifierName
                   identifier
                    y
             }
  sourceElement
   statement
    variableStatement
     varModifier
      let
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         Print
       =
       singleExpression
        anonymousFunction
         arrowFunctionDeclaration
          arrowFunctionParameters
           (
           )
          =>
          arrowFunctionBody
           singleExpression
            singleExpression
             singleExpression
              identifierName
               identifier
                console
             .
             identifierName
              identifier
               log
            arguments
             (
             argumentList
              argument
               singleExpression
                literal
                 "Hello TypeScript"
             )
     ;
  sourceElement
   statement
    variableStatement
     varModifier
      let
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         sumShortArrow
       =
       singleExpression
        anonymousFunction
         arrowFunctionDeclaration
          arrowFunctionParameters
           (
           formalParameterList
            formalParameterArg
             assignable
              identifier
               x
             typeAnnotation
              :
              type_
               unionOrIntersectionOrPrimaryType
                primaryType
                 predefinedType
                  number
            ,
            formalParameterArg
             assignable
              identifier
               y
             typeAnnotation
              :
              type_
               unionOrIntersectionOrPrimaryType
                primaryType
                 predefinedType
                  number
           )
          =>
          arrowFunctionBody
           singleExpression
            identifierName
             identifier
              x
            singleExpression
             +
             singleExpression
              identifierName
               identifier
                y
     ;
  sourceElement
   statement
    functionDeclaration
     function
     identifier
      Greet
     callSignature
      (
      parameterList
       parameter
        requiredParameter
         identifierOrPattern
          identifierName
           identifier
            greeting
         typeAnnotation
          :
          type_
           unionOrIntersectionOrPrimaryType
            primaryType
             predefinedType
              string
       ,
       restParameter
        ...
        singleExpression
         identifierName
          identifier
           names
        typeAnnotation
         :
         type_
          unionOrIntersectionOrPrimaryType
           primaryType
            primaryType
             predefinedType
              string
            [
            ]
      )
     {
     functionBody
      sourceElements
       sourceElement
        statement
         expressionStatement
          expressionSequence
           singleExpression
            identifierName
             reservedWord
              keyword
               return
            singleExpression
             identifierName
              identifier
               greeting
             singleExpression
              singleExpression
               singleExpression
                +
                singleExpression
                 literal
                  " "
               +
               singleExpression
                singleExpression
                 singleExpression
                  identifierName
                   identifier
                    names
                 .
                 identifierName
                  identifier
                   join
                arguments
                 (
                 argumentList
                  argument
                   singleExpression
                    literal
                     ", "
                 )
              +
              singleExpression
               literal
                "!"
          ;
     }
  sourceElement
   statement
    functionDeclaration
     function
     identifier
      Test
     callSignature
      (
      parameterList
       parameter
        requiredParameter
         identifierOrPattern
          identifierName
           identifier
            value
         typeAnnotation
          :
          type_
           unionOrIntersectionOrPrimaryType
            unionOrIntersectionOrPrimaryType
             primaryType
              typeReference
               typeName
                identifier
                 TestClass
            |
            unionOrIntersectionOrPrimaryType
             primaryType
              typeReference
               typeName
                identifier
                 TestClass2
      )
      typeAnnotation
       :
       type_
        unionOrIntersectionOrPrimaryType
         primaryType
          typeReference
           typeName
            identifier
             value
          is
          primaryType
           typeReference
            typeName
             identifier
              TestClass
     {
     functionBody
      sourceElements
       sourceElement
        statement
         expressionStatement
          expressionSequence
           singleExpression
            identifierName
             reservedWord
              keyword
               return
            singleExpression
             singleExpression
              singleExpression
               (
               expressionSequence
                singleExpression
                 typeArguments
                  <
                  typeArgumentList
                   typeArgument
                    type_
                     unionOrIntersectionOrPrimaryType
                      primaryType
                       typeReference
                        typeName
                         identifier
                          TestClass
                  >
                 expressionSequence
                  singleExpression
                   identifierName
                    identifier
                     value
               )
              .
              identifierName
               identifier
                someFunction
             !==
             singleExpression
              identifierName
               identifier
                undefined
          ;
     }
  sourceElement
   statement
    functionDeclaration
     function
     identifier
      buildName
     callSignature
      (
      parameterList
       parameter
        requiredParameter
         identifierOrPattern
          identifierName
           identifier
            firstName
         typeAnnotation
          :
          type_
           unionOrIntersectionOrPrimaryType
            primaryType
             predefinedType
              string
       ,
       parameter
        optionalParameter
         identifierOrPattern
          identifierName
           identifier
            lastName
         ?
         typeAnnotation
          :
          type_
           unionOrIntersectionOrPrimaryType
            primaryType
             predefinedType
              string
      )
     {
     functionBody
      sourceElements
       sourceElement
        statement
         expressionStatement
          expressionSequence
           singleExpression
            identifierName
             reservedWord
              keyword
               if
            singleExpression
             (
             expressionSequence
              singleExpression
               identifierName
                identifier
                 lastName
             )
       sourceElement
        statement
         expressionStatement
          expressionSequence
           singleExpression
            identifierName
             reservedWord
              keyword
               return
            singleExpression
             identifierName
              identifier
               firstName
             singleExpression
              singleExpression
               +
               singleExpression
                literal
                 " "
              +
              singleExpression
               identifierName
                identifier
                 lastName
          ;
       sourceElement
        statement
         expressionStatement
          expressionSequence
           singleExpression
            identifierName
             reservedWord
              keyword
               else
            singleExpression
             identifierName
              reservedWord
               keyword
                return
             singleExpression
              identifierName
               identifier
                firstName
          ;
     }
  sourceElement
   statement
    functionDeclaration
     function
     identifier
      nestedType
     callSignature
      (
      parameterList
       parameter
        requiredParameter
         identifierOrPattern
          identifierName
           identifier
            map
         typeAnnotation
          :
          type_
           unionOrIntersectionOrPrimaryType
            primaryType
             typeReference
              typeName
               identifier
                Map
              typeGeneric
               <
               typeArgumentList
                typeArgument
                 type_
                  unionOrIntersectionOrPrimaryType
                   primaryType
                    predefinedType
                     string
                ,
                typeArgument
                 type_
                  unionOrIntersectionOrPrimaryType
                   primaryType
                    typeReference
                     typeName
                      identifier
                       Map
                     typeGeneric
                      <
                      typeArgumentList
                       typeArgument
                        type_
                         unionOrIntersectionOrPrimaryType
                          primaryType
                           predefinedType
                            string
                       ,
                       typeArgument
                        type_
                         unionOrIntersectionOrPrimaryType
                          primaryType
                           typeReference
                            typeName
                             identifier
                              Set
                            typeGeneric
                             <
                             typeArgumentList
                              typeArgument
                               type_
                                unionOrIntersectionOrPrimaryType
                                 primaryType
                                  predefinedType
                                   string
                             >
                      >
               >
      )
     {
     functionBody
      sourceElements
       sourceElement
        statement
         variableStatement
          varModifier
           let
          variableDeclarationList
           variableDeclaration
            identifierOrKeyWord
             identifier
              a
            =
            singleExpression
             literal
              numericLiteral
               12
          ;
       sourceElement
        statement
         variableStatement
          varModifier
           let
          variableDeclarationList
           variableDeclaration
            identifierOrKeyWord
             identifier
              b
            =
            singleExpression
             singleExpression
              identifierName
               identifier
                a
             >
             >
             singleExpression
              literal
               numericLiteral
                5
          ;
       sourceElement
        statement
         variableStatement
          varModifier
           let
          variableDeclarationList
           variableDeclaration
            identifierOrKeyWord
             identifier
              c
            =
            singleExpression
             singleExpression
              identifierName
               identifier
                b
             >
             >
             >
             singleExpression
              literal
               numericLiteral
                5
          ;
     }
  sourceElement
   statement
    functionDeclaration
     function
     identifier
      TrailingComma
     callSignature
      (
      parameterList
       parameter
        requiredParameter
         identifierOrPattern
          identifierName
           identifier
            arg1
         typeAnnotation
          :
          type_
           unionOrIntersectionOrPrimaryType
            primaryType
             predefinedType
              string
       ,
       parameter
        requiredParameter
         identifierOrPattern
          identifierName
           identifier
            arg2
         typeAnnotation
          :
          type_
           unionOrIntersectionOrPrimaryType
            primaryType
             predefinedType
              number
       ,
      )
     {
     functionBody
     }
  sourceElement
   statement
    variableStatement
     varModifier
      var
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         myFunction
       =
       singleExpression
        anonymousFunction
         function
         (
         formalParameterList
          formalParameterArg
           assignable
            identifier
             arg1
           typeAnnotation
            :
            type_
             unionOrIntersectionOrPrimaryType
              primaryType
               predefinedType
                string
          ,
          formalParameterArg
           assignable
            identifier
             arg2
           typeAnnotation
            :
            type_
             unionOrIntersectionOrPrimaryType
              primaryType
               predefinedType
                number
          ,
         )
         {
         functionBody
         }
     ;
 <EOF>
