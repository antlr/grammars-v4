program
 sourceElements
  sourceElement
   statement
    typeAliasDeclaration
     type
     identifier
      Employee
     =
     type_
      unionOrIntersectionOrPrimaryType
       primaryType
        objectType
         {
         typeBody
          typeMemberList
           typeMember
            propertySignatur
             propertyName
              identifierName
               identifier
                type
             typeAnnotation
              :
              type_
               unionOrIntersectionOrPrimaryType
                unionOrIntersectionOrPrimaryType
                 primaryType
                  predefinedType
                   "employee"
                |
                unionOrIntersectionOrPrimaryType
                 primaryType
                  predefinedType
                   "manager"
           ;
           typeMember
            propertySignatur
             propertyName
              identifierName
               identifier
                typeId
             typeAnnotation
              :
              type_
               unionOrIntersectionOrPrimaryType
                unionOrIntersectionOrPrimaryType
                 primaryType
                  predefinedType
                   1
                |
                unionOrIntersectionOrPrimaryType
                 primaryType
                  predefinedType
                   2
           ;
           typeMember
            propertySignatur
             propertyName
              identifierName
               identifier
                id
             typeAnnotation
              :
              type_
               unionOrIntersectionOrPrimaryType
                primaryType
                 predefinedType
                  string
           ;
           typeMember
            propertySignatur
             propertyName
              identifierName
               identifier
                name
             typeAnnotation
              :
              type_
               unionOrIntersectionOrPrimaryType
                primaryType
                 predefinedType
                  string
           ;
           typeMember
            propertySignatur
             propertyName
              identifierName
               identifier
                address
             ?
             typeAnnotation
              :
              type_
               unionOrIntersectionOrPrimaryType
                primaryType
                 predefinedType
                  string
           ;
           typeMember
            propertySignatur
             propertyName
              identifierName
               identifier
                phone
             ?
             typeAnnotation
              :
              type_
               unionOrIntersectionOrPrimaryType
                unionOrIntersectionOrPrimaryType
                 primaryType
                  predefinedType
                   string
                |
                unionOrIntersectionOrPrimaryType
                 primaryType
                  predefinedType
                   null
          ;
         }
     eos
  sourceElement
   statement
    typeAliasDeclaration
     type
     identifier
      EmployeeType
     =
     type_
      |
      unionOrIntersectionOrPrimaryType
       unionOrIntersectionOrPrimaryType
        primaryType
         predefinedType
          "employee"
       |
       unionOrIntersectionOrPrimaryType
        primaryType
         predefinedType
          "manager"
     eos
      ;
  sourceElement
   statement
    variableStatement
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         type
       singleExpression
        singleExpression
         identifierName
          identifier
           EmployeeNameType
        =
        singleExpression
         identifierName
          identifier
           Employee
         singleExpression
          arrayLiteral
           [
           elementList
            arrayElement
             singleExpression
              literal
               "name"
           ]
     ;
  sourceElement
   statement
    variableStatement
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         type
       singleExpression
        singleExpression
         identifierName
          identifier
           EmployeeMap
        =
        singleExpression
         identifierName
          identifier
           Map
         singleExpression
          typeArguments
           <
           typeArgumentList
            typeArgument
             type_
              unionOrIntersectionOrPrimaryType
               primaryType
                predefinedType
                 string
            ,
            typeArgument
             type_
              unionOrIntersectionOrPrimaryType
               primaryType
                predefinedType
                 string
           >
     ;
  sourceElement
   statement
    variableStatement
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         type
       singleExpression
        singleExpression
         identifierName
          identifier
           EmployeeMapKey
        =
        singleExpression
         identifierName
          identifier
           keyof
         singleExpression
          identifierName
           identifier
            EmployeeMap
     ;
  sourceElement
   statement
    variableStatement
     varModifier
      var
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         age
       typeAnnotation
        :
        type_
         unionOrIntersectionOrPrimaryType
          primaryType
           predefinedType
            number
       =
       singleExpression
        literal
         numericLiteral
          32
     ;
  sourceElement
   statement
    variableStatement
     varModifier
      var
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         name
       typeAnnotation
        :
        type_
         unionOrIntersectionOrPrimaryType
          primaryType
           predefinedType
            string
       =
       singleExpression
        literal
         "John"
     ;
  sourceElement
   statement
    variableStatement
     varModifier
      var
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         isUpdated
       typeAnnotation
        :
        type_
         unionOrIntersectionOrPrimaryType
          primaryType
           predefinedType
            boolean
       =
       singleExpression
        identifierName
         reservedWord
          true
     ;
  sourceElement
   statement
    variableStatement
     varModifier
      var
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         employee1
       typeAnnotation
        :
        type_
         unionOrIntersectionOrPrimaryType
          primaryType
           objectType
            {
            typeBody
             typeMemberList
              typeMember
               propertySignatur
                propertyName
                 identifierName
                  identifier
                   id
                typeAnnotation
                 :
                 type_
                  unionOrIntersectionOrPrimaryType
                   primaryType
                    predefinedType
                     number
              ;
              typeMember
               propertySignatur
                propertyName
                 identifierName
                  identifier
                   name
                typeAnnotation
                 :
                 type_
                  unionOrIntersectionOrPrimaryType
                   primaryType
                    predefinedType
                     string
             ;
            }
     ;
  sourceElement
   statement
    variableStatement
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         employee1
       =
       singleExpression
        objectLiteral
         {
         propertyAssignment
          propertyName
           identifierName
            identifier
             id
          :
          singleExpression
           literal
            numericLiteral
             100
         ,
         propertyAssignment
          propertyName
           identifierName
            identifier
             name
          :
          singleExpression
           literal
            "John"
         }
  sourceElement
   statement
    variableStatement
     varModifier
      var
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         employee2
       typeAnnotation
        :
        type_
         unionOrIntersectionOrPrimaryType
          primaryType
           typeReference
            typeName
             identifier
              Employee
       =
       singleExpression
        objectLiteral
         {
         propertyAssignment
          propertyName
           identifierName
            identifier
             type
          :
          singleExpression
           literal
            "employee"
         ,
         propertyAssignment
          propertyName
           identifierName
            identifier
             typeId
          :
          singleExpression
           literal
            numericLiteral
             1
         ,
         propertyAssignment
          propertyName
           identifierName
            identifier
             id
          :
          singleExpression
           literal
            numericLiteral
             101
         ,
         propertyAssignment
          propertyName
           identifierName
            identifier
             name
          :
          singleExpression
           literal
            "Steve"
         }
  sourceElement
   statement
    functionDeclaration
     function
     identifier
      display
     callSignature
      (
      parameterList
       parameter
        requiredParameter
         identifierOrPattern
          identifierName
           identifier
            id
         typeAnnotation
          :
          type_
           unionOrIntersectionOrPrimaryType
            primaryType
             predefinedType
              number
       ,
       parameter
        requiredParameter
         identifierOrPattern
          identifierName
           identifier
            name
         typeAnnotation
          :
          type_
           unionOrIntersectionOrPrimaryType
            primaryType
             predefinedType
              string
      )
     {
     functionBody
      sourceElements
       sourceElement
        statement
         expressionStatement
          expressionSequence
           singleExpression
            singleExpression
             singleExpression
              identifierName
               identifier
                console
             .
             identifierName
              identifier
               log
            arguments
             (
             argumentList
              argument
               singleExpression
                singleExpression
                 literal
                  "Id = "
                +
                singleExpression
                 identifierName
                  identifier
                   id
                 singleExpression
                  singleExpression
                   +
                   singleExpression
                    literal
                     ", Name = "
                  +
                  singleExpression
                   identifierName
                    identifier
                     name
             )
          ;
     }
  sourceElement
   statement
    variableStatement
     varModifier
      var
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         arr
       =
       singleExpression
        arrayLiteral
         [
         elementList
          arrayElement
           singleExpression
            literal
             numericLiteral
              0
          ,
          arrayElement
           singleExpression
            literal
             numericLiteral
              1
          ,
          arrayElement
           singleExpression
            literal
             "test"
         ]
     ;
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         identifierName
          identifier
           arr
        .
        identifierName
         identifier
          push
       arguments
        (
        argumentList
         argument
          singleExpression
           literal
            "str"
        )
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         identifierName
          identifier
           arr
        .
        identifierName
         identifier
          push
       arguments
        (
        argumentList
         argument
          singleExpression
           identifierName
            reservedWord
             true
        )
     ;
  sourceElement
   statement
    functionDeclaration
     function
     identifier
      sum
     callSignature
      (
      parameterList
       parameter
        requiredParameter
         identifierOrPattern
          identifierName
           identifier
            a
         typeAnnotation
          :
          type_
           unionOrIntersectionOrPrimaryType
            primaryType
             predefinedType
              number
       ,
       parameter
        requiredParameter
         identifierOrPattern
          identifierName
           identifier
            b
         typeAnnotation
          :
          type_
           unionOrIntersectionOrPrimaryType
            primaryType
             predefinedType
              number
      )
     {
     functionBody
      sourceElements
       sourceElement
        statement
         expressionStatement
          expressionSequence
           singleExpression
            identifierName
             reservedWord
              keyword
               return
            singleExpression
             identifierName
              identifier
               a
             singleExpression
              +
              singleExpression
               identifierName
                identifier
                 b
          ;
     }
  sourceElement
   statement
    variableStatement
     varModifier
      var
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         total
       typeAnnotation
        :
        type_
         unionOrIntersectionOrPrimaryType
          primaryType
           predefinedType
            number
       =
       singleExpression
        identifierName
         identifier
          sum
        singleExpression
         (
         expressionSequence
          singleExpression
           literal
            numericLiteral
             10
          ,
          singleExpression
           literal
            numericLiteral
             20
         )
     ;
  sourceElement
   statement
    variableStatement
     varModifier
      var
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         str
       typeAnnotation
        :
        type_
         unionOrIntersectionOrPrimaryType
          primaryType
           predefinedType
            string
       =
       singleExpression
        identifierName
         identifier
          sum
        singleExpression
         (
         expressionSequence
          singleExpression
           literal
            numericLiteral
             10
          ,
          singleExpression
           literal
            numericLiteral
             20
         )
     ;
  sourceElement
   statement
    variableStatement
     varModifier
      let
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         code
       typeAnnotation
        :
        type_
         unionOrIntersectionOrPrimaryType
          primaryType
           predefinedType
            any
       =
       singleExpression
        literal
         numericLiteral
          123
     ;
  sourceElement
   statement
    variableStatement
     varModifier
      let
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         employeeCode
       =
       typeParameters
        <
        typeParameterList
         typeParameter
          identifier
           number
        >
       singleExpression
        identifierName
         identifier
          code
     ;
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         identifierName
          identifier
           console
        .
        identifierName
         identifier
          log
       arguments
        (
        argumentList
         argument
          singleExpression
           typeof
           singleExpression
            (
            expressionSequence
             singleExpression
              identifierName
               identifier
                employeeCode
            )
        )
     ;
 <EOF>
