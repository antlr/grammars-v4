program
 sourceElements
  sourceElement
   export
   statement
    variableStatement
     varModifier
      let
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         age
       typeAnnotation
        :
        type_
         unionOrIntersectionOrPrimaryType
          primaryType
           predefinedType
            number
       =
       singleExpression
        literal
         numericLiteral
          20
     ;
  sourceElement
   export
   statement
    classDeclaration
     class
     identifier
      Employee
     classHeritage
     classTail
      {
      classElement
       propertyMemberDeclaration
        propertyMemberBase
        propertyName
         identifierName
          identifier
           empCode
        typeAnnotation
         :
         type_
          unionOrIntersectionOrPrimaryType
           primaryType
            predefinedType
             number
        ;
      classElement
       propertyMemberDeclaration
        propertyMemberBase
        propertyName
         identifierName
          identifier
           empName
        typeAnnotation
         :
         type_
          unionOrIntersectionOrPrimaryType
           primaryType
            predefinedType
             string
        ;
      classElement
       constructorDeclaration
        constructor
        (
        formalParameterList
         formalParameterArg
          assignable
           identifier
            name
          typeAnnotation
           :
           type_
            unionOrIntersectionOrPrimaryType
             primaryType
              predefinedType
               string
         ,
         formalParameterArg
          assignable
           identifier
            code
          typeAnnotation
           :
           type_
            unionOrIntersectionOrPrimaryType
             primaryType
              predefinedType
               number
        )
        {
        functionBody
         sourceElements
          sourceElement
           statement
            expressionStatement
             expressionSequence
              singleExpression
               singleExpression
                singleExpression
                 this
                .
                identifierName
                 identifier
                  empName
               =
               singleExpression
                identifierName
                 identifier
                  name
             ;
          sourceElement
           statement
            expressionStatement
             expressionSequence
              singleExpression
               singleExpression
                singleExpression
                 this
                .
                identifierName
                 identifier
                  empCode
               =
               singleExpression
                identifierName
                 identifier
                  code
             ;
        }
      classElement
       propertyMemberDeclaration
        propertyMemberBase
        propertyName
         identifierName
          identifier
           displayEmployee
        callSignature
         (
         )
        {
        functionBody
         sourceElements
          sourceElement
           statement
            expressionStatement
             expressionSequence
              singleExpression
               singleExpression
                singleExpression
                 identifierName
                  identifier
                   console
                .
                identifierName
                 identifier
                  log
               arguments
                (
                argumentList
                 argument
                  singleExpression
                   singleExpression
                    singleExpression
                     singleExpression
                      literal
                       "Employee Code: "
                     +
                     singleExpression
                      singleExpression
                       this
                      .
                      identifierName
                       identifier
                        empCode
                    +
                    singleExpression
                     literal
                      ", Employee Name: "
                   +
                   singleExpression
                    singleExpression
                     this
                    .
                    identifierName
                     identifier
                      empName
                )
             ;
        }
      }
  sourceElement
   statement
    variableStatement
     varModifier
      let
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         companyName
       typeAnnotation
        :
        type_
         unionOrIntersectionOrPrimaryType
          primaryType
           predefinedType
            string
       =
       singleExpression
        literal
         "XYZ"
     ;
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         singleExpression
          identifierName
           reservedWord
            keyword
             module
         .
         identifierName
          identifier
           exports
        .
        identifierName
         identifier
          routes
       =
       singleExpression
        objectLiteral
         {
         propertyAssignment
          propertyName
           "GET /lookup/:lookupId"
          :
          singleExpression
           objectLiteral
            {
            propertyAssignment
             propertyName
              identifierName
               identifier
                controller
             :
             singleExpression
              literal
               "LookupReferenceController"
            }
         ,
         propertyAssignment
          propertyName
           "POST /lookup"
          :
          singleExpression
           objectLiteral
            {
            propertyAssignment
             propertyName
              identifierName
               identifier
                controller
             :
             singleExpression
              literal
               "LookupReferenceController"
            }
         ,
         propertyAssignment
          propertyName
           '/health'
          :
          singleExpression
           anonymousFunction
            function
            (
            formalParameterList
             formalParameterArg
              assignable
               identifier
                req
             ,
             formalParameterArg
              assignable
               identifier
                res
            )
            {
            functionBody
             sourceElements
              sourceElement
               statement
                expressionStatement
                 expressionSequence
                  singleExpression
                   identifierName
                    reservedWord
                     keyword
                      return
                   singleExpression
                    singleExpression
                     singleExpression
                      identifierName
                       identifier
                        res
                     .
                     identifierName
                      identifier
                       json
                    arguments
                     (
                     argumentList
                      argument
                       singleExpression
                        objectLiteral
                         {
                         propertyAssignment
                          propertyName
                           identifierName
                            identifier
                             status
                          :
                          singleExpression
                           literal
                            'UP'
                         ,
                         propertyAssignment
                          propertyName
                           identifierName
                            identifier
                             version
                          :
                          singleExpression
                           singleExpression
                            singleExpression
                             identifierName
                              identifier
                               sails
                            .
                            identifierName
                             identifier
                              config
                           .
                           identifierName
                            identifier
                             version
                         }
                     )
                 ;
            }
         }
 <EOF>
