program
 sourceElements
  sourceElement
   statement
    functionDeclaration
     function
     identifier
      getArray
     callSignature
      typeParameters
       <
       typeParameterList
        typeParameter
         identifier
          T
       >
      (
      parameterList
       parameter
        requiredParameter
         identifierOrPattern
          identifierName
           identifier
            items
         typeAnnotation
          :
          type_
           unionOrIntersectionOrPrimaryType
            primaryType
             primaryType
              typeReference
               typeName
                identifier
                 T
             [
             ]
      )
      typeAnnotation
       :
       type_
        unionOrIntersectionOrPrimaryType
         primaryType
          primaryType
           typeReference
            typeName
             identifier
              T
          [
          ]
     {
     functionBody
      sourceElements
       sourceElement
        statement
         expressionStatement
          expressionSequence
           singleExpression
            identifierName
             reservedWord
              keyword
               return
            singleExpression
             new
             singleExpression
              identifierName
               identifier
                Array
              singleExpression
               singleExpression
                singleExpression
                 typeArguments
                  <
                  typeArgumentList
                   typeArgument
                    type_
                     unionOrIntersectionOrPrimaryType
                      primaryType
                       typeReference
                        typeName
                         identifier
                          T
                  >
                arguments
                 (
                 )
               .
               identifierName
                identifier
                 concat
             arguments
              (
              )
          ;
     }
  sourceElement
   statement
    variableStatement
     varModifier
      let
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         myNumArr
       =
       singleExpression
        identifierName
         identifier
          getArray
        singleExpression
         typeArguments
          <
          typeArgumentList
           typeArgument
            type_
             unionOrIntersectionOrPrimaryType
              primaryType
               typeReference
                typeName
                 identifier
                  Test
          >
         expressionSequence
          singleExpression
           (
           expressionSequence
            singleExpression
             arrayLiteral
              [
              elementList
               arrayElement
                singleExpression
                 literal
                  numericLiteral
                   100
               ,
               arrayElement
                singleExpression
                 literal
                  numericLiteral
                   200
               ,
               arrayElement
                singleExpression
                 literal
                  numericLiteral
                   300
              ]
           )
     ;
  sourceElement
   statement
    variableStatement
     varModifier
      let
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         myStrArr
       =
       singleExpression
        identifierName
         identifier
          getArray
        singleExpression
         typeArguments
          <
          typeArgumentList
           typeArgument
            type_
             unionOrIntersectionOrPrimaryType
              primaryType
               predefinedType
                string
          >
         expressionSequence
          singleExpression
           (
           expressionSequence
            singleExpression
             arrayLiteral
              [
              elementList
               arrayElement
                singleExpression
                 literal
                  "Hello"
               ,
               arrayElement
                singleExpression
                 literal
                  "World"
              ]
           )
     ;
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         identifierName
          identifier
           myNumArr
        .
        identifierName
         identifier
          push
       arguments
        (
        argumentList
         argument
          singleExpression
           literal
            numericLiteral
             400
        )
     ;
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         identifierName
          identifier
           myStrArr
        .
        identifierName
         identifier
          push
       arguments
        (
        argumentList
         argument
          singleExpression
           literal
            "Hello TypeScript"
        )
     ;
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         identifierName
          identifier
           myNumArr
        .
        identifierName
         identifier
          push
       arguments
        (
        argumentList
         argument
          singleExpression
           literal
            "Hi"
        )
     ;
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         identifierName
          identifier
           myStrArr
        .
        identifierName
         identifier
          push
       arguments
        (
        argumentList
         argument
          singleExpression
           literal
            numericLiteral
             500
        )
     ;
  sourceElement
   statement
    functionDeclaration
     function
     identifier
      displayType
     callSignature
      typeParameters
       <
       typeParameterList
        typeParameter
         identifier
          T
        ,
        typeParameter
         identifier
          U
       >
      (
      parameterList
       parameter
        requiredParameter
         identifierOrPattern
          identifierName
           identifier
            id
         typeAnnotation
          :
          type_
           unionOrIntersectionOrPrimaryType
            primaryType
             typeReference
              typeName
               identifier
                T
       ,
       parameter
        requiredParameter
         identifierOrPattern
          identifierName
           identifier
            name
         typeAnnotation
          :
          type_
           unionOrIntersectionOrPrimaryType
            primaryType
             typeReference
              typeName
               identifier
                U
      )
      typeAnnotation
       :
       type_
        unionOrIntersectionOrPrimaryType
         primaryType
          predefinedType
           void
     {
     functionBody
      sourceElements
       sourceElement
        statement
         expressionStatement
          expressionSequence
           singleExpression
            singleExpression
             singleExpression
              identifierName
               identifier
                console
             .
             identifierName
              identifier
               log
            arguments
             (
             argumentList
              argument
               singleExpression
                singleExpression
                 singleExpression
                  typeof
                  singleExpression
                   (
                   expressionSequence
                    singleExpression
                     identifierName
                      identifier
                       id
                   )
                 +
                 singleExpression
                  literal
                   ", "
                +
                singleExpression
                 typeof
                 singleExpression
                  (
                  expressionSequence
                   singleExpression
                    identifierName
                     identifier
                      name
                  )
             )
          ;
     }
  sourceElement
   statement
    functionDeclaration
     function
     identifier
      displayTypeNon
     callSignature
      typeParameters
       <
       typeParameterList
        typeParameter
         identifier
          T
       >
      (
      parameterList
       parameter
        requiredParameter
         identifierOrPattern
          identifierName
           identifier
            id
         typeAnnotation
          :
          type_
           unionOrIntersectionOrPrimaryType
            primaryType
             typeReference
              typeName
               identifier
                T
       ,
       parameter
        requiredParameter
         identifierOrPattern
          identifierName
           identifier
            name
         typeAnnotation
          :
          type_
           unionOrIntersectionOrPrimaryType
            primaryType
             predefinedType
              string
      )
      typeAnnotation
       :
       type_
        unionOrIntersectionOrPrimaryType
         primaryType
          predefinedType
           void
     {
     functionBody
      sourceElements
       sourceElement
        statement
         expressionStatement
          expressionSequence
           singleExpression
            singleExpression
             singleExpression
              identifierName
               identifier
                console
             .
             identifierName
              identifier
               log
            arguments
             (
             argumentList
              argument
               singleExpression
                singleExpression
                 singleExpression
                  typeof
                  singleExpression
                   (
                   expressionSequence
                    singleExpression
                     identifierName
                      identifier
                       id
                   )
                 +
                 singleExpression
                  literal
                   ", "
                +
                singleExpression
                 typeof
                 singleExpression
                  (
                  expressionSequence
                   singleExpression
                    identifierName
                     identifier
                      name
                  )
             )
          ;
     }
  sourceElement
   statement
    functionDeclaration
     function
     identifier
      displayNames
     callSignature
      typeParameters
       <
       typeParameterList
        typeParameter
         identifier
          T
       >
      (
      parameterList
       parameter
        requiredParameter
         identifierOrPattern
          identifierName
           identifier
            names
         typeAnnotation
          :
          type_
           unionOrIntersectionOrPrimaryType
            primaryType
             primaryType
              typeReference
               typeName
                identifier
                 T
             [
             ]
      )
      typeAnnotation
       :
       type_
        unionOrIntersectionOrPrimaryType
         primaryType
          predefinedType
           void
     {
     functionBody
      sourceElements
       sourceElement
        statement
         expressionStatement
          expressionSequence
           singleExpression
            singleExpression
             singleExpression
              identifierName
               identifier
                console
             .
             identifierName
              identifier
               log
            arguments
             (
             argumentList
              argument
               singleExpression
                singleExpression
                 singleExpression
                  identifierName
                   identifier
                    names
                 .
                 identifierName
                  identifier
                   join
                arguments
                 (
                 argumentList
                  argument
                   singleExpression
                    literal
                     ", "
                 )
             )
          ;
     }
  sourceElement
   statement
    functionDeclaration
     function
     identifier
      display
     callSignature
      typeParameters
       <
       typeParameterList
        typeParameter
         identifier
          T
         constraint
          extends
          type_
           unionOrIntersectionOrPrimaryType
            primaryType
             typeReference
              typeName
               identifier
                Person
       >
      (
      parameterList
       parameter
        requiredParameter
         identifierOrPattern
          identifierName
           identifier
            per
         typeAnnotation
          :
          type_
           unionOrIntersectionOrPrimaryType
            primaryType
             typeReference
              typeName
               identifier
                T
      )
      typeAnnotation
       :
       type_
        unionOrIntersectionOrPrimaryType
         primaryType
          predefinedType
           void
     {
     functionBody
      sourceElements
       sourceElement
        statement
         expressionStatement
          expressionSequence
           singleExpression
            singleExpression
             singleExpression
              identifierName
               identifier
                console
             .
             identifierName
              identifier
               log
            arguments
             (
             argumentList
              argument
               singleExpression
                literal
                 templateStringLiteral
                  `
                  templateStringAtom
                   ${
                   singleExpression
                    singleExpression
                     identifierName
                      identifier
                       per
                    .
                    identifierName
                     identifier
                      firstName
                   }
                  templateStringAtom
                    
                  templateStringAtom
                   ${
                   singleExpression
                    singleExpression
                     identifierName
                      identifier
                       per
                    .
                    identifierName
                     identifier
                      lastName
                   }
                  `
             )
          ;
     }
  sourceElement
   statement
    functionDeclaration
     function
     identifier
      genericWithKeyOf
     callSignature
      typeParameters
       <
       typeParameterList
        typeParameter
         identifier
          T
        ,
        typeParameter
         identifier
          K
         constraint
          extends
          type_
           unionOrIntersectionOrPrimaryType
            primaryType
             keyof
             primaryType
              typeReference
               typeName
                identifier
                 T
       >
      (
      parameterList
       parameter
        requiredParameter
         identifierOrPattern
          identifierName
           identifier
            list
         typeAnnotation
          :
          type_
           unionOrIntersectionOrPrimaryType
            primaryType
             primaryType
              typeReference
               typeName
                identifier
                 T
             [
             ]
       ,
       parameter
        requiredParameter
         identifierOrPattern
          identifierName
           identifier
            field
         typeAnnotation
          :
          type_
           unionOrIntersectionOrPrimaryType
            primaryType
             typeReference
              typeName
               identifier
                K
      )
      typeAnnotation
       :
       type_
        unionOrIntersectionOrPrimaryType
         primaryType
          primaryType
           typeReference
            typeName
             identifier
              T
          [
          ]
     {
     functionBody
     }
  sourceElement
   statement
    functionDeclaration
     function
     identifier
      genericParameterWithDefault
     callSignature
      typeParameters
       <
       typeParameterList
        typeParameter
         identifier
          T
         =
         typeArgument
          type_
           unionOrIntersectionOrPrimaryType
            primaryType
             typeReference
              typeName
               identifier
                DefaultType
       >
      (
      parameterList
       parameter
        requiredParameter
         identifierOrPattern
          identifierName
           identifier
            field
         typeAnnotation
          :
          type_
           unionOrIntersectionOrPrimaryType
            primaryType
             typeReference
              typeName
               identifier
                T
      )
     {
     functionBody
     }
 <EOF>
