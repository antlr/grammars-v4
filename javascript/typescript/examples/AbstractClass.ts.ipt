program
 sourceElements
  sourceElement
   statement
    variableStatement
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         abstract
       singleExpression
        class
        identifier
         Person
        classHeritage
        classTail
         {
         classElement
          propertyMemberDeclaration
           propertyMemberBase
           propertyName
            identifierName
             identifier
              name
           typeAnnotation
            :
            type_
             unionOrIntersectionOrPrimaryType
              primaryType
               predefinedType
                string
           ;
         classElement
          constructorDeclaration
           constructor
           (
           formalParameterList
            formalParameterArg
             assignable
              identifier
               name
             typeAnnotation
              :
              type_
               unionOrIntersectionOrPrimaryType
                primaryType
                 predefinedType
                  string
           )
           {
           functionBody
            sourceElements
             sourceElement
              statement
               expressionStatement
                expressionSequence
                 singleExpression
                  singleExpression
                   singleExpression
                    this
                   .
                   identifierName
                    identifier
                     name
                  =
                  singleExpression
                   identifierName
                    identifier
                     name
                ;
           }
         classElement
          propertyMemberDeclaration
           abstractDeclaration
            abstract
            identifier
             find
            callSignature
             (
             parameterList
              parameter
               requiredParameter
                identifierOrPattern
                 identifierName
                  identifier
                   string
             )
             typeAnnotation
              :
              type_
               unionOrIntersectionOrPrimaryType
                primaryType
                 typeReference
                  typeName
                   identifier
                    Person
            eos
             ;
         classElement
          propertyMemberDeclaration
           abstractDeclaration
            abstract
            variableStatement
             variableDeclarationList
              variableDeclaration
               identifierOrKeyWord
                identifier
                 nameAbs
               typeAnnotation
                :
                type_
                 unionOrIntersectionOrPrimaryType
                  primaryType
                   predefinedType
                    string
             ;
            eos
         }
  sourceElement
   statement
    classDeclaration
     class
     identifier
      Employee
     classHeritage
      classExtendsClause
       extends
       typeReference
        typeName
         identifier
          Person
     classTail
      {
      classElement
       propertyMemberDeclaration
        propertyMemberBase
        propertyName
         identifierName
          identifier
           empCode
        typeAnnotation
         :
         type_
          unionOrIntersectionOrPrimaryType
           primaryType
            predefinedType
             number
        ;
      classElement
       constructorDeclaration
        constructor
        (
        formalParameterList
         formalParameterArg
          assignable
           identifier
            name
          typeAnnotation
           :
           type_
            unionOrIntersectionOrPrimaryType
             primaryType
              predefinedType
               string
         ,
         formalParameterArg
          assignable
           identifier
            code
          typeAnnotation
           :
           type_
            unionOrIntersectionOrPrimaryType
             primaryType
              predefinedType
               number
        )
        {
        functionBody
         sourceElements
          sourceElement
           statement
            expressionStatement
             expressionSequence
              singleExpression
               identifierName
                reservedWord
                 keyword
                  super
               singleExpression
                (
                expressionSequence
                 singleExpression
                  identifierName
                   identifier
                    name
                )
             ;
          sourceElement
           statement
            expressionStatement
             expressionSequence
              singleExpression
               singleExpression
                singleExpression
                 this
                .
                identifierName
                 identifier
                  empCode
               =
               singleExpression
                identifierName
                 identifier
                  code
             ;
        }
      classElement
       propertyMemberDeclaration
        propertyMemberBase
        propertyName
         identifierName
          identifier
           find
        callSignature
         (
         parameterList
          parameter
           requiredParameter
            identifierOrPattern
             identifierName
              identifier
               name
            typeAnnotation
             :
             type_
              unionOrIntersectionOrPrimaryType
               primaryType
                predefinedType
                 string
         )
         typeAnnotation
          :
          type_
           unionOrIntersectionOrPrimaryType
            primaryType
             typeReference
              typeName
               identifier
                Person
        {
        functionBody
         sourceElements
          sourceElement
           statement
            expressionStatement
             expressionSequence
              singleExpression
               identifierName
                reservedWord
                 keyword
                  return
               singleExpression
                new
                singleExpression
                 identifierName
                  identifier
                   Employee
                arguments
                 (
                 argumentList
                  argument
                   singleExpression
                    identifierName
                     identifier
                      name
                  ,
                  argument
                   singleExpression
                    literal
                     numericLiteral
                      1
                 )
             ;
        }
      }
  sourceElement
   statement
    variableStatement
     varModifier
      let
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         emp
       typeAnnotation
        :
        type_
         unionOrIntersectionOrPrimaryType
          primaryType
           typeReference
            typeName
             identifier
              Person
       =
       singleExpression
        new
        singleExpression
         identifierName
          identifier
           Employee
        arguments
         (
         argumentList
          argument
           singleExpression
            literal
             "James"
          ,
          argument
           singleExpression
            literal
             numericLiteral
              100
         )
     ;
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         identifierName
          identifier
           emp
        .
        identifierName
         identifier
          display
       arguments
        (
        )
     ;
  sourceElement
   statement
    variableStatement
     varModifier
      let
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         emp2
       typeAnnotation
        :
        type_
         unionOrIntersectionOrPrimaryType
          primaryType
           typeReference
            typeName
             identifier
              Person
       =
       singleExpression
        singleExpression
         singleExpression
          identifierName
           identifier
            emp
         .
         identifierName
          identifier
           find
        arguments
         (
         argumentList
          argument
           singleExpression
            literal
             'Steve'
         )
     ;
 <EOF>
