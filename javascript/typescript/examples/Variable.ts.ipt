program
 sourceElements
  sourceElement
   statement
    variableStatement
     varModifier
      let
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         employeeName
       =
       singleExpression
        literal
         "John"
     ;
  sourceElement
   statement
    variableStatement
     varModifier
      let
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         employeeName
       typeAnnotation
        :
        type_
         unionOrIntersectionOrPrimaryType
          primaryType
           predefinedType
            string
       =
       singleExpression
        literal
         "John"
     ;
  sourceElement
   statement
    variableStatement
     varModifier
      var
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         num1
       typeAnnotation
        :
        type_
         unionOrIntersectionOrPrimaryType
          primaryType
           predefinedType
            number
       =
       singleExpression
        literal
         numericLiteral
          1
     ;
  sourceElement
   statement
    variableStatement
     varModifier
      const
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         playerCodes
       =
       singleExpression
        objectLiteral
         {
         propertyAssignment
          propertyName
           identifierName
            identifier
             player1
          :
          singleExpression
           literal
            numericLiteral
             9
         ,
         propertyAssignment
          propertyName
           identifierName
            identifier
             player2
          :
          singleExpression
           literal
            numericLiteral
             10
         ,
         propertyAssignment
          propertyName
           identifierName
            identifier
             player3
          :
          singleExpression
           literal
            numericLiteral
             13
         ,
         propertyAssignment
          propertyName
           identifierName
            identifier
             player4
          :
          singleExpression
           literal
            numericLiteral
             20
         }
     ;
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         identifierName
          identifier
           playerCodes
        .
        identifierName
         identifier
          player2
       =
       singleExpression
        literal
         numericLiteral
          11
     ;
  sourceElement
   statement
    variableStatement
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         playerCodes
       =
       singleExpression
        objectLiteral
         {
         propertyAssignment
          propertyName
           identifierName
            identifier
             player1
          :
          singleExpression
           literal
            numericLiteral
             50
         ,
         propertyAssignment
          propertyName
           identifierName
            identifier
             player2
          :
          singleExpression
           literal
            numericLiteral
             10
         ,
         propertyAssignment
          propertyName
           identifierName
            identifier
             player3
          :
          singleExpression
           literal
            numericLiteral
             13
         ,
         propertyAssignment
          propertyName
           identifierName
            identifier
             player4
          :
          singleExpression
           literal
            numericLiteral
             20
         }
     ;
  sourceElement
   statement
    variableStatement
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         playerCodesArray
       =
       singleExpression
        objectLiteral
         {
         propertyAssignment
          propertyName
           identifierName
            identifier
             player1
          :
          singleExpression
           literal
            numericLiteral
             50
         ,
         propertyAssignment
          propertyName
           identifierName
            identifier
             player2
          :
          singleExpression
           identifierName
            identifier
             playerCodes
           singleExpression
            arrayLiteral
             [
             elementList
              arrayElement
               singleExpression
                identifierName
                 identifier
                  Test
             ]
         ,
         propertyAssignment
          propertyName
           identifierName
            identifier
             player3
          :
          singleExpression
           literal
            numericLiteral
             13
         ,
         propertyAssignment
          propertyName
           identifierName
            identifier
             player4
          :
          singleExpression
           literal
            numericLiteral
             20
         }
     ;
  sourceElement
   export
   statement
    variableStatement
     varModifier
      const
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         ROUTES
       typeAnnotation
        :
        type_
         unionOrIntersectionOrPrimaryType
          primaryType
           primaryType
            predefinedType
             any
           [
           ]
       =
       singleExpression
        arrayLiteral
         [
         elementList
          arrayElement
           singleExpression
            objectLiteral
             {
             propertyAssignment
              propertyName
               identifierName
                identifier
                 path
              :
              singleExpression
               literal
                '/dashboard'
             ,
             propertyAssignment
              propertyName
               identifierName
                identifier
                 title
              :
              singleExpression
               literal
                'Dashboard'
             ,
             propertyAssignment
              propertyName
               identifierName
                identifier
                 icon
              :
              singleExpression
               literal
                'dashboard'
             ,
             propertyAssignment
              propertyName
               identifierName
                reservedWord
                 keyword
                  class
              :
              singleExpression
               literal
                ''
             ,
             propertyAssignment
              propertyName
               identifierName
                identifier
                 allowAnonymous
              :
              singleExpression
               identifierName
                reservedWord
                 false
             }
          ,
          arrayElement
           singleExpression
            objectLiteral
             {
             propertyAssignment
              propertyName
               identifierName
                identifier
                 path
              :
              singleExpression
               literal
                '/deals'
             ,
             propertyAssignment
              propertyName
               identifierName
                identifier
                 title
              :
              singleExpression
               literal
                'Deals'
             ,
             propertyAssignment
              propertyName
               identifierName
                identifier
                 icon
              :
              singleExpression
               literal
                'assignment'
             ,
             propertyAssignment
              propertyName
               identifierName
                reservedWord
                 keyword
                  class
              :
              singleExpression
               literal
                ''
             ,
             propertyAssignment
              propertyName
               identifierName
                identifier
                 allowAnonymous
              :
              singleExpression
               identifierName
                reservedWord
                 false
             }
          ,
          arrayElement
           singleExpression
            objectLiteral
             {
             propertyAssignment
              propertyName
               identifierName
                identifier
                 path
              :
              singleExpression
               literal
                '/pipeline'
             ,
             propertyAssignment
              propertyName
               identifierName
                identifier
                 title
              :
              singleExpression
               literal
                'Pipeline'
             ,
             propertyAssignment
              propertyName
               identifierName
                identifier
                 icon
              :
              singleExpression
               literal
                'timeline'
             ,
             propertyAssignment
              propertyName
               identifierName
                reservedWord
                 keyword
                  class
              :
              singleExpression
               literal
                ''
             ,
             propertyAssignment
              propertyName
               identifierName
                identifier
                 allowAnonymous
              :
              singleExpression
               identifierName
                reservedWord
                 false
             }
          ,
          arrayElement
           singleExpression
            objectLiteral
             {
             propertyAssignment
              propertyName
               identifierName
                identifier
                 path
              :
              singleExpression
               literal
                '/language-resolver'
             ,
             propertyAssignment
              propertyName
               identifierName
                identifier
                 title
              :
              singleExpression
               literal
                'Language Resolver'
             ,
             propertyAssignment
              propertyName
               identifierName
                identifier
                 icon
              :
              singleExpression
               literal
                'translate'
             ,
             propertyAssignment
              propertyName
               identifierName
                reservedWord
                 keyword
                  class
              :
              singleExpression
               literal
                ''
             ,
             propertyAssignment
              propertyName
               identifierName
                identifier
                 allowAnonymous
              :
              singleExpression
               identifierName
                reservedWord
                 false
             }
          ,
          arrayElement
           singleExpression
            objectLiteral
             {
             propertyAssignment
              propertyName
               identifierName
                identifier
                 path
              :
              singleExpression
               literal
                '/commit-analysis'
             ,
             propertyAssignment
              propertyName
               identifierName
                identifier
                 title
              :
              singleExpression
               literal
                'Commit History'
             ,
             propertyAssignment
              propertyName
               identifierName
                identifier
                 icon
              :
              singleExpression
               literal
                'tune'
             ,
             propertyAssignment
              propertyName
               identifierName
                reservedWord
                 keyword
                  class
              :
              singleExpression
               literal
                ''
             ,
             propertyAssignment
              propertyName
               identifierName
                identifier
                 allowAnonymous
              :
              singleExpression
               identifierName
                reservedWord
                 false
             }
          ,
          arrayElement
           singleExpression
            objectLiteral
             {
             propertyAssignment
              propertyName
               identifierName
                identifier
                 path
              :
              singleExpression
               literal
                '/login'
             ,
             propertyAssignment
              propertyName
               identifierName
                identifier
                 title
              :
              singleExpression
               literal
                'Log In'
             ,
             propertyAssignment
              propertyName
               identifierName
                identifier
                 icon
              :
              singleExpression
               literal
                'lock'
             ,
             propertyAssignment
              propertyName
               identifierName
                reservedWord
                 keyword
                  class
              :
              singleExpression
               literal
                ''
             ,
             propertyAssignment
              propertyName
               identifierName
                identifier
                 allowAnonymous
              :
              singleExpression
               identifierName
                reservedWord
                 true
             }
           ,
         ]
     ;
  sourceElement
   export
   statement
    variableStatement
     varModifier
      const
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         Components
       =
       singleExpression
        singleExpression
         singleExpression
          singleExpression
           singleExpression
            singleExpression
             singleExpression
              singleExpression
               singleExpression
                identifierName
                 identifier
                  _
               .
               identifierName
                identifier
                 chain
              arguments
               (
               argumentList
                argument
                 singleExpression
                  arrayLiteral
                   [
                   elementList
                    arrayElement
                     singleExpression
                      singleExpression
                       singleExpression
                        singleExpression
                         identifierName
                          identifier
                           _
                        .
                        identifierName
                         identifier
                          values
                       arguments
                        (
                        argumentList
                         argument
                          singleExpression
                           identifierName
                            identifier
                             ROUTES
                        )
                      as
                      asExpression
                       predefinedType
                        any
                       [
                       ]
                   ]
               )
             .
             identifierName
              identifier
               flatten
            arguments
             (
             )
           .
           identifierName
            identifier
             filter
          arguments
           (
           argumentList
            argument
             singleExpression
              anonymousFunction
               arrowFunctionDeclaration
                arrowFunctionParameters
                 (
                 formalParameterList
                  formalParameterArg
                   assignable
                    identifier
                     item
                 )
                =>
                arrowFunctionBody
                 singleExpression
                  singleExpression
                   singleExpression
                    identifierName
                     identifier
                      item
                   .
                   identifierName
                    identifier
                     name
                  &&
                  singleExpression
                   (
                   expressionSequence
                    singleExpression
                     singleExpression
                      singleExpression
                       singleExpression
                        singleExpression
                         singleExpression
                          identifierName
                           identifier
                            item
                         .
                         identifierName
                          identifier
                           name
                        .
                        identifierName
                         identifier
                          toLowerCase
                       arguments
                        (
                        )
                      .
                      identifierName
                       identifier
                        endsWith
                     arguments
                      (
                      argumentList
                       argument
                        singleExpression
                         literal
                          'component'
                      )
                   )
           )
         .
         identifierName
          identifier
           value
        arguments
         (
         )
     ;
  sourceElement
   statement
    variableStatement
     varModifier
      var
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         fileLanguages
       =
       singleExpression
        singleExpression
         singleExpression
          identifierName
           identifier
            _
         .
         identifierName
          identifier
           uniqBy
        arguments
         (
         argumentList
          argument
           singleExpression
            arrayLiteral
             [
             elementList
              arrayElement
               ...
               singleExpression
                singleExpression
                 this
                .
                identifierName
                 identifier
                  fileLanguages
              ,
              arrayElement
               ...
               singleExpression
                identifierName
                 identifier
                  Components
             ]
          ,
          argument
           singleExpression
            anonymousFunction
             arrowFunctionDeclaration
              arrowFunctionParameters
               propertyName
                identifierName
                 identifier
                  p
              =>
              arrowFunctionBody
               singleExpression
                singleExpression
                 identifierName
                  identifier
                   p
                .
                identifierName
                 identifier
                  fileId
         )
     ;
  sourceElement
   statement
    variableStatement
     varModifier
      var
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         languageMap
       =
       singleExpression
        new
        singleExpression
         identifierName
          identifier
           Map
        arguments
         (
         argumentList
          argument
           singleExpression
            singleExpression
             singleExpression
              identifierName
               identifier
                fileLanguages
             .
             identifierName
              identifier
               map
            arguments
             (
             argumentList
              argument
               singleExpression
                anonymousFunction
                 arrowFunctionDeclaration
                  arrowFunctionParameters
                   propertyName
                    identifierName
                     identifier
                      lang
                  =>
                  arrowFunctionBody
                   singleExpression
                    singleExpression
                     arrayLiteral
                      [
                      elementList
                       arrayElement
                        singleExpression
                         singleExpression
                          identifierName
                           identifier
                            lang
                         .
                         identifierName
                          identifier
                           id
                       ,
                       arrayElement
                        singleExpression
                         identifierName
                          identifier
                           lang
                      ]
                    as
                    asExpression
                     singleExpression
                      arrayLiteral
                       [
                       elementList
                        arrayElement
                         singleExpression
                          identifierName
                           identifier
                            string
                        ,
                        arrayElement
                         singleExpression
                          identifierName
                           identifier
                            ILanguage
                       ]
             )
         )
     ;
  sourceElement
   statement
    variableStatement
     varModifier
      let
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         schema
       =
       singleExpression
        identifierName
         identifier
          mapEnumToSchema
        singleExpression
         (
         expressionSequence
          singleExpression
           singleExpression
            singleExpression
             identifierName
              identifier
               Joi
            .
            identifierName
             identifier
              boolean
           arguments
            (
            )
         )
  sourceElement
   statement
    variableStatement
     varModifier
      const
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         codesByType
       =
       singleExpression
        singleExpression
         singleExpression
          singleExpression
           singleExpression
            singleExpression
             singleExpression
              identifierName
               identifier
                Joi
             .
             identifierName
              identifier
               object
            arguments
             (
             )
           .
           identifierName
            identifier
             keys
          arguments
           (
           argumentList
            argument
             singleExpression
              objectLiteral
               {
               propertyAssignment
                propertyName
                 identifierName
                  identifier
                   type
                :
                singleExpression
                 singleExpression
                  singleExpression
                   singleExpression
                    singleExpression
                     identifierName
                      identifier
                       Joi
                    .
                    identifierName
                     identifier
                      string
                   arguments
                    (
                    )
                  .
                  identifierName
                   identifier
                    required
                 arguments
                  (
                  )
               ,
               propertyAssignment
                propertyName
                 identifierName
                  identifier
                   limit
                :
                singleExpression
                 singleExpression
                  singleExpression
                   singleExpression
                    singleExpression
                     identifierName
                      identifier
                       Joi
                    .
                    identifierName
                     identifier
                      number
                   arguments
                    (
                    )
                  .
                  identifierName
                   identifier
                    optional
                 arguments
                  (
                  )
               ,
               propertyAssignment
                propertyName
                 identifierName
                  identifier
                   skip
                :
                singleExpression
                 singleExpression
                  singleExpression
                   singleExpression
                    singleExpression
                     identifierName
                      identifier
                       Joi
                    .
                    identifierName
                     identifier
                      number
                   arguments
                    (
                    )
                  .
                  identifierName
                   identifier
                    optional
                 arguments
                  (
                  )
               ,
               }
           )
         .
         identifierName
          identifier
           required
        arguments
         (
         )
     ;
  sourceElement
   statement
    variableStatement
     varModifier
      const
     variableDeclarationList
      variableDeclaration
       identifierOrKeyWord
        identifier
         post
       =
       singleExpression
        anonymousFunction
         arrowFunctionDeclaration
          arrowFunctionParameters
           (
           formalParameterList
            lastFormalParameterArg
             ...
             identifier
              args
             typeAnnotation
              :
              type_
               unionOrIntersectionOrPrimaryType
                primaryType
                 primaryType
                  predefinedType
                   any
                 [
                 ]
           )
          =>
          arrowFunctionBody
           singleExpression
            objectLiteral
             {
             }
     ;
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       identifierName
        reservedWord
         keyword
          const
       singleExpression
        singleExpression
         identifierName
          reservedWord
           keyword
            function
        =
        singleExpression
         anonymousFunction
          arrowFunctionDeclaration
           arrowFunctionParameters
            (
            formalParameterList
             formalParameterArg
              assignable
               arrayLiteral
                [
                elementList
                 arrayElement
                  singleExpression
                   identifierName
                    identifier
                     x
                ]
              typeAnnotation
               :
               type_
                unionOrIntersectionOrPrimaryType
                 primaryType
                  predefinedType
                   any
            )
           =>
           arrowFunctionBody
            singleExpression
             identifierName
              identifier
               x
     ;
 <EOF>
