(program (sourceElements (sourceElement (statement (importStatement import (importFromBlock (importDefault (aliasName (identifierName (identifier React))) ,) (moduleItems { (aliasName (identifierName (identifier Component))) }) (importFrom from 'react') (eos ;))))) (sourceElement (statement (importStatement import (importFromBlock (importNamespace (identifierName (identifier PropTypes))) (importFrom from 'prop-types') (eos ;))))) (sourceElement (statement (importStatement import (importFromBlock (moduleItems { (aliasName (identifierName (identifier findDOMNode))) }) (importFrom from 'react-dom') eos)))) (sourceElement (statement (importStatement import (importFromBlock (moduleItems { (aliasName (identifierName (identifier JivePopover))) , (aliasName (identifierName (identifier AutopositionOverlay))) }) (importFrom from 'mitui-util-bootstrap') (eos ;))))) (sourceElement (statement (classDeclaration class (identifier OptionField) (classTail extends (singleExpression (identifier Component)) { (classElement (identifier static) (assignable (identifier propTypes)) = (objectLiteral { (propertyAssignment (propertyName (identifierName (identifier id))) : (singleExpression (singleExpression (singleExpression (identifier PropTypes)) . (identifierName (identifier number))) . (identifierName (identifier isRequired)))) , (propertyAssignment (propertyName (identifierName (identifier onComplete))) : (singleExpression (singleExpression (singleExpression (identifier PropTypes)) . (identifierName (identifier func))) . (identifierName (identifier isRequired)))) , (propertyAssignment (propertyName (identifierName (identifier optionId))) : (singleExpression (singleExpression (identifier PropTypes)) . (identifierName (identifier number)))) , (propertyAssignment (propertyName (identifierName (identifier options))) : (singleExpression (singleExpression (singleExpression (singleExpression (identifier PropTypes)) . (identifierName (identifier arrayOf))) (arguments ( (argument (singleExpression (singleExpression (identifier PropTypes)) . (identifierName (identifier object)))) ))) . (identifierName (identifier isRequired)))) , (propertyAssignment (propertyName (identifierName (identifier title))) : (singleExpression (singleExpression (singleExpression (identifier PropTypes)) . (identifierName (identifier string))) . (identifierName (identifier isRequired)))) , (propertyAssignment (propertyName (identifierName (identifier value))) : (singleExpression (singleExpression (identifier PropTypes)) . (identifierName (identifier string)))) }) ;) (classElement (identifier static) (assignable (identifier defaultProps)) = (objectLiteral { (propertyAssignment (propertyName (identifierName (identifier optionId))) : (singleExpression - (singleExpression (literal (numericLiteral 1))))) , (propertyAssignment (propertyName (identifierName (identifier value))) : (singleExpression (literal ''))) }) ;) (classElement (propertyName (identifierName (identifier state))) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName (identifier showPopover))) : (singleExpression (literal false))) }))) (classElement (methodDefinition (propertyName (identifierName (identifier hide))) ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName (identifier setState))) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName (identifier showPopover))) : (singleExpression (literal false))) }))) )))) (eos ;)))))) })) (classElement (methodDefinition (propertyName (identifierName (identifier onSelectOption))) ( (formalParameterList (formalParameterArg (assignable (identifier option))) , (formalParameterArg (assignable (identifier e)))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (identifier e)) . (identifierName (identifier preventDefault))) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName (identifier props))) . (identifierName (identifier onComplete))) (arguments ( (argument (singleExpression (identifier option))) )))) (eos ;)))))) })) (classElement (methodDefinition (propertyName (identifierName (identifier handlePopoverToggleClick))) ( (formalParameterList (formalParameterArg (assignable (identifier e)))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (identifier e)) . (identifierName (identifier preventDefault))) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName (identifier setState))) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName (identifier showPopover))) : (singleExpression ! (singleExpression (singleExpression (singleExpression this) . (identifierName (identifier state))) . (identifierName (identifier showPopover))))) }))) )))) (eos ;)))))) })) (classElement (methodDefinition (propertyName (identifierName (identifier render))) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression ( (expressionSequence (singleExpression (jsxElements (jsxElement (jsxOpeningElement (jsxElementBegin <) (jsxOpeningElementName span) >) (jsxChildren \n         (jsxElement (jsxOpeningElement (jsxElementBegin <) (jsxOpeningElementName a) (jsxAttributes (jsxAttribute (jsxAttributeName ref) = (jsxAttributeValue "popoverToggle")) (jsxAttributes (jsxAttribute (jsxAttributeName href) = (jsxAttributeValue "#")) (jsxAttributes (jsxAttribute (jsxAttributeName onClick) = (jsxAttributeValue (objectExpressionSequence (openBrace {) (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName (identifier handlePopoverToggleClick))) . (identifierName (identifier bind))) (arguments ( (argument (singleExpression this)) )))) })))))) >) (jsxChildren \n           (objectExpressionSequence (openBrace {) (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName (identifier props))) . (identifierName (identifier value))) || (singleExpression (singleExpression (singleExpression this) . (identifierName (identifier props))) . (identifierName (identifier title))))) }) \n        ) (jsxClosingElement </ (jsxClosingElementName a) >)) \n         (jsxElement (jsxOpeningElement (jsxElementBegin <) (jsxOpeningElementName AutopositionOverlay) (jsxAttributes (jsxAttribute (jsxAttributeName show) = (jsxAttributeValue (objectExpressionSequence (openBrace {) (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName (identifier state))) . (identifierName (identifier showPopover)))) }))) (jsxAttributes (jsxAttribute (jsxAttributeName target) = (jsxAttributeValue (objectExpressionSequence (openBrace {) (expressionSequence (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (identifier findDOMNode)) (arguments ( (argument (singleExpression (singleExpression (singleExpression this) . (identifierName (identifier refs))) . (identifierName (identifier popoverToggle)))) ))))))) }))) (jsxAttributes (jsxAttribute (jsxAttributeName placement) = (jsxAttributeValue "bottom")) (jsxAttributes (jsxAttribute (jsxAttributeName animation) = (jsxAttributeValue (objectExpressionSequence (openBrace {) (expressionSequence (singleExpression (literal false))) }))) (jsxAttributes (jsxAttribute (jsxAttributeName onHide) = (jsxAttributeValue (objectExpressionSequence (openBrace {) (expressionSequence (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression this) . (identifierName (identifier setState))) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName (identifier showPopover))) : (singleExpression (literal false))) }))) ))))))) }))) (jsxAttributes (jsxAttribute (jsxAttributeName rootClose) = (jsxAttributeValue (objectExpressionSequence (openBrace {) (expressionSequence (singleExpression (literal true))) }))))))))) >) (jsxChildren \n           (jsxElement (jsxOpeningElement (jsxElementBegin <) (jsxOpeningElementName JivePopover) (jsxAttributes (jsxAttribute (jsxAttributeName id) = (jsxAttributeValue (objectExpressionSequence (openBrace {) (expressionSequence (singleExpression (literal (templateStringLiteral ` (templateStringAtom o) (templateStringAtom p) (templateStringAtom t) (templateStringAtom i) (templateStringAtom o) (templateStringAtom n) (templateStringAtom -) (templateStringAtom f) (templateStringAtom i) (templateStringAtom e) (templateStringAtom l) (templateStringAtom d) (templateStringAtom -) (templateStringAtom ${ (singleExpression (singleExpression (singleExpression this) . (identifierName (identifier props))) . (identifierName (identifier id))) }) `)))) }))) (jsxAttributes (jsxAttribute (jsxAttributeName className) = (jsxAttributeValue "j2-pages-mitui-profile-header-popover-availability")))) >) (jsxChildren \n             (jsxElement (jsxOpeningElement (jsxElementBegin <) (jsxOpeningElementName h4) >) (jsxChildren (objectExpressionSequence (openBrace {) (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName (identifier props))) . (identifierName (identifier title)))) })) (jsxClosingElement </ (jsxClosingElementName h4) >)) \n\n             (jsxElement (jsxOpeningElement (jsxElementBegin <) (jsxOpeningElementName ul) (jsxAttributes (jsxAttribute (jsxAttributeName className) = (jsxAttributeValue "j2-list-std"))) >) (jsxChildren \n               (objectExpressionSequence (openBrace {) (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName (identifier props))) . (identifierName (identifier options))) . (identifierName (identifier map))) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable (identifier option))) , (formalParameterArg (assignable (identifier i)))) )) => (arrowFunctionBody (singleExpression ( (expressionSequence (singleExpression (jsxElements (jsxElement (jsxOpeningElement (jsxElementBegin <) (jsxOpeningElementName li) (jsxAttributes (jsxAttribute (jsxAttributeName key) = (jsxAttributeValue (objectExpressionSequence (openBrace {) (expressionSequence (singleExpression (literal (templateStringLiteral ` (templateStringAtom o) (templateStringAtom p) (templateStringAtom t) (templateStringAtom i) (templateStringAtom o) (templateStringAtom n) (templateStringAtom s) (templateStringAtom -) (templateStringAtom f) (templateStringAtom i) (templateStringAtom e) (templateStringAtom l) (templateStringAtom d) (templateStringAtom -) (templateStringAtom i) (templateStringAtom t) (templateStringAtom e) (templateStringAtom m) (templateStringAtom -) (templateStringAtom ${ (singleExpression (identifier i)) }) `)))) })))) >) (jsxChildren \n                   (jsxElement (jsxOpeningElement (jsxElementBegin <) (jsxOpeningElementName a) (jsxAttributes (jsxAttribute (jsxAttributeName href) = (jsxAttributeValue "#")) (jsxAttributes (jsxAttribute (jsxAttributeName onClick) = (jsxAttributeValue (objectExpressionSequence (openBrace {) (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName (identifier onSelectOption))) . (identifierName (identifier bind))) (arguments ( (argument (singleExpression this)) , (argument (singleExpression (identifier option))) )))) }))))) >) (jsxChildren \n                     (objectExpressionSequence (openBrace {) (expressionSequence (singleExpression (singleExpression (identifier option)) . (identifierName (identifier value)))) }) \n                  ) (jsxClosingElement </ (jsxClosingElementName a) >)) \n                ) (jsxClosingElement </ (jsxClosingElementName li) >))))) )))))) )))) }) \n              ) (jsxClosingElement </ (jsxClosingElementName ul) >)) \n            ) (jsxClosingElement </ (jsxClosingElementName JivePopover) >)) \n          ) (jsxClosingElement </ (jsxClosingElementName AutopositionOverlay) >)) \n      ) (jsxClosingElement </ (jsxClosingElementName span) >))))) ))) (eos ;)))))) })) })))) (sourceElement (statement (exportStatement export default (singleExpression (identifier OptionField)) (eos ;))))) <EOF>)