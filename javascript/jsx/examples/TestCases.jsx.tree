(program (sourceElements (sourceElement (statement (functionDeclaration function (identifier TestJavascriptKeywordInJsxChild) ( (formalParameterList (formalParameterArg (assignable (identifier props)))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression ( (expressionSequence (singleExpression (jsxElements (jsxElement (jsxOpeningElement (jsxElementBegin <) (jsxOpeningElementName div) >) (jsxChildren from) (jsxClosingElement </ (jsxClosingElementName div) >))))) ))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function (identifier TestNestedOneLineDivs) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression ( (expressionSequence (singleExpression (jsxElements (jsxElement (jsxOpeningElement (jsxElementBegin <) (jsxOpeningElementName div) >) (jsxChildren (jsxElement (jsxOpeningElement (jsxElementBegin <) (jsxOpeningElementName div) >) jsxChildren (jsxClosingElement </ (jsxClosingElementName div) >))) (jsxClosingElement </ (jsxClosingElementName div) >))))) ))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function (identifier TestHtmlTextWithApostrophe) ( (formalParameterList (formalParameterArg (assignable (identifier props)))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression ( (expressionSequence (singleExpression (jsxElements (jsxElement (jsxOpeningElement (jsxElementBegin <) (jsxOpeningElementName p) >) (jsxChildren string'.) (jsxClosingElement </ (jsxClosingElementName p) >))))) ))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function (identifier TestJsxAttributeValue) ( (formalParameterList (formalParameterArg (assignable (identifier props)))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression ( (expressionSequence (singleExpression (jsxElements (jsxElement (jsxOpeningElement (jsxElementBegin <) (jsxOpeningElementName div) >) (jsxChildren (jsxElement (jsxOpeningElement (jsxElementBegin <) (jsxOpeningElementName span) (jsxAttributes (jsxAttribute (jsxAttributeName attribute) = (jsxAttributeValue ">hello")) (jsxAttributes (jsxAttribute (jsxAttributeName attribute2) = (jsxAttributeValue 'there')))) >) (jsxChildren from here) (jsxClosingElement </ (jsxClosingElementName span) >))) (jsxClosingElement </ (jsxClosingElementName div) >))))) ))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function (identifier TestJsxAttributeExpressionValue) ( (formalParameterList (formalParameterArg (assignable (identifier props)))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression ( (expressionSequence (singleExpression (jsxElements (jsxElement (jsxOpeningElement (jsxElementBegin <) (jsxOpeningElementName div) >) (jsxChildren (jsxElement (jsxOpeningElement (jsxElementBegin <) (jsxOpeningElementName span) (jsxAttributes (jsxAttribute (jsxAttributeName attribute) = (jsxAttributeValue (objectExpressionSequence (openBrace {) (expressionSequence (singleExpression (singleExpression (identifier run)) (arguments ( )))) })))) >) (jsxChildren from here) (jsxClosingElement </ (jsxClosingElementName span) >))) (jsxClosingElement </ (jsxClosingElementName div) >))))) ))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function (identifier TestJsxhildrenOfTextAndExpressions) ( (formalParameterList (formalParameterArg (assignable (identifier props)))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression ( (expressionSequence (singleExpression (jsxElements (jsxElement (jsxOpeningElement (jsxElementBegin <) (jsxOpeningElementName div) >) (jsxChildren (jsxElement (jsxOpeningElement (jsxElementBegin <) (jsxOpeningElementName span) >) (jsxChildren from  (objectExpressionSequence (openBrace {) (expressionSequence (singleExpression (identifier here))) })  to  (objectExpressionSequence (openBrace {) (expressionSequence (singleExpression (identifier there))) })  distance  (objectExpressionSequence (openBrace {) (expressionSequence (singleExpression (singleExpression (identifier here)) - (singleExpression (identifier there)))) })) (jsxClosingElement </ (jsxClosingElementName span) >))) (jsxClosingElement </ (jsxClosingElementName div) >))))) ))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function (identifier TestJsxOpeningElementWithComment) ( (formalParameterList (formalParameterArg (assignable (identifier props)))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression ( (expressionSequence (singleExpression (jsxElements (jsxElement (jsxOpeningElement (jsxElementBegin <) (jsxOpeningElementName Component) (jsxAttributes (jsxAttribute (jsxAttributeName attribute) = (jsxAttributeValue "5"))) >) (jsxChildren  // Should this be 6?\n        ) (jsxClosingElement </ (jsxClosingElementName Component) >))))) ))) (eos ;)))))) })))) <EOF>)