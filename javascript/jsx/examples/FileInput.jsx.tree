(program (sourceElements (sourceElement (statement (importStatement import (importFromBlock (importDefault (aliasName (identifierName (identifier React))) ,) (moduleItems { (aliasName (identifierName (identifier Component))) }) (importFrom from 'react') (eos ;))))) (sourceElement (statement (importStatement import (importFromBlock (importNamespace (identifierName (identifier PropTypes))) (importFrom from 'prop-types') (eos ;))))) (sourceElement (statement (importStatement import (importFromBlock (importNamespace (identifierName (identifier _))) (importFrom from 'lodash') (eos ;))))) (sourceElement (statement (importStatement import (importFromBlock (moduleItems { (aliasName (identifierName (identifier defineMessages))) , (aliasName (identifierName (identifier injectIntl))) , (aliasName (identifierName (identifier FormattedMessage))) }) (importFrom from 'react-intl') (eos ;))))) (sourceElement (statement (importStatement import (importFromBlock (moduleItems { (aliasName (identifierName (identifier jiveCoreJavascriptRequire))) }) (importFrom from 'mitui-base-client') (eos ;))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable (identifier messages)) = (singleExpression (singleExpression (identifier defineMessages)) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName (identifier editText))) : (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName (identifier id))) : (singleExpression (literal 'profile.banner.edit_button.edit_text'))) , (propertyAssignment (propertyName (identifierName (identifier defaultMessage))) : (singleExpression (literal 'Choose image'))) }))) , (propertyAssignment (propertyName (identifierName (identifier fileExceedsSizeLimit))) : (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName (identifier id))) : (singleExpression (literal 'profile.banner.edit_button.file_exceeds_size_limit'))) , (propertyAssignment (propertyName (identifierName (identifier defaultMessage))) : (singleExpression (literal 'The file you have chosen exceeds the size limit of {size}MB.'))) }))) , (propertyAssignment (propertyName (identifierName (identifier filesExceedSizeLimit))) : (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName (identifier id))) : (singleExpression (literal 'profile.banner.edit_button.files_exceed_size_limit'))) , (propertyAssignment (propertyName (identifierName (identifier defaultMessage))) : (singleExpression (literal 'One or more of the files chosen exceed the size limit of {size}MB.'))) }))) }))) ))))) (eos ;)))) (sourceElement (statement (classDeclaration class (identifier FileInput) (classTail extends (singleExpression (identifier Component)) { (classElement (identifier static) (assignable (identifier contextTypes)) = (objectLiteral { (propertyAssignment (propertyName (identifierName (identifier executeAction))) : (singleExpression (singleExpression (singleExpression (identifier PropTypes)) . (identifierName (identifier func))) . (identifierName (identifier isRequired)))) , }) ;) (classElement (identifier static) (assignable (identifier propTypes)) = (objectLiteral { (propertyAssignment (propertyName (identifierName (identifier accept))) : (singleExpression (singleExpression (identifier PropTypes)) . (identifierName (identifier string)))) , (propertyAssignment (propertyName (identifierName (identifier action))) : (singleExpression (singleExpression (singleExpression (identifier PropTypes)) . (identifierName (identifier string))) . (identifierName (identifier isRequired)))) , (propertyAssignment (propertyName (identifierName (identifier className))) : (singleExpression (singleExpression (identifier PropTypes)) . (identifierName (identifier string)))) , (propertyAssignment (propertyName (identifierName (identifier fileName))) : (singleExpression (singleExpression (identifier PropTypes)) . (identifierName (identifier string)))) , (propertyAssignment (propertyName (identifierName (identifier maxFileSize))) : (singleExpression (singleExpression (identifier PropTypes)) . (identifierName (identifier number)))) , (propertyAssignment (propertyName (identifierName (identifier multiple))) : (singleExpression (singleExpression (identifier PropTypes)) . (identifierName (identifier bool)))) , (propertyAssignment (propertyName (identifierName (identifier onBeforeUpload))) : (singleExpression (singleExpression (identifier PropTypes)) . (identifierName (identifier func)))) , (propertyAssignment (propertyName (identifierName (identifier onUploadSuccess))) : (singleExpression (singleExpression (singleExpression (identifier PropTypes)) . (identifierName (identifier func))) . (identifierName (identifier isRequired)))) , (propertyAssignment (propertyName (identifierName (identifier text))) : (singleExpression (singleExpression (identifier PropTypes)) . (identifierName (identifier string)))) , (propertyAssignment (propertyName (identifierName (identifier tokenName))) : (singleExpression (singleExpression (singleExpression (identifier PropTypes)) . (identifierName (identifier string))) . (identifierName (identifier isRequired)))) }) ;) (classElement (identifier static) (assignable (identifier defaultProps)) = (objectLiteral { (propertyAssignment (propertyName (identifierName (identifier className))) : (singleExpression (literal ''))) , (propertyAssignment (propertyName (identifierName (identifier fileName))) : (singleExpression (literal 'file'))) , (propertyAssignment (propertyName (identifierName (identifier maxFileSize))) : (singleExpression (identifier Infinity))) , (propertyAssignment (propertyName (identifierName (identifier multiple))) : (singleExpression (literal false))) , (propertyAssignment (propertyName (identifierName (identifier onBeforeUpload))) : (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (objectLiteral { })))))) , (propertyAssignment (propertyName (identifierName (identifier text))) : (singleExpression (literal ''))) }) ;) (classElement (methodDefinition (propertyName (identifierName (identifier acceptAttribute))) ( ) { (functionBody (sourceElements (sourceElement (statement (switchStatement switch ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName (identifier props))) . (identifierName (identifier accept)))) ) (caseBlock { (caseClauses (caseClause case (expressionSequence (singleExpression (literal 'images'))) : (statementList (statement (returnStatement return (expressionSequence (singleExpression (literal 'image/*'))) (eos ;))))) (caseClause case (expressionSequence (singleExpression (literal 'videos'))) : (statementList (statement (returnStatement return (expressionSequence (singleExpression (literal 'video/*'))) (eos ;))))) (caseClause case (expressionSequence (singleExpression (literal 'audio'))) : (statementList (statement (returnStatement return (expressionSequence (singleExpression (literal 'audio/*'))) (eos ;)))))) (defaultClause default : (statementList (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName (identifier props))) . (identifierName (identifier accept)))) (eos ;))))) })))))) })) (classElement (methodDefinition (propertyName (identifierName (identifier componentDidMount))) ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (identifier jiveCoreJavascriptRequire)) . (identifierName (identifier then))) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable (identifier requirejs)))) )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (identifier requirejs)) (arguments ( (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal 'apps/shared/models/file_uploader')))) ]))) )))) (eos ;)))))) })))) )))) (eos ;)))))) })) (classElement (methodDefinition (propertyName (identifierName (identifier onChange))) ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable (identifier resetForm)) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier (let_ let)) (variableDeclaration (assignable (identifier inputs)) = (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName (identifier refs))) . (identifierName (identifier form))) . (identifierName (identifier querySelectorAll))) (arguments ( (argument (singleExpression (literal 'input[type="hidden"]'))) ))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier (let_ let)) (variableDeclaration (assignable (identifier i)) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression (identifier i)) < (singleExpression (singleExpression (identifier inputs)) . (identifierName (identifier length))))) ; (expressionSequence (singleExpression (singleExpression (identifier i)) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (identifier inputs)) [ (expressionSequence (singleExpression (identifier i))) ]) . (identifierName (identifier parentNode))) . (identifierName (identifier removeChild))) (arguments ( (argument (singleExpression (singleExpression (identifier inputs)) [ (expressionSequence (singleExpression (identifier i))) ])) )))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName (identifier refs))) . (identifierName (identifier form))) . (identifierName (identifier reset))) (arguments ( )))) (eos ;)))))) }))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (identifier jiveCoreJavascriptRequire)) . (identifierName (identifier then))) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable (identifier requirejs)))) )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (identifier requirejs)) (arguments ( (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal 'apps/shared/models/file_uploader')))) ]))) , (argument (singleExpression (anoymousFunction (arrowFunctionParameters (identifier uploader)) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier (let_ let)) (variableDeclaration (assignable (identifier files)) = (singleExpression (singleExpression (singleExpression (identifier _)) . (identifierName (identifier toArray))) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName (identifier refs))) . (identifierName (identifier file))) . (identifierName (identifier files))) || (singleExpression (arrayLiteral [ elementList ])))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (identifier files)) . (identifierName (identifier every))) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters (identifier file)) => (arrowFunctionBody (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression (identifier file)) . (identifierName (identifier size))) <= (singleExpression (singleExpression (singleExpression this) . (identifierName (identifier props))) . (identifierName (identifier maxFileSize))))) )))))) )))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName (identifier props))) . (identifierName (identifier onBeforeUpload))) (arguments ( )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (identifier uploader)) . (identifierName (identifier uploadForm))) (arguments ( (argument (singleExpression (singleExpression (singleExpression this) . (identifierName (identifier refs))) . (identifierName (identifier form)))) , (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName (identifier tokenName))) : (singleExpression (singleExpression (singleExpression this) . (identifierName (identifier props))) . (identifierName (identifier tokenName)))) }))) ))) . (identifierName (identifier then))) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters (identifier result)) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (identifier resetForm)) (arguments ( )))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (identifier result)) . (identifierName (identifier errorType)))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName (identifier notifyOfError))) (arguments ( )))) eos))) })) else (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName (identifier props))) . (identifierName (identifier onUploadSuccess))) (arguments ( (argument (singleExpression (identifier result))) )))) (eos ;)))) }))))))) })))) , (argument (singleExpression (anoymousFunction (arrowFunctionParameters (identifier err)) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (identifier console)) . (identifierName (identifier error))) (arguments ( (argument (singleExpression (identifier err))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (identifier resetForm)) (arguments ( )))) (eos ;)))))) })))) )))) (eos ;)))) })) else (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (identifier resetForm)) (arguments ( )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName (identifier notifyOfError))) (arguments ( )))) (eos ;)))) }))))))) })))) )))) (eos ;)))))) })))) )))) (eos ;)))))) })) (classElement (methodDefinition (propertyName (identifierName (identifier notifyOfError))) ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier (let_ let)) (variableDeclaration (assignable (objectLiteral { (propertyAssignment (singleExpression (identifier formatMessage))) })) = (singleExpression (singleExpression (singleExpression this) . (identifierName (identifier props))) . (identifierName (identifier intl))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier (let_ let)) (variableDeclaration (assignable (identifier size)) = (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName (identifier props))) . (identifierName (identifier maxFileSize))) / (singleExpression (literal (numericLiteral 1024))))) )) / (singleExpression (literal (numericLiteral 1000)))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier (let_ let)) (variableDeclaration (assignable (identifier msg)) = (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName (identifier props))) . (identifierName (identifier multiple))) ? (singleExpression (singleExpression (identifier formatMessage)) (arguments ( (argument (singleExpression (singleExpression (identifier messages)) . (identifierName (identifier filesExceedSizeLimit)))) , (argument (singleExpression (objectLiteral { (propertyAssignment (singleExpression (identifier size))) }))) ))) : (singleExpression (singleExpression (identifier formatMessage)) (arguments ( (argument (singleExpression (singleExpression (identifier messages)) . (identifierName (identifier fileExceedsSizeLimit)))) , (argument (singleExpression (objectLiteral { (propertyAssignment (singleExpression (identifier size))) }))) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName (identifier context))) . (identifierName (identifier executeAction))) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters (identifier actionContext)) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression (identifier actionContext)) . (identifierName (identifier dispatch))) (arguments ( (argument (singleExpression (literal 'DISPLAY_MESSAGE'))) , (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName (identifier level))) : (singleExpression (literal 'warn'))) , (propertyAssignment (propertyName (identifierName (identifier message))) : (singleExpression (identifier msg))) }))) ))))))) )))) (eos ;)))))) })) (classElement (methodDefinition (propertyName (identifierName (identifier render))) ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier (let_ let)) (variableDeclaration (assignable (identifier attributes)) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName (identifier type))) : (singleExpression (literal 'file'))) , (propertyAssignment (propertyName (identifierName (identifier name))) : (singleExpression (singleExpression (singleExpression this) . (identifierName (identifier props))) . (identifierName (identifier fileName)))) , (propertyAssignment (propertyName (identifierName (identifier id))) : (singleExpression (singleExpression (singleExpression this) . (identifierName (identifier props))) . (identifierName (identifier fileName)))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (identifier attributes)) . (identifierName (identifier onChange))) = (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName (identifier onChange))) . (identifierName (identifier bind))) (arguments ( (argument (singleExpression this)) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName (identifier props))) . (identifierName (identifier accept)))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (identifier attributes)) . (identifierName (identifier accept))) = (singleExpression (singleExpression (singleExpression this) . (identifierName (identifier acceptAttribute))) (arguments ( ))))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName (identifier props))) . (identifierName (identifier multiple)))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (identifier attributes)) . (identifierName (identifier multiple))) = (singleExpression (literal true)))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression ( (expressionSequence (singleExpression (jsxElements (jsxElement (jsxOpeningElement (jsxElementBegin <) (jsxOpeningElementName form) (jsxAttributes (jsxAttribute (jsxAttributeName ref) = (jsxAttributeValue "form")) (jsxAttributes (jsxAttribute (jsxAttributeName action) = (jsxAttributeValue (objectExpressionSequence (openBrace {) (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName (identifier props))) . (identifierName (identifier action)))) }))) (jsxAttributes (jsxAttribute (jsxAttributeName method) = (jsxAttributeValue "post")) (jsxAttributes (jsxAttribute (jsxAttributeName encType) = (jsxAttributeValue "multipart/form-data")))))) >) (jsxChildren \n         (jsxElement (jsxOpeningElement (jsxElementBegin <) (jsxOpeningElementName label) (jsxAttributes (jsxAttribute (jsxAttributeName htmlFor) = (jsxAttributeValue (objectExpressionSequence (openBrace {) (expressionSequence (singleExpression (singleExpression (identifier attributes)) . (identifierName (identifier id)))) }))) (jsxAttributes (jsxAttribute (jsxAttributeName className) = (jsxAttributeValue (objectExpressionSequence (openBrace {) (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName (identifier props))) . (identifierName (identifier className)))) }))))) >) (jsxChildren \n           (jsxElement (jsxSelfClosingElement (jsxElementBegin <) (jsxSelfClosingElementName FormattedMessage) (jsxAttributes (jsxSpreadAttribute { ... (singleExpression (singleExpression (identifier messages)) . (identifierName (identifier editText))) })) />)) \n        ) (jsxClosingElement </ (jsxClosingElementName label) >)) \n         (jsxElement (jsxSelfClosingElement (jsxElementBegin <) (jsxSelfClosingElementName input) (jsxAttributes (jsxAttribute (jsxAttributeName ref) = (jsxAttributeValue "file")) (jsxAttributes (jsxSpreadAttribute { ... (singleExpression (identifier attributes)) }))) />)) \n      ) (jsxClosingElement </ (jsxClosingElementName form) >))))) ))) (eos ;)))))) })) })))) (sourceElement (statement (exportStatement export (exportFromBlock (moduleItems { (aliasName (identifierName (identifier FileInput)) as (identifierName (identifier _FileInput))) }) (eos ;)) eos))) (sourceElement (statement (exportStatement export default (singleExpression (singleExpression (identifier injectIntl)) (arguments ( (argument (singleExpression (identifier FileInput))) ))) (eos ;))))) <EOF>)