program
 sourceElements
  sourceElement
   statement
    functionDeclaration
     async
     function
     identifier
      f
     (
     )
     functionBody
      {
      }
  sourceElement
   statement
    classDeclaration
     class
     identifier
      C
     classTail
      {
      classElement
       methodDefinition
        async
        classElementName
         propertyName
          identifierName
           identifier
            method
        (
        )
        functionBody
         {
         }
      classElement
       identifier
        static
       methodDefinition
        async
        classElementName
         propertyName
          identifierName
           identifier
            method1
        (
        )
        functionBody
         {
         }
      classElement
       identifier
        static
       methodDefinition
        async
        classElementName
         privateIdentifier
          #
          identifierName
           identifier
            method2
        (
        )
        functionBody
         {
         }
      classElement
       methodDefinition
        async
        *
        classElementName
         propertyName
          identifierName
           identifier
            gen
        (
        )
        functionBody
         {
         }
      }
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       anonymousFunction
        async
        arrowFunctionParameters
         (
         )
        =>
        arrowFunctionBody
         singleExpression
          objectLiteral
           {
           }
     eos
      ;
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       anonymousFunction
        async
        arrowFunctionParameters
         (
         )
        =>
        arrowFunctionBody
         functionBody
          {
          sourceElements
           sourceElement
            statement
             expressionStatement
              expressionSequence
               singleExpression
                await
                singleExpression
                 singleExpression
                  identifier
                   f
                 arguments
                  (
                  )
              eos
               ;
          }
     eos
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       anonymousFunction
        async
        arrowFunctionParameters
         (
         )
        =>
        arrowFunctionBody
         functionBody
          {
          sourceElements
           sourceElement
            statement
             expressionStatement
              expressionSequence
               singleExpression
                await
                singleExpression
                 identifier
                  promise
              eos
               ;
          }
     eos
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       anonymousFunction
        async
        arrowFunctionParameters
         (
         )
        =>
        arrowFunctionBody
         functionBody
          {
          sourceElements
           sourceElement
            statement
             expressionStatement
              expressionSequence
               singleExpression
                await
                singleExpression
                 literal
                  numericLiteral
                   1
              eos
               ;
          }
     eos
  sourceElement
   statement
    functionDeclaration
     async
     function
     *
     identifier
      gen
     (
     )
     functionBody
      {
      }
 <EOF>
