program
 sourceElements
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       literal
        "use strict"
     eos
      ;
  sourceElement
   statement
    variableStatement
     variableDeclarationList
      varModifier
       let_
        let
      variableDeclaration
       assignable
        identifier
         target
       =
       singleExpression
        objectLiteral
         {
         propertyAssignment
          propertyName
           identifierName
            identifier
             foo
          :
          singleExpression
           literal
            "Welcome, foo"
         }
     eos
  sourceElement
   statement
    variableStatement
     variableDeclarationList
      varModifier
       let_
        let
      variableDeclaration
       assignable
        identifier
         proxy
       =
       singleExpression
        new
        identifier
         Proxy
        arguments
         (
         argument
          singleExpression
           identifier
            target
         ,
         argument
          singleExpression
           objectLiteral
            {
            propertyAssignment
             propertyName
              identifierName
               identifier
                get
             (
             formalParameterList
              formalParameterArg
               assignable
                identifier
                 receiver
              ,
              formalParameterArg
               assignable
                identifier
                 name
             )
             functionBody
              {
              sourceElements
               sourceElement
                statement
                 returnStatement
                  return
                  expressionSequence
                   singleExpression
                    singleExpression
                     singleExpression
                      identifier
                       name
                     in
                     singleExpression
                      identifier
                       receiver
                    ?
                    singleExpression
                     singleExpression
                      identifier
                       receiver
                     [
                     expressionSequence
                      singleExpression
                       identifier
                        name
                     ]
                    :
                    singleExpression
                     literal
                      templateStringLiteral
                       `
                       templateStringAtom
                        H
                       templateStringAtom
                        e
                       templateStringAtom
                        l
                       templateStringAtom
                        l
                       templateStringAtom
                        o
                       templateStringAtom
                        ,
                       templateStringAtom
                         
                       templateStringAtom
                        ${
                        singleExpression
                         identifier
                          name
                        }
                       `
                  eos
              }
            }
         )
     eos
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         identifier
          proxy
        .
        identifierName
         identifier
          foo
       ===
       singleExpression
        literal
         "Welcome, foo"
     eos
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         identifier
          proxy
        .
        identifierName
         identifier
          world
       ===
       singleExpression
        literal
         "Hello, world"
     eos
  sourceElement
   statement
    variableStatement
     variableDeclarationList
      varModifier
       let_
        let
      variableDeclaration
       assignable
        identifier
         obj
       =
       singleExpression
        objectLiteral
         {
         propertyAssignment
          propertyName
           identifierName
            identifier
             a
          :
          singleExpression
           literal
            numericLiteral
             1
         }
     eos
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         identifier
          Object
        .
        identifierName
         identifier
          defineProperty
       arguments
        (
        argument
         singleExpression
          identifier
           obj
        ,
        argument
         singleExpression
          literal
           "b"
        ,
        argument
         singleExpression
          objectLiteral
           {
           propertyAssignment
            propertyName
             identifierName
              identifier
               value
            :
            singleExpression
             literal
              numericLiteral
               2
           }
        )
     eos
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         identifier
          obj
        [
        expressionSequence
         singleExpression
          singleExpression
           identifier
            Symbol
          arguments
           (
           argument
            singleExpression
             literal
              "c"
           )
        ]
       =
       singleExpression
        literal
         numericLiteral
          3
     eos
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         identifier
          Reflect
        .
        identifierName
         identifier
          ownKeys
       arguments
        (
        argument
         singleExpression
          identifier
           obj
        )
     eos
      <EOF>
 <EOF>
