program
 sourceElements
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       literal
        "use strict"
     eos
      ;
  sourceElement
   statement
    variableStatement
     variableDeclarationList
      varModifier
       let_
        let
      variableDeclaration
       assignable
        identifier
         fibonacci
       =
       singleExpression
        objectLiteral
         {
         propertyAssignment
          *
          propertyName
           [
           singleExpression
            singleExpression
             identifier
              Symbol
            .
            identifierName
             identifier
              iterator
           ]
          (
          )
          functionBody
           {
           sourceElements
            sourceElement
             statement
              variableStatement
               variableDeclarationList
                varModifier
                 let_
                  let
                variableDeclaration
                 assignable
                  identifier
                   pre
                 =
                 singleExpression
                  literal
                   numericLiteral
                    0
                ,
                variableDeclaration
                 assignable
                  identifier
                   cur
                 =
                 singleExpression
                  literal
                   numericLiteral
                    1
               eos
            sourceElement
             statement
              iterationStatement
               for
               (
               ;
               ;
               )
               statement
                block
                 {
                 statementList
                  statement
                   expressionStatement
                    expressionSequence
                     singleExpression
                      singleExpression
                       arrayLiteral
                        [
                        elementList
                         arrayElement
                          singleExpression
                           identifier
                            pre
                         ,
                         arrayElement
                          singleExpression
                           identifier
                            cur
                        ]
                      =
                      singleExpression
                       arrayLiteral
                        [
                        elementList
                         arrayElement
                          singleExpression
                           identifier
                            cur
                         ,
                         arrayElement
                          singleExpression
                           singleExpression
                            identifier
                             pre
                           +
                           singleExpression
                            identifier
                             cur
                        ]
                    eos
                  statement
                   expressionStatement
                    expressionSequence
                     singleExpression
                      yieldStatement
                       yield
                       expressionSequence
                        singleExpression
                         identifier
                          cur
                       eos
                    eos
                 }
           }
         }
     eos
  sourceElement
   statement
    iterationStatement
     for
     (
     variableDeclarationList
      varModifier
       let_
        let
      variableDeclaration
       assignable
        identifier
         n
     of
     expressionSequence
      singleExpression
       identifier
        fibonacci
     )
     statement
      block
       {
       statementList
        statement
         ifStatement
          if
          (
          expressionSequence
           singleExpression
            singleExpression
             identifier
              n
            >
            singleExpression
             literal
              numericLiteral
               1000
          )
          statement
           breakStatement
            break
            eos
        statement
         expressionStatement
          expressionSequence
           singleExpression
            singleExpression
             singleExpression
              identifier
               console
             .
             identifierName
              identifier
               log
            arguments
             (
             argument
              singleExpression
               identifier
                n
             )
          eos
       }
  sourceElement
   statement
    functionDeclaration
     function
     *
     identifier
      range
     (
     formalParameterList
      formalParameterArg
       assignable
        identifier
         start
      ,
      formalParameterArg
       assignable
        identifier
         end
      ,
      formalParameterArg
       assignable
        identifier
         step
     )
     functionBody
      {
      sourceElements
       sourceElement
        statement
         iterationStatement
          while
          (
          expressionSequence
           singleExpression
            singleExpression
             identifier
              start
            <
            singleExpression
             identifier
              end
          )
          statement
           block
            {
            statementList
             statement
              expressionStatement
               expressionSequence
                singleExpression
                 yieldStatement
                  yield
                  expressionSequence
                   singleExpression
                    identifier
                     start
                  eos
               eos
             statement
              expressionStatement
               expressionSequence
                singleExpression
                 singleExpression
                  identifier
                   start
                 assignmentOperator
                  +=
                 singleExpression
                  identifier
                   step
               eos
            }
      }
  sourceElement
   statement
    iterationStatement
     for
     (
     variableDeclarationList
      varModifier
       let_
        let
      variableDeclaration
       assignable
        identifier
         i
     of
     expressionSequence
      singleExpression
       singleExpression
        identifier
         range
       arguments
        (
        argument
         singleExpression
          literal
           numericLiteral
            0
        ,
        argument
         singleExpression
          literal
           numericLiteral
            10
        ,
        argument
         singleExpression
          literal
           numericLiteral
            2
        )
     )
     statement
      block
       {
       statementList
        statement
         expressionStatement
          expressionSequence
           singleExpression
            singleExpression
             singleExpression
              identifier
               console
             .
             identifierName
              identifier
               log
            arguments
             (
             argument
              singleExpression
               identifier
                i
             )
          eos
       }
  sourceElement
   statement
    variableStatement
     variableDeclarationList
      varModifier
       let_
        let
      variableDeclaration
       assignable
        identifier
         fibonacci
       =
       singleExpression
        anonymousFunction
         function
         *
         (
         formalParameterList
          formalParameterArg
           assignable
            identifier
             numbers
         )
         functionBody
          {
          sourceElements
           sourceElement
            statement
             variableStatement
              variableDeclarationList
               varModifier
                let_
                 let
               variableDeclaration
                assignable
                 identifier
                  pre
                =
                singleExpression
                 literal
                  numericLiteral
                   0
               ,
               variableDeclaration
                assignable
                 identifier
                  cur
                =
                singleExpression
                 literal
                  numericLiteral
                   1
              eos
           sourceElement
            statement
             iterationStatement
              while
              (
              expressionSequence
               singleExpression
                singleExpression
                 singleExpression
                  identifier
                   numbers
                 --
                >
                singleExpression
                 literal
                  numericLiteral
                   0
              )
              statement
               block
                {
                statementList
                 statement
                  expressionStatement
                   expressionSequence
                    singleExpression
                     singleExpression
                      arrayLiteral
                       [
                       elementList
                        arrayElement
                         singleExpression
                          identifier
                           pre
                        ,
                        arrayElement
                         singleExpression
                          identifier
                           cur
                       ]
                     =
                     singleExpression
                      arrayLiteral
                       [
                       elementList
                        arrayElement
                         singleExpression
                          identifier
                           cur
                        ,
                        arrayElement
                         singleExpression
                          singleExpression
                           identifier
                            pre
                          +
                          singleExpression
                           identifier
                            cur
                       ]
                   eos
                 statement
                  expressionStatement
                   expressionSequence
                    singleExpression
                     yieldStatement
                      yield
                      expressionSequence
                       singleExpression
                        identifier
                         cur
                      eos
                   eos
                }
          }
     eos
  sourceElement
   statement
    iterationStatement
     for
     (
     variableDeclarationList
      varModifier
       let_
        let
      variableDeclaration
       assignable
        identifier
         n
     of
     expressionSequence
      singleExpression
       singleExpression
        identifier
         fibonacci
       arguments
        (
        argument
         singleExpression
          literal
           numericLiteral
            1000
        )
     )
     statement
      expressionStatement
       expressionSequence
        singleExpression
         singleExpression
          singleExpression
           identifier
            console
          .
          identifierName
           identifier
            log
         arguments
          (
          argument
           singleExpression
            identifier
             n
          )
       eos
  sourceElement
   statement
    variableStatement
     variableDeclarationList
      varModifier
       let_
        let
      variableDeclaration
       assignable
        identifier
         numbers
       =
       singleExpression
        arrayLiteral
         [
         elementList
          arrayElement
           ...
           singleExpression
            singleExpression
             identifier
              fibonacci
            arguments
             (
             argument
              singleExpression
               literal
                numericLiteral
                 1000
             )
         ]
     eos
  sourceElement
   statement
    variableStatement
     variableDeclarationList
      varModifier
       let_
        let
      variableDeclaration
       assignable
        arrayLiteral
         [
         elementList
          arrayElement
           singleExpression
            identifier
             n1
          ,
          arrayElement
           singleExpression
            identifier
             n2
          ,
          arrayElement
           singleExpression
            identifier
             n3
          ,
          arrayElement
           ...
           singleExpression
            identifier
             others
         ]
       =
       singleExpression
        singleExpression
         identifier
          fibonacci
        arguments
         (
         argument
          singleExpression
           literal
            numericLiteral
             1000
         )
     eos
  sourceElement
   statement
    functionDeclaration
     function
     identifier
      fasync
     (
     formalParameterList
      formalParameterArg
       assignable
        identifier
         proc
      ,
      lastFormalParameterArg
       ...
       singleExpression
        identifier
         params
     )
     functionBody
      {
      sourceElements
       sourceElement
        statement
         variableStatement
          variableDeclarationList
           varModifier
            var
           variableDeclaration
            assignable
             identifier
              iterator
            =
            singleExpression
             singleExpression
              identifier
               proc
             arguments
              (
              argument
               ...
               singleExpression
                identifier
                 params
              )
          eos
       sourceElement
        statement
         returnStatement
          return
          expressionSequence
           singleExpression
            new
            identifier
             Promise
            arguments
             (
             argument
              singleExpression
               anonymousFunction
                arrowFunctionParameters
                 (
                 formalParameterList
                  formalParameterArg
                   assignable
                    identifier
                     resolve
                  ,
                  formalParameterArg
                   assignable
                    identifier
                     reject
                 )
                =>
                arrowFunctionBody
                 functionBody
                  {
                  sourceElements
                   sourceElement
                    statement
                     variableStatement
                      variableDeclarationList
                       varModifier
                        let_
                         let
                       variableDeclaration
                        assignable
                         identifier
                          loop
                        =
                        singleExpression
                         anonymousFunction
                          arrowFunctionParameters
                           (
                           formalParameterList
                            formalParameterArg
                             assignable
                              identifier
                               value
                           )
                          =>
                          arrowFunctionBody
                           functionBody
                            {
                            sourceElements
                             sourceElement
                              statement
                               variableStatement
                                variableDeclarationList
                                 varModifier
                                  let_
                                   let
                                 variableDeclaration
                                  assignable
                                   identifier
                                    result
                                eos
                             sourceElement
                              statement
                               tryStatement
                                try
                                block
                                 {
                                 statementList
                                  statement
                                   expressionStatement
                                    expressionSequence
                                     singleExpression
                                      singleExpression
                                       identifier
                                        result
                                      =
                                      singleExpression
                                       singleExpression
                                        singleExpression
                                         identifier
                                          iterator
                                        .
                                        identifierName
                                         identifier
                                          next
                                       arguments
                                        (
                                        argument
                                         singleExpression
                                          identifier
                                           value
                                        )
                                    eos
                                 }
                                catchProduction
                                 catch
                                 (
                                 assignable
                                  identifier
                                   err
                                 )
                                 block
                                  {
                                  statementList
                                   statement
                                    expressionStatement
                                     expressionSequence
                                      singleExpression
                                       singleExpression
                                        identifier
                                         reject
                                       arguments
                                        (
                                        argument
                                         singleExpression
                                          identifier
                                           err
                                        )
                                     eos
                                  }
                             sourceElement
                              statement
                               ifStatement
                                if
                                (
                                expressionSequence
                                 singleExpression
                                  singleExpression
                                   identifier
                                    result
                                  .
                                  identifierName
                                   identifier
                                    done
                                )
                                statement
                                 expressionStatement
                                  expressionSequence
                                   singleExpression
                                    singleExpression
                                     identifier
                                      resolve
                                    arguments
                                     (
                                     argument
                                      singleExpression
                                       singleExpression
                                        identifier
                                         result
                                       .
                                       identifierName
                                        identifier
                                         value
                                     )
                                  eos
                                else
                                statement
                                 ifStatement
                                  if
                                  (
                                  expressionSequence
                                   singleExpression
                                    singleExpression
                                     singleExpression
                                      typeof
                                      singleExpression
                                       singleExpression
                                        identifier
                                         result
                                       .
                                       identifierName
                                        identifier
                                         value
                                     ===
                                     singleExpression
                                      literal
                                       "object"
                                    &&
                                    singleExpression
                                     singleExpression
                                      typeof
                                      singleExpression
                                       singleExpression
                                        singleExpression
                                         identifier
                                          result
                                        .
                                        identifierName
                                         identifier
                                          value
                                       .
                                       identifierName
                                        identifier
                                         then
                                     ===
                                     singleExpression
                                      literal
                                       "function"
                                  )
                                  statement
                                   expressionStatement
                                    expressionSequence
                                     singleExpression
                                      singleExpression
                                       singleExpression
                                        singleExpression
                                         identifier
                                          result
                                        .
                                        identifierName
                                         identifier
                                          value
                                       .
                                       identifierName
                                        identifier
                                         then
                                      arguments
                                       (
                                       argument
                                        singleExpression
                                         anonymousFunction
                                          arrowFunctionParameters
                                           (
                                           formalParameterList
                                            formalParameterArg
                                             assignable
                                              identifier
                                               value
                                           )
                                          =>
                                          arrowFunctionBody
                                           singleExpression
                                            objectLiteral
                                             {
                                             propertyAssignment
                                              singleExpression
                                               singleExpression
                                                identifier
                                                 loop
                                               arguments
                                                (
                                                argument
                                                 singleExpression
                                                  identifier
                                                   value
                                                )
                                             }
                                       ,
                                       argument
                                        singleExpression
                                         anonymousFunction
                                          arrowFunctionParameters
                                           (
                                           formalParameterList
                                            formalParameterArg
                                             assignable
                                              identifier
                                               err
                                           )
                                          =>
                                          arrowFunctionBody
                                           singleExpression
                                            objectLiteral
                                             {
                                             propertyAssignment
                                              singleExpression
                                               singleExpression
                                                identifier
                                                 reject
                                               arguments
                                                (
                                                argument
                                                 singleExpression
                                                  identifier
                                                   err
                                                )
                                             }
                                       )
                                    eos
                                  else
                                  statement
                                   expressionStatement
                                    expressionSequence
                                     singleExpression
                                      singleExpression
                                       identifier
                                        loop
                                      arguments
                                       (
                                       argument
                                        singleExpression
                                         singleExpression
                                          identifier
                                           result
                                         .
                                         identifierName
                                          identifier
                                           value
                                       )
                                    eos
                            }
                      eos
                   sourceElement
                    statement
                     expressionStatement
                      expressionSequence
                       singleExpression
                        singleExpression
                         identifier
                          loop
                        arguments
                         (
                         )
                      eos
                  }
             )
          eos
      }
  sourceElement
   statement
    functionDeclaration
     function
     identifier
      makeAsync
     (
     formalParameterList
      formalParameterArg
       assignable
        identifier
         text
      ,
      formalParameterArg
       assignable
        identifier
         after
     )
     functionBody
      {
      sourceElements
       sourceElement
        statement
         returnStatement
          return
          expressionSequence
           singleExpression
            new
            identifier
             Promise
            arguments
             (
             argument
              singleExpression
               anonymousFunction
                arrowFunctionParameters
                 (
                 formalParameterList
                  formalParameterArg
                   assignable
                    identifier
                     resolve
                  ,
                  formalParameterArg
                   assignable
                    identifier
                     reject
                 )
                =>
                arrowFunctionBody
                 singleExpression
                  objectLiteral
                   {
                   propertyAssignment
                    singleExpression
                     singleExpression
                      identifier
                       setTimeout
                     arguments
                      (
                      argument
                       singleExpression
                        anonymousFunction
                         arrowFunctionParameters
                          (
                          )
                         =>
                         arrowFunctionBody
                          singleExpression
                           singleExpression
                            identifier
                             resolve
                           arguments
                            (
                            argument
                             singleExpression
                              identifier
                               text
                            )
                      ,
                      argument
                       singleExpression
                        identifier
                         after
                      )
                   }
             )
          eos
      }
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         singleExpression
          identifier
           fasync
         arguments
          (
          argument
           singleExpression
            anonymousFunction
             function
             *
             (
             formalParameterList
              formalParameterArg
               assignable
                identifier
                 greeting
             )
             functionBody
              {
              sourceElements
               sourceElement
                statement
                 variableStatement
                  variableDeclarationList
                   varModifier
                    let_
                     let
                   variableDeclaration
                    assignable
                     identifier
                      foo
                    =
                    singleExpression
                     yieldStatement
                      yield
                      expressionSequence
                       singleExpression
                        singleExpression
                         identifier
                          makeAsync
                        arguments
                         (
                         argument
                          singleExpression
                           literal
                            "foo"
                         ,
                         argument
                          singleExpression
                           literal
                            numericLiteral
                             300
                         )
                      eos
                  eos
               sourceElement
                statement
                 variableStatement
                  variableDeclarationList
                   varModifier
                    let_
                     let
                   variableDeclaration
                    assignable
                     identifier
                      bar
                    =
                    singleExpression
                     yieldStatement
                      yield
                      expressionSequence
                       singleExpression
                        singleExpression
                         identifier
                          makeAsync
                        arguments
                         (
                         argument
                          singleExpression
                           literal
                            "bar"
                         ,
                         argument
                          singleExpression
                           literal
                            numericLiteral
                             200
                         )
                      eos
                  eos
               sourceElement
                statement
                 variableStatement
                  variableDeclarationList
                   varModifier
                    let_
                     let
                   variableDeclaration
                    assignable
                     identifier
                      baz
                    =
                    singleExpression
                     yieldStatement
                      yield
                      expressionSequence
                       singleExpression
                        singleExpression
                         identifier
                          makeAsync
                        arguments
                         (
                         argument
                          singleExpression
                           literal
                            "baz"
                         ,
                         argument
                          singleExpression
                           literal
                            numericLiteral
                             100
                         )
                      eos
                  eos
               sourceElement
                statement
                 returnStatement
                  return
                  expressionSequence
                   singleExpression
                    literal
                     templateStringLiteral
                      `
                      templateStringAtom
                       ${
                       singleExpression
                        identifier
                         greeting
                       }
                      templateStringAtom
                        
                      templateStringAtom
                       ${
                       singleExpression
                        identifier
                         foo
                       }
                      templateStringAtom
                        
                      templateStringAtom
                       ${
                       singleExpression
                        identifier
                         bar
                       }
                      templateStringAtom
                        
                      templateStringAtom
                       ${
                       singleExpression
                        identifier
                         baz
                       }
                      `
                  eos
              }
          ,
          argument
           singleExpression
            literal
             "Hello"
          )
        .
        identifierName
         identifier
          then
       arguments
        (
        argument
         singleExpression
          anonymousFunction
           arrowFunctionParameters
            (
            formalParameterList
             formalParameterArg
              assignable
               identifier
                msg
            )
           =>
           arrowFunctionBody
            singleExpression
             objectLiteral
              {
              propertyAssignment
               singleExpression
                singleExpression
                 singleExpression
                  identifier
                   console
                 .
                 identifierName
                  identifier
                   log
                arguments
                 (
                 argument
                  singleExpression
                   literal
                    "RESULT:"
                 ,
                 argument
                  singleExpression
                   identifier
                    msg
                 )
              }
        )
     eos
  sourceElement
   statement
    classDeclaration
     class
     identifier
      Clz
     classTail
      {
      classElement
       methodDefinition
        *
        classElementName
         propertyName
          identifierName
           identifier
            bar
        (
        )
        functionBody
         {
         }
      }
  sourceElement
   statement
    variableStatement
     variableDeclarationList
      varModifier
       let_
        let
      variableDeclaration
       assignable
        identifier
         Obj
       =
       singleExpression
        objectLiteral
         {
         propertyAssignment
          *
          propertyName
           identifierName
            identifier
             foo
          (
          )
          functionBody
           {
           }
         }
     eos
      <EOF>
 <EOF>
