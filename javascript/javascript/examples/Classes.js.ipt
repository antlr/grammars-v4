program
 sourceElements
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       literal
        "use strict"
     eos
      ;
  sourceElement
   statement
    classDeclaration
     class
     identifier
      Shape
     classTail
      {
      classElement
       methodDefinition
        classElementName
         propertyName
          identifierName
           identifier
            constructor
        (
        formalParameterList
         formalParameterArg
          assignable
           identifier
            id
         ,
         formalParameterArg
          assignable
           identifier
            x
         ,
         formalParameterArg
          assignable
           identifier
            y
        )
        functionBody
         {
         sourceElements
          sourceElement
           statement
            expressionStatement
             expressionSequence
              singleExpression
               singleExpression
                singleExpression
                 this
                .
                identifierName
                 identifier
                  id
               =
               singleExpression
                identifier
                 id
             eos
          sourceElement
           statement
            expressionStatement
             expressionSequence
              singleExpression
               singleExpression
                singleExpression
                 this
                .
                identifierName
                 identifier
                  move
               arguments
                (
                argument
                 singleExpression
                  identifier
                   x
                ,
                argument
                 singleExpression
                  identifier
                   y
                )
             eos
         }
      classElement
       methodDefinition
        classElementName
         propertyName
          identifierName
           identifier
            move
        (
        formalParameterList
         formalParameterArg
          assignable
           identifier
            x
         ,
         formalParameterArg
          assignable
           identifier
            y
        )
        functionBody
         {
         sourceElements
          sourceElement
           statement
            expressionStatement
             expressionSequence
              singleExpression
               singleExpression
                singleExpression
                 this
                .
                identifierName
                 identifier
                  x
               =
               singleExpression
                identifier
                 x
             eos
          sourceElement
           statement
            expressionStatement
             expressionSequence
              singleExpression
               singleExpression
                singleExpression
                 this
                .
                identifierName
                 identifier
                  y
               =
               singleExpression
                identifier
                 y
             eos
         }
      }
  sourceElement
   statement
    classDeclaration
     class
     identifier
      Rectangle
     classTail
      extends
      singleExpression
       identifier
        Shape
      {
      classElement
       methodDefinition
        classElementName
         propertyName
          identifierName
           identifier
            constructor
        (
        formalParameterList
         formalParameterArg
          assignable
           identifier
            id
         ,
         formalParameterArg
          assignable
           identifier
            x
         ,
         formalParameterArg
          assignable
           identifier
            y
         ,
         formalParameterArg
          assignable
           identifier
            width
         ,
         formalParameterArg
          assignable
           identifier
            height
        )
        functionBody
         {
         sourceElements
          sourceElement
           statement
            expressionStatement
             expressionSequence
              singleExpression
               singleExpression
                super
               arguments
                (
                argument
                 singleExpression
                  identifier
                   id
                ,
                argument
                 singleExpression
                  identifier
                   x
                ,
                argument
                 singleExpression
                  identifier
                   y
                )
             eos
          sourceElement
           statement
            expressionStatement
             expressionSequence
              singleExpression
               singleExpression
                singleExpression
                 this
                .
                identifierName
                 identifier
                  width
               =
               singleExpression
                identifier
                 width
             eos
          sourceElement
           statement
            expressionStatement
             expressionSequence
              singleExpression
               singleExpression
                singleExpression
                 this
                .
                identifierName
                 identifier
                  height
               =
               singleExpression
                identifier
                 height
             eos
         }
      }
  sourceElement
   statement
    classDeclaration
     class
     identifier
      Circle
     classTail
      extends
      singleExpression
       identifier
        Shape
      {
      classElement
       methodDefinition
        classElementName
         propertyName
          identifierName
           identifier
            constructor
        (
        formalParameterList
         formalParameterArg
          assignable
           identifier
            id
         ,
         formalParameterArg
          assignable
           identifier
            x
         ,
         formalParameterArg
          assignable
           identifier
            y
         ,
         formalParameterArg
          assignable
           identifier
            radius
        )
        functionBody
         {
         sourceElements
          sourceElement
           statement
            expressionStatement
             expressionSequence
              singleExpression
               singleExpression
                super
               arguments
                (
                argument
                 singleExpression
                  identifier
                   id
                ,
                argument
                 singleExpression
                  identifier
                   x
                ,
                argument
                 singleExpression
                  identifier
                   y
                )
             eos
          sourceElement
           statement
            expressionStatement
             expressionSequence
              singleExpression
               singleExpression
                singleExpression
                 this
                .
                identifierName
                 identifier
                  radius
               =
               singleExpression
                identifier
                 radius
             eos
         }
      }
  sourceElement
   statement
    variableStatement
     variableDeclarationList
      varModifier
       var
      variableDeclaration
       assignable
        identifier
         aggregation
       =
       singleExpression
        anonymousFunction
         arrowFunctionParameters
          (
          formalParameterList
           formalParameterArg
            assignable
             identifier
              baseClass
           ,
           lastFormalParameterArg
            ...
            singleExpression
             identifier
              mixins
          )
         =>
         arrowFunctionBody
          functionBody
           {
           sourceElements
            sourceElement
             statement
              variableStatement
               variableDeclarationList
                varModifier
                 let_
                  let
                variableDeclaration
                 assignable
                  identifier
                   base
                 =
                 singleExpression
                  class
                  identifier
                   _Combined
                  classTail
                   extends
                   singleExpression
                    identifier
                     baseClass
                   {
                   classElement
                    methodDefinition
                     classElementName
                      propertyName
                       identifierName
                        identifier
                         constructor
                     (
                     formalParameterList
                      lastFormalParameterArg
                       ...
                       singleExpression
                        identifier
                         args
                     )
                     functionBody
                      {
                      sourceElements
                       sourceElement
                        statement
                         expressionStatement
                          expressionSequence
                           singleExpression
                            singleExpression
                             super
                            arguments
                             (
                             argument
                              ...
                              singleExpression
                               identifier
                                args
                             )
                          eos
                       sourceElement
                        statement
                         expressionStatement
                          expressionSequence
                           singleExpression
                            singleExpression
                             singleExpression
                              identifier
                               mixins
                             .
                             identifierName
                              identifier
                               forEach
                            arguments
                             (
                             argument
                              singleExpression
                               anonymousFunction
                                arrowFunctionParameters
                                 (
                                 formalParameterList
                                  formalParameterArg
                                   assignable
                                    identifier
                                     mixin
                                 )
                                =>
                                arrowFunctionBody
                                 singleExpression
                                  objectLiteral
                                   {
                                   propertyAssignment
                                    singleExpression
                                     singleExpression
                                      singleExpression
                                       singleExpression
                                        singleExpression
                                         identifier
                                          mixin
                                        .
                                        identifierName
                                         identifier
                                          prototype
                                       .
                                       identifierName
                                        identifier
                                         initializer
                                      .
                                      identifierName
                                       identifier
                                        call
                                     arguments
                                      (
                                      argument
                                       singleExpression
                                        this
                                      )
                                   }
                             )
                          eos
                      }
                   }
               eos
            sourceElement
             statement
              variableStatement
               variableDeclarationList
                varModifier
                 let_
                  let
                variableDeclaration
                 assignable
                  identifier
                   copyProps
                 =
                 singleExpression
                  anonymousFunction
                   arrowFunctionParameters
                    (
                    formalParameterList
                     formalParameterArg
                      assignable
                       identifier
                        target
                     ,
                     formalParameterArg
                      assignable
                       identifier
                        source
                    )
                   =>
                   arrowFunctionBody
                    singleExpression
                     objectLiteral
                      {
                      propertyAssignment
                       singleExpression
                        singleExpression
                         singleExpression
                          singleExpression
                           singleExpression
                            singleExpression
                             singleExpression
                              identifier
                               Object
                             .
                             identifierName
                              identifier
                               getOwnPropertyNames
                            arguments
                             (
                             argument
                              singleExpression
                               identifier
                                source
                             )
                           .
                           identifierName
                            identifier
                             concat
                          arguments
                           (
                           argument
                            singleExpression
                             singleExpression
                              singleExpression
                               identifier
                                Object
                              .
                              identifierName
                               identifier
                                getOwnPropertySymbols
                             arguments
                              (
                              argument
                               singleExpression
                                identifier
                                 source
                              )
                           )
                         .
                         identifierName
                          identifier
                           forEach
                        arguments
                         (
                         argument
                          singleExpression
                           anonymousFunction
                            arrowFunctionParameters
                             (
                             formalParameterList
                              formalParameterArg
                               assignable
                                identifier
                                 prop
                             )
                            =>
                            arrowFunctionBody
                             functionBody
                              {
                              sourceElements
                               sourceElement
                                statement
                                 ifStatement
                                  if
                                  (
                                  expressionSequence
                                   singleExpression
                                    singleExpression
                                     singleExpression
                                      identifier
                                       prop
                                     .
                                     identifierName
                                      identifier
                                       match
                                    arguments
                                     (
                                     argument
                                      singleExpression
                                       literal
                                        /^(?:constructor|prototype|arguments|caller|name|bind|call|apply|toString|length)$/
                                     )
                                  )
                                  statement
                                   returnStatement
                                    return
                                    eos
                               sourceElement
                                statement
                                 expressionStatement
                                  expressionSequence
                                   singleExpression
                                    singleExpression
                                     singleExpression
                                      identifier
                                       Object
                                     .
                                     identifierName
                                      identifier
                                       defineProperty
                                    arguments
                                     (
                                     argument
                                      singleExpression
                                       identifier
                                        target
                                     ,
                                     argument
                                      singleExpression
                                       identifier
                                        prop
                                     ,
                                     argument
                                      singleExpression
                                       singleExpression
                                        singleExpression
                                         identifier
                                          Object
                                        .
                                        identifierName
                                         identifier
                                          getOwnPropertyDescriptor
                                       arguments
                                        (
                                        argument
                                         singleExpression
                                          identifier
                                           source
                                        ,
                                        argument
                                         singleExpression
                                          identifier
                                           prop
                                        )
                                     )
                                  eos
                              }
                         )
                      }
               eos
            sourceElement
             statement
              expressionStatement
               expressionSequence
                singleExpression
                 singleExpression
                  singleExpression
                   identifier
                    mixins
                  .
                  identifierName
                   identifier
                    forEach
                 arguments
                  (
                  argument
                   singleExpression
                    anonymousFunction
                     arrowFunctionParameters
                      (
                      formalParameterList
                       formalParameterArg
                        assignable
                         identifier
                          mixin
                      )
                     =>
                     arrowFunctionBody
                      functionBody
                       {
                       sourceElements
                        sourceElement
                         statement
                          expressionStatement
                           expressionSequence
                            singleExpression
                             singleExpression
                              identifier
                               copyProps
                             arguments
                              (
                              argument
                               singleExpression
                                singleExpression
                                 identifier
                                  base
                                .
                                identifierName
                                 identifier
                                  prototype
                              ,
                              argument
                               singleExpression
                                singleExpression
                                 identifier
                                  mixin
                                .
                                identifierName
                                 identifier
                                  prototype
                              )
                           eos
                        sourceElement
                         statement
                          expressionStatement
                           expressionSequence
                            singleExpression
                             singleExpression
                              identifier
                               copyProps
                             arguments
                              (
                              argument
                               singleExpression
                                identifier
                                 base
                              ,
                              argument
                               singleExpression
                                identifier
                                 mixin
                              )
                           eos
                       }
                  )
               eos
            sourceElement
             statement
              returnStatement
               return
               expressionSequence
                singleExpression
                 identifier
                  base
               eos
           }
     eos
  sourceElement
   statement
    classDeclaration
     class
     identifier
      Colored
     classTail
      {
      classElement
       methodDefinition
        classElementName
         propertyName
          identifierName
           identifier
            initializer
        (
        )
        functionBody
         {
         sourceElements
          sourceElement
           statement
            expressionStatement
             expressionSequence
              singleExpression
               singleExpression
                singleExpression
                 this
                .
                identifierName
                 identifier
                  _color
               =
               singleExpression
                literal
                 "white"
             eos
         }
      classElement
       methodDefinition
        getter
         identifier
          get
         classElementName
          propertyName
           identifierName
            identifier
             color
        (
        )
        functionBody
         {
         sourceElements
          sourceElement
           statement
            returnStatement
             return
             expressionSequence
              singleExpression
               singleExpression
                this
               .
               identifierName
                identifier
                 _color
             eos
         }
      classElement
       methodDefinition
        setter
         identifier
          set
         classElementName
          propertyName
           identifierName
            identifier
             color
        (
        formalParameterList
         formalParameterArg
          assignable
           identifier
            v
        )
        functionBody
         {
         sourceElements
          sourceElement
           statement
            expressionStatement
             expressionSequence
              singleExpression
               singleExpression
                singleExpression
                 this
                .
                identifierName
                 identifier
                  _color
               =
               singleExpression
                identifier
                 v
             eos
         }
      }
  sourceElement
   statement
    classDeclaration
     class
     identifier
      ZCoord
     classTail
      {
      classElement
       methodDefinition
        classElementName
         propertyName
          identifierName
           identifier
            initializer
        (
        )
        functionBody
         {
         sourceElements
          sourceElement
           statement
            expressionStatement
             expressionSequence
              singleExpression
               singleExpression
                singleExpression
                 this
                .
                identifierName
                 identifier
                  _z
               =
               singleExpression
                literal
                 numericLiteral
                  0
             eos
         }
      classElement
       methodDefinition
        getter
         identifier
          get
         classElementName
          propertyName
           identifierName
            identifier
             z
        (
        )
        functionBody
         {
         sourceElements
          sourceElement
           statement
            returnStatement
             return
             expressionSequence
              singleExpression
               singleExpression
                this
               .
               identifierName
                identifier
                 _z
             eos
         }
      classElement
       methodDefinition
        setter
         identifier
          set
         classElementName
          propertyName
           identifierName
            identifier
             z
        (
        formalParameterList
         formalParameterArg
          assignable
           identifier
            v
        )
        functionBody
         {
         sourceElements
          sourceElement
           statement
            expressionStatement
             expressionSequence
              singleExpression
               singleExpression
                singleExpression
                 this
                .
                identifierName
                 identifier
                  _z
               =
               singleExpression
                identifier
                 v
             eos
         }
      }
  sourceElement
   statement
    classDeclaration
     class
     identifier
      Shape
     classTail
      {
      classElement
       methodDefinition
        classElementName
         propertyName
          identifierName
           identifier
            constructor
        (
        formalParameterList
         formalParameterArg
          assignable
           identifier
            x
         ,
         formalParameterArg
          assignable
           identifier
            y
        )
        functionBody
         {
         sourceElements
          sourceElement
           statement
            expressionStatement
             expressionSequence
              singleExpression
               singleExpression
                singleExpression
                 this
                .
                identifierName
                 identifier
                  _x
               =
               singleExpression
                identifier
                 x
             eos
              ;
          sourceElement
           statement
            expressionStatement
             expressionSequence
              singleExpression
               singleExpression
                singleExpression
                 this
                .
                identifierName
                 identifier
                  _y
               =
               singleExpression
                identifier
                 y
             eos
         }
      classElement
       methodDefinition
        getter
         identifier
          get
         classElementName
          propertyName
           identifierName
            identifier
             x
        (
        )
        functionBody
         {
         sourceElements
          sourceElement
           statement
            returnStatement
             return
             expressionSequence
              singleExpression
               singleExpression
                this
               .
               identifierName
                identifier
                 _x
             eos
         }
      classElement
       methodDefinition
        setter
         identifier
          set
         classElementName
          propertyName
           identifierName
            identifier
             x
        (
        formalParameterList
         formalParameterArg
          assignable
           identifier
            v
        )
        functionBody
         {
         sourceElements
          sourceElement
           statement
            expressionStatement
             expressionSequence
              singleExpression
               singleExpression
                singleExpression
                 this
                .
                identifierName
                 identifier
                  _x
               =
               singleExpression
                identifier
                 v
             eos
         }
      classElement
       methodDefinition
        getter
         identifier
          get
         classElementName
          propertyName
           identifierName
            identifier
             y
        (
        )
        functionBody
         {
         sourceElements
          sourceElement
           statement
            returnStatement
             return
             expressionSequence
              singleExpression
               singleExpression
                this
               .
               identifierName
                identifier
                 _y
             eos
         }
      classElement
       methodDefinition
        setter
         identifier
          set
         classElementName
          propertyName
           identifierName
            identifier
             y
        (
        formalParameterList
         formalParameterArg
          assignable
           identifier
            v
        )
        functionBody
         {
         sourceElements
          sourceElement
           statement
            expressionStatement
             expressionSequence
              singleExpression
               singleExpression
                singleExpression
                 this
                .
                identifierName
                 identifier
                  _y
               =
               singleExpression
                identifier
                 v
             eos
         }
      }
  sourceElement
   statement
    classDeclaration
     class
     identifier
      Rectangle
     classTail
      extends
      singleExpression
       singleExpression
        identifier
         aggregation
       arguments
        (
        argument
         singleExpression
          identifier
           Shape
        ,
        argument
         singleExpression
          identifier
           Colored
        ,
        argument
         singleExpression
          identifier
           ZCoord
        )
      {
      }
  sourceElement
   statement
    variableStatement
     variableDeclarationList
      varModifier
       var
      variableDeclaration
       assignable
        identifier
         rect
       =
       singleExpression
        new
        identifier
         Rectangle
        arguments
         (
         argument
          singleExpression
           literal
            numericLiteral
             7
         ,
         argument
          singleExpression
           literal
            numericLiteral
             42
         )
     eos
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         identifier
          rect
        .
        identifierName
         identifier
          z
       =
       singleExpression
        literal
         numericLiteral
          1000
     eos
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         identifier
          rect
        .
        identifierName
         identifier
          color
       =
       singleExpression
        literal
         "red"
     eos
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         identifier
          console
        .
        identifierName
         identifier
          log
       arguments
        (
        argument
         singleExpression
          singleExpression
           identifier
            rect
          .
          identifierName
           identifier
            x
        ,
        argument
         singleExpression
          singleExpression
           identifier
            rect
          .
          identifierName
           identifier
            y
        ,
        argument
         singleExpression
          singleExpression
           identifier
            rect
          .
          identifierName
           identifier
            z
        ,
        argument
         singleExpression
          singleExpression
           identifier
            rect
          .
          identifierName
           identifier
            color
        )
     eos
  sourceElement
   statement
    classDeclaration
     class
     identifier
      Shape
     classTail
      {
      classElement
       methodDefinition
        classElementName
         propertyName
          identifierName
           identifier
            toString
        (
        )
        functionBody
         {
         sourceElements
          sourceElement
           statement
            returnStatement
             return
             expressionSequence
              singleExpression
               literal
                templateStringLiteral
                 `
                 templateStringAtom
                  S
                 templateStringAtom
                  h
                 templateStringAtom
                  a
                 templateStringAtom
                  p
                 templateStringAtom
                  e
                 templateStringAtom
                  (
                 templateStringAtom
                  ${
                  singleExpression
                   singleExpression
                    this
                   .
                   identifierName
                    identifier
                     id
                  }
                 templateStringAtom
                  )
                 `
             eos
         }
      }
  sourceElement
   statement
    classDeclaration
     class
     identifier
      Rectangle
     classTail
      extends
      singleExpression
       identifier
        Shape
      {
      classElement
       methodDefinition
        classElementName
         propertyName
          identifierName
           identifier
            constructor
        (
        formalParameterList
         formalParameterArg
          assignable
           identifier
            id
         ,
         formalParameterArg
          assignable
           identifier
            x
         ,
         formalParameterArg
          assignable
           identifier
            y
         ,
         formalParameterArg
          assignable
           identifier
            width
         ,
         formalParameterArg
          assignable
           identifier
            height
        )
        functionBody
         {
         sourceElements
          sourceElement
           statement
            expressionStatement
             expressionSequence
              singleExpression
               singleExpression
                super
               arguments
                (
                argument
                 singleExpression
                  identifier
                   id
                ,
                argument
                 singleExpression
                  identifier
                   x
                ,
                argument
                 singleExpression
                  identifier
                   y
                )
             eos
         }
      classElement
       methodDefinition
        classElementName
         propertyName
          identifierName
           identifier
            toString
        (
        )
        functionBody
         {
         sourceElements
          sourceElement
           statement
            returnStatement
             return
             expressionSequence
              singleExpression
               singleExpression
                literal
                 "Rectangle > "
               +
               singleExpression
                singleExpression
                 singleExpression
                  super
                 .
                 identifierName
                  identifier
                   toString
                arguments
                 (
                 )
             eos
         }
      }
  sourceElement
   statement
    classDeclaration
     class
     identifier
      Circle
     classTail
      extends
      singleExpression
       identifier
        Shape
      {
      classElement
       methodDefinition
        classElementName
         propertyName
          identifierName
           identifier
            constructor
        (
        formalParameterList
         formalParameterArg
          assignable
           identifier
            id
         ,
         formalParameterArg
          assignable
           identifier
            x
         ,
         formalParameterArg
          assignable
           identifier
            y
         ,
         formalParameterArg
          assignable
           identifier
            radius
        )
        functionBody
         {
         sourceElements
          sourceElement
           statement
            expressionStatement
             expressionSequence
              singleExpression
               singleExpression
                super
               arguments
                (
                argument
                 singleExpression
                  identifier
                   id
                ,
                argument
                 singleExpression
                  identifier
                   x
                ,
                argument
                 singleExpression
                  identifier
                   y
                )
             eos
         }
      classElement
       methodDefinition
        classElementName
         propertyName
          identifierName
           identifier
            toString
        (
        )
        functionBody
         {
         sourceElements
          sourceElement
           statement
            returnStatement
             return
             expressionSequence
              singleExpression
               singleExpression
                literal
                 "Circle > "
               +
               singleExpression
                singleExpression
                 singleExpression
                  super
                 .
                 identifierName
                  identifier
                   toString
                arguments
                 (
                 )
             eos
         }
      }
  sourceElement
   statement
    classDeclaration
     class
     identifier
      Rectangle
     classTail
      extends
      singleExpression
       identifier
        Shape
      {
      classElement
       static
       fieldDefinition
        classElementName
         propertyName
          identifierName
           identifier
            contextTypes
        initializer
         =
         singleExpression
          objectLiteral
           {
           propertyAssignment
            propertyName
             identifierName
              identifier
               router
            :
            singleExpression
             singleExpression
              identifier
               PropTypes
             .
             identifierName
              identifier
               object
           ,
           }
      classElement
       emptyStatement_
        ;
      classElement
       static
       methodDefinition
        classElementName
         propertyName
          identifierName
           identifier
            defaultRectangle
        (
        )
        functionBody
         {
         sourceElements
          sourceElement
           statement
            returnStatement
             return
             expressionSequence
              singleExpression
               new
               identifier
                Rectangle
               arguments
                (
                argument
                 singleExpression
                  literal
                   "default"
                ,
                argument
                 singleExpression
                  literal
                   numericLiteral
                    0
                ,
                argument
                 singleExpression
                  literal
                   numericLiteral
                    0
                ,
                argument
                 singleExpression
                  literal
                   numericLiteral
                    100
                ,
                argument
                 singleExpression
                  literal
                   numericLiteral
                    100
                )
             eos
         }
      }
  sourceElement
   statement
    classDeclaration
     class
     identifier
      Circle
     classTail
      extends
      singleExpression
       identifier
        Shape
      {
      classElement
       static
       methodDefinition
        classElementName
         propertyName
          identifierName
           identifier
            defaultCircle
        (
        )
        functionBody
         {
         sourceElements
          sourceElement
           statement
            returnStatement
             return
             expressionSequence
              singleExpression
               new
               identifier
                Circle
               arguments
                (
                argument
                 singleExpression
                  literal
                   "default"
                ,
                argument
                 singleExpression
                  literal
                   numericLiteral
                    0
                ,
                argument
                 singleExpression
                  literal
                   numericLiteral
                    0
                ,
                argument
                 singleExpression
                  literal
                   numericLiteral
                    100
                )
             eos
         }
      }
  sourceElement
   statement
    variableStatement
     variableDeclarationList
      varModifier
       var
      variableDeclaration
       assignable
        identifier
         defRectangle
       =
       singleExpression
        singleExpression
         singleExpression
          identifier
           Rectangle
         .
         identifierName
          identifier
           defaultRectangle
        arguments
         (
         )
     eos
  sourceElement
   statement
    variableStatement
     variableDeclarationList
      varModifier
       var
      variableDeclaration
       assignable
        identifier
         defCircle
       =
       singleExpression
        singleExpression
         singleExpression
          identifier
           Circle
         .
         identifierName
          identifier
           defaultCircle
        arguments
         (
         )
     eos
  sourceElement
   statement
    classDeclaration
     class
     identifier
      Rectangle
     classTail
      {
      classElement
       methodDefinition
        classElementName
         propertyName
          identifierName
           identifier
            constructor
        (
        formalParameterList
         formalParameterArg
          assignable
           identifier
            width
         ,
         formalParameterArg
          assignable
           identifier
            height
        )
        functionBody
         {
         sourceElements
          sourceElement
           statement
            expressionStatement
             expressionSequence
              singleExpression
               singleExpression
                singleExpression
                 this
                .
                identifierName
                 identifier
                  _width
               =
               singleExpression
                identifier
                 width
             eos
          sourceElement
           statement
            expressionStatement
             expressionSequence
              singleExpression
               singleExpression
                singleExpression
                 this
                .
                identifierName
                 identifier
                  _height
               =
               singleExpression
                identifier
                 height
             eos
         }
      classElement
       methodDefinition
        setter
         identifier
          set
         classElementName
          propertyName
           identifierName
            identifier
             width
        (
        formalParameterList
         formalParameterArg
          assignable
           identifier
            width
        )
        functionBody
         {
         sourceElements
          sourceElement
           statement
            expressionStatement
             expressionSequence
              singleExpression
               singleExpression
                singleExpression
                 this
                .
                identifierName
                 identifier
                  _width
               =
               singleExpression
                identifier
                 width
             eos
         }
      classElement
       methodDefinition
        getter
         identifier
          get
         classElementName
          propertyName
           identifierName
            identifier
             width
        (
        )
        functionBody
         {
         sourceElements
          sourceElement
           statement
            returnStatement
             return
             expressionSequence
              singleExpression
               singleExpression
                this
               .
               identifierName
                identifier
                 _width
             eos
         }
      classElement
       methodDefinition
        setter
         identifier
          set
         classElementName
          propertyName
           identifierName
            identifier
             height
        (
        formalParameterList
         formalParameterArg
          assignable
           identifier
            height
        )
        functionBody
         {
         sourceElements
          sourceElement
           statement
            expressionStatement
             expressionSequence
              singleExpression
               singleExpression
                singleExpression
                 this
                .
                identifierName
                 identifier
                  _height
               =
               singleExpression
                identifier
                 height
             eos
         }
      classElement
       methodDefinition
        getter
         identifier
          get
         classElementName
          propertyName
           identifierName
            identifier
             height
        (
        )
        functionBody
         {
         sourceElements
          sourceElement
           statement
            returnStatement
             return
             expressionSequence
              singleExpression
               singleExpression
                this
               .
               identifierName
                identifier
                 _height
             eos
         }
      classElement
       methodDefinition
        getter
         identifier
          get
         classElementName
          propertyName
           identifierName
            identifier
             area
        (
        )
        functionBody
         {
         sourceElements
          sourceElement
           statement
            returnStatement
             return
             expressionSequence
              singleExpression
               singleExpression
                singleExpression
                 this
                .
                identifierName
                 identifier
                  _width
               *
               singleExpression
                singleExpression
                 this
                .
                identifierName
                 identifier
                  _height
             eos
         }
      }
  sourceElement
   statement
    variableStatement
     variableDeclarationList
      varModifier
       var
      variableDeclaration
       assignable
        identifier
         r
       =
       singleExpression
        new
        identifier
         Rectangle
        arguments
         (
         argument
          singleExpression
           literal
            numericLiteral
             50
         ,
         argument
          singleExpression
           literal
            numericLiteral
             20
         )
     eos
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         identifier
          r
        .
        identifierName
         identifier
          area
       ===
       singleExpression
        literal
         numericLiteral
          1000
     eos
  sourceElement
   statement
    classDeclaration
     class
     identifier
      A
     classTail
      {
      classElement
       emptyStatement_
        ;
      }
  sourceElement
   statement
    classDeclaration
     class
     identifier
      B
     classTail
      {
      classElement
       methodDefinition
        getter
         identifier
          get
         classElementName
          propertyName
           [
           singleExpression
            identifier
             runtimeCalc
           ]
        (
        )
        functionBody
         {
         sourceElements
          sourceElement
           statement
            returnStatement
             return
             expressionSequence
              singleExpression
               literal
                numericLiteral
                 1
             eos
         }
      classElement
       emptyStatement_
        ;
      classElement
       methodDefinition
        setter
         identifier
          set
         classElementName
          propertyName
           [
           singleExpression
            identifier
             runtimeCalc
           ]
        (
        formalParameterList
         formalParameterArg
          assignable
           identifier
            p
        )
        functionBody
         {
         }
      classElement
       emptyStatement_
        ;
      classElement
       methodDefinition
        getter
         identifier
          get
         classElementName
          propertyName
           'string as key'
        (
        )
        functionBody
         {
         }
      classElement
       emptyStatement_
        ;
      }
  sourceElement
   statement
    variableStatement
     variableDeclarationList
      varModifier
       let_
        let
      variableDeclaration
       assignable
        identifier
         Obj
       =
       singleExpression
        objectLiteral
         {
         propertyAssignment
          propertyName
           [
           singleExpression
            identifier
             asdfg
           ]
          (
          formalParameterList
           formalParameterArg
            assignable
             identifier
              a
          )
          functionBody
           {
           }
         ,
         propertyAssignment
          *
          propertyName
           identifierName
            identifier
             foo
          (
          )
          functionBody
           {
           }
         ,
         propertyAssignment
          propertyName
           identifierName
            identifier
             f
          (
          )
          functionBody
           {
           }
         ,
         propertyAssignment
          getter
           identifier
            get
           classElementName
            propertyName
             identifierName
              identifier
               a
          (
          )
          functionBody
           {
           }
         ,
         propertyAssignment
          setter
           identifier
            set
           classElementName
            propertyName
             identifierName
              identifier
               a
          (
          formalParameterArg
           assignable
            arrayLiteral
             [
             elementList
              arrayElement
               singleExpression
                identifier
                 aa
             ]
           =
           singleExpression
            literal
             numericLiteral
              123
          )
          functionBody
           {
           }
         ,
         propertyAssignment
          ...
          singleExpression
           identifier
            anotherObj
         ,
         propertyAssignment
          ...
          singleExpression
           objectLiteral
            {
            propertyAssignment
             singleExpression
              identifier
               speradObjectLiteral
            }
         ,
         propertyAssignment
          ...
          singleExpression
           singleExpression
            identifier
             functionResult
           arguments
            (
            )
         }
     eos
  sourceElement
   statement
    variableStatement
     variableDeclarationList
      varModifier
       const
      variableDeclaration
       assignable
        identifier
         PREFIX
       =
       singleExpression
        literal
         "prefix"
     eos
      ;
  sourceElement
   statement
    classDeclaration
     class
     identifier
      ClassWithField
     classTail
      {
      classElement
       fieldDefinition
        classElementName
         propertyName
          identifierName
           identifier
            field
      classElement
       emptyStatement_
        ;
      classElement
       fieldDefinition
        classElementName
         propertyName
          identifierName
           identifier
            fieldWithInitializer
        initializer
         =
         singleExpression
          literal
           "instance field"
      classElement
       emptyStatement_
        ;
      classElement
       fieldDefinition
        classElementName
         propertyName
          [
          singleExpression
           literal
            templateStringLiteral
             `
             templateStringAtom
              ${
              singleExpression
               identifier
                PREFIX
              }
             templateStringAtom
              F
             templateStringAtom
              i
             templateStringAtom
              e
             templateStringAtom
              l
             templateStringAtom
              d
             `
          ]
        initializer
         =
         singleExpression
          literal
           "prefixed field"
      classElement
       emptyStatement_
        ;
      }
  sourceElement
   statement
    variableStatement
     variableDeclarationList
      varModifier
       const
      variableDeclaration
       assignable
        identifier
         instance
       =
       singleExpression
        new
        identifier
         ClassWithField
        arguments
         (
         )
     eos
      ;
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         identifier
          console
        .
        identifierName
         identifier
          log
       arguments
        (
        argument
         singleExpression
          singleExpression
           singleExpression
            identifier
             Object
           .
           identifierName
            identifier
             hasOwn
          arguments
           (
           argument
            singleExpression
             identifier
              instance
           ,
           argument
            singleExpression
             literal
              "field"
           )
        )
     eos
      ;
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         identifier
          console
        .
        identifierName
         identifier
          log
       arguments
        (
        argument
         singleExpression
          singleExpression
           identifier
            instance
          .
          identifierName
           identifier
            field
        )
     eos
      ;
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         identifier
          console
        .
        identifierName
         identifier
          log
       arguments
        (
        argument
         singleExpression
          singleExpression
           identifier
            instance
          .
          identifierName
           identifier
            fieldWithInitializer
        )
     eos
      ;
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         identifier
          console
        .
        identifierName
         identifier
          log
       arguments
        (
        argument
         singleExpression
          singleExpression
           identifier
            instance
          .
          identifierName
           identifier
            prefixField
        )
     eos
      ;
  sourceElement
   statement
    classDeclaration
     class
     identifier
      ClassWithStaticInitializationBlock
     classTail
      {
      classElement
       static
       fieldDefinition
        classElementName
         propertyName
          identifierName
           identifier
            staticProperty1
        initializer
         =
         singleExpression
          literal
           'Property 1'
      classElement
       emptyStatement_
        ;
      classElement
       static
       fieldDefinition
        classElementName
         propertyName
          identifierName
           identifier
            staticProperty2
      classElement
       emptyStatement_
        ;
      classElement
       static
       block
        {
        statementList
         statement
          expressionStatement
           expressionSequence
            singleExpression
             singleExpression
              singleExpression
               this
              .
              identifierName
               identifier
                staticProperty2
             =
             singleExpression
              literal
               'Property 2'
           eos
            ;
        }
      }
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         identifier
          console
        .
        identifierName
         identifier
          log
       arguments
        (
        argument
         singleExpression
          singleExpression
           identifier
            ClassWithStaticInitializationBlock
          .
          identifierName
           identifier
            staticProperty1
        )
     eos
      ;
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         identifier
          console
        .
        identifierName
         identifier
          log
       arguments
        (
        argument
         singleExpression
          singleExpression
           identifier
            ClassWithStaticInitializationBlock
          .
          identifierName
           identifier
            staticProperty2
        )
     eos
      ;
 <EOF>
