program
 sourceElements
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       literal
        "use strict"
     eos
      ;
  sourceElement
   statement
    variableStatement
     variableDeclarationList
      varModifier
       let_
        let
      variableDeclaration
       assignable
        identifier
         s
       =
       singleExpression
        new
        identifier
         Set
        arguments
         (
         )
     eos
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         singleExpression
          singleExpression
           singleExpression
            singleExpression
             identifier
              s
            .
            identifierName
             identifier
              add
           arguments
            (
            argument
             singleExpression
              literal
               "hello"
            )
          .
          identifierName
           identifier
            add
         arguments
          (
          argument
           singleExpression
            literal
             "goodbye"
          )
        .
        identifierName
         identifier
          add
       arguments
        (
        argument
         singleExpression
          literal
           "hello"
        )
     eos
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         identifier
          s
        .
        identifierName
         identifier
          size
       ===
       singleExpression
        literal
         numericLiteral
          2
     eos
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         singleExpression
          identifier
           s
         .
         identifierName
          identifier
           has
        arguments
         (
         argument
          singleExpression
           literal
            "hello"
         )
       ===
       singleExpression
        literal
         true
     eos
  sourceElement
   statement
    iterationStatement
     for
     (
     variableDeclarationList
      varModifier
       let_
        let
      variableDeclaration
       assignable
        identifier
         key
     of
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         identifier
          s
        .
        identifierName
         identifier
          values
       arguments
        (
        )
     )
     statement
      expressionStatement
       expressionSequence
        singleExpression
         singleExpression
          singleExpression
           identifier
            console
          .
          identifierName
           identifier
            log
         arguments
          (
          argument
           singleExpression
            identifier
             key
          )
       eos
  sourceElement
   statement
    variableStatement
     variableDeclarationList
      varModifier
       let_
        let
      variableDeclaration
       assignable
        identifier
         m
       =
       singleExpression
        new
        identifier
         Map
        arguments
         (
         )
     eos
  sourceElement
   statement
    variableStatement
     variableDeclarationList
      varModifier
       let_
        let
      variableDeclaration
       assignable
        identifier
         s
       =
       singleExpression
        singleExpression
         identifier
          Symbol
        arguments
         (
         )
     eos
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         identifier
          m
        .
        identifierName
         identifier
          set
       arguments
        (
        argument
         singleExpression
          literal
           "hello"
        ,
        argument
         singleExpression
          literal
           numericLiteral
            42
        )
     eos
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         identifier
          m
        .
        identifierName
         identifier
          set
       arguments
        (
        argument
         singleExpression
          identifier
           s
        ,
        argument
         singleExpression
          literal
           numericLiteral
            34
        )
     eos
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         singleExpression
          identifier
           m
         .
         identifierName
          identifier
           get
        arguments
         (
         argument
          singleExpression
           identifier
            s
         )
       ===
       singleExpression
        literal
         numericLiteral
          34
     eos
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         identifier
          m
        .
        identifierName
         identifier
          size
       ===
       singleExpression
        literal
         numericLiteral
          2
     eos
  sourceElement
   statement
    iterationStatement
     for
     (
     variableDeclarationList
      varModifier
       let_
        let
      variableDeclaration
       assignable
        arrayLiteral
         [
         elementList
          arrayElement
           singleExpression
            identifier
             key
          ,
          arrayElement
           singleExpression
            identifier
             val
         ]
     of
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         identifier
          m
        .
        identifierName
         identifier
          entries
       arguments
        (
        )
     )
     statement
      expressionStatement
       expressionSequence
        singleExpression
         singleExpression
          singleExpression
           identifier
            console
          .
          identifierName
           identifier
            log
         arguments
          (
          argument
           singleExpression
            singleExpression
             singleExpression
              identifier
               key
             +
             singleExpression
              literal
               " = "
            +
            singleExpression
             identifier
              val
          )
       eos
  sourceElement
   statement
    variableStatement
     variableDeclarationList
      varModifier
       let_
        let
      variableDeclaration
       assignable
        identifier
         isMarked
       =
       singleExpression
        new
        identifier
         WeakSet
        arguments
         (
         )
     eos
  sourceElement
   statement
    variableStatement
     variableDeclarationList
      varModifier
       let_
        let
      variableDeclaration
       assignable
        identifier
         attachedData
       =
       singleExpression
        new
        identifier
         WeakMap
        arguments
         (
         )
     eos
  sourceElement
   statement
    exportStatement
     export
     declaration
      classDeclaration
       class
       identifier
        Node
       classTail
        {
        classElement
         methodDefinition
          classElementName
           propertyName
            identifierName
             identifier
              constructor
          (
          formalParameterList
           formalParameterArg
            assignable
             identifier
              id
          )
          functionBody
           {
           sourceElements
            sourceElement
             statement
              expressionStatement
               expressionSequence
                singleExpression
                 singleExpression
                  singleExpression
                   this
                  .
                  identifierName
                   identifier
                    id
                 =
                 singleExpression
                  identifier
                   id
               eos
           }
        classElement
         methodDefinition
          classElementName
           propertyName
            identifierName
             identifier
              mark
          (
          )
          functionBody
           {
           sourceElements
            sourceElement
             statement
              expressionStatement
               expressionSequence
                singleExpression
                 singleExpression
                  singleExpression
                   identifier
                    isMarked
                  .
                  identifierName
                   identifier
                    add
                 arguments
                  (
                  argument
                   singleExpression
                    this
                  )
               eos
           }
        classElement
         methodDefinition
          classElementName
           propertyName
            identifierName
             identifier
              unmark
          (
          )
          functionBody
           {
           sourceElements
            sourceElement
             statement
              expressionStatement
               expressionSequence
                singleExpression
                 singleExpression
                  singleExpression
                   identifier
                    isMarked
                  .
                  identifierName
                   reservedWord
                    keyword
                     delete
                 arguments
                  (
                  argument
                   singleExpression
                    this
                  )
               eos
           }
        classElement
         methodDefinition
          classElementName
           propertyName
            identifierName
             identifier
              marked
          (
          )
          functionBody
           {
           sourceElements
            sourceElement
             statement
              returnStatement
               return
               expressionSequence
                singleExpression
                 singleExpression
                  singleExpression
                   identifier
                    isMarked
                  .
                  identifierName
                   identifier
                    has
                 arguments
                  (
                  argument
                   singleExpression
                    this
                  )
               eos
           }
        classElement
         methodDefinition
          setter
           identifier
            set
           classElementName
            propertyName
             identifierName
              identifier
               data
          (
          formalParameterList
           formalParameterArg
            assignable
             identifier
              data
          )
          functionBody
           {
           sourceElements
            sourceElement
             statement
              expressionStatement
               expressionSequence
                singleExpression
                 singleExpression
                  singleExpression
                   identifier
                    attachedData
                  .
                  identifierName
                   identifier
                    set
                 arguments
                  (
                  argument
                   singleExpression
                    this
                  ,
                  argument
                   singleExpression
                    identifier
                     data
                  )
               eos
           }
        classElement
         methodDefinition
          getter
           identifier
            get
           classElementName
            propertyName
             identifierName
              identifier
               data
          (
          )
          functionBody
           {
           sourceElements
            sourceElement
             statement
              returnStatement
               return
               expressionSequence
                singleExpression
                 singleExpression
                  singleExpression
                   identifier
                    attachedData
                  .
                  identifierName
                   identifier
                    get
                 arguments
                  (
                  argument
                   singleExpression
                    this
                  )
               eos
           }
        }
     eos
  sourceElement
   statement
    variableStatement
     variableDeclarationList
      varModifier
       let_
        let
      variableDeclaration
       assignable
        identifier
         foo
       =
       singleExpression
        new
        identifier
         Node
        arguments
         (
         argument
          singleExpression
           literal
            "foo"
         )
     eos
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         singleExpression
          identifier
           JSON
         .
         identifierName
          identifier
           stringify
        arguments
         (
         argument
          singleExpression
           identifier
            foo
         )
       ===
       singleExpression
        literal
         '{"id":"foo"}'
     eos
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         identifier
          foo
        .
        identifierName
         identifier
          mark
       arguments
        (
        )
     eos
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         identifier
          foo
        .
        identifierName
         identifier
          data
       =
       singleExpression
        literal
         "bar"
     eos
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         identifier
          foo
        .
        identifierName
         identifier
          data
       ===
       singleExpression
        literal
         "bar"
     eos
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         singleExpression
          identifier
           JSON
         .
         identifierName
          identifier
           stringify
        arguments
         (
         argument
          singleExpression
           identifier
            foo
         )
       ===
       singleExpression
        literal
         '{"id":"foo"}'
     eos
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         singleExpression
          identifier
           isMarked
         .
         identifierName
          identifier
           has
        arguments
         (
         argument
          singleExpression
           identifier
            foo
         )
       ===
       singleExpression
        literal
         true
     eos
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         singleExpression
          identifier
           attachedData
         .
         identifierName
          identifier
           has
        arguments
         (
         argument
          singleExpression
           identifier
            foo
         )
       ===
       singleExpression
        literal
         true
     eos
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        identifier
         foo
       =
       singleExpression
        literal
         null
     eos
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         singleExpression
          identifier
           attachedData
         .
         identifierName
          identifier
           has
        arguments
         (
         argument
          singleExpression
           identifier
            foo
         )
       ===
       singleExpression
        literal
         false
     eos
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         singleExpression
          identifier
           isMarked
         .
         identifierName
          identifier
           has
        arguments
         (
         argument
          singleExpression
           identifier
            foo
         )
       ===
       singleExpression
        literal
         false
     eos
      <EOF>
 <EOF>
