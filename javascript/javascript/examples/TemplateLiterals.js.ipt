program
 sourceElements
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       literal
        "use strict"
     eos
      ;
  sourceElement
   statement
    variableStatement
     variableDeclarationList
      varModifier
       var
      variableDeclaration
       assignable
        identifier
         customer
       =
       singleExpression
        objectLiteral
         {
         propertyAssignment
          propertyName
           identifierName
            identifier
             name
          :
          singleExpression
           literal
            "Foo"
         }
     eos
  sourceElement
   statement
    variableStatement
     variableDeclarationList
      varModifier
       var
      variableDeclaration
       assignable
        identifier
         card
       =
       singleExpression
        objectLiteral
         {
         propertyAssignment
          propertyName
           identifierName
            identifier
             amount
          :
          singleExpression
           literal
            numericLiteral
             7
         ,
         propertyAssignment
          propertyName
           identifierName
            identifier
             product
          :
          singleExpression
           literal
            "Bar"
         ,
         propertyAssignment
          propertyName
           identifierName
            identifier
             unitprice
          :
          singleExpression
           literal
            numericLiteral
             42
         }
     eos
  sourceElement
   statement
    variableStatement
     variableDeclarationList
      varModifier
       var
      variableDeclaration
       assignable
        identifier
         message
       =
       singleExpression
        literal
         templateStringLiteral
          `
          templateStringAtom
           H
          templateStringAtom
           e
          templateStringAtom
           l
          templateStringAtom
           l
          templateStringAtom
           o
          templateStringAtom
            
          templateStringAtom
           ${
           singleExpression
            singleExpression
             identifier
              customer
            .
            identifierName
             identifier
              name
           }
          templateStringAtom
           ,
          templateStringAtom
           \n
          templateStringAtom
           w
          templateStringAtom
           a
          templateStringAtom
           n
          templateStringAtom
           t
          templateStringAtom
            
          templateStringAtom
           t
          templateStringAtom
           o
          templateStringAtom
            
          templateStringAtom
           b
          templateStringAtom
           u
          templateStringAtom
           y
          templateStringAtom
            
          templateStringAtom
           ${
           singleExpression
            singleExpression
             identifier
              card
            .
            identifierName
             identifier
              amount
           }
          templateStringAtom
            
          templateStringAtom
           ${
           singleExpression
            singleExpression
             identifier
              card
            .
            identifierName
             identifier
              product
           }
          templateStringAtom
            
          templateStringAtom
           f
          templateStringAtom
           o
          templateStringAtom
           r
          templateStringAtom
           \n
          templateStringAtom
           a
          templateStringAtom
            
          templateStringAtom
           t
          templateStringAtom
           o
          templateStringAtom
           t
          templateStringAtom
           a
          templateStringAtom
           l
          templateStringAtom
            
          templateStringAtom
           o
          templateStringAtom
           f
          templateStringAtom
            
          templateStringAtom
           ${
           singleExpression
            singleExpression
             singleExpression
              identifier
               card
             .
             identifierName
              identifier
               amount
            *
            singleExpression
             singleExpression
              identifier
               card
             .
             identifierName
              identifier
               unitprice
           }
          templateStringAtom
            
          templateStringAtom
           b
          templateStringAtom
           u
          templateStringAtom
           c
          templateStringAtom
           k
          templateStringAtom
           s
          templateStringAtom
           ?
          `
     eos
  sourceElement
   statement
    variableStatement
     variableDeclarationList
      varModifier
       var
      variableDeclaration
       assignable
        identifier
         nested
       =
       singleExpression
        literal
         templateStringLiteral
          `
          templateStringAtom
           O
          templateStringAtom
           b
          templateStringAtom
           j
          templateStringAtom
           e
          templateStringAtom
           c
          templateStringAtom
           t
          templateStringAtom
            
          templateStringAtom
           i
          templateStringAtom
           n
          templateStringAtom
            
          templateStringAtom
           t
          templateStringAtom
           e
          templateStringAtom
           m
          templateStringAtom
           p
          templateStringAtom
           l
          templateStringAtom
           a
          templateStringAtom
           t
          templateStringAtom
           e
          templateStringAtom
            
          templateStringAtom
           l
          templateStringAtom
           i
          templateStringAtom
           t
          templateStringAtom
           e
          templateStringAtom
           r
          templateStringAtom
           a
          templateStringAtom
           l
          templateStringAtom
            
          templateStringAtom
           ${
           singleExpression
            singleExpression
             singleExpression
              identifier
               JSON
             .
             identifierName
              identifier
               stringify
            arguments
             (
             argument
              singleExpression
               objectLiteral
                {
                propertyAssignment
                 propertyName
                  identifierName
                   identifier
                    key
                 :
                 singleExpression
                  literal
                   'value'
                }
             )
           }
          `
     eos
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        identifier
         get
       templateStringLiteral
        `
        templateStringAtom
         h
        templateStringAtom
         t
        templateStringAtom
         t
        templateStringAtom
         p
        templateStringAtom
         :
        templateStringAtom
         /
        templateStringAtom
         /
        templateStringAtom
         e
        templateStringAtom
         x
        templateStringAtom
         a
        templateStringAtom
         m
        templateStringAtom
         p
        templateStringAtom
         l
        templateStringAtom
         e
        templateStringAtom
         .
        templateStringAtom
         c
        templateStringAtom
         o
        templateStringAtom
         m
        templateStringAtom
         /
        templateStringAtom
         f
        templateStringAtom
         o
        templateStringAtom
         o
        templateStringAtom
         ?
        templateStringAtom
         b
        templateStringAtom
         a
        templateStringAtom
         r
        templateStringAtom
         =
        templateStringAtom
         ${
         singleExpression
          singleExpression
           identifier
            bar
          +
          singleExpression
           identifier
            baz
         }
        templateStringAtom
         &
        templateStringAtom
         q
        templateStringAtom
         u
        templateStringAtom
         u
        templateStringAtom
         x
        templateStringAtom
         =
        templateStringAtom
         ${
         singleExpression
          identifier
           quux
         }
        `
     eos
  sourceElement
   statement
    functionDeclaration
     function
     identifier
      quux
     (
     formalParameterList
      formalParameterArg
       assignable
        identifier
         strings
      ,
      lastFormalParameterArg
       ...
       singleExpression
        identifier
         values
     )
     functionBody
      {
      sourceElements
       sourceElement
        statement
         expressionStatement
          expressionSequence
           singleExpression
            singleExpression
             singleExpression
              identifier
               strings
             [
             expressionSequence
              singleExpression
               literal
                numericLiteral
                 0
             ]
            ===
            singleExpression
             literal
              "foo\n"
          eos
       sourceElement
        statement
         expressionStatement
          expressionSequence
           singleExpression
            singleExpression
             singleExpression
              identifier
               strings
             [
             expressionSequence
              singleExpression
               literal
                numericLiteral
                 1
             ]
            ===
            singleExpression
             literal
              "bar"
          eos
       sourceElement
        statement
         expressionStatement
          expressionSequence
           singleExpression
            singleExpression
             singleExpression
              singleExpression
               identifier
                strings
              .
              identifierName
               identifier
                raw
             [
             expressionSequence
              singleExpression
               literal
                numericLiteral
                 0
             ]
            ===
            singleExpression
             literal
              "foo\\n"
          eos
       sourceElement
        statement
         expressionStatement
          expressionSequence
           singleExpression
            singleExpression
             singleExpression
              singleExpression
               identifier
                strings
              .
              identifierName
               identifier
                raw
             [
             expressionSequence
              singleExpression
               literal
                numericLiteral
                 1
             ]
            ===
            singleExpression
             literal
              "bar"
          eos
       sourceElement
        statement
         expressionStatement
          expressionSequence
           singleExpression
            singleExpression
             singleExpression
              identifier
               values
             [
             expressionSequence
              singleExpression
               literal
                numericLiteral
                 0
             ]
            ===
            singleExpression
             literal
              numericLiteral
               42
          eos
      }
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        identifier
         quux
       templateStringLiteral
        `
        templateStringAtom
         f
        templateStringAtom
         o
        templateStringAtom
         o
        templateStringAtom
         \
        templateStringAtom
         n
        templateStringAtom
         ${
         singleExpression
          literal
           numericLiteral
            42
         }
        templateStringAtom
         b
        templateStringAtom
         a
        templateStringAtom
         r
        `
     eos
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         singleExpression
          identifier
           String
         .
         identifierName
          identifier
           raw
        templateStringLiteral
         `
         templateStringAtom
          f
         templateStringAtom
          o
         templateStringAtom
          o
         templateStringAtom
          \
         templateStringAtom
          n
         templateStringAtom
          ${
          singleExpression
           literal
            numericLiteral
             42
          }
         templateStringAtom
          b
         templateStringAtom
          a
         templateStringAtom
          r
         `
       ===
       singleExpression
        literal
         "foo\\n42bar"
     eos
      <EOF>
 <EOF>
