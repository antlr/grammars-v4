program
 sourceElements
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       literal
        "use strict"
     eos
      ;
  sourceElement
   statement
    variableStatement
     variableDeclarationList
      varModifier
       let_
        let
      variableDeclaration
       assignable
        identifier
         fibonacci
       =
       singleExpression
        objectLiteral
         {
         propertyAssignment
          propertyName
           [
           singleExpression
            singleExpression
             identifier
              Symbol
            .
            identifierName
             identifier
              iterator
           ]
          (
          )
          functionBody
           {
           sourceElements
            sourceElement
             statement
              variableStatement
               variableDeclarationList
                varModifier
                 let_
                  let
                variableDeclaration
                 assignable
                  identifier
                   pre
                 =
                 singleExpression
                  literal
                   numericLiteral
                    0
                ,
                variableDeclaration
                 assignable
                  identifier
                   cur
                 =
                 singleExpression
                  literal
                   numericLiteral
                    1
               eos
            sourceElement
             statement
              returnStatement
               return
               expressionSequence
                singleExpression
                 objectLiteral
                  {
                  propertyAssignment
                   propertyName
                    identifierName
                     identifier
                      next
                   (
                   )
                   functionBody
                    {
                    sourceElements
                     sourceElement
                      statement
                       expressionStatement
                        expressionSequence
                         singleExpression
                          singleExpression
                           arrayLiteral
                            [
                            elementList
                             arrayElement
                              singleExpression
                               identifier
                                pre
                             ,
                             arrayElement
                              singleExpression
                               identifier
                                cur
                            ]
                          =
                          singleExpression
                           arrayLiteral
                            [
                            elementList
                             arrayElement
                              singleExpression
                               identifier
                                cur
                             ,
                             arrayElement
                              singleExpression
                               singleExpression
                                identifier
                                 pre
                               +
                               singleExpression
                                identifier
                                 cur
                            ]
                        eos
                     sourceElement
                      statement
                       returnStatement
                        return
                        expressionSequence
                         singleExpression
                          objectLiteral
                           {
                           propertyAssignment
                            propertyName
                             identifierName
                              identifier
                               done
                            :
                            singleExpression
                             literal
                              false
                           ,
                           propertyAssignment
                            propertyName
                             identifierName
                              identifier
                               value
                            :
                            singleExpression
                             identifier
                              cur
                           }
                        eos
                    }
                  }
               eos
           }
         }
     eos
  sourceElement
   statement
    iterationStatement
     for
     (
     variableDeclarationList
      varModifier
       let_
        let
      variableDeclaration
       assignable
        identifier
         n
     of
     expressionSequence
      singleExpression
       identifier
        fibonacci
     )
     statement
      block
       {
       statementList
        statement
         ifStatement
          if
          (
          expressionSequence
           singleExpression
            singleExpression
             identifier
              n
            >
            singleExpression
             literal
              numericLiteral
               1000
          )
          statement
           breakStatement
            break
            eos
        statement
         expressionStatement
          expressionSequence
           singleExpression
            singleExpression
             singleExpression
              identifier
               console
             .
             identifierName
              identifier
               log
            arguments
             (
             argument
              singleExpression
               identifier
                n
             )
          eos
       }
 <EOF>
