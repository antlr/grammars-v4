program
 sourceElements
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       literal
        "use strict"
     eos
      ;
  sourceElement
   statement
    iterationStatement
     for
     (
     variableDeclarationList
      varModifier
       let_
        let
      variableDeclaration
       assignable
        identifier
         i
       =
       singleExpression
        literal
         numericLiteral
          0
     ;
     expressionSequence
      singleExpression
       singleExpression
        identifier
         i
       <
       singleExpression
        singleExpression
         identifier
          a
        .
        identifierName
         identifier
          length
     ;
     expressionSequence
      singleExpression
       singleExpression
        identifier
         i
       ++
     )
     statement
      block
       {
       statementList
        statement
         variableStatement
          variableDeclarationList
           varModifier
            let_
             let
           variableDeclaration
            assignable
             identifier
              x
            =
            singleExpression
             singleExpression
              identifier
               a
             [
             expressionSequence
              singleExpression
               identifier
                i
             ]
          eos
       }
  sourceElement
   statement
    iterationStatement
     for
     (
     variableDeclarationList
      varModifier
       let_
        let
      variableDeclaration
       assignable
        identifier
         i
       =
       singleExpression
        literal
         numericLiteral
          0
     ;
     expressionSequence
      singleExpression
       singleExpression
        identifier
         i
       <
       singleExpression
        singleExpression
         identifier
          b
        .
        identifierName
         identifier
          length
     ;
     expressionSequence
      singleExpression
       singleExpression
        identifier
         i
       ++
     )
     statement
      block
       {
       statementList
        statement
         variableStatement
          variableDeclarationList
           varModifier
            let_
             let
           variableDeclaration
            assignable
             identifier
              y
            =
            singleExpression
             singleExpression
              identifier
               b
             [
             expressionSequence
              singleExpression
               identifier
                i
             ]
          eos
       }
  sourceElement
   statement
    variableStatement
     variableDeclarationList
      varModifier
       let_
        let
      variableDeclaration
       assignable
        identifier
         callbacks
       =
       singleExpression
        arrayLiteral
         [
         elementList
         ]
     eos
  sourceElement
   statement
    iterationStatement
     for
     (
     variableDeclarationList
      varModifier
       let_
        let
      variableDeclaration
       assignable
        identifier
         i
       =
       singleExpression
        literal
         numericLiteral
          0
     ;
     expressionSequence
      singleExpression
       singleExpression
        identifier
         i
       <=
       singleExpression
        literal
         numericLiteral
          2
     ;
     expressionSequence
      singleExpression
       singleExpression
        identifier
         i
       ++
     )
     statement
      block
       {
       statementList
        statement
         expressionStatement
          expressionSequence
           singleExpression
            singleExpression
             singleExpression
              identifier
               callbacks
             [
             expressionSequence
              singleExpression
               identifier
                i
             ]
            =
            singleExpression
             anonymousFunction
              function
              (
              )
              functionBody
               {
               sourceElements
                sourceElement
                 statement
                  returnStatement
                   return
                   expressionSequence
                    singleExpression
                     singleExpression
                      identifier
                       i
                     *
                     singleExpression
                      literal
                       numericLiteral
                        2
                   eos
               }
          eos
       }
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         singleExpression
          identifier
           callbacks
         [
         expressionSequence
          singleExpression
           literal
            numericLiteral
             0
         ]
        arguments
         (
         )
       ===
       singleExpression
        literal
         numericLiteral
          0
     eos
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         singleExpression
          identifier
           callbacks
         [
         expressionSequence
          singleExpression
           literal
            numericLiteral
             1
         ]
        arguments
         (
         )
       ===
       singleExpression
        literal
         numericLiteral
          2
     eos
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         singleExpression
          identifier
           callbacks
         [
         expressionSequence
          singleExpression
           literal
            numericLiteral
             2
         ]
        arguments
         (
         )
       ===
       singleExpression
        literal
         numericLiteral
          4
     eos
  sourceElement
   statement
    functionDeclaration
     function
     identifier
      foo
     (
     )
     functionBody
      {
      sourceElements
       sourceElement
        statement
         returnStatement
          return
          expressionSequence
           singleExpression
            literal
             numericLiteral
              1
          eos
      }
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         identifier
          foo
        arguments
         (
         )
       ===
       singleExpression
        literal
         numericLiteral
          1
     eos
  sourceElement
   statement
    block
     {
     statementList
      statement
       functionDeclaration
        function
        identifier
         foo
        (
        )
        functionBody
         {
         sourceElements
          sourceElement
           statement
            returnStatement
             return
             expressionSequence
              singleExpression
               literal
                numericLiteral
                 2
             eos
         }
      statement
       expressionStatement
        expressionSequence
         singleExpression
          singleExpression
           singleExpression
            identifier
             foo
           arguments
            (
            )
          ===
          singleExpression
           literal
            numericLiteral
             2
        eos
     }
 <EOF>
