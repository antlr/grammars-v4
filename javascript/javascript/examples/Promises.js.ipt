program
 sourceElements
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       literal
        "use strict"
     eos
      ;
  sourceElement
   statement
    functionDeclaration
     function
     identifier
      msgAfterTimeout
     (
     formalParameterList
      formalParameterArg
       assignable
        identifier
         msg
      ,
      formalParameterArg
       assignable
        identifier
         who
      ,
      formalParameterArg
       assignable
        identifier
         timeout
     )
     functionBody
      {
      sourceElements
       sourceElement
        statement
         returnStatement
          return
          expressionSequence
           singleExpression
            new
            identifier
             Promise
            arguments
             (
             argument
              singleExpression
               anonymousFunction
                arrowFunctionParameters
                 (
                 formalParameterList
                  formalParameterArg
                   assignable
                    identifier
                     resolve
                  ,
                  formalParameterArg
                   assignable
                    identifier
                     reject
                 )
                =>
                arrowFunctionBody
                 singleExpression
                  objectLiteral
                   {
                   propertyAssignment
                    singleExpression
                     singleExpression
                      identifier
                       setTimeout
                     arguments
                      (
                      argument
                       singleExpression
                        anonymousFunction
                         arrowFunctionParameters
                          (
                          )
                         =>
                         arrowFunctionBody
                          singleExpression
                           singleExpression
                            identifier
                             resolve
                           arguments
                            (
                            argument
                             singleExpression
                              literal
                               templateStringLiteral
                                `
                                templateStringAtom
                                 ${
                                 singleExpression
                                  identifier
                                   msg
                                 }
                                templateStringAtom
                                  
                                templateStringAtom
                                 H
                                templateStringAtom
                                 e
                                templateStringAtom
                                 l
                                templateStringAtom
                                 l
                                templateStringAtom
                                 o
                                templateStringAtom
                                  
                                templateStringAtom
                                 ${
                                 singleExpression
                                  identifier
                                   who
                                 }
                                templateStringAtom
                                 !
                                `
                            )
                      ,
                      argument
                       singleExpression
                        identifier
                         timeout
                      )
                   }
             )
          eos
      }
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         singleExpression
          singleExpression
           singleExpression
            identifier
             msgAfterTimeout
           arguments
            (
            argument
             singleExpression
              literal
               ""
            ,
            argument
             singleExpression
              literal
               "Foo"
            ,
            argument
             singleExpression
              literal
               numericLiteral
                100
            )
          .
          identifierName
           identifier
            then
         arguments
          (
          argument
           singleExpression
            anonymousFunction
             arrowFunctionParameters
              (
              formalParameterList
               formalParameterArg
                assignable
                 identifier
                  msg
              )
             =>
             arrowFunctionBody
              singleExpression
               singleExpression
                identifier
                 msgAfterTimeout
               arguments
                (
                argument
                 singleExpression
                  identifier
                   msg
                ,
                argument
                 singleExpression
                  literal
                   "Bar"
                ,
                argument
                 singleExpression
                  literal
                   numericLiteral
                    200
                )
          )
        .
        identifierName
         identifier
          then
       arguments
        (
        argument
         singleExpression
          anonymousFunction
           arrowFunctionParameters
            (
            formalParameterList
             formalParameterArg
              assignable
               identifier
                msg
            )
           =>
           arrowFunctionBody
            singleExpression
             objectLiteral
              {
              propertyAssignment
               singleExpression
                singleExpression
                 singleExpression
                  identifier
                   console
                 .
                 identifierName
                  identifier
                   log
                arguments
                 (
                 argument
                  singleExpression
                   literal
                    templateStringLiteral
                     `
                     templateStringAtom
                      d
                     templateStringAtom
                      o
                     templateStringAtom
                      n
                     templateStringAtom
                      e
                     templateStringAtom
                       
                     templateStringAtom
                      a
                     templateStringAtom
                      f
                     templateStringAtom
                      t
                     templateStringAtom
                      e
                     templateStringAtom
                      r
                     templateStringAtom
                       
                     templateStringAtom
                      3
                     templateStringAtom
                      0
                     templateStringAtom
                      0
                     templateStringAtom
                      m
                     templateStringAtom
                      s
                     templateStringAtom
                      :
                     templateStringAtom
                      ${
                      singleExpression
                       identifier
                        msg
                      }
                     `
                 )
              }
        )
     eos
  sourceElement
   statement
    functionDeclaration
     function
     identifier
      fetchAsync
     (
     formalParameterList
      formalParameterArg
       assignable
        identifier
         url
      ,
      formalParameterArg
       assignable
        identifier
         timeout
      ,
      formalParameterArg
       assignable
        identifier
         onData
      ,
      formalParameterArg
       assignable
        identifier
         onError
     )
     functionBody
      {
      }
  sourceElement
   statement
    variableStatement
     variableDeclarationList
      varModifier
       let_
        let
      variableDeclaration
       assignable
        identifier
         fetchPromised
       =
       singleExpression
        anonymousFunction
         arrowFunctionParameters
          (
          formalParameterList
           formalParameterArg
            assignable
             identifier
              url
           ,
           formalParameterArg
            assignable
             identifier
              timeout
          )
         =>
         arrowFunctionBody
          functionBody
           {
           sourceElements
            sourceElement
             statement
              returnStatement
               return
               expressionSequence
                singleExpression
                 new
                 identifier
                  Promise
                 arguments
                  (
                  argument
                   singleExpression
                    anonymousFunction
                     arrowFunctionParameters
                      (
                      formalParameterList
                       formalParameterArg
                        assignable
                         identifier
                          resolve
                       ,
                       formalParameterArg
                        assignable
                         identifier
                          reject
                      )
                     =>
                     arrowFunctionBody
                      singleExpression
                       objectLiteral
                        {
                        propertyAssignment
                         singleExpression
                          singleExpression
                           identifier
                            fetchAsync
                          arguments
                           (
                           argument
                            singleExpression
                             identifier
                              url
                           ,
                           argument
                            singleExpression
                             identifier
                              timeout
                           ,
                           argument
                            singleExpression
                             identifier
                              resolve
                           ,
                           argument
                            singleExpression
                             identifier
                              reject
                           )
                        }
                  )
               eos
           }
     eos
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         singleExpression
          singleExpression
           identifier
            Promise
          .
          identifierName
           identifier
            all
         arguments
          (
          argument
           singleExpression
            arrayLiteral
             [
             elementList
              arrayElement
               singleExpression
                singleExpression
                 identifier
                  fetchPromised
                arguments
                 (
                 argument
                  singleExpression
                   literal
                    "http://backend/foo.txt"
                 ,
                 argument
                  singleExpression
                   literal
                    numericLiteral
                     500
                 )
              ,
              arrayElement
               singleExpression
                singleExpression
                 identifier
                  fetchPromised
                arguments
                 (
                 argument
                  singleExpression
                   literal
                    "http://backend/bar.txt"
                 ,
                 argument
                  singleExpression
                   literal
                    numericLiteral
                     500
                 )
              ,
              arrayElement
               singleExpression
                singleExpression
                 identifier
                  fetchPromised
                arguments
                 (
                 argument
                  singleExpression
                   literal
                    "http://backend/baz.txt"
                 ,
                 argument
                  singleExpression
                   literal
                    numericLiteral
                     500
                 )
             ]
          )
        .
        identifierName
         identifier
          then
       arguments
        (
        argument
         singleExpression
          anonymousFunction
           arrowFunctionParameters
            (
            formalParameterList
             formalParameterArg
              assignable
               identifier
                data
            )
           =>
           arrowFunctionBody
            functionBody
             {
             sourceElements
              sourceElement
               statement
                variableStatement
                 variableDeclarationList
                  varModifier
                   let_
                    let
                  variableDeclaration
                   assignable
                    arrayLiteral
                     [
                     elementList
                      arrayElement
                       singleExpression
                        identifier
                         foo
                      ,
                      arrayElement
                       singleExpression
                        identifier
                         bar
                      ,
                      arrayElement
                       singleExpression
                        identifier
                         baz
                     ]
                   =
                   singleExpression
                    identifier
                     data
                 eos
              sourceElement
               statement
                expressionStatement
                 expressionSequence
                  singleExpression
                   singleExpression
                    singleExpression
                     identifier
                      console
                    .
                    identifierName
                     identifier
                      log
                   arguments
                    (
                    argument
                     singleExpression
                      literal
                       templateStringLiteral
                        `
                        templateStringAtom
                         s
                        templateStringAtom
                         u
                        templateStringAtom
                         c
                        templateStringAtom
                         c
                        templateStringAtom
                         e
                        templateStringAtom
                         s
                        templateStringAtom
                         s
                        templateStringAtom
                         :
                        templateStringAtom
                          
                        templateStringAtom
                         f
                        templateStringAtom
                         o
                        templateStringAtom
                         o
                        templateStringAtom
                         =
                        templateStringAtom
                         ${
                         singleExpression
                          identifier
                           foo
                         }
                        templateStringAtom
                          
                        templateStringAtom
                         b
                        templateStringAtom
                         a
                        templateStringAtom
                         r
                        templateStringAtom
                         =
                        templateStringAtom
                         ${
                         singleExpression
                          identifier
                           bar
                         }
                        templateStringAtom
                          
                        templateStringAtom
                         b
                        templateStringAtom
                         a
                        templateStringAtom
                         z
                        templateStringAtom
                         =
                        templateStringAtom
                         ${
                         singleExpression
                          identifier
                           baz
                         }
                        `
                    )
                 eos
             }
        ,
        argument
         singleExpression
          anonymousFunction
           arrowFunctionParameters
            (
            formalParameterList
             formalParameterArg
              assignable
               identifier
                err
            )
           =>
           arrowFunctionBody
            singleExpression
             objectLiteral
              {
              propertyAssignment
               singleExpression
                singleExpression
                 singleExpression
                  identifier
                   console
                 .
                 identifierName
                  identifier
                   log
                arguments
                 (
                 argument
                  singleExpression
                   literal
                    templateStringLiteral
                     `
                     templateStringAtom
                      e
                     templateStringAtom
                      r
                     templateStringAtom
                      r
                     templateStringAtom
                      o
                     templateStringAtom
                      r
                     templateStringAtom
                      :
                     templateStringAtom
                       
                     templateStringAtom
                      ${
                      singleExpression
                       identifier
                        err
                      }
                     `
                 )
              }
        )
     eos
      <EOF>
 <EOF>
