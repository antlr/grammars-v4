program
 sourceElements
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       literal
        "use strict"
     eos
      ;
  sourceElement
   statement
    variableStatement
     variableDeclarationList
      varModifier
       let_
        let
      variableDeclaration
       assignable
        identifier
         parser
       =
       singleExpression
        anonymousFunction
         arrowFunctionParameters
          (
          formalParameterList
           formalParameterArg
            assignable
             identifier
              input
           ,
           formalParameterArg
            assignable
             identifier
              match
          )
         =>
         arrowFunctionBody
          functionBody
           {
           sourceElements
            sourceElement
             statement
              iterationStatement
               for
               (
               variableDeclarationList
                varModifier
                 let_
                  let
                variableDeclaration
                 assignable
                  identifier
                   pos
                 =
                 singleExpression
                  literal
                   numericLiteral
                    0
                ,
                variableDeclaration
                 assignable
                  identifier
                   lastPos
                 =
                 singleExpression
                  singleExpression
                   identifier
                    input
                  .
                  identifierName
                   identifier
                    length
               ;
               expressionSequence
                singleExpression
                 singleExpression
                  identifier
                   pos
                 <
                 singleExpression
                  identifier
                   lastPos
               ;
               )
               statement
                block
                 {
                 statementList
                  statement
                   iterationStatement
                    for
                    (
                    variableDeclarationList
                     varModifier
                      let_
                       let
                     variableDeclaration
                      assignable
                       identifier
                        i
                      =
                      singleExpression
                       literal
                        numericLiteral
                         0
                    ;
                    expressionSequence
                     singleExpression
                      singleExpression
                       identifier
                        i
                      <
                      singleExpression
                       singleExpression
                        identifier
                         match
                       .
                       identifierName
                        identifier
                         length
                    ;
                    expressionSequence
                     singleExpression
                      singleExpression
                       identifier
                        i
                      ++
                    )
                    statement
                     block
                      {
                      statementList
                       statement
                        expressionStatement
                         expressionSequence
                          singleExpression
                           singleExpression
                            singleExpression
                             singleExpression
                              singleExpression
                               identifier
                                match
                              [
                              expressionSequence
                               singleExpression
                                identifier
                                 i
                              ]
                             .
                             identifierName
                              identifier
                               pattern
                            .
                            identifierName
                             identifier
                              lastIndex
                           =
                           singleExpression
                            identifier
                             pos
                         eos
                       statement
                        variableStatement
                         variableDeclarationList
                          varModifier
                           let_
                            let
                          variableDeclaration
                           assignable
                            identifier
                             found
                         eos
                       statement
                        ifStatement
                         if
                         (
                         expressionSequence
                          singleExpression
                           singleExpression
                            (
                            expressionSequence
                             singleExpression
                              singleExpression
                               identifier
                                found
                              =
                              singleExpression
                               singleExpression
                                singleExpression
                                 singleExpression
                                  singleExpression
                                   identifier
                                    match
                                  [
                                  expressionSequence
                                   singleExpression
                                    identifier
                                     i
                                  ]
                                 .
                                 identifierName
                                  identifier
                                   pattern
                                .
                                identifierName
                                 identifier
                                  exec
                               arguments
                                (
                                argument
                                 singleExpression
                                  identifier
                                   input
                                )
                            )
                           !==
                           singleExpression
                            literal
                             null
                         )
                         statement
                          block
                           {
                           statementList
                            statement
                             expressionStatement
                              expressionSequence
                               singleExpression
                                singleExpression
                                 singleExpression
                                  singleExpression
                                   identifier
                                    match
                                  [
                                  expressionSequence
                                   singleExpression
                                    identifier
                                     i
                                  ]
                                 .
                                 identifierName
                                  identifier
                                   action
                                arguments
                                 (
                                 argument
                                  singleExpression
                                   identifier
                                    found
                                 )
                              eos
                            statement
                             expressionStatement
                              expressionSequence
                               singleExpression
                                singleExpression
                                 identifier
                                  pos
                                =
                                singleExpression
                                 singleExpression
                                  singleExpression
                                   singleExpression
                                    identifier
                                     match
                                   [
                                   expressionSequence
                                    singleExpression
                                     identifier
                                      i
                                   ]
                                  .
                                  identifierName
                                   identifier
                                    pattern
                                 .
                                 identifierName
                                  identifier
                                   lastIndex
                              eos
                            statement
                             breakStatement
                              break
                              eos
                           }
                      }
                 }
           }
     eos
  sourceElement
   statement
    variableStatement
     variableDeclarationList
      varModifier
       let_
        let
      variableDeclaration
       assignable
        identifier
         report
       =
       singleExpression
        anonymousFunction
         arrowFunctionParameters
          (
          formalParameterList
           formalParameterArg
            assignable
             identifier
              match
          )
         =>
         arrowFunctionBody
          singleExpression
           objectLiteral
            {
            propertyAssignment
             singleExpression
              singleExpression
               singleExpression
                identifier
                 console
               .
               identifierName
                identifier
                 log
              arguments
               (
               argument
                singleExpression
                 singleExpression
                  singleExpression
                   identifier
                    JSON
                  .
                  identifierName
                   identifier
                    stringify
                 arguments
                  (
                  argument
                   singleExpression
                    identifier
                     match
                  )
               )
            }
     eos
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        identifier
         parser
       arguments
        (
        argument
         singleExpression
          literal
           "Foo 1 Bar 7 Baz 42"
        ,
        argument
         singleExpression
          arrayLiteral
           [
           elementList
            arrayElement
             singleExpression
              objectLiteral
               {
               propertyAssignment
                propertyName
                 identifierName
                  identifier
                   pattern
                :
                singleExpression
                 literal
                  /^Foo\s+(\d+)/y
               ,
               propertyAssignment
                propertyName
                 identifierName
                  identifier
                   action
                :
                singleExpression
                 anonymousFunction
                  arrowFunctionParameters
                   (
                   formalParameterList
                    formalParameterArg
                     assignable
                      identifier
                       match
                   )
                  =>
                  arrowFunctionBody
                   singleExpression
                    singleExpression
                     identifier
                      report
                    arguments
                     (
                     argument
                      singleExpression
                       identifier
                        match
                     )
               }
            ,
            arrayElement
             singleExpression
              objectLiteral
               {
               propertyAssignment
                propertyName
                 identifierName
                  identifier
                   pattern
                :
                singleExpression
                 literal
                  /^Bar\s+(\d+)/y
               ,
               propertyAssignment
                propertyName
                 identifierName
                  identifier
                   action
                :
                singleExpression
                 anonymousFunction
                  arrowFunctionParameters
                   (
                   formalParameterList
                    formalParameterArg
                     assignable
                      identifier
                       match
                   )
                  =>
                  arrowFunctionBody
                   singleExpression
                    singleExpression
                     identifier
                      report
                    arguments
                     (
                     argument
                      singleExpression
                       identifier
                        match
                     )
               }
            ,
            arrayElement
             singleExpression
              objectLiteral
               {
               propertyAssignment
                propertyName
                 identifierName
                  identifier
                   pattern
                :
                singleExpression
                 literal
                  /^Baz\s+(\d+)/y
               ,
               propertyAssignment
                propertyName
                 identifierName
                  identifier
                   action
                :
                singleExpression
                 anonymousFunction
                  arrowFunctionParameters
                   (
                   formalParameterList
                    formalParameterArg
                     assignable
                      identifier
                       match
                   )
                  =>
                  arrowFunctionBody
                   singleExpression
                    singleExpression
                     identifier
                      report
                    arguments
                     (
                     argument
                      singleExpression
                       identifier
                        match
                     )
               }
            ,
            arrayElement
             singleExpression
              objectLiteral
               {
               propertyAssignment
                propertyName
                 identifierName
                  identifier
                   pattern
                :
                singleExpression
                 literal
                  /^\s*/y
               ,
               propertyAssignment
                propertyName
                 identifierName
                  identifier
                   action
                :
                singleExpression
                 anonymousFunction
                  arrowFunctionParameters
                   (
                   formalParameterList
                    formalParameterArg
                     assignable
                      identifier
                       match
                   )
                  =>
                  arrowFunctionBody
                   singleExpression
                    objectLiteral
                     {
                     }
               }
           ]
        )
     eos
      <EOF>
 <EOF>
