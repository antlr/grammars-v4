program
 sourceElements
  sourceElement
   statement
    variableStatement
     variableDeclarationList
      varModifier
       var
      variableDeclaration
       assignable
        identifier
         e\u0065e
     eos
      ;
  sourceElement
   statement
    variableStatement
     variableDeclarationList
      varModifier
       var
      variableDeclaration
       assignable
        identifier
         e\u{0065}e
     eos
      ;
  sourceElement
   statement
    variableStatement
     variableDeclarationList
      varModifier
       var
      variableDeclaration
       assignable
        identifier
         Î 
     eos
      ;
  sourceElement
   statement
    variableStatement
     variableDeclarationList
      varModifier
       var
      variableDeclaration
       assignable
        identifier
         \u4e00
     eos
      ;
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       literal
        bigintLiteral
         0b0n
     eos
      ;
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       literal
        bigintLiteral
         12345n
     eos
      ;
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       literal
        bigintLiteral
         0x1234n
     eos
      ;
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       literal
        numericLiteral
         12_123
     eos
      ;
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       literal
        numericLiteral
         1.123_3456e-7_8
     eos
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       literal
        bigintLiteral
         0b0_1n
     eos
      ;
  sourceElement
   statement
    tryStatement
     try
     block
      {
      }
     catchProduction
      catch
      block
       {
       }
     finallyProduction
      finally
      block
       {
       }
  sourceElement
   statement
    tryStatement
     try
     block
      {
      }
     finallyProduction
      finally
      block
       {
       }
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         literal
          numericLiteral
           2
        **
        singleExpression
         literal
          numericLiteral
           3
       *
       singleExpression
        literal
         numericLiteral
          5
     eos
      ;
  sourceElement
   statement
    functionDeclaration
     async
     function
     identifier
      process
     (
     formalParameterList
      formalParameterArg
       assignable
        identifier
         array
     )
     functionBody
      {
      sourceElements
       sourceElement
        statement
         iterationStatement
          for
          await
          (
          variableDeclarationList
           varModifier
            let_
             let
           variableDeclaration
            assignable
             identifier
              i
          of
          expressionSequence
           singleExpression
            identifier
             array
          )
          statement
           block
            {
            statementList
             statement
              expressionStatement
               expressionSequence
                singleExpression
                 singleExpression
                  identifier
                   doSomething
                 arguments
                  (
                  argument
                   singleExpression
                    identifier
                     i
                  )
               eos
                ;
            }
      }
  sourceElement
   statement
    variableStatement
     variableDeclarationList
      varModifier
       const
      variableDeclaration
       assignable
        objectLiteral
         {
         propertyAssignment
          singleExpression
           identifier
            a
         ,
         propertyAssignment
          ...
          singleExpression
           identifier
            c
         }
       =
       singleExpression
        identifier
         obj
     eos
      ;
  sourceElement
   statement
    variableStatement
     variableDeclarationList
      varModifier
       const
      variableDeclaration
       assignable
        identifier
         obj2
       =
       singleExpression
        objectLiteral
         {
         propertyAssignment
          ...
          singleExpression
           identifier
            obj1
         ,
         propertyAssignment
          propertyName
           identifierName
            identifier
             z
          :
          singleExpression
           literal
            numericLiteral
             26
         ,
         propertyAssignment
          ...
          singleExpression
           identifier
            obj2
         }
     eos
      ;
  sourceElement
   statement
    variableStatement
     variableDeclarationList
      varModifier
       const
      variableDeclaration
       assignable
        arrayLiteral
         [
         elementList
          arrayElement
           singleExpression
            identifier
             aa
          ,
          arrayElement
           singleExpression
            identifier
             b
          ,
          arrayElement
           ...
           singleExpression
            identifier
             ca
         ]
       =
       singleExpression
        identifier
         aarr
     eos
      ;
  sourceElement
   statement
    variableStatement
     variableDeclarationList
      varModifier
       const
      variableDeclaration
       assignable
        identifier
         v
       =
       singleExpression
        arrayLiteral
         [
         elementList
          arrayElement
           singleExpression
            identifier
             asdf
          ,
          arrayElement
           ...
           singleExpression
            identifier
             gh
          ,
          arrayElement
           singleExpression
            identifier
             jk
         ]
     eos
      ;
  sourceElement
   statement
    variableStatement
     variableDeclarationList
      varModifier
       var
      variableDeclaration
       assignable
        identifier
         f
       =
       singleExpression
        arrayLiteral
         [
         elementList
          ,
          ,
          arrayElement
           singleExpression
            identifier
             c
          ,
          arrayElement
           ...
           singleExpression
            identifier
             a
          ,
          arrayElement
           singleExpression
            identifier
             b
          ,
          ,
         ]
     eos
      ;
  sourceElement
   statement
    variableStatement
     variableDeclarationList
      varModifier
       var
      variableDeclaration
       assignable
        identifier
         g
       =
       singleExpression
        arrayLiteral
         [
         elementList
          ,
          ,
         ]
     eos
      ;
  sourceElement
   statement
    functionDeclaration
     function
     identifier
      f
     (
     formalParameterList
      formalParameterArg
       assignable
        arrayLiteral
         [
         elementList
          arrayElement
           singleExpression
            identifier
             asdfg
         ]
       =
       singleExpression
        literal
         numericLiteral
          12345
     )
     functionBody
      {
      }
  sourceElement
   statement
    variableStatement
     variableDeclarationList
      varModifier
       const
      variableDeclaration
       assignable
        identifier
         a
       =
       singleExpression
        objectLiteral
         {
         propertyAssignment
          propertyName
           identifierName
            identifier
             duration
          :
          singleExpression
           literal
            numericLiteral
             50
         }
     eos
      ;
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         identifier
          a
        .
        identifierName
         identifier
          duration
       assignmentOperator
        ??=
       singleExpression
        literal
         numericLiteral
          10
     eos
      ;
 <EOF>
