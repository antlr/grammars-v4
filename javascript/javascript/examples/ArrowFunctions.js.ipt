program
 sourceElements
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       literal
        "use strict"
     eos
      ;
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        identifier
         odds
       =
       singleExpression
        singleExpression
         singleExpression
          identifier
           evens
         .
         identifierName
          identifier
           map
        arguments
         (
         argument
          singleExpression
           anonymousFunction
            arrowFunctionParameters
             propertyName
              identifierName
               identifier
                v
            =>
            arrowFunctionBody
             singleExpression
              singleExpression
               identifier
                v
              +
              singleExpression
               literal
                numericLiteral
                 1
         )
     eos
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        identifier
         pairs
       =
       singleExpression
        singleExpression
         singleExpression
          identifier
           evens
         .
         identifierName
          identifier
           map
        arguments
         (
         argument
          singleExpression
           anonymousFunction
            arrowFunctionParameters
             propertyName
              identifierName
               identifier
                v
            =>
            arrowFunctionBody
             singleExpression
              (
              expressionSequence
               singleExpression
                objectLiteral
                 {
                 propertyAssignment
                  propertyName
                   identifierName
                    identifier
                     even
                  :
                  singleExpression
                   identifier
                    v
                 ,
                 propertyAssignment
                  propertyName
                   identifierName
                    identifier
                     odd
                  :
                  singleExpression
                   singleExpression
                    identifier
                     v
                   +
                   singleExpression
                    literal
                     numericLiteral
                      1
                 }
              )
         )
     eos
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        identifier
         nums
       =
       singleExpression
        singleExpression
         singleExpression
          identifier
           evens
         .
         identifierName
          identifier
           map
        arguments
         (
         argument
          singleExpression
           anonymousFunction
            arrowFunctionParameters
             (
             formalParameterList
              formalParameterArg
               assignable
                identifier
                 v
              ,
              formalParameterArg
               assignable
                identifier
                 i
             )
            =>
            arrowFunctionBody
             singleExpression
              singleExpression
               identifier
                v
              +
              singleExpression
               identifier
                i
         )
     eos
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         identifier
          nums
        .
        identifierName
         identifier
          forEach
       arguments
        (
        argument
         singleExpression
          anonymousFunction
           arrowFunctionParameters
            propertyName
             identifierName
              identifier
               v
           =>
           arrowFunctionBody
            functionBody
             {
             sourceElements
              sourceElement
               statement
                ifStatement
                 if
                 (
                 expressionSequence
                  singleExpression
                   singleExpression
                    singleExpression
                     identifier
                      v
                    %
                    singleExpression
                     literal
                      numericLiteral
                       5
                   ===
                   singleExpression
                    literal
                     numericLiteral
                      0
                 )
                 statement
                  expressionStatement
                   expressionSequence
                    singleExpression
                     singleExpression
                      singleExpression
                       identifier
                        fives
                      .
                      identifierName
                       identifier
                        push
                     arguments
                      (
                      argument
                       singleExpression
                        identifier
                         v
                      )
                   eos
             }
        )
     eos
  sourceElement
   statement
    expressionStatement
     expressionSequence
      singleExpression
       singleExpression
        singleExpression
         singleExpression
          this
         .
         identifierName
          identifier
           nums
        .
        identifierName
         identifier
          forEach
       arguments
        (
        argument
         singleExpression
          anonymousFunction
           arrowFunctionParameters
            (
            formalParameterList
             formalParameterArg
              assignable
               identifier
                v
            )
           =>
           arrowFunctionBody
            functionBody
             {
             sourceElements
              sourceElement
               statement
                ifStatement
                 if
                 (
                 expressionSequence
                  singleExpression
                   singleExpression
                    singleExpression
                     identifier
                      v
                    %
                    singleExpression
                     literal
                      numericLiteral
                       5
                   ===
                   singleExpression
                    literal
                     numericLiteral
                      0
                 )
                 statement
                  expressionStatement
                   expressionSequence
                    singleExpression
                     singleExpression
                      singleExpression
                       singleExpression
                        this
                       .
                       identifierName
                        identifier
                         fives
                      .
                      identifierName
                       identifier
                        push
                     arguments
                      (
                      argument
                       singleExpression
                        identifier
                         v
                      )
                   eos
             }
        )
     eos
      <EOF>
 <EOF>
