script
 fileAtom
  classDefinition
   class
   id
    Call
   {
   classBody
    classBodyTpe
     static
    classStatement
     classOpGetter
      operatorGetter
       id
        noParams
      block
       {
       statement
        expression
         atomExpression
          call
           id
            System
           .
           call
            id
             print
            callInvoke
             (
             enumeration
              expression
               atomExpression
                stringE
                 "noParams"
             )
       }
    classBodyTpe
     static
    classStatement
     function
      id
       zero
      arguments
       (
       )
      block
       {
       statement
        expression
         atomExpression
          call
           id
            System
           .
           call
            id
             print
            callInvoke
             (
             enumeration
              expression
               atomExpression
                stringE
                 "zero"
             )
       }
    classBodyTpe
     static
    classStatement
     function
      id
       one
      arguments
       (
       id
        one
       )
      block
       {
       statement
        expression
         atomExpression
          call
           id
            System
           .
           call
            id
             print
            callInvoke
             (
             enumeration
              expression
               atomExpression
                stringE
                 "one %(one)"
             )
       }
    classBodyTpe
     static
    classStatement
     function
      id
       two
      arguments
       (
       id
        one
       ,
       id
        two
       )
      block
       {
       statement
        ifSt
         ifCond
          if
          (
          expression
           expression
            atomExpression
             call
              id
               two
           compoundExpression
            is
            expression
             expression
              atomExpression
               call
                id
                 String
             compoundExpression
              logic
               andLogic
                atomLogic
                 &&
                 expression
                  atomExpression
                   call
                    id
                     two
                    .
                    call
                     id
                      bytes
                     .
                     call
                      id
                       contains
                      callInvoke
                       (
                       enumeration
                        expression
                         atomExpression
                          numE
                           0
                       )
          )
         statement
          block
           {
           statement
            assignment
             expression
              atomExpression
               call
                id
                 two
             assignOp
              =
             expression
              atomExpression
               call
                id
                 two
                .
                call
                 id
                  bytes
                 .
                 call
                  id
                   toList
           }
       statement
        expression
         atomExpression
          call
           id
            System
           .
           call
            id
             print
            callInvoke
             (
             enumeration
              expression
               atomExpression
                stringE
                 "two %(one) %(two)"
             )
       }
    classBodyTpe
     static
    classStatement
     function
      id
       getValue
      arguments
       (
       )
      block
       {
       statement
        expression
         atomExpression
          listInit
           [
           enumeration
            expression
             atomExpression
              stringE
               "a"
            ,
            expression
             atomExpression
              stringE
               "b"
           ]
       }
    classBodyTpe
     static
    classStatement
     classOpGetter
      operatorGetter
       -
      block
       {
       statement
        expression
         atomExpression
          call
           id
            System
           .
           call
            id
             print
            callInvoke
             (
             enumeration
              expression
               atomExpression
                stringE
                 "unary"
             )
       }
    classBodyTpe
     static
    classStatement
     classOpSetter
      operatorSetter
       -
      oneArgument
       (
       id
        arg
       )
      block
       {
       statement
        expression
         atomExpression
          call
           id
            System
           .
           call
            id
             print
            callInvoke
             (
             enumeration
              expression
               atomExpression
                stringE
                 "binary %(arg)"
             )
       }
    classBodyTpe
     static
    classStatement
     classSubscriptGet
      subscript
       [
       enumeration
        expression
         atomExpression
          call
           id
            one
        ,
        expression
         atomExpression
          call
           id
            two
       ]
      block
       {
       statement
        expression
         atomExpression
          call
           id
            System
           .
           call
            id
             print
            callInvoke
             (
             enumeration
              expression
               atomExpression
                stringE
                 "subscript %(one) %(two)"
             )
       }
    classBodyTpe
     static
    classStatement
     classSubscriptSet
      subscript
       [
       enumeration
        expression
         atomExpression
          call
           id
            one
        ,
        expression
         atomExpression
          call
           id
            two
       ]
      =
      oneArgument
       (
       id
        three
       )
      block
       {
       statement
        expression
         atomExpression
          call
           id
            System
           .
           call
            id
             print
            callInvoke
             (
             enumeration
              expression
               atomExpression
                stringE
                 "subscript set %(one) %(two) %(three)"
             )
       }
   }
 <EOF>
