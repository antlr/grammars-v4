script
 fileAtom
  classDefinition
   class
   id
    Strength
   {
   classBody
    classStatement
     classConstructor
      construct
      id
       new
      arguments
       (
       id
        value
       ,
       id
        name
       )
      block
       {
       statement
        assignment
         expression
          atomExpression
           call
            id
             _value
         assignOp
          =
         expression
          atomExpression
           call
            id
             value
       statement
        assignment
         expression
          atomExpression
           call
            id
             _name
         assignOp
          =
         expression
          atomExpression
           call
            id
             name
       }
    classStatement
     classOpGetter
      operatorGetter
       id
        value
      block
       {
       statement
        expression
         atomExpression
          call
           id
            _value
       }
    classStatement
     classOpGetter
      operatorGetter
       id
        name
      block
       {
       statement
        expression
         atomExpression
          call
           id
            _name
       }
    classStatement
     classOpGetter
      operatorGetter
       id
        nextWeaker
      block
       {
       statement
        expression
         atomExpression
          call
           id
            ORDERED
       statement
        expression
         atomExpression
          listInit
           [
           enumeration
            expression
             atomExpression
              call
               id
                _value
           ]
       }
    classBodyTpe
     static
    classStatement
     function
      id
       stronger
      arguments
       (
       id
        s1
       ,
       id
        s2
       )
      block
       {
       statement
        expression
         expression
          atomExpression
           call
            id
             s1
            .
            call
             id
              value
         compoundExpression
          logic
           andLogic
            atomLogic
             logicOp
              <
             expression
              atomExpression
               call
                id
                 s2
                .
                call
                 id
                  value
       }
    classBodyTpe
     static
    classStatement
     function
      id
       weaker
      arguments
       (
       id
        s1
       ,
       id
        s2
       )
      block
       {
       statement
        expression
         expression
          atomExpression
           call
            id
             s1
            .
            call
             id
              value
         compoundExpression
          logic
           andLogic
            atomLogic
             logicOp
              >
             expression
              atomExpression
               call
                id
                 s2
                .
                call
                 id
                  value
       }
    classBodyTpe
     static
    classStatement
     function
      id
       weakest
      arguments
       (
       id
        s1
       ,
       id
        s2
       )
      block
       {
       statement
        expression
         expression
          atomExpression
           call
            id
             Strength
            .
            call
             id
              weaker
             callInvoke
              (
              enumeration
               expression
                atomExpression
                 call
                  id
                   s1
               ,
               expression
                atomExpression
                 call
                  id
                   s2
              )
         compoundExpression
          elvis
           ?
           expression
            atomExpression
             call
              id
               s1
           :
           expression
            atomExpression
             call
              id
               s2
       }
    classBodyTpe
     static
    classStatement
     function
      id
       strongest
      arguments
       (
       id
        s1
       ,
       id
        s2
       )
      block
       {
       statement
        expression
         expression
          atomExpression
           call
            id
             Strength
            .
            call
             id
              stronger
             callInvoke
              (
              enumeration
               expression
                atomExpression
                 call
                  id
                   s1
               ,
               expression
                atomExpression
                 call
                  id
                   s2
              )
         compoundExpression
          elvis
           ?
           expression
            atomExpression
             call
              id
               s1
           :
           expression
            atomExpression
             call
              id
               s2
       }
   }
 fileAtom
  statement
   assignment
    var
    expression
     atomExpression
      call
       id
        REQUIRED
    assignOp
     =
    expression
     atomExpression
      call
       id
        Strength
       .
       call
        id
         new
        callInvoke
         (
         enumeration
          expression
           atomExpression
            numE
             0
          ,
          expression
           atomExpression
            stringE
             "required"
         )
 fileAtom
  statement
   assignment
    var
    expression
     atomExpression
      call
       id
        STRONG_REFERRED
    assignOp
     =
    expression
     atomExpression
      call
       id
        Strength
       .
       call
        id
         new
        callInvoke
         (
         enumeration
          expression
           atomExpression
            numE
             1
          ,
          expression
           atomExpression
            stringE
             "strongPreferred"
         )
 fileAtom
  statement
   assignment
    var
    expression
     atomExpression
      call
       id
        PREFERRED
    assignOp
     =
    expression
     atomExpression
      call
       id
        Strength
       .
       call
        id
         new
        callInvoke
         (
         enumeration
          expression
           atomExpression
            numE
             2
          ,
          expression
           atomExpression
            stringE
             "preferred"
         )
 fileAtom
  statement
   assignment
    var
    expression
     atomExpression
      call
       id
        STRONG_DEFAULT
    assignOp
     =
    expression
     atomExpression
      call
       id
        Strength
       .
       call
        id
         new
        callInvoke
         (
         enumeration
          expression
           atomExpression
            numE
             3
          ,
          expression
           atomExpression
            stringE
             "strongDefault"
         )
 fileAtom
  statement
   assignment
    var
    expression
     atomExpression
      call
       id
        NORMAL
    assignOp
     =
    expression
     atomExpression
      call
       id
        Strength
       .
       call
        id
         new
        callInvoke
         (
         enumeration
          expression
           atomExpression
            numE
             4
          ,
          expression
           atomExpression
            stringE
             "normal"
         )
 fileAtom
  statement
   assignment
    var
    expression
     atomExpression
      call
       id
        WEAK_DEFAULT
    assignOp
     =
    expression
     atomExpression
      call
       id
        Strength
       .
       call
        id
         new
        callInvoke
         (
         enumeration
          expression
           atomExpression
            numE
             5
          ,
          expression
           atomExpression
            stringE
             "weakDefault"
         )
 fileAtom
  statement
   assignment
    var
    expression
     atomExpression
      call
       id
        WEAKEST
    assignOp
     =
    expression
     atomExpression
      call
       id
        Strength
       .
       call
        id
         new
        callInvoke
         (
         enumeration
          expression
           atomExpression
            numE
             6
          ,
          expression
           atomExpression
            stringE
             "weakest"
         )
 fileAtom
  statement
   assignment
    var
    expression
     atomExpression
      call
       id
        ORDERED
    assignOp
     =
    expression
     atomExpression
      listInit
       [
       enumeration
        expression
         atomExpression
          call
           id
            WEAKEST
        ,
        expression
         atomExpression
          call
           id
            WEAK_DEFAULT
        ,
        expression
         atomExpression
          call
           id
            NORMAL
        ,
        expression
         atomExpression
          call
           id
            STRONG_DEFAULT
        ,
        expression
         atomExpression
          call
           id
            PREFERRED
        ,
        expression
         atomExpression
          call
           id
            STRONG_REFERRED
       ]
 fileAtom
  statement
   assignmentNull
    var
    id
     ThePlanner
 fileAtom
  classDefinition
   class
   id
    Constraint
   {
   classBody
    classStatement
     classConstructor
      construct
      id
       new
      arguments
       (
       id
        strength
       )
      block
       {
       statement
        assignment
         expression
          atomExpression
           call
            id
             _strength
         assignOp
          =
         expression
          atomExpression
           call
            id
             strength
       }
    classStatement
     classOpGetter
      operatorGetter
       id
        strength
      block
       {
       statement
        expression
         atomExpression
          call
           id
            _strength
       }
    classStatement
     function
      id
       addConstraint
      arguments
       (
       )
      block
       {
       statement
        expression
         atomExpression
          call
           id
            addToGraph
           callInvoke
            (
            )
       statement
        expression
         atomExpression
          call
           id
            ThePlanner
           .
           call
            id
             incrementalAdd
            callInvoke
             (
             enumeration
              expression
               atomExpression
                call
                 id
                  this
             )
       }
    classStatement
     function
      id
       satisfy
      arguments
       (
       id
        mark
       )
      block
       {
       statement
        expression
         atomExpression
          call
           id
            chooseMethod
           callInvoke
            (
            enumeration
             expression
              atomExpression
               call
                id
                 mark
            )
       statement
        ifSt
         ifCond
          if
          (
          expression
           !
           expression
            atomExpression
             call
              id
               isSatisfied
          )
         statement
          block
           {
           statement
            ifSt
             ifCond
              if
              (
              expression
               expression
                atomExpression
                 call
                  id
                   _strength
               compoundExpression
                logic
                 andLogic
                  atomLogic
                   logicOp
                    ==
                   expression
                    atomExpression
                     call
                      id
                       REQUIRED
              )
             statement
              block
               {
               statement
                expression
                 atomExpression
                  call
                   id
                    System
                   .
                   call
                    id
                     print
                    callInvoke
                     (
                     enumeration
                      expression
                       atomExpression
                        stringE
                         "Could not satisfy a required constraint!"
                     )
               }
           statement
            returnSt
             return
             expression
              atomExpression
               nullE
                null
           }
       statement
        expression
         atomExpression
          call
           id
            markInputs
           callInvoke
            (
            enumeration
             expression
              atomExpression
               call
                id
                 mark
            )
       statement
        assignment
         var
         expression
          atomExpression
           call
            id
             out
         assignOp
          =
         expression
          atomExpression
           call
            id
             output
       statement
        assignment
         var
         expression
          atomExpression
           call
            id
             overridden
         assignOp
          =
         expression
          atomExpression
           call
            id
             out
            .
            call
             id
              determinedBy
       statement
        ifSt
         ifCond
          if
          (
          expression
           expression
            atomExpression
             call
              id
               overridden
           compoundExpression
            logic
             andLogic
              atomLogic
               logicOp
                !=
               expression
                atomExpression
                 nullE
                  null
          )
         statement
          expression
           atomExpression
            call
             id
              overridden
             .
             call
              id
               markUnsatisfied
              callInvoke
               (
               )
       statement
        assignment
         expression
          atomExpression
           call
            id
             out
            .
            call
             id
              determinedBy
         assignOp
          =
         expression
          atomExpression
           call
            id
             this
       statement
        ifSt
         ifCond
          if
          (
          expression
           !
           expression
            atomExpression
             call
              id
               ThePlanner
              .
              call
               id
                addPropagate
               callInvoke
                (
                enumeration
                 expression
                  atomExpression
                   call
                    id
                     this
                 ,
                 expression
                  atomExpression
                   call
                    id
                     mark
                )
          )
         statement
          expression
           atomExpression
            call
             id
              System
             .
             call
              id
               print
              callInvoke
               (
               enumeration
                expression
                 atomExpression
                  stringE
                   "Cycle encountered"
               )
       statement
        assignment
         expression
          atomExpression
           call
            id
             out
            .
            call
             id
              mark
         assignOp
          =
         expression
          atomExpression
           call
            id
             mark
       statement
        returnSt
         return
         expression
          atomExpression
           call
            id
             overridden
       }
    classStatement
     function
      id
       destroyConstraint
      arguments
       (
       )
      block
       {
       statement
        ifSt
         ifCond
          if
          (
          expression
           atomExpression
            call
             id
              isSatisfied
          )
         statement
          expression
           atomExpression
            call
             id
              ThePlanner
             .
             call
              id
               incrementalRemove
              callInvoke
               (
               enumeration
                expression
                 atomExpression
                  call
                   id
                    this
               )
       statement
        expression
         atomExpression
          call
           id
            removeFromGraph
           callInvoke
            (
            )
       }
    classStatement
     classOpGetter
      operatorGetter
       id
        isInput
      block
       {
       statement
        expression
         atomExpression
          boolE
           false
       }
   }
 fileAtom
  classDefinition
   class
   id
    UnaryConstraint
   inheritance
    is
    id
     Constraint
   {
   classBody
    classStatement
     classConstructor
      construct
      id
       new
      arguments
       (
       id
        myOutput
       ,
       id
        strength
       )
      block
       {
       statement
        expression
         atomExpression
          call
           id
            super
           callInvoke
            (
            enumeration
             expression
              atomExpression
               call
                id
                 strength
            )
       statement
        assignment
         expression
          atomExpression
           call
            id
             _satisfied
         assignOp
          =
         expression
          atomExpression
           boolE
            false
       statement
        assignment
         expression
          atomExpression
           call
            id
             _myOutput
         assignOp
          =
         expression
          atomExpression
           call
            id
             myOutput
       statement
        expression
         atomExpression
          call
           id
            addConstraint
           callInvoke
            (
            )
       }
    classStatement
     function
      id
       addToGraph
      arguments
       (
       )
      block
       {
       statement
        expression
         atomExpression
          call
           id
            _myOutput
           .
           call
            id
             addConstraint
            callInvoke
             (
             enumeration
              expression
               atomExpression
                call
                 id
                  this
             )
       statement
        assignment
         expression
          atomExpression
           call
            id
             _satisfied
         assignOp
          =
         expression
          atomExpression
           boolE
            false
       }
    classStatement
     function
      id
       chooseMethod
      arguments
       (
       id
        mark
       )
      block
       {
       statement
        assignment
         expression
          atomExpression
           call
            id
             _satisfied
         assignOp
          =
         expression
          expression
           (
           expression
            expression
             atomExpression
              call
               id
                _myOutput
               .
               call
                id
                 mark
            compoundExpression
             logic
              andLogic
               atomLogic
                logicOp
                 !=
                expression
                 atomExpression
                  call
                   id
                    mark
           )
          compoundExpression
           logic
            andLogic
             atomLogic
              &&
              expression
               atomExpression
                call
                 id
                  Strength
                 .
                 call
                  id
                   stronger
                  callInvoke
                   (
                   enumeration
                    expression
                     atomExpression
                      call
                       id
                        strength
                    ,
                    expression
                     atomExpression
                      call
                       id
                        _myOutput
                       .
                       call
                        id
                         walkStrength
                   )
       }
    classStatement
     classOpGetter
      operatorGetter
       id
        isSatisfied
      block
       {
       statement
        expression
         atomExpression
          call
           id
            _satisfied
       }
    classStatement
     function
      id
       markInputs
      arguments
       (
       id
        mark
       )
      block
       {
       }
    classStatement
     classOpGetter
      operatorGetter
       id
        output
      block
       {
       statement
        expression
         atomExpression
          call
           id
            _myOutput
       }
    classStatement
     function
      id
       recalculate
      arguments
       (
       )
      block
       {
       statement
        assignment
         expression
          atomExpression
           call
            id
             _myOutput
            .
            call
             id
              walkStrength
         assignOp
          =
         expression
          atomExpression
           call
            id
             strength
       statement
        assignment
         expression
          atomExpression
           call
            id
             _myOutput
            .
            call
             id
              stay
         assignOp
          =
         expression
          !
          expression
           atomExpression
            call
             id
              isInput
       statement
        ifSt
         ifCond
          if
          (
          expression
           atomExpression
            call
             id
              _myOutput
             .
             call
              id
               stay
          )
         statement
          expression
           atomExpression
            call
             id
              execute
             callInvoke
              (
              )
       }
    classStatement
     function
      id
       markUnsatisfied
      arguments
       (
       )
      block
       {
       statement
        assignment
         expression
          atomExpression
           call
            id
             _satisfied
         assignOp
          =
         expression
          atomExpression
           boolE
            false
       }
    classStatement
     function
      id
       inputsKnown
      arguments
       (
       id
        mark
       )
      block
       {
       statement
        expression
         atomExpression
          boolE
           true
       }
    classStatement
     function
      id
       removeFromGraph
      arguments
       (
       )
      block
       {
       statement
        ifSt
         ifCond
          if
          (
          expression
           expression
            atomExpression
             call
              id
               _myOutput
           compoundExpression
            logic
             andLogic
              atomLogic
               logicOp
                !=
               expression
                atomExpression
                 nullE
                  null
          )
         statement
          expression
           atomExpression
            call
             id
              _myOutput
             .
             call
              id
               removeConstraint
              callInvoke
               (
               enumeration
                expression
                 atomExpression
                  call
                   id
                    this
               )
       statement
        assignment
         expression
          atomExpression
           call
            id
             _satisfied
         assignOp
          =
         expression
          atomExpression
           boolE
            false
       }
   }
 fileAtom
  classDefinition
   class
   id
    StayConstraint
   inheritance
    is
    id
     UnaryConstraint
   {
   classBody
    classStatement
     classConstructor
      construct
      id
       new
      arguments
       (
       id
        variable
       ,
       id
        strength
       )
      block
       {
       statement
        expression
         atomExpression
          call
           id
            super
           callInvoke
            (
            enumeration
             expression
              atomExpression
               call
                id
                 variable
             ,
             expression
              atomExpression
               call
                id
                 strength
            )
       }
    classStatement
     function
      id
       execute
      arguments
       (
       )
      block
       {
       }
   }
 fileAtom
  classDefinition
   class
   id
    EditConstraint
   inheritance
    is
    id
     UnaryConstraint
   {
   classBody
    classStatement
     classConstructor
      construct
      id
       new
      arguments
       (
       id
        variable
       ,
       id
        strength
       )
      block
       {
       statement
        expression
         atomExpression
          call
           id
            super
           callInvoke
            (
            enumeration
             expression
              atomExpression
               call
                id
                 variable
             ,
             expression
              atomExpression
               call
                id
                 strength
            )
       }
    classStatement
     classOpGetter
      operatorGetter
       id
        isInput
      block
       {
       statement
        expression
         atomExpression
          boolE
           true
       }
    classStatement
     function
      id
       execute
      arguments
       (
       )
      block
       {
       }
   }
 fileAtom
  statement
   assignment
    var
    expression
     atomExpression
      call
       id
        NONE
    assignOp
     =
    expression
     atomExpression
      numE
       1
 fileAtom
  statement
   assignment
    var
    expression
     atomExpression
      call
       id
        FORWARD
    assignOp
     =
    expression
     atomExpression
      numE
       2
 fileAtom
  statement
   assignment
    var
    expression
     atomExpression
      call
       id
        BACKWARD
    assignOp
     =
    expression
     atomExpression
      numE
       0
 fileAtom
  classDefinition
   class
   id
    BinaryConstraint
   inheritance
    is
    id
     Constraint
   {
   classBody
    classStatement
     classConstructor
      construct
      id
       new
      arguments
       (
       id
        v1
       ,
       id
        v2
       ,
       id
        strength
       )
      block
       {
       statement
        expression
         atomExpression
          call
           id
            super
           callInvoke
            (
            enumeration
             expression
              atomExpression
               call
                id
                 strength
            )
       statement
        assignment
         expression
          atomExpression
           call
            id
             _v1
         assignOp
          =
         expression
          atomExpression
           call
            id
             v1
       statement
        assignment
         expression
          atomExpression
           call
            id
             _v2
         assignOp
          =
         expression
          atomExpression
           call
            id
             v2
       statement
        assignment
         expression
          atomExpression
           call
            id
             _direction
         assignOp
          =
         expression
          atomExpression
           call
            id
             NONE
       statement
        expression
         atomExpression
          call
           id
            addConstraint
           callInvoke
            (
            )
       }
    classStatement
     classOpGetter
      operatorGetter
       id
        direction
      block
       {
       statement
        expression
         atomExpression
          call
           id
            _direction
       }
    classStatement
     classOpGetter
      operatorGetter
       id
        v1
      block
       {
       statement
        expression
         atomExpression
          call
           id
            _v1
       }
    classStatement
     classOpGetter
      operatorGetter
       id
        v2
      block
       {
       statement
        expression
         atomExpression
          call
           id
            _v2
       }
    classStatement
     function
      id
       chooseMethod
      arguments
       (
       id
        mark
       )
      block
       {
       statement
        ifSt
         ifCond
          if
          (
          expression
           expression
            atomExpression
             call
              id
               _v1
              .
              call
               id
                mark
           compoundExpression
            logic
             andLogic
              atomLogic
               logicOp
                ==
               expression
                atomExpression
                 call
                  id
                   mark
          )
         statement
          block
           {
           statement
            ifSt
             ifCond
              if
              (
              expression
               expression
                atomExpression
                 call
                  id
                   _v2
                  .
                  call
                   id
                    mark
               compoundExpression
                logic
                 andLogic
                  atomLogic
                   logicOp
                    !=
                   expression
                    expression
                     atomExpression
                      call
                       id
                        mark
                    compoundExpression
                     logic
                      andLogic
                       atomLogic
                        &&
                        expression
                         atomExpression
                          call
                           id
                            Strength
                           .
                           call
                            id
                             stronger
                            callInvoke
                             (
                             enumeration
                              expression
                               atomExpression
                                call
                                 id
                                  strength
                              ,
                              expression
                               atomExpression
                                call
                                 id
                                  _v2
                                 .
                                 call
                                  id
                                   walkStrength
                             )
              )
             statement
              block
               {
               statement
                assignment
                 expression
                  atomExpression
                   call
                    id
                     _direction
                 assignOp
                  =
                 expression
                  atomExpression
                   call
                    id
                     FORWARD
               }
             elseSt
              else
              statement
               block
                {
                statement
                 assignment
                  expression
                   atomExpression
                    call
                     id
                      _direction
                  assignOp
                   =
                  expression
                   atomExpression
                    call
                     id
                      NONE
                }
           }
       statement
        ifSt
         ifCond
          if
          (
          expression
           expression
            atomExpression
             call
              id
               _v2
              .
              call
               id
                mark
           compoundExpression
            logic
             andLogic
              atomLogic
               logicOp
                ==
               expression
                atomExpression
                 call
                  id
                   mark
          )
         statement
          block
           {
           statement
            ifSt
             ifCond
              if
              (
              expression
               expression
                atomExpression
                 call
                  id
                   _v1
                  .
                  call
                   id
                    mark
               compoundExpression
                logic
                 andLogic
                  atomLogic
                   logicOp
                    !=
                   expression
                    expression
                     atomExpression
                      call
                       id
                        mark
                    compoundExpression
                     logic
                      andLogic
                       atomLogic
                        &&
                        expression
                         atomExpression
                          call
                           id
                            Strength
                           .
                           call
                            id
                             stronger
                            callInvoke
                             (
                             enumeration
                              expression
                               atomExpression
                                call
                                 id
                                  strength
                              ,
                              expression
                               atomExpression
                                call
                                 id
                                  _v1
                                 .
                                 call
                                  id
                                   walkStrength
                             )
              )
             statement
              block
               {
               statement
                assignment
                 expression
                  atomExpression
                   call
                    id
                     _direction
                 assignOp
                  =
                 expression
                  atomExpression
                   call
                    id
                     BACKWARD
               }
             elseSt
              else
              statement
               block
                {
                statement
                 assignment
                  expression
                   atomExpression
                    call
                     id
                      _direction
                  assignOp
                   =
                  expression
                   atomExpression
                    call
                     id
                      NONE
                }
           }
       statement
        ifSt
         ifCond
          if
          (
          expression
           atomExpression
            call
             id
              Strength
             .
             call
              id
               weaker
              callInvoke
               (
               enumeration
                expression
                 atomExpression
                  call
                   id
                    _v1
                   .
                   call
                    id
                     walkStrength
                ,
                expression
                 atomExpression
                  call
                   id
                    _v2
                   .
                   call
                    id
                     walkStrength
               )
          )
         statement
          block
           {
           statement
            ifSt
             ifCond
              if
              (
              expression
               atomExpression
                call
                 id
                  Strength
                 .
                 call
                  id
                   stronger
                  callInvoke
                   (
                   enumeration
                    expression
                     atomExpression
                      call
                       id
                        strength
                    ,
                    expression
                     atomExpression
                      call
                       id
                        _v1
                       .
                       call
                        id
                         walkStrength
                   )
              )
             statement
              block
               {
               statement
                assignment
                 expression
                  atomExpression
                   call
                    id
                     _direction
                 assignOp
                  =
                 expression
                  atomExpression
                   call
                    id
                     BACKWARD
               }
             elseSt
              else
              statement
               block
                {
                statement
                 assignment
                  expression
                   atomExpression
                    call
                     id
                      _direction
                  assignOp
                   =
                  expression
                   atomExpression
                    call
                     id
                      NONE
                }
           }
         elseSt
          else
          statement
           block
            {
            statement
             ifSt
              ifCond
               if
               (
               expression
                atomExpression
                 call
                  id
                   Strength
                  .
                  call
                   id
                    stronger
                   callInvoke
                    (
                    enumeration
                     expression
                      atomExpression
                       call
                        id
                         strength
                     ,
                     expression
                      atomExpression
                       call
                        id
                         _v2
                        .
                        call
                         id
                          walkStrength
                    )
               )
              statement
               block
                {
                statement
                 assignment
                  expression
                   atomExpression
                    call
                     id
                      _direction
                  assignOp
                   =
                  expression
                   atomExpression
                    call
                     id
                      FORWARD
                }
              elseSt
               else
               statement
                block
                 {
                 statement
                  assignment
                   expression
                    atomExpression
                     call
                      id
                       _direction
                   assignOp
                    =
                   expression
                    atomExpression
                     call
                      id
                       BACKWARD
                 }
            }
       }
    classStatement
     function
      id
       addToGraph
      arguments
       (
       )
      block
       {
       statement
        expression
         atomExpression
          call
           id
            _v1
           .
           call
            id
             addConstraint
            callInvoke
             (
             enumeration
              expression
               atomExpression
                call
                 id
                  this
             )
       statement
        expression
         atomExpression
          call
           id
            _v2
           .
           call
            id
             addConstraint
            callInvoke
             (
             enumeration
              expression
               atomExpression
                call
                 id
                  this
             )
       statement
        assignment
         expression
          atomExpression
           call
            id
             _direction
         assignOp
          =
         expression
          atomExpression
           call
            id
             NONE
       }
    classStatement
     classOpGetter
      operatorGetter
       id
        isSatisfied
      block
       {
       statement
        expression
         expression
          atomExpression
           call
            id
             _direction
         compoundExpression
          logic
           andLogic
            atomLogic
             logicOp
              !=
             expression
              atomExpression
               call
                id
                 NONE
       }
    classStatement
     function
      id
       markInputs
      arguments
       (
       id
        mark
       )
      block
       {
       statement
        assignment
         expression
          atomExpression
           call
            id
             input
            .
            call
             id
              mark
         assignOp
          =
         expression
          atomExpression
           call
            id
             mark
       }
    classStatement
     classOpGetter
      operatorGetter
       id
        input
      block
       {
       statement
        expression
         expression
          atomExpression
           call
            id
             _direction
         compoundExpression
          logic
           andLogic
            atomLogic
             logicOp
              ==
             expression
              expression
               atomExpression
                call
                 id
                  FORWARD
              compoundExpression
               elvis
                ?
                expression
                 atomExpression
                  call
                   id
                    _v1
                :
                expression
                 atomExpression
                  call
                   id
                    _v2
       }
    classStatement
     classOpGetter
      operatorGetter
       id
        output
      block
       {
       statement
        expression
         expression
          atomExpression
           call
            id
             _direction
         compoundExpression
          logic
           andLogic
            atomLogic
             logicOp
              ==
             expression
              expression
               atomExpression
                call
                 id
                  FORWARD
              compoundExpression
               elvis
                ?
                expression
                 atomExpression
                  call
                   id
                    _v2
                :
                expression
                 atomExpression
                  call
                   id
                    _v1
       }
    classStatement
     function
      id
       recalculate
      arguments
       (
       )
      block
       {
       statement
        assignment
         var
         expression
          atomExpression
           call
            id
             ihn
         assignOp
          =
         expression
          atomExpression
           call
            id
             input
       statement
        assignment
         var
         expression
          atomExpression
           call
            id
             out
         assignOp
          =
         expression
          atomExpression
           call
            id
             output
       statement
        assignment
         expression
          atomExpression
           call
            id
             out
            .
            call
             id
              walkStrength
         assignOp
          =
         expression
          atomExpression
           call
            id
             Strength
            .
            call
             id
              weakest
             callInvoke
              (
              enumeration
               expression
                atomExpression
                 call
                  id
                   strength
               ,
               expression
                atomExpression
                 call
                  id
                   ihn
                  .
                  call
                   id
                    walkStrength
              )
       statement
        assignment
         expression
          atomExpression
           call
            id
             out
            .
            call
             id
              stay
         assignOp
          =
         expression
          atomExpression
           call
            id
             ihn
            .
            call
             id
              stay
       statement
        ifSt
         ifCond
          if
          (
          expression
           atomExpression
            call
             id
              out
             .
             call
              id
               stay
          )
         statement
          expression
           atomExpression
            call
             id
              execute
             callInvoke
              (
              )
       }
    classStatement
     function
      id
       markUnsatisfied
      arguments
       (
       )
      block
       {
       statement
        assignment
         expression
          atomExpression
           call
            id
             _direction
         assignOp
          =
         expression
          atomExpression
           call
            id
             NONE
       }
    classStatement
     function
      id
       inputsKnown
      arguments
       (
       id
        mark
       )
      block
       {
       statement
        assignment
         var
         expression
          atomExpression
           call
            id
             i
         assignOp
          =
         expression
          atomExpression
           call
            id
             input
       statement
        returnSt
         return
         expression
          expression
           atomExpression
            call
             id
              i
             .
             call
              id
               mark
          compoundExpression
           logic
            andLogic
             atomLogic
              logicOp
               ==
              expression
               expression
                atomExpression
                 call
                  id
                   mark
               compoundExpression
                logic
                 andLogic
                  atomLogic
                   ||
                   expression
                    expression
                     atomExpression
                      call
                       id
                        i
                       .
                       call
                        id
                         stay
                    compoundExpression
                     logic
                      andLogic
                       atomLogic
                        ||
                        expression
                         expression
                          atomExpression
                           call
                            id
                             i
                            .
                            call
                             id
                              determinedBy
                         compoundExpression
                          logic
                           andLogic
                            atomLogic
                             logicOp
                              ==
                             expression
                              atomExpression
                               nullE
                                null
       }
    classStatement
     function
      id
       removeFromGraph
      arguments
       (
       )
      block
       {
       statement
        ifSt
         ifCond
          if
          (
          expression
           expression
            atomExpression
             call
              id
               _v1
           compoundExpression
            logic
             andLogic
              atomLogic
               logicOp
                !=
               expression
                atomExpression
                 nullE
                  null
          )
         statement
          expression
           atomExpression
            call
             id
              _v1
             .
             call
              id
               removeConstraint
              callInvoke
               (
               enumeration
                expression
                 atomExpression
                  call
                   id
                    this
               )
       statement
        ifSt
         ifCond
          if
          (
          expression
           expression
            atomExpression
             call
              id
               _v2
           compoundExpression
            logic
             andLogic
              atomLogic
               logicOp
                !=
               expression
                atomExpression
                 nullE
                  null
          )
         statement
          expression
           atomExpression
            call
             id
              _v2
             .
             call
              id
               removeConstraint
              callInvoke
               (
               enumeration
                expression
                 atomExpression
                  call
                   id
                    this
               )
       statement
        assignment
         expression
          atomExpression
           call
            id
             _direction
         assignOp
          =
         expression
          atomExpression
           call
            id
             NONE
       }
   }
 fileAtom
  classDefinition
   class
   id
    ScaleConstraint
   inheritance
    is
    id
     BinaryConstraint
   {
   classBody
    classStatement
     classConstructor
      construct
      id
       new
      arguments
       (
       id
        src
       ,
       id
        scale
       ,
       id
        offset
       ,
       id
        dest
       ,
       id
        strength
       )
      block
       {
       statement
        assignment
         expression
          atomExpression
           call
            id
             _scale
         assignOp
          =
         expression
          atomExpression
           call
            id
             scale
       statement
        assignment
         expression
          atomExpression
           call
            id
             _offset
         assignOp
          =
         expression
          atomExpression
           call
            id
             offset
       statement
        expression
         atomExpression
          call
           id
            super
           callInvoke
            (
            enumeration
             expression
              atomExpression
               call
                id
                 src
             ,
             expression
              atomExpression
               call
                id
                 dest
             ,
             expression
              atomExpression
               call
                id
                 strength
            )
       }
    classStatement
     function
      id
       addToGraph
      arguments
       (
       )
      block
       {
       statement
        expression
         atomExpression
          call
           id
            super
           callInvoke
            (
            )
       statement
        expression
         atomExpression
          call
           id
            _scale
           .
           call
            id
             addConstraint
            callInvoke
             (
             enumeration
              expression
               atomExpression
                call
                 id
                  this
             )
       statement
        expression
         atomExpression
          call
           id
            _offset
           .
           call
            id
             addConstraint
            callInvoke
             (
             enumeration
              expression
               atomExpression
                call
                 id
                  this
             )
       }
    classStatement
     function
      id
       removeFromGraph
      arguments
       (
       )
      block
       {
       statement
        expression
         atomExpression
          call
           id
            super
           callInvoke
            (
            )
       statement
        ifSt
         ifCond
          if
          (
          expression
           expression
            atomExpression
             call
              id
               _scale
           compoundExpression
            logic
             andLogic
              atomLogic
               logicOp
                !=
               expression
                atomExpression
                 nullE
                  null
          )
         statement
          expression
           atomExpression
            call
             id
              _scale
             .
             call
              id
               removeConstraint
              callInvoke
               (
               enumeration
                expression
                 atomExpression
                  call
                   id
                    this
               )
       statement
        ifSt
         ifCond
          if
          (
          expression
           expression
            atomExpression
             call
              id
               _offset
           compoundExpression
            logic
             andLogic
              atomLogic
               logicOp
                !=
               expression
                atomExpression
                 nullE
                  null
          )
         statement
          expression
           atomExpression
            call
             id
              _offset
             .
             call
              id
               removeConstraint
              callInvoke
               (
               enumeration
                expression
                 atomExpression
                  call
                   id
                    this
               )
       }
    classStatement
     function
      id
       markInputs
      arguments
       (
       id
        mark
       )
      block
       {
       statement
        expression
         atomExpression
          call
           id
            super
           .
           call
            id
             markInputs
            callInvoke
             (
             enumeration
              expression
               atomExpression
                call
                 id
                  mark
             )
       statement
        assignment
         expression
          atomExpression
           call
            id
             _scale
            .
            call
             id
              mark
         assignOp
          =
         assignment
          expression
           atomExpression
            call
             id
              _offset
             .
             call
              id
               mark
          assignOp
           =
          expression
           atomExpression
            call
             id
              mark
       }
    classStatement
     function
      id
       execute
      arguments
       (
       )
      block
       {
       statement
        ifSt
         ifCond
          if
          (
          expression
           expression
            atomExpression
             call
              id
               direction
           compoundExpression
            logic
             andLogic
              atomLogic
               logicOp
                ==
               expression
                atomExpression
                 call
                  id
                   FORWARD
          )
         statement
          block
           {
           statement
            assignment
             expression
              atomExpression
               call
                id
                 v2
                .
                call
                 id
                  value
             assignOp
              =
             expression
              expression
               atomExpression
                call
                 id
                  v1
                 .
                 call
                  id
                   value
              compoundExpression
               arithMul
                *
                expression
                 expression
                  atomExpression
                   call
                    id
                     _scale
                    .
                    call
                     id
                      value
                 compoundExpression
                  arithAdd
                   +
                   expression
                    atomExpression
                     call
                      id
                       _offset
                      .
                      call
                       id
                        value
           }
         elseSt
          else
          statement
           block
            {
            statement
             assignment
              expression
               atomExpression
                call
                 id
                  v1
                 .
                 call
                  id
                   value
              assignOp
               =
              expression
               expression
                (
                expression
                 expression
                  (
                  expression
                   expression
                    atomExpression
                     call
                      id
                       v2
                      .
                      call
                       id
                        value
                   compoundExpression
                    arithAdd
                     -
                     expression
                      atomExpression
                       call
                        id
                         _offset
                        .
                        call
                         id
                          value
                  )
                 compoundExpression
                  arithMul
                   /
                   expression
                    atomExpression
                     call
                      id
                       _scale
                      .
                      call
                       id
                        value
                )
               compoundExpression
                .
                call
                 id
                  floor
            }
       }
    classStatement
     function
      id
       recalculate
      arguments
       (
       )
      block
       {
       statement
        assignment
         var
         expression
          atomExpression
           call
            id
             ihn
         assignOp
          =
         expression
          atomExpression
           call
            id
             input
       statement
        assignment
         var
         expression
          atomExpression
           call
            id
             out
         assignOp
          =
         expression
          atomExpression
           call
            id
             output
       statement
        assignment
         expression
          atomExpression
           call
            id
             out
            .
            call
             id
              walkStrength
         assignOp
          =
         expression
          atomExpression
           call
            id
             Strength
            .
            call
             id
              weakest
             callInvoke
              (
              enumeration
               expression
                atomExpression
                 call
                  id
                   strength
               ,
               expression
                atomExpression
                 call
                  id
                   ihn
                  .
                  call
                   id
                    walkStrength
              )
       statement
        assignment
         expression
          atomExpression
           call
            id
             out
            .
            call
             id
              stay
         assignOp
          =
         expression
          expression
           atomExpression
            call
             id
              ihn
             .
             call
              id
               stay
          compoundExpression
           logic
            andLogic
             atomLogic
              &&
              expression
               expression
                atomExpression
                 call
                  id
                   _scale
                  .
                  call
                   id
                    stay
               compoundExpression
                logic
                 andLogic
                  atomLogic
                   &&
                   expression
                    atomExpression
                     call
                      id
                       _offset
                      .
                      call
                       id
                        stay
       statement
        ifSt
         ifCond
          if
          (
          expression
           atomExpression
            call
             id
              out
             .
             call
              id
               stay
          )
         statement
          expression
           atomExpression
            call
             id
              execute
             callInvoke
              (
              )
       }
   }
 fileAtom
  classDefinition
   class
   id
    EqualityConstraint
   inheritance
    is
    id
     BinaryConstraint
   {
   classBody
    classStatement
     classConstructor
      construct
      id
       new
      arguments
       (
       id
        v1
       ,
       id
        v2
       ,
       id
        strength
       )
      block
       {
       statement
        expression
         atomExpression
          call
           id
            super
           callInvoke
            (
            enumeration
             expression
              atomExpression
               call
                id
                 v1
             ,
             expression
              atomExpression
               call
                id
                 v2
             ,
             expression
              atomExpression
               call
                id
                 strength
            )
       }
    classStatement
     function
      id
       execute
      arguments
       (
       )
      block
       {
       statement
        assignment
         expression
          atomExpression
           call
            id
             output
            .
            call
             id
              value
         assignOp
          =
         expression
          atomExpression
           call
            id
             input
            .
            call
             id
              value
       }
   }
 fileAtom
  classDefinition
   class
   id
    Variable
   {
   classBody
    classStatement
     classConstructor
      construct
      id
       new
      arguments
       (
       id
        name
       ,
       id
        value
       )
      block
       {
       statement
        assignment
         expression
          atomExpression
           call
            id
             _constraints
         assignOp
          =
         expression
          atomExpression
           listInit
            [
            ]
       statement
        assignment
         expression
          atomExpression
           call
            id
             _determinedBy
         assignOp
          =
         expression
          atomExpression
           nullE
            null
       statement
        assignment
         expression
          atomExpression
           call
            id
             _mark
         assignOp
          =
         expression
          atomExpression
           numE
            0
       statement
        assignment
         expression
          atomExpression
           call
            id
             _walkStrength
         assignOp
          =
         expression
          atomExpression
           call
            id
             WEAKEST
       statement
        assignment
         expression
          atomExpression
           call
            id
             _stay
         assignOp
          =
         expression
          atomExpression
           boolE
            true
       statement
        assignment
         expression
          atomExpression
           call
            id
             _name
         assignOp
          =
         expression
          atomExpression
           call
            id
             name
       statement
        assignment
         expression
          atomExpression
           call
            id
             _value
         assignOp
          =
         expression
          atomExpression
           call
            id
             value
       }
    classStatement
     classOpGetter
      operatorGetter
       id
        constraints
      block
       {
       statement
        expression
         atomExpression
          call
           id
            _constraints
       }
    classStatement
     classOpGetter
      operatorGetter
       id
        determinedBy
      block
       {
       statement
        expression
         atomExpression
          call
           id
            _determinedBy
       }
    classStatement
     classSetter
      id
       determinedBy
      assignmentSetter
       =
       oneArgument
        (
        id
         value
        )
      block
       {
       statement
        assignment
         expression
          atomExpression
           call
            id
             _determinedBy
         assignOp
          =
         expression
          atomExpression
           call
            id
             value
       }
    classStatement
     classOpGetter
      operatorGetter
       id
        mark
      block
       {
       statement
        expression
         atomExpression
          call
           id
            _mark
       }
    classStatement
     classSetter
      id
       mark
      assignmentSetter
       =
       oneArgument
        (
        id
         value
        )
      block
       {
       statement
        assignment
         expression
          atomExpression
           call
            id
             _mark
         assignOp
          =
         expression
          atomExpression
           call
            id
             value
       }
    classStatement
     classOpGetter
      operatorGetter
       id
        walkStrength
      block
       {
       statement
        expression
         atomExpression
          call
           id
            _walkStrength
       }
    classStatement
     classSetter
      id
       walkStrength
      assignmentSetter
       =
       oneArgument
        (
        id
         value
        )
      block
       {
       statement
        assignment
         expression
          atomExpression
           call
            id
             _walkStrength
         assignOp
          =
         expression
          atomExpression
           call
            id
             value
       }
    classStatement
     classOpGetter
      operatorGetter
       id
        stay
      block
       {
       statement
        expression
         atomExpression
          call
           id
            _stay
       }
    classStatement
     classSetter
      id
       stay
      assignmentSetter
       =
       oneArgument
        (
        id
         value
        )
      block
       {
       statement
        assignment
         expression
          atomExpression
           call
            id
             _stay
         assignOp
          =
         expression
          atomExpression
           call
            id
             value
       }
    classStatement
     classOpGetter
      operatorGetter
       id
        value
      block
       {
       statement
        expression
         atomExpression
          call
           id
            _value
       }
    classStatement
     classSetter
      id
       value
      assignmentSetter
       =
       oneArgument
        (
        id
         newValue
        )
      block
       {
       statement
        assignment
         expression
          atomExpression
           call
            id
             _value
         assignOp
          =
         expression
          atomExpression
           call
            id
             newValue
       }
    classStatement
     function
      id
       addConstraint
      arguments
       (
       id
        constraint
       )
      block
       {
       statement
        expression
         atomExpression
          call
           id
            _constraints
           .
           call
            id
             add
            callInvoke
             (
             enumeration
              expression
               atomExpression
                call
                 id
                  constraint
             )
       }
    classStatement
     function
      id
       removeConstraint
      arguments
       (
       id
        constraint
       )
      block
       {
       statement
        assignment
         expression
          atomExpression
           call
            id
             _constraints
         assignOp
          =
         expression
          atomExpression
           call
            id
             _constraints
            .
            call
             id
              where
             block
              {
              lambdaParameters
               |
               id
                c
               |
              statement
               expression
                expression
                 atomExpression
                  call
                   id
                    c
                compoundExpression
                 logic
                  andLogic
                   atomLogic
                    logicOp
                     !=
                    expression
                     atomExpression
                      call
                       id
                        constraint
              }
       statement
        ifSt
         ifCond
          if
          (
          expression
           expression
            atomExpression
             call
              id
               _determinedBy
           compoundExpression
            logic
             andLogic
              atomLogic
               logicOp
                ==
               expression
                atomExpression
                 call
                  id
                   constraint
          )
         statement
          assignment
           expression
            atomExpression
             call
              id
               _determinedBy
           assignOp
            =
           expression
            atomExpression
             nullE
              null
       }
   }
 fileAtom
  classDefinition
   class
   id
    Plan
   {
   classBody
    classStatement
     classConstructor
      construct
      id
       new
      arguments
       (
       )
      block
       {
       statement
        assignment
         expression
          atomExpression
           call
            id
             _list
         assignOp
          =
         expression
          atomExpression
           listInit
            [
            ]
       }
    classStatement
     function
      id
       addConstraint
      arguments
       (
       id
        constraint
       )
      block
       {
       statement
        expression
         atomExpression
          call
           id
            _list
           .
           call
            id
             add
            callInvoke
             (
             enumeration
              expression
               atomExpression
                call
                 id
                  constraint
             )
       }
    classStatement
     classOpGetter
      operatorGetter
       id
        size
      block
       {
       statement
        expression
         atomExpression
          call
           id
            _list
           .
           call
            id
             count
       }
    classStatement
     function
      id
       execute
      arguments
       (
       )
      block
       {
       statement
        forSt
         for
         (
         id
          constraint
         in
         expression
          atomExpression
           call
            id
             _list
         )
         statement
          block
           {
           statement
            expression
             atomExpression
              call
               id
                constraint
               .
               call
                id
                 execute
                callInvoke
                 (
                 )
           }
       }
   }
 fileAtom
  classDefinition
   class
   id
    Planner
   {
   classBody
    classStatement
     classConstructor
      construct
      id
       new
      arguments
       (
       )
      block
       {
       statement
        assignment
         expression
          atomExpression
           call
            id
             _currentMark
         assignOp
          =
         expression
          atomExpression
           numE
            0
       }
    classStatement
     function
      id
       incrementalAdd
      arguments
       (
       id
        constraint
       )
      block
       {
       statement
        assignment
         var
         expression
          atomExpression
           call
            id
             mark
         assignOp
          =
         expression
          atomExpression
           call
            id
             newMark
            callInvoke
             (
             )
       statement
        assignment
         var
         expression
          atomExpression
           call
            id
             overridden
         assignOp
          =
         expression
          atomExpression
           call
            id
             constraint
            .
            call
             id
              satisfy
             callInvoke
              (
              enumeration
               expression
                atomExpression
                 call
                  id
                   mark
              )
       statement
        whileSt
         while
         (
         expression
          expression
           atomExpression
            call
             id
              overridden
          compoundExpression
           logic
            andLogic
             atomLogic
              logicOp
               !=
              expression
               atomExpression
                nullE
                 null
         )
         statement
          block
           {
           statement
            assignment
             expression
              atomExpression
               call
                id
                 overridden
             assignOp
              =
             expression
              atomExpression
               call
                id
                 overridden
                .
                call
                 id
                  satisfy
                 callInvoke
                  (
                  enumeration
                   expression
                    atomExpression
                     call
                      id
                       mark
                  )
           }
       }
    classStatement
     function
      id
       incrementalRemove
      arguments
       (
       id
        constraint
       )
      block
       {
       statement
        assignment
         var
         expression
          atomExpression
           call
            id
             out
         assignOp
          =
         expression
          atomExpression
           call
            id
             constraint
            .
            call
             id
              output
       statement
        expression
         atomExpression
          call
           id
            constraint
           .
           call
            id
             markUnsatisfied
            callInvoke
             (
             )
       statement
        expression
         atomExpression
          call
           id
            constraint
           .
           call
            id
             removeFromGraph
            callInvoke
             (
             )
       statement
        assignment
         var
         expression
          atomExpression
           call
            id
             unsatisfied
         assignOp
          =
         expression
          atomExpression
           call
            id
             removePropagateFrom
            callInvoke
             (
             enumeration
              expression
               atomExpression
                call
                 id
                  out
             )
       statement
        assignment
         var
         expression
          atomExpression
           call
            id
             strength
         assignOp
          =
         expression
          atomExpression
           call
            id
             REQUIRED
       statement
        whileSt
         while
         (
         expression
          atomExpression
           boolE
            true
         )
         statement
          block
           {
           statement
            forSt
             for
             (
             id
              u
             in
             expression
              atomExpression
               call
                id
                 unsatisfied
             )
             statement
              block
               {
               statement
                ifSt
                 ifCond
                  if
                  (
                  expression
                   expression
                    atomExpression
                     call
                      id
                       u
                      .
                      call
                       id
                        strength
                   compoundExpression
                    logic
                     andLogic
                      atomLogic
                       logicOp
                        ==
                       expression
                        atomExpression
                         call
                          id
                           strength
                  )
                 statement
                  expression
                   atomExpression
                    call
                     id
                      incrementalAdd
                     callInvoke
                      (
                      enumeration
                       expression
                        atomExpression
                         call
                          id
                           u
                      )
               }
           statement
            assignment
             expression
              atomExpression
               call
                id
                 strength
             assignOp
              =
             expression
              atomExpression
               call
                id
                 strength
                .
                call
                 id
                  nextWeaker
           statement
            ifSt
             ifCond
              if
              (
              expression
               expression
                atomExpression
                 call
                  id
                   strength
               compoundExpression
                logic
                 andLogic
                  atomLogic
                   logicOp
                    ==
                   expression
                    atomExpression
                     call
                      id
                       WEAKEST
              )
             statement
              expression
               atomExpression
                break
           }
       }
    classStatement
     function
      id
       newMark
      arguments
       (
       )
      block
       {
       statement
        assignment
         expression
          atomExpression
           call
            id
             _currentMark
         assignOp
          =
         expression
          expression
           atomExpression
            call
             id
              _currentMark
          compoundExpression
           arithAdd
            +
            expression
             atomExpression
              numE
               1
       }
    classStatement
     function
      id
       makePlan
      arguments
       (
       id
        sources
       )
      block
       {
       statement
        assignment
         var
         expression
          atomExpression
           call
            id
             mark
         assignOp
          =
         expression
          atomExpression
           call
            id
             newMark
            callInvoke
             (
             )
       statement
        assignment
         var
         expression
          atomExpression
           call
            id
             plan
         assignOp
          =
         expression
          atomExpression
           call
            id
             Plan
            .
            call
             id
              new
             callInvoke
              (
              )
       statement
        assignment
         var
         expression
          atomExpression
           call
            id
             todo
         assignOp
          =
         expression
          atomExpression
           call
            id
             sources
       statement
        whileSt
         while
         (
         expression
          expression
           atomExpression
            call
             id
              todo
             .
             call
              id
               count
          compoundExpression
           logic
            andLogic
             atomLogic
              logicOp
               >
              expression
               atomExpression
                numE
                 0
         )
         statement
          block
           {
           statement
            assignment
             var
             expression
              atomExpression
               call
                id
                 constraint
             assignOp
              =
             expression
              atomExpression
               call
                id
                 todo
                .
                call
                 id
                  removeAt
                 callInvoke
                  (
                  enumeration
                   expression
                    atomExpression
                     numE
                      -1
                  )
           statement
            ifSt
             ifCond
              if
              (
              expression
               expression
                atomExpression
                 call
                  id
                   constraint
                  .
                  call
                   id
                    output
                   .
                   call
                    id
                     mark
               compoundExpression
                logic
                 andLogic
                  atomLogic
                   logicOp
                    !=
                   expression
                    expression
                     atomExpression
                      call
                       id
                        mark
                    compoundExpression
                     logic
                      andLogic
                       atomLogic
                        &&
                        expression
                         atomExpression
                          call
                           id
                            constraint
                           .
                           call
                            id
                             inputsKnown
                            callInvoke
                             (
                             enumeration
                              expression
                               atomExpression
                                call
                                 id
                                  mark
                             )
              )
             statement
              block
               {
               statement
                expression
                 atomExpression
                  call
                   id
                    plan
                   .
                   call
                    id
                     addConstraint
                    callInvoke
                     (
                     enumeration
                      expression
                       atomExpression
                        call
                         id
                          constraint
                     )
               statement
                assignment
                 expression
                  atomExpression
                   call
                    id
                     constraint
                    .
                    call
                     id
                      output
                     .
                     call
                      id
                       mark
                 assignOp
                  =
                 expression
                  atomExpression
                   call
                    id
                     mark
               statement
                expression
                 atomExpression
                  call
                   id
                    addConstraintsConsumingTo
                   callInvoke
                    (
                    enumeration
                     expression
                      atomExpression
                       call
                        id
                         constraint
                        .
                        call
                         id
                          output
                     ,
                     expression
                      atomExpression
                       call
                        id
                         todo
                    )
               }
           }
       statement
        returnSt
         return
         expression
          atomExpression
           call
            id
             plan
       }
    classStatement
     function
      id
       extractPlanFromConstraints
      arguments
       (
       id
        constraints
       )
      block
       {
       statement
        assignment
         var
         expression
          atomExpression
           call
            id
             sources
         assignOp
          =
         expression
          atomExpression
           listInit
            [
            ]
       statement
        forSt
         for
         (
         id
          constraint
         in
         expression
          atomExpression
           call
            id
             constraints
         )
         statement
          block
           {
           statement
            ifSt
             ifCond
              if
              (
              expression
               expression
                atomExpression
                 call
                  id
                   constraint
                  .
                  call
                   id
                    isInput
               compoundExpression
                logic
                 andLogic
                  atomLogic
                   &&
                   expression
                    atomExpression
                     call
                      id
                       constraint
                      .
                      call
                       id
                        isSatisfied
              )
             statement
              expression
               atomExpression
                call
                 id
                  sources
                 .
                 call
                  id
                   add
                  callInvoke
                   (
                   enumeration
                    expression
                     atomExpression
                      call
                       id
                        constraint
                   )
           }
       statement
        returnSt
         return
         expression
          atomExpression
           call
            id
             makePlan
            callInvoke
             (
             enumeration
              expression
               atomExpression
                call
                 id
                  sources
             )
       }
    classStatement
     function
      id
       addPropagate
      arguments
       (
       id
        constraint
       ,
       id
        mark
       )
      block
       {
       statement
        assignment
         var
         expression
          atomExpression
           call
            id
             todo
         assignOp
          =
         expression
          atomExpression
           listInit
            [
            enumeration
             expression
              atomExpression
               call
                id
                 constraint
            ]
       statement
        whileSt
         while
         (
         expression
          expression
           atomExpression
            call
             id
              todo
             .
             call
              id
               count
          compoundExpression
           logic
            andLogic
             atomLogic
              logicOp
               >
              expression
               atomExpression
                numE
                 0
         )
         statement
          block
           {
           statement
            assignment
             var
             expression
              atomExpression
               call
                id
                 d
             assignOp
              =
             expression
              atomExpression
               call
                id
                 todo
                .
                call
                 id
                  removeAt
                 callInvoke
                  (
                  enumeration
                   expression
                    atomExpression
                     numE
                      -1
                  )
           statement
            ifSt
             ifCond
              if
              (
              expression
               expression
                atomExpression
                 call
                  id
                   d
                  .
                  call
                   id
                    output
                   .
                   call
                    id
                     mark
               compoundExpression
                logic
                 andLogic
                  atomLogic
                   logicOp
                    ==
                   expression
                    atomExpression
                     call
                      id
                       mark
              )
             statement
              block
               {
               statement
                expression
                 atomExpression
                  call
                   id
                    incrementalRemove
                   callInvoke
                    (
                    enumeration
                     expression
                      atomExpression
                       call
                        id
                         constraint
                    )
               statement
                returnSt
                 return
                 expression
                  atomExpression
                   boolE
                    false
               }
           statement
            expression
             atomExpression
              call
               id
                d
               .
               call
                id
                 recalculate
                callInvoke
                 (
                 )
           statement
            expression
             atomExpression
              call
               id
                addConstraintsConsumingTo
               callInvoke
                (
                enumeration
                 expression
                  atomExpression
                   call
                    id
                     d
                    .
                    call
                     id
                      output
                 ,
                 expression
                  atomExpression
                   call
                    id
                     todo
                )
           }
       statement
        returnSt
         return
         expression
          atomExpression
           boolE
            true
       }
    classStatement
     function
      id
       removePropagateFrom
      arguments
       (
       id
        out
       )
      block
       {
       statement
        assignment
         expression
          atomExpression
           call
            id
             out
            .
            call
             id
              determinedBy
         assignOp
          =
         expression
          atomExpression
           nullE
            null
       statement
        assignment
         expression
          atomExpression
           call
            id
             out
            .
            call
             id
              walkStrength
         assignOp
          =
         expression
          atomExpression
           call
            id
             WEAKEST
       statement
        assignment
         expression
          atomExpression
           call
            id
             out
            .
            call
             id
              stay
         assignOp
          =
         expression
          atomExpression
           boolE
            true
       statement
        assignment
         var
         expression
          atomExpression
           call
            id
             unsatisfied
         assignOp
          =
         expression
          atomExpression
           listInit
            [
            ]
       statement
        assignment
         var
         expression
          atomExpression
           call
            id
             todo
         assignOp
          =
         expression
          atomExpression
           listInit
            [
            enumeration
             expression
              atomExpression
               call
                id
                 out
            ]
       statement
        whileSt
         while
         (
         expression
          expression
           atomExpression
            call
             id
              todo
             .
             call
              id
               count
          compoundExpression
           logic
            andLogic
             atomLogic
              logicOp
               >
              expression
               atomExpression
                numE
                 0
         )
         statement
          block
           {
           statement
            assignment
             var
             expression
              atomExpression
               call
                id
                 v
             assignOp
              =
             expression
              atomExpression
               call
                id
                 todo
                .
                call
                 id
                  removeAt
                 callInvoke
                  (
                  enumeration
                   expression
                    atomExpression
                     numE
                      -1
                  )
           statement
            forSt
             for
             (
             id
              constraint
             in
             expression
              atomExpression
               call
                id
                 v
                .
                call
                 id
                  constraints
             )
             statement
              block
               {
               statement
                ifSt
                 ifCond
                  if
                  (
                  expression
                   !
                   expression
                    atomExpression
                     call
                      id
                       constraint
                      .
                      call
                       id
                        isSatisfied
                  )
                 statement
                  expression
                   atomExpression
                    call
                     id
                      unsatisfied
                     .
                     call
                      id
                       add
                      callInvoke
                       (
                       enumeration
                        expression
                         atomExpression
                          call
                           id
                            constraint
                       )
               }
           statement
            assignment
             var
             expression
              atomExpression
               call
                id
                 determining
             assignOp
              =
             expression
              atomExpression
               call
                id
                 v
                .
                call
                 id
                  determinedBy
           statement
            forSt
             for
             (
             id
              next
             in
             expression
              atomExpression
               call
                id
                 v
                .
                call
                 id
                  constraints
             )
             statement
              block
               {
               statement
                ifSt
                 ifCond
                  if
                  (
                  expression
                   expression
                    atomExpression
                     call
                      id
                       next
                   compoundExpression
                    logic
                     andLogic
                      atomLogic
                       logicOp
                        !=
                       expression
                        expression
                         atomExpression
                          call
                           id
                            determining
                        compoundExpression
                         logic
                          andLogic
                           atomLogic
                            &&
                            expression
                             atomExpression
                              call
                               id
                                next
                               .
                               call
                                id
                                 isSatisfied
                  )
                 statement
                  block
                   {
                   statement
                    expression
                     atomExpression
                      call
                       id
                        next
                       .
                       call
                        id
                         recalculate
                        callInvoke
                         (
                         )
                   statement
                    expression
                     atomExpression
                      call
                       id
                        todo
                       .
                       call
                        id
                         add
                        callInvoke
                         (
                         enumeration
                          expression
                           atomExpression
                            call
                             id
                              next
                             .
                             call
                              id
                               output
                         )
                   }
               }
           }
       statement
        returnSt
         return
         expression
          atomExpression
           call
            id
             unsatisfied
       }
    classStatement
     function
      id
       addConstraintsConsumingTo
      arguments
       (
       id
        v
       ,
       id
        coll
       )
      block
       {
       statement
        assignment
         var
         expression
          atomExpression
           call
            id
             determining
         assignOp
          =
         expression
          atomExpression
           call
            id
             v
            .
            call
             id
              determinedBy
       statement
        forSt
         for
         (
         id
          constraint
         in
         expression
          atomExpression
           call
            id
             v
            .
            call
             id
              constraints
         )
         statement
          block
           {
           statement
            ifSt
             ifCond
              if
              (
              expression
               expression
                atomExpression
                 call
                  id
                   constraint
               compoundExpression
                logic
                 andLogic
                  atomLogic
                   logicOp
                    !=
                   expression
                    expression
                     atomExpression
                      call
                       id
                        determining
                    compoundExpression
                     logic
                      andLogic
                       atomLogic
                        &&
                        expression
                         atomExpression
                          call
                           id
                            constraint
                           .
                           call
                            id
                             isSatisfied
              )
             statement
              block
               {
               statement
                expression
                 atomExpression
                  call
                   id
                    coll
                   .
                   call
                    id
                     add
                    callInvoke
                     (
                     enumeration
                      expression
                       atomExpression
                        call
                         id
                          constraint
                     )
               }
           }
       }
   }
 fileAtom
  statement
   assignment
    var
    expression
     atomExpression
      call
       id
        total
    assignOp
     =
    expression
     atomExpression
      numE
       0
 fileAtom
  statement
   assignment
    var
    expression
     atomExpression
      call
       id
        chainTest
    assignOp
     =
    expression
     atomExpression
      call
       id
        Fn
       .
       call
        id
         new
        block
         {
         lambdaParameters
          |
          id
           n
          |
         statement
          assignment
           expression
            atomExpression
             call
              id
               ThePlanner
           assignOp
            =
           expression
            atomExpression
             call
              id
               Planner
              .
              call
               id
                new
               callInvoke
                (
                )
         statement
          assignment
           var
           expression
            atomExpression
             call
              id
               prev
           assignOp
            =
           expression
            atomExpression
             nullE
              null
         statement
          assignment
           var
           expression
            atomExpression
             call
              id
               first
           assignOp
            =
           expression
            atomExpression
             nullE
              null
         statement
          assignment
           var
           expression
            atomExpression
             call
              id
               last
           assignOp
            =
           expression
            atomExpression
             nullE
              null
         statement
          forSt
           for
           (
           id
            i
           in
           expression
            expression
             atomExpression
              numE
               0
            compoundExpression
             arithRange
              ..
              expression
               atomExpression
                call
                 id
                  n
           )
           statement
            block
             {
             statement
              assignment
               var
               expression
                atomExpression
                 call
                  id
                   v
               assignOp
                =
               expression
                atomExpression
                 call
                  id
                   Variable
                  .
                  call
                   id
                    new
                   callInvoke
                    (
                    enumeration
                     expression
                      atomExpression
                       stringE
                        "v"
                     ,
                     expression
                      atomExpression
                       numE
                        0
                    )
             statement
              ifSt
               ifCond
                if
                (
                expression
                 expression
                  atomExpression
                   call
                    id
                     prev
                 compoundExpression
                  logic
                   andLogic
                    atomLogic
                     logicOp
                      !=
                     expression
                      atomExpression
                       nullE
                        null
                )
               statement
                expression
                 atomExpression
                  call
                   id
                    EqualityConstraint
                   .
                   call
                    id
                     new
                    callInvoke
                     (
                     enumeration
                      expression
                       atomExpression
                        call
                         id
                          prev
                      ,
                      expression
                       atomExpression
                        call
                         id
                          v
                      ,
                      expression
                       atomExpression
                        call
                         id
                          REQUIRED
                     )
             statement
              ifSt
               ifCond
                if
                (
                expression
                 expression
                  atomExpression
                   call
                    id
                     i
                 compoundExpression
                  logic
                   andLogic
                    atomLogic
                     logicOp
                      ==
                     expression
                      atomExpression
                       numE
                        0
                )
               statement
                assignment
                 expression
                  atomExpression
                   call
                    id
                     first
                 assignOp
                  =
                 expression
                  atomExpression
                   call
                    id
                     v
             statement
              ifSt
               ifCond
                if
                (
                expression
                 expression
                  atomExpression
                   call
                    id
                     i
                 compoundExpression
                  logic
                   andLogic
                    atomLogic
                     logicOp
                      ==
                     expression
                      atomExpression
                       call
                        id
                         n
                )
               statement
                assignment
                 expression
                  atomExpression
                   call
                    id
                     last
                 assignOp
                  =
                 expression
                  atomExpression
                   call
                    id
                     v
             statement
              assignment
               expression
                atomExpression
                 call
                  id
                   prev
               assignOp
                =
               expression
                atomExpression
                 call
                  id
                   v
             }
         statement
          expression
           atomExpression
            call
             id
              StayConstraint
             .
             call
              id
               new
              callInvoke
               (
               enumeration
                expression
                 atomExpression
                  call
                   id
                    last
                ,
                expression
                 atomExpression
                  call
                   id
                    STRONG_DEFAULT
               )
         statement
          assignment
           var
           expression
            atomExpression
             call
              id
               edit
           assignOp
            =
           expression
            atomExpression
             call
              id
               EditConstraint
              .
              call
               id
                new
               callInvoke
                (
                enumeration
                 expression
                  atomExpression
                   call
                    id
                     first
                 ,
                 expression
                  atomExpression
                   call
                    id
                     PREFERRED
                )
         statement
          assignment
           var
           expression
            atomExpression
             call
              id
               plan
           assignOp
            =
           expression
            atomExpression
             call
              id
               ThePlanner
              .
              call
               id
                extractPlanFromConstraints
               callInvoke
                (
                enumeration
                 expression
                  atomExpression
                   listInit
                    [
                    enumeration
                     expression
                      atomExpression
                       call
                        id
                         edit
                    ]
                )
         statement
          forSt
           for
           (
           id
            i
           in
           expression
            expression
             atomExpression
              numE
               0
            compoundExpression
             arithRange
              ...
              expression
               atomExpression
                numE
                 100
           )
           statement
            block
             {
             statement
              assignment
               expression
                atomExpression
                 call
                  id
                   first
                  .
                  call
                   id
                    value
               assignOp
                =
               expression
                atomExpression
                 call
                  id
                   i
             statement
              expression
               atomExpression
                call
                 id
                  plan
                 .
                 call
                  id
                   execute
                  callInvoke
                   (
                   )
             statement
              assignment
               expression
                atomExpression
                 call
                  id
                   total
               assignOp
                =
               expression
                expression
                 atomExpression
                  call
                   id
                    total
                compoundExpression
                 arithAdd
                  +
                  expression
                   atomExpression
                    call
                     id
                      last
                     .
                     call
                      id
                       value
             }
         }
 fileAtom
  statement
   assignment
    var
    expression
     atomExpression
      call
       id
        change
    assignOp
     =
    expression
     atomExpression
      call
       id
        Fn
       .
       call
        id
         new
        block
         {
         lambdaParameters
          |
          id
           v
          ,
          id
           newValue
          |
         statement
          assignment
           var
           expression
            atomExpression
             call
              id
               edit
           assignOp
            =
           expression
            atomExpression
             call
              id
               EditConstraint
              .
              call
               id
                new
               callInvoke
                (
                enumeration
                 expression
                  atomExpression
                   call
                    id
                     v
                 ,
                 expression
                  atomExpression
                   call
                    id
                     PREFERRED
                )
         statement
          assignment
           var
           expression
            atomExpression
             call
              id
               plan
           assignOp
            =
           expression
            atomExpression
             call
              id
               ThePlanner
              .
              call
               id
                extractPlanFromConstraints
               callInvoke
                (
                enumeration
                 expression
                  atomExpression
                   listInit
                    [
                    enumeration
                     expression
                      atomExpression
                       call
                        id
                         edit
                    ]
                )
         statement
          forSt
           for
           (
           id
            i
           in
           expression
            expression
             atomExpression
              numE
               0
            compoundExpression
             arithRange
              ...
              expression
               atomExpression
                numE
                 10
           )
           statement
            block
             {
             statement
              assignment
               expression
                atomExpression
                 call
                  id
                   v
                  .
                  call
                   id
                    value
               assignOp
                =
               expression
                atomExpression
                 call
                  id
                   newValue
             statement
              expression
               atomExpression
                call
                 id
                  plan
                 .
                 call
                  id
                   execute
                  callInvoke
                   (
                   )
             }
         statement
          expression
           atomExpression
            call
             id
              edit
             .
             call
              id
               destroyConstraint
              callInvoke
               (
               )
         }
 fileAtom
  statement
   assignment
    var
    expression
     atomExpression
      call
       id
        projectionTest
    assignOp
     =
    expression
     atomExpression
      call
       id
        Fn
       .
       call
        id
         new
        block
         {
         lambdaParameters
          |
          id
           n
          |
         statement
          assignment
           expression
            atomExpression
             call
              id
               ThePlanner
           assignOp
            =
           expression
            atomExpression
             call
              id
               Planner
              .
              call
               id
                new
               callInvoke
                (
                )
         statement
          assignment
           var
           expression
            atomExpression
             call
              id
               scale
           assignOp
            =
           expression
            atomExpression
             call
              id
               Variable
              .
              call
               id
                new
               callInvoke
                (
                enumeration
                 expression
                  atomExpression
                   stringE
                    "scale"
                 ,
                 expression
                  atomExpression
                   numE
                    10
                )
         statement
          assignment
           var
           expression
            atomExpression
             call
              id
               offset
           assignOp
            =
           expression
            atomExpression
             call
              id
               Variable
              .
              call
               id
                new
               callInvoke
                (
                enumeration
                 expression
                  atomExpression
                   stringE
                    "offset"
                 ,
                 expression
                  atomExpression
                   numE
                    1000
                )
         statement
          assignment
           var
           expression
            atomExpression
             call
              id
               src
           assignOp
            =
           expression
            atomExpression
             nullE
              null
         statement
          assignment
           var
           expression
            atomExpression
             call
              id
               dst
           assignOp
            =
           expression
            atomExpression
             nullE
              null
         statement
          assignment
           var
           expression
            atomExpression
             call
              id
               dests
           assignOp
            =
           expression
            atomExpression
             listInit
              [
              ]
         statement
          forSt
           for
           (
           id
            i
           in
           expression
            expression
             atomExpression
              numE
               0
            compoundExpression
             arithRange
              ...
              expression
               atomExpression
                call
                 id
                  n
           )
           statement
            block
             {
             statement
              assignment
               expression
                atomExpression
                 call
                  id
                   src
               assignOp
                =
               expression
                atomExpression
                 call
                  id
                   Variable
                  .
                  call
                   id
                    new
                   callInvoke
                    (
                    enumeration
                     expression
                      atomExpression
                       stringE
                        "src"
                     ,
                     expression
                      atomExpression
                       call
                        id
                         i
                    )
             statement
              assignment
               expression
                atomExpression
                 call
                  id
                   dst
               assignOp
                =
               expression
                atomExpression
                 call
                  id
                   Variable
                  .
                  call
                   id
                    new
                   callInvoke
                    (
                    enumeration
                     expression
                      atomExpression
                       stringE
                        "dst"
                     ,
                     expression
                      atomExpression
                       call
                        id
                         i
                    )
             statement
              expression
               atomExpression
                call
                 id
                  dests
                 .
                 call
                  id
                   add
                  callInvoke
                   (
                   enumeration
                    expression
                     atomExpression
                      call
                       id
                        dst
                   )
             statement
              expression
               atomExpression
                call
                 id
                  StayConstraint
                 .
                 call
                  id
                   new
                  callInvoke
                   (
                   enumeration
                    expression
                     atomExpression
                      call
                       id
                        src
                    ,
                    expression
                     atomExpression
                      call
                       id
                        NORMAL
                   )
             statement
              expression
               atomExpression
                call
                 id
                  ScaleConstraint
                 .
                 call
                  id
                   new
                  callInvoke
                   (
                   enumeration
                    expression
                     atomExpression
                      call
                       id
                        src
                    ,
                    expression
                     atomExpression
                      call
                       id
                        scale
                    ,
                    expression
                     atomExpression
                      call
                       id
                        offset
                    ,
                    expression
                     atomExpression
                      call
                       id
                        dst
                    ,
                    expression
                     atomExpression
                      call
                       id
                        REQUIRED
                   )
             }
         statement
          expression
           atomExpression
            call
             id
              change
             .
             call
              id
               call
              callInvoke
               (
               enumeration
                expression
                 atomExpression
                  call
                   id
                    src
                ,
                expression
                 atomExpression
                  numE
                   17
               )
         statement
          assignment
           expression
            atomExpression
             call
              id
               total
           assignOp
            =
           expression
            expression
             atomExpression
              call
               id
                total
            compoundExpression
             arithAdd
              +
              expression
               atomExpression
                call
                 id
                  dst
                 .
                 call
                  id
                   value
         statement
          ifSt
           ifCond
            if
            (
            expression
             expression
              atomExpression
               call
                id
                 dst
                .
                call
                 id
                  value
             compoundExpression
              logic
               andLogic
                atomLogic
                 logicOp
                  !=
                 expression
                  atomExpression
                   numE
                    1170
            )
           statement
            expression
             atomExpression
              call
               id
                System
               .
               call
                id
                 print
                callInvoke
                 (
                 enumeration
                  expression
                   atomExpression
                    stringE
                     "Projection 1 failed"
                 )
         statement
          expression
           atomExpression
            call
             id
              change
             .
             call
              id
               call
              callInvoke
               (
               enumeration
                expression
                 atomExpression
                  call
                   id
                    dst
                ,
                expression
                 atomExpression
                  numE
                   1050
               )
         statement
          assignment
           expression
            atomExpression
             call
              id
               total
           assignOp
            =
           expression
            expression
             atomExpression
              call
               id
                total
            compoundExpression
             arithAdd
              +
              expression
               atomExpression
                call
                 id
                  src
                 .
                 call
                  id
                   value
         statement
          ifSt
           ifCond
            if
            (
            expression
             expression
              atomExpression
               call
                id
                 src
                .
                call
                 id
                  value
             compoundExpression
              logic
               andLogic
                atomLogic
                 logicOp
                  !=
                 expression
                  atomExpression
                   numE
                    5
            )
           statement
            expression
             atomExpression
              call
               id
                System
               .
               call
                id
                 print
                callInvoke
                 (
                 enumeration
                  expression
                   atomExpression
                    stringE
                     "Projection 2 failed"
                 )
         statement
          expression
           atomExpression
            call
             id
              change
             .
             call
              id
               call
              callInvoke
               (
               enumeration
                expression
                 atomExpression
                  call
                   id
                    scale
                ,
                expression
                 atomExpression
                  numE
                   5
               )
         statement
          forSt
           for
           (
           id
            i
           in
           expression
            expression
             atomExpression
              numE
               0
            compoundExpression
             arithRange
              ...
              expression
               expression
                atomExpression
                 call
                  id
                   n
               compoundExpression
                arithAdd
                 -
                 expression
                  atomExpression
                   numE
                    1
           )
           statement
            block
             {
             statement
              assignment
               expression
                atomExpression
                 call
                  id
                   total
               assignOp
                =
               expression
                expression
                 atomExpression
                  call
                   id
                    total
                compoundExpression
                 arithAdd
                  +
                  expression
                   atomExpression
                    call
                     id
                      dests
             statement
              expression
               expression
                atomExpression
                 listInit
                  [
                  enumeration
                   expression
                    atomExpression
                     call
                      id
                       i
                  ]
               compoundExpression
                .
                call
                 id
                  value
             statement
              ifSt
               ifCond
                if
                (
                expression
                 expression
                  expression
                   atomExpression
                    collectionElem
                     elem
                      call
                       id
                        dests
                     listInit
                      [
                      enumeration
                       expression
                        atomExpression
                         call
                          id
                           i
                      ]
                  compoundExpression
                   .
                   call
                    id
                     value
                 compoundExpression
                  logic
                   andLogic
                    atomLogic
                     logicOp
                      !=
                     expression
                      expression
                       atomExpression
                        call
                         id
                          i
                      compoundExpression
                       arithMul
                        *
                        expression
                         expression
                          atomExpression
                           numE
                            5
                         compoundExpression
                          arithAdd
                           +
                           expression
                            atomExpression
                             numE
                              1000
                )
               statement
                expression
                 atomExpression
                  call
                   id
                    System
                   .
                   call
                    id
                     print
                    callInvoke
                     (
                     enumeration
                      expression
                       atomExpression
                        stringE
                         "Projection 3 failed"
                     )
             }
         statement
          expression
           atomExpression
            call
             id
              change
             .
             call
              id
               call
              callInvoke
               (
               enumeration
                expression
                 atomExpression
                  call
                   id
                    offset
                ,
                expression
                 atomExpression
                  numE
                   2000
               )
         statement
          forSt
           for
           (
           id
            i
           in
           expression
            expression
             atomExpression
              numE
               0
            compoundExpression
             arithRange
              ...
              expression
               expression
                atomExpression
                 call
                  id
                   n
               compoundExpression
                arithAdd
                 -
                 expression
                  atomExpression
                   numE
                    1
           )
           statement
            block
             {
             statement
              assignment
               expression
                atomExpression
                 call
                  id
                   total
               assignOp
                =
               expression
                expression
                 atomExpression
                  call
                   id
                    total
                compoundExpression
                 arithAdd
                  +
                  expression
                   atomExpression
                    call
                     id
                      dests
             statement
              expression
               expression
                atomExpression
                 listInit
                  [
                  enumeration
                   expression
                    atomExpression
                     call
                      id
                       i
                  ]
               compoundExpression
                .
                call
                 id
                  value
             statement
              ifSt
               ifCond
                if
                (
                expression
                 expression
                  expression
                   atomExpression
                    collectionElem
                     elem
                      call
                       id
                        dests
                     listInit
                      [
                      enumeration
                       expression
                        atomExpression
                         call
                          id
                           i
                      ]
                  compoundExpression
                   .
                   call
                    id
                     value
                 compoundExpression
                  logic
                   andLogic
                    atomLogic
                     logicOp
                      !=
                     expression
                      expression
                       atomExpression
                        call
                         id
                          i
                      compoundExpression
                       arithMul
                        *
                        expression
                         expression
                          atomExpression
                           numE
                            5
                         compoundExpression
                          arithAdd
                           +
                           expression
                            atomExpression
                             numE
                              2000
                )
               statement
                expression
                 atomExpression
                  call
                   id
                    System
                   .
                   call
                    id
                     print
                    callInvoke
                     (
                     enumeration
                      expression
                       atomExpression
                        stringE
                         "Projection 4 failed"
                     )
             }
         }
 fileAtom
  statement
   assignment
    var
    expression
     atomExpression
      call
       id
        start
    assignOp
     =
    expression
     atomExpression
      call
       id
        System
       .
       call
        id
         clock
 fileAtom
  statement
   forSt
    for
    (
    id
     i
    in
    expression
     expression
      atomExpression
       numE
        0
     compoundExpression
      arithRange
       ...
       expression
        atomExpression
         numE
          40
    )
    statement
     block
      {
      statement
       expression
        atomExpression
         call
          id
           chainTest
          .
          call
           id
            call
           callInvoke
            (
            enumeration
             expression
              atomExpression
               numE
                100
            )
      statement
       expression
        atomExpression
         call
          id
           projectionTest
          .
          call
           id
            call
           callInvoke
            (
            enumeration
             expression
              atomExpression
               numE
                100
            )
      }
 fileAtom
  statement
   expression
    atomExpression
     call
      id
       System
      .
      call
       id
        print
       callInvoke
        (
        enumeration
         expression
          atomExpression
           call
            id
             total
        )
 fileAtom
  statement
   expression
    atomExpression
     call
      id
       System
      .
      call
       id
        print
       callInvoke
        (
        enumeration
         expression
          atomExpression
           stringE
            "elapsed: %(System.clock - start)"
        )
 <EOF>
