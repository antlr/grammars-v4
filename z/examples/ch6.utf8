\chapter{\Betw\ model, initialisation and finalisation}\label{ch6}

‚îÄ section ch6 parents ch5 ‚îî 

\section{Summing values}\label{ch6.sumValue}

Originally from Appendix~D, p.$226$.
\begin{LADef}[Summing values from purse payments]
‚ï∑ sumValue : ùîΩ PayDetails ‚Üí ‚Ñï |
 sumValue { } = 0 
‚àÄ pds : ùîΩ PayDetails ; PayDetails | Œ∏ PayDetails ‚àâ pds ‚¶Å sumValue ( { Œ∏ PayDetails } ‚à™ pds ) = value + sumValue pds ‚îî ~\end{LADef}

\section{Initialisation}\label{ch6.init}

\begin{LSDef}[Between world initial state]
‚îå BetweenInitState 
BetweenWorld ‚Ä≤ |
 { readExceptionLog , bot } ‚à™ ‚ãÉ { cpd : CounterPartyDetails ‚¶Å { startFrom cpd , startTo cpd } } ‚äÜ ether‚Ä≤ ‚îî ~\end{LSDef}

\subsection*{Automation for BetwInitIn}

These rules are similar to those found in~\ref{ch4.valTransferOp} for $CounterPartyDetails$.
\begin{LFRT}[Payment details $from$ purse type]
\begin{zeves-theorem}{frule fPayDetailsFromType}
   x \in PayDetails \implies x.from \in NAMES
\end{theorem}~\end{LFRT}

\begin{LFRT}[Payment details $to$ purse type]
\begin{zeves-theorem}{frule fPayDetailsToType}
   x \in PayDetails \implies x.to \in NAMES
\end{theorem}~\end{LFRT}

\begin{LFRT}[Payment details $value$ type]
\begin{zeves-theorem}{frule fPayDetailsValueType}
   x \in PayDetails \implies x.value \in NAT
\end{theorem}~\end{LFRT}

These rules are similar to those found in~\ref{ch4.valTransferOp}
for $startFrom$ and $startTo$, but for schema $CounterPartyDetails$
rather than $PayDetails$. Nevertheless, as $PayDetails$ has an
invariant, we cannot have an $frule$ like
$fCounterPartyDetailsInSetMember$. Thus, the proofs for the $grules$
is slightly different at the end. Also, we need to include the
relationship between $req$ and $PayDetails$ explicitly.
\begin{LFRT}[$PayDetails$ binding type]
\begin{zeves-theorem}{frule fPayDetailsMember}
    x \in  PayDetails \implies  x \in  \lblot from: NAME; fromSeqNo: \nat; \\
        \t1 to: NAME; toSeqNo: \nat; value: \nat \rblot
\end{theorem}~\end{LFRT}

\begin{LGRT}[$req$ $MESSAGE$ relational type]
\begin{zeves-theorem}{grule gMESSAGEReqRelType}
   req \in  \lblot from: NAME; fromSeqNo: \nat; \\
        \t1 to: NAME; toSeqNo: \nat; value: \nat \rblot  \rel MESSAGE
\end{theorem}~\end{LGRT}

\begin{LGRT}[$req$ $MESSAGE$ partial function type]
\begin{zeves-theorem}{grule gMESSAGEReqPFunType}
  req \in  \lblot from: NAME; fromSeqNo: \nat; \\
        \t1 to: NAME; toSeqNo: \nat; value: \nat \rblot  \pfun MESSAGE
\end{theorem}~\end{LGRT}

\begin{LGRT}[$req$ $MESSAGE$ relational non-maximal type]
\begin{zeves-theorem}{grule gMESSAGEReqPayDetailsRelType}
   req \in PayDetails \rel MESSAGE
\end{theorem}~\end{LGRT}

\begin{LGRT}[$req$ $MESSAGE$ partial injection type]
\begin{zeves-theorem}{grule gMESSAGEReqPInjType}
   req \in \lblot from: NAME; fromSeqNo: \nat; \\
        \t1 to: NAME; toSeqNo: \nat; value: \nat \rblot \pinj MESSAGE
\end{theorem}~\end{LGRT}

The next rule is necessary to tell \zeves\ about the (non-maximal) type of the result of
applying the given message to the inverse of the $req$ message. Although this result is trivially
obvious, it is quite hard to prove. A simple suggestion around this, would be to give a variable
(with declared type) named $v$ as
\begin{gzed}
    v \in PayDetails \land v = req\inv
\end{gzed}
\begin{LRRT}[$req$ $MESSAGE$ inverse maximal type]
\begin{zeves-theorem}{rule rMESSAGEReqInvMaxType}
   \forall m: MESSAGE | m \in \ran req @ req\inv m \in \\ \t1
      \lblot from: NAMES; fromSeqNo: NAT; to: NAMES; toSeqNo: NAT; value: NAT \rblot
\end{theorem}~\end{LRRT}

\subsection*{$BetwInitIn$}

In this schema the use of $(req\inv m?)$ directly is a bad idea for \zeves\ automation,
as it incurs rather complex lemmas. To avoid this, one could simply declare a variable
to hold such value. In this way, \zeves\ would know the type of this expression, the main
problem appearing in the domain check. Nevertheless, for the sake of keeping to the original
as much as possible, we left it unchanged.
\begin{LSDef}[Between world initialisation input]
‚îå BetwInitIn 
g? : AIN 
m? : MESSAGE 
name? : NAMES |
 m? ‚àà ran req ‚áí g? = transfer ( Œº TransferDetails | from = ( ( req ‚àº ) m? ) . from ‚àß to = ( ( req ‚àº ) m? ) . to ‚àß value = ( ( req ‚àº ) m? ) . value ) 
m? ‚àâ ran req ‚áí g? = aNullIn ‚îî ~\end{LSDef}

\section{Finalisation}\label{ch6.final}

\begin{LSDef}[Between world finalisation state]
‚îå BetwFinState 
BetweenWorld 
GlobalWorld |
 dom gAuthPurse = dom conAuthPurse 
‚àÄ name : dom conAuthPurse ‚¶Å ( gAuthPurse name ) . balance = ( conAuthPurse name ) . balance ‚àß ( gAuthPurse name ) . lost = sumValue ( ( definitelyLost ‚à™ maybeLost ) ‚à© { ld : PayDetails | ld . from = name } ) ‚îî ~\end{LSDef}

\begin{LSDef}[Between world finalisation output]
‚îå BetwFinOut 
g! : AOUT 
m! : MESSAGE |
 g! = aNullOut ‚îî ~\end{LSDef}

\newpage
\section{Summary}\label{ch6.summary}

\ldefsummary \lthmsummary \lthmaddeddefsummary \lthmaddedthmsummary \lzevessummary 