program
 classDefine
  Class
  List
  inherits
  IO
  {
  feature
   isNil
   (
   )
   :
   Bool
   {
   expression
    {
    expression
     abort
     (
     )
    ;
    expression
     true
    ;
    }
   }
  ;
  feature
   cons
   (
   formal
    hd
    :
    Int
   )
   :
   Cons
   {
   expression
    (
    expression
     let
     new_cell
     :
     Cons
     <-
     expression
      new
      Cons
     in
     expression
      expression
       new_cell
      .
      init
      (
      expression
       hd
      ,
      expression
       self
      )
    )
   }
  ;
  feature
   car
   (
   )
   :
   Int
   {
   expression
    {
    expression
     abort
     (
     )
    ;
    expression
     new
     Int
    ;
    }
   }
  ;
  feature
   cdr
   (
   )
   :
   List
   {
   expression
    {
    expression
     abort
     (
     )
    ;
    expression
     new
     List
    ;
    }
   }
  ;
  feature
   rev
   (
   )
   :
   List
   {
   expression
    cdr
    (
    )
   }
  ;
  feature
   sort
   (
   )
   :
   List
   {
   expression
    cdr
    (
    )
   }
  ;
  feature
   insert
   (
   formal
    i
    :
    Int
   )
   :
   List
   {
   expression
    cdr
    (
    )
   }
  ;
  feature
   rcons
   (
   formal
    i
    :
    Int
   )
   :
   List
   {
   expression
    cdr
    (
    )
   }
  ;
  feature
   print_list
   (
   )
   :
   Object
   {
   expression
    abort
    (
    )
   }
  ;
  }
 ;
 classDefine
  Class
  Cons
  inherits
  List
  {
  feature
   xcar
   :
   Int
  ;
  feature
   xcdr
   :
   List
  ;
  feature
   isNil
   (
   )
   :
   Bool
   {
   expression
    false
   }
  ;
  feature
   init
   (
   formal
    hd
    :
    Int
   ,
   formal
    tl
    :
    List
   )
   :
   Cons
   {
   expression
    {
    expression
     xcar
     <-
     expression
      hd
    ;
    expression
     xcdr
     <-
     expression
      tl
    ;
    expression
     self
    ;
    }
   }
  ;
  feature
   car
   (
   )
   :
   Int
   {
   expression
    xcar
   }
  ;
  feature
   cdr
   (
   )
   :
   List
   {
   expression
    xcdr
   }
  ;
  feature
   rev
   (
   )
   :
   List
   {
   expression
    expression
     (
     expression
      expression
       xcdr
      .
      rev
      (
      )
     )
    .
    rcons
    (
    expression
     xcar
    )
   }
  ;
  feature
   sort
   (
   )
   :
   List
   {
   expression
    expression
     (
     expression
      expression
       xcdr
      .
      sort
      (
      )
     )
    .
    insert
    (
    expression
     xcar
    )
   }
  ;
  feature
   insert
   (
   formal
    i
    :
    Int
   )
   :
   List
   {
   expression
    if
    expression
     expression
      i
     <
     expression
      xcar
    then
    expression
     expression
      (
      expression
       new
       Cons
      )
     .
     init
     (
     expression
      i
     ,
     expression
      self
     )
    else
    expression
     expression
      (
      expression
       new
       Cons
      )
     .
     init
     (
     expression
      xcar
     ,
     expression
      expression
       xcdr
      .
      insert
      (
      expression
       i
      )
     )
    fi
   }
  ;
  feature
   rcons
   (
   formal
    i
    :
    Int
   )
   :
   List
   {
   expression
    expression
     (
     expression
      new
      Cons
     )
    .
    init
    (
    expression
     xcar
    ,
    expression
     expression
      xcdr
     .
     rcons
     (
     expression
      i
     )
    )
   }
  ;
  feature
   print_list
   (
   )
   :
   Object
   {
   expression
    {
    expression
     out_int
     (
     expression
      xcar
     )
    ;
    expression
     out_string
     (
     expression
      "\n"
     )
    ;
    expression
     expression
      xcdr
     .
     print_list
     (
     )
    ;
    }
   }
  ;
  }
 ;
 classDefine
  Class
  Nil
  inherits
  List
  {
  feature
   isNil
   (
   )
   :
   Bool
   {
   expression
    true
   }
  ;
  feature
   rev
   (
   )
   :
   List
   {
   expression
    self
   }
  ;
  feature
   sort
   (
   )
   :
   List
   {
   expression
    self
   }
  ;
  feature
   insert
   (
   formal
    i
    :
    Int
   )
   :
   List
   {
   expression
    rcons
    (
    expression
     i
    )
   }
  ;
  feature
   rcons
   (
   formal
    i
    :
    Int
   )
   :
   List
   {
   expression
    expression
     (
     expression
      new
      Cons
     )
    .
    init
    (
    expression
     i
    ,
    expression
     self
    )
   }
  ;
  feature
   print_list
   (
   )
   :
   Object
   {
   expression
    true
   }
  ;
  }
 ;
 classDefine
  Class
  Main
  inherits
  IO
  {
  feature
   l
   :
   List
  ;
  feature
   iota
   (
   formal
    i
    :
    Int
   )
   :
   List
   {
   expression
    {
    expression
     l
     <-
     expression
      new
      Nil
    ;
    expression
     (
     expression
      let
      j
      :
      Int
      <-
      expression
       0
      in
      expression
       while
       expression
        expression
         j
        <
        expression
         i
       loop
       expression
        {
        expression
         l
         <-
         expression
          expression
           (
           expression
            new
            Cons
           )
          .
          init
          (
          expression
           j
          ,
          expression
           l
          )
        ;
        expression
         j
         <-
         expression
          expression
           j
          +
          expression
           1
        ;
        }
       pool
     )
    ;
    expression
     l
    ;
    }
   }
  ;
  feature
   main
   (
   )
   :
   Object
   {
   expression
    {
    expression
     out_string
     (
     expression
      "How many numbers to sort?"
     )
    ;
    expression
     expression
      expression
       expression
        iota
        (
        expression
         in_int
         (
         )
        )
       .
       rev
       (
       )
      .
      sort
      (
      )
     .
     print_list
     (
     )
    ;
    }
   }
  ;
  }
 ;
 <EOF>
