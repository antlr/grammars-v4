program
 classDefine
  Class
  Book
  inherits
  IO
  {
  feature
   title
   :
   String
  ;
  feature
   author
   :
   String
  ;
  feature
   initBook
   (
   formal
    title_p
    :
    String
   ,
   formal
    author_p
    :
    String
   )
   :
   Book
   {
   expression
    {
    expression
     title
     <-
     expression
      title_p
    ;
    expression
     author
     <-
     expression
      author_p
    ;
    expression
     self
    ;
    }
   }
  ;
  feature
   print
   (
   )
   :
   Book
   {
   expression
    {
    expression
     expression
      expression
       out_string
       (
       expression
        "title:      "
       )
      .
      out_string
      (
      expression
       title
      )
     .
     out_string
     (
     expression
      "\n"
     )
    ;
    expression
     expression
      expression
       out_string
       (
       expression
        "author:     "
       )
      .
      out_string
      (
      expression
       author
      )
     .
     out_string
     (
     expression
      "\n"
     )
    ;
    expression
     self
    ;
    }
   }
  ;
  }
 ;
 classDefine
  Class
  Article
  inherits
  Book
  {
  feature
   per_title
   :
   String
  ;
  feature
   initArticle
   (
   formal
    title_p
    :
    String
   ,
   formal
    author_p
    :
    String
   ,
   formal
    per_title_p
    :
    String
   )
   :
   Article
   {
   expression
    {
    expression
     initBook
     (
     expression
      title_p
     ,
     expression
      author_p
     )
    ;
    expression
     per_title
     <-
     expression
      per_title_p
    ;
    expression
     self
    ;
    }
   }
  ;
  feature
   print
   (
   )
   :
   Book
   {
   expression
    {
    expression
     expression
      self
     @
     Book
     .
     print
     (
     )
    ;
    expression
     expression
      expression
       out_string
       (
       expression
        "periodical:  "
       )
      .
      out_string
      (
      expression
       per_title
      )
     .
     out_string
     (
     expression
      "\n"
     )
    ;
    expression
     self
    ;
    }
   }
  ;
  }
 ;
 classDefine
  Class
  BookList
  inherits
  IO
  {
  feature
   isNil
   (
   )
   :
   Bool
   {
   expression
    {
    expression
     abort
     (
     )
    ;
    expression
     true
    ;
    }
   }
  ;
  feature
   cons
   (
   formal
    hd
    :
    Book
   )
   :
   Cons
   {
   expression
    (
    expression
     let
     new_cell
     :
     Cons
     <-
     expression
      new
      Cons
     in
     expression
      expression
       new_cell
      .
      init
      (
      expression
       hd
      ,
      expression
       self
      )
    )
   }
  ;
  feature
   car
   (
   )
   :
   Book
   {
   expression
    {
    expression
     abort
     (
     )
    ;
    expression
     new
     Book
    ;
    }
   }
  ;
  feature
   cdr
   (
   )
   :
   BookList
   {
   expression
    {
    expression
     abort
     (
     )
    ;
    expression
     new
     BookList
    ;
    }
   }
  ;
  feature
   print_list
   (
   )
   :
   Object
   {
   expression
    abort
    (
    )
   }
  ;
  }
 ;
 classDefine
  Class
  Cons
  inherits
  BookList
  {
  feature
   xcar
   :
   Book
  ;
  feature
   xcdr
   :
   BookList
  ;
  feature
   isNil
   (
   )
   :
   Bool
   {
   expression
    false
   }
  ;
  feature
   init
   (
   formal
    hd
    :
    Book
   ,
   formal
    tl
    :
    BookList
   )
   :
   Cons
   {
   expression
    {
    expression
     xcar
     <-
     expression
      hd
    ;
    expression
     xcdr
     <-
     expression
      tl
    ;
    expression
     self
    ;
    }
   }
  ;
  feature
   car
   (
   )
   :
   Book
   {
   expression
    xcar
   }
  ;
  feature
   cdr
   (
   )
   :
   BookList
   {
   expression
    xcdr
   }
  ;
  feature
   print_list
   (
   )
   :
   Object
   {
   expression
    {
    expression
     case
     expression
      expression
       xcar
      .
      print
      (
      )
     of
     dummy
     :
     Book
     =>
     expression
      out_string
      (
      expression
       "- dynamic type was Book -\n"
      )
     ;
     dummy
     :
     Article
     =>
     expression
      out_string
      (
      expression
       "- dynamic type was Article -\n"
      )
     ;
     esac
    ;
    expression
     expression
      xcdr
     .
     print_list
     (
     )
    ;
    }
   }
  ;
  }
 ;
 classDefine
  Class
  Nil
  inherits
  BookList
  {
  feature
   isNil
   (
   )
   :
   Bool
   {
   expression
    true
   }
  ;
  feature
   print_list
   (
   )
   :
   Object
   {
   expression
    true
   }
  ;
  }
 ;
 classDefine
  Class
  Main
  {
  feature
   books
   :
   BookList
  ;
  feature
   main
   (
   )
   :
   Object
   {
   expression
    (
    expression
     let
     a_book
     :
     Book
     <-
     expression
      expression
       (
       expression
        new
        Book
       )
      .
      initBook
      (
      expression
       "Compilers, Principles, Techniques, and Tools"
      ,
      expression
       "Aho, Sethi, and Ullman"
      )
     in
     expression
      (
      expression
       let
       an_article
       :
       Article
       <-
       expression
        expression
         (
         expression
          new
          Article
         )
        .
        initArticle
        (
        expression
         "The Top 100 CD_ROMs"
        ,
        expression
         "Ulanoff"
        ,
        expression
         "PC Magazine"
        )
       in
       expression
        {
        expression
         books
         <-
         expression
          expression
           expression
            (
            expression
             new
             Nil
            )
           .
           cons
           (
           expression
            a_book
           )
          .
          cons
          (
          expression
           an_article
          )
        ;
        expression
         expression
          books
         .
         print_list
         (
         )
        ;
        }
      )
    )
   }
  ;
  }
 ;
 <EOF>
