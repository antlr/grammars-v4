program
 classDefine
  class
  Foo
  inherits
  Bazz
  {
  feature
   a
   :
   Razz
   <-
   expression
    case
    expression
     self
    of
    n
    :
    Razz
    =>
    expression
     (
     expression
      new
      Bar
     )
    ;
    n
    :
    Foo
    =>
    expression
     (
     expression
      new
      Razz
     )
    ;
    n
    :
    Bar
    =>
    expression
     n
    ;
    esac
  ;
  feature
   b
   :
   Int
   <-
   expression
    expression
     expression
      expression
       expression
        a
       .
       doh
       (
       )
      +
      expression
       expression
        g
       .
       doh
       (
       )
     +
     expression
      doh
      (
      )
    +
    expression
     printh
     (
     )
  ;
  feature
   doh
   (
   )
   :
   Int
   {
   expression
    (
    expression
     let
     i
     :
     Int
     <-
     expression
      h
     in
     expression
      {
      expression
       h
       <-
       expression
        expression
         h
        +
        expression
         2
      ;
      expression
       i
      ;
      }
    )
   }
  ;
  }
 ;
 classDefine
  class
  Bar
  inherits
  Razz
  {
  feature
   c
   :
   Int
   <-
   expression
    doh
    (
    )
  ;
  feature
   d
   :
   Object
   <-
   expression
    printh
    (
    )
  ;
  }
 ;
 classDefine
  class
  Razz
  inherits
  Foo
  {
  feature
   e
   :
   Bar
   <-
   expression
    case
    expression
     self
    of
    n
    :
    Razz
    =>
    expression
     (
     expression
      new
      Bar
     )
    ;
    n
    :
    Bar
    =>
    expression
     n
    ;
    esac
  ;
  feature
   f
   :
   Int
   <-
   expression
    expression
     expression
      expression
       expression
        expression
         a
        @
        Bazz
        .
        doh
        (
        )
       +
       expression
        expression
         g
        .
        doh
        (
        )
      +
      expression
       expression
        e
       .
       doh
       (
       )
     +
     expression
      doh
      (
      )
    +
    expression
     printh
     (
     )
  ;
  }
 ;
 classDefine
  class
  Bazz
  inherits
  IO
  {
  feature
   h
   :
   Int
   <-
   expression
    1
  ;
  feature
   g
   :
   Foo
   <-
   expression
    case
    expression
     self
    of
    n
    :
    Bazz
    =>
    expression
     (
     expression
      new
      Foo
     )
    ;
    n
    :
    Razz
    =>
    expression
     (
     expression
      new
      Bar
     )
    ;
    n
    :
    Foo
    =>
    expression
     (
     expression
      new
      Razz
     )
    ;
    n
    :
    Bar
    =>
    expression
     n
    ;
    esac
  ;
  feature
   i
   :
   Object
   <-
   expression
    printh
    (
    )
  ;
  feature
   printh
   (
   )
   :
   Int
   {
   expression
    {
    expression
     out_int
     (
     expression
      h
     )
    ;
    expression
     0
    ;
    }
   }
  ;
  feature
   doh
   (
   )
   :
   Int
   {
   expression
    (
    expression
     let
     i
     :
     Int
     <-
     expression
      h
     in
     expression
      {
      expression
       h
       <-
       expression
        expression
         h
        +
        expression
         1
      ;
      expression
       i
      ;
      }
    )
   }
  ;
  }
 ;
 classDefine
  class
  Main
  {
  feature
   a
   :
   Bazz
   <-
   expression
    new
    Bazz
  ;
  feature
   b
   :
   Foo
   <-
   expression
    new
    Foo
  ;
  feature
   c
   :
   Razz
   <-
   expression
    new
    Razz
  ;
  feature
   d
   :
   Bar
   <-
   expression
    new
    Bar
  ;
  feature
   main
   (
   )
   :
   String
   {
   expression
    "do nothing"
   }
  ;
  }
 ;
 <EOF>
