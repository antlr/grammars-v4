program
 classDefine
  class
  A
  {
  feature
   var
   :
   Int
   <-
   expression
    0
  ;
  feature
   value
   (
   )
   :
   Int
   {
   expression
    var
   }
  ;
  feature
   set_var
   (
   formal
    num
    :
    Int
   )
   :
   SELF_TYPE
   {
   expression
    {
    expression
     var
     <-
     expression
      num
    ;
    expression
     self
    ;
    }
   }
  ;
  feature
   method1
   (
   formal
    num
    :
    Int
   )
   :
   SELF_TYPE
   {
   expression
    self
   }
  ;
  feature
   method2
   (
   formal
    num1
    :
    Int
   ,
   formal
    num2
    :
    Int
   )
   :
   B
   {
   expression
    (
    expression
     let
     x
     :
     Int
     in
     expression
      {
      expression
       x
       <-
       expression
        expression
         num1
        +
        expression
         num2
      ;
      expression
       expression
        (
        expression
         new
         B
        )
       .
       set_var
       (
       expression
        x
       )
      ;
      }
    )
   }
  ;
  feature
   method3
   (
   formal
    num
    :
    Int
   )
   :
   C
   {
   expression
    (
    expression
     let
     x
     :
     Int
     in
     expression
      {
      expression
       x
       <-
       expression
        ~
        expression
         num
      ;
      expression
       expression
        (
        expression
         new
         C
        )
       .
       set_var
       (
       expression
        x
       )
      ;
      }
    )
   }
  ;
  feature
   method4
   (
   formal
    num1
    :
    Int
   ,
   formal
    num2
    :
    Int
   )
   :
   D
   {
   expression
    if
    expression
     expression
      num2
     <
     expression
      num1
    then
    expression
     (
     expression
      let
      x
      :
      Int
      in
      expression
       {
       expression
        x
        <-
        expression
         expression
          num1
         -
         expression
          num2
       ;
       expression
        expression
         (
         expression
          new
          D
         )
        .
        set_var
        (
        expression
         x
        )
       ;
       }
     )
    else
    expression
     (
     expression
      let
      x
      :
      Int
      in
      expression
       {
       expression
        x
        <-
        expression
         expression
          num2
         -
         expression
          num1
       ;
       expression
        expression
         (
         expression
          new
          D
         )
        .
        set_var
        (
        expression
         x
        )
       ;
       }
     )
    fi
   }
  ;
  feature
   method5
   (
   formal
    num
    :
    Int
   )
   :
   E
   {
   expression
    (
    expression
     let
     x
     :
     Int
     <-
     expression
      1
     in
     expression
      {
      expression
       (
       expression
        let
        y
        :
        Int
        <-
        expression
         1
        in
        expression
         while
         expression
          expression
           y
          <=
          expression
           num
         loop
         expression
          {
          expression
           x
           <-
           expression
            expression
             x
            *
            expression
             y
          ;
          expression
           y
           <-
           expression
            expression
             y
            +
            expression
             1
          ;
          }
         pool
       )
      ;
      expression
       expression
        (
        expression
         new
         E
        )
       .
       set_var
       (
       expression
        x
       )
      ;
      }
    )
   }
  ;
  }
 ;
 classDefine
  class
  B
  inherits
  A
  {
  feature
   method5
   (
   formal
    num
    :
    Int
   )
   :
   E
   {
   expression
    (
    expression
     let
     x
     :
     Int
     in
     expression
      {
      expression
       x
       <-
       expression
        expression
         num
        *
        expression
         num
      ;
      expression
       expression
        (
        expression
         new
         E
        )
       .
       set_var
       (
       expression
        x
       )
      ;
      }
    )
   }
  ;
  }
 ;
 classDefine
  class
  C
  inherits
  B
  {
  feature
   method6
   (
   formal
    num
    :
    Int
   )
   :
   A
   {
   expression
    (
    expression
     let
     x
     :
     Int
     in
     expression
      {
      expression
       x
       <-
       expression
        ~
        expression
         num
      ;
      expression
       expression
        (
        expression
         new
         A
        )
       .
       set_var
       (
       expression
        x
       )
      ;
      }
    )
   }
  ;
  feature
   method5
   (
   formal
    num
    :
    Int
   )
   :
   E
   {
   expression
    (
    expression
     let
     x
     :
     Int
     in
     expression
      {
      expression
       x
       <-
       expression
        expression
         expression
          num
         *
         expression
          num
        *
        expression
         num
      ;
      expression
       expression
        (
        expression
         new
         E
        )
       .
       set_var
       (
       expression
        x
       )
      ;
      }
    )
   }
  ;
  }
 ;
 classDefine
  class
  D
  inherits
  B
  {
  feature
   method7
   (
   formal
    num
    :
    Int
   )
   :
   Bool
   {
   expression
    (
    expression
     let
     x
     :
     Int
     <-
     expression
      num
     in
     expression
      if
      expression
       expression
        x
       <
       expression
        0
      then
      expression
       method7
       (
       expression
        ~
        expression
         x
       )
      else
      expression
       if
       expression
        expression
         0
        =
        expression
         x
       then
       expression
        true
       else
       expression
        if
        expression
         expression
          1
         =
         expression
          x
        then
        expression
         false
        else
        expression
         if
         expression
          expression
           2
          =
          expression
           x
         then
         expression
          false
         else
         expression
          method7
          (
          expression
           expression
            x
           -
           expression
            3
          )
         fi
        fi
       fi
      fi
    )
   }
  ;
  }
 ;
 classDefine
  class
  E
  inherits
  D
  {
  feature
   method6
   (
   formal
    num
    :
    Int
   )
   :
   A
   {
   expression
    (
    expression
     let
     x
     :
     Int
     in
     expression
      {
      expression
       x
       <-
       expression
        expression
         num
        /
        expression
         8
      ;
      expression
       expression
        (
        expression
         new
         A
        )
       .
       set_var
       (
       expression
        x
       )
      ;
      }
    )
   }
  ;
  }
 ;
 classDefine
  class
  A2I
  {
  feature
   c2i
   (
   formal
    char
    :
    String
   )
   :
   Int
   {
   expression
    if
    expression
     expression
      char
     =
     expression
      "0"
    then
    expression
     0
    else
    expression
     if
     expression
      expression
       char
      =
      expression
       "1"
     then
     expression
      1
     else
     expression
      if
      expression
       expression
        char
       =
       expression
        "2"
      then
      expression
       2
      else
      expression
       if
       expression
        expression
         char
        =
        expression
         "3"
       then
       expression
        3
       else
       expression
        if
        expression
         expression
          char
         =
         expression
          "4"
        then
        expression
         4
        else
        expression
         if
         expression
          expression
           char
          =
          expression
           "5"
         then
         expression
          5
         else
         expression
          if
          expression
           expression
            char
           =
           expression
            "6"
          then
          expression
           6
          else
          expression
           if
           expression
            expression
             char
            =
            expression
             "7"
           then
           expression
            7
           else
           expression
            if
            expression
             expression
              char
             =
             expression
              "8"
            then
            expression
             8
            else
            expression
             if
             expression
              expression
               char
              =
              expression
               "9"
             then
             expression
              9
             else
             expression
              {
              expression
               abort
               (
               )
              ;
              expression
               0
              ;
              }
             fi
            fi
           fi
          fi
         fi
        fi
       fi
      fi
     fi
    fi
   }
  ;
  feature
   i2c
   (
   formal
    i
    :
    Int
   )
   :
   String
   {
   expression
    if
    expression
     expression
      i
     =
     expression
      0
    then
    expression
     "0"
    else
    expression
     if
     expression
      expression
       i
      =
      expression
       1
     then
     expression
      "1"
     else
     expression
      if
      expression
       expression
        i
       =
       expression
        2
      then
      expression
       "2"
      else
      expression
       if
       expression
        expression
         i
        =
        expression
         3
       then
       expression
        "3"
       else
       expression
        if
        expression
         expression
          i
         =
         expression
          4
        then
        expression
         "4"
        else
        expression
         if
         expression
          expression
           i
          =
          expression
           5
         then
         expression
          "5"
         else
         expression
          if
          expression
           expression
            i
           =
           expression
            6
          then
          expression
           "6"
          else
          expression
           if
           expression
            expression
             i
            =
            expression
             7
           then
           expression
            "7"
           else
           expression
            if
            expression
             expression
              i
             =
             expression
              8
            then
            expression
             "8"
            else
            expression
             if
             expression
              expression
               i
              =
              expression
               9
             then
             expression
              "9"
             else
             expression
              {
              expression
               abort
               (
               )
              ;
              expression
               ""
              ;
              }
             fi
            fi
           fi
          fi
         fi
        fi
       fi
      fi
     fi
    fi
   }
  ;
  feature
   a2i
   (
   formal
    s
    :
    String
   )
   :
   Int
   {
   expression
    if
    expression
     expression
      expression
       s
      .
      length
      (
      )
     =
     expression
      0
    then
    expression
     0
    else
    expression
     if
     expression
      expression
       expression
        s
       .
       substr
       (
       expression
        0
       ,
       expression
        1
       )
      =
      expression
       "-"
     then
     expression
      ~
      expression
       a2i_aux
       (
       expression
        expression
         s
        .
        substr
        (
        expression
         1
        ,
        expression
         expression
          expression
           s
          .
          length
          (
          )
         -
         expression
          1
        )
       )
     else
     expression
      if
      expression
       expression
        expression
         s
        .
        substr
        (
        expression
         0
        ,
        expression
         1
        )
       =
       expression
        "+"
      then
      expression
       a2i_aux
       (
       expression
        expression
         s
        .
        substr
        (
        expression
         1
        ,
        expression
         expression
          expression
           s
          .
          length
          (
          )
         -
         expression
          1
        )
       )
      else
      expression
       a2i_aux
       (
       expression
        s
       )
      fi
     fi
    fi
   }
  ;
  feature
   a2i_aux
   (
   formal
    s
    :
    String
   )
   :
   Int
   {
   expression
    (
    expression
     let
     int
     :
     Int
     <-
     expression
      0
     in
     expression
      {
      expression
       (
       expression
        let
        j
        :
        Int
        <-
        expression
         expression
          s
         .
         length
         (
         )
        in
        expression
         (
         expression
          let
          i
          :
          Int
          <-
          expression
           0
          in
          expression
           while
           expression
            expression
             i
            <
            expression
             j
           loop
           expression
            {
            expression
             int
             <-
             expression
              expression
               expression
                int
               *
               expression
                10
              +
              expression
               c2i
               (
               expression
                expression
                 s
                .
                substr
                (
                expression
                 i
                ,
                expression
                 1
                )
               )
            ;
            expression
             i
             <-
             expression
              expression
               i
              +
              expression
               1
            ;
            }
           pool
         )
       )
      ;
      expression
       int
      ;
      }
    )
   }
  ;
  feature
   i2a
   (
   formal
    i
    :
    Int
   )
   :
   String
   {
   expression
    if
    expression
     expression
      i
     =
     expression
      0
    then
    expression
     "0"
    else
    expression
     if
     expression
      expression
       0
      <
      expression
       i
     then
     expression
      i2a_aux
      (
      expression
       i
      )
     else
     expression
      expression
       "-"
      .
      concat
      (
      expression
       i2a_aux
       (
       expression
        expression
         i
        *
        expression
         ~
         expression
          1
       )
      )
     fi
    fi
   }
  ;
  feature
   i2a_aux
   (
   formal
    i
    :
    Int
   )
   :
   String
   {
   expression
    if
    expression
     expression
      i
     =
     expression
      0
    then
    expression
     ""
    else
    expression
     (
     expression
      let
      next
      :
      Int
      <-
      expression
       expression
        i
       /
       expression
        10
      in
      expression
       expression
        i2a_aux
        (
        expression
         next
        )
       .
       concat
       (
       expression
        i2c
        (
        expression
         expression
          i
         -
         expression
          expression
           next
          *
          expression
           10
        )
       )
     )
    fi
   }
  ;
  }
 ;
 classDefine
  class
  Main
  inherits
  IO
  {
  feature
   char
   :
   String
  ;
  feature
   avar
   :
   A
  ;
  feature
   a_var
   :
   A
  ;
  feature
   flag
   :
   Bool
   <-
   expression
    true
  ;
  feature
   menu
   (
   )
   :
   String
   {
   expression
    {
    expression
     out_string
     (
     expression
      "\n\tTo add a number to "
     )
    ;
    expression
     print
     (
     expression
      avar
     )
    ;
    expression
     out_string
     (
     expression
      "...enter a:\n"
     )
    ;
    expression
     out_string
     (
     expression
      "\tTo negate "
     )
    ;
    expression
     print
     (
     expression
      avar
     )
    ;
    expression
     out_string
     (
     expression
      "...enter b:\n"
     )
    ;
    expression
     out_string
     (
     expression
      "\tTo find the difference between "
     )
    ;
    expression
     print
     (
     expression
      avar
     )
    ;
    expression
     out_string
     (
     expression
      "and another number...enter c:\n"
     )
    ;
    expression
     out_string
     (
     expression
      "\tTo find the factorial of "
     )
    ;
    expression
     print
     (
     expression
      avar
     )
    ;
    expression
     out_string
     (
     expression
      "...enter d:\n"
     )
    ;
    expression
     out_string
     (
     expression
      "\tTo square "
     )
    ;
    expression
     print
     (
     expression
      avar
     )
    ;
    expression
     out_string
     (
     expression
      "...enter e:\n"
     )
    ;
    expression
     out_string
     (
     expression
      "\tTo cube "
     )
    ;
    expression
     print
     (
     expression
      avar
     )
    ;
    expression
     out_string
     (
     expression
      "...enter f:\n"
     )
    ;
    expression
     out_string
     (
     expression
      "\tTo find out if "
     )
    ;
    expression
     print
     (
     expression
      avar
     )
    ;
    expression
     out_string
     (
     expression
      "is a multiple of 3...enter g:\n"
     )
    ;
    expression
     out_string
     (
     expression
      "\tTo divide "
     )
    ;
    expression
     print
     (
     expression
      avar
     )
    ;
    expression
     out_string
     (
     expression
      "by 8...enter h:\n"
     )
    ;
    expression
     out_string
     (
     expression
      "\tTo get a new number...enter j:\n"
     )
    ;
    expression
     out_string
     (
     expression
      "\tTo quit...enter q:\n\n"
     )
    ;
    expression
     in_string
     (
     )
    ;
    }
   }
  ;
  feature
   prompt
   (
   )
   :
   String
   {
   expression
    {
    expression
     out_string
     (
     expression
      "\n"
     )
    ;
    expression
     out_string
     (
     expression
      "Please enter a number...  "
     )
    ;
    expression
     in_string
     (
     )
    ;
    }
   }
  ;
  feature
   get_int
   (
   )
   :
   Int
   {
   expression
    {
    expression
     (
     expression
      let
      z
      :
      A2I
      <-
      expression
       new
       A2I
      in
      expression
       (
       expression
        let
        s
        :
        String
        <-
        expression
         prompt
         (
         )
        in
        expression
         expression
          z
         .
         a2i
         (
         expression
          s
         )
       )
     )
    ;
    }
   }
  ;
  feature
   is_even
   (
   formal
    num
    :
    Int
   )
   :
   Bool
   {
   expression
    (
    expression
     let
     x
     :
     Int
     <-
     expression
      num
     in
     expression
      if
      expression
       expression
        x
       <
       expression
        0
      then
      expression
       is_even
       (
       expression
        ~
        expression
         x
       )
      else
      expression
       if
       expression
        expression
         0
        =
        expression
         x
       then
       expression
        true
       else
       expression
        if
        expression
         expression
          1
         =
         expression
          x
        then
        expression
         false
        else
        expression
         is_even
         (
         expression
          expression
           x
          -
          expression
           2
         )
        fi
       fi
      fi
    )
   }
  ;
  feature
   class_type
   (
   formal
    var
    :
    A
   )
   :
   SELF_TYPE
   {
   expression
    case
    expression
     var
    of
    a
    :
    A
    =>
    expression
     out_string
     (
     expression
      "Class type is now A\n"
     )
    ;
    b
    :
    B
    =>
    expression
     out_string
     (
     expression
      "Class type is now B\n"
     )
    ;
    c
    :
    C
    =>
    expression
     out_string
     (
     expression
      "Class type is now C\n"
     )
    ;
    d
    :
    D
    =>
    expression
     out_string
     (
     expression
      "Class type is now D\n"
     )
    ;
    e
    :
    E
    =>
    expression
     out_string
     (
     expression
      "Class type is now E\n"
     )
    ;
    o
    :
    Object
    =>
    expression
     out_string
     (
     expression
      "Oooops\n"
     )
    ;
    esac
   }
  ;
  feature
   print
   (
   formal
    var
    :
    A
   )
   :
   SELF_TYPE
   {
   expression
    (
    expression
     let
     z
     :
     A2I
     <-
     expression
      new
      A2I
     in
     expression
      {
      expression
       out_string
       (
       expression
        expression
         z
        .
        i2a
        (
        expression
         expression
          var
         .
         value
         (
         )
        )
       )
      ;
      expression
       out_string
       (
       expression
        " "
       )
      ;
      }
    )
   }
  ;
  feature
   main
   (
   )
   :
   Object
   {
   expression
    {
    expression
     avar
     <-
     expression
      (
      expression
       new
       A
      )
    ;
    expression
     while
     expression
      flag
     loop
     expression
      {
      expression
       out_string
       (
       expression
        "number "
       )
      ;
      expression
       print
       (
       expression
        avar
       )
      ;
      expression
       if
       expression
        is_even
        (
        expression
         expression
          avar
         .
         value
         (
         )
        )
       then
       expression
        out_string
        (
        expression
         "is even!\n"
        )
       else
       expression
        out_string
        (
        expression
         "is odd!\n"
        )
       fi
      ;
      expression
       class_type
       (
       expression
        avar
       )
      ;
      expression
       char
       <-
       expression
        menu
        (
        )
      ;
      expression
       if
       expression
        expression
         char
        =
        expression
         "a"
       then
       expression
        {
        expression
         a_var
         <-
         expression
          expression
           (
           expression
            new
            A
           )
          .
          set_var
          (
          expression
           get_int
           (
           )
          )
        ;
        expression
         avar
         <-
         expression
          expression
           (
           expression
            new
            B
           )
          .
          method2
          (
          expression
           expression
            avar
           .
           value
           (
           )
          ,
          expression
           expression
            a_var
           .
           value
           (
           )
          )
        ;
        }
       else
       expression
        if
        expression
         expression
          char
         =
         expression
          "b"
        then
        expression
         case
         expression
          avar
         of
         c
         :
         C
         =>
         expression
          avar
          <-
          expression
           expression
            c
           .
           method6
           (
           expression
            expression
             c
            .
            value
            (
            )
           )
         ;
         a
         :
         A
         =>
         expression
          avar
          <-
          expression
           expression
            a
           .
           method3
           (
           expression
            expression
             a
            .
            value
            (
            )
           )
         ;
         o
         :
         Object
         =>
         expression
          {
          expression
           out_string
           (
           expression
            "Oooops\n"
           )
          ;
          expression
           abort
           (
           )
          ;
          expression
           0
          ;
          }
         ;
         esac
        else
        expression
         if
         expression
          expression
           char
          =
          expression
           "c"
         then
         expression
          {
          expression
           a_var
           <-
           expression
            expression
             (
             expression
              new
              A
             )
            .
            set_var
            (
            expression
             get_int
             (
             )
            )
          ;
          expression
           avar
           <-
           expression
            expression
             (
             expression
              new
              D
             )
            .
            method4
            (
            expression
             expression
              avar
             .
             value
             (
             )
            ,
            expression
             expression
              a_var
             .
             value
             (
             )
            )
          ;
          }
         else
         expression
          if
          expression
           expression
            char
           =
           expression
            "d"
          then
          expression
           avar
           <-
           expression
            expression
             (
             expression
              new
              C
             )
            @
            A
            .
            method5
            (
            expression
             expression
              avar
             .
             value
             (
             )
            )
          else
          expression
           if
           expression
            expression
             char
            =
            expression
             "e"
           then
           expression
            avar
            <-
            expression
             expression
              (
              expression
               new
               C
              )
             @
             B
             .
             method5
             (
             expression
              expression
               avar
              .
              value
              (
              )
             )
           else
           expression
            if
            expression
             expression
              char
             =
             expression
              "f"
            then
            expression
             avar
             <-
             expression
              expression
               (
               expression
                new
                C
               )
              @
              C
              .
              method5
              (
              expression
               expression
                avar
               .
               value
               (
               )
              )
            else
            expression
             if
             expression
              expression
               char
              =
              expression
               "g"
             then
             expression
              if
              expression
               (
               expression
                expression
                 (
                 expression
                  new
                  D
                 )
                .
                method7
                (
                expression
                 expression
                  avar
                 .
                 value
                 (
                 )
                )
               )
              then
              expression
               {
               expression
                out_string
                (
                expression
                 "number "
                )
               ;
               expression
                print
                (
                expression
                 avar
                )
               ;
               expression
                out_string
                (
                expression
                 "is divisible by 3.\n"
                )
               ;
               }
              else
              expression
               {
               expression
                out_string
                (
                expression
                 "number "
                )
               ;
               expression
                print
                (
                expression
                 avar
                )
               ;
               expression
                out_string
                (
                expression
                 "is not divisible by 3.\n"
                )
               ;
               }
              fi
             else
             expression
              if
              expression
               expression
                char
               =
               expression
                "h"
              then
              expression
               (
               expression
                let
                x
                :
                A
                in
                expression
                 {
                 expression
                  x
                  <-
                  expression
                   expression
                    (
                    expression
                     new
                     E
                    )
                   .
                   method6
                   (
                   expression
                    expression
                     avar
                    .
                    value
                    (
                    )
                   )
                 ;
                 expression
                  (
                  expression
                   let
                   r
                   :
                   Int
                   <-
                   expression
                    (
                    expression
                     expression
                      expression
                       avar
                      .
                      value
                      (
                      )
                     -
                     expression
                      (
                      expression
                       expression
                        expression
                         x
                        .
                        value
                        (
                        )
                       *
                       expression
                        8
                      )
                    )
                   in
                   expression
                    {
                    expression
                     out_string
                     (
                     expression
                      "number "
                     )
                    ;
                    expression
                     print
                     (
                     expression
                      avar
                     )
                    ;
                    expression
                     out_string
                     (
                     expression
                      "is equal to "
                     )
                    ;
                    expression
                     print
                     (
                     expression
                      x
                     )
                    ;
                    expression
                     out_string
                     (
                     expression
                      "times 8 with a remainder of "
                     )
                    ;
                    expression
                     (
                     expression
                      let
                      a
                      :
                      A2I
                      <-
                      expression
                       new
                       A2I
                      in
                      expression
                       {
                       expression
                        out_string
                        (
                        expression
                         expression
                          a
                         .
                         i2a
                         (
                         expression
                          r
                         )
                        )
                       ;
                       expression
                        out_string
                        (
                        expression
                         "\n"
                        )
                       ;
                       }
                     )
                    ;
                    }
                  )
                 ;
                 expression
                  avar
                  <-
                  expression
                   x
                 ;
                 }
               )
              else
              expression
               if
               expression
                expression
                 char
                =
                expression
                 "j"
               then
               expression
                avar
                <-
                expression
                 (
                 expression
                  new
                  A
                 )
               else
               expression
                if
                expression
                 expression
                  char
                 =
                 expression
                  "q"
                then
                expression
                 flag
                 <-
                 expression
                  false
                else
                expression
                 avar
                 <-
                 expression
                  expression
                   (
                   expression
                    new
                    A
                   )
                  .
                  method1
                  (
                  expression
                   expression
                    avar
                   .
                   value
                   (
                   )
                  )
                fi
               fi
              fi
             fi
            fi
           fi
          fi
         fi
        fi
       fi
      ;
      }
     pool
    ;
    }
   }
  ;
  }
 ;
 <EOF>
