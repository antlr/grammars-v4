program
 classDefine
  class
  Graph
  {
  feature
   vertices
   :
   VList
   <-
   expression
    new
    VList
  ;
  feature
   edges
   :
   EList
   <-
   expression
    new
    EList
  ;
  feature
   add_vertice
   (
   formal
    v
    :
    Vertice
   )
   :
   Object
   {
   expression
    {
    expression
     edges
     <-
     expression
      expression
       expression
        v
       .
       outgoing
       (
       )
      .
      append
      (
      expression
       edges
      )
    ;
    expression
     vertices
     <-
     expression
      expression
       vertices
      .
      cons
      (
      expression
       v
      )
    ;
    }
   }
  ;
  feature
   print_E
   (
   )
   :
   Object
   {
   expression
    expression
     edges
    .
    print
    (
    )
   }
  ;
  feature
   print_V
   (
   )
   :
   Object
   {
   expression
    expression
     vertices
    .
    print
    (
    )
   }
  ;
  }
 ;
 classDefine
  class
  Vertice
  inherits
  IO
  {
  feature
   num
   :
   Int
  ;
  feature
   out
   :
   EList
   <-
   expression
    new
    EList
  ;
  feature
   outgoing
   (
   )
   :
   EList
   {
   expression
    out
   }
  ;
  feature
   number
   (
   )
   :
   Int
   {
   expression
    num
   }
  ;
  feature
   init
   (
   formal
    n
    :
    Int
   )
   :
   SELF_TYPE
   {
   expression
    {
    expression
     num
     <-
     expression
      n
    ;
    expression
     self
    ;
    }
   }
  ;
  feature
   add_out
   (
   formal
    s
    :
    Edge
   )
   :
   SELF_TYPE
   {
   expression
    {
    expression
     out
     <-
     expression
      expression
       out
      .
      cons
      (
      expression
       s
      )
    ;
    expression
     self
    ;
    }
   }
  ;
  feature
   print
   (
   )
   :
   Object
   {
   expression
    {
    expression
     out_int
     (
     expression
      num
     )
    ;
    expression
     expression
      out
     .
     print
     (
     )
    ;
    }
   }
  ;
  }
 ;
 classDefine
  class
  Edge
  inherits
  IO
  {
  feature
   from
   :
   Int
  ;
  feature
   to
   :
   Int
  ;
  feature
   weight
   :
   Int
  ;
  feature
   init
   (
   formal
    f
    :
    Int
   ,
   formal
    t
    :
    Int
   ,
   formal
    w
    :
    Int
   )
   :
   SELF_TYPE
   {
   expression
    {
    expression
     from
     <-
     expression
      f
    ;
    expression
     to
     <-
     expression
      t
    ;
    expression
     weight
     <-
     expression
      w
    ;
    expression
     self
    ;
    }
   }
  ;
  feature
   print
   (
   )
   :
   Object
   {
   expression
    {
    expression
     out_string
     (
     expression
      " ("
     )
    ;
    expression
     out_int
     (
     expression
      from
     )
    ;
    expression
     out_string
     (
     expression
      ","
     )
    ;
    expression
     out_int
     (
     expression
      to
     )
    ;
    expression
     out_string
     (
     expression
      ")"
     )
    ;
    expression
     out_int
     (
     expression
      weight
     )
    ;
    }
   }
  ;
  }
 ;
 classDefine
  class
  EList
  inherits
  IO
  {
  feature
   car
   :
   Edge
  ;
  feature
   isNil
   (
   )
   :
   Bool
   {
   expression
    true
   }
  ;
  feature
   head
   (
   )
   :
   Edge
   {
   expression
    {
    expression
     abort
     (
     )
    ;
    expression
     car
    ;
    }
   }
  ;
  feature
   tail
   (
   )
   :
   EList
   {
   expression
    {
    expression
     abort
     (
     )
    ;
    expression
     self
    ;
    }
   }
  ;
  feature
   cons
   (
   formal
    e
    :
    Edge
   )
   :
   EList
   {
   expression
    expression
     (
     expression
      new
      ECons
     )
    .
    init
    (
    expression
     e
    ,
    expression
     self
    )
   }
  ;
  feature
   append
   (
   formal
    l
    :
    EList
   )
   :
   EList
   {
   expression
    if
    expression
     expression
      self
     .
     isNil
     (
     )
    then
    expression
     l
    else
    expression
     expression
      expression
       tail
       (
       )
      .
      append
      (
      expression
       l
      )
     .
     cons
     (
     expression
      head
      (
      )
     )
    fi
   }
  ;
  feature
   print
   (
   )
   :
   Object
   {
   expression
    out_string
    (
    expression
     "\n"
    )
   }
  ;
  }
 ;
 classDefine
  class
  ECons
  inherits
  EList
  {
  feature
   cdr
   :
   EList
  ;
  feature
   isNil
   (
   )
   :
   Bool
   {
   expression
    false
   }
  ;
  feature
   head
   (
   )
   :
   Edge
   {
   expression
    car
   }
  ;
  feature
   tail
   (
   )
   :
   EList
   {
   expression
    cdr
   }
  ;
  feature
   init
   (
   formal
    e
    :
    Edge
   ,
   formal
    rest
    :
    EList
   )
   :
   EList
   {
   expression
    {
    expression
     car
     <-
     expression
      e
    ;
    expression
     cdr
     <-
     expression
      rest
    ;
    expression
     self
    ;
    }
   }
  ;
  feature
   print
   (
   )
   :
   Object
   {
   expression
    {
    expression
     expression
      car
     .
     print
     (
     )
    ;
    expression
     expression
      cdr
     .
     print
     (
     )
    ;
    }
   }
  ;
  }
 ;
 classDefine
  class
  VList
  inherits
  IO
  {
  feature
   car
   :
   Vertice
  ;
  feature
   isNil
   (
   )
   :
   Bool
   {
   expression
    true
   }
  ;
  feature
   head
   (
   )
   :
   Vertice
   {
   expression
    {
    expression
     abort
     (
     )
    ;
    expression
     car
    ;
    }
   }
  ;
  feature
   tail
   (
   )
   :
   VList
   {
   expression
    {
    expression
     abort
     (
     )
    ;
    expression
     self
    ;
    }
   }
  ;
  feature
   cons
   (
   formal
    v
    :
    Vertice
   )
   :
   VList
   {
   expression
    expression
     (
     expression
      new
      VCons
     )
    .
    init
    (
    expression
     v
    ,
    expression
     self
    )
   }
  ;
  feature
   print
   (
   )
   :
   Object
   {
   expression
    out_string
    (
    expression
     "\n"
    )
   }
  ;
  }
 ;
 classDefine
  class
  VCons
  inherits
  VList
  {
  feature
   cdr
   :
   VList
  ;
  feature
   isNil
   (
   )
   :
   Bool
   {
   expression
    false
   }
  ;
  feature
   head
   (
   )
   :
   Vertice
   {
   expression
    car
   }
  ;
  feature
   tail
   (
   )
   :
   VList
   {
   expression
    cdr
   }
  ;
  feature
   init
   (
   formal
    v
    :
    Vertice
   ,
   formal
    rest
    :
    VList
   )
   :
   VList
   {
   expression
    {
    expression
     car
     <-
     expression
      v
    ;
    expression
     cdr
     <-
     expression
      rest
    ;
    expression
     self
    ;
    }
   }
  ;
  feature
   print
   (
   )
   :
   Object
   {
   expression
    {
    expression
     expression
      car
     .
     print
     (
     )
    ;
    expression
     expression
      cdr
     .
     print
     (
     )
    ;
    }
   }
  ;
  }
 ;
 classDefine
  class
  Parse
  inherits
  IO
  {
  feature
   boolop
   :
   BoolOp
   <-
   expression
    new
    BoolOp
  ;
  feature
   read_input
   (
   )
   :
   Graph
   {
   expression
    (
    expression
     let
     g
     :
     Graph
     <-
     expression
      new
      Graph
     in
     expression
      {
      expression
       (
       expression
        let
        line
        :
        String
        <-
        expression
         in_string
         (
         )
        in
        expression
         while
         expression
          (
          expression
           expression
            boolop
           .
           and
           (
           expression
            not
            expression
             expression
              line
             =
             expression
              "\n"
           ,
           expression
            not
            expression
             expression
              line
             =
             expression
              ""
           )
          )
         loop
         expression
          {
          expression
           expression
            g
           .
           add_vertice
           (
           expression
            parse_line
            (
            expression
             line
            )
           )
          ;
          expression
           line
           <-
           expression
            in_string
            (
            )
          ;
          }
         pool
       )
      ;
      expression
       g
      ;
      }
    )
   }
  ;
  feature
   parse_line
   (
   formal
    s
    :
    String
   )
   :
   Vertice
   {
   expression
    (
    expression
     let
     v
     :
     Vertice
     <-
     expression
      expression
       (
       expression
        new
        Vertice
       )
      .
      init
      (
      expression
       a2i
       (
       expression
        s
       )
      )
     in
     expression
      {
      expression
       while
       expression
        (
        expression
         not
         expression
          expression
           expression
            rest
           .
           length
           (
           )
          =
          expression
           0
        )
       loop
       expression
        {
        expression
         (
         expression
          let
          succ
          :
          Int
          <-
          expression
           a2i
           (
           expression
            rest
           )
          in
          expression
           (
           expression
            let
            weight
            :
            Int
            <-
            expression
             a2i
             (
             expression
              rest
             )
            in
            expression
             expression
              v
             .
             add_out
             (
             expression
              expression
               new
               Edge
              .
              init
              (
              expression
               expression
                v
               .
               number
               (
               )
              ,
              expression
               succ
              ,
              expression
               weight
              )
             )
           )
         )
        ;
        }
       pool
      ;
      expression
       v
      ;
      }
    )
   }
  ;
  feature
   c2i
   (
   formal
    char
    :
    String
   )
   :
   Int
   {
   expression
    if
    expression
     expression
      char
     =
     expression
      "0"
    then
    expression
     0
    else
    expression
     if
     expression
      expression
       char
      =
      expression
       "1"
     then
     expression
      1
     else
     expression
      if
      expression
       expression
        char
       =
       expression
        "2"
      then
      expression
       2
      else
      expression
       if
       expression
        expression
         char
        =
        expression
         "3"
       then
       expression
        3
       else
       expression
        if
        expression
         expression
          char
         =
         expression
          "4"
        then
        expression
         4
        else
        expression
         if
         expression
          expression
           char
          =
          expression
           "5"
         then
         expression
          5
         else
         expression
          if
          expression
           expression
            char
           =
           expression
            "6"
          then
          expression
           6
          else
          expression
           if
           expression
            expression
             char
            =
            expression
             "7"
           then
           expression
            7
           else
           expression
            if
            expression
             expression
              char
             =
             expression
              "8"
            then
            expression
             8
            else
            expression
             if
             expression
              expression
               char
              =
              expression
               "9"
             then
             expression
              9
             else
             expression
              {
              expression
               abort
               (
               )
              ;
              expression
               0
              ;
              }
             fi
            fi
           fi
          fi
         fi
        fi
       fi
      fi
     fi
    fi
   }
  ;
  feature
   rest
   :
   String
  ;
  feature
   a2i
   (
   formal
    s
    :
    String
   )
   :
   Int
   {
   expression
    if
    expression
     expression
      expression
       s
      .
      length
      (
      )
     =
     expression
      0
    then
    expression
     0
    else
    expression
     if
     expression
      expression
       expression
        s
       .
       substr
       (
       expression
        0
       ,
       expression
        1
       )
      =
      expression
       "-"
     then
     expression
      ~
      expression
       a2i_aux
       (
       expression
        expression
         s
        .
        substr
        (
        expression
         1
        ,
        expression
         expression
          expression
           s
          .
          length
          (
          )
         -
         expression
          1
        )
       )
     else
     expression
      if
      expression
       expression
        expression
         s
        .
        substr
        (
        expression
         0
        ,
        expression
         1
        )
       =
       expression
        " "
      then
      expression
       a2i
       (
       expression
        expression
         s
        .
        substr
        (
        expression
         1
        ,
        expression
         expression
          expression
           s
          .
          length
          (
          )
         -
         expression
          1
        )
       )
      else
      expression
       a2i_aux
       (
       expression
        s
       )
      fi
     fi
    fi
   }
  ;
  feature
   a2i_aux
   (
   formal
    s
    :
    String
   )
   :
   Int
   {
   expression
    (
    expression
     let
     int
     :
     Int
     <-
     expression
      0
     in
     expression
      {
      expression
       (
       expression
        let
        j
        :
        Int
        <-
        expression
         expression
          s
         .
         length
         (
         )
        in
        expression
         (
         expression
          let
          i
          :
          Int
          <-
          expression
           0
          in
          expression
           while
           expression
            expression
             i
            <
            expression
             j
           loop
           expression
            (
            expression
             let
             c
             :
             String
             <-
             expression
              expression
               s
              .
              substr
              (
              expression
               i
              ,
              expression
               1
              )
             in
             expression
              if
              expression
               (
               expression
                expression
                 c
                =
                expression
                 " "
               )
              then
              expression
               {
               expression
                rest
                <-
                expression
                 expression
                  s
                 .
                 substr
                 (
                 expression
                  expression
                   i
                  +
                  expression
                   1
                 ,
                 expression
                  expression
                   expression
                    expression
                     s
                    .
                    length
                    (
                    )
                   -
                   expression
                    i
                  -
                  expression
                   1
                 )
               ;
               expression
                i
                <-
                expression
                 j
               ;
               }
              else
              expression
               if
               expression
                (
                expression
                 expression
                  c
                 =
                 expression
                  ","
                )
               then
               expression
                {
                expression
                 rest
                 <-
                 expression
                  expression
                   s
                  .
                  substr
                  (
                  expression
                   expression
                    i
                   +
                   expression
                    1
                  ,
                  expression
                   expression
                    expression
                     expression
                      s
                     .
                     length
                     (
                     )
                    -
                    expression
                     i
                   -
                   expression
                    1
                  )
                ;
                expression
                 i
                 <-
                 expression
                  j
                ;
                }
               else
               expression
                {
                expression
                 int
                 <-
                 expression
                  expression
                   expression
                    int
                   *
                   expression
                    10
                  +
                  expression
                   c2i
                   (
                   expression
                    expression
                     s
                    .
                    substr
                    (
                    expression
                     i
                    ,
                    expression
                     1
                    )
                   )
                ;
                expression
                 i
                 <-
                 expression
                  expression
                   i
                  +
                  expression
                   1
                ;
                expression
                 if
                 expression
                  expression
                   i
                  =
                  expression
                   j
                 then
                 expression
                  rest
                  <-
                  expression
                   ""
                 else
                 expression
                  ""
                 fi
                ;
                }
               fi
              fi
            )
           pool
         )
       )
      ;
      expression
       int
      ;
      }
    )
   }
  ;
  }
 ;
 classDefine
  class
  Main
  inherits
  Parse
  {
  feature
   g
   :
   Graph
   <-
   expression
    read_input
    (
    )
  ;
  feature
   main
   (
   )
   :
   Object
   {
   expression
    {
    expression
     expression
      g
     .
     print_V
     (
     )
    ;
    expression
     expression
      g
     .
     print_E
     (
     )
    ;
    }
   }
  ;
  }
 ;
 classDefine
  class
  BoolOp
  {
  feature
   and
   (
   formal
    b1
    :
    Bool
   ,
   formal
    b2
    :
    Bool
   )
   :
   Bool
   {
   expression
    if
    expression
     b1
    then
    expression
     b2
    else
    expression
     false
    fi
   }
  ;
  feature
   or
   (
   formal
    b1
    :
    Bool
   ,
   formal
    b2
    :
    Bool
   )
   :
   Bool
   {
   expression
    if
    expression
     b1
    then
    expression
     true
    else
    expression
     b2
    fi
   }
  ;
  }
 ;
 <EOF>
