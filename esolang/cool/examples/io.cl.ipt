program
 classDefine
  class
  A
  {
  feature
   io
   :
   IO
   <-
   expression
    new
    IO
  ;
  feature
   out_a
   (
   )
   :
   Object
   {
   expression
    expression
     io
    .
    out_string
    (
    expression
     "A: Hello world\n"
    )
   }
  ;
  }
 ;
 classDefine
  class
  B
  inherits
  A
  {
  feature
   out_b
   (
   )
   :
   Object
   {
   expression
    expression
     io
    .
    out_string
    (
    expression
     "B: Hello world\n"
    )
   }
  ;
  }
 ;
 classDefine
  class
  C
  inherits
  IO
  {
  feature
   out_c
   (
   )
   :
   Object
   {
   expression
    out_string
    (
    expression
     "C: Hello world\n"
    )
   }
  ;
  }
 ;
 classDefine
  class
  D
  inherits
  C
  {
  feature
   out_d
   (
   )
   :
   Object
   {
   expression
    out_string
    (
    expression
     "D: Hello world\n"
    )
   }
  ;
  }
 ;
 classDefine
  class
  Main
  inherits
  IO
  {
  feature
   main
   (
   )
   :
   Object
   {
   expression
    {
    expression
     expression
      (
      expression
       new
       A
      )
     .
     out_a
     (
     )
    ;
    expression
     expression
      (
      expression
       new
       B
      )
     .
     out_b
     (
     )
    ;
    expression
     expression
      (
      expression
       new
       C
      )
     .
     out_c
     (
     )
    ;
    expression
     expression
      (
      expression
       new
       D
      )
     .
     out_d
     (
     )
    ;
    expression
     out_string
     (
     expression
      "Done.\n"
     )
    ;
    }
   }
  ;
  }
 ;
 <EOF>
