program
 classDefine
  class
  Board
  inherits
  IO
  {
  feature
   rows
   :
   Int
  ;
  feature
   columns
   :
   Int
  ;
  feature
   board_size
   :
   Int
  ;
  feature
   size_of_board
   (
   formal
    initial
    :
    String
   )
   :
   Int
   {
   expression
    expression
     initial
    .
    length
    (
    )
   }
  ;
  feature
   board_init
   (
   formal
    start
    :
    String
   )
   :
   SELF_TYPE
   {
   expression
    (
    expression
     let
     size
     :
     Int
     <-
     expression
      size_of_board
      (
      expression
       start
      )
     in
     expression
      {
      expression
       if
       expression
        expression
         size
        =
        expression
         15
       then
       expression
        {
        expression
         rows
         <-
         expression
          3
        ;
        expression
         columns
         <-
         expression
          5
        ;
        expression
         board_size
         <-
         expression
          size
        ;
        }
       else
       expression
        if
        expression
         expression
          size
         =
         expression
          16
        then
        expression
         {
         expression
          rows
          <-
          expression
           4
         ;
         expression
          columns
          <-
          expression
           4
         ;
         expression
          board_size
          <-
          expression
           size
         ;
         }
        else
        expression
         if
         expression
          expression
           size
          =
          expression
           20
         then
         expression
          {
          expression
           rows
           <-
           expression
            4
          ;
          expression
           columns
           <-
           expression
            5
          ;
          expression
           board_size
           <-
           expression
            size
          ;
          }
         else
         expression
          if
          expression
           expression
            size
           =
           expression
            21
          then
          expression
           {
           expression
            rows
            <-
            expression
             3
           ;
           expression
            columns
            <-
            expression
             7
           ;
           expression
            board_size
            <-
            expression
             size
           ;
           }
          else
          expression
           if
           expression
            expression
             size
            =
            expression
             25
           then
           expression
            {
            expression
             rows
             <-
             expression
              5
            ;
            expression
             columns
             <-
             expression
              5
            ;
            expression
             board_size
             <-
             expression
              size
            ;
            }
           else
           expression
            if
            expression
             expression
              size
             =
             expression
              28
            then
            expression
             {
             expression
              rows
              <-
              expression
               7
             ;
             expression
              columns
              <-
              expression
               4
             ;
             expression
              board_size
              <-
              expression
               size
             ;
             }
            else
            expression
             {
             expression
              rows
              <-
              expression
               5
             ;
             expression
              columns
              <-
              expression
               5
             ;
             expression
              board_size
              <-
              expression
               size
             ;
             }
            fi
           fi
          fi
         fi
        fi
       fi
      ;
      expression
       self
      ;
      }
    )
   }
  ;
  }
 ;
 classDefine
  class
  CellularAutomaton
  inherits
  Board
  {
  feature
   population_map
   :
   String
  ;
  feature
   init
   (
   formal
    map
    :
    String
   )
   :
   SELF_TYPE
   {
   expression
    {
    expression
     population_map
     <-
     expression
      map
    ;
    expression
     board_init
     (
     expression
      map
     )
    ;
    expression
     self
    ;
    }
   }
  ;
  feature
   print
   (
   )
   :
   SELF_TYPE
   {
   expression
    (
    expression
     let
     i
     :
     Int
     <-
     expression
      0
     in
     expression
      (
      expression
       let
       num
       :
       Int
       <-
       expression
        board_size
       in
       expression
        {
        expression
         out_string
         (
         expression
          "\n"
         )
        ;
        expression
         while
         expression
          expression
           i
          <
          expression
           num
         loop
         expression
          {
          expression
           out_string
           (
           expression
            expression
             population_map
            .
            substr
            (
            expression
             i
            ,
            expression
             columns
            )
           )
          ;
          expression
           out_string
           (
           expression
            "\n"
           )
          ;
          expression
           i
           <-
           expression
            expression
             i
            +
            expression
             columns
          ;
          }
         pool
        ;
        expression
         out_string
         (
         expression
          "\n"
         )
        ;
        expression
         self
        ;
        }
      )
    )
   }
  ;
  feature
   num_cells
   (
   )
   :
   Int
   {
   expression
    expression
     population_map
    .
    length
    (
    )
   }
  ;
  feature
   cell
   (
   formal
    position
    :
    Int
   )
   :
   String
   {
   expression
    if
    expression
     expression
      expression
       board_size
      -
      expression
       1
     <
     expression
      position
    then
    expression
     " "
    else
    expression
     expression
      population_map
     .
     substr
     (
     expression
      position
     ,
     expression
      1
     )
    fi
   }
  ;
  feature
   north
   (
   formal
    position
    :
    Int
   )
   :
   String
   {
   expression
    if
    expression
     expression
      (
      expression
       expression
        position
       -
       expression
        columns
      )
     <
     expression
      0
    then
    expression
     " "
    else
    expression
     cell
     (
     expression
      expression
       position
      -
      expression
       columns
     )
    fi
   }
  ;
  feature
   south
   (
   formal
    position
    :
    Int
   )
   :
   String
   {
   expression
    if
    expression
     expression
      board_size
     <
     expression
      (
      expression
       expression
        position
       +
       expression
        columns
      )
    then
    expression
     " "
    else
    expression
     cell
     (
     expression
      expression
       position
      +
      expression
       columns
     )
    fi
   }
  ;
  feature
   east
   (
   formal
    position
    :
    Int
   )
   :
   String
   {
   expression
    if
    expression
     expression
      (
      expression
       expression
        (
        expression
         expression
          (
          expression
           expression
            position
           +
           expression
            1
          )
         /
         expression
          columns
        )
       *
       expression
        columns
      )
     =
     expression
      (
      expression
       expression
        position
       +
       expression
        1
      )
    then
    expression
     " "
    else
    expression
     cell
     (
     expression
      expression
       position
      +
      expression
       1
     )
    fi
   }
  ;
  feature
   west
   (
   formal
    position
    :
    Int
   )
   :
   String
   {
   expression
    if
    expression
     expression
      position
     =
     expression
      0
    then
    expression
     " "
    else
    expression
     if
     expression
      expression
       (
       expression
        expression
         (
         expression
          expression
           position
          /
          expression
           columns
         )
        *
        expression
         columns
       )
      =
      expression
       position
     then
     expression
      " "
     else
     expression
      cell
      (
      expression
       expression
        position
       -
       expression
        1
      )
     fi
    fi
   }
  ;
  feature
   northwest
   (
   formal
    position
    :
    Int
   )
   :
   String
   {
   expression
    if
    expression
     expression
      (
      expression
       expression
        position
       -
       expression
        columns
      )
     <
     expression
      0
    then
    expression
     " "
    else
    expression
     if
     expression
      expression
       (
       expression
        expression
         (
         expression
          expression
           position
          /
          expression
           columns
         )
        *
        expression
         columns
       )
      =
      expression
       position
     then
     expression
      " "
     else
     expression
      north
      (
      expression
       expression
        position
       -
       expression
        1
      )
     fi
    fi
   }
  ;
  feature
   northeast
   (
   formal
    position
    :
    Int
   )
   :
   String
   {
   expression
    if
    expression
     expression
      (
      expression
       expression
        position
       -
       expression
        columns
      )
     <
     expression
      0
    then
    expression
     " "
    else
    expression
     if
     expression
      expression
       (
       expression
        expression
         (
         expression
          expression
           (
           expression
            expression
             position
            +
            expression
             1
           )
          /
          expression
           columns
         )
        *
        expression
         columns
       )
      =
      expression
       (
       expression
        expression
         position
        +
        expression
         1
       )
     then
     expression
      " "
     else
     expression
      north
      (
      expression
       expression
        position
       +
       expression
        1
      )
     fi
    fi
   }
  ;
  feature
   southeast
   (
   formal
    position
    :
    Int
   )
   :
   String
   {
   expression
    if
    expression
     expression
      board_size
     <
     expression
      (
      expression
       expression
        position
       +
       expression
        columns
      )
    then
    expression
     " "
    else
    expression
     if
     expression
      expression
       (
       expression
        expression
         (
         expression
          expression
           (
           expression
            expression
             position
            +
            expression
             1
           )
          /
          expression
           columns
         )
        *
        expression
         columns
       )
      =
      expression
       (
       expression
        expression
         position
        +
        expression
         1
       )
     then
     expression
      " "
     else
     expression
      south
      (
      expression
       expression
        position
       +
       expression
        1
      )
     fi
    fi
   }
  ;
  feature
   southwest
   (
   formal
    position
    :
    Int
   )
   :
   String
   {
   expression
    if
    expression
     expression
      board_size
     <
     expression
      (
      expression
       expression
        position
       +
       expression
        columns
      )
    then
    expression
     " "
    else
    expression
     if
     expression
      expression
       (
       expression
        expression
         (
         expression
          expression
           position
          /
          expression
           columns
         )
        *
        expression
         columns
       )
      =
      expression
       position
     then
     expression
      " "
     else
     expression
      south
      (
      expression
       expression
        position
       -
       expression
        1
      )
     fi
    fi
   }
  ;
  feature
   neighbors
   (
   formal
    position
    :
    Int
   )
   :
   Int
   {
   expression
    {
    expression
     expression
      expression
       expression
        expression
         expression
          expression
           expression
            if
            expression
             expression
              north
              (
              expression
               position
              )
             =
             expression
              "X"
            then
            expression
             1
            else
            expression
             0
            fi
           +
           expression
            if
            expression
             expression
              south
              (
              expression
               position
              )
             =
             expression
              "X"
            then
            expression
             1
            else
            expression
             0
            fi
          +
          expression
           if
           expression
            expression
             east
             (
             expression
              position
             )
            =
            expression
             "X"
           then
           expression
            1
           else
           expression
            0
           fi
         +
         expression
          if
          expression
           expression
            west
            (
            expression
             position
            )
           =
           expression
            "X"
          then
          expression
           1
          else
          expression
           0
          fi
        +
        expression
         if
         expression
          expression
           northeast
           (
           expression
            position
           )
          =
          expression
           "X"
         then
         expression
          1
         else
         expression
          0
         fi
       +
       expression
        if
        expression
         expression
          northwest
          (
          expression
           position
          )
         =
         expression
          "X"
        then
        expression
         1
        else
        expression
         0
        fi
      +
      expression
       if
       expression
        expression
         southeast
         (
         expression
          position
         )
        =
        expression
         "X"
       then
       expression
        1
       else
       expression
        0
       fi
     +
     expression
      if
      expression
       expression
        southwest
        (
        expression
         position
        )
       =
       expression
        "X"
      then
      expression
       1
      else
      expression
       0
      fi
    ;
    }
   }
  ;
  feature
   cell_at_next_evolution
   (
   formal
    position
    :
    Int
   )
   :
   String
   {
   expression
    if
    expression
     expression
      neighbors
      (
      expression
       position
      )
     =
     expression
      3
    then
    expression
     "X"
    else
    expression
     if
     expression
      expression
       neighbors
       (
       expression
        position
       )
      =
      expression
       2
     then
     expression
      if
      expression
       expression
        cell
        (
        expression
         position
        )
       =
       expression
        "X"
      then
      expression
       "X"
      else
      expression
       "-"
      fi
     else
     expression
      "-"
     fi
    fi
   }
  ;
  feature
   evolve
   (
   )
   :
   SELF_TYPE
   {
   expression
    (
    expression
     let
     position
     :
     Int
     <-
     expression
      0
     in
     expression
      (
      expression
       let
       num
       :
       Int
       <-
       expression
        num_cells
        (
        )
       in
       expression
        (
        expression
         let
         temp
         :
         String
         in
         expression
          {
          expression
           while
           expression
            expression
             position
            <
            expression
             num
           loop
           expression
            {
            expression
             temp
             <-
             expression
              expression
               temp
              .
              concat
              (
              expression
               cell_at_next_evolution
               (
               expression
                position
               )
              )
            ;
            expression
             position
             <-
             expression
              expression
               position
              +
              expression
               1
            ;
            }
           pool
          ;
          expression
           population_map
           <-
           expression
            temp
          ;
          expression
           self
          ;
          }
        )
      )
    )
   }
  ;
  feature
   option
   (
   )
   :
   String
   {
   expression
    {
    expression
     (
     expression
      let
      num
      :
      Int
      in
      expression
       {
       expression
        out_string
        (
        expression
         "\nPlease chose a number:\n"
        )
       ;
       expression
        out_string
        (
        expression
         "\t1: A cross\n"
        )
       ;
       expression
        out_string
        (
        expression
         "\t2: A slash from the upper left to lower right\n"
        )
       ;
       expression
        out_string
        (
        expression
         "\t3: A slash from the upper right to lower left\n"
        )
       ;
       expression
        out_string
        (
        expression
         "\t4: An X\n"
        )
       ;
       expression
        out_string
        (
        expression
         "\t5: A greater than sign \n"
        )
       ;
       expression
        out_string
        (
        expression
         "\t6: A less than sign\n"
        )
       ;
       expression
        out_string
        (
        expression
         "\t7: Two greater than signs\n"
        )
       ;
       expression
        out_string
        (
        expression
         "\t8: Two less than signs\n"
        )
       ;
       expression
        out_string
        (
        expression
         "\t9: A 'V'\n"
        )
       ;
       expression
        out_string
        (
        expression
         "\t10: An inverse 'V'\n"
        )
       ;
       expression
        out_string
        (
        expression
         "\t11: Numbers 9 and 10 combined\n"
        )
       ;
       expression
        out_string
        (
        expression
         "\t12: A full grid\n"
        )
       ;
       expression
        out_string
        (
        expression
         "\t13: A 'T'\n"
        )
       ;
       expression
        out_string
        (
        expression
         "\t14: A plus '+'\n"
        )
       ;
       expression
        out_string
        (
        expression
         "\t15: A 'W'\n"
        )
       ;
       expression
        out_string
        (
        expression
         "\t16: An 'M'\n"
        )
       ;
       expression
        out_string
        (
        expression
         "\t17: An 'E'\n"
        )
       ;
       expression
        out_string
        (
        expression
         "\t18: A '3'\n"
        )
       ;
       expression
        out_string
        (
        expression
         "\t19: An 'O'\n"
        )
       ;
       expression
        out_string
        (
        expression
         "\t20: An '8'\n"
        )
       ;
       expression
        out_string
        (
        expression
         "\t21: An 'S'\n"
        )
       ;
       expression
        out_string
        (
        expression
         "Your choice => "
        )
       ;
       expression
        num
        <-
        expression
         in_int
         (
         )
       ;
       expression
        out_string
        (
        expression
         "\n"
        )
       ;
       expression
        if
        expression
         expression
          num
         =
         expression
          1
        then
        expression
         " XX  XXXX XXXX  XX  "
        else
        expression
         if
         expression
          expression
           num
          =
          expression
           2
         then
         expression
          "    X   X   X   X   X    "
         else
         expression
          if
          expression
           expression
            num
           =
           expression
            3
          then
          expression
           "X     X     X     X     X"
          else
          expression
           if
           expression
            expression
             num
            =
            expression
             4
           then
           expression
            "X   X X X   X   X X X   X"
           else
           expression
            if
            expression
             expression
              num
             =
             expression
              5
            then
            expression
             "X     X     X   X   X    "
            else
            expression
             if
             expression
              expression
               num
              =
              expression
               6
             then
             expression
              "    X   X   X     X     X"
             else
             expression
              if
              expression
               expression
                num
               =
               expression
                7
              then
              expression
               "X  X  X  XX  X      "
              else
              expression
               if
               expression
                expression
                 num
                =
                expression
                 8
               then
               expression
                " X  XX  X  X  X     "
               else
               expression
                if
                expression
                 expression
                  num
                 =
                 expression
                  9
                then
                expression
                 "X   X X X   X  "
                else
                expression
                 if
                 expression
                  expression
                   num
                  =
                  expression
                   10
                 then
                 expression
                  "  X   X X X   X"
                 else
                 expression
                  if
                  expression
                   expression
                    num
                   =
                   expression
                    11
                  then
                  expression
                   "X X X X X X X X"
                  else
                  expression
                   if
                   expression
                    expression
                     num
                    =
                    expression
                     12
                   then
                   expression
                    "XXXXXXXXXXXXXXXXXXXXXXXXX"
                   else
                   expression
                    if
                    expression
                     expression
                      num
                     =
                     expression
                      13
                    then
                    expression
                     "XXXXX  X    X    X    X  "
                    else
                    expression
                     if
                     expression
                      expression
                       num
                      =
                      expression
                       14
                     then
                     expression
                      "  X    X  XXXXX  X    X  "
                     else
                     expression
                      if
                      expression
                       expression
                        num
                       =
                       expression
                        15
                      then
                      expression
                       "X     X X X X   X X  "
                      else
                      expression
                       if
                       expression
                        expression
                         num
                        =
                        expression
                         16
                       then
                       expression
                        "  X X   X X X X     X"
                       else
                       expression
                        if
                        expression
                         expression
                          num
                         =
                         expression
                          17
                        then
                        expression
                         "XXXXX   X   XXXXX   X   XXXX"
                        else
                        expression
                         if
                         expression
                          expression
                           num
                          =
                          expression
                           18
                         then
                         expression
                          "XXX    X   X  X    X   XXXX "
                         else
                         expression
                          if
                          expression
                           expression
                            num
                           =
                           expression
                            19
                          then
                          expression
                           " XX X  XX  X XX "
                          else
                          expression
                           if
                           expression
                            expression
                             num
                            =
                            expression
                             20
                           then
                           expression
                            " XX X  XX  X XX X  XX  X XX "
                           else
                           expression
                            if
                            expression
                             expression
                              num
                             =
                             expression
                              21
                            then
                            expression
                             " XXXX   X    XX    X   XXXX "
                            else
                            expression
                             "                         "
                            fi
                           fi
                          fi
                         fi
                        fi
                       fi
                      fi
                     fi
                    fi
                   fi
                  fi
                 fi
                fi
               fi
              fi
             fi
            fi
           fi
          fi
         fi
        fi
       ;
       }
     )
    ;
    }
   }
  ;
  feature
   prompt
   (
   )
   :
   Bool
   {
   expression
    {
    expression
     (
     expression
      let
      ans
      :
      String
      in
      expression
       {
       expression
        out_string
        (
        expression
         "Would you like to continue with the next generation? \n"
        )
       ;
       expression
        out_string
        (
        expression
         "Please use lowercase y or n for your answer [y]: "
        )
       ;
       expression
        ans
        <-
        expression
         in_string
         (
         )
       ;
       expression
        out_string
        (
        expression
         "\n"
        )
       ;
       expression
        if
        expression
         expression
          ans
         =
         expression
          "n"
        then
        expression
         false
        else
        expression
         true
        fi
       ;
       }
     )
    ;
    }
   }
  ;
  feature
   prompt2
   (
   )
   :
   Bool
   {
   expression
    (
    expression
     let
     ans
     :
     String
     in
     expression
      {
      expression
       out_string
       (
       expression
        "\n\n"
       )
      ;
      expression
       out_string
       (
       expression
        "Would you like to choose a background pattern? \n"
       )
      ;
      expression
       out_string
       (
       expression
        "Please use lowercase y or n for your answer [n]: "
       )
      ;
      expression
       ans
       <-
       expression
        in_string
        (
        )
      ;
      expression
       if
       expression
        expression
         ans
        =
        expression
         "y"
       then
       expression
        true
       else
       expression
        false
       fi
      ;
      }
    )
   }
  ;
  }
 ;
 classDefine
  class
  Main
  inherits
  CellularAutomaton
  {
  feature
   cells
   :
   CellularAutomaton
  ;
  feature
   main
   (
   )
   :
   SELF_TYPE
   {
   expression
    {
    expression
     (
     expression
      let
      continue
      :
      Bool
      in
      expression
       (
       expression
        let
        choice
        :
        String
        in
        expression
         {
         expression
          out_string
          (
          expression
           "Welcome to the Game of Life.\n"
          )
         ;
         expression
          out_string
          (
          expression
           "There are many initial states to choose from. \n"
          )
         ;
         expression
          while
          expression
           prompt2
           (
           )
          loop
          expression
           {
           expression
            continue
            <-
            expression
             true
           ;
           expression
            choice
            <-
            expression
             option
             (
             )
           ;
           expression
            cells
            <-
            expression
             expression
              (
              expression
               new
               CellularAutomaton
              )
             .
             init
             (
             expression
              choice
             )
           ;
           expression
            expression
             cells
            .
            print
            (
            )
           ;
           expression
            while
            expression
             continue
            loop
            expression
             if
             expression
              prompt
              (
              )
             then
             expression
              {
              expression
               expression
                cells
               .
               evolve
               (
               )
              ;
              expression
               expression
                cells
               .
               print
               (
               )
              ;
              }
             else
             expression
              continue
              <-
              expression
               false
             fi
            pool
           ;
           }
          pool
         ;
         expression
          self
         ;
         }
       )
     )
    ;
    }
   }
  ;
  }
 ;
 <EOF>
