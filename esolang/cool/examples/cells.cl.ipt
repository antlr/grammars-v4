program
 classDefine
  class
  CellularAutomaton
  inherits
  IO
  {
  feature
   population_map
   :
   String
  ;
  feature
   init
   (
   formal
    map
    :
    String
   )
   :
   SELF_TYPE
   {
   expression
    {
    expression
     population_map
     <-
     expression
      map
    ;
    expression
     self
    ;
    }
   }
  ;
  feature
   print
   (
   )
   :
   SELF_TYPE
   {
   expression
    {
    expression
     out_string
     (
     expression
      expression
       population_map
      .
      concat
      (
      expression
       "\n"
      )
     )
    ;
    expression
     self
    ;
    }
   }
  ;
  feature
   num_cells
   (
   )
   :
   Int
   {
   expression
    expression
     population_map
    .
    length
    (
    )
   }
  ;
  feature
   cell
   (
   formal
    position
    :
    Int
   )
   :
   String
   {
   expression
    expression
     population_map
    .
    substr
    (
    expression
     position
    ,
    expression
     1
    )
   }
  ;
  feature
   cell_left_neighbor
   (
   formal
    position
    :
    Int
   )
   :
   String
   {
   expression
    if
    expression
     expression
      position
     =
     expression
      0
    then
    expression
     cell
     (
     expression
      expression
       num_cells
       (
       )
      -
      expression
       1
     )
    else
    expression
     cell
     (
     expression
      expression
       position
      -
      expression
       1
     )
    fi
   }
  ;
  feature
   cell_right_neighbor
   (
   formal
    position
    :
    Int
   )
   :
   String
   {
   expression
    if
    expression
     expression
      position
     =
     expression
      expression
       num_cells
       (
       )
      -
      expression
       1
    then
    expression
     cell
     (
     expression
      0
     )
    else
    expression
     cell
     (
     expression
      expression
       position
      +
      expression
       1
     )
    fi
   }
  ;
  feature
   cell_at_next_evolution
   (
   formal
    position
    :
    Int
   )
   :
   String
   {
   expression
    if
    expression
     (
     expression
      expression
       expression
        expression
         if
         expression
          expression
           cell
           (
           expression
            position
           )
          =
          expression
           "X"
         then
         expression
          1
         else
         expression
          0
         fi
        +
        expression
         if
         expression
          expression
           cell_left_neighbor
           (
           expression
            position
           )
          =
          expression
           "X"
         then
         expression
          1
         else
         expression
          0
         fi
       +
       expression
        if
        expression
         expression
          cell_right_neighbor
          (
          expression
           position
          )
         =
         expression
          "X"
        then
        expression
         1
        else
        expression
         0
        fi
      =
      expression
       1
     )
    then
    expression
     "X"
    else
    expression
     "."
    fi
   }
  ;
  feature
   evolve
   (
   )
   :
   SELF_TYPE
   {
   expression
    (
    expression
     let
     position
     :
     Int
     in
     expression
      (
      expression
       let
       num
       :
       Int
       <-
       expression
        num_cells
        (
        )
       in
       expression
        (
        expression
         let
         temp
         :
         String
         in
         expression
          {
          expression
           while
           expression
            expression
             position
            <
            expression
             num
           loop
           expression
            {
            expression
             temp
             <-
             expression
              expression
               temp
              .
              concat
              (
              expression
               cell_at_next_evolution
               (
               expression
                position
               )
              )
            ;
            expression
             position
             <-
             expression
              expression
               position
              +
              expression
               1
            ;
            }
           pool
          ;
          expression
           population_map
           <-
           expression
            temp
          ;
          expression
           self
          ;
          }
        )
      )
    )
   }
  ;
  }
 ;
 classDefine
  class
  Main
  {
  feature
   cells
   :
   CellularAutomaton
  ;
  feature
   main
   (
   )
   :
   SELF_TYPE
   {
   expression
    {
    expression
     cells
     <-
     expression
      expression
       (
       expression
        new
        CellularAutomaton
       )
      .
      init
      (
      expression
       "         X         "
      )
    ;
    expression
     expression
      cells
     .
     print
     (
     )
    ;
    expression
     (
     expression
      let
      countdown
      :
      Int
      <-
      expression
       20
      in
      expression
       while
       expression
        expression
         0
        <
        expression
         countdown
       loop
       expression
        {
        expression
         expression
          cells
         .
         evolve
         (
         )
        ;
        expression
         expression
          cells
         .
         print
         (
         )
        ;
        expression
         countdown
         <-
         expression
          expression
           countdown
          -
          expression
           1
        ;
        }
       pool
     )
    ;
    expression
     self
    ;
    }
   }
  ;
  }
 ;
 <EOF>
