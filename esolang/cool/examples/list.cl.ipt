program
 classDefine
  class
  List
  {
  feature
   isNil
   (
   )
   :
   Bool
   {
   expression
    true
   }
  ;
  feature
   head
   (
   )
   :
   Int
   {
   expression
    {
    expression
     abort
     (
     )
    ;
    expression
     0
    ;
    }
   }
  ;
  feature
   tail
   (
   )
   :
   List
   {
   expression
    {
    expression
     abort
     (
     )
    ;
    expression
     self
    ;
    }
   }
  ;
  feature
   cons
   (
   formal
    i
    :
    Int
   )
   :
   List
   {
   expression
    expression
     (
     expression
      new
      Cons
     )
    .
    init
    (
    expression
     i
    ,
    expression
     self
    )
   }
  ;
  }
 ;
 classDefine
  class
  Cons
  inherits
  List
  {
  feature
   car
   :
   Int
  ;
  feature
   cdr
   :
   List
  ;
  feature
   isNil
   (
   )
   :
   Bool
   {
   expression
    false
   }
  ;
  feature
   head
   (
   )
   :
   Int
   {
   expression
    car
   }
  ;
  feature
   tail
   (
   )
   :
   List
   {
   expression
    cdr
   }
  ;
  feature
   init
   (
   formal
    i
    :
    Int
   ,
   formal
    rest
    :
    List
   )
   :
   List
   {
   expression
    {
    expression
     car
     <-
     expression
      i
    ;
    expression
     cdr
     <-
     expression
      rest
    ;
    expression
     self
    ;
    }
   }
  ;
  }
 ;
 classDefine
  class
  Main
  inherits
  IO
  {
  feature
   mylist
   :
   List
  ;
  feature
   print_list
   (
   formal
    l
    :
    List
   )
   :
   Object
   {
   expression
    if
    expression
     expression
      l
     .
     isNil
     (
     )
    then
    expression
     out_string
     (
     expression
      "\n"
     )
    else
    expression
     {
     expression
      out_int
      (
      expression
       expression
        l
       .
       head
       (
       )
      )
     ;
     expression
      out_string
      (
      expression
       " "
      )
     ;
     expression
      print_list
      (
      expression
       expression
        l
       .
       tail
       (
       )
      )
     ;
     }
    fi
   }
  ;
  feature
   main
   (
   )
   :
   Object
   {
   expression
    {
    expression
     mylist
     <-
     expression
      expression
       expression
        expression
         expression
          expression
           new
           List
          .
          cons
          (
          expression
           1
          )
         .
         cons
         (
         expression
          2
         )
        .
        cons
        (
        expression
         3
        )
       .
       cons
       (
       expression
        4
       )
      .
      cons
      (
      expression
       5
      )
    ;
    expression
     while
     expression
      (
      expression
       not
       expression
        expression
         mylist
        .
        isNil
        (
        )
      )
     loop
     expression
      {
      expression
       print_list
       (
       expression
        mylist
       )
      ;
      expression
       mylist
       <-
       expression
        expression
         mylist
        .
        tail
        (
        )
      ;
      }
     pool
    ;
    }
   }
  ;
  }
 ;
 <EOF>
