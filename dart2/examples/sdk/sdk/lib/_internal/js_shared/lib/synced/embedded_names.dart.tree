(compilationUnit (libraryDeclaration metadata (topLevelDeclaration const (staticFinalDeclarationList (staticFinalDeclaration (identifier RTI_UNIVERSE) = (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString 'typeUniverse'))))))))))))))))))))) ;) metadata (topLevelDeclaration const (staticFinalDeclarationList (staticFinalDeclaration (identifier ARRAY_RTI_PROPERTY) = (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString 'arrayRti'))))))))))))))))))))) ;) metadata (topLevelDeclaration const (staticFinalDeclarationList (staticFinalDeclaration (identifier TYPES) = (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString 'types'))))))))))))))))))))) ;) metadata (topLevelDeclaration (enumType enum (identifier JsGetName) { (enumEntry metadata (identifier GETTER_PREFIX)) , (enumEntry metadata (identifier SETTER_PREFIX)) , (enumEntry metadata (identifier CALL_PREFIX)) , (enumEntry metadata (identifier CALL_PREFIX0)) , (enumEntry metadata (identifier CALL_PREFIX1)) , (enumEntry metadata (identifier CALL_PREFIX2)) , (enumEntry metadata (identifier CALL_PREFIX3)) , (enumEntry metadata (identifier CALL_PREFIX4)) , (enumEntry metadata (identifier CALL_PREFIX5)) , (enumEntry metadata (identifier CALL_CATCH_ALL)) , (enumEntry metadata (identifier REQUIRED_PARAMETER_PROPERTY)) , (enumEntry metadata (identifier DEFAULT_VALUES_PROPERTY)) , (enumEntry metadata (identifier CALL_NAME_PROPERTY)) , (enumEntry metadata (identifier DEFERRED_ACTION_PROPERTY)) , (enumEntry metadata (identifier OPERATOR_IS_PREFIX)) , (enumEntry metadata (identifier SIGNATURE_NAME)) , (enumEntry metadata (identifier RTI_NAME)) , (enumEntry metadata (identifier FUTURE_CLASS_TYPE_NAME)) , (enumEntry metadata (identifier IS_INDEXABLE_FIELD_NAME)) , (enumEntry metadata (identifier NULL_CLASS_TYPE_NAME)) , (enumEntry metadata (identifier OBJECT_CLASS_TYPE_NAME)) , (enumEntry metadata (identifier LIST_CLASS_TYPE_NAME)) , (enumEntry metadata (identifier RTI_FIELD_AS)) , (enumEntry metadata (identifier RTI_FIELD_IS)) , })) metadata (topLevelDeclaration (enumType enum (identifier JsBuiltin) { (enumEntry metadata (identifier dartObjectConstructor)) , (enumEntry metadata (identifier dartClosureConstructor)) , (enumEntry metadata (identifier isJsInteropTypeArgument)) , (enumEntry metadata (identifier getMetadata)) , (enumEntry metadata (identifier getType)) , })) metadata (topLevelDeclaration (classDeclaration class (typeIdentifier RtiUniverseFieldNames) { metadata (classMemberDeclaration (declaration static (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier String)))))) (initializedIdentifierList (initializedIdentifier (identifier evalCache) = (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString 'eC')))))))))))))))))))))) ;) metadata (classMemberDeclaration (declaration static (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier String)))))) (initializedIdentifierList (initializedIdentifier (identifier typeRules) = (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString 'tR')))))))))))))))))))))) ;) metadata (classMemberDeclaration (declaration static (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier String)))))) (initializedIdentifierList (initializedIdentifier (identifier erasedTypes) = (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString 'eT')))))))))))))))))))))) ;) metadata (classMemberDeclaration (declaration static (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier String)))))) (initializedIdentifierList (initializedIdentifier (identifier typeParameterVariances) = (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString 'tPV')))))))))))))))))))))) ;) metadata (classMemberDeclaration (declaration static (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier String)))))) (initializedIdentifierList (initializedIdentifier (identifier sharedEmptyArray) = (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString 'sEA')))))))))))))))))))))) ;) }))) <EOF>)