(compilationUnit (partDeclaration (partHeader metadata part of (dottedIdentifierList (identifier dart) . (identifier developer)) ;) metadata (topLevelDeclaration (classDeclaration abstract class (typeIdentifier UserTag) { metadata (classMemberDeclaration (declaration static const (staticFinalDeclarationList (staticFinalDeclaration (identifier MAX_USER_TAGS) = (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (numericLiteral 64))))))))))))))))))))) ;) metadata (classMemberDeclaration (declaration external (factoryConstructorSignature factory (constructorName (typeIdentifier UserTag)) (formalParameterList ( (normalFormalParameters (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (declaredIdentifier (finalConstVarOrType (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier String))))))) (identifier label)))))) )))) ;) metadata (classMemberDeclaration (declaration (getterSignature (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier String))))) get (identifier label))) ;) metadata (classMemberDeclaration (declaration (functionSignature (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier UserTag))))) (identifier makeCurrent) (formalParameterPart (formalParameterList ( ))))) ;) metadata (classMemberDeclaration (declaration external static (getterSignature (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier UserTag))))) get (identifier defaultTag))) ;) })) metadata (topLevelDeclaration external (functionSignature (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier UserTag))))) (identifier getCurrentTag) (formalParameterPart (formalParameterList ( )))) ;) metadata (topLevelDeclaration (classDeclaration abstract class (typeIdentifier Metric) { metadata (classMemberDeclaration (declaration final (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier String))))) (initializedIdentifierList (initializedIdentifier (identifier name)))) ;) metadata (classMemberDeclaration (declaration final (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier String))))) (initializedIdentifierList (initializedIdentifier (identifier description)))) ;) metadata (classMemberDeclaration (methodSignature (constructorSignature (constructorName (typeIdentifier Metric)) (formalParameterList ( (normalFormalParameters (normalFormalParameter metadata (normalFormalParameterNoMetadata (fieldFormalParameter this . (identifier name)))) , (normalFormalParameter metadata (normalFormalParameterNoMetadata (fieldFormalParameter this . (identifier description))))) )))) (functionBody (block { (statements (statement (nonLabelledStatement (ifStatement if ( (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary ( (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier name))))))))))) (equalityOperator ==) (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString 'vm'))))))))))))))))))) ))))))))))))) || (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier name)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier contains)))) (selector (argumentPart (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString '/'))))))))))))))))))))) ))))))))))))))))))) ) (statement (nonLabelledStatement (block { (statements (statement (nonLabelledStatement (expressionStatement (expr (throwExpression throw (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (newExpression new (constructorDesignation (typeIdentifier ArgumentError)) (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString 'Invalid Metric name.'))))))))))))))))))))) ))))))))))))))))))))) ;)))) }))))))) }))) metadata (classMemberDeclaration (declaration (functionSignature (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier Map))))) (identifier _toJSON) (formalParameterPart (formalParameterList ( ))))) ;) })) metadata (topLevelDeclaration (classDeclaration class (typeIdentifier Gauge) (superclass extends (typeNotVoid (typeNotVoidNotFunction (typeName (typeIdentifier Metric))))) { metadata (classMemberDeclaration (declaration final (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier double))))) (initializedIdentifierList (initializedIdentifier (identifier min)))) ;) metadata (classMemberDeclaration (declaration final (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier double))))) (initializedIdentifierList (initializedIdentifier (identifier max)))) ;) metadata (classMemberDeclaration (declaration (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier double)))))) (initializedIdentifierList (initializedIdentifier (identifier _value)))) ;) metadata (classMemberDeclaration (methodSignature (getterSignature (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier double))))) get (identifier value))) (functionBody => (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier _value))))))))))))))))) ;)) metadata (classMemberDeclaration (methodSignature (setterSignature set (identifier value) (formalParameterList ( (normalFormalParameters (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (declaredIdentifier (finalConstVarOrType (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier double))))))) (identifier v)))))) )))) (functionBody (block { (statements (statement (nonLabelledStatement (ifStatement if ( (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier v)))))))))) (relationalOperator <) (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier min))))))))))))))))) ) (statement (nonLabelledStatement (block { (statements (statement (nonLabelledStatement (expressionStatement (expr (assignableExpression (identifier v)) (assignmentOperator =) (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier min)))))))))))))))))) ;)))) }))) else (statement (nonLabelledStatement (ifStatement if ( (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier v)))))))))) (relationalOperator >) (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier max))))))))))))))))) ) (statement (nonLabelledStatement (block { (statements (statement (nonLabelledStatement (expressionStatement (expr (assignableExpression (identifier v)) (assignmentOperator =) (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier max)))))))))))))))))) ;)))) }))))))))) (statement (nonLabelledStatement (expressionStatement (expr (assignableExpression (identifier _value)) (assignmentOperator =) (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier v)))))))))))))))))) ;)))) }))) metadata (classMemberDeclaration (methodSignature (constructorSignature (constructorName (typeIdentifier Gauge)) (formalParameterList ( (normalFormalParameters (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (declaredIdentifier (finalConstVarOrType (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier String))))))) (identifier name))))) , (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (declaredIdentifier (finalConstVarOrType (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier String))))))) (identifier description))))) , (normalFormalParameter metadata (normalFormalParameterNoMetadata (fieldFormalParameter this . (identifier min)))) , (normalFormalParameter metadata (normalFormalParameterNoMetadata (fieldFormalParameter this . (identifier max))))) ))) (initializers : (initializerListEntry (fieldInitializer (identifier _value) = (initializerExpression (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier min))))))))))))))))))) , (initializerListEntry super (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier name))))))))))))))))) , (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier description))))))))))))))))))) ))))) (functionBody (block { (statements (statement (nonLabelledStatement (expressionStatement (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier ArgumentError)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier checkNotNull)))) (selector (argumentPart (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier min))))))))))))))))) , (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString 'min'))))))))))))))))))))) ))))))))))))))))))) ;))) (statement (nonLabelledStatement (expressionStatement (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier ArgumentError)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier checkNotNull)))) (selector (argumentPart (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier max))))))))))))))))) , (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString 'max'))))))))))))))))))))) ))))))))))))))))))) ;))) (statement (nonLabelledStatement (ifStatement if ( (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (prefixOperator (negationOperator !)) (unaryExpression (postfixExpression (primary ( (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier min)))))))))) (relationalOperator <) (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier max))))))))))))))))) )))))))))))))))))) ) (statement (nonLabelledStatement (expressionStatement (expr (throwExpression throw (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (newExpression new (constructorDesignation (typeIdentifier ArgumentError)) (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString 'min must be less than max'))))))))))))))))))))) ))))))))))))))))))))) ;))))))) }))) metadata (classMemberDeclaration (methodSignature (functionSignature (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier Map))))) (identifier _toJSON) (formalParameterPart (formalParameterList ( ))))) (functionBody (block { (statements (statement (nonLabelledStatement (localVariableDeclaration metadata (initializedVariableDeclaration (declaredIdentifier (finalConstVarOrType (varOrType var)) (identifier map)) = (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (setOrMapLiteral { (elements (element (mapElement (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString 'type'))))))))))))))))))) : (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString 'Gauge'))))))))))))))))))))) , (element (mapElement (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString 'id'))))))))))))))))))) : (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString 'metrics/$name'))))))))))))))))))))) , (element (mapElement (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString 'name'))))))))))))))))))) : (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier name))))))))))))))))))) , (element (mapElement (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString 'description'))))))))))))))))))) : (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier description))))))))))))))))))) , (element (mapElement (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString 'value'))))))))))))))))))) : (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier value))))))))))))))))))) , (element (mapElement (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString 'min'))))))))))))))))))) : (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier min))))))))))))))))))) , (element (mapElement (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString 'max'))))))))))))))))))) : (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier max))))))))))))))))))) ,) }))))))))))))))))))) ;))) (statement (nonLabelledStatement (returnStatement return (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier map))))))))))))))))) ;)))) }))) })) metadata (topLevelDeclaration (classDeclaration class (typeIdentifier Counter) (superclass extends (typeNotVoid (typeNotVoidNotFunction (typeName (typeIdentifier Metric))))) { metadata (classMemberDeclaration (declaration (constructorSignature (constructorName (typeIdentifier Counter)) (formalParameterList ( (normalFormalParameters (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (declaredIdentifier (finalConstVarOrType (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier String))))))) (identifier name))))) , (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (declaredIdentifier (finalConstVarOrType (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier String))))))) (identifier description)))))) ))) (initializers : (initializerListEntry super (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier name))))))))))))))))) , (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier description))))))))))))))))))) ))))) ;) metadata (classMemberDeclaration (declaration (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier double)))))) (initializedIdentifierList (initializedIdentifier (identifier _value) = (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (numericLiteral 0.0))))))))))))))))))))) ;) metadata (classMemberDeclaration (methodSignature (getterSignature (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier double))))) get (identifier value))) (functionBody => (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier _value))))))))))))))))) ;)) metadata (classMemberDeclaration (methodSignature (setterSignature set (identifier value) (formalParameterList ( (normalFormalParameters (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (declaredIdentifier (finalConstVarOrType (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier double))))))) (identifier v)))))) )))) (functionBody (block { (statements (statement (nonLabelledStatement (expressionStatement (expr (assignableExpression (identifier _value)) (assignmentOperator =) (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier v)))))))))))))))))) ;)))) }))) metadata (classMemberDeclaration (methodSignature (functionSignature (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier Map))))) (identifier _toJSON) (formalParameterPart (formalParameterList ( ))))) (functionBody (block { (statements (statement (nonLabelledStatement (localVariableDeclaration metadata (initializedVariableDeclaration (declaredIdentifier (finalConstVarOrType (varOrType var)) (identifier map)) = (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (setOrMapLiteral { (elements (element (mapElement (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString 'type'))))))))))))))))))) : (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString 'Counter'))))))))))))))))))))) , (element (mapElement (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString 'id'))))))))))))))))))) : (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString 'metrics/$name'))))))))))))))))))))) , (element (mapElement (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString 'name'))))))))))))))))))) : (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier name))))))))))))))))))) , (element (mapElement (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString 'description'))))))))))))))))))) : (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier description))))))))))))))))))) , (element (mapElement (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString 'value'))))))))))))))))))) : (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier value))))))))))))))))))) ,) }))))))))))))))))))) ;))) (statement (nonLabelledStatement (returnStatement return (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier map))))))))))))))))) ;)))) }))) })) metadata (topLevelDeclaration (classDeclaration class (typeIdentifier Metrics) { metadata (classMemberDeclaration (declaration static final (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier Map)) (typeArguments < (typeList (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier String))))) , (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier Metric)))))) >)))) (staticFinalDeclarationList (staticFinalDeclaration (identifier _metrics) = (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (newExpression new (constructorDesignation (typeName (typeIdentifier Map)) (typeArguments < (typeList (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier String))))) , (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier Metric)))))) >)) (arguments ( )))))))))))))))))))))) ;) metadata (classMemberDeclaration (methodSignature static (functionSignature (type (typeNotFunction void)) (identifier register) (formalParameterPart (formalParameterList ( (normalFormalParameters (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (declaredIdentifier (finalConstVarOrType (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier Metric))))))) (identifier metric)))))) ))))) (functionBody (block { (statements (statement (nonLabelledStatement (expressionStatement (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier ArgumentError)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier checkNotNull)))) (selector (argumentPart (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier metric))))))))))))))))) , (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString 'metric'))))))))))))))))))))) ))))))))))))))))))) ;))) (statement (nonLabelledStatement (ifStatement if ( (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier _metrics)) (selector (assignableSelector (unconditionalAssignableSelector [ (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier metric)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier name))))))))))))))))))) ])))))))))))) (equalityOperator !=) (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (nullLiteral null)))))))))))))))))) ) (statement (nonLabelledStatement (block { (statements (statement (nonLabelledStatement (expressionStatement (expr (throwExpression throw (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (newExpression new (constructorDesignation (typeIdentifier ArgumentError)) (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString 'Registered metrics have unique names'))))))))))))))))))))) ))))))))))))))))))))) ;)))) })))))) (statement (nonLabelledStatement (expressionStatement (expr (assignableExpression (primary (identifier _metrics)) (assignableSelectorPart (assignableSelector (unconditionalAssignableSelector [ (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier metric)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier name))))))))))))))))))) ])))) (assignmentOperator =) (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier metric)))))))))))))))))) ;)))) }))) metadata (classMemberDeclaration (methodSignature static (functionSignature (type (typeNotFunction void)) (identifier deregister) (formalParameterPart (formalParameterList ( (normalFormalParameters (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (declaredIdentifier (finalConstVarOrType (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier Metric))))))) (identifier metric)))))) ))))) (functionBody (block { (statements (statement (nonLabelledStatement (expressionStatement (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier ArgumentError)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier checkNotNull)))) (selector (argumentPart (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier metric))))))))))))))))) , (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString 'metric'))))))))))))))))))))) ))))))))))))))))))) ;))) (statement (nonLabelledStatement (expressionStatement (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier _metrics)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier remove)))) (selector (argumentPart (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier metric)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier name))))))))))))))))))))) ))))))))))))))))))) ;)))) }))) (metadata @ (metadatum (constructorDesignation (typeIdentifier pragma)) (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString "vm:entry-point"))))))))))))))))))) , (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (prefixOperator (negationOperator !)) (unaryExpression (postfixExpression (primary (constObjectExpression const (constructorDesignation (qualifiedName (typeIdentifier bool) . (identifier fromEnvironment))) (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString "dart.vm.product"))))))))))))))))))))) )))))))))))))))))))))) )))) (classMemberDeclaration (methodSignature static (functionSignature (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier String)) ?))) (identifier _printMetric) (formalParameterPart (formalParameterList ( (normalFormalParameters (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (declaredIdentifier (finalConstVarOrType (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier String))))))) (identifier id)))))) ))))) (functionBody (block { (statements (statement (nonLabelledStatement (localVariableDeclaration metadata (initializedVariableDeclaration (declaredIdentifier (finalConstVarOrType (varOrType var)) (identifier metric)) = (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier _metrics)) (selector (assignableSelector (unconditionalAssignableSelector [ (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier id))))))))))))))))) ]))))))))))))))))))) ;))) (statement (nonLabelledStatement (ifStatement if ( (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier metric))))))))))) (equalityOperator ==) (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (nullLiteral null)))))))))))))))))) ) (statement (nonLabelledStatement (block { (statements (statement (nonLabelledStatement (returnStatement return (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (nullLiteral null)))))))))))))))))) ;)))) })))))) (statement (nonLabelledStatement (returnStatement return (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier json)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier encode)))) (selector (argumentPart (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier metric)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier _toJSON)))) (selector (argumentPart (arguments ( ))))))))))))))))))))) ))))))))))))))))))) ;)))) }))) (metadata @ (metadatum (constructorDesignation (typeIdentifier pragma)) (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString "vm:entry-point"))))))))))))))))))) , (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (prefixOperator (negationOperator !)) (unaryExpression (postfixExpression (primary (constObjectExpression const (constructorDesignation (qualifiedName (typeIdentifier bool) . (identifier fromEnvironment))) (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString "dart.vm.product"))))))))))))))))))))) )))))))))))))))))))))) )))) (classMemberDeclaration (methodSignature static (functionSignature (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier String))))) (identifier _printMetrics) (formalParameterPart (formalParameterList ( ))))) (functionBody (block { (statements (statement (nonLabelledStatement (localVariableDeclaration metadata (initializedVariableDeclaration (declaredIdentifier (finalConstVarOrType (varOrType var)) (identifier metrics)) = (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (listLiteral [ ]))))))))))))))))))) ;))) (statement (nonLabelledStatement (forStatement for ( (forLoopParts metadata (declaredIdentifier (finalConstVarOrType (varOrType var)) (identifier metric)) in (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier _metrics)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier values)))))))))))))))))))) ) (statement (nonLabelledStatement (block { (statements (statement (nonLabelledStatement (expressionStatement (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier metrics)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier add)))) (selector (argumentPart (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier metric)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier _toJSON)))) (selector (argumentPart (arguments ( ))))))))))))))))))))) ))))))))))))))))))) ;)))) })))))) (statement (nonLabelledStatement (localVariableDeclaration metadata (initializedVariableDeclaration (declaredIdentifier (finalConstVarOrType (varOrType var)) (identifier map)) = (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (setOrMapLiteral { (elements (element (mapElement (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString 'type'))))))))))))))))))) : (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString 'MetricList'))))))))))))))))))))) , (element (mapElement (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString 'metrics'))))))))))))))))))) : (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier metrics))))))))))))))))))) ,) }))))))))))))))))))) ;))) (statement (nonLabelledStatement (returnStatement return (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier json)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier encode)))) (selector (argumentPart (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier map))))))))))))))))))) ))))))))))))))))))) ;)))) }))) }))) <EOF>)