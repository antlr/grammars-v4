(compilationUnit (libraryDeclaration (libraryName metadata library (dottedIdentifierList (identifier dart) . (identifier core)) ;) (importOrExport (libraryImport metadata (importSpecification import (configurableUri (uri (stringLiteral (singleLineString "dart:collection")))) ;))) (importOrExport (libraryImport metadata (importSpecification import (configurableUri (uri (stringLiteral (singleLineString "dart:_internal")))) (combinator hide (identifierList (identifier Symbol) , (identifier LinkedList) , (identifier LinkedListEntry))) ;))) (importOrExport (libraryImport metadata (importSpecification import (configurableUri (uri (stringLiteral (singleLineString "dart:_internal")))) as (identifier internal) (combinator show (identifierList (identifier Symbol))) ;))) (importOrExport (libraryImport metadata (importSpecification import (configurableUri (uri (stringLiteral (singleLineString "dart:convert")))) (combinator show (identifierList (identifier ascii) , (identifier base64) , (identifier Base64Codec) , (identifier Encoding) , (identifier latin1) , (identifier StringConversionSink) , (identifier utf8))) ;))) (importOrExport (libraryImport metadata (importSpecification import (configurableUri (uri (stringLiteral (singleLineString "dart:math")))) (combinator show (identifierList (identifier Random))) ;))) (importOrExport (libraryImport metadata (importSpecification import (configurableUri (uri (stringLiteral (singleLineString "dart:typed_data")))) (combinator show (identifierList (identifier Uint8List))) ;))) (importOrExport (libraryExport (metadata @ (metadatum (constructorDesignation (typeIdentifier Since)) (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString "2.1"))))))))))))))))))))) )))) export (configurableUri (uri (stringLiteral (singleLineString "dart:async")))) (combinator show (identifierList (identifier Future) , (identifier Stream))) ;)) (importOrExport (libraryExport (metadata @ (metadatum (constructorDesignation (typeIdentifier Since)) (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString "2.12"))))))))))))))))))))) )))) export (configurableUri (uri (stringLiteral (singleLineString "dart:async")))) (combinator show (identifierList (identifier FutureExtensions))) ;)) (partDirective metadata part (uri (stringLiteral (singleLineString "annotations.dart"))) ;) (partDirective metadata part (uri (stringLiteral (singleLineString "bigint.dart"))) ;) (partDirective metadata part (uri (stringLiteral (singleLineString "bool.dart"))) ;) (partDirective metadata part (uri (stringLiteral (singleLineString "comparable.dart"))) ;) (partDirective metadata part (uri (stringLiteral (singleLineString "date_time.dart"))) ;) (partDirective metadata part (uri (stringLiteral (singleLineString "double.dart"))) ;) (partDirective metadata part (uri (stringLiteral (singleLineString "duration.dart"))) ;) (partDirective metadata part (uri (stringLiteral (singleLineString "enum.dart"))) ;) (partDirective metadata part (uri (stringLiteral (singleLineString "errors.dart"))) ;) (partDirective metadata part (uri (stringLiteral (singleLineString "exceptions.dart"))) ;) (partDirective metadata part (uri (stringLiteral (singleLineString "function.dart"))) ;) (partDirective metadata part (uri (stringLiteral (singleLineString "identical.dart"))) ;) (partDirective metadata part (uri (stringLiteral (singleLineString "int.dart"))) ;) (partDirective metadata part (uri (stringLiteral (singleLineString "invocation.dart"))) ;) (partDirective metadata part (uri (stringLiteral (singleLineString "iterable.dart"))) ;) (partDirective metadata part (uri (stringLiteral (singleLineString "iterator.dart"))) ;) (partDirective metadata part (uri (stringLiteral (singleLineString "list.dart"))) ;) (partDirective metadata part (uri (stringLiteral (singleLineString "map.dart"))) ;) (partDirective metadata part (uri (stringLiteral (singleLineString "null.dart"))) ;) (partDirective metadata part (uri (stringLiteral (singleLineString "num.dart"))) ;) (partDirective metadata part (uri (stringLiteral (singleLineString "object.dart"))) ;) (partDirective metadata part (uri (stringLiteral (singleLineString "pattern.dart"))) ;) (partDirective metadata part (uri (stringLiteral (singleLineString "print.dart"))) ;) (partDirective metadata part (uri (stringLiteral (singleLineString "regexp.dart"))) ;) (partDirective metadata part (uri (stringLiteral (singleLineString "set.dart"))) ;) (partDirective metadata part (uri (stringLiteral (singleLineString "sink.dart"))) ;) (partDirective metadata part (uri (stringLiteral (singleLineString "stacktrace.dart"))) ;) (partDirective metadata part (uri (stringLiteral (singleLineString "stopwatch.dart"))) ;) (partDirective metadata part (uri (stringLiteral (singleLineString "string.dart"))) ;) (partDirective metadata part (uri (stringLiteral (singleLineString "string_buffer.dart"))) ;) (partDirective metadata part (uri (stringLiteral (singleLineString "string_sink.dart"))) ;) (partDirective metadata part (uri (stringLiteral (singleLineString "symbol.dart"))) ;) (partDirective metadata part (uri (stringLiteral (singleLineString "type.dart"))) ;) (partDirective metadata part (uri (stringLiteral (singleLineString "uri.dart"))) ;) (partDirective metadata part (uri (stringLiteral (singleLineString "weak.dart"))) ;)) <EOF>)