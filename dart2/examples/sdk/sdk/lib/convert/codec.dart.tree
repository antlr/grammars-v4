(compilationUnit (partDeclaration (partHeader metadata part of (dottedIdentifierList (identifier dart) . (identifier convert)) ;) metadata (topLevelDeclaration (classDeclaration abstract class (typeIdentifier Codec) (typeParameters < (typeParameter metadata (identifier S)) , (typeParameter metadata (identifier T)) >) { metadata (classMemberDeclaration (declaration (constantConstructorSignature const (constructorName (typeIdentifier Codec)) (formalParameterList ( )))) ;) metadata (classMemberDeclaration (methodSignature (functionSignature (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier T))))) (identifier encode) (formalParameterPart (formalParameterList ( (normalFormalParameters (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (declaredIdentifier (finalConstVarOrType (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier S))))))) (identifier input)))))) ))))) (functionBody => (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier encoder)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier convert)))) (selector (argumentPart (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier input))))))))))))))))))) ))))))))))))))))))) ;)) metadata (classMemberDeclaration (methodSignature (functionSignature (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier S))))) (identifier decode) (formalParameterPart (formalParameterList ( (normalFormalParameters (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (declaredIdentifier (finalConstVarOrType (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier T))))))) (identifier encoded)))))) ))))) (functionBody => (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier decoder)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier convert)))) (selector (argumentPart (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier encoded))))))))))))))))))) ))))))))))))))))))) ;)) metadata (classMemberDeclaration (declaration (getterSignature (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier Converter)) (typeArguments < (typeList (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier S))))) , (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier T)))))) >)))) get (identifier encoder))) ;) metadata (classMemberDeclaration (declaration (getterSignature (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier Converter)) (typeArguments < (typeList (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier T))))) , (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier S)))))) >)))) get (identifier decoder))) ;) metadata (classMemberDeclaration (methodSignature (functionSignature (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier Codec)) (typeArguments < (typeList (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier S))))) , (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier R)))))) >)))) (identifier fuse) (formalParameterPart (typeParameters < (typeParameter metadata (identifier R)) >) (formalParameterList ( (normalFormalParameters (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (declaredIdentifier (finalConstVarOrType (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier Codec)) (typeArguments < (typeList (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier T))))) , (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier R)))))) >)))))) (identifier other)))))) ))))) (functionBody (block { (statements (statement (nonLabelledStatement (returnStatement return (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier _FusedCodec)) (selector (argumentPart (typeArguments < (typeList (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier S))))) , (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier T))))) , (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier R)))))) >) (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (thisExpression this))))))))))))))))) , (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier other))))))))))))))))))) ))))))))))))))))))) ;)))) }))) metadata (classMemberDeclaration (methodSignature (getterSignature (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier Codec)) (typeArguments < (typeList (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier T))))) , (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier S)))))) >)))) get (identifier inverted))) (functionBody => (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier _InvertedCodec)) (selector (argumentPart (typeArguments < (typeList (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier T))))) , (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier S)))))) >) (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (thisExpression this))))))))))))))))))) ))))))))))))))))))) ;)) })) metadata (topLevelDeclaration (classDeclaration class (typeIdentifier _FusedCodec) (typeParameters < (typeParameter metadata (identifier S)) , (typeParameter metadata (identifier M)) , (typeParameter metadata (identifier T)) >) (superclass extends (typeNotVoid (typeNotVoidNotFunction (typeName (typeIdentifier Codec)) (typeArguments < (typeList (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier S))))) , (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier T)))))) >)))) { metadata (classMemberDeclaration (declaration final (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier Codec)) (typeArguments < (typeList (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier S))))) , (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier M)))))) >)))) (initializedIdentifierList (initializedIdentifier (identifier _first)))) ;) metadata (classMemberDeclaration (declaration final (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier Codec)) (typeArguments < (typeList (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier M))))) , (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier T)))))) >)))) (initializedIdentifierList (initializedIdentifier (identifier _second)))) ;) metadata (classMemberDeclaration (methodSignature (getterSignature (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier Converter)) (typeArguments < (typeList (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier S))))) , (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier T)))))) >)))) get (identifier encoder))) (functionBody => (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier _first)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier encoder)))) (selector (assignableSelector (unconditionalAssignableSelector . (identifier fuse)))) (selector (argumentPart (typeArguments < (typeList (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier T)))))) >) (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier _second)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier encoder))))))))))))))))))))) ))))))))))))))))))) ;)) metadata (classMemberDeclaration (methodSignature (getterSignature (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier Converter)) (typeArguments < (typeList (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier T))))) , (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier S)))))) >)))) get (identifier decoder))) (functionBody => (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier _second)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier decoder)))) (selector (assignableSelector (unconditionalAssignableSelector . (identifier fuse)))) (selector (argumentPart (typeArguments < (typeList (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier S)))))) >) (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier _first)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier decoder))))))))))))))))))))) ))))))))))))))))))) ;)) metadata (classMemberDeclaration (declaration (functionSignature (identifier _FusedCodec) (formalParameterPart (formalParameterList ( (normalFormalParameters (normalFormalParameter metadata (normalFormalParameterNoMetadata (fieldFormalParameter this . (identifier _first)))) , (normalFormalParameter metadata (normalFormalParameterNoMetadata (fieldFormalParameter this . (identifier _second))))) ))))) ;) })) metadata (topLevelDeclaration (classDeclaration class (typeIdentifier _InvertedCodec) (typeParameters < (typeParameter metadata (identifier T)) , (typeParameter metadata (identifier S)) >) (superclass extends (typeNotVoid (typeNotVoidNotFunction (typeName (typeIdentifier Codec)) (typeArguments < (typeList (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier T))))) , (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier S)))))) >)))) { metadata (classMemberDeclaration (declaration final (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier Codec)) (typeArguments < (typeList (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier S))))) , (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier T)))))) >)))) (initializedIdentifierList (initializedIdentifier (identifier _codec)))) ;) metadata (classMemberDeclaration (declaration (constructorSignature (constructorName (typeIdentifier _InvertedCodec)) (formalParameterList ( (normalFormalParameters (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (declaredIdentifier (finalConstVarOrType (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier Codec)) (typeArguments < (typeList (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier S))))) , (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier T)))))) >)))))) (identifier codec)))))) ))) (initializers : (initializerListEntry (fieldInitializer (identifier _codec) = (initializerExpression (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier codec))))))))))))))))))))) ;) metadata (classMemberDeclaration (methodSignature (getterSignature (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier Converter)) (typeArguments < (typeList (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier T))))) , (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier S)))))) >)))) get (identifier encoder))) (functionBody => (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier _codec)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier decoder))))))))))))))))))) ;)) metadata (classMemberDeclaration (methodSignature (getterSignature (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier Converter)) (typeArguments < (typeList (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier S))))) , (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier T)))))) >)))) get (identifier decoder))) (functionBody => (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier _codec)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier encoder))))))))))))))))))) ;)) metadata (classMemberDeclaration (methodSignature (getterSignature (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier Codec)) (typeArguments < (typeList (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier S))))) , (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier T)))))) >)))) get (identifier inverted))) (functionBody => (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier _codec))))))))))))))))) ;)) }))) <EOF>)