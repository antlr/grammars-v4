(compilationUnit (partDeclaration (partHeader metadata part of (dottedIdentifierList (identifier dart) . (identifier math)) ;) metadata (topLevelDeclaration (classDeclaration class (typeIdentifier Point) (typeParameters < (typeParameter metadata (identifier T) extends (typeNotVoid (typeNotVoidNotFunction (typeName (typeIdentifier num))))) >) { metadata (classMemberDeclaration (declaration final (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier T))))) (initializedIdentifierList (initializedIdentifier (identifier x)))) ;) metadata (classMemberDeclaration (declaration final (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier T))))) (initializedIdentifierList (initializedIdentifier (identifier y)))) ;) metadata (classMemberDeclaration (declaration (constantConstructorSignature const (constructorName (typeIdentifier Point)) (formalParameterList ( (normalFormalParameters (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (declaredIdentifier (finalConstVarOrType (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier T))))))) (identifier x))))) , (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (declaredIdentifier (finalConstVarOrType (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier T))))))) (identifier y)))))) ))) (initializers : (initializerListEntry (fieldInitializer this . (identifier x) = (initializerExpression (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier x))))))))))))))))))) , (initializerListEntry (fieldInitializer this . (identifier y) = (initializerExpression (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier y))))))))))))))))))))) ;) metadata (classMemberDeclaration (methodSignature (functionSignature (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier String))))) (identifier toString) (formalParameterPart (formalParameterList ( ))))) (functionBody => (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString 'Point($x, $y)'))))))))))))))))))) ;)) metadata (classMemberDeclaration (methodSignature (operatorSignature (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier bool))))) operator (operator (binaryOperator ==)) (formalParameterList ( (normalFormalParameters (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (declaredIdentifier (finalConstVarOrType (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier Object))))))) (identifier other)))))) )))) (functionBody => (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier other)))))))))) (typeTest (isOperator is) (typeNotVoid (typeNotVoidNotFunction (typeName (typeIdentifier Point))))))) && (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier x))))))))))) (equalityOperator ==) (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier other)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier x)))))))))))))) && (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier y))))))))))) (equalityOperator ==) (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier other)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier y))))))))))))))))))) ;)) metadata (classMemberDeclaration (methodSignature (getterSignature (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier int))))) get (identifier hashCode))) (functionBody => (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier SystemHash)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier hash2)))) (selector (argumentPart (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier x)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier hashCode))))))))))))))))))) , (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier y)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier hashCode))))))))))))))))))))) ))))))))))))))))))) ;)) metadata (classMemberDeclaration (methodSignature (operatorSignature (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier Point)) (typeArguments < (typeList (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier T)))))) >)))) operator (operator (binaryOperator (additiveOperator +))) (formalParameterList ( (normalFormalParameters (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (declaredIdentifier (finalConstVarOrType (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier Point)) (typeArguments < (typeList (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier T)))))) >)))))) (identifier other)))))) )))) (functionBody (block { (statements (statement (nonLabelledStatement (returnStatement return (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier Point)) (selector (argumentPart (typeArguments < (typeList (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier T)))))) >) (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary ( (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier x))))) (additiveOperator +) (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier other)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier x))))))))))))))))))) )))))))))) (typeCast (asOperator as) (typeNotVoid (typeNotVoidNotFunction (typeName (typeIdentifier T)))))))))))) , (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary ( (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier y))))) (additiveOperator +) (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier other)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier y))))))))))))))))))) )))))))))) (typeCast (asOperator as) (typeNotVoid (typeNotVoidNotFunction (typeName (typeIdentifier T)))))))))))))) ))))))))))))))))))) ;)))) }))) metadata (classMemberDeclaration (methodSignature (operatorSignature (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier Point)) (typeArguments < (typeList (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier T)))))) >)))) operator (operator (binaryOperator (additiveOperator -))) (formalParameterList ( (normalFormalParameters (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (declaredIdentifier (finalConstVarOrType (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier Point)) (typeArguments < (typeList (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier T)))))) >)))))) (identifier other)))))) )))) (functionBody (block { (statements (statement (nonLabelledStatement (returnStatement return (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier Point)) (selector (argumentPart (typeArguments < (typeList (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier T)))))) >) (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary ( (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier x))))) (additiveOperator -) (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier other)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier x))))))))))))))))))) )))))))))) (typeCast (asOperator as) (typeNotVoid (typeNotVoidNotFunction (typeName (typeIdentifier T)))))))))))) , (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary ( (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier y))))) (additiveOperator -) (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier other)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier y))))))))))))))))))) )))))))))) (typeCast (asOperator as) (typeNotVoid (typeNotVoidNotFunction (typeName (typeIdentifier T)))))))))))))) ))))))))))))))))))) ;)))) }))) metadata (classMemberDeclaration (methodSignature (operatorSignature (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier Point)) (typeArguments < (typeList (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier T)))))) >)))) operator (operator (binaryOperator (multiplicativeOperator *))) (formalParameterList ( (normalFormalParameters (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (declaredIdentifier (finalConstVarOrType (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier num))))))) (identifier factor)))))) )))) (functionBody (block { (statements (statement (nonLabelledStatement (returnStatement return (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier Point)) (selector (argumentPart (typeArguments < (typeList (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier T)))))) >) (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary ( (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier x)))) (multiplicativeOperator *) (unaryExpression (postfixExpression (primary (identifier factor))))))))))))))))) )))))))))) (typeCast (asOperator as) (typeNotVoid (typeNotVoidNotFunction (typeName (typeIdentifier T)))))))))))) , (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary ( (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier y)))) (multiplicativeOperator *) (unaryExpression (postfixExpression (primary (identifier factor))))))))))))))))) )))))))))) (typeCast (asOperator as) (typeNotVoid (typeNotVoidNotFunction (typeName (typeIdentifier T)))))))))))))) ))))))))))))))))))) ;)))) }))) metadata (classMemberDeclaration (methodSignature (getterSignature (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier double))))) get (identifier magnitude))) (functionBody => (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier sqrt)) (selector (argumentPart (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier x)))) (multiplicativeOperator *) (unaryExpression (postfixExpression (primary (identifier x))))) (additiveOperator +) (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier y)))) (multiplicativeOperator *) (unaryExpression (postfixExpression (primary (identifier y))))))))))))))))))) ))))))))))))))))))) ;)) metadata (classMemberDeclaration (methodSignature (functionSignature (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier double))))) (identifier distanceTo) (formalParameterPart (formalParameterList ( (normalFormalParameters (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (declaredIdentifier (finalConstVarOrType (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier Point)) (typeArguments < (typeList (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier T)))))) >)))))) (identifier other)))))) ))))) (functionBody (block { (statements (statement (nonLabelledStatement (localVariableDeclaration metadata (initializedVariableDeclaration (declaredIdentifier (finalConstVarOrType (varOrType var)) (identifier dx)) = (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier x))))) (additiveOperator -) (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier other)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier x)))))))))))))))))))) ;))) (statement (nonLabelledStatement (localVariableDeclaration metadata (initializedVariableDeclaration (declaredIdentifier (finalConstVarOrType (varOrType var)) (identifier dy)) = (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier y))))) (additiveOperator -) (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier other)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier y)))))))))))))))))))) ;))) (statement (nonLabelledStatement (returnStatement return (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier sqrt)) (selector (argumentPart (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier dx)))) (multiplicativeOperator *) (unaryExpression (postfixExpression (primary (identifier dx))))) (additiveOperator +) (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier dy)))) (multiplicativeOperator *) (unaryExpression (postfixExpression (primary (identifier dy))))))))))))))))))) ))))))))))))))))))) ;)))) }))) metadata (classMemberDeclaration (methodSignature (functionSignature (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier T))))) (identifier squaredDistanceTo) (formalParameterPart (formalParameterList ( (normalFormalParameters (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (declaredIdentifier (finalConstVarOrType (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier Point)) (typeArguments < (typeList (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier T)))))) >)))))) (identifier other)))))) ))))) (functionBody (block { (statements (statement (nonLabelledStatement (localVariableDeclaration metadata (initializedVariableDeclaration (declaredIdentifier (finalConstVarOrType (varOrType var)) (identifier dx)) = (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier x))))) (additiveOperator -) (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier other)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier x)))))))))))))))))))) ;))) (statement (nonLabelledStatement (localVariableDeclaration metadata (initializedVariableDeclaration (declaredIdentifier (finalConstVarOrType (varOrType var)) (identifier dy)) = (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier y))))) (additiveOperator -) (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier other)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier y)))))))))))))))))))) ;))) (statement (nonLabelledStatement (returnStatement return (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary ( (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier dx)))) (multiplicativeOperator *) (unaryExpression (postfixExpression (primary (identifier dx))))) (additiveOperator +) (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier dy)))) (multiplicativeOperator *) (unaryExpression (postfixExpression (primary (identifier dy))))))))))))))))) )))))))))) (typeCast (asOperator as) (typeNotVoid (typeNotVoidNotFunction (typeName (typeIdentifier T)))))))))))) ;)))) }))) }))) <EOF>)