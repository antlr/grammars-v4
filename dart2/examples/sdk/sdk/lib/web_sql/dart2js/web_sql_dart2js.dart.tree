(compilationUnit (libraryDeclaration (libraryName metadata library (dottedIdentifierList (identifier dart) . (identifier dom) . (identifier web_sql)) ;) (importOrExport (libraryImport metadata (importSpecification import (configurableUri (uri (stringLiteral (singleLineString 'dart:async')))) ;))) (importOrExport (libraryImport metadata (importSpecification import (configurableUri (uri (stringLiteral (singleLineString 'dart:collection')))) (combinator hide (identifierList (identifier LinkedList) , (identifier LinkedListEntry))) ;))) (importOrExport (libraryImport metadata (importSpecification import (configurableUri (uri (stringLiteral (singleLineString 'dart:_internal')))) (combinator show (identifierList (identifier FixedLengthListMixin))) ;))) (importOrExport (libraryImport metadata (importSpecification import (configurableUri (uri (stringLiteral (singleLineString 'dart:html')))) ;))) (importOrExport (libraryImport metadata (importSpecification import (configurableUri (uri (stringLiteral (singleLineString 'dart:html_common')))) ;))) (importOrExport (libraryImport metadata (importSpecification import (configurableUri (uri (stringLiteral (singleLineString 'dart:_foreign_helper')))) (combinator show (identifierList (identifier JS))) ;))) (importOrExport (libraryImport metadata (importSpecification import (configurableUri (uri (stringLiteral (singleLineString 'dart:_interceptors')))) (combinator show (identifierList (identifier JavaScriptObject))) ;))) (importOrExport (libraryImport (metadata @ (metadatum (identifier deprecated))) (importSpecification import (configurableUri (uri (stringLiteral (singleLineString 'dart:_js_helper')))) (combinator show (identifierList (identifier applyExtension) , (identifier convertDartClosureToJS) , (identifier Creates) , (identifier JSName) , (identifier Native) , (identifier JavaScriptIndexingBehavior) , (identifier Returns))) ;))) metadata (topLevelDeclaration (typeAlias typedef (functionTypeAlias (functionPrefix (type (typeNotFunction void)) (identifier SqlStatementCallback)) (formalParameterPart (formalParameterList ( (normalFormalParameters (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (declaredIdentifier (finalConstVarOrType (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier SqlTransaction))))))) (identifier transaction))))) , (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (declaredIdentifier (finalConstVarOrType (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier SqlResultSet))))))) (identifier resultSet)))))) ))) ;))) metadata (topLevelDeclaration (typeAlias typedef (functionTypeAlias (functionPrefix (type (typeNotFunction void)) (identifier SqlStatementErrorCallback)) (formalParameterPart (formalParameterList ( (normalFormalParameters (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (declaredIdentifier (finalConstVarOrType (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier SqlTransaction))))))) (identifier transaction))))) , (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (declaredIdentifier (finalConstVarOrType (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier SqlError))))))) (identifier error)))))) ))) ;))) metadata (topLevelDeclaration (typeAlias typedef (functionTypeAlias (functionPrefix (type (typeNotFunction void)) (identifier SqlTransactionCallback)) (formalParameterPart (formalParameterList ( (normalFormalParameters (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (declaredIdentifier (finalConstVarOrType (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier SqlTransaction))))))) (identifier transaction)))))) ))) ;))) metadata (topLevelDeclaration (typeAlias typedef (functionTypeAlias (functionPrefix (type (typeNotFunction void)) (identifier SqlTransactionErrorCallback)) (formalParameterPart (formalParameterList ( (normalFormalParameters (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (declaredIdentifier (finalConstVarOrType (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier SqlError))))))) (identifier error)))))) ))) ;))) (metadata @ (metadatum (constructorDesignation (typeIdentifier SupportedBrowser)) (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier SupportedBrowser)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier CHROME))))))))))))))))))))) ))) @ (metadatum (constructorDesignation (typeIdentifier SupportedBrowser)) (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier SupportedBrowser)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier SAFARI))))))))))))))))))))) ))) @ (metadatum (constructorDesignation (typeIdentifier Native)) (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString "Database"))))))))))))))))))))) )))) (topLevelDeclaration (classDeclaration class (typeIdentifier SqlDatabase) (superclass extends (typeNotVoid (typeNotVoidNotFunction (typeName (typeIdentifier JavaScriptObject))))) { metadata (classMemberDeclaration (methodSignature (factoryConstructorSignature factory (constructorName (typeIdentifier SqlDatabase) . (identifier _)) (formalParameterList ( )))) (functionBody (block { (statements (statement (nonLabelledStatement (expressionStatement (expr (throwExpression throw (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (newExpression new (constructorDesignation (typeIdentifier UnsupportedError)) (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString "Not supported"))))))))))))))))))))) ))))))))))))))))))))) ;)))) }))) metadata (classMemberDeclaration (methodSignature static (getterSignature (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier bool))))) get (identifier supported))) (functionBody => (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier JS)) (selector (argumentPart (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString 'bool'))))))))))))))))))) , (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString '!!(window.openDatabase)'))))))))))))))))))))) ))))))))))))))))))) ;)) metadata (classMemberDeclaration (methodSignature (getterSignature (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier String)) ?))) get (identifier version))) (functionBody native ;)) (metadata @ (metadatum (constructorDesignation (typeIdentifier JSName)) (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString 'changeVersion'))))))))))))))))))))) )))) (classMemberDeclaration (methodSignature (functionSignature (type (typeNotFunction void)) (identifier _changeVersion) (formalParameterPart (formalParameterList ( (normalFormalParameters (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (declaredIdentifier (finalConstVarOrType (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier String))))))) (identifier oldVersion))))) , (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (declaredIdentifier (finalConstVarOrType (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier String))))))) (identifier newVersion)))))) , (optionalOrNamedFormalParameters (optionalPositionalFormalParameters [ (defaultFormalParameter (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (declaredIdentifier (finalConstVarOrType (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier SqlTransactionCallback)) ?))))) (identifier callback)))))) , (defaultFormalParameter (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (declaredIdentifier (finalConstVarOrType (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier SqlTransactionErrorCallback)) ?))))) (identifier errorCallback)))))) , (defaultFormalParameter (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (declaredIdentifier (finalConstVarOrType (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier VoidCallback)) ?))))) (identifier successCallback)))))) ])) ))))) (functionBody native ;)) (metadata @ (metadatum (constructorDesignation (typeIdentifier JSName)) (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString 'changeVersion'))))))))))))))))))))) )))) (classMemberDeclaration (methodSignature (functionSignature (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier Future)) (typeArguments < (typeList (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier SqlTransaction)))))) >)))) (identifier changeVersion) (formalParameterPart (formalParameterList ( (normalFormalParameters (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (declaredIdentifier (finalConstVarOrType (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier String))))))) (identifier oldVersion))))) , (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (declaredIdentifier (finalConstVarOrType (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier String))))))) (identifier newVersion)))))) ))))) (functionBody (block { (statements (statement (nonLabelledStatement (localVariableDeclaration metadata (initializedVariableDeclaration (declaredIdentifier (finalConstVarOrType (varOrType var)) (identifier completer)) = (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (newExpression new (constructorDesignation (typeName (typeIdentifier Completer)) (typeArguments < (typeList (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier SqlTransaction)))))) >)) (arguments ( )))))))))))))))))))) ;))) (statement (nonLabelledStatement (expressionStatement (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier _changeVersion)) (selector (argumentPart (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier oldVersion))))))))))))))))) , (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier newVersion))))))))))))))))) , (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (functionExpression (formalParameterPart (formalParameterList ( (normalFormalParameters (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (identifier value))))) ))) (functionExpressionBody (block { (statements (statement (nonLabelledStatement (expressionStatement (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier completer)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier complete)))) (selector (argumentPart (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier value))))))))))))))))))) ))))))))))))))))))) ;)))) }))))))))))))))))))) , (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (functionExpression (formalParameterPart (formalParameterList ( (normalFormalParameters (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (identifier error))))) ))) (functionExpressionBody (block { (statements (statement (nonLabelledStatement (expressionStatement (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier completer)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier completeError)))) (selector (argumentPart (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier error))))))))))))))))))) ))))))))))))))))))) ;)))) }))))))))))))))))))))) ))))))))))))))))))) ;))) (statement (nonLabelledStatement (returnStatement return (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier completer)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier future))))))))))))))))))) ;)))) }))) (metadata @ (metadatum (constructorDesignation (typeIdentifier JSName)) (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString 'readTransaction'))))))))))))))))))))) )))) (classMemberDeclaration (methodSignature (functionSignature (type (typeNotFunction void)) (identifier _readTransaction) (formalParameterPart (formalParameterList ( (normalFormalParameters (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (declaredIdentifier (finalConstVarOrType (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier SqlTransactionCallback))))))) (identifier callback)))))) , (optionalOrNamedFormalParameters (optionalPositionalFormalParameters [ (defaultFormalParameter (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (declaredIdentifier (finalConstVarOrType (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier SqlTransactionErrorCallback)) ?))))) (identifier errorCallback)))))) , (defaultFormalParameter (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (declaredIdentifier (finalConstVarOrType (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier VoidCallback)) ?))))) (identifier successCallback)))))) ])) ))))) (functionBody native ;)) (metadata @ (metadatum (constructorDesignation (typeIdentifier JSName)) (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString 'readTransaction'))))))))))))))))))))) )))) (classMemberDeclaration (methodSignature (functionSignature (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier Future)) (typeArguments < (typeList (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier SqlTransaction)))))) >)))) (identifier readTransaction) (formalParameterPart (formalParameterList ( ))))) (functionBody (block { (statements (statement (nonLabelledStatement (localVariableDeclaration metadata (initializedVariableDeclaration (declaredIdentifier (finalConstVarOrType (varOrType var)) (identifier completer)) = (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (newExpression new (constructorDesignation (typeName (typeIdentifier Completer)) (typeArguments < (typeList (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier SqlTransaction)))))) >)) (arguments ( )))))))))))))))))))) ;))) (statement (nonLabelledStatement (expressionStatement (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier _readTransaction)) (selector (argumentPart (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (functionExpression (formalParameterPart (formalParameterList ( (normalFormalParameters (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (identifier value))))) ))) (functionExpressionBody (block { (statements (statement (nonLabelledStatement (expressionStatement (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier completer)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier complete)))) (selector (argumentPart (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier value))))))))))))))))))) ))))))))))))))))))) ;)))) }))))))))))))))))))) , (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (functionExpression (formalParameterPart (formalParameterList ( (normalFormalParameters (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (identifier error))))) ))) (functionExpressionBody (block { (statements (statement (nonLabelledStatement (expressionStatement (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier completer)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier completeError)))) (selector (argumentPart (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier error))))))))))))))))))) ))))))))))))))))))) ;)))) }))))))))))))))))))))) ))))))))))))))))))) ;))) (statement (nonLabelledStatement (returnStatement return (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier completer)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier future))))))))))))))))))) ;)))) }))) metadata (classMemberDeclaration (methodSignature (functionSignature (type (typeNotFunction void)) (identifier transaction) (formalParameterPart (formalParameterList ( (normalFormalParameters (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (declaredIdentifier (finalConstVarOrType (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier SqlTransactionCallback))))))) (identifier callback)))))) , (optionalOrNamedFormalParameters (optionalPositionalFormalParameters [ (defaultFormalParameter (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (declaredIdentifier (finalConstVarOrType (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier SqlTransactionErrorCallback)) ?))))) (identifier errorCallback)))))) , (defaultFormalParameter (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (declaredIdentifier (finalConstVarOrType (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier VoidCallback)) ?))))) (identifier successCallback)))))) ])) ))))) (functionBody native ;)) (metadata @ (metadatum (constructorDesignation (typeIdentifier JSName)) (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString 'transaction'))))))))))))))))))))) )))) (classMemberDeclaration (methodSignature (functionSignature (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier Future)) (typeArguments < (typeList (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier SqlTransaction)))))) >)))) (identifier transaction_future) (formalParameterPart (formalParameterList ( ))))) (functionBody (block { (statements (statement (nonLabelledStatement (localVariableDeclaration metadata (initializedVariableDeclaration (declaredIdentifier (finalConstVarOrType (varOrType var)) (identifier completer)) = (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (newExpression new (constructorDesignation (typeName (typeIdentifier Completer)) (typeArguments < (typeList (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier SqlTransaction)))))) >)) (arguments ( )))))))))))))))))))) ;))) (statement (nonLabelledStatement (expressionStatement (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier transaction)) (selector (argumentPart (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (functionExpression (formalParameterPart (formalParameterList ( (normalFormalParameters (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (identifier value))))) ))) (functionExpressionBody (block { (statements (statement (nonLabelledStatement (expressionStatement (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier applyExtension)) (selector (argumentPart (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString 'SQLTransaction'))))))))))))))))))) , (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier value))))))))))))))))))) ))))))))))))))))))) ;))) (statement (nonLabelledStatement (expressionStatement (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier completer)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier complete)))) (selector (argumentPart (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier value))))))))))))))))))) ))))))))))))))))))) ;)))) }))))))))))))))))))) , (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (functionExpression (formalParameterPart (formalParameterList ( (normalFormalParameters (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (identifier error))))) ))) (functionExpressionBody (block { (statements (statement (nonLabelledStatement (expressionStatement (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier completer)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier completeError)))) (selector (argumentPart (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier error))))))))))))))))))) ))))))))))))))))))) ;)))) }))))))))))))))))))))) ))))))))))))))))))) ;))) (statement (nonLabelledStatement (returnStatement return (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier completer)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier future))))))))))))))))))) ;)))) }))) })) (metadata @ (metadatum (constructorDesignation (typeIdentifier Native)) (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString "SQLError"))))))))))))))))))))) )))) (topLevelDeclaration (classDeclaration class (typeIdentifier SqlError) (superclass extends (typeNotVoid (typeNotVoidNotFunction (typeName (typeIdentifier JavaScriptObject))))) { metadata (classMemberDeclaration (methodSignature (factoryConstructorSignature factory (constructorName (typeIdentifier SqlError) . (identifier _)) (formalParameterList ( )))) (functionBody (block { (statements (statement (nonLabelledStatement (expressionStatement (expr (throwExpression throw (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (newExpression new (constructorDesignation (typeIdentifier UnsupportedError)) (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString "Not supported"))))))))))))))))))))) ))))))))))))))))))))) ;)))) }))) metadata (classMemberDeclaration (declaration static const (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier int))))) (staticFinalDeclarationList (staticFinalDeclaration (identifier CONSTRAINT_ERR) = (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (numericLiteral 6))))))))))))))))))))) ;) metadata (classMemberDeclaration (declaration static const (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier int))))) (staticFinalDeclarationList (staticFinalDeclaration (identifier DATABASE_ERR) = (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (numericLiteral 1))))))))))))))))))))) ;) metadata (classMemberDeclaration (declaration static const (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier int))))) (staticFinalDeclarationList (staticFinalDeclaration (identifier QUOTA_ERR) = (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (numericLiteral 4))))))))))))))))))))) ;) metadata (classMemberDeclaration (declaration static const (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier int))))) (staticFinalDeclarationList (staticFinalDeclaration (identifier SYNTAX_ERR) = (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (numericLiteral 5))))))))))))))))))))) ;) metadata (classMemberDeclaration (declaration static const (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier int))))) (staticFinalDeclarationList (staticFinalDeclaration (identifier TIMEOUT_ERR) = (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (numericLiteral 7))))))))))))))))))))) ;) metadata (classMemberDeclaration (declaration static const (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier int))))) (staticFinalDeclarationList (staticFinalDeclaration (identifier TOO_LARGE_ERR) = (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (numericLiteral 3))))))))))))))))))))) ;) metadata (classMemberDeclaration (declaration static const (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier int))))) (staticFinalDeclarationList (staticFinalDeclaration (identifier UNKNOWN_ERR) = (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (numericLiteral 0))))))))))))))))))))) ;) metadata (classMemberDeclaration (declaration static const (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier int))))) (staticFinalDeclarationList (staticFinalDeclaration (identifier VERSION_ERR) = (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (numericLiteral 2))))))))))))))))))))) ;) metadata (classMemberDeclaration (methodSignature (getterSignature (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier int)) ?))) get (identifier code))) (functionBody native ;)) metadata (classMemberDeclaration (methodSignature (getterSignature (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier String)) ?))) get (identifier message))) (functionBody native ;)) })) (metadata @ (metadatum (constructorDesignation (typeIdentifier Native)) (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString "SQLResultSet"))))))))))))))))))))) )))) (topLevelDeclaration (classDeclaration class (typeIdentifier SqlResultSet) (superclass extends (typeNotVoid (typeNotVoidNotFunction (typeName (typeIdentifier JavaScriptObject))))) { metadata (classMemberDeclaration (methodSignature (factoryConstructorSignature factory (constructorName (typeIdentifier SqlResultSet) . (identifier _)) (formalParameterList ( )))) (functionBody (block { (statements (statement (nonLabelledStatement (expressionStatement (expr (throwExpression throw (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (newExpression new (constructorDesignation (typeIdentifier UnsupportedError)) (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString "Not supported"))))))))))))))))))))) ))))))))))))))))))))) ;)))) }))) metadata (classMemberDeclaration (methodSignature (getterSignature (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier int)) ?))) get (identifier insertId))) (functionBody native ;)) metadata (classMemberDeclaration (methodSignature (getterSignature (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier SqlResultSetRowList)) ?))) get (identifier rows))) (functionBody native ;)) metadata (classMemberDeclaration (methodSignature (getterSignature (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier int)) ?))) get (identifier rowsAffected))) (functionBody native ;)) })) (metadata @ (metadatum (constructorDesignation (typeIdentifier Native)) (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString "SQLResultSetRowList"))))))))))))))))))))) )))) (topLevelDeclaration (classDeclaration class (typeIdentifier SqlResultSetRowList) (superclass extends (typeNotVoid (typeNotVoidNotFunction (typeName (typeIdentifier JavaScriptObject)))) (mixins with (typeNotVoidList (typeNotVoid (typeNotVoidNotFunction (typeName (typeIdentifier ListMixin)) (typeArguments < (typeList (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier Map)))))) >))) , (typeNotVoid (typeNotVoidNotFunction (typeName (typeIdentifier ImmutableListMixin)) (typeArguments < (typeList (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier Map)))))) >)))))) (interfaces implements (typeNotVoidList (typeNotVoid (typeNotVoidNotFunction (typeName (typeIdentifier List)) (typeArguments < (typeList (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier Map)))))) >))))) { metadata (classMemberDeclaration (methodSignature (factoryConstructorSignature factory (constructorName (typeIdentifier SqlResultSetRowList) . (identifier _)) (formalParameterList ( )))) (functionBody (block { (statements (statement (nonLabelledStatement (expressionStatement (expr (throwExpression throw (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (newExpression new (constructorDesignation (typeIdentifier UnsupportedError)) (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString "Not supported"))))))))))))))))))))) ))))))))))))))))))))) ;)))) }))) metadata (classMemberDeclaration (methodSignature (getterSignature (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier int))))) get (identifier length))) (functionBody => (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier JS)) (selector (argumentPart (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString "int"))))))))))))))))))) , (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString "#.length"))))))))))))))))))) , (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (thisExpression this))))))))))))))))))) ))))))))))))))))))) ;)) metadata (classMemberDeclaration (methodSignature (operatorSignature (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier Map))))) operator (operator [ ]) (formalParameterList ( (normalFormalParameters (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (declaredIdentifier (finalConstVarOrType (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier int))))))) (identifier index)))))) )))) (functionBody (block { (statements (statement (nonLabelledStatement (ifStatement if ( (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier JS)) (selector (argumentPart (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString "bool"))))))))))))))))))) , (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString "# >>> 0 !== # || # >= #"))))))))))))))))))) , (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier index))))))))))))))))) , (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier index))))))))))))))))) , (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier index))))))))))))))))) , (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier length))))))))))))))))))) ))))))))))))))))))) ) (statement (nonLabelledStatement (expressionStatement (expr (throwExpression throw (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (newExpression new (constructorDesignation (qualifiedName (typeIdentifier RangeError) . (identifier index))) (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier index))))))))))))))))) , (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (thisExpression this))))))))))))))))))) ))))))))))))))))))))) ;)))))) (statement (nonLabelledStatement (returnStatement return (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (thisExpression this)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier item)))) (selector (argumentPart (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier index))))))))))))))))))) )))) (selector !)))))))))))))))) ;)))) }))) metadata (classMemberDeclaration (methodSignature (operatorSignature (type (typeNotFunction void)) operator (operator [ ] =) (formalParameterList ( (normalFormalParameters (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (declaredIdentifier (finalConstVarOrType (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier int))))))) (identifier index))))) , (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (declaredIdentifier (finalConstVarOrType (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier Map))))))) (identifier value)))))) )))) (functionBody (block { (statements (statement (nonLabelledStatement (expressionStatement (expr (throwExpression throw (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (newExpression new (constructorDesignation (typeIdentifier UnsupportedError)) (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString "Cannot assign element of immutable List."))))))))))))))))))))) ))))))))))))))))))))) ;)))) }))) metadata (classMemberDeclaration (methodSignature (setterSignature set (identifier length) (formalParameterList ( (normalFormalParameters (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (declaredIdentifier (finalConstVarOrType (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier int))))))) (identifier value)))))) )))) (functionBody (block { (statements (statement (nonLabelledStatement (expressionStatement (expr (throwExpression throw (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (newExpression new (constructorDesignation (typeIdentifier UnsupportedError)) (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString "Cannot resize immutable List."))))))))))))))))))))) ))))))))))))))))))))) ;)))) }))) metadata (classMemberDeclaration (methodSignature (getterSignature (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier Map))))) get (identifier first))) (functionBody (block { (statements (statement (nonLabelledStatement (ifStatement if ( (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (thisExpression this)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier length)))))))))))) (relationalOperator >) (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (numericLiteral 0)))))))))))))))))) ) (statement (nonLabelledStatement (block { (statements (statement (nonLabelledStatement (returnStatement return (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier JS)) (selector (argumentPart (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString 'Map'))))))))))))))))))) , (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString '#[0]'))))))))))))))))))) , (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (thisExpression this))))))))))))))))))) ))))))))))))))))))) ;)))) })))))) (statement (nonLabelledStatement (expressionStatement (expr (throwExpression throw (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (newExpression new (constructorDesignation (typeIdentifier StateError)) (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString "No elements"))))))))))))))))))))) ))))))))))))))))))))) ;)))) }))) metadata (classMemberDeclaration (methodSignature (getterSignature (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier Map))))) get (identifier last))) (functionBody (block { (statements (statement (nonLabelledStatement (localVariableDeclaration metadata (initializedVariableDeclaration (declaredIdentifier (finalConstVarOrType (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier int))))))) (identifier len)) = (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (thisExpression this)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier length)))))))))))))))))))) ;))) (statement (nonLabelledStatement (ifStatement if ( (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier len)))))))))) (relationalOperator >) (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (numericLiteral 0)))))))))))))))))) ) (statement (nonLabelledStatement (block { (statements (statement (nonLabelledStatement (returnStatement return (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier JS)) (selector (argumentPart (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString 'Map'))))))))))))))))))) , (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString '#[#]'))))))))))))))))))) , (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (thisExpression this))))))))))))))))) , (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier len))))) (additiveOperator -) (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (numericLiteral 1)))))))))))))))))))) ))))))))))))))))))) ;)))) })))))) (statement (nonLabelledStatement (expressionStatement (expr (throwExpression throw (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (newExpression new (constructorDesignation (typeIdentifier StateError)) (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString "No elements"))))))))))))))))))))) ))))))))))))))))))))) ;)))) }))) metadata (classMemberDeclaration (methodSignature (getterSignature (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier Map))))) get (identifier single))) (functionBody (block { (statements (statement (nonLabelledStatement (localVariableDeclaration metadata (initializedVariableDeclaration (declaredIdentifier (finalConstVarOrType (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier int))))))) (identifier len)) = (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (thisExpression this)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier length)))))))))))))))))))) ;))) (statement (nonLabelledStatement (ifStatement if ( (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier len))))))))))) (equalityOperator ==) (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (numericLiteral 1)))))))))))))))))) ) (statement (nonLabelledStatement (block { (statements (statement (nonLabelledStatement (returnStatement return (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier JS)) (selector (argumentPart (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString 'Map'))))))))))))))))))) , (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString '#[0]'))))))))))))))))))) , (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (thisExpression this))))))))))))))))))) ))))))))))))))))))) ;)))) })))))) (statement (nonLabelledStatement (ifStatement if ( (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier len))))))))))) (equalityOperator ==) (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (numericLiteral 0)))))))))))))))))) ) (statement (nonLabelledStatement (expressionStatement (expr (throwExpression throw (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (newExpression new (constructorDesignation (typeIdentifier StateError)) (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString "No elements"))))))))))))))))))))) ))))))))))))))))))))) ;)))))) (statement (nonLabelledStatement (expressionStatement (expr (throwExpression throw (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (newExpression new (constructorDesignation (typeIdentifier StateError)) (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString "More than one element"))))))))))))))))))))) ))))))))))))))))))))) ;)))) }))) metadata (classMemberDeclaration (methodSignature (functionSignature (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier Map))))) (identifier elementAt) (formalParameterPart (formalParameterList ( (normalFormalParameters (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (declaredIdentifier (finalConstVarOrType (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier int))))))) (identifier index)))))) ))))) (functionBody => (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (thisExpression this)) (selector (assignableSelector (unconditionalAssignableSelector [ (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier index))))))))))))))))) ])))))))))))))))))) ;)) metadata (classMemberDeclaration (methodSignature (functionSignature (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier Map)) ?))) (identifier item) (formalParameterPart (formalParameterList ( (normalFormalParameters (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (declaredIdentifier (finalConstVarOrType (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier int))))))) (identifier index)))))) ))))) (functionBody (block { (statements (statement (nonLabelledStatement (returnStatement return (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier convertNativeToDart_Dictionary)) (selector (argumentPart (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier _item_1)) (selector (argumentPart (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier index))))))))))))))))))) ))))))))))))))))))))) ))))))))))))))))))) ;)))) }))) (metadata @ (metadatum (constructorDesignation (typeIdentifier JSName)) (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString 'item'))))))))))))))))))))) )))) (classMemberDeclaration (methodSignature (constructorSignature (constructorName (typeIdentifier _item_1)) (formalParameterList ( (normalFormalParameters (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (identifier index))))) )))) (functionBody native ;)) })) (metadata @ (metadatum (constructorDesignation (typeIdentifier SupportedBrowser)) (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier SupportedBrowser)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier CHROME))))))))))))))))))))) ))) @ (metadatum (constructorDesignation (typeIdentifier SupportedBrowser)) (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier SupportedBrowser)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier SAFARI))))))))))))))))))))) ))) @ (metadatum (identifier deprecated)) @ (metadatum (constructorDesignation (typeIdentifier Native)) (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString "SQLTransaction"))))))))))))))))))))) )))) (topLevelDeclaration (classDeclaration class (typeIdentifier SqlTransaction) (superclass extends (typeNotVoid (typeNotVoidNotFunction (typeName (typeIdentifier JavaScriptObject))))) { metadata (classMemberDeclaration (methodSignature (factoryConstructorSignature factory (constructorName (typeIdentifier SqlTransaction) . (identifier _)) (formalParameterList ( )))) (functionBody (block { (statements (statement (nonLabelledStatement (expressionStatement (expr (throwExpression throw (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (newExpression new (constructorDesignation (typeIdentifier UnsupportedError)) (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString "Not supported"))))))))))))))))))))) ))))))))))))))))))))) ;)))) }))) (metadata @ (metadatum (constructorDesignation (typeIdentifier JSName)) (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString 'executeSql'))))))))))))))))))))) )))) (classMemberDeclaration (methodSignature (functionSignature (type (typeNotFunction void)) (identifier _executeSql) (formalParameterPart (formalParameterList ( (normalFormalParameters (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (declaredIdentifier (finalConstVarOrType (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier String))))))) (identifier sqlStatement)))))) , (optionalOrNamedFormalParameters (optionalPositionalFormalParameters [ (defaultFormalParameter (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (declaredIdentifier (finalConstVarOrType (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier List)) ?))))) (identifier arguments)))))) , (defaultFormalParameter (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (declaredIdentifier (finalConstVarOrType (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier SqlStatementCallback)) ?))))) (identifier callback)))))) , (defaultFormalParameter (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (declaredIdentifier (finalConstVarOrType (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier SqlStatementErrorCallback)) ?))))) (identifier errorCallback)))))) ])) ))))) (functionBody native ;)) (metadata @ (metadatum (constructorDesignation (typeIdentifier JSName)) (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString 'executeSql'))))))))))))))))))))) )))) (classMemberDeclaration (methodSignature (functionSignature (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier Future)) (typeArguments < (typeList (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier SqlResultSet)))))) >)))) (identifier executeSql) (formalParameterPart (formalParameterList ( (normalFormalParameters (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (declaredIdentifier (finalConstVarOrType (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier String))))))) (identifier sqlStatement)))))) , (optionalOrNamedFormalParameters (optionalPositionalFormalParameters [ (defaultFormalParameter (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (declaredIdentifier (finalConstVarOrType (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier List)) ?))))) (identifier arguments)))))) ])) ))))) (functionBody (block { (statements (statement (nonLabelledStatement (localVariableDeclaration metadata (initializedVariableDeclaration (declaredIdentifier (finalConstVarOrType (varOrType var)) (identifier completer)) = (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (newExpression new (constructorDesignation (typeName (typeIdentifier Completer)) (typeArguments < (typeList (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier SqlResultSet)))))) >)) (arguments ( )))))))))))))))))))) ;))) (statement (nonLabelledStatement (expressionStatement (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier _executeSql)) (selector (argumentPart (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier sqlStatement))))))))))))))))) , (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier arguments))))))))))))))))) , (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (functionExpression (formalParameterPart (formalParameterList ( (normalFormalParameters (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (identifier transaction)))) , (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (identifier resultSet))))) ))) (functionExpressionBody (block { (statements (statement (nonLabelledStatement (expressionStatement (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier applyExtension)) (selector (argumentPart (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString 'SQLResultSet'))))))))))))))))))) , (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier resultSet))))))))))))))))))) ))))))))))))))))))) ;))) (statement (nonLabelledStatement (expressionStatement (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier applyExtension)) (selector (argumentPart (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString 'SQLResultSetRowList'))))))))))))))))))) , (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier resultSet)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier rows))))))))))))))))))))) ))))))))))))))))))) ;))) (statement (nonLabelledStatement (expressionStatement (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier completer)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier complete)))) (selector (argumentPart (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier resultSet))))))))))))))))))) ))))))))))))))))))) ;)))) }))))))))))))))))))) , (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (functionExpression (formalParameterPart (formalParameterList ( (normalFormalParameters (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (identifier transaction)))) , (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (identifier error))))) ))) (functionExpressionBody (block { (statements (statement (nonLabelledStatement (expressionStatement (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier completer)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier completeError)))) (selector (argumentPart (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier error))))))))))))))))))) ))))))))))))))))))) ;)))) }))))))))))))))))))))) ))))))))))))))))))) ;))) (statement (nonLabelledStatement (returnStatement return (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier completer)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier future))))))))))))))))))) ;)))) }))) }))) <EOF>)