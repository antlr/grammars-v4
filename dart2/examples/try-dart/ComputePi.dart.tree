(compilationUnit (libraryDeclaration (importOrExport (libraryImport metadata (importSpecification import (configurableUri (uri (stringLiteral (singleLineString 'dart:math')))) (combinator show (identifierList (identifier Random))) ;))) metadata (topLevelDeclaration (functionSignature (type (typeNotFunction void)) (identifier main) (formalParameterPart (formalParameterList ( )))) (functionBody async (block { (statements (statement (nonLabelledStatement (expressionStatement (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier print)) (selector (argumentPart (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString 'Compute π using the Monte Carlo method.'))))))))))))))))))))) ))))))))))))))))))) ;))) (statement (nonLabelledStatement (forStatement await for ( (forLoopParts metadata (declaredIdentifier (finalConstVarOrType final) (identifier estimate)) in (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier computePi)) (selector (argumentPart (arguments ( )))) (selector (assignableSelector (unconditionalAssignableSelector . (identifier take)))) (selector (argumentPart (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (numericLiteral 100)))))))))))))))))))) )))))))))))))))))))) ) (statement (nonLabelledStatement (block { (statements (statement (nonLabelledStatement (expressionStatement (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier print)) (selector (argumentPart (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString 'π ≅ $estimate'))))))))))))))))))))) ))))))))))))))))))) ;)))) }))))))) }))) metadata (topLevelDeclaration (functionSignature (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier Stream)) (typeArguments < (typeList (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier double)))))) >)))) (identifier computePi) (formalParameterPart (formalParameterList ( (optionalOrNamedFormalParameters (namedFormalParameters { (defaultNamedParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (declaredIdentifier (finalConstVarOrType (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier int))))))) (identifier batch)))) = (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (numericLiteral 100000))))))))))))))))))) })) )))) (functionBody async * (block { (statements (statement (nonLabelledStatement (localVariableDeclaration metadata (initializedVariableDeclaration (declaredIdentifier (finalConstVarOrType (varOrType var)) (identifier total)) = (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (numericLiteral 0))))))))))))))))))) ;))) (statement (nonLabelledStatement (localVariableDeclaration metadata (initializedVariableDeclaration (declaredIdentifier (finalConstVarOrType (varOrType var)) (identifier count)) = (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (numericLiteral 0))))))))))))))))))) ;))) (statement (nonLabelledStatement (whileStatement while ( (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (booleanLiteral true)))))))))))))))))) ) (statement (nonLabelledStatement (block { (statements (statement (nonLabelledStatement (localVariableDeclaration metadata (initializedVariableDeclaration (declaredIdentifier (finalConstVarOrType final) (identifier points)) = (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier generateRandom)) (selector (argumentPart (arguments ( )))) (selector (assignableSelector (unconditionalAssignableSelector . (identifier take)))) (selector (argumentPart (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier batch))))))))))))))))))) )))))))))))))))))))) ;))) (statement (nonLabelledStatement (localVariableDeclaration metadata (initializedVariableDeclaration (declaredIdentifier (finalConstVarOrType final) (identifier inside)) = (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier points)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier where)))) (selector (argumentPart (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (functionExpression (formalParameterPart (formalParameterList ( (normalFormalParameters (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (identifier p))))) ))) (functionExpressionBody => (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier p)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier isInsideUnitCircle))))))))))))))))))))))))))))))))))))))) )))))))))))))))))))) ;))) (statement (nonLabelledStatement (expressionStatement (expr (assignableExpression (identifier total)) (assignmentOperator (compoundAssignmentOperator +=)) (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier batch)))))))))))))))))) ;))) (statement (nonLabelledStatement (expressionStatement (expr (assignableExpression (identifier count)) (assignmentOperator (compoundAssignmentOperator +=)) (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier inside)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier length)))))))))))))))))))) ;))) (statement (nonLabelledStatement (localVariableDeclaration metadata (initializedVariableDeclaration (declaredIdentifier (finalConstVarOrType final) (identifier ratio)) = (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier count)))) (multiplicativeOperator /) (unaryExpression (postfixExpression (primary (identifier total)))))))))))))))))) ;))) (statement (nonLabelledStatement (yieldStatement yield (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier ratio)))) (multiplicativeOperator *) (unaryExpression (postfixExpression (primary (literal (numericLiteral 4)))))))))))))))))) ;)))) }))))))) }))) metadata (topLevelDeclaration (functionSignature (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier Iterable)) (typeArguments < (typeList (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier Point)))))) >)))) (identifier generateRandom) (formalParameterPart (formalParameterList ( (optionalOrNamedFormalParameters (optionalPositionalFormalParameters [ (defaultFormalParameter (normalFormalParameter metadata (normalFormalParameterNoMetadata (simpleFormalParameter (declaredIdentifier (finalConstVarOrType (varOrType (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier int)) ?))))) (identifier seed)))))) ])) )))) (functionBody sync * (block { (statements (statement (nonLabelledStatement (localVariableDeclaration metadata (initializedVariableDeclaration (declaredIdentifier (finalConstVarOrType final) (identifier random)) = (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier Random)) (selector (argumentPart (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier seed))))))))))))))))))) )))))))))))))))))))) ;))) (statement (nonLabelledStatement (whileStatement while ( (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (booleanLiteral true)))))))))))))))))) ) (statement (nonLabelledStatement (block { (statements (statement (nonLabelledStatement (yieldStatement yield (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier Point)) (selector (argumentPart (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier random)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier nextDouble)))) (selector (argumentPart (arguments ( ))))))))))))))))))) , (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier random)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier nextDouble)))) (selector (argumentPart (arguments ( ))))))))))))))))))))) ))))))))))))))))))) ;)))) }))))))) }))) metadata (topLevelDeclaration (classDeclaration class (typeIdentifier Point) { metadata (classMemberDeclaration (declaration final (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier double))))) (initializedIdentifierList (initializedIdentifier (identifier x)))) ;) metadata (classMemberDeclaration (declaration final (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier double))))) (initializedIdentifierList (initializedIdentifier (identifier y)))) ;) metadata (classMemberDeclaration (declaration (constantConstructorSignature const (constructorName (typeIdentifier Point)) (formalParameterList ( (normalFormalParameters (normalFormalParameter metadata (normalFormalParameterNoMetadata (fieldFormalParameter this . (identifier x)))) , (normalFormalParameter metadata (normalFormalParameterNoMetadata (fieldFormalParameter this . (identifier y))))) )))) ;) metadata (classMemberDeclaration (methodSignature (getterSignature (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier bool))))) get (identifier isInsideUnitCircle))) (functionBody => (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier x)))) (multiplicativeOperator *) (unaryExpression (postfixExpression (primary (identifier x))))) (additiveOperator +) (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier y)))) (multiplicativeOperator *) (unaryExpression (postfixExpression (primary (identifier y)))))))))) (relationalOperator <=) (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (numericLiteral 1)))))))))))))))))) ;)) }))) <EOF>)