(compilationUnit (libraryDeclaration metadata (topLevelDeclaration (classDeclaration abstract class (typeIdentifier Item) { metadata (classMemberDeclaration (declaration (functionSignature (type (typeNotFunction void)) (identifier use) (formalParameterPart (formalParameterList ( ))))) ;) })) metadata (topLevelDeclaration (classDeclaration class (typeIdentifier Chest) (typeParameters < (typeParameter metadata (identifier T)) >) (interfaces implements (typeNotVoidList (typeNotVoid (typeNotVoidNotFunction (typeName (typeIdentifier Item)))))) { metadata (classMemberDeclaration (declaration final (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier List)) (typeArguments < (typeList (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier T)))))) >)))) (initializedIdentifierList (initializedIdentifier (identifier contents)))) ;) metadata (classMemberDeclaration (declaration (functionSignature (identifier Chest) (formalParameterPart (formalParameterList ( (normalFormalParameters (normalFormalParameter metadata (normalFormalParameterNoMetadata (fieldFormalParameter this . (identifier contents))))) ))))) ;) (metadata @ (metadatum (identifier override))) (classMemberDeclaration (methodSignature (functionSignature (type (typeNotFunction void)) (identifier use) (formalParameterPart (formalParameterList ( ))))) (functionBody => (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier print)) (selector (argumentPart (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString '$this has ${contents.length} items.'))))))))))))))))))))) ))))))))))))))))))) ;)) })) metadata (topLevelDeclaration (classDeclaration class (typeIdentifier Sword) (interfaces implements (typeNotVoidList (typeNotVoid (typeNotVoidNotFunction (typeName (typeIdentifier Item)))))) { metadata (classMemberDeclaration (methodSignature (getterSignature (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier int))))) get (identifier damage))) (functionBody => (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (numericLiteral 5)))))))))))))))))) ;)) (metadata @ (metadatum (identifier override))) (classMemberDeclaration (methodSignature (functionSignature (type (typeNotFunction void)) (identifier use) (formalParameterPart (formalParameterList ( ))))) (functionBody => (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier print)) (selector (argumentPart (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (stringLiteral (singleLineString '$this dealt $damage damage.'))))))))))))))))))))) ))))))))))))))))))) ;)) })) metadata (topLevelDeclaration (classDeclaration class (typeIdentifier DiamondSword) (superclass extends (typeNotVoid (typeNotVoidNotFunction (typeName (typeIdentifier Sword))))) { (metadata @ (metadatum (identifier override))) (classMemberDeclaration (declaration final (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier int))))) (initializedIdentifierList (initializedIdentifier (identifier damage) = (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (numericLiteral 50))))))))))))))))))))) ;) })) metadata (topLevelDeclaration (functionSignature (type (typeNotFunction void)) (identifier main) (formalParameterPart (formalParameterList ( )))) (functionBody (block { (statements (statement (nonLabelledStatement (localVariableDeclaration metadata (initializedVariableDeclaration (declaredIdentifier (finalConstVarOrType (varOrType var)) (identifier chest)) = (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier Chest)) (selector (argumentPart (typeArguments < (typeList (type (typeNotFunction (typeNotVoidNotFunction (typeName (typeIdentifier Item)))))) >) (arguments ( (argumentList (expressionList (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (literal (listLiteral [ (elements (element (expressionElement (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier DiamondSword)) (selector (argumentPart (arguments ( ))))))))))))))))))))) , (element (expressionElement (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier Sword)) (selector (argumentPart (arguments ( ))))))))))))))))))))) ,) ])))))))))))))))))))) )))))))))))))))))))) ;))) (statement (nonLabelledStatement (expressionStatement (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier chest)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier use)))) (selector (argumentPart (arguments ( ))))))))))))))))))) ;))) (statement (nonLabelledStatement (forStatement for ( (forLoopParts metadata (declaredIdentifier (finalConstVarOrType final) (identifier item)) in (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier chest)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier contents)))))))))))))))))))) ) (statement (nonLabelledStatement (block { (statements (statement (nonLabelledStatement (expressionStatement (expr (conditionalExpression (ifNullExpression (logicalOrExpression (logicalAndExpression (equalityExpression (relationalExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (postfixExpression (primary (identifier item)) (selector (assignableSelector (unconditionalAssignableSelector . (identifier use)))) (selector (argumentPart (arguments ( ))))))))))))))))))) ;)))) }))))))) })))) <EOF>)