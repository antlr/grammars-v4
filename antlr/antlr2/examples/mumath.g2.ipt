grammar_
 classDef
  parserSpec
   class
   id_
    mumathParser
   extends
   Parser
   ;
   parserOptionsSpec
    options
    {
    option
     id_
      k
     =
     optionValue
      2
     ;
    }
   actionBlock
    {
    \n
     
     
     
    S
    t
    r
    i
    n
    g
     
    m
    u
    n
    g
    I
    D
    (
    T
    o
    k
    e
    n
     
    t
    o
    k
    )
    \n
     
     
     
    {
    \n
     
     
     
     
     
     
    i
    n
    t
     
    i
    ;
    \n
     
     
     
     
     
     
    S
    t
    r
    i
    n
    g
     
    t
     
    =
     
    t
    o
    k
    .
    g
    e
    t
    T
    e
    x
    t
    (
    )
    ;
    \n
     
     
     
     
     
     
    S
    t
    r
    i
    n
    g
     
    o
     
    =
     
    ""
    ;
    \n
     
     
     
     
     
     
    i
    f
    (
    t
    .
    e
    q
    u
    a
    l
    s
    (
    "@"
    )
    )
    {
     
    o
     
    =
     
    "last"
    ;
    }
    \n
     
     
     
     
     
     
    e
    l
    s
    e
     
    i
    f
    (
    t
    .
    e
    q
    u
    a
    l
    s
    (
    "#E"
    )
    )
    {
    o
     
    =
     
    "%E"
    ;
    }
    \n
     
     
     
     
     
     
    e
    l
    s
    e
     
    i
    f
    (
    t
    .
    c
    h
    a
    r
    A
    t
    (
    t
    .
    l
    e
    n
    g
    t
    h
    (
    )
    -
    1
    )
     
    =
    =
     
    '#'
    )
    \n
     
     
     
     
     
     
     
     
    {
     
    o
     
    =
     
    "lie_"
    +
    t
    .
    s
    u
    b
    s
    t
    r
    i
    n
    g
    (
    0
    ,
    t
    .
    l
    e
    n
    g
    t
    h
    (
    )
    -
    1
    )
    .
    t
    o
    L
    o
    w
    e
    r
    C
    a
    s
    e
    (
    )
    ;
     
    }
    \n
     
     
     
     
     
     
    e
    l
    s
    e
     
    i
    f
    (
    (
    i
     
    =
     
    t
    .
    i
    n
    d
    e
    x
    O
    f
    (
    '#'
    )
    )
     
    >
    =
     
    0
    )
    \n
     
     
     
     
     
     
    {
    \n
     
     
     
     
     
     
     
     
     
    o
     
    =
     
    "lie_"
    +
    (
    n
    e
    w
     
    S
    t
    r
    i
    n
    g
    B
    u
    f
    f
    e
    r
    (
    t
    )
    )
    .
    d
    e
    l
    e
    t
    e
    C
    h
    a
    r
    A
    t
    (
    i
    )
    .
    t
    o
    S
    t
    r
    i
    n
    g
    (
    )
    .
    t
    o
    L
    o
    w
    e
    r
    C
    a
    s
    e
    (
    )
    ;
    \n
     
     
     
     
     
     
    }
    \n
     
     
     
     
     
     
    e
    l
    s
    e
     
    o
     
    =
     
    t
    .
    t
    o
    L
    o
    w
    e
    r
    C
    a
    s
    e
    (
    )
    ;
    \n
     
     
     
     
     
     
    r
    e
    t
    u
    r
    n
    (
    o
    )
    ;
    \n
     
     
     
    }
    \n
     
     
     
    v
    o
    i
    d
     
    p
    (
    S
    t
    r
    i
    n
    g
     
    s
    )
    {
     
    S
    y
    s
    t
    e
    m
    .
    o
    u
    t
    .
    p
    r
    i
    n
    t
    (
    s
    )
    ;
     
    }
    \n
     
     
     
    v
    o
    i
    d
     
    p
    (
    c
    h
    a
    r
     
    s
    )
    {
     
    S
    y
    s
    t
    e
    m
    .
    o
    u
    t
    .
    p
    r
    i
    n
    t
    (
    s
    )
    ;
     
    }
    \n
    }
  rules
   rule_
    id_
     program
    :
    altList
     alternative
      element
       elementNoOptionSpec
        ebnf
         (
         block
          alternative
           element
            elementNoOptionSpec
             ebnf
              (
              block
               alternative
                element
                 elementNoOptionSpec
                  rule_ref_or_keyword_as
                   functionDefinition
               |
               alternative
                element
                 elementNoOptionSpec
                  rule_ref_or_keyword_as
                   assignment
               |
               alternative
                element
                 elementNoOptionSpec
                  rule_ref_or_keyword_as
                   functionDesignator
              )
           element
            elementNoOptionSpec
             ebnf
              (
              block
               alternative
                element
                 elementNoOptionSpec
                  terminal_
                   SEMI
                   ast_type_spec
               |
               alternative
                element
                 elementNoOptionSpec
                  terminal_
                   DOLLAR
                   ast_type_spec
              )
           element
            elementNoOptionSpec
             actionBlock
              {
               
              S
              y
              s
              t
              e
              m
              .
              o
              u
              t
              .
              p
              r
              i
              n
              t
              l
              n
              (
              '$'
              )
              ;
               
              }
         )
         *
      element
       elementNoOptionSpec
        terminal_
         EOF
         ast_type_spec
    ;
   rule_
    id_
     assignment
    :
    altList
     alternative
      element
       elementNoOptionSpec
        ebnf
         (
         block
          alternative
           element
            elementNoOptionSpec
             id_
              i
             :
             terminal_
              ID
              ast_type_spec
           element
            elementNoOptionSpec
             terminal_
              COLON
              ast_type_spec
           element
            elementNoOptionSpec
             actionBlock
              {
               
              p
              (
              m
              u
              n
              g
              I
              D
              (
              i
              )
              +
              ':'
              )
              ;
               
              }
         )
         +
      element
       elementNoOptionSpec
        rule_ref_or_keyword_as
         expression
    ;
   rule_
    id_
     list
    :
    altList
     alternative
      element
       elementNoOptionSpec
        terminal_
         LPAREN
         ast_type_spec
      element
       elementNoOptionSpec
        actionBlock
         {
          
         p
         (
         '('
         )
         ;
          
         }
      element
       elementNoOptionSpec
        ebnf
         (
         block
          alternative
           element
            elementNoOptionSpec
             terminal_
              RPAREN
              ast_type_spec
           element
            elementNoOptionSpec
             actionBlock
              {
               
              p
              (
              ')'
              )
              ;
               
              }
          |
          alternative
           element
            elementNoOptionSpec
             id_
              i
             :
             terminal_
              ID
              ast_type_spec
           element
            elementNoOptionSpec
             actionBlock
              {
               
              p
              (
              m
              u
              n
              g
              I
              D
              (
              i
              )
              )
              ;
               
              }
           element
            elementNoOptionSpec
             ebnf
              (
              block
               alternative
                element
                 elementNoOptionSpec
                  terminal_
                   COMMA
                   ast_type_spec
                element
                 elementNoOptionSpec
                  id_
                   j
                  :
                  terminal_
                   ID
                   ast_type_spec
                element
                 elementNoOptionSpec
                  actionBlock
                   {
                   p
                   (
                   ','
                   +
                   m
                   u
                   n
                   g
                   I
                   D
                   (
                   j
                   )
                   )
                   ;
                    
                   }
              )
              *
           element
            elementNoOptionSpec
             terminal_
              RPAREN
              ast_type_spec
           element
            elementNoOptionSpec
             actionBlock
              {
               
              p
              (
              ')'
              )
              ;
               
              }
         )
    ;
   rule_
    id_
     functionDefinition
    :
    altList
     alternative
      element
       elementNoOptionSpec
        terminal_
         FUNCTION
         ast_type_spec
      element
       elementNoOptionSpec
        id_
         i
        :
        terminal_
         ID
         ast_type_spec
      element
       elementNoOptionSpec
        actionBlock
         {
          
         p
         (
         m
         u
         n
         g
         I
         D
         (
         i
         )
         )
         ;
          
         }
      element
       elementNoOptionSpec
        rule_ref_or_keyword_as
         list
      element
       elementNoOptionSpec
        terminal_
         COMMA
         ast_type_spec
      element
       elementNoOptionSpec
        actionBlock
         {
          
         S
         y
         s
         t
         e
         m
         .
         o
         u
         t
         .
         p
         r
         i
         n
         t
         l
         n
         (
         ":=block([last]"
         )
         ;
          
         }
      element
       elementNoOptionSpec
        rule_ref_or_keyword_as
         statments
      element
       elementNoOptionSpec
        ebnf
         (
         block
          alternative
           element
            elementNoOptionSpec
             terminal_
              COMMA
              ast_type_spec
         )
         ?
      element
       elementNoOptionSpec
        terminal_
         ENDFUN
         ast_type_spec
      element
       elementNoOptionSpec
        actionBlock
         {
          
         p
         (
         ")"
         )
         ;
          
         }
    ;
   rule_
    id_
     actualParameter
    :
    altList
     alternative
      element
       elementNoOptionSpec
        rule_ref_or_keyword_as
         expression
     |
     alternative
      element
       elementNoOptionSpec
        rule_ref_or_keyword_as
         assignment
    ;
   rule_
    id_
     statments
    :
    altList
     alternative
      element
       elementNoOptionSpec
        ebnf
         (
         block
          alternative
           element
            elementNoOptionSpec
             rule_ref_or_keyword_as
              loop
          |
          alternative
           element
            elementNoOptionSpec
             rule_ref_or_keyword_as
              when
          |
          alternative
           element
            elementNoOptionSpec
             rule_ref_or_keyword_as
              block
          |
          alternative
           element
            elementNoOptionSpec
             rule_ref_or_keyword_as
              assignment
          |
          alternative
           element
            elementNoOptionSpec
             rule_ref_or_keyword_as
              expression
          |
          alternative
           element
            elementNoOptionSpec
             rule_ref_or_keyword_as
              functionDesignator
         )
      element
       elementNoOptionSpec
        ebnf
         (
         block
          alternative
           element
            elementNoOptionSpec
             terminal_
              COMMA
              ast_type_spec
           element
            elementNoOptionSpec
             actionBlock
              {
               
              S
              y
              s
              t
              e
              m
              .
              o
              u
              t
              .
              p
              r
              i
              n
              t
              l
              n
              (
              ','
              )
              ;
               
              }
           element
            elementNoOptionSpec
             rule_ref_or_keyword_as
              statments
         )
         *
    ;
   rule_
    id_
     block
    :
    altList
     alternative
      element
       elementNoOptionSpec
        terminal_
         BLOCK
         ast_type_spec
      element
       elementNoOptionSpec
        actionBlock
         {
         p
         (
         "block("
         )
         ;
         }
      element
       elementNoOptionSpec
        rule_ref_or_keyword_as
         statments
      element
       elementNoOptionSpec
        terminal_
         COMMA
         ast_type_spec
      element
       elementNoOptionSpec
        terminal_
         ENDBLOCK
         ast_type_spec
      element
       elementNoOptionSpec
        actionBlock
         {
         p
         (
         ')'
         )
         ;
         }
    ;
   rule_
    id_
     loop
    :
    altList
     alternative
      element
       elementNoOptionSpec
        terminal_
         LOOP
         ast_type_spec
      element
       elementNoOptionSpec
        actionBlock
         {
         S
         y
         s
         t
         e
         m
         .
         o
         u
         t
         .
         p
         r
         i
         n
         t
         l
         n
         (
         "do("
         )
         ;
         }
      element
       elementNoOptionSpec
        rule_ref_or_keyword_as
         statments
      element
       elementNoOptionSpec
        ebnf
         (
         block
          alternative
           element
            elementNoOptionSpec
             terminal_
              COMMA
              ast_type_spec
         )
         ?
      element
       elementNoOptionSpec
        terminal_
         ENDLOOP
         ast_type_spec
      element
       elementNoOptionSpec
        actionBlock
         {
          
         S
         y
         s
         t
         e
         m
         .
         o
         u
         t
         .
         p
         r
         i
         n
         t
         l
         n
         (
         ")"
         )
         ;
          
         }
    ;
   rule_
    id_
     when
    ruleAction
     actionBlock
      {
      b
      o
      o
      l
      e
      a
      n
       
      c
      o
      m
      m
      a
       
      =
       
      f
      a
      l
      s
      e
      ;
       
      }
    :
    altList
     alternative
      element
       elementNoOptionSpec
        terminal_
         WHEN
         ast_type_spec
      element
       elementNoOptionSpec
        actionBlock
         {
         p
         (
         "if "
         )
         ;
          
         }
      element
       elementNoOptionSpec
        rule_ref_or_keyword_as
         expression
      element
       elementNoOptionSpec
        actionBlock
         {
         p
         (
         " then "
         )
         ;
          
         }
      element
       elementNoOptionSpec
        ebnf
         (
         block
          alternative
           element
            elementNoOptionSpec
             ebnf
              (
              block
               alternative
                element
                 elementNoOptionSpec
                  terminal_
                   COMMA
                   ast_type_spec
              )
              ?
           element
            elementNoOptionSpec
             terminal_
              EXIT
              ast_type_spec
           element
            elementNoOptionSpec
             actionBlock
              {
               
              p
              (
              "return(last)"
              )
              ;
               
              }
          |
          alternative
           element
            elementNoOptionSpec
             actionBlock
              {
               
              p
              (
              '('
              )
              ;
               
              }
           element
            elementNoOptionSpec
             terminal_
              COMMA
              ast_type_spec
           element
            elementNoOptionSpec
             rule_ref_or_keyword_as
              statments
           element
            elementNoOptionSpec
             ebnf
              (
              block
               alternative
                element
                 elementNoOptionSpec
                  terminal_
                   COMMA
                   ast_type_spec
                element
                 elementNoOptionSpec
                  actionBlock
                   {
                   c
                   o
                   m
                   m
                   a
                    
                   =
                    
                   t
                   r
                   u
                   e
                   ;
                   }
              )
              ?
           element
            elementNoOptionSpec
             terminal_
              EXIT
              ast_type_spec
           element
            elementNoOptionSpec
             actionBlock
              {
               
              i
              f
              (
              !
              c
              o
              m
              m
              a
              )
              p
              (
              ','
              )
              ;
               
              p
              (
              "return(last))"
              )
              ;
               
              }
         )
    ;
   rule_
    id_
     expression
    :
    altList
     alternative
      element
       elementNoOptionSpec
        rule_ref_or_keyword_as
         simpleExpression
      element
       elementNoOptionSpec
        ebnf
         (
         block
          alternative
           element
            elementNoOptionSpec
             rule_ref_or_keyword_as
              relationalOperator
           element
            elementNoOptionSpec
             rule_ref_or_keyword_as
              simpleExpression
         )
         *
    ;
   rule_
    id_
     relationalOperator
    :
    altList
     alternative
      element
       elementNoOptionSpec
        rule_ref_or_keyword_as
         equal
     |
     alternative
      element
       elementNoOptionSpec
        terminal_
         NOT_EQUAL
         ast_type_spec
      element
       elementNoOptionSpec
        actionBlock
         {
         p
         (
         '#'
         )
         ;
         }
     |
     alternative
      element
       elementNoOptionSpec
        terminal_
         LT
         ast_type_spec
      element
       elementNoOptionSpec
        actionBlock
         {
         p
         (
         '<'
         )
         ;
         }
     |
     alternative
      element
       elementNoOptionSpec
        terminal_
         LE
         ast_type_spec
      element
       elementNoOptionSpec
        actionBlock
         {
         p
         (
         "<="
         )
         ;
         }
     |
     alternative
      element
       elementNoOptionSpec
        terminal_
         GE
         ast_type_spec
      element
       elementNoOptionSpec
        actionBlock
         {
         p
         (
         ">="
         )
         ;
         }
     |
     alternative
      element
       elementNoOptionSpec
        terminal_
         GT
         ast_type_spec
      element
       elementNoOptionSpec
        actionBlock
         {
         p
         (
         '>'
         )
         ;
         }
     |
     alternative
      element
       elementNoOptionSpec
        terminal_
         EQUATION
         ast_type_spec
      element
       elementNoOptionSpec
        actionBlock
         {
         p
         (
         '='
         )
         ;
         }
    ;
   rule_
    id_
     simpleExpression
    :
    altList
     alternative
      element
       elementNoOptionSpec
        ebnf
         (
         block
          alternative
           element
            elementNoOptionSpec
             terminal_
              MINUS
              ast_type_spec
           element
            elementNoOptionSpec
             actionBlock
              {
              p
              (
              '-'
              )
              ;
              }
         )
         ?
      element
       elementNoOptionSpec
        rule_ref_or_keyword_as
         term
      element
       elementNoOptionSpec
        ebnf
         (
         block
          alternative
           element
            elementNoOptionSpec
             rule_ref_or_keyword_as
              addingOperator
           element
            elementNoOptionSpec
             rule_ref_or_keyword_as
              term
         )
         *
    ;
   rule_
    id_
     addingOperator
    :
    altList
     alternative
      element
       elementNoOptionSpec
        terminal_
         PLUS
         ast_type_spec
      element
       elementNoOptionSpec
        actionBlock
         {
         p
         (
         '+'
         )
         ;
         }
     |
     alternative
      element
       elementNoOptionSpec
        terminal_
         MINUS
         ast_type_spec
      element
       elementNoOptionSpec
        actionBlock
         {
         p
         (
         '-'
         )
         ;
         }
     |
     alternative
      element
       elementNoOptionSpec
        terminal_
         OR
         ast_type_spec
      element
       elementNoOptionSpec
        actionBlock
         {
         p
         (
         " OR "
         )
         ;
          
         }
    ;
   rule_
    id_
     term
    :
    altList
     alternative
      element
       elementNoOptionSpec
        rule_ref_or_keyword_as
         factor
      element
       elementNoOptionSpec
        ebnf
         (
         block
          alternative
           element
            elementNoOptionSpec
             rule_ref_or_keyword_as
              multiplyingOperator
           element
            elementNoOptionSpec
             rule_ref_or_keyword_as
              factor
         )
         *
    ;
   rule_
    id_
     multiplyingOperator
    :
    altList
     alternative
      element
       elementNoOptionSpec
        terminal_
         STAR
         ast_type_spec
      element
       elementNoOptionSpec
        actionBlock
         {
         p
         (
         '*'
         )
         ;
         }
     |
     alternative
      element
       elementNoOptionSpec
        terminal_
         SLASH
         ast_type_spec
      element
       elementNoOptionSpec
        actionBlock
         {
         p
         (
         '/'
         )
         ;
         }
     |
     alternative
      element
       elementNoOptionSpec
        terminal_
         MOD
         ast_type_spec
      element
       elementNoOptionSpec
        actionBlock
         {
         p
         (
         " mod "
         )
         ;
         }
     |
     alternative
      element
       elementNoOptionSpec
        terminal_
         AND
         ast_type_spec
      element
       elementNoOptionSpec
        actionBlock
         {
         p
         (
         " AND "
         )
         ;
         }
     |
     alternative
      element
       elementNoOptionSpec
        terminal_
         POWER
         ast_type_spec
      element
       elementNoOptionSpec
        actionBlock
         {
         p
         (
         '^'
         )
         ;
         }
    ;
   rule_
    id_
     factor
    :
    altList
     alternative
      element
       elementNoOptionSpec
        id_
         i
        :
        terminal_
         ID
         ast_type_spec
      element
       elementNoOptionSpec
        actionBlock
         {
         p
         (
         m
         u
         n
         g
         I
         D
         (
         i
         )
         )
         ;
         }
     |
     alternative
      element
       elementNoOptionSpec
        rule_ref_or_keyword_as
         constant
     |
     alternative
      element
       elementNoOptionSpec
        terminal_
         LPAREN
         ast_type_spec
      element
       elementNoOptionSpec
        actionBlock
         {
         p
         (
         '('
         )
         ;
         }
      element
       elementNoOptionSpec
        rule_ref_or_keyword_as
         expression
      element
       elementNoOptionSpec
        terminal_
         RPAREN
         ast_type_spec
      element
       elementNoOptionSpec
        actionBlock
         {
         p
         (
         ')'
         )
         ;
         }
     |
     alternative
      element
       elementNoOptionSpec
        rule_ref_or_keyword_as
         functionDesignator
     |
     alternative
      element
       elementNoOptionSpec
        terminal_
         NOT
         ast_type_spec
      element
       elementNoOptionSpec
        actionBlock
         {
         p
         (
         " NOT "
         )
         ;
         }
      element
       elementNoOptionSpec
        rule_ref_or_keyword_as
         factor
    ;
   rule_
    id_
     constant
    :
    altList
     alternative
      element
       elementNoOptionSpec
        id_
         n
        :
        terminal_
         NUMBER
         ast_type_spec
      element
       elementNoOptionSpec
        actionBlock
         {
         p
         (
         n
         .
         g
         e
         t
         T
         e
         x
         t
         (
         )
         )
         ;
         }
     |
     alternative
      element
       elementNoOptionSpec
        id_
         s
        :
        terminal_
         STRING
         ast_type_spec
      element
       elementNoOptionSpec
        actionBlock
         {
         p
         (
         s
         .
         g
         e
         t
         T
         e
         x
         t
         (
         )
         )
         ;
         }
     |
     alternative
      element
       elementNoOptionSpec
        terminal_
         QUOTE
         ast_type_spec
      element
       elementNoOptionSpec
        id_
         i
        :
        terminal_
         ID
         ast_type_spec
      element
       elementNoOptionSpec
        actionBlock
         {
         p
         (
         '\''
         +
         m
         u
         n
         g
         I
         D
         (
         i
         )
         )
         ;
         }
     |
     alternative
      element
       elementNoOptionSpec
        terminal_
         QUOTE
         ast_type_spec
      element
       elementNoOptionSpec
        id_
         qs
        :
        terminal_
         STRING
         ast_type_spec
      element
       elementNoOptionSpec
        actionBlock
         {
         p
         (
         '\''
         +
         q
         s
         .
         g
         e
         t
         T
         e
         x
         t
         (
         )
         )
         ;
         }
    ;
   rule_
    id_
     functionDesignator
    :
    altList
     alternative
      element
       elementNoOptionSpec
        id_
         i
        :
        terminal_
         ID
         ast_type_spec
      element
       elementNoOptionSpec
        terminal_
         LPAREN
         ast_type_spec
      element
       elementNoOptionSpec
        actionBlock
         {
          
         p
         (
         m
         u
         n
         g
         I
         D
         (
         i
         )
         +
         '('
         )
         ;
          
         }
      element
       elementNoOptionSpec
        ebnf
         (
         block
          alternative
           element
            elementNoOptionSpec
             ebnf
              (
              block
               alternative
                element
                 elementNoOptionSpec
                  rule_ref_or_keyword_as
                   actualParameter
                element
                 elementNoOptionSpec
                  ebnf
                   (
                   block
                    alternative
                     element
                      elementNoOptionSpec
                       terminal_
                        COMMA
                        ast_type_spec
                     element
                      elementNoOptionSpec
                       actionBlock
                        {
                         
                        p
                        (
                        ','
                        )
                        ;
                         
                        }
                     element
                      elementNoOptionSpec
                       rule_ref_or_keyword_as
                        actualParameter
                   )
                   *
              )
          |
          alternative
         )
      element
       elementNoOptionSpec
        terminal_
         RPAREN
         ast_type_spec
      element
       elementNoOptionSpec
        actionBlock
         {
          
         p
         (
         ')'
         )
         ;
          
         }
    ;
   rule_
    id_
     equal
    :
    altList
     alternative
      element
       elementNoOptionSpec
        ebnf
         (
         block
          alternative
           element
            elementNoOptionSpec
             terminal_
              EQF
              ast_type_spec
          |
          alternative
           element
            elementNoOptionSpec
             terminal_
              EQC
              ast_type_spec
         )
      element
       elementNoOptionSpec
        actionBlock
         {
          
         p
         (
         '='
         )
         ;
          
         }
    ;
 classDef
  lexerSpec
   class
   id_
    mumathLexer
   extends
   Lexer
   ;
   lexerOptionsSpec
    options
    {
    lexerOption
     id_
      k
     =
     lexerOptionValue
      optionValue
       2
     ;
    lexerOption
     id_
      charVocabulary
     =
     lexerOptionValue
      charSet
       setBlockElement
        '\3'
        ..
        '\377'
     ;
    }
   tokensSpec
    tokens
    {
    tokenEntry
     BLOCK
     =
     "BLOCK"
     ;
    tokenEntry
     ENDBLOCK
     =
     "ENDBLOCK"
     ;
    tokenEntry
     FUNCTION
     =
     "FUNCTION"
     ;
    tokenEntry
     ENDFUN
     =
     "ENDFUN"
     ;
    tokenEntry
     EQF
     =
     "EQ"
     ;
    tokenEntry
     LOOP
     =
     "LOOP"
     ;
    tokenEntry
     ENDLOOP
     =
     "ENDLOOP"
     ;
    tokenEntry
     WHEN
     =
     "WHEN"
     ;
    tokenEntry
     EXIT
     =
     "EXIT"
     ;
    tokenEntry
     OR
     =
     "OR"
     ;
    }
  rules
   rule_
    id_
     WS
    :
    altList
     alternative
      element
       elementNoOptionSpec
        ebnf
         (
         block
          alternative
           element
            elementNoOptionSpec
             terminal_
              ' '
          |
          alternative
           element
            elementNoOptionSpec
             terminal_
              '\t'
          |
          alternative
           element
            elementNoOptionSpec
             terminal_
              '\n'
           element
            elementNoOptionSpec
             actionBlock
              {
              n
              e
              w
              l
              i
              n
              e
              (
              )
              ;
              }
          |
          alternative
           element
            elementNoOptionSpec
             terminal_
              '\r'
         )
      element
       elementNoOptionSpec
        actionBlock
         {
          
         _
         t
         t
         y
         p
         e
          
         =
          
         T
         o
         k
         e
         n
         .
         S
         K
         I
         P
         ;
          
         }
    ;
   rule_
    id_
     COMMENT
    :
    altList
     alternative
      element
       elementNoOptionSpec
        terminal_
         '%'
      element
       elementNoOptionSpec
        ebnf
         (
         block
          alternative
           element
            elementNoOptionSpec
             terminal_
              '\n'
           element
            elementNoOptionSpec
             actionBlock
              {
              n
              e
              w
              l
              i
              n
              e
              (
              )
              ;
              }
          |
          alternative
           element
            elementNoOptionSpec
             ~
             ebnf
              (
              block
               alternative
                element
                 elementNoOptionSpec
                  terminal_
                   '%'
               |
               alternative
                element
                 elementNoOptionSpec
                  terminal_
                   '\n'
              )
         )
         *
      element
       elementNoOptionSpec
        terminal_
         '%'
      element
       elementNoOptionSpec
        actionBlock
         {
          
         S
         y
         s
         t
         e
         m
         .
         o
         u
         t
         .
         p
         r
         i
         n
         t
         l
         n
         (
         "/* "
         +
          
         g
         e
         t
         T
         e
         x
         t
         (
         )
          
         +
         " */"
         )
         ;
          
         $
         s
         e
         t
         T
         y
         p
         e
         (
         T
         o
         k
         e
         n
         .
         S
         K
         I
         P
         )
         ;
         }
    ;
   rule_
    id_
     EQUATION
    :
    altList
     alternative
      element
       elementNoOptionSpec
        terminal_
         "=="
         ast_type_spec
    ;
   rule_
    id_
     QUOTE
    :
    altList
     alternative
      element
       elementNoOptionSpec
        terminal_
         '\''
    ;
   rule_
    id_
     PLUS
    :
    altList
     alternative
      element
       elementNoOptionSpec
        terminal_
         '+'
    ;
   rule_
    id_
     MINUS
    :
    altList
     alternative
      element
       elementNoOptionSpec
        terminal_
         '-'
    ;
   rule_
    id_
     STAR
    :
    altList
     alternative
      element
       elementNoOptionSpec
        terminal_
         '*'
    ;
   rule_
    id_
     SLASH
    :
    altList
     alternative
      element
       elementNoOptionSpec
        terminal_
         '/'
    ;
   rule_
    id_
     COMMA
    :
    altList
     alternative
      element
       elementNoOptionSpec
        terminal_
         ','
    ;
   rule_
    id_
     SEMI
    :
    altList
     alternative
      element
       elementNoOptionSpec
        terminal_
         ';'
    ;
   rule_
    id_
     DOLLAR
    :
    altList
     alternative
      element
       elementNoOptionSpec
        terminal_
         '$'
    ;
   rule_
    id_
     COLON
    :
    altList
     alternative
      element
       elementNoOptionSpec
        terminal_
         ':'
    ;
   rule_
    id_
     EQC
    :
    altList
     alternative
      element
       elementNoOptionSpec
        terminal_
         '='
    ;
   rule_
    id_
     NOT_EQUAL
    :
    altList
     alternative
      element
       elementNoOptionSpec
        terminal_
         "<>"
         ast_type_spec
    ;
   rule_
    id_
     LT
    :
    altList
     alternative
      element
       elementNoOptionSpec
        terminal_
         '<'
    ;
   rule_
    id_
     LE
    :
    altList
     alternative
      element
       elementNoOptionSpec
        terminal_
         "<="
         ast_type_spec
    ;
   rule_
    id_
     GE
    :
    altList
     alternative
      element
       elementNoOptionSpec
        terminal_
         ">="
         ast_type_spec
    ;
   rule_
    id_
     GT
    :
    altList
     alternative
      element
       elementNoOptionSpec
        terminal_
         '>'
    ;
   rule_
    id_
     LPAREN
    :
    altList
     alternative
      element
       elementNoOptionSpec
        terminal_
         '('
    ;
   rule_
    id_
     RPAREN
    :
    altList
     alternative
      element
       elementNoOptionSpec
        terminal_
         ')'
    ;
   rule_
    id_
     POWER
    :
    altList
     alternative
      element
       elementNoOptionSpec
        terminal_
         '^'
    ;
   rule_
    id_
     ID
    ruleOptionsSpec
     options
     {
     option
      id_
       testLiterals
      =
      optionValue
       qualifiedID
        id_
         true
      ;
     }
    :
    altList
     alternative
      element
       elementNoOptionSpec
        ebnf
         (
         block
          alternative
           element
            elementNoOptionSpec
             range_
              'A'
              ..
              'Z'
          |
          alternative
           element
            elementNoOptionSpec
             terminal_
              '@'
          |
          alternative
           element
            elementNoOptionSpec
             terminal_
              '{'
          |
          alternative
           element
            elementNoOptionSpec
             terminal_
              '#'
         )
      element
       elementNoOptionSpec
        ebnf
         (
         block
          alternative
           element
            elementNoOptionSpec
             range_
              'A'
              ..
              'Z'
          |
          alternative
           element
            elementNoOptionSpec
             range_
              '0'
              ..
              '9'
          |
          alternative
           element
            elementNoOptionSpec
             terminal_
              '#'
          |
          alternative
           element
            elementNoOptionSpec
             terminal_
              '}'
         )
         *
      element
       elementNoOptionSpec
        ebnf
         (
         block
          alternative
           element
            elementNoOptionSpec
             terminal_
              ARR
              ast_type_spec
         )
         ?
    ;
   rule_
    id_
     ARR
    :
    altList
     alternative
      element
       elementNoOptionSpec
        terminal_
         '['
      element
       elementNoOptionSpec
        terminal_
         NUMBER
         ast_type_spec
      element
       elementNoOptionSpec
        terminal_
         ']'
    ;
   rule_
    id_
     STRING
    :
    altList
     alternative
      element
       elementNoOptionSpec
        terminal_
         '"'
      element
       elementNoOptionSpec
        ebnf
         (
         block
          alternative
           element
            elementNoOptionSpec
             ~
             notTerminal
              '"'
         )
         *
      element
       elementNoOptionSpec
        terminal_
         '"'
    ;
   rule_
    id_
     NUMBER
    :
    altList
     alternative
      element
       elementNoOptionSpec
        ebnf
         (
         block
          alternative
           element
            elementNoOptionSpec
             range_
              '0'
              ..
              '9'
         )
         +
    ;
 <EOF>
