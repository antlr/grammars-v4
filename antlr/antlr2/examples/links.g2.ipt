grammar_
 classDef
  actionBlock
   {
   \n
   i
   m
   p
   o
   r
   t
    
   j
   a
   v
   a
   .
   u
   t
   i
   l
   .
   V
   e
   c
   t
   o
   r
   ;
   \n
   }
  lexerSpec
   class
   id_
    LinkExtractor
   extends
   Lexer
   ;
   lexerOptionsSpec
    options
    {
    lexerOption
     id_
      caseSensitive
     =
     lexerOptionValue
      optionValue
       qualifiedID
        id_
         false
     ;
    lexerOption
     id_
      k
     =
     lexerOptionValue
      optionValue
       2
     ;
    lexerOption
     id_
      filter
     =
     lexerOptionValue
      optionValue
       qualifiedID
        id_
         SCARF
     ;
    lexerOption
     id_
      charVocabulary
     =
     lexerOptionValue
      charSet
       setBlockElement
        '\3'
        ..
        '\177'
     ;
    }
   actionBlock
    {
    \n
    \t
    p
    r
    o
    t
    e
    c
    t
    e
    d
     
    L
    i
    n
    k
    L
    i
    s
    t
    e
    n
    e
    r
     
    l
    i
    s
    t
    e
    n
    e
    r
    ;
    \n
    \t
    \n
    \t
    p
    u
    b
    l
    i
    c
     
    v
    o
    i
    d
     
    a
    d
    d
    L
    i
    n
    k
    L
    i
    s
    t
    e
    n
    e
    r
    (
    L
    i
    n
    k
    L
    i
    s
    t
    e
    n
    e
    r
     
    l
    i
    s
    t
    e
    n
    e
    r
    )
     
    {
    \n
    \t
    \t
    t
    h
    i
    s
    .
    l
    i
    s
    t
    e
    n
    e
    r
     
    =
     
    l
    i
    s
    t
    e
    n
    e
    r
    ;
    \n
    \t
    }
    \n
    \n
    \t
    p
    u
    b
    l
    i
    c
     
    v
    o
    i
    d
     
    r
    e
    m
    o
    v
    e
    L
    i
    n
    k
    L
    i
    s
    t
    e
    n
    e
    r
    (
    L
    i
    n
    k
    L
    i
    s
    t
    e
    n
    e
    r
     
    l
    i
    s
    t
    e
    n
    e
    r
    )
     
    {
    \n
    \t
    \t
    t
    h
    i
    s
    .
    l
    i
    s
    t
    e
    n
    e
    r
     
    =
     
    n
    u
    l
    l
    ;
    \n
    \t
    }
    \n
    \n
    \t
    p
    u
    b
    l
    i
    c
     
    v
    o
    i
    d
     
    f
    i
    r
    e
    I
    m
    a
    g
    e
    L
    i
    n
    k
    E
    v
    e
    n
    t
    (
    S
    t
    r
    i
    n
    g
     
    t
    a
    r
    g
    e
    t
    ,
     
    i
    n
    t
     
    l
    i
    n
    e
    )
     
    {
    \n
    \t
    \t
    l
    i
    s
    t
    e
    n
    e
    r
    .
    i
    m
    a
    g
    e
    R
    e
    f
    e
    r
    e
    n
    c
    e
    (
    t
    a
    r
    g
    e
    t
    ,
     
    l
    i
    n
    e
    )
    ;
    \n
    \t
    }
    \n
    \n
    \t
    p
    u
    b
    l
    i
    c
     
    v
    o
    i
    d
     
    f
    i
    r
    e
    H
    R
    E
    F
    L
    i
    n
    k
    E
    v
    e
    n
    t
    (
    S
    t
    r
    i
    n
    g
     
    t
    a
    r
    g
    e
    t
    ,
     
    i
    n
    t
     
    l
    i
    n
    e
    )
     
    {
    \n
    \t
    \t
    l
    i
    s
    t
    e
    n
    e
    r
    .
    h
    r
    e
    f
    R
    e
    f
    e
    r
    e
    n
    c
    e
    (
    t
    a
    r
    g
    e
    t
    ,
     
    l
    i
    n
    e
    )
    ;
    \n
    \t
    }
    \n
    \n
    \t
    /** strip quotes from "..." or '...' strings */
    \n
    \t
    p
    u
    b
    l
    i
    c
     
    s
    t
    a
    t
    i
    c
     
    S
    t
    r
    i
    n
    g
     
    s
    t
    r
    i
    p
    Q
    u
    o
    t
    e
    s
    (
    S
    t
    r
    i
    n
    g
     
    s
    r
    c
    )
     
    {
    \n
    \t
    \t
    i
    n
    t
     
    h
     
    =
     
    s
    r
    c
    .
    i
    n
    d
    e
    x
    O
    f
    (
    '"'
    )
    ;
    \n
    \t
    \t
    i
    f
     
    (
     
    h
    =
    =
    -
    1
     
    )
     
    h
     
    =
     
    s
    r
    c
    .
    i
    n
    d
    e
    x
    O
    f
    (
    '\''
    )
    ;
    \n
    \t
    \t
    i
    n
    t
     
    t
     
    =
     
    s
    r
    c
    .
    l
    a
    s
    t
    I
    n
    d
    e
    x
    O
    f
    (
    '"'
    )
    ;
    \n
    \t
    \t
    i
    f
     
    (
     
    t
    =
    =
    -
    1
     
    )
     
    t
     
    =
     
    s
    r
    c
    .
    l
    a
    s
    t
    I
    n
    d
    e
    x
    O
    f
    (
    '\''
    )
    ;
    \n
    \t
    \t
    i
    f
     
    (
     
    h
    =
    =
    -
    1
     
    |
    |
     
    t
    =
    =
    -
    1
     
    )
     
    r
    e
    t
    u
    r
    n
     
    s
    r
    c
    ;
    \n
    \t
    \t
    r
    e
    t
    u
    r
    n
     
    s
    r
    c
    .
    s
    u
    b
    s
    t
    r
    i
    n
    g
    (
    h
    +
    1
    ,
    t
    )
    ;
    \n
    \t
    }
    \n
    }
  rules
   rule_
    id_
     AHREF
    :
    altList
     alternative
      element
       elementNoOptionSpec
        terminal_
         "<a"
         ast_type_spec
      element
       elementNoOptionSpec
        terminal_
         WS
         ast_type_spec
      element
       elementNoOptionSpec
        ebnf
         (
         block
          alternative
           element
            elementNoOptionSpec
             terminal_
              ATTR
              ast_type_spec
         )
         +
      element
       elementNoOptionSpec
        terminal_
         '>'
      element
       elementNoOptionSpec
        actionBlock
         {
         $
         s
         e
         t
         T
         y
         p
         e
         (
         T
         o
         k
         e
         n
         .
         S
         K
         I
         P
         )
         ;
         }
    ;
   rule_
    id_
     IMG
    :
    altList
     alternative
      element
       elementNoOptionSpec
        terminal_
         "<img"
         ast_type_spec
      element
       elementNoOptionSpec
        terminal_
         WS
         ast_type_spec
      element
       elementNoOptionSpec
        ebnf
         (
         block
          alternative
           element
            elementNoOptionSpec
             terminal_
              ATTR
              ast_type_spec
         )
         +
      element
       elementNoOptionSpec
        terminal_
         '>'
      element
       elementNoOptionSpec
        actionBlock
         {
         $
         s
         e
         t
         T
         y
         p
         e
         (
         T
         o
         k
         e
         n
         .
         S
         K
         I
         P
         )
         ;
         }
    ;
   rule_
    protected
    id_
     ATTR
    ruleOptionsSpec
     options
     {
     option
      id_
       ignore
      =
      optionValue
       qualifiedID
        id_
         WS
      ;
     }
    :
    altList
     alternative
      element
       elementNoOptionSpec
        id_
         w
        :
        terminal_
         WORD
         ast_type_spec
      element
       elementNoOptionSpec
        terminal_
         '='
      element
       elementNoOptionSpec
        ebnf
         (
         block
          alternative
           element
            elementNoOptionSpec
             id_
              s
             :
             terminal_
              STRING
              ast_type_spec
          |
          alternative
           element
            elementNoOptionSpec
             id_
              v
             :
             terminal_
              WORD
              ast_type_spec
         )
      element
       elementNoOptionSpec
        actionBlock
         {
         \n
         \t
         \t
         S
         t
         r
         i
         n
         g
          
         t
         a
         r
         g
         e
         t
          
         =
          
         s
         !
         =
         n
         u
         l
         l
          
         ?
          
         s
         t
         r
         i
         p
         Q
         u
         o
         t
         e
         s
         (
         s
         .
         g
         e
         t
         T
         e
         x
         t
         (
         )
         )
          
         :
          
         v
         .
         g
         e
         t
         T
         e
         x
         t
         (
         )
         ;
         \n
         \t
         \t
         i
         f
          
         (
          
         w
         .
         g
         e
         t
         T
         e
         x
         t
         (
         )
         .
         e
         q
         u
         a
         l
         s
         I
         g
         n
         o
         r
         e
         C
         a
         s
         e
         (
         "href"
         )
          
         )
          
         {
         \n
         \t
         \t
         \t
         f
         i
         r
         e
         H
         R
         E
         F
         L
         i
         n
         k
         E
         v
         e
         n
         t
         (
         t
         a
         r
         g
         e
         t
         ,
          
         g
         e
         t
         L
         i
         n
         e
         (
         )
         )
         ;
         \n
         \t
         \t
         }
         \n
         \t
         \t
         e
         l
         s
         e
          
         i
         f
          
         (
          
         w
         .
         g
         e
         t
         T
         e
         x
         t
         (
         )
         .
         e
         q
         u
         a
         l
         s
         I
         g
         n
         o
         r
         e
         C
         a
         s
         e
         (
         "src"
         )
          
         )
          
         {
         \n
         \t
         \t
         \t
         f
         i
         r
         e
         I
         m
         a
         g
         e
         L
         i
         n
         k
         E
         v
         e
         n
         t
         (
         t
         a
         r
         g
         e
         t
         ,
          
         g
         e
         t
         L
         i
         n
         e
         (
         )
         )
         ;
         \n
         \t
         \t
         }
         \n
         \t
         \t
         }
    ;
   rule_
    protected
    id_
     WORD
    :
    altList
     alternative
      element
       elementNoOptionSpec
        ebnf
         (
         subruleOptionsSpec
          options
          {
          option
           id_
            generateAmbigWarnings
           =
           optionValue
            qualifiedID
             id_
              false
           ;
          }
         :
         block
          alternative
           element
            elementNoOptionSpec
             range_
              'a'
              ..
              'z'
          |
          alternative
           element
            elementNoOptionSpec
             range_
              '0'
              ..
              '9'
          |
          alternative
           element
            elementNoOptionSpec
             terminal_
              '/'
          |
          alternative
           element
            elementNoOptionSpec
             terminal_
              '.'
          |
          alternative
           element
            elementNoOptionSpec
             terminal_
              '#'
          |
          alternative
           element
            elementNoOptionSpec
             terminal_
              '_'
         )
         +
    ;
   rule_
    protected
    id_
     STRING
    :
    altList
     alternative
      element
       elementNoOptionSpec
        terminal_
         '"'
      element
       elementNoOptionSpec
        ebnf
         (
         block
          alternative
           element
            elementNoOptionSpec
             ~
             notTerminal
              '"'
         )
         *
      element
       elementNoOptionSpec
        terminal_
         '"'
     |
     alternative
      element
       elementNoOptionSpec
        terminal_
         '\''
      element
       elementNoOptionSpec
        ebnf
         (
         block
          alternative
           element
            elementNoOptionSpec
             ~
             notTerminal
              '\''
         )
         *
      element
       elementNoOptionSpec
        terminal_
         '\''
    ;
   rule_
    protected
    id_
     WS
    :
    altList
     alternative
      element
       elementNoOptionSpec
        ebnf
         (
         block
          alternative
           element
            elementNoOptionSpec
             terminal_
              ' '
          |
          alternative
           element
            elementNoOptionSpec
             terminal_
              '\t'
          |
          alternative
           element
            elementNoOptionSpec
             terminal_
              '\f'
          |
          alternative
           element
            elementNoOptionSpec
             ebnf
              (
              block
               alternative
                element
                 elementNoOptionSpec
                  terminal_
                   "\r\n"
                   ast_type_spec
               |
               alternative
                element
                 elementNoOptionSpec
                  terminal_
                   '\r'
               |
               alternative
                element
                 elementNoOptionSpec
                  terminal_
                   '\n'
              )
           element
            elementNoOptionSpec
             actionBlock
              {
               
              n
              e
              w
              l
              i
              n
              e
              (
              )
              ;
               
              }
         )
      element
       elementNoOptionSpec
        actionBlock
         {
          
         $
         s
         e
         t
         T
         y
         p
         e
         (
         T
         o
         k
         e
         n
         .
         S
         K
         I
         P
         )
         ;
          
         }
    ;
   rule_
    protected
    id_
     SCARF
    :
    altList
     alternative
      element
       elementNoOptionSpec
        terminal_
         WS
         ast_type_spec
     |
     alternative
      element
       elementNoOptionSpec
        terminal_
         .
         ast_type_spec
    ;
 <EOF>
