grammarSpec
 grammarDecl
  grammarType
   lexer
   grammar
  identifier
   PhpLexer
  ;
 prequelConstruct
  channelsSpec
   channels {
   idList
    identifier
     PhpComments
    ,
    identifier
     ErrorLexem
    ,
    identifier
     SkipChannel
   }
 prequelConstruct
  optionsSpec
   options {
   option
    identifier
     superClass
    =
    optionValue
     identifier
      PhpLexerBase
   ;
   option
    identifier
     caseInsensitive
    =
    optionValue
     identifier
      true
   ;
   }
 rules
  ruleSpec
   lexerRuleSpec
    SeaWhitespace
    :
    lexerRuleBlock
     lexerAltList
      lexerAlt
       lexerElements
        lexerElement
         lexerAtom
          [ \t\r\n]
         ebnfSuffix
          +
       lexerCommands
        ->
        lexerCommand
         lexerCommandName
          identifier
           channel
         (
         lexerCommandExpr
          identifier
           HIDDEN
         )
    ;
  ruleSpec
   lexerRuleSpec
    HtmlText
    :
    lexerRuleBlock
     lexerAltList
      lexerAlt
       lexerElements
        lexerElement
         lexerAtom
          notSet
           ~
           setElement
            [<#]
         ebnfSuffix
          +
    ;
  ruleSpec
   lexerRuleSpec
    XmlStart
    :
    lexerRuleBlock
     lexerAltList
      lexerAlt
       lexerElements
        lexerElement
         lexerAtom
          terminalDef
           '<?xml'
       lexerCommands
        ->
        lexerCommand
         lexerCommandName
          identifier
           pushMode
         (
         lexerCommandExpr
          identifier
           XML
         )
    ;
  ruleSpec
   lexerRuleSpec
    PHPStartEcho
    :
    lexerRuleBlock
     lexerAltList
      lexerAlt
       lexerElements
        lexerElement
         lexerAtom
          terminalDef
           PhpStartEchoFragment
       lexerCommands
        ->
        lexerCommand
         lexerCommandName
          identifier
           type
         (
         lexerCommandExpr
          identifier
           Echo
         )
        ,
        lexerCommand
         lexerCommandName
          identifier
           pushMode
         (
         lexerCommandExpr
          identifier
           PHP
         )
    ;
  ruleSpec
   lexerRuleSpec
    PHPStart
    :
    lexerRuleBlock
     lexerAltList
      lexerAlt
       lexerElements
        lexerElement
         lexerAtom
          terminalDef
           PhpStartFragment
       lexerCommands
        ->
        lexerCommand
         lexerCommandName
          identifier
           channel
         (
         lexerCommandExpr
          identifier
           SkipChannel
         )
        ,
        lexerCommand
         lexerCommandName
          identifier
           pushMode
         (
         lexerCommandExpr
          identifier
           PHP
         )
    ;
  ruleSpec
   lexerRuleSpec
    HtmlScriptOpen
    :
    lexerRuleBlock
     lexerAltList
      lexerAlt
       lexerElements
        lexerElement
         lexerAtom
          terminalDef
           '<script'
        lexerElement
         actionBlock
          {
           
          _
          s
          c
          r
          i
          p
          t
          T
          a
          g
           
          =
           
          t
          r
          u
          e
          ;
           
          }
       lexerCommands
        ->
        lexerCommand
         lexerCommandName
          identifier
           pushMode
         (
         lexerCommandExpr
          identifier
           INSIDE
         )
    ;
  ruleSpec
   lexerRuleSpec
    HtmlStyleOpen
    :
    lexerRuleBlock
     lexerAltList
      lexerAlt
       lexerElements
        lexerElement
         lexerAtom
          terminalDef
           '<style'
        lexerElement
         actionBlock
          {
           
          _
          s
          t
          y
          l
          e
          T
          a
          g
           
          =
           
          t
          r
          u
          e
          ;
           
          }
       lexerCommands
        ->
        lexerCommand
         lexerCommandName
          identifier
           pushMode
         (
         lexerCommandExpr
          identifier
           INSIDE
         )
    ;
  ruleSpec
   lexerRuleSpec
    HtmlComment
    :
    lexerRuleBlock
     lexerAltList
      lexerAlt
       lexerElements
        lexerElement
         lexerAtom
          terminalDef
           '<!'
        lexerElement
         lexerAtom
          terminalDef
           '--'
        lexerElement
         lexerAtom
          .
         ebnfSuffix
          *
          ?
        lexerElement
         lexerAtom
          terminalDef
           '-->'
       lexerCommands
        ->
        lexerCommand
         lexerCommandName
          identifier
           channel
         (
         lexerCommandExpr
          identifier
           HIDDEN
         )
    ;
  ruleSpec
   lexerRuleSpec
    HtmlDtd
    :
    lexerRuleBlock
     lexerAltList
      lexerAlt
       lexerElements
        lexerElement
         lexerAtom
          terminalDef
           '<!'
        lexerElement
         lexerAtom
          .
         ebnfSuffix
          *
          ?
        lexerElement
         lexerAtom
          terminalDef
           '>'
    ;
  ruleSpec
   lexerRuleSpec
    HtmlOpen
    :
    lexerRuleBlock
     lexerAltList
      lexerAlt
       lexerElements
        lexerElement
         lexerAtom
          terminalDef
           '<'
       lexerCommands
        ->
        lexerCommand
         lexerCommandName
          identifier
           pushMode
         (
         lexerCommandExpr
          identifier
           INSIDE
         )
    ;
  ruleSpec
   lexerRuleSpec
    Shebang
    :
    lexerRuleBlock
     lexerAltList
      lexerAlt
       lexerElements
        lexerElement
         lexerAtom
          terminalDef
           '#'
        lexerElement
         actionBlock
          {
           
          t
          h
          i
          s
          .
          I
          s
          N
          e
          w
          L
          i
          n
          e
          O
          r
          S
          t
          a
          r
          t
          (
          -
          2
          )
           
          }
         ?
        lexerElement
         lexerAtom
          terminalDef
           '!'
        lexerElement
         lexerAtom
          notSet
           ~
           setElement
            [\r\n]
         ebnfSuffix
          *
    ;
  ruleSpec
   lexerRuleSpec
    NumberSign
    :
    lexerRuleBlock
     lexerAltList
      lexerAlt
       lexerElements
        lexerElement
         lexerAtom
          terminalDef
           '#'
        lexerElement
         lexerAtom
          notSet
           ~
           setElement
            '<'
         ebnfSuffix
          *
       lexerCommands
        ->
        lexerCommand
         lexerCommandName
          identifier
           more
    ;
  ruleSpec
   lexerRuleSpec
    Error
    :
    lexerRuleBlock
     lexerAltList
      lexerAlt
       lexerElements
        lexerElement
         lexerAtom
          .
       lexerCommands
        ->
        lexerCommand
         lexerCommandName
          identifier
           channel
         (
         lexerCommandExpr
          identifier
           ErrorLexem
         )
    ;
 modeSpec
  mode
  identifier
   XML
  ;
  lexerRuleSpec
   XmlText
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         notSet
          ~
          setElement
           '?'
        ebnfSuffix
         +
   ;
  lexerRuleSpec
   XmlClose
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '?>'
      lexerCommands
       ->
       lexerCommand
        lexerCommandName
         identifier
          popMode
   ;
  lexerRuleSpec
   XmlText2
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '?'
      lexerCommands
       ->
       lexerCommand
        lexerCommandName
         identifier
          type
        (
        lexerCommandExpr
         identifier
          XmlText
        )
   ;
 modeSpec
  mode
  identifier
   INSIDE
  ;
  lexerRuleSpec
   PHPStartEchoInside
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          PhpStartEchoFragment
      lexerCommands
       ->
       lexerCommand
        lexerCommandName
         identifier
          type
        (
        lexerCommandExpr
         identifier
          Echo
        )
       ,
       lexerCommand
        lexerCommandName
         identifier
          pushMode
        (
        lexerCommandExpr
         identifier
          PHP
        )
   ;
  lexerRuleSpec
   PHPStartInside
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          PhpStartFragment
      lexerCommands
       ->
       lexerCommand
        lexerCommandName
         identifier
          channel
        (
        lexerCommandExpr
         identifier
          SkipChannel
        )
       ,
       lexerCommand
        lexerCommandName
         identifier
          pushMode
        (
        lexerCommandExpr
         identifier
          PHP
        )
   ;
  lexerRuleSpec
   HtmlClose
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '>'
       lexerElement
        actionBlock
         {
          
         t
         h
         i
         s
         .
         P
         u
         s
         h
         M
         o
         d
         e
         O
         n
         H
         t
         m
         l
         C
         l
         o
         s
         e
         (
         )
         ;
          
         }
   ;
  lexerRuleSpec
   HtmlSlashClose
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '/>'
      lexerCommands
       ->
       lexerCommand
        lexerCommandName
         identifier
          popMode
   ;
  lexerRuleSpec
   HtmlSlash
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '/'
   ;
  lexerRuleSpec
   HtmlEquals
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '='
   ;
  lexerRuleSpec
   HtmlStartQuoteString
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '\\'
        ebnfSuffix
         ?
       lexerElement
        lexerAtom
         terminalDef
          '\''
      lexerCommands
       ->
       lexerCommand
        lexerCommandName
         identifier
          pushMode
        (
        lexerCommandExpr
         identifier
          HtmlQuoteStringMode
        )
   ;
  lexerRuleSpec
   HtmlStartDoubleQuoteString
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '\\'
        ebnfSuffix
         ?
       lexerElement
        lexerAtom
         terminalDef
          '"'
      lexerCommands
       ->
       lexerCommand
        lexerCommandName
         identifier
          pushMode
        (
        lexerCommandExpr
         identifier
          HtmlDoubleQuoteStringMode
        )
   ;
  lexerRuleSpec
   HtmlHex
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '#'
       lexerElement
        lexerAtom
         terminalDef
          HexDigit
        ebnfSuffix
         +
   ;
  lexerRuleSpec
   HtmlDecimal
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          Digit
        ebnfSuffix
         +
   ;
  lexerRuleSpec
   HtmlSpace
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         [ \t\r\n]
        ebnfSuffix
         +
      lexerCommands
       ->
       lexerCommand
        lexerCommandName
         identifier
          channel
        (
        lexerCommandExpr
         identifier
          HIDDEN
        )
   ;
  lexerRuleSpec
   HtmlName
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          HtmlNameStartChar
       lexerElement
        lexerAtom
         terminalDef
          HtmlNameChar
        ebnfSuffix
         *
   ;
  lexerRuleSpec
   ErrorInside
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         .
      lexerCommands
       ->
       lexerCommand
        lexerCommandName
         identifier
          channel
        (
        lexerCommandExpr
         identifier
          ErrorLexem
        )
   ;
 modeSpec
  mode
  identifier
   HtmlQuoteStringMode
  ;
  lexerRuleSpec
   PHPStartEchoInsideQuoteString
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          PhpStartEchoFragment
      lexerCommands
       ->
       lexerCommand
        lexerCommandName
         identifier
          type
        (
        lexerCommandExpr
         identifier
          Echo
        )
       ,
       lexerCommand
        lexerCommandName
         identifier
          pushMode
        (
        lexerCommandExpr
         identifier
          PHP
        )
   ;
  lexerRuleSpec
   PHPStartInsideQuoteString
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          PhpStartFragment
      lexerCommands
       ->
       lexerCommand
        lexerCommandName
         identifier
          channel
        (
        lexerCommandExpr
         identifier
          SkipChannel
        )
       ,
       lexerCommand
        lexerCommandName
         identifier
          pushMode
        (
        lexerCommandExpr
         identifier
          PHP
        )
   ;
  lexerRuleSpec
   HtmlEndQuoteString
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '\''
       lexerElement
        lexerAtom
         terminalDef
          '\''
        ebnfSuffix
         ?
      lexerCommands
       ->
       lexerCommand
        lexerCommandName
         identifier
          popMode
   ;
  lexerRuleSpec
   HtmlQuoteString
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         notSet
          ~
          setElement
           [<']
        ebnfSuffix
         +
   ;
  lexerRuleSpec
   ErrorHtmlQuote
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         .
      lexerCommands
       ->
       lexerCommand
        lexerCommandName
         identifier
          channel
        (
        lexerCommandExpr
         identifier
          ErrorLexem
        )
   ;
 modeSpec
  mode
  identifier
   HtmlDoubleQuoteStringMode
  ;
  lexerRuleSpec
   PHPStartEchoDoubleQuoteString
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          PhpStartEchoFragment
      lexerCommands
       ->
       lexerCommand
        lexerCommandName
         identifier
          type
        (
        lexerCommandExpr
         identifier
          Echo
        )
       ,
       lexerCommand
        lexerCommandName
         identifier
          pushMode
        (
        lexerCommandExpr
         identifier
          PHP
        )
   ;
  lexerRuleSpec
   PHPStartDoubleQuoteString
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          PhpStartFragment
      lexerCommands
       ->
       lexerCommand
        lexerCommandName
         identifier
          channel
        (
        lexerCommandExpr
         identifier
          SkipChannel
        )
       ,
       lexerCommand
        lexerCommandName
         identifier
          pushMode
        (
        lexerCommandExpr
         identifier
          PHP
        )
   ;
  lexerRuleSpec
   HtmlEndDoubleQuoteString
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '"'
       lexerElement
        lexerAtom
         terminalDef
          '"'
        ebnfSuffix
         ?
      lexerCommands
       ->
       lexerCommand
        lexerCommandName
         identifier
          popMode
   ;
  lexerRuleSpec
   HtmlDoubleQuoteString
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         notSet
          ~
          setElement
           [<"]
        ebnfSuffix
         +
   ;
  lexerRuleSpec
   ErrorHtmlDoubleQuote
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         .
      lexerCommands
       ->
       lexerCommand
        lexerCommandName
         identifier
          channel
        (
        lexerCommandExpr
         identifier
          ErrorLexem
        )
   ;
 modeSpec
  mode
  identifier
   SCRIPT
  ;
  lexerRuleSpec
   ScriptText
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         notSet
          ~
          setElement
           '<'
        ebnfSuffix
         +
   ;
  lexerRuleSpec
   HtmlScriptClose
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '</'
       lexerElement
        lexerAtom
         terminalDef
          'script'
        ebnfSuffix
         ?
       lexerElement
        lexerAtom
         terminalDef
          '>'
      lexerCommands
       ->
       lexerCommand
        lexerCommandName
         identifier
          popMode
   ;
  lexerRuleSpec
   PHPStartInsideScriptEcho
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          PhpStartEchoFragment
      lexerCommands
       ->
       lexerCommand
        lexerCommandName
         identifier
          type
        (
        lexerCommandExpr
         identifier
          Echo
        )
       ,
       lexerCommand
        lexerCommandName
         identifier
          pushMode
        (
        lexerCommandExpr
         identifier
          PHP
        )
   ;
  lexerRuleSpec
   PHPStartInsideScript
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          PhpStartFragment
      lexerCommands
       ->
       lexerCommand
        lexerCommandName
         identifier
          channel
        (
        lexerCommandExpr
         identifier
          SkipChannel
        )
       ,
       lexerCommand
        lexerCommandName
         identifier
          pushMode
        (
        lexerCommandExpr
         identifier
          PHP
        )
   ;
  lexerRuleSpec
   ScriptText2
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '<'
      lexerCommands
       ->
       lexerCommand
        lexerCommandName
         identifier
          type
        (
        lexerCommandExpr
         identifier
          ScriptText
        )
   ;
 modeSpec
  mode
  identifier
   STYLE
  ;
  lexerRuleSpec
   StyleBody
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         .
        ebnfSuffix
         *
         ?
       lexerElement
        lexerAtom
         terminalDef
          '</'
       lexerElement
        lexerAtom
         terminalDef
          'style'
        ebnfSuffix
         ?
       lexerElement
        lexerAtom
         terminalDef
          '>'
      lexerCommands
       ->
       lexerCommand
        lexerCommandName
         identifier
          popMode
   ;
 modeSpec
  mode
  identifier
   PHP
  ;
  lexerRuleSpec
   PHPEnd
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerBlock
         (
         lexerAltList
          lexerAlt
           lexerElements
            lexerElement
             lexerAtom
              terminalDef
               '?'
          |
          lexerAlt
           lexerElements
            lexerElement
             lexerAtom
              terminalDef
               '%'
            lexerElement
             actionBlock
              {
              t
              h
              i
              s
              .
              H
              a
              s
              A
              s
              p
              T
              a
              g
              s
              (
              )
              }
             ?
         )
       lexerElement
        lexerAtom
         terminalDef
          '>'
     |
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '</script>'
       lexerElement
        actionBlock
         {
         t
         h
         i
         s
         .
         H
         a
         s
         P
         h
         p
         S
         c
         r
         i
         p
         t
         T
         a
         g
         (
         )
         }
        ?
   ;
  lexerRuleSpec
   Whitespace
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         [ \t\r\n]
        ebnfSuffix
         +
      lexerCommands
       ->
       lexerCommand
        lexerCommandName
         identifier
          channel
        (
        lexerCommandExpr
         identifier
          SkipChannel
        )
   ;
  lexerRuleSpec
   MultiLineComment
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '/*'
       lexerElement
        lexerAtom
         .
        ebnfSuffix
         *
         ?
       lexerElement
        lexerAtom
         terminalDef
          '*/'
      lexerCommands
       ->
       lexerCommand
        lexerCommandName
         identifier
          channel
        (
        lexerCommandExpr
         identifier
          PhpComments
        )
   ;
  lexerRuleSpec
   SingleLineComment
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '//'
      lexerCommands
       ->
       lexerCommand
        lexerCommandName
         identifier
          channel
        (
        lexerCommandExpr
         identifier
          SkipChannel
        )
       ,
       lexerCommand
        lexerCommandName
         identifier
          pushMode
        (
        lexerCommandExpr
         identifier
          SingleLineCommentMode
        )
   ;
  lexerRuleSpec
   ShellStyleComment
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '#'
      lexerCommands
       ->
       lexerCommand
        lexerCommandName
         identifier
          channel
        (
        lexerCommandExpr
         identifier
          SkipChannel
        )
       ,
       lexerCommand
        lexerCommandName
         identifier
          pushMode
        (
        lexerCommandExpr
         identifier
          SingleLineCommentMode
        )
   ;
  lexerRuleSpec
   AttributeStart
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '#['
   ;
  lexerRuleSpec
   Abstract
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'abstract'
   ;
  lexerRuleSpec
   Array
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'array'
   ;
  lexerRuleSpec
   As
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'as'
   ;
  lexerRuleSpec
   BinaryCast
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'binary'
   ;
  lexerRuleSpec
   BoolType
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'bool'
       lexerElement
        lexerAtom
         terminalDef
          'ean'
        ebnfSuffix
         ?
   ;
  lexerRuleSpec
   BooleanConstant
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'true'
     |
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'false'
   ;
  lexerRuleSpec
   Break
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'break'
   ;
  lexerRuleSpec
   Callable
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'callable'
   ;
  lexerRuleSpec
   Case
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'case'
   ;
  lexerRuleSpec
   Catch
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'catch'
   ;
  lexerRuleSpec
   Class
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'class'
   ;
  lexerRuleSpec
   Clone
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'clone'
   ;
  lexerRuleSpec
   Const
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'const'
   ;
  lexerRuleSpec
   Continue
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'continue'
   ;
  lexerRuleSpec
   Declare
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'declare'
   ;
  lexerRuleSpec
   Default
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'default'
   ;
  lexerRuleSpec
   Do
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'do'
   ;
  lexerRuleSpec
   DoubleCast
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'real'
   ;
  lexerRuleSpec
   DoubleType
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'double'
   ;
  lexerRuleSpec
   Echo
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'echo'
   ;
  lexerRuleSpec
   Else
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'else'
   ;
  lexerRuleSpec
   ElseIf
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'elseif'
   ;
  lexerRuleSpec
   Empty
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'empty'
   ;
  lexerRuleSpec
   EndDeclare
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'enddeclare'
   ;
  lexerRuleSpec
   EndFor
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'endfor'
   ;
  lexerRuleSpec
   EndForeach
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'endforeach'
   ;
  lexerRuleSpec
   EndIf
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'endif'
   ;
  lexerRuleSpec
   EndSwitch
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'endswitch'
   ;
  lexerRuleSpec
   EndWhile
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'endwhile'
   ;
  lexerRuleSpec
   Eval
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'eval'
   ;
  lexerRuleSpec
   Exit
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'die'
   ;
  lexerRuleSpec
   Extends
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'extends'
   ;
  lexerRuleSpec
   Final
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'final'
   ;
  lexerRuleSpec
   Finally
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'finally'
   ;
  lexerRuleSpec
   FloatCast
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'float'
   ;
  lexerRuleSpec
   For
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'for'
   ;
  lexerRuleSpec
   Foreach
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'foreach'
   ;
  lexerRuleSpec
   Function_
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'function'
   ;
  lexerRuleSpec
   Global
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'global'
   ;
  lexerRuleSpec
   Goto
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'goto'
   ;
  lexerRuleSpec
   If
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'if'
   ;
  lexerRuleSpec
   Implements
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'implements'
   ;
  lexerRuleSpec
   Import
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'import'
   ;
  lexerRuleSpec
   Include
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'include'
   ;
  lexerRuleSpec
   IncludeOnce
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'include_once'
   ;
  lexerRuleSpec
   InstanceOf
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'instanceof'
   ;
  lexerRuleSpec
   InsteadOf
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'insteadof'
   ;
  lexerRuleSpec
   Int8Cast
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'int8'
   ;
  lexerRuleSpec
   Int16Cast
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'int16'
   ;
  lexerRuleSpec
   Int64Type
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'int64'
   ;
  lexerRuleSpec
   IntType
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'int'
       lexerElement
        lexerAtom
         terminalDef
          'eger'
        ebnfSuffix
         ?
   ;
  lexerRuleSpec
   Interface
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'interface'
   ;
  lexerRuleSpec
   IsSet
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'isset'
   ;
  lexerRuleSpec
   List
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'list'
   ;
  lexerRuleSpec
   LogicalAnd
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'and'
   ;
  lexerRuleSpec
   LogicalOr
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'or'
   ;
  lexerRuleSpec
   LogicalXor
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'xor'
   ;
  lexerRuleSpec
   Match_
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'match'
   ;
  lexerRuleSpec
   Namespace
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'namespace'
   ;
  lexerRuleSpec
   New
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'new'
   ;
  lexerRuleSpec
   Null
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'null'
   ;
  lexerRuleSpec
   ObjectType
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'object'
   ;
  lexerRuleSpec
   Parent_
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'parent'
   ;
  lexerRuleSpec
   Partial
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'partial'
   ;
  lexerRuleSpec
   Print
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'print'
   ;
  lexerRuleSpec
   Private
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'private'
   ;
  lexerRuleSpec
   Protected
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'protected'
   ;
  lexerRuleSpec
   Public
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'public'
   ;
  lexerRuleSpec
   Require
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'require'
   ;
  lexerRuleSpec
   RequireOnce
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'require_once'
   ;
  lexerRuleSpec
   Resource
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'resource'
   ;
  lexerRuleSpec
   Return
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'return'
   ;
  lexerRuleSpec
   Static
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'static'
   ;
  lexerRuleSpec
   StringType
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'string'
   ;
  lexerRuleSpec
   Switch
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'switch'
   ;
  lexerRuleSpec
   Throw
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'throw'
   ;
  lexerRuleSpec
   Trait
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'trait'
   ;
  lexerRuleSpec
   Try
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'try'
   ;
  lexerRuleSpec
   Typeof
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'clrtypeof'
   ;
  lexerRuleSpec
   UintCast
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'uint'
       lexerElement
        lexerBlock
         (
         lexerAltList
          lexerAlt
           lexerElements
            lexerElement
             lexerAtom
              terminalDef
               '8'
          |
          lexerAlt
           lexerElements
            lexerElement
             lexerAtom
              terminalDef
               '16'
          |
          lexerAlt
           lexerElements
            lexerElement
             lexerAtom
              terminalDef
               '64'
         )
        ebnfSuffix
         ?
   ;
  lexerRuleSpec
   UnicodeCast
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'unicode'
   ;
  lexerRuleSpec
   Unset
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'unset'
   ;
  lexerRuleSpec
   Use
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'use'
   ;
  lexerRuleSpec
   Var
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'var'
   ;
  lexerRuleSpec
   While
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'while'
   ;
  lexerRuleSpec
   Yield
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'yield'
   ;
  lexerRuleSpec
   From
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'from'
   ;
  lexerRuleSpec
   LambdaFn
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'fn'
   ;
  lexerRuleSpec
   Get
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '__get'
   ;
  lexerRuleSpec
   Set
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '__set'
   ;
  lexerRuleSpec
   Call
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '__call'
   ;
  lexerRuleSpec
   CallStatic
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '__callstatic'
   ;
  lexerRuleSpec
   Constructor
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '__construct'
   ;
  lexerRuleSpec
   Destruct
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '__destruct'
   ;
  lexerRuleSpec
   Wakeup
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '__wakeup'
   ;
  lexerRuleSpec
   Sleep
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '__sleep'
   ;
  lexerRuleSpec
   Autoload
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '__autoload'
   ;
  lexerRuleSpec
   IsSet__
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '__isset'
   ;
  lexerRuleSpec
   Unset__
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '__unset'
   ;
  lexerRuleSpec
   ToString__
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '__tostring'
   ;
  lexerRuleSpec
   Invoke
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '__invoke'
   ;
  lexerRuleSpec
   SetState
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '__set_state'
   ;
  lexerRuleSpec
   Clone__
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '__clone'
   ;
  lexerRuleSpec
   DebugInfo
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '__debuginfo'
   ;
  lexerRuleSpec
   Namespace__
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '__namespace__'
   ;
  lexerRuleSpec
   Class__
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '__class__'
   ;
  lexerRuleSpec
   Traic__
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '__trait__'
   ;
  lexerRuleSpec
   Function__
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '__function__'
   ;
  lexerRuleSpec
   Method__
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '__method__'
   ;
  lexerRuleSpec
   Line__
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '__line__'
   ;
  lexerRuleSpec
   File__
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '__file__'
   ;
  lexerRuleSpec
   Dir__
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '__dir__'
   ;
  lexerRuleSpec
   Spaceship
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '<=>'
   ;
  lexerRuleSpec
   Lgeneric
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '<:'
   ;
  lexerRuleSpec
   Rgeneric
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          ':>'
   ;
  lexerRuleSpec
   DoubleArrow
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '=>'
   ;
  lexerRuleSpec
   Inc
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '++'
   ;
  lexerRuleSpec
   Dec
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '--'
   ;
  lexerRuleSpec
   IsIdentical
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '==='
   ;
  lexerRuleSpec
   IsNoidentical
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '!=='
   ;
  lexerRuleSpec
   IsEqual
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '=='
   ;
  lexerRuleSpec
   IsNotEq
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '<>'
     |
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '!='
   ;
  lexerRuleSpec
   IsSmallerOrEqual
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '<='
   ;
  lexerRuleSpec
   IsGreaterOrEqual
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '>='
   ;
  lexerRuleSpec
   PlusEqual
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '+='
   ;
  lexerRuleSpec
   MinusEqual
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '-='
   ;
  lexerRuleSpec
   MulEqual
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '*='
   ;
  lexerRuleSpec
   Pow
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '**'
   ;
  lexerRuleSpec
   PowEqual
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '**='
   ;
  lexerRuleSpec
   DivEqual
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '/='
   ;
  lexerRuleSpec
   Concaequal
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '.='
   ;
  lexerRuleSpec
   ModEqual
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '%='
   ;
  lexerRuleSpec
   ShiftLeftEqual
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '<<='
   ;
  lexerRuleSpec
   ShiftRightEqual
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '>>='
   ;
  lexerRuleSpec
   AndEqual
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '&='
   ;
  lexerRuleSpec
   OrEqual
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '|='
   ;
  lexerRuleSpec
   XorEqual
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '^='
   ;
  lexerRuleSpec
   BooleanOr
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '||'
   ;
  lexerRuleSpec
   BooleanAnd
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '&&'
   ;
  lexerRuleSpec
   NullCoalescing
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '??'
   ;
  lexerRuleSpec
   NullCoalescingEqual
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '??='
   ;
  lexerRuleSpec
   ShiftLeft
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '<<'
   ;
  lexerRuleSpec
   ShiftRight
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '>>'
   ;
  lexerRuleSpec
   DoubleColon
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '::'
   ;
  lexerRuleSpec
   ObjectOperator
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '->'
   ;
  lexerRuleSpec
   NamespaceSeparator
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '\\'
   ;
  lexerRuleSpec
   Ellipsis
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '...'
   ;
  lexerRuleSpec
   Less
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '<'
   ;
  lexerRuleSpec
   Greater
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '>'
   ;
  lexerRuleSpec
   Ampersand
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '&'
   ;
  lexerRuleSpec
   Pipe
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '|'
   ;
  lexerRuleSpec
   Bang
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '!'
   ;
  lexerRuleSpec
   Caret
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '^'
   ;
  lexerRuleSpec
   Plus
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '+'
   ;
  lexerRuleSpec
   Minus
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '-'
   ;
  lexerRuleSpec
   Asterisk
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '*'
   ;
  lexerRuleSpec
   Percent
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '%'
   ;
  lexerRuleSpec
   Divide
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '/'
   ;
  lexerRuleSpec
   Tilde
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '~'
   ;
  lexerRuleSpec
   SuppressWarnings
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '@'
   ;
  lexerRuleSpec
   Dollar
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '$'
   ;
  lexerRuleSpec
   Dot
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '.'
   ;
  lexerRuleSpec
   QuestionMark
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '?'
   ;
  lexerRuleSpec
   OpenRoundBracket
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '('
   ;
  lexerRuleSpec
   CloseRoundBracket
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          ')'
   ;
  lexerRuleSpec
   OpenSquareBracket
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '['
   ;
  lexerRuleSpec
   CloseSquareBracket
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          ']'
   ;
  lexerRuleSpec
   OpenCurlyBracket
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '{'
   ;
  lexerRuleSpec
   CloseCurlyBracket
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '}'
       lexerElement
        actionBlock
         {
          
         t
         h
         i
         s
         .
         P
         o
         p
         M
         o
         d
         e
         O
         n
         C
         u
         r
         l
         y
         B
         r
         a
         c
         k
         e
         t
         C
         l
         o
         s
         e
         (
         )
         ;
          
         }
   ;
  lexerRuleSpec
   Comma
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          ','
   ;
  lexerRuleSpec
   Colon
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          ':'
   ;
  lexerRuleSpec
   SemiColon
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          ';'
   ;
  lexerRuleSpec
   Eq
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '='
   ;
  lexerRuleSpec
   Quote
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '\''
   ;
  lexerRuleSpec
   BackQuote
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '`'
   ;
  lexerRuleSpec
   VarName
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '$'
       lexerElement
        lexerAtom
         terminalDef
          NameString
   ;
  lexerRuleSpec
   Label
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         [a-z_]
       lexerElement
        lexerAtom
         [a-z_0-9]
        ebnfSuffix
         *
   ;
  lexerRuleSpec
   Octal
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '0'
       lexerElement
        lexerAtom
         [0-7]
        ebnfSuffix
         +
   ;
  lexerRuleSpec
   Decimal
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '0'
     |
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          NonZeroDigit
       lexerElement
        lexerAtom
         terminalDef
          Digit
        ebnfSuffix
         *
   ;
  lexerRuleSpec
   Real
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerBlock
         (
         lexerAltList
          lexerAlt
           lexerElements
            lexerElement
             lexerAtom
              terminalDef
               Digit
             ebnfSuffix
              +
            lexerElement
             lexerAtom
              terminalDef
               '.'
            lexerElement
             lexerAtom
              terminalDef
               Digit
             ebnfSuffix
              *
          |
          lexerAlt
           lexerElements
            lexerElement
             lexerAtom
              terminalDef
               '.'
            lexerElement
             lexerAtom
              terminalDef
               Digit
             ebnfSuffix
              +
         )
       lexerElement
        lexerAtom
         terminalDef
          ExponentPart
        ebnfSuffix
         ?
     |
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          Digit
        ebnfSuffix
         +
       lexerElement
        lexerAtom
         terminalDef
          ExponentPart
   ;
  lexerRuleSpec
   Hex
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '0x'
       lexerElement
        lexerAtom
         terminalDef
          HexDigit
        ebnfSuffix
         +
   ;
  lexerRuleSpec
   Binary
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '0b'
       lexerElement
        lexerAtom
         [01_]
        ebnfSuffix
         +
   ;
  lexerRuleSpec
   BackQuoteString
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '`'
       lexerElement
        lexerAtom
         notSet
          ~
          setElement
           '`'
        ebnfSuffix
         *
       lexerElement
        lexerAtom
         terminalDef
          '`'
   ;
  lexerRuleSpec
   SingleQuoteString
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '\''
       lexerElement
        lexerBlock
         (
         lexerAltList
          lexerAlt
           lexerElements
            lexerElement
             lexerAtom
              notSet
               ~
               blockSet
                (
                setElement
                 '\''
                |
                setElement
                 '\\'
                )
          |
          lexerAlt
           lexerElements
            lexerElement
             lexerAtom
              terminalDef
               '\\'
            lexerElement
             lexerAtom
              .
         )
        ebnfSuffix
         *
       lexerElement
        lexerAtom
         terminalDef
          '\''
   ;
  lexerRuleSpec
   DoubleQuote
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '"'
      lexerCommands
       ->
       lexerCommand
        lexerCommandName
         identifier
          pushMode
        (
        lexerCommandExpr
         identifier
          InterpolationString
        )
   ;
  lexerRuleSpec
   StartNowDoc
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '<<<'
       lexerElement
        lexerAtom
         [ \t]
        ebnfSuffix
         *
       lexerElement
        lexerAtom
         terminalDef
          '\''
       lexerElement
        lexerAtom
         terminalDef
          NameString
       lexerElement
        lexerAtom
         terminalDef
          '\''
       lexerElement
        actionBlock
         {
          
         t
         h
         i
         s
         .
         S
         h
         o
         u
         l
         d
         P
         u
         s
         h
         H
         e
         r
         e
         D
         o
         c
         M
         o
         d
         e
         (
         1
         )
          
         }
        ?
      lexerCommands
       ->
       lexerCommand
        lexerCommandName
         identifier
          pushMode
        (
        lexerCommandExpr
         identifier
          HereDoc
        )
   ;
  lexerRuleSpec
   StartHereDoc
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '<<<'
       lexerElement
        lexerAtom
         [ \t]
        ebnfSuffix
         *
       lexerElement
        lexerAtom
         terminalDef
          NameString
       lexerElement
        actionBlock
         {
          
         t
         h
         i
         s
         .
         S
         h
         o
         u
         l
         d
         P
         u
         s
         h
         H
         e
         r
         e
         D
         o
         c
         M
         o
         d
         e
         (
         1
         )
          
         }
        ?
      lexerCommands
       ->
       lexerCommand
        lexerCommandName
         identifier
          pushMode
        (
        lexerCommandExpr
         identifier
          HereDoc
        )
   ;
  lexerRuleSpec
   ErrorPhp
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         .
      lexerCommands
       ->
       lexerCommand
        lexerCommandName
         identifier
          channel
        (
        lexerCommandExpr
         identifier
          ErrorLexem
        )
   ;
 modeSpec
  mode
  identifier
   InterpolationString
  ;
  lexerRuleSpec
   VarNameInInterpolation
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '$'
       lexerElement
        lexerAtom
         terminalDef
          NameString
      lexerCommands
       ->
       lexerCommand
        lexerCommandName
         identifier
          type
        (
        lexerCommandExpr
         identifier
          VarName
        )
   ;
  lexerRuleSpec
   DollarString
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '$'
      lexerCommands
       ->
       lexerCommand
        lexerCommandName
         identifier
          type
        (
        lexerCommandExpr
         identifier
          StringPart
        )
   ;
  lexerRuleSpec
   CurlyDollar
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '{'
       lexerElement
        actionBlock
         {
          
         t
         h
         i
         s
         .
         I
         s
         C
         u
         r
         l
         y
         D
         o
         l
         l
         a
         r
         (
         1
         )
          
         }
        ?
       lexerElement
        actionBlock
         {
          
         t
         h
         i
         s
         .
         S
         e
         t
         I
         n
         s
         i
         d
         e
         S
         t
         r
         i
         n
         g
         (
         )
         ;
          
         }
      lexerCommands
       ->
       lexerCommand
        lexerCommandName
         identifier
          channel
        (
        lexerCommandExpr
         identifier
          SkipChannel
        )
       ,
       lexerCommand
        lexerCommandName
         identifier
          pushMode
        (
        lexerCommandExpr
         identifier
          PHP
        )
   ;
  lexerRuleSpec
   CurlyString
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '{'
      lexerCommands
       ->
       lexerCommand
        lexerCommandName
         identifier
          type
        (
        lexerCommandExpr
         identifier
          StringPart
        )
   ;
  lexerRuleSpec
   EscapedChar
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '\\'
       lexerElement
        lexerAtom
         .
      lexerCommands
       ->
       lexerCommand
        lexerCommandName
         identifier
          type
        (
        lexerCommandExpr
         identifier
          StringPart
        )
   ;
  lexerRuleSpec
   DoubleQuoteInInterpolation
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '"'
      lexerCommands
       ->
       lexerCommand
        lexerCommandName
         identifier
          type
        (
        lexerCommandExpr
         identifier
          DoubleQuote
        )
       ,
       lexerCommand
        lexerCommandName
         identifier
          popMode
   ;
  lexerRuleSpec
   UnicodeEscape
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '\\u{'
       lexerElement
        lexerAtom
         [a-z0-9]
       lexerElement
        lexerAtom
         [a-z0-9]
        ebnfSuffix
         +
       lexerElement
        lexerAtom
         terminalDef
          '}'
   ;
  lexerRuleSpec
   StringPart
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         notSet
          ~
          setElement
           [${\\"]
        ebnfSuffix
         +
   ;
 modeSpec
  mode
  identifier
   SingleLineCommentMode
  ;
  lexerRuleSpec
   Comment
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         notSet
          ~
          setElement
           [\r\n?]
        ebnfSuffix
         +
      lexerCommands
       ->
       lexerCommand
        lexerCommandName
         identifier
          channel
        (
        lexerCommandExpr
         identifier
          PhpComments
        )
   ;
  lexerRuleSpec
   PHPEndSingleLineComment
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '?'
       lexerElement
        lexerAtom
         terminalDef
          '>'
   ;
  lexerRuleSpec
   CommentQuestionMark
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '?'
      lexerCommands
       ->
       lexerCommand
        lexerCommandName
         identifier
          type
        (
        lexerCommandExpr
         identifier
          Comment
        )
       ,
       lexerCommand
        lexerCommandName
         identifier
          channel
        (
        lexerCommandExpr
         identifier
          PhpComments
        )
   ;
  lexerRuleSpec
   CommentEnd
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         [\r\n]
      lexerCommands
       ->
       lexerCommand
        lexerCommandName
         identifier
          channel
        (
        lexerCommandExpr
         identifier
          SkipChannel
        )
       ,
       lexerCommand
        lexerCommandName
         identifier
          popMode
   ;
 modeSpec
  mode
  identifier
   HereDoc
  ;
  lexerRuleSpec
   HereDocText
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         notSet
          ~
          setElement
           [\r\n]
        ebnfSuffix
         *
         ?
       lexerElement
        lexerBlock
         (
         lexerAltList
          lexerAlt
           lexerElements
            lexerElement
             lexerAtom
              terminalDef
               '\r'
             ebnfSuffix
              ?
            lexerElement
             lexerAtom
              terminalDef
               '\n'
          |
          lexerAlt
           lexerElements
            lexerElement
             lexerAtom
              terminalDef
               '\r'
         )
   ;
  lexerRuleSpec
   fragment
   PhpStartEchoFragment
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '<'
       lexerElement
        lexerBlock
         (
         lexerAltList
          lexerAlt
           lexerElements
            lexerElement
             lexerAtom
              terminalDef
               '?'
            lexerElement
             lexerAtom
              terminalDef
               '='
          |
          lexerAlt
           lexerElements
            lexerElement
             actionBlock
              {
               
              t
              h
              i
              s
              .
              H
              a
              s
              A
              s
              p
              T
              a
              g
              s
              (
              )
               
              }
             ?
            lexerElement
             lexerAtom
              terminalDef
               '%'
            lexerElement
             lexerAtom
              terminalDef
               '='
         )
   ;
  lexerRuleSpec
   fragment
   PhpStartFragment
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '<'
       lexerElement
        lexerBlock
         (
         lexerAltList
          lexerAlt
           lexerElements
            lexerElement
             lexerAtom
              terminalDef
               '?'
            lexerElement
             lexerAtom
              terminalDef
               'php'
             ebnfSuffix
              ?
          |
          lexerAlt
           lexerElements
            lexerElement
             actionBlock
              {
               
              t
              h
              i
              s
              .
              H
              a
              s
              A
              s
              p
              T
              a
              g
              s
              (
              )
               
              }
             ?
            lexerElement
             lexerAtom
              terminalDef
               '%'
         )
   ;
  lexerRuleSpec
   fragment
   NameString
   optionsSpec
    options {
    option
     identifier
      caseInsensitive
     =
     optionValue
      identifier
       false
    ;
    }
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         [a-zA-Z_\u0080-\ufffe]
       lexerElement
        lexerAtom
         [a-zA-Z0-9_\u0080-\ufffe]
        ebnfSuffix
         *
   ;
  lexerRuleSpec
   fragment
   HtmlNameChar
   optionsSpec
    options {
    option
     identifier
      caseInsensitive
     =
     optionValue
      identifier
       false
    ;
    }
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          HtmlNameStartChar
     |
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '-'
     |
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '_'
     |
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '.'
     |
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          Digit
     |
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          '\u00B7'
     |
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         characterRange
          '\u0300'
          ..
          '\u036F'
     |
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         characterRange
          '\u203F'
          ..
          '\u2040'
   ;
  lexerRuleSpec
   fragment
   HtmlNameStartChar
   optionsSpec
    options {
    option
     identifier
      caseInsensitive
     =
     optionValue
      identifier
       false
    ;
    }
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         [:a-zA-Z]
     |
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         characterRange
          '\u2070'
          ..
          '\u218F'
     |
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         characterRange
          '\u2C00'
          ..
          '\u2FEF'
     |
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         characterRange
          '\u3001'
          ..
          '\uD7FF'
     |
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         characterRange
          '\uF900'
          ..
          '\uFDCF'
     |
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         characterRange
          '\uFDF0'
          ..
          '\uFFFD'
   ;
  lexerRuleSpec
   fragment
   ExponentPart
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         terminalDef
          'e'
       lexerElement
        lexerAtom
         [+-]
        ebnfSuffix
         ?
       lexerElement
        lexerAtom
         terminalDef
          Digit
        ebnfSuffix
         +
   ;
  lexerRuleSpec
   fragment
   NonZeroDigit
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         [1-9_]
   ;
  lexerRuleSpec
   fragment
   Digit
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         [0-9_]
   ;
  lexerRuleSpec
   fragment
   HexDigit
   :
   lexerRuleBlock
    lexerAltList
     lexerAlt
      lexerElements
       lexerElement
        lexerAtom
         [a-f0-9_]
   ;
 <EOF>
