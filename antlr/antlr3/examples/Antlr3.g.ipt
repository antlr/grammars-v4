grammarDef
 grammar
 id_
  ANTLR
 ;
 optionsSpec
  options
  {
  option
   id_
    language
   =
   optionValue
    id_
     Java
   ;
  option
   id_
    output
   =
   optionValue
    id_
     AST
   ;
  option
   id_
    ASTLabelType
   =
   optionValue
    id_
     GrammarAST
   ;
  }
 tokensSpec
  tokens
  {
  tokenSpec
   LEXER
   =
   'lexer'
   ;
  tokenSpec
   PARSER
   =
   'parser'
   ;
  tokenSpec
   CATCH
   =
   'catch'
   ;
  tokenSpec
   FINALLY
   =
   'finally'
   ;
  tokenSpec
   GRAMMAR
   =
   'grammar'
   ;
  tokenSpec
   PRIVATE
   =
   'private'
   ;
  tokenSpec
   PROTECTED
   =
   'protected'
   ;
  tokenSpec
   PUBLIC
   =
   'public'
   ;
  tokenSpec
   RETURNS
   =
   'returns'
   ;
  tokenSpec
   THROWS
   =
   'throws'
   ;
  tokenSpec
   TREE
   =
   'tree'
   ;
  tokenSpec
   RULE
   ;
  tokenSpec
   PREC_RULE
   ;
  tokenSpec
   RECURSIVE_RULE_REF
   ;
  tokenSpec
   BLOCK
   ;
  tokenSpec
   OPTIONAL
   ;
  tokenSpec
   CLOSURE
   ;
  tokenSpec
   POSITIVE_CLOSURE
   ;
  tokenSpec
   SYNPRED
   ;
  tokenSpec
   RANGE
   ;
  tokenSpec
   CHAR_RANGE
   ;
  tokenSpec
   EPSILON
   ;
  tokenSpec
   ALT
   ;
  tokenSpec
   EOR
   ;
  tokenSpec
   EOB
   ;
  tokenSpec
   EOA
   ;
  tokenSpec
   ID
   ;
  tokenSpec
   ARG
   ;
  tokenSpec
   ARGLIST
   ;
  tokenSpec
   RET
   ;
  tokenSpec
   LEXER_GRAMMAR
   ;
  tokenSpec
   PARSER_GRAMMAR
   ;
  tokenSpec
   TREE_GRAMMAR
   ;
  tokenSpec
   COMBINED_GRAMMAR
   ;
  tokenSpec
   INITACTION
   ;
  tokenSpec
   FORCED_ACTION
   ;
  tokenSpec
   LABEL
   ;
  tokenSpec
   TEMPLATE
   ;
  tokenSpec
   SCOPE
   =
   'scope'
   ;
  tokenSpec
   IMPORT
   =
   'import'
   ;
  tokenSpec
   GATED_SEMPRED
   ;
  tokenSpec
   SYN_SEMPRED
   ;
  tokenSpec
   BACKTRACK_SEMPRED
   ;
  tokenSpec
   FRAGMENT
   =
   'fragment'
   ;
  tokenSpec
   DOT
   ;
  tokenSpec
   REWRITES
   ;
  }
 action
  @
  actionScopeName
   lexer
  ::
  id_
   header
  actionBlock
   {
   \n
   p
   a
   c
   k
   a
   g
   e
    
   o
   r
   g
   .
   a
   n
   t
   l
   r
   .
   g
   r
   a
   m
   m
   a
   r
   .
   v
   3
   ;
   \n
   i
   m
   p
   o
   r
   t
    
   o
   r
   g
   .
   a
   n
   t
   l
   r
   .
   t
   o
   o
   l
   .
   E
   r
   r
   o
   r
   M
   a
   n
   a
   g
   e
   r
   ;
   \n
   i
   m
   p
   o
   r
   t
    
   o
   r
   g
   .
   a
   n
   t
   l
   r
   .
   t
   o
   o
   l
   .
   G
   r
   a
   m
   m
   a
   r
   ;
   \n
   }
 action
  @
  actionScopeName
   parser
  ::
  id_
   header
  actionBlock
   {
   \n
   p
   a
   c
   k
   a
   g
   e
    
   o
   r
   g
   .
   a
   n
   t
   l
   r
   .
   g
   r
   a
   m
   m
   a
   r
   .
   v
   3
   ;
   \n
   i
   m
   p
   o
   r
   t
    
   o
   r
   g
   .
   a
   n
   t
   l
   r
   .
   t
   o
   o
   l
   .
   E
   r
   r
   o
   r
   M
   a
   n
   a
   g
   e
   r
   ;
   \n
   i
   m
   p
   o
   r
   t
    
   o
   r
   g
   .
   a
   n
   t
   l
   r
   .
   t
   o
   o
   l
   .
   G
   r
   a
   m
   m
   a
   r
   ;
   \n
   i
   m
   p
   o
   r
   t
    
   o
   r
   g
   .
   a
   n
   t
   l
   r
   .
   t
   o
   o
   l
   .
   G
   r
   a
   m
   m
   a
   r
   A
   S
   T
   ;
   \n
   i
   m
   p
   o
   r
   t
    
   o
   r
   g
   .
   a
   n
   t
   l
   r
   .
   m
   i
   s
   c
   .
   I
   n
   t
   S
   e
   t
   ;
   \n
   i
   m
   p
   o
   r
   t
    
   o
   r
   g
   .
   a
   n
   t
   l
   r
   .
   t
   o
   o
   l
   .
   R
   u
   l
   e
   ;
   \n
   }
 action
  @
  actionScopeName
   lexer
  ::
  id_
   members
  actionBlock
   {
   \n
   p
   u
   b
   l
   i
   c
    
   b
   o
   o
   l
   e
   a
   n
    
   h
   a
   s
   A
   S
   T
   O
   p
   e
   r
   a
   t
   o
   r
    
   =
    
   f
   a
   l
   s
   e
   ;
   \n
   p
   r
   i
   v
   a
   t
   e
    
   S
   t
   r
   i
   n
   g
    
   f
   i
   l
   e
   N
   a
   m
   e
   ;
   \n
   \n
   p
   u
   b
   l
   i
   c
    
   S
   t
   r
   i
   n
   g
    
   g
   e
   t
   F
   i
   l
   e
   N
   a
   m
   e
   (
   )
    
   {
   \n
    
    
    
    
   r
   e
   t
   u
   r
   n
    
   f
   i
   l
   e
   N
   a
   m
   e
   ;
   \n
   }
   \n
   \n
   p
   u
   b
   l
   i
   c
    
   v
   o
   i
   d
    
   s
   e
   t
   F
   i
   l
   e
   N
   a
   m
   e
   (
   S
   t
   r
   i
   n
   g
    
   v
   a
   l
   u
   e
   )
    
   {
   \n
    
    
    
    
   f
   i
   l
   e
   N
   a
   m
   e
    
   =
    
   v
   a
   l
   u
   e
   ;
   \n
   }
   \n
   \n
   @
   O
   v
   e
   r
   r
   i
   d
   e
   \n
   p
   u
   b
   l
   i
   c
    
   T
   o
   k
   e
   n
    
   n
   e
   x
   t
   T
   o
   k
   e
   n
   (
   )
    
   {
   \n
    
    
    
    
   T
   o
   k
   e
   n
    
   t
   o
   k
   e
   n
    
   =
    
   s
   u
   p
   e
   r
   .
   n
   e
   x
   t
   T
   o
   k
   e
   n
   (
   )
   ;
   \n
    
    
    
    
   w
   h
   i
   l
   e
    
   (
   t
   o
   k
   e
   n
   .
   g
   e
   t
   T
   y
   p
   e
   (
   )
    
   =
   =
    
   S
   T
   R
   A
   Y
   _
   B
   R
   A
   C
   K
   E
   T
   )
    
   {
   \n
    
    
    
    
    
    
    
    
   E
   r
   r
   o
   r
   M
   a
   n
   a
   g
   e
   r
   .
   s
   y
   n
   t
   a
   x
   E
   r
   r
   o
   r
   (
   \n
    
    
    
    
    
    
    
    
    
    
    
    
   E
   r
   r
   o
   r
   M
   a
   n
   a
   g
   e
   r
   .
   M
   S
   G
   _
   S
   Y
   N
   T
   A
   X
   _
   E
   R
   R
   O
   R
   ,
   \n
    
    
    
    
    
    
    
    
    
    
    
    
   n
   u
   l
   l
   ,
   \n
    
    
    
    
    
    
    
    
    
    
    
    
   t
   o
   k
   e
   n
   ,
   \n
    
    
    
    
    
    
    
    
    
    
    
    
   "antlr: dangling ']'? make sure to escape with \\]"
   ,
   \n
    
    
    
    
    
    
    
    
    
    
    
    
   n
   u
   l
   l
   )
   ;
   \n
   \n
    
    
    
    
    
    
    
    
   // skip this token
   \n
    
    
    
    
    
    
    
    
   t
   o
   k
   e
   n
    
   =
    
   s
   u
   p
   e
   r
   .
   n
   e
   x
   t
   T
   o
   k
   e
   n
   (
   )
   ;
   \n
    
    
    
    
   }
   \n
   \n
    
    
    
    
   r
   e
   t
   u
   r
   n
    
   t
   o
   k
   e
   n
   ;
   \n
   }
   \n
   }
 action
  @
  actionScopeName
   parser
  ::
  id_
   members
  actionBlock
   {
   \n
   p
   r
   o
   t
   e
   c
   t
   e
   d
    
   S
   t
   r
   i
   n
   g
    
   c
   u
   r
   r
   e
   n
   t
   R
   u
   l
   e
   N
   a
   m
   e
    
   =
    
   n
   u
   l
   l
   ;
   \n
   p
   r
   o
   t
   e
   c
   t
   e
   d
    
   G
   r
   a
   m
   m
   a
   r
   A
   S
   T
    
   c
   u
   r
   r
   e
   n
   t
   B
   l
   o
   c
   k
   A
   S
   T
    
   =
    
   n
   u
   l
   l
   ;
   \n
   p
   r
   o
   t
   e
   c
   t
   e
   d
    
   b
   o
   o
   l
   e
   a
   n
    
   a
   t
   T
   r
   e
   e
   R
   o
   o
   t
   ;
    
   // are we matching a tree root in tree grammar?
   \n
   \n
   p
   u
   b
   l
   i
   c
    
   s
   t
   a
   t
   i
   c
    
   A
   N
   T
   L
   R
   P
   a
   r
   s
   e
   r
    
   c
   r
   e
   a
   t
   e
   P
   a
   r
   s
   e
   r
   (
   T
   o
   k
   e
   n
   S
   t
   r
   e
   a
   m
    
   i
   n
   p
   u
   t
   )
    
   {
   \n
    
    
    
    
   A
   N
   T
   L
   R
   P
   a
   r
   s
   e
   r
    
   p
   a
   r
   s
   e
   r
    
   =
    
   n
   e
   w
    
   A
   N
   T
   L
   R
   P
   a
   r
   s
   e
   r
   (
   i
   n
   p
   u
   t
   )
   ;
   \n
    
    
    
    
   p
   a
   r
   s
   e
   r
   .
   a
   d
   a
   p
   t
   o
   r
    
   =
    
   n
   e
   w
    
   g
   r
   a
   m
   m
   a
   r
   _
   A
   d
   a
   p
   t
   o
   r
   (
   p
   a
   r
   s
   e
   r
   )
   ;
   \n
    
    
    
    
   r
   e
   t
   u
   r
   n
    
   p
   a
   r
   s
   e
   r
   ;
   \n
   }
   \n
   \n
   p
   r
   i
   v
   a
   t
   e
    
   s
   t
   a
   t
   i
   c
    
   c
   l
   a
   s
   s
    
   G
   r
   a
   m
   m
   a
   r
   A
   S
   T
   E
   r
   r
   o
   r
   N
   o
   d
   e
    
   e
   x
   t
   e
   n
   d
   s
    
   G
   r
   a
   m
   m
   a
   r
   A
   S
   T
    
   {
   \n
    
    
    
    
   p
   u
   b
   l
   i
   c
    
   I
   n
   t
   S
   t
   r
   e
   a
   m
    
   i
   n
   p
   u
   t
   ;
   \n
    
    
    
    
   p
   u
   b
   l
   i
   c
    
   T
   o
   k
   e
   n
    
   s
   t
   a
   r
   t
   ;
   \n
    
    
    
    
   p
   u
   b
   l
   i
   c
    
   T
   o
   k
   e
   n
    
   s
   t
   o
   p
   ;
   \n
    
    
    
    
   p
   u
   b
   l
   i
   c
    
   R
   e
   c
   o
   g
   n
   i
   t
   i
   o
   n
   E
   x
   c
   e
   p
   t
   i
   o
   n
    
   t
   r
   a
   p
   p
   e
   d
   E
   x
   c
   e
   p
   t
   i
   o
   n
   ;
   \n
   \n
    
    
    
    
   p
   u
   b
   l
   i
   c
    
   G
   r
   a
   m
   m
   a
   r
   A
   S
   T
   E
   r
   r
   o
   r
   N
   o
   d
   e
   (
   T
   o
   k
   e
   n
   S
   t
   r
   e
   a
   m
    
   i
   n
   p
   u
   t
   ,
    
   T
   o
   k
   e
   n
    
   s
   t
   a
   r
   t
   ,
    
   T
   o
   k
   e
   n
    
   s
   t
   o
   p
   ,
    
   R
   e
   c
   o
   g
   n
   i
   t
   i
   o
   n
   E
   x
   c
   e
   p
   t
   i
   o
   n
    
   e
   )
    
   {
   \n
    
    
    
    
    
    
    
    
   s
   u
   p
   e
   r
   (
   s
   t
   o
   p
   )
   ;
   \n
    
    
    
    
    
    
    
    
   //Console.Out.WriteLine( "start: " + start + ", stop: " + stop );
   \n
    
    
    
    
    
    
    
    
   i
   f
    
   (
    
   s
   t
   o
   p
    
   =
   =
    
   n
   u
   l
   l
    
   |
   |
   \n
    
    
    
    
    
    
    
    
    
    
    
    
    
   (
    
   s
   t
   o
   p
   .
   g
   e
   t
   T
   o
   k
   e
   n
   I
   n
   d
   e
   x
   (
   )
    
   <
    
   s
   t
   a
   r
   t
   .
   g
   e
   t
   T
   o
   k
   e
   n
   I
   n
   d
   e
   x
   (
   )
    
   &
   &
   \n
    
    
    
    
    
    
    
    
    
    
    
    
    
    
   s
   t
   o
   p
   .
   g
   e
   t
   T
   y
   p
   e
   (
   )
    
   !
   =
    
   T
   o
   k
   e
   n
   .
   E
   O
   F
   )
    
   )
    
   {
   \n
    
    
    
    
    
    
    
    
    
    
    
    
   // sometimes resync does not consume a token (when LT(1) is
   \n
    
    
    
    
    
    
    
    
    
    
    
    
   // in follow set.  So, stop will be 1 to left to start. adjust.
   \n
    
    
    
    
    
    
    
    
    
    
    
    
   // Also handle case where start is the first token and no token
   \n
    
    
    
    
    
    
    
    
    
    
    
    
   // is consumed during recovery; LT(-1) will return null.
   \n
    
    
    
    
    
    
    
    
    
    
    
    
   s
   t
   o
   p
    
   =
    
   s
   t
   a
   r
   t
   ;
   \n
    
    
    
    
    
    
    
    
   }
   \n
    
    
    
    
    
    
    
    
   t
   h
   i
   s
   .
   i
   n
   p
   u
   t
    
   =
    
   i
   n
   p
   u
   t
   ;
   \n
    
    
    
    
    
    
    
    
   t
   h
   i
   s
   .
   s
   t
   a
   r
   t
    
   =
    
   s
   t
   a
   r
   t
   ;
   \n
    
    
    
    
    
    
    
    
   t
   h
   i
   s
   .
   s
   t
   o
   p
    
   =
    
   s
   t
   o
   p
   ;
   \n
    
    
    
    
    
    
    
    
   t
   h
   i
   s
   .
   t
   r
   a
   p
   p
   e
   d
   E
   x
   c
   e
   p
   t
   i
   o
   n
    
   =
    
   e
   ;
   \n
    
    
    
    
   }
   \n
   \n
    
    
    
    
   @
   O
   v
   e
   r
   r
   i
   d
   e
   \n
    
    
    
    
   p
   u
   b
   l
   i
   c
    
   b
   o
   o
   l
   e
   a
   n
    
   i
   s
   N
   i
   l
   (
   )
    
   {
    
   r
   e
   t
   u
   r
   n
    
   f
   a
   l
   s
   e
   ;
    
   }
   \n
   \n
    
    
    
    
   @
   O
   v
   e
   r
   r
   i
   d
   e
   \n
    
    
    
    
   p
   u
   b
   l
   i
   c
    
   S
   t
   r
   i
   n
   g
    
   g
   e
   t
   T
   e
   x
   t
   (
   )
    
   {
   \n
    
    
    
    
    
    
    
    
   S
   t
   r
   i
   n
   g
    
   b
   a
   d
   T
   e
   x
   t
    
   =
    
   n
   u
   l
   l
   ;
   \n
    
    
    
    
    
    
    
    
   i
   f
    
   (
   s
   t
   a
   r
   t
    
   !
   =
    
   n
   u
   l
   l
   )
    
   {
   \n
    
    
    
    
    
    
    
    
    
    
    
    
   i
   n
   t
    
   i
    
   =
    
   s
   t
   a
   r
   t
   .
   g
   e
   t
   T
   o
   k
   e
   n
   I
   n
   d
   e
   x
   (
   )
   ;
   \n
    
    
    
    
    
    
    
    
    
    
    
    
   i
   n
   t
    
   j
    
   =
    
   s
   t
   o
   p
   .
   g
   e
   t
   T
   o
   k
   e
   n
   I
   n
   d
   e
   x
   (
   )
   ;
   \n
    
    
    
    
    
    
    
    
    
    
    
    
   i
   f
    
   (
   s
   t
   o
   p
   .
   g
   e
   t
   T
   y
   p
   e
   (
   )
    
   =
   =
    
   T
   o
   k
   e
   n
   .
   E
   O
   F
   )
    
   {
   \n
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
   j
    
   =
    
   i
   n
   p
   u
   t
   .
   s
   i
   z
   e
   (
   )
   ;
   \n
    
    
    
    
    
    
    
    
    
    
    
    
   }
   \n
    
    
    
    
    
    
    
    
    
    
    
    
   b
   a
   d
   T
   e
   x
   t
    
   =
    
   (
   (
   T
   o
   k
   e
   n
   S
   t
   r
   e
   a
   m
   )
   i
   n
   p
   u
   t
   )
   .
   t
   o
   S
   t
   r
   i
   n
   g
   (
   i
   ,
    
   j
   )
   ;
   \n
    
    
    
    
    
    
    
    
   }
    
   e
   l
   s
   e
    
   {
   \n
    
    
    
    
    
    
    
    
    
    
    
    
   // people should subclass if they alter the tree type so this
   \n
    
    
    
    
    
    
    
    
    
    
    
    
   // next one is for sure correct.
   \n
    
    
    
    
    
    
    
    
    
    
    
    
   b
   a
   d
   T
   e
   x
   t
    
   =
    
   "<unknown>"
   ;
   \n
    
    
    
    
    
    
    
    
   }
   \n
    
    
    
    
    
    
    
    
   r
   e
   t
   u
   r
   n
    
   b
   a
   d
   T
   e
   x
   t
   ;
   \n
    
    
    
    
   }
   \n
   \n
    
    
    
    
   @
   O
   v
   e
   r
   r
   i
   d
   e
   \n
    
    
    
    
   p
   u
   b
   l
   i
   c
    
   v
   o
   i
   d
    
   s
   e
   t
   T
   e
   x
   t
   (
   S
   t
   r
   i
   n
   g
    
   v
   a
   l
   u
   e
   )
    
   {
    
   }
   \n
   \n
    
    
    
    
   @
   O
   v
   e
   r
   r
   i
   d
   e
   \n
    
    
    
    
   p
   u
   b
   l
   i
   c
    
   i
   n
   t
    
   g
   e
   t
   T
   y
   p
   e
   (
   )
    
   {
    
   r
   e
   t
   u
   r
   n
    
   T
   o
   k
   e
   n
   .
   I
   N
   V
   A
   L
   I
   D
   _
   T
   O
   K
   E
   N
   _
   T
   Y
   P
   E
   ;
    
   }
   \n
   \n
    
    
    
    
   @
   O
   v
   e
   r
   r
   i
   d
   e
   \n
    
    
    
    
   p
   u
   b
   l
   i
   c
    
   v
   o
   i
   d
    
   s
   e
   t
   T
   y
   p
   e
   (
   i
   n
   t
    
   v
   a
   l
   u
   e
   )
    
   {
    
   }
   \n
   \n
    
    
    
    
   @
   O
   v
   e
   r
   r
   i
   d
   e
   \n
    
    
    
    
   p
   u
   b
   l
   i
   c
    
   S
   t
   r
   i
   n
   g
    
   t
   o
   S
   t
   r
   i
   n
   g
   (
   )
   \n
    
    
    
    
   {
   \n
    
    
    
    
    
    
    
    
   i
   f
    
   (
   t
   r
   a
   p
   p
   e
   d
   E
   x
   c
   e
   p
   t
   i
   o
   n
    
   i
   n
   s
   t
   a
   n
   c
   e
   o
   f
    
   M
   i
   s
   s
   i
   n
   g
   T
   o
   k
   e
   n
   E
   x
   c
   e
   p
   t
   i
   o
   n
   )
   \n
    
    
    
    
    
    
    
    
   {
   \n
    
    
    
    
    
    
    
    
    
    
    
    
   r
   e
   t
   u
   r
   n
    
   "<missing type: "
    
   +
   \n
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
   (
    
   (
   M
   i
   s
   s
   i
   n
   g
   T
   o
   k
   e
   n
   E
   x
   c
   e
   p
   t
   i
   o
   n
   )
   t
   r
   a
   p
   p
   e
   d
   E
   x
   c
   e
   p
   t
   i
   o
   n
    
   )
   .
   g
   e
   t
   M
   i
   s
   s
   i
   n
   g
   T
   y
   p
   e
   (
   )
    
   +
   \n
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
   ">"
   ;
   \n
    
    
    
    
    
    
    
    
   }
    
   e
   l
   s
   e
    
   i
   f
    
   (
   t
   r
   a
   p
   p
   e
   d
   E
   x
   c
   e
   p
   t
   i
   o
   n
    
   i
   n
   s
   t
   a
   n
   c
   e
   o
   f
    
   U
   n
   w
   a
   n
   t
   e
   d
   T
   o
   k
   e
   n
   E
   x
   c
   e
   p
   t
   i
   o
   n
   )
    
   {
   \n
    
    
    
    
    
    
    
    
    
    
    
    
   r
   e
   t
   u
   r
   n
    
   "<extraneous: "
    
   +
   \n
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
   (
    
   (
   U
   n
   w
   a
   n
   t
   e
   d
   T
   o
   k
   e
   n
   E
   x
   c
   e
   p
   t
   i
   o
   n
   )
   t
   r
   a
   p
   p
   e
   d
   E
   x
   c
   e
   p
   t
   i
   o
   n
    
   )
   .
   g
   e
   t
   U
   n
   e
   x
   p
   e
   c
   t
   e
   d
   T
   o
   k
   e
   n
   (
   )
    
   +
   \n
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
   ", resync="
    
   +
    
   g
   e
   t
   T
   e
   x
   t
   (
   )
    
   +
    
   ">"
   ;
   \n
    
    
    
    
    
    
    
    
   }
    
   e
   l
   s
   e
    
   i
   f
    
   (
   t
   r
   a
   p
   p
   e
   d
   E
   x
   c
   e
   p
   t
   i
   o
   n
    
   i
   n
   s
   t
   a
   n
   c
   e
   o
   f
    
   M
   i
   s
   m
   a
   t
   c
   h
   e
   d
   T
   o
   k
   e
   n
   E
   x
   c
   e
   p
   t
   i
   o
   n
   )
    
   {
   \n
    
    
    
    
    
    
    
    
    
    
    
    
   r
   e
   t
   u
   r
   n
    
   "<mismatched token: "
    
   +
    
   t
   r
   a
   p
   p
   e
   d
   E
   x
   c
   e
   p
   t
   i
   o
   n
   .
   t
   o
   k
   e
   n
    
   +
    
   ", resync="
    
   +
    
   g
   e
   t
   T
   e
   x
   t
   (
   )
    
   +
    
   ">"
   ;
   \n
    
    
    
    
    
    
    
    
   }
    
   e
   l
   s
   e
    
   i
   f
    
   (
   t
   r
   a
   p
   p
   e
   d
   E
   x
   c
   e
   p
   t
   i
   o
   n
    
   i
   n
   s
   t
   a
   n
   c
   e
   o
   f
    
   N
   o
   V
   i
   a
   b
   l
   e
   A
   l
   t
   E
   x
   c
   e
   p
   t
   i
   o
   n
   )
    
   {
   \n
    
    
    
    
    
    
    
    
    
    
    
    
   r
   e
   t
   u
   r
   n
    
   "<unexpected: "
    
   +
    
   t
   r
   a
   p
   p
   e
   d
   E
   x
   c
   e
   p
   t
   i
   o
   n
   .
   t
   o
   k
   e
   n
    
   +
   \n
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
   ", resync="
    
   +
    
   g
   e
   t
   T
   e
   x
   t
   (
   )
    
   +
    
   ">"
   ;
   \n
    
    
    
    
    
    
    
    
   }
   \n
    
    
    
    
    
    
    
    
   r
   e
   t
   u
   r
   n
    
   "<error: "
    
   +
    
   g
   e
   t
   T
   e
   x
   t
   (
   )
    
   +
    
   ">"
   ;
   \n
    
    
    
    
   }
   \n
   }
   \n
   \n
   s
   t
   a
   t
   i
   c
    
   c
   l
   a
   s
   s
    
   g
   r
   a
   m
   m
   a
   r
   _
   A
   d
   a
   p
   t
   o
   r
    
   e
   x
   t
   e
   n
   d
   s
    
   C
   o
   m
   m
   o
   n
   T
   r
   e
   e
   A
   d
   a
   p
   t
   o
   r
    
   {
   \n
    
    
    
    
   A
   N
   T
   L
   R
   P
   a
   r
   s
   e
   r
    
   _
   o
   u
   t
   e
   r
   ;
   \n
   \n
    
    
    
    
   p
   u
   b
   l
   i
   c
    
   g
   r
   a
   m
   m
   a
   r
   _
   A
   d
   a
   p
   t
   o
   r
   (
   A
   N
   T
   L
   R
   P
   a
   r
   s
   e
   r
    
   o
   u
   t
   e
   r
   )
    
   {
   \n
    
    
    
    
    
    
    
    
   _
   o
   u
   t
   e
   r
    
   =
    
   o
   u
   t
   e
   r
   ;
   \n
    
    
    
    
   }
   \n
   \n
    
    
    
    
   @
   O
   v
   e
   r
   r
   i
   d
   e
   \n
    
    
    
    
   p
   u
   b
   l
   i
   c
    
   O
   b
   j
   e
   c
   t
    
   c
   r
   e
   a
   t
   e
   (
   T
   o
   k
   e
   n
    
   p
   a
   y
   l
   o
   a
   d
   )
    
   {
   \n
    
    
    
    
    
    
    
    
   G
   r
   a
   m
   m
   a
   r
   A
   S
   T
    
   t
    
   =
    
   n
   e
   w
    
   G
   r
   a
   m
   m
   a
   r
   A
   S
   T
   (
    
   p
   a
   y
   l
   o
   a
   d
    
   )
   ;
   \n
    
    
    
    
    
    
    
    
   i
   f
    
   (
   _
   o
   u
   t
   e
   r
    
   !
   =
    
   n
   u
   l
   l
   )
   \n
    
    
    
    
    
    
    
    
    
    
    
    
   t
   .
   e
   n
   c
   l
   o
   s
   i
   n
   g
   R
   u
   l
   e
   N
   a
   m
   e
    
   =
    
   _
   o
   u
   t
   e
   r
   .
   c
   u
   r
   r
   e
   n
   t
   R
   u
   l
   e
   N
   a
   m
   e
   ;
   \n
    
    
    
    
    
    
    
    
   r
   e
   t
   u
   r
   n
    
   t
   ;
   \n
    
    
    
    
   }
   \n
   \n
    
    
    
    
   @
   O
   v
   e
   r
   r
   i
   d
   e
   \n
    
    
    
    
   p
   u
   b
   l
   i
   c
    
   O
   b
   j
   e
   c
   t
    
   e
   r
   r
   o
   r
   N
   o
   d
   e
   (
   T
   o
   k
   e
   n
   S
   t
   r
   e
   a
   m
    
   i
   n
   p
   u
   t
   ,
    
   T
   o
   k
   e
   n
    
   s
   t
   a
   r
   t
   ,
    
   T
   o
   k
   e
   n
    
   s
   t
   o
   p
   ,
    
   R
   e
   c
   o
   g
   n
   i
   t
   i
   o
   n
   E
   x
   c
   e
   p
   t
   i
   o
   n
    
   e
   )
    
   {
   \n
    
    
    
    
    
    
    
    
   G
   r
   a
   m
   m
   a
   r
   A
   S
   T
    
   t
    
   =
    
   n
   e
   w
    
   G
   r
   a
   m
   m
   a
   r
   A
   S
   T
   E
   r
   r
   o
   r
   N
   o
   d
   e
   (
   i
   n
   p
   u
   t
   ,
    
   s
   t
   a
   r
   t
   ,
    
   s
   t
   o
   p
   ,
    
   e
   )
   ;
   \n
    
    
    
    
    
    
    
    
   i
   f
    
   (
   _
   o
   u
   t
   e
   r
    
   !
   =
    
   n
   u
   l
   l
   )
   \n
    
    
    
    
    
    
    
    
    
    
    
    
   t
   .
   e
   n
   c
   l
   o
   s
   i
   n
   g
   R
   u
   l
   e
   N
   a
   m
   e
    
   =
    
   _
   o
   u
   t
   e
   r
   .
   c
   u
   r
   r
   e
   n
   t
   R
   u
   l
   e
   N
   a
   m
   e
   ;
   \n
    
    
    
    
    
    
    
    
   r
   e
   t
   u
   r
   n
    
   t
   ;
   \n
    
    
    
    
   }
   \n
   }
   \n
   \n
   p
   r
   i
   v
   a
   t
   e
    
   G
   r
   a
   m
   m
   a
   r
    
   g
   r
   a
   m
   m
   a
   r
   ;
   \n
   p
   r
   i
   v
   a
   t
   e
    
   i
   n
   t
    
   g
   r
   a
   m
   m
   a
   r
   T
   y
   p
   e
   ;
   \n
   p
   r
   i
   v
   a
   t
   e
    
   S
   t
   r
   i
   n
   g
    
   f
   i
   l
   e
   N
   a
   m
   e
   ;
   \n
   \n
   p
   u
   b
   l
   i
   c
    
   G
   r
   a
   m
   m
   a
   r
    
   g
   e
   t
   G
   r
   a
   m
   m
   a
   r
   (
   )
    
   {
   \n
    
    
    
    
   r
   e
   t
   u
   r
   n
    
   g
   r
   a
   m
   m
   a
   r
   ;
   \n
   }
   \n
   \n
   p
   u
   b
   l
   i
   c
    
   v
   o
   i
   d
    
   s
   e
   t
   G
   r
   a
   m
   m
   a
   r
   (
   G
   r
   a
   m
   m
   a
   r
    
   v
   a
   l
   u
   e
   )
    
   {
   \n
    
    
    
    
   g
   r
   a
   m
   m
   a
   r
    
   =
    
   v
   a
   l
   u
   e
   ;
   \n
   }
   \n
   \n
   p
   u
   b
   l
   i
   c
    
   i
   n
   t
    
   g
   e
   t
   G
   r
   a
   m
   m
   a
   r
   T
   y
   p
   e
   (
   )
    
   {
   \n
    
    
    
    
   r
   e
   t
   u
   r
   n
    
   g
   r
   a
   m
   m
   a
   r
   T
   y
   p
   e
   ;
   \n
   }
   \n
   \n
   p
   u
   b
   l
   i
   c
    
   v
   o
   i
   d
    
   s
   e
   t
   G
   r
   a
   m
   m
   a
   r
   T
   y
   p
   e
   (
   i
   n
   t
    
   v
   a
   l
   u
   e
   )
    
   {
   \n
    
    
    
    
   g
   r
   a
   m
   m
   a
   r
   T
   y
   p
   e
    
   =
    
   v
   a
   l
   u
   e
   ;
   \n
   }
   \n
   \n
   p
   u
   b
   l
   i
   c
    
   S
   t
   r
   i
   n
   g
    
   g
   e
   t
   F
   i
   l
   e
   N
   a
   m
   e
   (
   )
    
   {
   \n
    
    
    
    
   r
   e
   t
   u
   r
   n
    
   f
   i
   l
   e
   N
   a
   m
   e
   ;
   \n
   }
   \n
   \n
   p
   u
   b
   l
   i
   c
    
   v
   o
   i
   d
    
   s
   e
   t
   F
   i
   l
   e
   N
   a
   m
   e
   (
   S
   t
   r
   i
   n
   g
    
   v
   a
   l
   u
   e
   )
    
   {
   \n
    
    
    
    
   f
   i
   l
   e
   N
   a
   m
   e
    
   =
    
   v
   a
   l
   u
   e
   ;
   \n
   }
   \n
   \n
   p
   r
   i
   v
   a
   t
   e
    
   f
   i
   n
   a
   l
    
   i
   n
   t
    
   L
   A
   (
   i
   n
   t
    
   i
   )
    
   {
    
   r
   e
   t
   u
   r
   n
    
   i
   n
   p
   u
   t
   .
   L
   A
   (
    
   i
    
   )
   ;
    
   }
   \n
   \n
   p
   r
   i
   v
   a
   t
   e
    
   f
   i
   n
   a
   l
    
   T
   o
   k
   e
   n
    
   L
   T
   (
   i
   n
   t
    
   k
   )
    
   {
    
   r
   e
   t
   u
   r
   n
    
   i
   n
   p
   u
   t
   .
   L
   T
   (
    
   k
    
   )
   ;
    
   }
   \n
   \n
   /*partial void createTreeAdaptor(ref ITreeAdaptor adaptor)\n{\n    adaptor = new grammar_Adaptor(this);\n}*/
   \n
   \n
   p
   r
   o
   t
   e
   c
   t
   e
   d
    
   G
   r
   a
   m
   m
   a
   r
   A
   S
   T
    
   s
   e
   t
   T
   o
   B
   l
   o
   c
   k
   W
   i
   t
   h
   S
   e
   t
   (
   G
   r
   a
   m
   m
   a
   r
   A
   S
   T
    
   b
   )
    
   {
   \n
    
    
    
    
   /*\n     * alt = ^(ALT["ALT"] {b} EOA["EOA"])\n     * prefixWithSynpred( alt )\n     * return ^(BLOCK["BLOCK"] {alt} EOB["<end-of-block>"])\n     */
   \n
    
    
    
    
   G
   r
   a
   m
   m
   a
   r
   A
   S
   T
    
   a
   l
   t
    
   =
    
   (
   G
   r
   a
   m
   m
   a
   r
   A
   S
   T
   )
   a
   d
   a
   p
   t
   o
   r
   .
   c
   r
   e
   a
   t
   e
   (
   A
   L
   T
   ,
    
   "ALT"
   )
   ;
   \n
    
    
    
    
   a
   d
   a
   p
   t
   o
   r
   .
   a
   d
   d
   C
   h
   i
   l
   d
   (
   a
   l
   t
   ,
    
   b
   )
   ;
   \n
    
    
    
    
   a
   d
   a
   p
   t
   o
   r
   .
   a
   d
   d
   C
   h
   i
   l
   d
   (
   a
   l
   t
   ,
    
   a
   d
   a
   p
   t
   o
   r
   .
   c
   r
   e
   a
   t
   e
   (
   E
   O
   A
   ,
    
   "<end-of-alt>"
   )
   )
   ;
   \n
   \n
    
    
    
    
   p
   r
   e
   f
   i
   x
   W
   i
   t
   h
   S
   y
   n
   P
   r
   e
   d
   (
   a
   l
   t
   )
   ;
   \n
   \n
    
    
    
    
   G
   r
   a
   m
   m
   a
   r
   A
   S
   T
    
   b
   l
   o
   c
   k
    
   =
    
   (
   G
   r
   a
   m
   m
   a
   r
   A
   S
   T
   )
   a
   d
   a
   p
   t
   o
   r
   .
   c
   r
   e
   a
   t
   e
   (
   B
   L
   O
   C
   K
   ,
    
   b
   .
   g
   e
   t
   T
   o
   k
   e
   n
   (
   )
   ,
    
   "BLOCK"
   )
   ;
   \n
    
    
    
    
   a
   d
   a
   p
   t
   o
   r
   .
   a
   d
   d
   C
   h
   i
   l
   d
   (
   b
   l
   o
   c
   k
   ,
    
   a
   l
   t
   )
   ;
   \n
    
    
    
    
   a
   d
   a
   p
   t
   o
   r
   .
   a
   d
   d
   C
   h
   i
   l
   d
   (
   a
   l
   t
   ,
    
   a
   d
   a
   p
   t
   o
   r
   .
   c
   r
   e
   a
   t
   e
   (
   E
   O
   B
   ,
    
   "<end-of-block>"
   )
   )
   ;
   \n
   \n
    
    
    
    
   r
   e
   t
   u
   r
   n
    
   b
   l
   o
   c
   k
   ;
   \n
   }
   \n
   \n
   /** Create a copy of the alt and make it into a BLOCK; all actions,\n *  labels, tree operators, rewrites are removed.\n */
   \n
   p
   r
   o
   t
   e
   c
   t
   e
   d
    
   G
   r
   a
   m
   m
   a
   r
   A
   S
   T
    
   c
   r
   e
   a
   t
   e
   B
   l
   o
   c
   k
   F
   r
   o
   m
   D
   u
   p
   A
   l
   t
   (
   G
   r
   a
   m
   m
   a
   r
   A
   S
   T
    
   a
   l
   t
   )
    
   {
   \n
    
    
    
    
   /*\n     * ^(BLOCK["BLOCK"] {GrammarAST.dupTreeNoActions(alt)} EOB["<end-of-block>"])\n     */
   \n
    
    
    
    
   G
   r
   a
   m
   m
   a
   r
   A
   S
   T
    
   n
   a
   l
   t
    
   =
    
   G
   r
   a
   m
   m
   a
   r
   A
   S
   T
   .
   d
   u
   p
   T
   r
   e
   e
   N
   o
   A
   c
   t
   i
   o
   n
   s
   (
   a
   l
   t
   ,
    
   n
   u
   l
   l
   )
   ;
   \n
   \n
    
    
    
    
   G
   r
   a
   m
   m
   a
   r
   A
   S
   T
    
   b
   l
   o
   c
   k
    
   =
    
   (
   G
   r
   a
   m
   m
   a
   r
   A
   S
   T
   )
   a
   d
   a
   p
   t
   o
   r
   .
   c
   r
   e
   a
   t
   e
   (
   B
   L
   O
   C
   K
   ,
    
   a
   l
   t
   .
   g
   e
   t
   T
   o
   k
   e
   n
   (
   )
   ,
    
   "BLOCK"
   )
   ;
   \n
    
    
    
    
   a
   d
   a
   p
   t
   o
   r
   .
   a
   d
   d
   C
   h
   i
   l
   d
   (
    
   b
   l
   o
   c
   k
   ,
    
   n
   a
   l
   t
    
   )
   ;
   \n
    
    
    
    
   a
   d
   a
   p
   t
   o
   r
   .
   a
   d
   d
   C
   h
   i
   l
   d
   (
    
   b
   l
   o
   c
   k
   ,
    
   a
   d
   a
   p
   t
   o
   r
   .
   c
   r
   e
   a
   t
   e
   (
    
   E
   O
   B
   ,
    
   "<end-of-block>"
    
   )
    
   )
   ;
   \n
   \n
    
    
    
    
   r
   e
   t
   u
   r
   n
    
   b
   l
   o
   c
   k
   ;
   \n
   }
   \n
   \n
   /** Rewrite alt to have a synpred as first element;\n *  (xxx)=&gt;xxx\n *  but only if they didn't specify one manually.\n */
   \n
   p
   r
   o
   t
   e
   c
   t
   e
   d
    
   v
   o
   i
   d
    
   p
   r
   e
   f
   i
   x
   W
   i
   t
   h
   S
   y
   n
   P
   r
   e
   d
   (
    
   G
   r
   a
   m
   m
   a
   r
   A
   S
   T
    
   a
   l
   t
    
   )
    
   {
   \n
    
    
    
    
   // if they want backtracking and it's not a lexer rule in combined grammar
   \n
    
    
    
    
   S
   t
   r
   i
   n
   g
    
   a
   u
   t
   o
   B
   a
   c
   k
   t
   r
   a
   c
   k
    
   =
    
   (
   S
   t
   r
   i
   n
   g
   )
   g
   r
   a
   m
   m
   a
   r
   .
   g
   e
   t
   B
   l
   o
   c
   k
   O
   p
   t
   i
   o
   n
   (
    
   c
   u
   r
   r
   e
   n
   t
   B
   l
   o
   c
   k
   A
   S
   T
   ,
    
   "backtrack"
    
   )
   ;
   \n
    
    
    
    
   i
   f
    
   (
    
   a
   u
   t
   o
   B
   a
   c
   k
   t
   r
   a
   c
   k
    
   =
   =
    
   n
   u
   l
   l
    
   )
   \n
    
    
    
    
   {
   \n
    
    
    
    
    
    
    
    
   a
   u
   t
   o
   B
   a
   c
   k
   t
   r
   a
   c
   k
    
   =
    
   (
   S
   t
   r
   i
   n
   g
   )
   g
   r
   a
   m
   m
   a
   r
   .
   g
   e
   t
   O
   p
   t
   i
   o
   n
   (
    
   "backtrack"
    
   )
   ;
   \n
    
    
    
    
   }
   \n
    
    
    
    
   i
   f
    
   (
    
   a
   u
   t
   o
   B
   a
   c
   k
   t
   r
   a
   c
   k
    
   !
   =
    
   n
   u
   l
   l
    
   &
   &
    
   a
   u
   t
   o
   B
   a
   c
   k
   t
   r
   a
   c
   k
   .
   e
   q
   u
   a
   l
   s
   (
    
   "true"
    
   )
    
   &
   &
   \n
    
    
    
    
    
    
    
    
    
   !
   (
    
   g
   r
   a
   m
   m
   a
   r
   T
   y
   p
   e
    
   =
   =
    
   G
   r
   a
   m
   m
   a
   r
   .
   C
   O
   M
   B
   I
   N
   E
   D
    
   &
   &
   \n
    
    
    
    
    
    
    
    
    
   R
   u
   l
   e
   .
   g
   e
   t
   R
   u
   l
   e
   T
   y
   p
   e
   (
   c
   u
   r
   r
   e
   n
   t
   R
   u
   l
   e
   N
   a
   m
   e
   )
    
   =
   =
    
   G
   r
   a
   m
   m
   a
   r
   .
   L
   E
   X
   E
   R
   )
    
   &
   &
   \n
    
    
    
    
    
    
    
    
    
   a
   l
   t
   .
   g
   e
   t
   C
   h
   i
   l
   d
   (
    
   0
    
   )
   .
   g
   e
   t
   T
   y
   p
   e
   (
   )
    
   !
   =
    
   S
   Y
   N
   _
   S
   E
   M
   P
   R
   E
   D
    
   )
   \n
    
    
    
    
   {
   \n
    
    
    
    
    
    
    
    
   // duplicate alt and make a synpred block around that dup'd alt
   \n
    
    
    
    
    
    
    
    
   G
   r
   a
   m
   m
   a
   r
   A
   S
   T
    
   s
   y
   n
   p
   r
   e
   d
   B
   l
   o
   c
   k
   A
   S
   T
    
   =
    
   c
   r
   e
   a
   t
   e
   B
   l
   o
   c
   k
   F
   r
   o
   m
   D
   u
   p
   A
   l
   t
   (
    
   a
   l
   t
    
   )
   ;
   \n
   \n
    
    
    
    
    
    
    
    
   // Create a BACKTRACK_SEMPRED node as if user had typed this in
   \n
    
    
    
    
    
    
    
    
   // Effectively we replace (xxx)=>xxx with {synpredxxx}? xxx
   \n
    
    
    
    
    
    
    
    
   G
   r
   a
   m
   m
   a
   r
   A
   S
   T
    
   s
   y
   n
   p
   r
   e
   d
   A
   S
   T
    
   =
    
   c
   r
   e
   a
   t
   e
   S
   y
   n
   S
   e
   m
   P
   r
   e
   d
   F
   r
   o
   m
   B
   l
   o
   c
   k
   (
    
   s
   y
   n
   p
   r
   e
   d
   B
   l
   o
   c
   k
   A
   S
   T
   ,
   \n
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
   B
   A
   C
   K
   T
   R
   A
   C
   K
   _
   S
   E
   M
   P
   R
   E
   D
    
   )
   ;
   \n
   \n
    
    
    
    
    
    
    
    
   // insert BACKTRACK_SEMPRED as first element of alt
   \n
    
    
    
    
    
    
    
    
   //synpredAST.getLastSibling().setNextSibling( alt.getFirstChild() );
   \n
    
    
    
    
    
    
    
    
   //synpredAST.addChild( alt.getFirstChild() );
   \n
    
    
    
    
    
    
    
    
   //alt.setFirstChild( synpredAST );
   \n
    
    
    
    
    
    
    
    
   G
   r
   a
   m
   m
   a
   r
   A
   S
   T
   [
   ]
    
   c
   h
   i
   l
   d
   r
   e
   n
    
   =
    
   a
   l
   t
   .
   g
   e
   t
   C
   h
   i
   l
   d
   r
   e
   n
   A
   s
   A
   r
   r
   a
   y
   (
   )
   ;
   \n
    
    
    
    
    
    
    
    
   a
   d
   a
   p
   t
   o
   r
   .
   s
   e
   t
   C
   h
   i
   l
   d
   (
    
   a
   l
   t
   ,
    
   0
   ,
    
   s
   y
   n
   p
   r
   e
   d
   A
   S
   T
    
   )
   ;
   \n
    
    
    
    
    
    
    
    
   f
   o
   r
    
   (
    
   i
   n
   t
    
   i
    
   =
    
   0
   ;
    
   i
    
   <
    
   c
   h
   i
   l
   d
   r
   e
   n
   .
   l
   e
   n
   g
   t
   h
   ;
    
   i
   +
   +
    
   )
   \n
    
    
    
    
    
    
    
    
   {
   \n
    
    
    
    
    
    
    
    
    
    
    
    
   i
   f
    
   (
    
   i
    
   <
    
   c
   h
   i
   l
   d
   r
   e
   n
   .
   l
   e
   n
   g
   t
   h
    
   -
    
   1
    
   )
   \n
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
   a
   d
   a
   p
   t
   o
   r
   .
   s
   e
   t
   C
   h
   i
   l
   d
   (
    
   a
   l
   t
   ,
    
   i
    
   +
    
   1
   ,
    
   c
   h
   i
   l
   d
   r
   e
   n
   [
   i
   ]
    
   )
   ;
   \n
    
    
    
    
    
    
    
    
    
    
    
    
   e
   l
   s
   e
   \n
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
   a
   d
   a
   p
   t
   o
   r
   .
   a
   d
   d
   C
   h
   i
   l
   d
   (
    
   a
   l
   t
   ,
    
   c
   h
   i
   l
   d
   r
   e
   n
   [
   i
   ]
    
   )
   ;
   \n
    
    
    
    
    
    
    
    
   }
   \n
    
    
    
    
   }
   \n
   }
   \n
   \n
   p
   r
   o
   t
   e
   c
   t
   e
   d
    
   G
   r
   a
   m
   m
   a
   r
   A
   S
   T
    
   c
   r
   e
   a
   t
   e
   S
   y
   n
   S
   e
   m
   P
   r
   e
   d
   F
   r
   o
   m
   B
   l
   o
   c
   k
   (
    
   G
   r
   a
   m
   m
   a
   r
   A
   S
   T
    
   s
   y
   n
   p
   r
   e
   d
   B
   l
   o
   c
   k
   A
   S
   T
   ,
    
   i
   n
   t
    
   s
   y
   n
   p
   r
   e
   d
   T
   o
   k
   e
   n
   T
   y
   p
   e
    
   )
    
   {
   \n
    
    
    
    
   // add grammar fragment to a list so we can make fake rules for them later.
   \n
    
    
    
    
   S
   t
   r
   i
   n
   g
    
   p
   r
   e
   d
   N
   a
   m
   e
    
   =
    
   g
   r
   a
   m
   m
   a
   r
   .
   d
   e
   f
   i
   n
   e
   S
   y
   n
   t
   a
   c
   t
   i
   c
   P
   r
   e
   d
   i
   c
   a
   t
   e
   (
    
   s
   y
   n
   p
   r
   e
   d
   B
   l
   o
   c
   k
   A
   S
   T
   ,
    
   c
   u
   r
   r
   e
   n
   t
   R
   u
   l
   e
   N
   a
   m
   e
    
   )
   ;
   \n
    
    
    
    
   // convert (alpha)=> into {synpredN}? where N is some pred count
   \n
    
    
    
    
   // during code gen we convert to function call with templates
   \n
    
    
    
    
   S
   t
   r
   i
   n
   g
    
   s
   y
   n
   p
   r
   e
   d
   i
   n
   v
   o
   k
   e
    
   =
    
   p
   r
   e
   d
   N
   a
   m
   e
   ;
   \n
    
    
    
    
   G
   r
   a
   m
   m
   a
   r
   A
   S
   T
    
   p
    
   =
    
   (
   G
   r
   a
   m
   m
   a
   r
   A
   S
   T
   )
   a
   d
   a
   p
   t
   o
   r
   .
   c
   r
   e
   a
   t
   e
   (
    
   s
   y
   n
   p
   r
   e
   d
   T
   o
   k
   e
   n
   T
   y
   p
   e
   ,
    
   s
   y
   n
   p
   r
   e
   d
   i
   n
   v
   o
   k
   e
    
   )
   ;
   \n
    
    
    
    
   // track how many decisions have synpreds
   \n
    
    
    
    
   g
   r
   a
   m
   m
   a
   r
   .
   b
   l
   o
   c
   k
   s
   W
   i
   t
   h
   S
   y
   n
   P
   r
   e
   d
   s
   .
   a
   d
   d
   (
    
   c
   u
   r
   r
   e
   n
   t
   B
   l
   o
   c
   k
   A
   S
   T
    
   )
   ;
   \n
    
    
    
    
   r
   e
   t
   u
   r
   n
    
   p
   ;
   \n
   }
   \n
   \n
   p
   u
   b
   l
   i
   c
    
   s
   t
   a
   t
   i
   c
    
   G
   r
   a
   m
   m
   a
   r
   A
   S
   T
    
   c
   r
   e
   a
   t
   e
   S
   i
   m
   p
   l
   e
   R
   u
   l
   e
   A
   S
   T
   (
    
   S
   t
   r
   i
   n
   g
    
   n
   a
   m
   e
   ,
    
   G
   r
   a
   m
   m
   a
   r
   A
   S
   T
    
   b
   l
   o
   c
   k
   ,
    
   b
   o
   o
   l
   e
   a
   n
    
   f
   r
   a
   g
   m
   e
   n
   t
    
   )
    
   {
   \n
    
    
    
    
   T
   r
   e
   e
   A
   d
   a
   p
   t
   o
   r
    
   a
   d
   a
   p
   t
   o
   r
    
   =
    
   n
   e
   w
    
   g
   r
   a
   m
   m
   a
   r
   _
   A
   d
   a
   p
   t
   o
   r
   (
   n
   u
   l
   l
   )
   ;
   \n
   \n
    
    
    
    
   G
   r
   a
   m
   m
   a
   r
   A
   S
   T
    
   m
   o
   d
   i
   f
   i
   e
   r
    
   =
    
   n
   u
   l
   l
   ;
   \n
    
    
    
    
   i
   f
    
   (
    
   f
   r
   a
   g
   m
   e
   n
   t
    
   )
   \n
    
    
    
    
   {
   \n
    
    
    
    
    
    
    
    
   m
   o
   d
   i
   f
   i
   e
   r
    
   =
    
   (
   G
   r
   a
   m
   m
   a
   r
   A
   S
   T
   )
   a
   d
   a
   p
   t
   o
   r
   .
   c
   r
   e
   a
   t
   e
   (
    
   F
   R
   A
   G
   M
   E
   N
   T
   ,
    
   "fragment"
    
   )
   ;
   \n
    
    
    
    
   }
   \n
   \n
    
    
    
    
   /*\n     * EOBAST = block.getLastChild()\n     * ^(RULE[block,"rule"] ID["name"] {modifier} ARG["ARG"] RET["RET"] SCOPE["scope"] {block} EOR[EOBAST,"<end-of-rule>"])\n     */
   \n
    
    
    
    
   G
   r
   a
   m
   m
   a
   r
   A
   S
   T
    
   r
   u
   l
   e
    
   =
    
   (
   G
   r
   a
   m
   m
   a
   r
   A
   S
   T
   )
   a
   d
   a
   p
   t
   o
   r
   .
   c
   r
   e
   a
   t
   e
   (
    
   R
   U
   L
   E
   ,
    
   b
   l
   o
   c
   k
   .
   g
   e
   t
   T
   o
   k
   e
   n
   (
   )
   ,
    
   "rule"
    
   )
   ;
   \n
   \n
    
    
    
    
   a
   d
   a
   p
   t
   o
   r
   .
   a
   d
   d
   C
   h
   i
   l
   d
   (
    
   r
   u
   l
   e
   ,
    
   a
   d
   a
   p
   t
   o
   r
   .
   c
   r
   e
   a
   t
   e
   (
    
   I
   D
   ,
    
   n
   a
   m
   e
    
   )
    
   )
   ;
   \n
    
    
    
    
   i
   f
    
   (
    
   m
   o
   d
   i
   f
   i
   e
   r
    
   !
   =
    
   n
   u
   l
   l
    
   )
   \n
    
    
    
    
    
    
    
    
   a
   d
   a
   p
   t
   o
   r
   .
   a
   d
   d
   C
   h
   i
   l
   d
   (
    
   r
   u
   l
   e
   ,
    
   m
   o
   d
   i
   f
   i
   e
   r
    
   )
   ;
   \n
    
    
    
    
   a
   d
   a
   p
   t
   o
   r
   .
   a
   d
   d
   C
   h
   i
   l
   d
   (
    
   r
   u
   l
   e
   ,
    
   a
   d
   a
   p
   t
   o
   r
   .
   c
   r
   e
   a
   t
   e
   (
    
   A
   R
   G
   ,
    
   "ARG"
    
   )
    
   )
   ;
   \n
    
    
    
    
   a
   d
   a
   p
   t
   o
   r
   .
   a
   d
   d
   C
   h
   i
   l
   d
   (
    
   r
   u
   l
   e
   ,
    
   a
   d
   a
   p
   t
   o
   r
   .
   c
   r
   e
   a
   t
   e
   (
    
   R
   E
   T
   ,
    
   "RET"
    
   )
    
   )
   ;
   \n
    
    
    
    
   a
   d
   a
   p
   t
   o
   r
   .
   a
   d
   d
   C
   h
   i
   l
   d
   (
    
   r
   u
   l
   e
   ,
    
   a
   d
   a
   p
   t
   o
   r
   .
   c
   r
   e
   a
   t
   e
   (
    
   S
   C
   O
   P
   E
   ,
    
   "scope"
    
   )
    
   )
   ;
   \n
    
    
    
    
   a
   d
   a
   p
   t
   o
   r
   .
   a
   d
   d
   C
   h
   i
   l
   d
   (
    
   r
   u
   l
   e
   ,
    
   b
   l
   o
   c
   k
    
   )
   ;
   \n
    
    
    
    
   a
   d
   a
   p
   t
   o
   r
   .
   a
   d
   d
   C
   h
   i
   l
   d
   (
    
   r
   u
   l
   e
   ,
    
   a
   d
   a
   p
   t
   o
   r
   .
   c
   r
   e
   a
   t
   e
   (
    
   E
   O
   R
   ,
    
   b
   l
   o
   c
   k
   .
   g
   e
   t
   L
   a
   s
   t
   C
   h
   i
   l
   d
   (
   )
   .
   g
   e
   t
   T
   o
   k
   e
   n
   (
   )
   ,
    
   "<end-of-rule>"
    
   )
    
   )
   ;
   \n
   \n
    
    
    
    
   r
   e
   t
   u
   r
   n
    
   r
   u
   l
   e
   ;
   \n
   }
   \n
   \n
   @
   O
   v
   e
   r
   r
   i
   d
   e
   \n
   p
   u
   b
   l
   i
   c
    
   v
   o
   i
   d
    
   r
   e
   p
   o
   r
   t
   E
   r
   r
   o
   r
   (
   R
   e
   c
   o
   g
   n
   i
   t
   i
   o
   n
   E
   x
   c
   e
   p
   t
   i
   o
   n
    
   e
   x
   )
   \n
   {
   \n
    
    
    
    
   //Token token = null;
   \n
    
    
    
    
   //try
   \n
    
    
    
    
   //{
   \n
    
    
    
    
   //    token = LT( 1 );
   \n
    
    
    
    
   //}
   \n
    
    
    
    
   //catch ( TokenStreamException tse )
   \n
    
    
    
    
   //{
   \n
    
    
    
    
   //    ErrorManager.internalError( "can't get token???", tse );
   \n
    
    
    
    
   //}
   \n
    
    
    
    
   T
   o
   k
   e
   n
    
   t
   o
   k
   e
   n
    
   =
    
   e
   x
   .
   t
   o
   k
   e
   n
   ;
   \n
    
    
    
    
   E
   r
   r
   o
   r
   M
   a
   n
   a
   g
   e
   r
   .
   s
   y
   n
   t
   a
   x
   E
   r
   r
   o
   r
   (
   \n
    
    
    
    
    
    
    
    
   E
   r
   r
   o
   r
   M
   a
   n
   a
   g
   e
   r
   .
   M
   S
   G
   _
   S
   Y
   N
   T
   A
   X
   _
   E
   R
   R
   O
   R
   ,
   \n
    
    
    
    
    
    
    
    
   g
   r
   a
   m
   m
   a
   r
   ,
   \n
    
    
    
    
    
    
    
    
   t
   o
   k
   e
   n
   ,
   \n
    
    
    
    
    
    
    
    
   "antlr: "
    
   +
    
   e
   x
   .
   t
   o
   S
   t
   r
   i
   n
   g
   (
   )
   ,
   \n
    
    
    
    
    
    
    
    
   e
   x
    
   )
   ;
   \n
   }
   \n
   \n
   p
   u
   b
   l
   i
   c
    
   v
   o
   i
   d
    
   c
   l
   e
   a
   n
   u
   p
   (
    
   G
   r
   a
   m
   m
   a
   r
   A
   S
   T
    
   r
   o
   o
   t
    
   )
   \n
   {
   \n
    
    
    
    
   i
   f
    
   (
    
   g
   r
   a
   m
   m
   a
   r
   T
   y
   p
   e
    
   =
   =
    
   G
   r
   a
   m
   m
   a
   r
   .
   L
   E
   X
   E
   R
    
   )
   \n
    
    
    
    
   {
   \n
    
    
    
    
    
    
    
    
   S
   t
   r
   i
   n
   g
    
   f
   i
   l
   t
   e
   r
    
   =
    
   (
   S
   t
   r
   i
   n
   g
   )
   g
   r
   a
   m
   m
   a
   r
   .
   g
   e
   t
   O
   p
   t
   i
   o
   n
   (
    
   "filter"
    
   )
   ;
   \n
    
    
    
    
    
    
    
    
   G
   r
   a
   m
   m
   a
   r
   A
   S
   T
    
   t
   o
   k
   e
   n
   s
   R
   u
   l
   e
   A
   S
   T
    
   =
   \n
    
    
    
    
    
    
    
    
    
    
    
    
   g
   r
   a
   m
   m
   a
   r
   .
   a
   d
   d
   A
   r
   t
   i
   f
   i
   c
   i
   a
   l
   M
   a
   t
   c
   h
   T
   o
   k
   e
   n
   s
   R
   u
   l
   e
   (
   \n
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
   r
   o
   o
   t
   ,
   \n
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
   g
   r
   a
   m
   m
   a
   r
   .
   l
   e
   x
   e
   r
   R
   u
   l
   e
   N
   a
   m
   e
   s
   I
   n
   C
   o
   m
   b
   i
   n
   e
   d
   ,
   \n
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
   g
   r
   a
   m
   m
   a
   r
   .
   g
   e
   t
   D
   e
   l
   e
   g
   a
   t
   e
   N
   a
   m
   e
   s
   (
   )
   ,
   \n
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
   f
   i
   l
   t
   e
   r
    
   !
   =
    
   n
   u
   l
   l
    
   &
   &
    
   f
   i
   l
   t
   e
   r
   .
   e
   q
   u
   a
   l
   s
   (
    
   "true"
    
   )
    
   )
   ;
   \n
    
    
    
    
   }
   \n
   }
   \n
   }
 rule_
  public
  id_
   grammar_
  !
  argActionBlock
   [
   G
   r
   a
   m
   m
   a
   r
    
   g
   ]
  ruleAction
   @
   id_
    init
   actionBlock
    {
    \n
     
     
     
     
    t
    h
    i
    s
    .
    g
    r
    a
    m
    m
    a
    r
     
    =
     
    g
    ;
    \n
     
     
     
     
    M
    a
    p
    <
    S
    t
    r
    i
    n
    g
    ,
     
    O
    b
    j
    e
    c
    t
    >
     
    o
    p
    t
    s
    ;
    \n
    }
  ruleAction
   @
   id_
    after
   actionBlock
    {
    \n
     
     
     
     
    c
    l
    e
    a
    n
    u
    p
    (
     
    $
    t
    r
    e
    e
     
    )
    ;
    \n
    }
  :
  altList
   alternative
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             ACTION
        rewrite
        )
       ?
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           id_
            cmt
           =
           atom
            terminal_
             DOC_COMMENT
        rewrite
        )
       ?
    element
     elementNoOptionSpec
      id_
       gr
      =
      atom
       grammarType
    element
     elementNoOptionSpec
      id_
       gid
      =
      atom
       id
    element
     elementNoOptionSpec
      actionBlock
       {
       g
       r
       a
       m
       m
       a
       r
       .
       s
       e
       t
       N
       a
       m
       e
       (
       $
       g
       i
       d
       .
       t
       e
       x
       t
       )
       ;
       }
    element
     elementNoOptionSpec
      atom
       terminal_
        SEMI
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           atom
            optionsSpec
         element
          elementNoOptionSpec
           actionBlock
            {
            o
            p
            t
            s
             
            =
             
            $
            o
            p
            t
            i
            o
            n
            s
            S
            p
            e
            c
            .
            o
            p
            t
            s
            ;
             
            g
            r
            a
            m
            m
            a
            r
            .
            s
            e
            t
            O
            p
            t
            i
            o
            n
            s
            (
            o
            p
            t
            s
            ,
             
            $
            o
            p
            t
            i
            o
            n
            s
            S
            p
            e
            c
            .
            s
            t
            a
            r
            t
            )
            ;
            }
        rewrite
        )
       ?
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           id_
            ig
           =
           atom
            delegateGrammars
        rewrite
        )
       ?
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           id_
            ts
           =
           atom
            tokensSpec
        rewrite
        )
       ?
    element
     elementNoOptionSpec
      id_
       scopes
      =
      atom
       attrScopes
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           id_
            a
           =
           atom
            actions
        rewrite
        )
       ?
    element
     elementNoOptionSpec
      id_
       r
      =
      atom
       rules
    element
     elementNoOptionSpec
      atom
       terminal_
        EOF
   rewrite
    ->
    rewrite_alternative
     rewrite_tree_alternative
      rewrite_tree_element
       rewrite_tree
        ^(
        rewrite_tree_atom
         $
         id_
          gr
        rewrite_tree_element
         rewrite_tree_atom
          $
          id_
           gid
        rewrite_tree_element
         rewrite_tree_atom
          $
          id_
           cmt
         ebnfSuffix
          ?
        rewrite_tree_element
         rewrite_tree_atom
          optionsSpec
         ebnfSuffix
          ?
        rewrite_tree_element
         rewrite_tree_atom
          $
          id_
           ig
         ebnfSuffix
          ?
        rewrite_tree_element
         rewrite_tree_atom
          $
          id_
           ts
         ebnfSuffix
          ?
        rewrite_tree_element
         rewrite_tree_atom
          $
          id_
           scopes
         ebnfSuffix
          ?
        rewrite_tree_element
         rewrite_tree_atom
          $
          id_
           a
         ebnfSuffix
          ?
        rewrite_tree_element
         rewrite_tree_atom
          $
          id_
           r
        )
  ;
 rule_
  id_
   grammarType
  :
  altList
   alternative
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             'lexer'
         element
          elementNoOptionSpec
           id_
            gr
           =
           atom
            terminal_
             'grammar'
         element
          elementNoOptionSpec
           actionBlock
            {
            g
            r
            a
            m
            m
            a
            r
            T
            y
            p
            e
            =
            G
            r
            a
            m
            m
            a
            r
            .
            L
            E
            X
            E
            R
            ;
             
            g
            r
            a
            m
            m
            a
            r
            .
            t
            y
            p
            e
             
            =
             
            G
            r
            a
            m
            m
            a
            r
            .
            L
            E
            X
            E
            R
            ;
            }
        rewrite
         ->
         rewrite_alternative
          rewrite_tree_alternative
           rewrite_tree_element
            rewrite_tree_atom
             LEXER_GRAMMAR
             argActionBlock
              [
              $
              g
              r
              ]
        |
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             'parser'
         element
          elementNoOptionSpec
           id_
            gr
           =
           atom
            terminal_
             'grammar'
         element
          elementNoOptionSpec
           actionBlock
            {
            g
            r
            a
            m
            m
            a
            r
            T
            y
            p
            e
            =
            G
            r
            a
            m
            m
            a
            r
            .
            P
            A
            R
            S
            E
            R
            ;
             
            g
            r
            a
            m
            m
            a
            r
            .
            t
            y
            p
            e
             
            =
             
            G
            r
            a
            m
            m
            a
            r
            .
            P
            A
            R
            S
            E
            R
            ;
            }
        rewrite
         ->
         rewrite_alternative
          rewrite_tree_alternative
           rewrite_tree_element
            rewrite_tree_atom
             PARSER_GRAMMAR
             argActionBlock
              [
              $
              g
              r
              ]
        |
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             'tree'
         element
          elementNoOptionSpec
           id_
            gr
           =
           atom
            terminal_
             'grammar'
         element
          elementNoOptionSpec
           actionBlock
            {
            g
            r
            a
            m
            m
            a
            r
            T
            y
            p
            e
            =
            G
            r
            a
            m
            m
            a
            r
            .
            T
            R
            E
            E
            _
            P
            A
            R
            S
            E
            R
            ;
             
            g
            r
            a
            m
            m
            a
            r
            .
            t
            y
            p
            e
             
            =
             
            G
            r
            a
            m
            m
            a
            r
            .
            T
            R
            E
            E
            _
            P
            A
            R
            S
            E
            R
            ;
            }
        rewrite
         ->
         rewrite_alternative
          rewrite_tree_alternative
           rewrite_tree_element
            rewrite_tree_atom
             TREE_GRAMMAR
             argActionBlock
              [
              $
              g
              r
              ]
        |
        alternative
         element
          elementNoOptionSpec
           id_
            gr
           =
           atom
            terminal_
             'grammar'
         element
          elementNoOptionSpec
           actionBlock
            {
            g
            r
            a
            m
            m
            a
            r
            T
            y
            p
            e
            =
            G
            r
            a
            m
            m
            a
            r
            .
            C
            O
            M
            B
            I
            N
            E
            D
            ;
             
            g
            r
            a
            m
            m
            a
            r
            .
            t
            y
            p
            e
             
            =
             
            G
            r
            a
            m
            m
            a
            r
            .
            C
            O
            M
            B
            I
            N
            E
            D
            ;
            }
        rewrite
         ->
         rewrite_alternative
          rewrite_tree_alternative
           rewrite_tree_element
            rewrite_tree_atom
             COMBINED_GRAMMAR
             argActionBlock
              [
              $
              g
              r
              ]
        )
   rewrite
  ;
 rule_
  id_
   actions
  :
  altList
   alternative
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           atom
            action
        rewrite
        )
       +
   rewrite
  ;
 rule_
  id_
   action
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        AMPERSAND
        ^
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           atom
            actionScopeName
         element
          elementNoOptionSpec
           atom
            terminal_
             COLON
             !
         element
          elementNoOptionSpec
           atom
            terminal_
             COLON
             !
        rewrite
        )
       ?
    element
     elementNoOptionSpec
      atom
       id
    element
     elementNoOptionSpec
      atom
       terminal_
        ACTION
   rewrite
  ;
 rule_
  id_
   actionScopeName
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       id
   rewrite
   |
   alternative
    element
     elementNoOptionSpec
      id_
       l
      =
      atom
       terminal_
        'lexer'
   rewrite
    ->
    rewrite_alternative
     rewrite_tree_alternative
      rewrite_tree_element
       rewrite_tree_atom
        ID
        argActionBlock
         [
         $
         l
         ]
   |
   alternative
    element
     elementNoOptionSpec
      id_
       p
      =
      atom
       terminal_
        'parser'
   rewrite
    ->
    rewrite_alternative
     rewrite_tree_alternative
      rewrite_tree_element
       rewrite_tree_atom
        ID
        argActionBlock
         [
         $
         p
         ]
  ;
 rule_
  id_
   optionsSpec
  returns
  argActionBlock
   [
   M
   a
   p
   <
   S
   t
   r
   i
   n
   g
   ,
    
   O
   b
   j
   e
   c
   t
   >
    
   o
   p
   t
   s
   =
   n
   e
   w
    
   H
   a
   s
   h
   M
   a
   p
   <
   S
   t
   r
   i
   n
   g
   ,
    
   O
   b
   j
   e
   c
   t
   >
   (
   )
   ]
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        OPTIONS
        ^
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           atom
            option
            argActionBlock
             [
             $
             o
             p
             t
             s
             ]
         element
          elementNoOptionSpec
           atom
            terminal_
             SEMI
             !
        rewrite
        )
       +
    element
     elementNoOptionSpec
      atom
       terminal_
        RCURLY
        !
   rewrite
  ;
 rule_
  id_
   option
  argActionBlock
   [
   M
   a
   p
   <
   S
   t
   r
   i
   n
   g
   ,
    
   O
   b
   j
   e
   c
   t
   >
    
   o
   p
   t
   s
   ]
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       id
    element
     elementNoOptionSpec
      atom
       terminal_
        ASSIGN
        ^
    element
     elementNoOptionSpec
      atom
       optionValue
    element
     elementNoOptionSpec
      actionBlock
       {
       \n
        
        
        
        
        
        
        
        
        
        
        
        
       $
       o
       p
       t
       s
       .
       p
       u
       t
       (
       $
       i
       d
       .
       t
       e
       x
       t
       ,
        
       $
       o
       p
       t
       i
       o
       n
       V
       a
       l
       u
       e
       .
       v
       a
       l
       u
       e
       )
       ;
       \n
        
        
        
        
        
        
        
        
       }
   rewrite
  ;
 rule_
  id_
   optionValue
  returns
  argActionBlock
   [
   O
   b
   j
   e
   c
   t
    
   v
   a
   l
   u
   e
    
   =
    
   n
   u
   l
   l
   ]
  :
  altList
   alternative
    element
     elementNoOptionSpec
      id_
       x
      =
      atom
       id
    element
     elementNoOptionSpec
      actionBlock
       {
       $
       v
       a
       l
       u
       e
        
       =
        
       $
       x
       .
       t
       e
       x
       t
       ;
       }
   rewrite
   |
   alternative
    element
     elementNoOptionSpec
      id_
       s
      =
      atom
       terminal_
        STRING_LITERAL
    element
     elementNoOptionSpec
      actionBlock
       {
       S
       t
       r
       i
       n
       g
        
       v
       s
        
       =
        
       $
       s
       .
       t
       e
       x
       t
       ;
       \n
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
       // remove the quotes:
       \n
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
       $
       v
       a
       l
       u
       e
       =
       v
       s
       .
       s
       u
       b
       s
       t
       r
       i
       n
       g
       (
       1
       ,
       v
       s
       .
       l
       e
       n
       g
       t
       h
       (
       )
       -
       1
       )
       ;
       }
   rewrite
   |
   alternative
    element
     elementNoOptionSpec
      id_
       c
      =
      atom
       terminal_
        CHAR_LITERAL
    element
     elementNoOptionSpec
      actionBlock
       {
       S
       t
       r
       i
       n
       g
        
       v
       s
        
       =
        
       $
       c
       .
       t
       e
       x
       t
       ;
       \n
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
       // remove the quotes:
       \n
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
       $
       v
       a
       l
       u
       e
       =
       v
       s
       .
       s
       u
       b
       s
       t
       r
       i
       n
       g
       (
       1
       ,
       v
       s
       .
       l
       e
       n
       g
       t
       h
       (
       )
       -
       1
       )
       ;
       }
   rewrite
   |
   alternative
    element
     elementNoOptionSpec
      id_
       i
      =
      atom
       terminal_
        INT
    element
     elementNoOptionSpec
      actionBlock
       {
       $
       v
       a
       l
       u
       e
        
       =
        
       I
       n
       t
       e
       g
       e
       r
       .
       p
       a
       r
       s
       e
       I
       n
       t
       (
       $
       i
       .
       t
       e
       x
       t
       )
       ;
       }
   rewrite
   |
   alternative
    element
     elementNoOptionSpec
      id_
       ss
      =
      atom
       terminal_
        STAR
    element
     elementNoOptionSpec
      actionBlock
       {
       $
       v
       a
       l
       u
       e
        
       =
        
       "*"
       ;
       }
   rewrite
    ->
    rewrite_alternative
     rewrite_tree_alternative
      rewrite_tree_element
       rewrite_tree_atom
        STRING_LITERAL
        argActionBlock
         [
         $
         s
         s
         ]
  ;
 rule_
  id_
   delegateGrammars
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        'import'
        ^
    element
     elementNoOptionSpec
      atom
       delegateGrammar
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             COMMA
             !
         element
          elementNoOptionSpec
           atom
            delegateGrammar
        rewrite
        )
       *
    element
     elementNoOptionSpec
      atom
       terminal_
        SEMI
        !
   rewrite
  ;
 rule_
  id_
   delegateGrammar
  :
  altList
   alternative
    element
     elementNoOptionSpec
      id_
       lab
      =
      atom
       id
    element
     elementNoOptionSpec
      atom
       terminal_
        ASSIGN
        ^
    element
     elementNoOptionSpec
      id_
       g
      =
      atom
       id
    element
     elementNoOptionSpec
      actionBlock
       {
       g
       r
       a
       m
       m
       a
       r
       .
       i
       m
       p
       o
       r
       t
       G
       r
       a
       m
       m
       a
       r
       (
       $
       g
       .
       t
       r
       e
       e
       ,
        
       $
       l
       a
       b
       .
       t
       e
       x
       t
       )
       ;
       }
   rewrite
   |
   alternative
    element
     elementNoOptionSpec
      id_
       g2
      =
      atom
       id
    element
     elementNoOptionSpec
      actionBlock
       {
       g
       r
       a
       m
       m
       a
       r
       .
       i
       m
       p
       o
       r
       t
       G
       r
       a
       m
       m
       a
       r
       (
       $
       g
       2
       .
       t
       r
       e
       e
       ,
       n
       u
       l
       l
       )
       ;
       }
   rewrite
  ;
 rule_
  id_
   tokensSpec
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        TOKENS
        ^
    element
     elementNoOptionSpec
      atom
       tokenSpec
      ebnfSuffix
       *
    element
     elementNoOptionSpec
      atom
       terminal_
        RCURLY
        !
   rewrite
  ;
 rule_
  id_
   tokenSpec
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        TOKEN_REF
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             ASSIGN
             ^
         element
          elementNoOptionSpec
           ebnf
            block
             (
             alternative
              element
               elementNoOptionSpec
                atom
                 terminal_
                  STRING_LITERAL
             rewrite
             |
             alternative
              element
               elementNoOptionSpec
                atom
                 terminal_
                  CHAR_LITERAL
             rewrite
             )
        rewrite
        )
       ?
    element
     elementNoOptionSpec
      atom
       terminal_
        SEMI
        !
   rewrite
  ;
 rule_
  id_
   attrScopes
  :
  altList
   alternative
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           atom
            attrScope
        rewrite
        )
       *
   rewrite
  ;
 rule_
  id_
   attrScope
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        'scope'
        ^
    element
     elementNoOptionSpec
      atom
       id
    element
     elementNoOptionSpec
      atom
       ruleActions
      ebnfSuffix
       ?
    element
     elementNoOptionSpec
      atom
       terminal_
        ACTION
   rewrite
  ;
 rule_
  id_
   rules
  :
  altList
   alternative
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           atom
            rule
        rewrite
        )
       +
   rewrite
  ;
 rule_
  public
  id_
   rule
  ruleAction
   @
   id_
    init
   actionBlock
    {
    \n
     
     
     
     
    G
    r
    a
    m
    m
    a
    r
    A
    S
    T
     
    e
    o
    b
    =
    n
    u
    l
    l
    ;
    \n
     
     
     
     
    C
    o
    m
    m
    o
    n
    T
    o
    k
    e
    n
     
    s
    t
    a
    r
    t
     
    =
     
    (
    C
    o
    m
    m
    o
    n
    T
    o
    k
    e
    n
    )
    L
    T
    (
    1
    )
    ;
    \n
     
     
     
     
    i
    n
    t
     
    s
    t
    a
    r
    t
    L
    i
    n
    e
     
    =
     
    L
    T
    (
    1
    )
    .
    g
    e
    t
    L
    i
    n
    e
    (
    )
    ;
    \n
    }
  :
  altList
   alternative
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           ebnf
            block
             (
             alternative
              element
               elementNoOptionSpec
                id_
                 d
                =
                atom
                 terminal_
                  DOC_COMMENT
             rewrite
             )
            ?
         element
          elementNoOptionSpec
           ebnf
            block
             (
             alternative
              element
               elementNoOptionSpec
                id_
                 p1
                =
                atom
                 terminal_
                  'protected'
             rewrite
             |
             alternative
              element
               elementNoOptionSpec
                id_
                 p2
                =
                atom
                 terminal_
                  'public'
             rewrite
             |
             alternative
              element
               elementNoOptionSpec
                id_
                 p3
                =
                atom
                 terminal_
                  'private'
             rewrite
             |
             alternative
              element
               elementNoOptionSpec
                id_
                 p4
                =
                atom
                 terminal_
                  'fragment'
             rewrite
             )
            ?
         element
          elementNoOptionSpec
           id_
            ruleName
           =
           atom
            id
         element
          elementNoOptionSpec
           actionBlock
            {
            \n
             
             
             
             
             
             
             
             
             
             
             
             
            c
            u
            r
            r
            e
            n
            t
            R
            u
            l
            e
            N
            a
            m
            e
            =
            $
            r
            u
            l
            e
            N
            a
            m
            e
            .
            t
            e
            x
            t
            ;
            \n
             
             
             
             
             
             
             
             
             
             
             
             
            i
            f
             
            (
             
            g
            r
            a
            m
            m
            a
            r
            T
            y
            p
            e
            =
            =
            G
            r
            a
            m
            m
            a
            r
            .
            L
            E
            X
            E
            R
             
            &
            &
             
            $
            p
            4
            =
            =
            n
            u
            l
            l
             
            )
            \n
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
            g
            r
            a
            m
            m
            a
            r
            .
            l
            e
            x
            e
            r
            R
            u
            l
            e
            N
            a
            m
            e
            s
            I
            n
            C
            o
            m
            b
            i
            n
            e
            d
            .
            a
            d
            d
            (
            c
            u
            r
            r
            e
            n
            t
            R
            u
            l
            e
            N
            a
            m
            e
            )
            ;
            \n
             
             
             
             
             
             
             
             
            }
         element
          elementNoOptionSpec
           ebnf
            block
             (
             alternative
              element
               elementNoOptionSpec
                atom
                 terminal_
                  BANG
             rewrite
             )
            ?
         element
          elementNoOptionSpec
           ebnf
            block
             (
             alternative
              element
               elementNoOptionSpec
                id_
                 aa
                =
                atom
                 terminal_
                  ARG_ACTION
             rewrite
             )
            ?
         element
          elementNoOptionSpec
           ebnf
            block
             (
             alternative
              element
               elementNoOptionSpec
                atom
                 terminal_
                  'returns'
              element
               elementNoOptionSpec
                id_
                 rt
                =
                atom
                 terminal_
                  ARG_ACTION
             rewrite
             )
            ?
         element
          elementNoOptionSpec
           ebnf
            block
             (
             alternative
              element
               elementNoOptionSpec
                atom
                 throwsSpec
             rewrite
             )
            ?
         element
          elementNoOptionSpec
           ebnf
            block
             (
             alternative
              element
               elementNoOptionSpec
                atom
                 optionsSpec
             rewrite
             )
            ?
         element
          elementNoOptionSpec
           id_
            scopes
           =
           atom
            ruleScopeSpec
         element
          elementNoOptionSpec
           ebnf
            block
             (
             alternative
              element
               elementNoOptionSpec
                atom
                 ruleActions
             rewrite
             )
            ?
         element
          elementNoOptionSpec
           atom
            terminal_
             COLON
         element
          elementNoOptionSpec
           atom
            ruleAltList
            argActionBlock
             [
             $
             o
             p
             t
             i
             o
             n
             s
             S
             p
             e
             c
             .
             o
             p
             t
             s
             ]
         element
          elementNoOptionSpec
           atom
            terminal_
             SEMI
         element
          elementNoOptionSpec
           ebnf
            block
             (
             alternative
              element
               elementNoOptionSpec
                id_
                 ex
                =
                atom
                 exceptionGroup
             rewrite
             )
            ?
        rewrite
         ->
         rewrite_alternative
          rewrite_tree_alternative
           rewrite_tree_element
            rewrite_tree
             ^(
             rewrite_tree_atom
              RULE
              argActionBlock
               [
               $
               r
               u
               l
               e
               N
               a
               m
               e
               .
               s
               t
               a
               r
               t
               ,
                
               "rule"
               ]
             rewrite_tree_element
              rewrite_tree_atom
               $
               id_
                ruleName
             rewrite_tree_element
              rewrite_tree_atom
               $
               id_
                p1
              ebnfSuffix
               ?
             rewrite_tree_element
              rewrite_tree_atom
               $
               id_
                p2
              ebnfSuffix
               ?
             rewrite_tree_element
              rewrite_tree_atom
               $
               id_
                p3
              ebnfSuffix
               ?
             rewrite_tree_element
              rewrite_tree_atom
               $
               id_
                p4
              ebnfSuffix
               ?
             rewrite_tree_element
              rewrite_tree
               ^(
               rewrite_tree_atom
                ARG
                argActionBlock
                 [
                 "ARG"
                 ]
               rewrite_tree_element
                rewrite_tree_atom
                 $
                 id_
                  aa
                ebnfSuffix
                 ?
               )
             rewrite_tree_element
              rewrite_tree
               ^(
               rewrite_tree_atom
                RET
                argActionBlock
                 [
                 "RET"
                 ]
               rewrite_tree_element
                rewrite_tree_atom
                 $
                 id_
                  rt
                ebnfSuffix
                 ?
               )
             rewrite_tree_element
              rewrite_tree_atom
               throwsSpec
              ebnfSuffix
               ?
             rewrite_tree_element
              rewrite_tree_atom
               optionsSpec
              ebnfSuffix
               ?
             rewrite_tree_element
              rewrite_tree_atom
               $
               id_
                scopes
             rewrite_tree_element
              rewrite_tree_atom
               ruleActions
              ebnfSuffix
               ?
             rewrite_tree_element
              rewrite_tree_atom
               ruleAltList
             rewrite_tree_element
              rewrite_tree_atom
               $
               id_
                ex
              ebnfSuffix
               ?
             rewrite_tree_element
              rewrite_tree_atom
               EOR
               argActionBlock
                [
                $
                S
                E
                M
                I
                ,
                "<end-of-rule>"
                ]
             )
        )
    element
     elementNoOptionSpec
      actionBlock
       {
       \n
        
        
        
        
        
        
        
        
       $
       t
       r
       e
       e
       .
       s
       e
       t
       T
       r
       e
       e
       E
       n
       c
       l
       o
       s
       i
       n
       g
       R
       u
       l
       e
       N
       a
       m
       e
       D
       e
       e
       p
       l
       y
       (
       c
       u
       r
       r
       e
       n
       t
       R
       u
       l
       e
       N
       a
       m
       e
       )
       ;
       \n
        
        
        
        
        
        
        
        
       (
       (
       G
       r
       a
       m
       m
       a
       r
       A
       S
       T
       )
       $
       t
       r
       e
       e
       .
       g
       e
       t
       C
       h
       i
       l
       d
       (
       0
       )
       )
       .
       s
       e
       t
       B
       l
       o
       c
       k
       O
       p
       t
       i
       o
       n
       s
       (
       $
       o
       p
       t
       i
       o
       n
       s
       S
       p
       e
       c
       .
       o
       p
       t
       s
       )
       ;
       \n
        
        
        
        
       }
   rewrite
  ;
 rule_
  id_
   ruleActions
  :
  altList
   alternative
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           atom
            ruleAction
        rewrite
        )
       +
   rewrite
  ;
 rule_
  id_
   ruleAction
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        AMPERSAND
        ^
    element
     elementNoOptionSpec
      atom
       id
    element
     elementNoOptionSpec
      atom
       terminal_
        ACTION
   rewrite
  ;
 rule_
  id_
   throwsSpec
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        'throws'
        ^
    element
     elementNoOptionSpec
      atom
       id
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             COMMA
             !
         element
          elementNoOptionSpec
           atom
            id
        rewrite
        )
       *
   rewrite
  ;
 rule_
  id_
   ruleScopeSpec
  :
  altList
   alternative
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             'scope'
         element
          elementNoOptionSpec
           atom
            ruleActions
           ebnfSuffix
            ?
         element
          elementNoOptionSpec
           atom
            terminal_
             ACTION
        rewrite
        )
       ?
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             'scope'
         element
          elementNoOptionSpec
           atom
            idList
         element
          elementNoOptionSpec
           atom
            terminal_
             SEMI
        rewrite
        )
       *
   rewrite
    ->
    rewrite_alternative
     rewrite_tree_alternative
      rewrite_tree_element
       rewrite_tree
        ^(
        rewrite_tree_atom
         SCOPE
         argActionBlock
          [
          $
          s
          t
          a
          r
          t
          ,
          "scope"
          ]
        rewrite_tree_element
         rewrite_tree_atom
          ruleActions
         ebnfSuffix
          ?
        rewrite_tree_element
         rewrite_tree_atom
          ACTION
         ebnfSuffix
          ?
        rewrite_tree_element
         rewrite_tree_atom
          idList
         ebnfSuffix
          *
        )
  ;
 rule_
  id_
   ruleAltList
  argActionBlock
   [
   M
   a
   p
   <
   S
   t
   r
   i
   n
   g
   ,
    
   O
   b
   j
   e
   c
   t
   >
    
   o
   p
   t
   s
   ]
  ruleAction
   @
   id_
    init
   actionBlock
    {
    \n
     
     
     
     
    G
    r
    a
    m
    m
    a
    r
    A
    S
    T
     
    b
    l
    k
    R
    o
    o
    t
     
    =
     
    n
    u
    l
    l
    ;
    \n
     
     
     
     
    G
    r
    a
    m
    m
    a
    r
    A
    S
    T
     
    s
    a
    v
    e
     
    =
     
    c
    u
    r
    r
    e
    n
    t
    B
    l
    o
    c
    k
    A
    S
    T
    ;
    \n
    }
  :
  altList
   alternative
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
        rewrite
         ->
         rewrite_alternative
          rewrite_tree_alternative
           rewrite_tree_element
            rewrite_tree_atom
             BLOCK
             argActionBlock
              [
              i
              n
              p
              u
              t
              .
              L
              T
              (
              -
              1
              )
              ,
              "BLOCK"
              ]
        )
    element
     elementNoOptionSpec
      actionBlock
       {
       \n
        
        
        
        
        
        
        
        
        
        
        
        
       b
       l
       k
       R
       o
       o
       t
        
       =
        
       (
       G
       r
       a
       m
       m
       a
       r
       A
       S
       T
       )
       $
       t
       r
       e
       e
       .
       g
       e
       t
       C
       h
       i
       l
       d
       (
       0
       )
       ;
       \n
        
        
        
        
        
        
        
        
        
        
        
        
       b
       l
       k
       R
       o
       o
       t
       .
       s
       e
       t
       B
       l
       o
       c
       k
       O
       p
       t
       i
       o
       n
       s
       (
       $
       o
       p
       t
       s
       )
       ;
       \n
        
        
        
        
        
        
        
        
        
        
        
        
       c
       u
       r
       r
       e
       n
       t
       B
       l
       o
       c
       k
       A
       S
       T
        
       =
        
       b
       l
       k
       R
       o
       o
       t
       ;
       \n
        
        
        
        
        
        
        
        
       }
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           id_
            a1
           =
           atom
            alternative
         element
          elementNoOptionSpec
           id_
            r1
           =
           atom
            rewrite
         element
          elementNoOptionSpec
           actionBlock
            {
            i
            f
             
            (
            L
            A
            (
            1
            )
            =
            =
            O
            R
            |
            |
            (
            L
            A
            (
            2
            )
            =
            =
            Q
            U
            E
            S
            T
            I
            O
            N
            |
            |
            L
            A
            (
            2
            )
            =
            =
            P
            L
            U
            S
            |
            |
            L
            A
            (
            2
            )
            =
            =
            S
            T
            A
            R
            )
            )
             
            p
            r
            e
            f
            i
            x
            W
            i
            t
            h
            S
            y
            n
            P
            r
            e
            d
            (
            $
            a
            1
            .
            t
            r
            e
            e
            )
            ;
            }
        rewrite
         ->
         rewrite_alternative
          rewrite_tree_alternative
           rewrite_tree_element
            rewrite_tree_atom
             $
             id_
              a1
           rewrite_tree_element
            rewrite_tree_atom
             $
             id_
              r1
            ebnfSuffix
             ?
        )
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           ebnf
            block
             (
             alternative
              element
               elementNoOptionSpec
                atom
                 terminal_
                  OR
              element
               elementNoOptionSpec
                id_
                 a2
                =
                atom
                 alternative
              element
               elementNoOptionSpec
                id_
                 r2
                =
                atom
                 rewrite
              element
               elementNoOptionSpec
                actionBlock
                 {
                 i
                 f
                  
                 (
                 L
                 A
                 (
                 1
                 )
                 =
                 =
                 O
                 R
                 |
                 |
                 (
                 L
                 A
                 (
                 2
                 )
                 =
                 =
                 Q
                 U
                 E
                 S
                 T
                 I
                 O
                 N
                 |
                 |
                 L
                 A
                 (
                 2
                 )
                 =
                 =
                 P
                 L
                 U
                 S
                 |
                 |
                 L
                 A
                 (
                 2
                 )
                 =
                 =
                 S
                 T
                 A
                 R
                 )
                 )
                  
                 p
                 r
                 e
                 f
                 i
                 x
                 W
                 i
                 t
                 h
                 S
                 y
                 n
                 P
                 r
                 e
                 d
                 (
                 $
                 a
                 2
                 .
                 t
                 r
                 e
                 e
                 )
                 ;
                 }
             rewrite
              ->
              rewrite_alternative
               rewrite_tree_alternative
                rewrite_tree_element
                 rewrite_tree_atom
                  $
                  id_
                   ruleAltList
                rewrite_tree_element
                 rewrite_tree_atom
                  $
                  id_
                   a2
                rewrite_tree_element
                 rewrite_tree_atom
                  $
                  id_
                   r2
                 ebnfSuffix
                  ?
             )
            +
        rewrite
        |
        alternative
        rewrite
        )
   rewrite
    ->
    rewrite_alternative
     rewrite_tree_alternative
      rewrite_tree_element
       rewrite_tree
        ^(
        rewrite_tree_atom
         actionBlock
          {
          b
          l
          k
          R
          o
          o
          t
          }
        rewrite_tree_element
         rewrite_tree_atom
          $
          id_
           ruleAltList
        rewrite_tree_element
         rewrite_tree_atom
          EOB
          argActionBlock
           [
           "<end-of-block>"
           ]
        )
  ;
  exceptionGroup
   finallyClause
    finally
    actionBlock
     {
      
     c
     u
     r
     r
     e
     n
     t
     B
     l
     o
     c
     k
     A
     S
     T
      
     =
      
     s
     a
     v
     e
     ;
      
     }
 rule_
  id_
   block
  ruleAction
   @
   id_
    init
   actionBlock
    {
    \n
     
     
     
     
    G
    r
    a
    m
    m
    a
    r
    A
    S
    T
     
    s
    a
    v
    e
     
    =
     
    c
    u
    r
    r
    e
    n
    t
    B
    l
    o
    c
    k
    A
    S
    T
    ;
    \n
    }
  :
  altList
   alternative
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           id_
            lp
           =
           atom
            terminal_
             LPAREN
        rewrite
         ->
         rewrite_alternative
          rewrite_tree_alternative
           rewrite_tree_element
            rewrite_tree_atom
             BLOCK
             argActionBlock
              [
              $
              l
              p
              ,
              "BLOCK"
              ]
        )
    element
     elementNoOptionSpec
      actionBlock
       {
       c
       u
       r
       r
       e
       n
       t
       B
       l
       o
       c
       k
       A
       S
       T
        
       =
        
       (
       G
       r
       a
       m
       m
       a
       r
       A
       S
       T
       )
       $
       t
       r
       e
       e
       .
       g
       e
       t
       C
       h
       i
       l
       d
       (
       0
       )
       ;
       }
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           ebnf
            block
             (
             alternative
              element
               elementNoOptionSpec
                atom
                 optionsSpec
              element
               elementNoOptionSpec
                actionBlock
                 {
                 (
                 (
                 G
                 r
                 a
                 m
                 m
                 a
                 r
                 A
                 S
                 T
                 )
                 $
                 t
                 r
                 e
                 e
                 .
                 g
                 e
                 t
                 C
                 h
                 i
                 l
                 d
                 (
                 0
                 )
                 )
                 .
                 s
                 e
                 t
                 O
                 p
                 t
                 i
                 o
                 n
                 s
                 (
                 g
                 r
                 a
                 m
                 m
                 a
                 r
                 ,
                 $
                 o
                 p
                 t
                 i
                 o
                 n
                 s
                 S
                 p
                 e
                 c
                 .
                 o
                 p
                 t
                 s
                 )
                 ;
                 }
             rewrite
             )
            ?
         element
          elementNoOptionSpec
           ebnf
            block
             (
             alternative
              element
               elementNoOptionSpec
                atom
                 ruleActions
             rewrite
             )
            ?
         element
          elementNoOptionSpec
           atom
            terminal_
             COLON
        rewrite
        |
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             ACTION
         element
          elementNoOptionSpec
           atom
            terminal_
             COLON
        rewrite
        )
       ?
    element
     elementNoOptionSpec
      id_
       a
      =
      atom
       alternative
    element
     elementNoOptionSpec
      id_
       r
      =
      atom
       rewrite
    element
     elementNoOptionSpec
      actionBlock
       {
       \n
        
        
        
        
        
        
        
        
        
        
        
        
       s
       t
       r
       e
       a
       m
       _
       a
       l
       t
       e
       r
       n
       a
       t
       i
       v
       e
       .
       a
       d
       d
       (
        
       $
       r
       .
       t
       r
       e
       e
        
       )
       ;
       \n
        
        
        
        
        
        
        
        
        
        
        
        
       i
       f
        
       (
        
       L
       A
       (
       1
       )
       =
       =
       O
       R
        
       |
       |
        
       (
       L
       A
       (
       2
       )
       =
       =
       Q
       U
       E
       S
       T
       I
       O
       N
       |
       |
       L
       A
       (
       2
       )
       =
       =
       P
       L
       U
       S
       |
       |
       L
       A
       (
       2
       )
       =
       =
       S
       T
       A
       R
       )
        
       )
       \n
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
       p
       r
       e
       f
       i
       x
       W
       i
       t
       h
       S
       y
       n
       P
       r
       e
       d
       (
       $
       a
       .
       t
       r
       e
       e
       )
       ;
       \n
        
        
        
        
        
        
        
        
       }
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             OR
         element
          elementNoOptionSpec
           id_
            a
           =
           atom
            alternative
         element
          elementNoOptionSpec
           id_
            r
           =
           atom
            rewrite
         element
          elementNoOptionSpec
           actionBlock
            {
            \n
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
            s
            t
            r
            e
            a
            m
            _
            a
            l
            t
            e
            r
            n
            a
            t
            i
            v
            e
            .
            a
            d
            d
            (
             
            $
            r
            .
            t
            r
            e
            e
             
            )
            ;
            \n
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
            i
            f
             
            (
            L
            A
            (
            1
            )
            =
            =
            O
            R
            |
            |
            (
            L
            A
            (
            2
            )
            =
            =
            Q
            U
            E
            S
            T
            I
            O
            N
            |
            |
            L
            A
            (
            2
            )
            =
            =
            P
            L
            U
            S
            |
            |
            L
            A
            (
            2
            )
            =
            =
            S
            T
            A
            R
            )
            )
            \n
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
            p
            r
            e
            f
            i
            x
            W
            i
            t
            h
            S
            y
            n
            P
            r
            e
            d
            (
            $
            a
            .
            t
            r
            e
            e
            )
            ;
            \n
             
             
             
             
             
             
             
             
             
             
             
             
            }
        rewrite
        )
       *
    element
     elementNoOptionSpec
      id_
       rp
      =
      atom
       terminal_
        RPAREN
   rewrite
    ->
    rewrite_alternative
     rewrite_tree_alternative
      rewrite_tree_element
       rewrite_tree
        ^(
        rewrite_tree_atom
         $
         id_
          block
        rewrite_tree_element
         rewrite_tree_atom
          optionsSpec
         ebnfSuffix
          ?
        rewrite_tree_element
         rewrite_tree_atom
          ruleActions
         ebnfSuffix
          ?
        rewrite_tree_element
         rewrite_tree_atom
          ACTION
         ebnfSuffix
          ?
        rewrite_tree_element
         rewrite_tree_atom
          alternative
         ebnfSuffix
          +
        rewrite_tree_element
         rewrite_tree_atom
          EOB
          argActionBlock
           [
           $
           r
           p
           ,
           "<end-of-block>"
           ]
        )
  ;
  exceptionGroup
   finallyClause
    finally
    actionBlock
     {
      
     c
     u
     r
     r
     e
     n
     t
     B
     l
     o
     c
     k
     A
     S
     T
      
     =
      
     s
     a
     v
     e
     ;
      
     }
 rule_
  id_
   alternative
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       element
      ebnfSuffix
       +
   rewrite
    ->
    rewrite_alternative
     rewrite_tree_alternative
      rewrite_tree_element
       rewrite_tree
        ^(
        rewrite_tree_atom
         ALT
         argActionBlock
          [
          $
          s
          t
          a
          r
          t
          ,
          "ALT"
          ]
        rewrite_tree_element
         rewrite_tree_atom
          element
         ebnfSuffix
          +
        rewrite_tree_element
         rewrite_tree_atom
          EOA
          argActionBlock
           [
           i
           n
           p
           u
           t
           .
           L
           T
           (
           -
           1
           )
           ,
           "<end-of-alt>"
           ]
        )
   |
   alternative
   rewrite
    ->
    rewrite_alternative
     rewrite_tree_alternative
      rewrite_tree_element
       rewrite_tree
        ^(
        rewrite_tree_atom
         ALT
         argActionBlock
          [
          $
          s
          t
          a
          r
          t
          ,
          "ALT"
          ]
        rewrite_tree_element
         rewrite_tree_atom
          EPSILON
          argActionBlock
           [
           i
           n
           p
           u
           t
           .
           L
           T
           (
           -
           1
           )
           ,
           "epsilon"
           ]
        rewrite_tree_element
         rewrite_tree_atom
          EOA
          argActionBlock
           [
           i
           n
           p
           u
           t
           .
           L
           T
           (
           -
           1
           )
           ,
           "<end-of-alt>"
           ]
        )
  ;
 rule_
  id_
   exceptionGroup
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       exceptionHandler
      ebnfSuffix
       +
    element
     elementNoOptionSpec
      atom
       finallyClause
      ebnfSuffix
       ?
   rewrite
   |
   alternative
    element
     elementNoOptionSpec
      atom
       finallyClause
   rewrite
  ;
 rule_
  id_
   exceptionHandler
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        'catch'
        ^
    element
     elementNoOptionSpec
      atom
       terminal_
        ARG_ACTION
    element
     elementNoOptionSpec
      atom
       terminal_
        ACTION
   rewrite
  ;
 rule_
  id_
   finallyClause
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        'finally'
        ^
    element
     elementNoOptionSpec
      atom
       terminal_
        ACTION
   rewrite
  ;
 rule_
  id_
   element
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       elementNoOptionSpec
   rewrite
  ;
 rule_
  id_
   elementNoOptionSpec
  ruleAction
   @
   id_
    init
   actionBlock
    {
    \n
     
     
     
     
    I
    n
    t
    S
    e
    t
     
    e
    l
    e
    m
    e
    n
    t
    s
    =
    n
    u
    l
    l
    ;
    \n
    }
  :
  altList
   alternative
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           atom
            id
         element
          elementNoOptionSpec
           ebnf
            block
             (
             alternative
              element
               elementNoOptionSpec
                atom
                 terminal_
                  ASSIGN
                  ^
             rewrite
             |
             alternative
              element
               elementNoOptionSpec
                atom
                 terminal_
                  PLUS_ASSIGN
                  ^
             rewrite
             )
         element
          elementNoOptionSpec
           ebnf
            block
             (
             alternative
              element
               elementNoOptionSpec
                atom
                 atom
              element
               elementNoOptionSpec
                ebnf
                 block
                  (
                  alternative
                   element
                    elementNoOptionSpec
                     id_
                      sub
                     =
                     atom
                      ebnfSuffix
                      argActionBlock
                       [
                       r
                       o
                       o
                       t
                       _
                       0
                       ,
                       f
                       a
                       l
                       s
                       e
                       ]
                      !
                   element
                    elementNoOptionSpec
                     actionBlock
                      {
                      r
                      o
                      o
                      t
                      _
                      0
                       
                      =
                       
                      $
                      s
                      u
                      b
                      .
                      t
                      r
                      e
                      e
                      ;
                      }
                  rewrite
                  )
                 ?
             rewrite
             |
             alternative
              element
               elementNoOptionSpec
                atom
                 ebnf
             rewrite
             )
        rewrite
        |
        alternative
         element
          elementNoOptionSpec
           id_
            a
           =
           atom
            atom
         element
          elementNoOptionSpec
           ebnf
            block
             (
             alternative
              element
               elementNoOptionSpec
                id_
                 sub2
                =
                atom
                 ebnfSuffix
                 argActionBlock
                  [
                  $
                  a
                  .
                  t
                  r
                  e
                  e
                  ,
                  f
                  a
                  l
                  s
                  e
                  ]
                 !
              element
               elementNoOptionSpec
                actionBlock
                 {
                 r
                 o
                 o
                 t
                 _
                 0
                 =
                 $
                 s
                 u
                 b
                 2
                 .
                 t
                 r
                 e
                 e
                 ;
                 }
             rewrite
             )
            ?
        rewrite
        |
        alternative
         element
          elementNoOptionSpec
           atom
            ebnf
        rewrite
        |
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             FORCED_ACTION
        rewrite
        |
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             ACTION
        rewrite
        |
        alternative
         element
          elementNoOptionSpec
           id_
            p
           =
           atom
            terminal_
             SEMPRED
         element
          elementNoOptionSpec
           ebnf
            block
             (
             alternative
              element
               elementNoOptionSpec
                atom
                 terminal_
                  IMPLIES
                  !
              element
               elementNoOptionSpec
                actionBlock
                 {
                 $
                 p
                 .
                 s
                 e
                 t
                 T
                 y
                 p
                 e
                 (
                 G
                 A
                 T
                 E
                 D
                 _
                 S
                 E
                 M
                 P
                 R
                 E
                 D
                 )
                 ;
                 }
             rewrite
             )
            ?
         element
          elementNoOptionSpec
           actionBlock
            {
            \n
             
             
             
             
             
             
             
             
             
             
             
             
            g
            r
            a
            m
            m
            a
            r
            .
            b
            l
            o
            c
            k
            s
            W
            i
            t
            h
            S
            e
            m
            P
            r
            e
            d
            s
            .
            a
            d
            d
            (
            c
            u
            r
            r
            e
            n
            t
            B
            l
            o
            c
            k
            A
            S
            T
            )
            ;
            \n
             
             
             
             
             
             
             
             
             
             
             
             
            }
        rewrite
        |
        alternative
         element
          elementNoOptionSpec
           id_
            t3
           =
           atom
            tree_
        rewrite
        )
   rewrite
  ;
 rule_
  id_
   atom
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       range
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             ROOT
             ^
        rewrite
        |
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             BANG
             ^
        rewrite
        )
       ?
   rewrite
   |
   alternative
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           ebnf
            block
             (
             alternative
              element
               elementNoOptionSpec
                actionBlock
                 {
                 L
                 T
                 (
                 1
                 )
                 .
                 g
                 e
                 t
                 C
                 h
                 a
                 r
                 P
                 o
                 s
                 i
                 t
                 i
                 o
                 n
                 I
                 n
                 L
                 i
                 n
                 e
                 (
                 )
                 +
                 L
                 T
                 (
                 1
                 )
                 .
                 g
                 e
                 t
                 T
                 e
                 x
                 t
                 (
                 )
                 .
                 l
                 e
                 n
                 g
                 t
                 h
                 (
                 )
                 =
                 =
                 L
                 T
                 (
                 2
                 )
                 .
                 g
                 e
                 t
                 C
                 h
                 a
                 r
                 P
                 o
                 s
                 i
                 t
                 i
                 o
                 n
                 I
                 n
                 L
                 i
                 n
                 e
                 (
                 )
                 &
                 &
                 \n
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                 L
                 T
                 (
                 2
                 )
                 .
                 g
                 e
                 t
                 C
                 h
                 a
                 r
                 P
                 o
                 s
                 i
                 t
                 i
                 o
                 n
                 I
                 n
                 L
                 i
                 n
                 e
                 (
                 )
                 +
                 1
                 =
                 =
                 L
                 T
                 (
                 3
                 )
                 .
                 g
                 e
                 t
                 C
                 h
                 a
                 r
                 P
                 o
                 s
                 i
                 t
                 i
                 o
                 n
                 I
                 n
                 L
                 i
                 n
                 e
                 (
                 )
                 }
                ?
              element
               elementNoOptionSpec
                atom
                 id
              element
               elementNoOptionSpec
                atom
                 terminal_
                  WILDCARD
              element
               elementNoOptionSpec
                ebnf
                 block
                  (
                  alternative
                   element
                    elementNoOptionSpec
                     atom
                      terminal
                  rewrite
                  |
                  alternative
                   element
                    elementNoOptionSpec
                     atom
                      ruleref
                  rewrite
                  )
             rewrite
             )
            =>
         element
          elementNoOptionSpec
           atom
            id
         element
          elementNoOptionSpec
           id_
            w
           =
           atom
            terminal_
             WILDCARD
             ^
         element
          elementNoOptionSpec
           ebnf
            block
             (
             alternative
              element
               elementNoOptionSpec
                atom
                 terminal
             rewrite
             |
             alternative
              element
               elementNoOptionSpec
                atom
                 ruleref
             rewrite
             )
         element
          elementNoOptionSpec
           actionBlock
            {
            $
            w
            .
            s
            e
            t
            T
            y
            p
            e
            (
            D
            O
            T
            )
            ;
            }
        rewrite
        |
        alternative
         element
          elementNoOptionSpec
           atom
            terminal
        rewrite
        |
        alternative
         element
          elementNoOptionSpec
           atom
            ruleref
        rewrite
        )
   rewrite
   |
   alternative
    element
     elementNoOptionSpec
      atom
       notSet
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             ROOT
             ^
        rewrite
        |
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             BANG
             ^
        rewrite
        )
       ?
   rewrite
  ;
 rule_
  id_
   ruleref
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        RULE_REF
        ^
    element
     elementNoOptionSpec
      atom
       terminal_
        ARG_ACTION
      ebnfSuffix
       ?
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             ROOT
             ^
        rewrite
        |
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             BANG
             ^
        rewrite
        )
       ?
   rewrite
  ;
 rule_
  id_
   notSet
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        NOT
        ^
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           atom
            notTerminal
        rewrite
        |
        alternative
         element
          elementNoOptionSpec
           atom
            block
        rewrite
        )
   rewrite
  ;
 rule_
  id_
   treeRoot
  ruleAction
   @
   id_
    init
   actionBlock
    {
    a
    t
    T
    r
    e
    e
    R
    o
    o
    t
    =
    t
    r
    u
    e
    ;
    }
  ruleAction
   @
   id_
    after
   actionBlock
    {
    a
    t
    T
    r
    e
    e
    R
    o
    o
    t
    =
    f
    a
    l
    s
    e
    ;
    }
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       id
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             ASSIGN
             ^
        rewrite
        |
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             PLUS_ASSIGN
             ^
        rewrite
        )
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           atom
            atom
        rewrite
        |
        alternative
         element
          elementNoOptionSpec
           atom
            block
        rewrite
        )
   rewrite
   |
   alternative
    element
     elementNoOptionSpec
      atom
       atom
   rewrite
   |
   alternative
    element
     elementNoOptionSpec
      atom
       block
   rewrite
  ;
 rule_
  id_
   tree_
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        TREE_BEGIN
        ^
    element
     elementNoOptionSpec
      atom
       treeRoot
    element
     elementNoOptionSpec
      atom
       element
      ebnfSuffix
       +
    element
     elementNoOptionSpec
      atom
       terminal_
        RPAREN
        !
   rewrite
  ;
 rule_
  id_
   ebnf
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       block
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             QUESTION
        rewrite
         ->
         rewrite_alternative
          rewrite_tree_alternative
           rewrite_tree_element
            rewrite_tree
             ^(
             rewrite_tree_atom
              OPTIONAL
              argActionBlock
               [
               $
               s
               t
               a
               r
               t
               ,
               "?"
               ]
             rewrite_tree_element
              rewrite_tree_atom
               block
             )
        |
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             STAR
        rewrite
         ->
         rewrite_alternative
          rewrite_tree_alternative
           rewrite_tree_element
            rewrite_tree
             ^(
             rewrite_tree_atom
              CLOSURE
              argActionBlock
               [
               $
               s
               t
               a
               r
               t
               ,
               "*"
               ]
             rewrite_tree_element
              rewrite_tree_atom
               block
             )
        |
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             PLUS
        rewrite
         ->
         rewrite_alternative
          rewrite_tree_alternative
           rewrite_tree_element
            rewrite_tree
             ^(
             rewrite_tree_atom
              POSITIVE_CLOSURE
              argActionBlock
               [
               $
               s
               t
               a
               r
               t
               ,
               "+"
               ]
             rewrite_tree_element
              rewrite_tree_atom
               block
             )
        |
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             IMPLIES
        rewrite
         ->
         actionBlock
          {
          g
          r
          a
          m
          m
          a
          r
          T
          y
          p
          e
           
          =
          =
           
          G
          r
          a
          m
          m
          a
          r
          .
          C
          O
          M
          B
          I
          N
          E
          D
           
          &
          &
           
          R
          u
          l
          e
          .
          g
          e
          t
          R
          u
          l
          e
          T
          y
          p
          e
          (
          c
          u
          r
          r
          e
          n
          t
          R
          u
          l
          e
          N
          a
          m
          e
          )
           
          =
          =
           
          G
          r
          a
          m
          m
          a
          r
          .
          L
          E
          X
          E
          R
          }
         ?
         rewrite_alternative
          rewrite_tree_alternative
           rewrite_tree_element
            rewrite_tree
             ^(
             rewrite_tree_atom
              SYNPRED
              argActionBlock
               [
               $
               s
               t
               a
               r
               t
               ,
               "=>"
               ]
             rewrite_tree_element
              rewrite_tree_atom
               block
             )
         ->
         rewrite_alternative
          rewrite_template
           actionBlock
            {
            c
            r
            e
            a
            t
            e
            S
            y
            n
            S
            e
            m
            P
            r
            e
            d
            F
            r
            o
            m
            B
            l
            o
            c
            k
            (
            $
            b
            l
            o
            c
            k
            .
            t
            r
            e
            e
            ,
             
            S
            Y
            N
            _
            S
            E
            M
            P
            R
            E
            D
            )
            }
        |
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             ROOT
        rewrite
         ->
         rewrite_alternative
          rewrite_tree_alternative
           rewrite_tree_element
            rewrite_tree
             ^(
             rewrite_tree_atom
              ROOT
             rewrite_tree_element
              rewrite_tree_atom
               block
             )
        |
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             BANG
        rewrite
         ->
         rewrite_alternative
          rewrite_tree_alternative
           rewrite_tree_element
            rewrite_tree
             ^(
             rewrite_tree_atom
              BANG
             rewrite_tree_element
              rewrite_tree_atom
               block
             )
        |
        alternative
        rewrite
         ->
         rewrite_alternative
          rewrite_tree_alternative
           rewrite_tree_element
            rewrite_tree_atom
             block
        )
   rewrite
  ;
 rule_
  id_
   range
  !
  :
  altList
   alternative
    element
     elementNoOptionSpec
      actionBlock
       {
       R
       u
       l
       e
       .
       g
       e
       t
       R
       u
       l
       e
       T
       y
       p
       e
       (
       c
       u
       r
       r
       e
       n
       t
       R
       u
       l
       e
       N
       a
       m
       e
       )
        
       =
       =
        
       G
       r
       a
       m
       m
       a
       r
       .
       L
       E
       X
       E
       R
       }
      ?
      =>
    element
     elementNoOptionSpec
      id_
       c1
      =
      atom
       terminal_
        CHAR_LITERAL
    element
     elementNoOptionSpec
      atom
       terminal_
        RANGE
    element
     elementNoOptionSpec
      id_
       c2
      =
      atom
       terminal_
        CHAR_LITERAL
   rewrite
    ->
    rewrite_alternative
     rewrite_tree_alternative
      rewrite_tree_element
       rewrite_tree
        ^(
        rewrite_tree_atom
         CHAR_RANGE
         argActionBlock
          [
          $
          c
          1
          ,
          ".."
          ]
        rewrite_tree_element
         rewrite_tree_atom
          $
          id_
           c1
        rewrite_tree_element
         rewrite_tree_atom
          $
          id_
           c2
        )
   |
   alternative
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           id_
            t
           =
           atom
            terminal_
             TOKEN_REF
         element
          elementNoOptionSpec
           id_
            r
           =
           atom
            terminal_
             RANGE
         element
          elementNoOptionSpec
           atom
            terminal_
             TOKEN_REF
        rewrite
        |
        alternative
         element
          elementNoOptionSpec
           id_
            t
           =
           atom
            terminal_
             STRING_LITERAL
         element
          elementNoOptionSpec
           id_
            r
           =
           atom
            terminal_
             RANGE
         element
          elementNoOptionSpec
           atom
            terminal_
             STRING_LITERAL
        rewrite
        |
        alternative
         element
          elementNoOptionSpec
           id_
            t
           =
           atom
            terminal_
             CHAR_LITERAL
         element
          elementNoOptionSpec
           id_
            r
           =
           atom
            terminal_
             RANGE
         element
          elementNoOptionSpec
           atom
            terminal_
             CHAR_LITERAL
        rewrite
        )
    element
     elementNoOptionSpec
      actionBlock
       {
       \n
        
        
        
        
        
        
        
        
       E
       r
       r
       o
       r
       M
       a
       n
       a
       g
       e
       r
       .
       s
       y
       n
       t
       a
       x
       E
       r
       r
       o
       r
       (
       \n
        
        
        
        
        
        
        
        
        
        
        
        
       E
       r
       r
       o
       r
       M
       a
       n
       a
       g
       e
       r
       .
       M
       S
       G
       _
       R
       A
       N
       G
       E
       _
       O
       P
       _
       I
       L
       L
       E
       G
       A
       L
       ,
       g
       r
       a
       m
       m
       a
       r
       ,
       $
       r
       ,
       n
       u
       l
       l
       ,
       n
       u
       l
       l
       )
       ;
       \n
        
        
        
        
        
        
        
        
       }
   rewrite
    ->
    rewrite_alternative
     rewrite_tree_alternative
      rewrite_tree_element
       rewrite_tree_atom
        $
        id_
         t
  ;
 rule_
  id_
   terminal
  :
  altList
   alternative
    element
     elementNoOptionSpec
      id_
       cl
      =
      atom
       terminal_
        CHAR_LITERAL
        ^
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           atom
            elementOptions
            argActionBlock
             [
             $
             c
             l
             .
             t
             r
             e
             e
             ]
            !
        rewrite
        )
       ?
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             ROOT
             ^
        rewrite
        |
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             BANG
             ^
        rewrite
        )
       ?
   rewrite
   |
   alternative
    element
     elementNoOptionSpec
      id_
       tr
      =
      atom
       terminal_
        TOKEN_REF
        ^
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           atom
            elementOptions
            argActionBlock
             [
             $
             t
             r
             .
             t
             r
             e
             e
             ]
            !
        rewrite
        )
       ?
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             ARG_ACTION
        rewrite
        )
       ?
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             ROOT
             ^
        rewrite
        |
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             BANG
             ^
        rewrite
        )
       ?
   rewrite
   |
   alternative
    element
     elementNoOptionSpec
      id_
       sl
      =
      atom
       terminal_
        STRING_LITERAL
        ^
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           atom
            elementOptions
            argActionBlock
             [
             $
             s
             l
             .
             t
             r
             e
             e
             ]
            !
        rewrite
        )
       ?
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             ROOT
             ^
        rewrite
        |
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             BANG
             ^
        rewrite
        )
       ?
   rewrite
   |
   alternative
    element
     elementNoOptionSpec
      id_
       wi
      =
      atom
       terminal_
        WILDCARD
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             ROOT
             ^
        rewrite
        |
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             BANG
             ^
        rewrite
        )
       ?
    element
     elementNoOptionSpec
      actionBlock
       {
       \n
        
        
        
        
        
        
        
        
        
        
        
        
       i
       f
        
       (
        
       a
       t
       T
       r
       e
       e
       R
       o
       o
       t
        
       )
       \n
        
        
        
        
        
        
        
        
        
        
        
        
       {
       \n
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
       E
       r
       r
       o
       r
       M
       a
       n
       a
       g
       e
       r
       .
       s
       y
       n
       t
       a
       x
       E
       r
       r
       o
       r
       (
       \n
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
       E
       r
       r
       o
       r
       M
       a
       n
       a
       g
       e
       r
       .
       M
       S
       G
       _
       W
       I
       L
       D
       C
       A
       R
       D
       _
       A
       S
       _
       R
       O
       O
       T
       ,
       g
       r
       a
       m
       m
       a
       r
       ,
       $
       w
       i
       ,
       n
       u
       l
       l
       ,
       n
       u
       l
       l
       )
       ;
       \n
        
        
        
        
        
        
        
        
        
        
        
        
       }
       \n
        
        
        
        
        
        
        
        
       }
   rewrite
  ;
 rule_
  id_
   elementOptions
  argActionBlock
   [
   G
   r
   a
   m
   m
   a
   r
   A
   S
   T
    
   t
   e
   r
   m
   i
   n
   a
   l
   A
   S
   T
   ]
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        OPEN_ELEMENT_OPTION
        ^
    element
     elementNoOptionSpec
      atom
       defaultNodeOption
       argActionBlock
        [
        t
        e
        r
        m
        i
        n
        a
        l
        A
        S
        T
        ]
    element
     elementNoOptionSpec
      atom
       terminal_
        CLOSE_ELEMENT_OPTION
        !
   rewrite
   |
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        OPEN_ELEMENT_OPTION
        ^
    element
     elementNoOptionSpec
      atom
       elementOption
       argActionBlock
        [
        t
        e
        r
        m
        i
        n
        a
        l
        A
        S
        T
        ]
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             SEMI
             !
         element
          elementNoOptionSpec
           atom
            elementOption
            argActionBlock
             [
             t
             e
             r
             m
             i
             n
             a
             l
             A
             S
             T
             ]
        rewrite
        )
       *
    element
     elementNoOptionSpec
      atom
       terminal_
        CLOSE_ELEMENT_OPTION
        !
   rewrite
  ;
 rule_
  id_
   defaultNodeOption
  argActionBlock
   [
   G
   r
   a
   m
   m
   a
   r
   A
   S
   T
    
   t
   e
   r
   m
   i
   n
   a
   l
   A
   S
   T
   ]
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       elementOptionId
    element
     elementNoOptionSpec
      actionBlock
       {
       t
       e
       r
       m
       i
       n
       a
       l
       A
       S
       T
       .
       s
       e
       t
       T
       e
       r
       m
       i
       n
       a
       l
       O
       p
       t
       i
       o
       n
       (
       g
       r
       a
       m
       m
       a
       r
       ,
       G
       r
       a
       m
       m
       a
       r
       .
       d
       e
       f
       a
       u
       l
       t
       T
       o
       k
       e
       n
       O
       p
       t
       i
       o
       n
       ,
       $
       e
       l
       e
       m
       e
       n
       t
       O
       p
       t
       i
       o
       n
       I
       d
       .
       q
       i
       d
       )
       ;
       }
   rewrite
  ;
 rule_
  id_
   elementOption
  argActionBlock
   [
   G
   r
   a
   m
   m
   a
   r
   A
   S
   T
    
   t
   e
   r
   m
   i
   n
   a
   l
   A
   S
   T
   ]
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       id
    element
     elementNoOptionSpec
      atom
       terminal_
        ASSIGN
        ^
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           atom
            elementOptionId
         element
          elementNoOptionSpec
           actionBlock
            {
            t
            e
            r
            m
            i
            n
            a
            l
            A
            S
            T
            .
            s
            e
            t
            T
            e
            r
            m
            i
            n
            a
            l
            O
            p
            t
            i
            o
            n
            (
            g
            r
            a
            m
            m
            a
            r
            ,
            $
            i
            d
            .
            t
            e
            x
            t
            ,
            $
            e
            l
            e
            m
            e
            n
            t
            O
            p
            t
            i
            o
            n
            I
            d
            .
            q
            i
            d
            )
            ;
            }
        rewrite
        |
        alternative
         element
          elementNoOptionSpec
           ebnf
            block
             (
             alternative
              element
               elementNoOptionSpec
                id_
                 t
                =
                atom
                 terminal_
                  STRING_LITERAL
             rewrite
             |
             alternative
              element
               elementNoOptionSpec
                id_
                 t
                =
                atom
                 terminal_
                  DOUBLE_QUOTE_STRING_LITERAL
             rewrite
             |
             alternative
              element
               elementNoOptionSpec
                id_
                 t
                =
                atom
                 terminal_
                  DOUBLE_ANGLE_STRING_LITERAL
             rewrite
             )
         element
          elementNoOptionSpec
           actionBlock
            {
            t
            e
            r
            m
            i
            n
            a
            l
            A
            S
            T
            .
            s
            e
            t
            T
            e
            r
            m
            i
            n
            a
            l
            O
            p
            t
            i
            o
            n
            (
            g
            r
            a
            m
            m
            a
            r
            ,
            $
            i
            d
            .
            t
            e
            x
            t
            ,
            $
            t
            .
            t
            e
            x
            t
            )
            ;
            }
        rewrite
        )
   rewrite
  ;
 rule_
  id_
   elementOptionId
  returns
  argActionBlock
   [
   S
   t
   r
   i
   n
   g
    
   q
   i
   d
   ]
  ruleAction
   @
   id_
    init
   actionBlock
    {
    S
    t
    r
    i
    n
    g
    B
    u
    f
    f
    e
    r
     
    b
    u
    f
     
    =
     
    n
    e
    w
     
    S
    t
    r
    i
    n
    g
    B
    u
    f
    f
    e
    r
    (
    )
    ;
    }
  :
  altList
   alternative
    element
     elementNoOptionSpec
      id_
       i
      =
      atom
       id
    element
     elementNoOptionSpec
      actionBlock
       {
       b
       u
       f
       .
       a
       p
       p
       e
       n
       d
       (
       $
       i
       .
       t
       e
       x
       t
       )
       ;
       }
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             '.'
         element
          elementNoOptionSpec
           id_
            i
           =
           atom
            id
         element
          elementNoOptionSpec
           actionBlock
            {
            b
            u
            f
            .
            a
            p
            p
            e
            n
            d
            (
            "."
             
            +
             
            $
            i
            .
            t
            e
            x
            t
            )
            ;
            }
        rewrite
        )
       *
    element
     elementNoOptionSpec
      actionBlock
       {
       $
       q
       i
       d
        
       =
        
       b
       u
       f
       .
       t
       o
       S
       t
       r
       i
       n
       g
       (
       )
       ;
       }
   rewrite
  ;
 rule_
  id_
   ebnfSuffix
  argActionBlock
   [
   G
   r
   a
   m
   m
   a
   r
   A
   S
   T
    
   e
   l
   e
   m
   A
   S
   T
   ,
    
   b
   o
   o
   l
   e
   a
   n
    
   i
   n
   R
   e
   w
   r
   i
   t
   e
   ]
  ruleAction
   @
   id_
    init
   actionBlock
    {
    \n
    G
    r
    a
    m
    m
    a
    r
    A
    S
    T
     
    b
    l
    k
    R
    o
    o
    t
    =
    n
    u
    l
    l
    ;
    \n
    G
    r
    a
    m
    m
    a
    r
    A
    S
    T
     
    a
    l
    t
    =
    n
    u
    l
    l
    ;
    \n
    G
    r
    a
    m
    m
    a
    r
    A
    S
    T
     
    s
    a
    v
    e
     
    =
     
    c
    u
    r
    r
    e
    n
    t
    B
    l
    o
    c
    k
    A
    S
    T
    ;
    \n
    }
  ruleAction
   @
   id_
    after
   actionBlock
    {
    \n
    c
    u
    r
    r
    e
    n
    t
    B
    l
    o
    c
    k
    A
    S
    T
     
    =
     
    s
    a
    v
    e
    ;
    \n
    }
  :
  altList
   alternative
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
        rewrite
         ->
         rewrite_alternative
          rewrite_tree_alternative
           rewrite_tree_element
            rewrite_tree_atom
             BLOCK
             argActionBlock
              [
              $
              e
              l
              e
              m
              A
              S
              T
              .
              g
              e
              t
              T
              o
              k
              e
              n
              (
              )
              ,
               
              "BLOCK"
              ]
        )
    element
     elementNoOptionSpec
      actionBlock
       {
        
       b
       l
       k
       R
       o
       o
       t
        
       =
        
       (
       G
       r
       a
       m
       m
       a
       r
       A
       S
       T
       )
       $
       t
       r
       e
       e
       .
       g
       e
       t
       C
       h
       i
       l
       d
       (
       0
       )
       ;
        
       c
       u
       r
       r
       e
       n
       t
       B
       l
       o
       c
       k
       A
       S
       T
        
       =
        
       b
       l
       k
       R
       o
       o
       t
       ;
        
       }
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
        rewrite
         ->
         rewrite_alternative
          rewrite_tree_alternative
           rewrite_tree_element
            rewrite_tree
             ^(
             rewrite_tree_atom
              ALT
              argActionBlock
               [
               $
               e
               l
               e
               m
               A
               S
               T
               .
               g
               e
               t
               T
               o
               k
               e
               n
               (
               )
               ,
                
               "ALT"
               ]
             rewrite_tree_element
              rewrite_tree_atom
               actionBlock
                {
                $
                e
                l
                e
                m
                A
                S
                T
                }
             rewrite_tree_element
              rewrite_tree_atom
               EOA
               argActionBlock
                [
                "<end-of-alt>"
                ]
             )
        )
    element
     elementNoOptionSpec
      actionBlock
       {
       \n
        
        
        
        
        
        
        
        
        
        
        
        
       a
       l
       t
        
       =
        
       (
       G
       r
       a
       m
       m
       a
       r
       A
       S
       T
       )
       $
       t
       r
       e
       e
       .
       g
       e
       t
       C
       h
       i
       l
       d
       (
       0
       )
       ;
       \n
        
        
        
        
        
        
        
        
        
        
        
        
       i
       f
        
       (
        
       !
       i
       n
       R
       e
       w
       r
       i
       t
       e
        
       )
       \n
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
       p
       r
       e
       f
       i
       x
       W
       i
       t
       h
       S
       y
       n
       P
       r
       e
       d
       (
       a
       l
       t
       )
       ;
       \n
        
        
        
        
        
        
        
        
       }
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             QUESTION
        rewrite
         ->
         rewrite_alternative
          rewrite_tree_alternative
           rewrite_tree_element
            rewrite_tree_atom
             OPTIONAL
             argActionBlock
              [
              $
              e
              l
              e
              m
              A
              S
              T
              .
              g
              e
              t
              T
              o
              k
              e
              n
              (
              )
              ,
              "?"
              ]
        |
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             STAR
        rewrite
         ->
         rewrite_alternative
          rewrite_tree_alternative
           rewrite_tree_element
            rewrite_tree_atom
             CLOSURE
             argActionBlock
              [
              $
              e
              l
              e
              m
              A
              S
              T
              .
              g
              e
              t
              T
              o
              k
              e
              n
              (
              )
              ,
              "*"
              ]
        |
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             PLUS
        rewrite
         ->
         rewrite_alternative
          rewrite_tree_alternative
           rewrite_tree_element
            rewrite_tree_atom
             POSITIVE_CLOSURE
             argActionBlock
              [
              $
              e
              l
              e
              m
              A
              S
              T
              .
              g
              e
              t
              T
              o
              k
              e
              n
              (
              )
              ,
              "+"
              ]
        )
   rewrite
    ->
    rewrite_alternative
     rewrite_tree_alternative
      rewrite_tree_element
       rewrite_tree
        ^(
        rewrite_tree_atom
         $
         id_
          ebnfSuffix
        rewrite_tree_element
         rewrite_tree
          ^(
          rewrite_tree_atom
           actionBlock
            {
            b
            l
            k
            R
            o
            o
            t
            }
          rewrite_tree_element
           rewrite_tree_atom
            actionBlock
             {
             a
             l
             t
             }
          rewrite_tree_element
           rewrite_tree_atom
            EOB
            argActionBlock
             [
             $
             e
             l
             e
             m
             A
             S
             T
             .
             g
             e
             t
             T
             o
             k
             e
             n
             (
             )
             ,
              
             "<end-of-block>"
             ]
          )
        )
  ;
 rule_
  id_
   notTerminal
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        CHAR_LITERAL
   rewrite
   |
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        TOKEN_REF
   rewrite
   |
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        STRING_LITERAL
   rewrite
  ;
 rule_
  id_
   idList
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       id
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             COMMA
             !
         element
          elementNoOptionSpec
           atom
            id
        rewrite
        )
       *
   rewrite
  ;
 rule_
  id_
   id
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        TOKEN_REF
   rewrite
    ->
    rewrite_alternative
     rewrite_tree_alternative
      rewrite_tree_element
       rewrite_tree_atom
        ID
        argActionBlock
         [
         $
         T
         O
         K
         E
         N
         _
         R
         E
         F
         ]
   |
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        RULE_REF
   rewrite
    ->
    rewrite_alternative
     rewrite_tree_alternative
      rewrite_tree_element
       rewrite_tree_atom
        ID
        argActionBlock
         [
         $
         R
         U
         L
         E
         _
         R
         E
         F
         ]
  ;
 rule_
  id_
   rewrite
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       rewrite_with_sempred
      ebnfSuffix
       *
    element
     elementNoOptionSpec
      atom
       terminal_
        REWRITE
    element
     elementNoOptionSpec
      atom
       rewrite_alternative
   rewrite
    ->
    rewrite_alternative
     rewrite_tree_alternative
      rewrite_tree_element
       rewrite_tree
        ^(
        rewrite_tree_atom
         REWRITES
        rewrite_tree_element
         rewrite_tree_atom
          rewrite_with_sempred
         ebnfSuffix
          *
        rewrite_tree_element
         rewrite_tree
          ^(
          rewrite_tree_atom
           REWRITE
          rewrite_tree_element
           rewrite_tree_atom
            rewrite_alternative
          )
        )
   |
   alternative
   rewrite
  ;
 rule_
  id_
   rewrite_with_sempred
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        REWRITE
        ^
    element
     elementNoOptionSpec
      atom
       terminal_
        SEMPRED
    element
     elementNoOptionSpec
      atom
       rewrite_alternative
   rewrite
  ;
 rule_
  id_
   rewrite_block
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        LPAREN
    element
     elementNoOptionSpec
      atom
       rewrite_alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        RPAREN
   rewrite
    ->
    rewrite_alternative
     rewrite_tree_alternative
      rewrite_tree_element
       rewrite_tree
        ^(
        rewrite_tree_atom
         BLOCK
         argActionBlock
          [
          $
          L
          P
          A
          R
          E
          N
          ,
          "BLOCK"
          ]
        rewrite_tree_element
         rewrite_tree_atom
          rewrite_alternative
        rewrite_tree_element
         rewrite_tree_atom
          EOB
          argActionBlock
           [
           $
           R
           P
           A
           R
           E
           N
           ,
           "<end-of-block>"
           ]
        )
  ;
 rule_
  id_
   rewrite_alternative
  optionsSpec
   options
   {
   option
    id_
     k
    =
    optionValue
     1
    ;
   }
  :
  altList
   alternative
    element
     elementNoOptionSpec
      actionBlock
       {
       g
       r
       a
       m
       m
       a
       r
       .
       b
       u
       i
       l
       d
       T
       e
       m
       p
       l
       a
       t
       e
       (
       )
       }
      ?
      =>
    element
     elementNoOptionSpec
      atom
       rewrite_template
   rewrite
   |
   alternative
    element
     elementNoOptionSpec
      actionBlock
       {
       g
       r
       a
       m
       m
       a
       r
       .
       b
       u
       i
       l
       d
       A
       S
       T
       (
       )
       }
      ?
      =>
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           atom
            rewrite_element
        rewrite
        )
       +
   rewrite
    ->
    actionBlock
     {
     !
     s
     t
     r
     e
     a
     m
     _
     r
     e
     w
     r
     i
     t
     e
     _
     e
     l
     e
     m
     e
     n
     t
     .
     h
     a
     s
     N
     e
     x
     t
     (
     )
     }
    ?
    rewrite_alternative
     rewrite_tree_alternative
      rewrite_tree_element
       rewrite_tree
        ^(
        rewrite_tree_atom
         ALT
         argActionBlock
          [
          L
          T
          (
          1
          )
          ,
          "ALT"
          ]
        rewrite_tree_element
         rewrite_tree_atom
          EPSILON
          argActionBlock
           [
           "epsilon"
           ]
        rewrite_tree_element
         rewrite_tree_atom
          EOA
          argActionBlock
           [
           "<end-of-alt>"
           ]
        )
    ->
    rewrite_alternative
     rewrite_tree_alternative
      rewrite_tree_element
       rewrite_tree
        ^(
        rewrite_tree_atom
         ALT
         argActionBlock
          [
          L
          T
          (
          1
          )
          ,
          "ALT"
          ]
        rewrite_tree_element
         rewrite_tree_atom
          rewrite_element
         ebnfSuffix
          +
        rewrite_tree_element
         rewrite_tree_atom
          EOA
          argActionBlock
           [
           "<end-of-alt>"
           ]
        )
   |
   alternative
   rewrite
    ->
    rewrite_alternative
     rewrite_tree_alternative
      rewrite_tree_element
       rewrite_tree
        ^(
        rewrite_tree_atom
         ALT
         argActionBlock
          [
          L
          T
          (
          1
          )
          ,
          "ALT"
          ]
        rewrite_tree_element
         rewrite_tree_atom
          EPSILON
          argActionBlock
           [
           "epsilon"
           ]
        rewrite_tree_element
         rewrite_tree_atom
          EOA
          argActionBlock
           [
           "<end-of-alt>"
           ]
        )
   |
   alternative
    element
     elementNoOptionSpec
      actionBlock
       {
       g
       r
       a
       m
       m
       a
       r
       .
       b
       u
       i
       l
       d
       A
       S
       T
       (
       )
       }
      ?
    element
     elementNoOptionSpec
      atom
       terminal_
        ETC
   rewrite
  ;
 rule_
  id_
   rewrite_element
  :
  altList
   alternative
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           id_
            t
           =
           atom
            rewrite_atom
        rewrite
         ->
         rewrite_alternative
          rewrite_tree_alternative
           rewrite_tree_element
            rewrite_tree_atom
             $
             id_
              t
        )
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           id_
            subrule
           =
           atom
            ebnfSuffix
            argActionBlock
             [
             $
             t
             .
             t
             r
             e
             e
             ,
             t
             r
             u
             e
             ]
        rewrite
         ->
         rewrite_alternative
          rewrite_tree_alternative
           rewrite_tree_element
            rewrite_tree_atom
             $
             id_
              subrule
        )
       ?
   rewrite
   |
   alternative
    element
     elementNoOptionSpec
      atom
       rewrite_ebnf
   rewrite
   |
   alternative
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           id_
            tr
           =
           atom
            rewrite_tree
        rewrite
         ->
         rewrite_alternative
          rewrite_tree_alternative
           rewrite_tree_element
            rewrite_tree_atom
             $
             id_
              tr
        )
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           id_
            subrule
           =
           atom
            ebnfSuffix
            argActionBlock
             [
             $
             t
             r
             .
             t
             r
             e
             e
             ,
             t
             r
             u
             e
             ]
        rewrite
         ->
         rewrite_alternative
          rewrite_tree_alternative
           rewrite_tree_element
            rewrite_tree_atom
             $
             id_
              subrule
        )
       ?
   rewrite
  ;
 rule_
  id_
   rewrite_atom
  :
  altList
   alternative
    element
     elementNoOptionSpec
      id_
       tr
      =
      atom
       terminal_
        TOKEN_REF
        ^
    element
     elementNoOptionSpec
      atom
       elementOptions
       argActionBlock
        [
        $
        t
        r
        .
        t
        r
        e
        e
        ]
       !
      ebnfSuffix
       ?
    element
     elementNoOptionSpec
      atom
       terminal_
        ARG_ACTION
      ebnfSuffix
       ?
   rewrite
   |
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        RULE_REF
   rewrite
   |
   alternative
    element
     elementNoOptionSpec
      id_
       cl
      =
      atom
       terminal_
        CHAR_LITERAL
    element
     elementNoOptionSpec
      atom
       elementOptions
       argActionBlock
        [
        $
        c
        l
        .
        t
        r
        e
        e
        ]
       !
      ebnfSuffix
       ?
   rewrite
   |
   alternative
    element
     elementNoOptionSpec
      id_
       sl
      =
      atom
       terminal_
        STRING_LITERAL
    element
     elementNoOptionSpec
      atom
       elementOptions
       argActionBlock
        [
        $
        s
        l
        .
        t
        r
        e
        e
        ]
       !
      ebnfSuffix
       ?
   rewrite
   |
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        DOLLAR
        !
    element
     elementNoOptionSpec
      atom
       label
   rewrite
   |
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        ACTION
   rewrite
  ;
 rule_
  id_
   label
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        TOKEN_REF
   rewrite
    ->
    rewrite_alternative
     rewrite_tree_alternative
      rewrite_tree_element
       rewrite_tree_atom
        LABEL
        argActionBlock
         [
         $
         T
         O
         K
         E
         N
         _
         R
         E
         F
         ]
   |
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        RULE_REF
   rewrite
    ->
    rewrite_alternative
     rewrite_tree_alternative
      rewrite_tree_element
       rewrite_tree_atom
        LABEL
        argActionBlock
         [
         $
         R
         U
         L
         E
         _
         R
         E
         F
         ]
  ;
 rule_
  id_
   rewrite_ebnf
  :
  altList
   alternative
    element
     elementNoOptionSpec
      id_
       b
      =
      atom
       rewrite_block
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             QUESTION
        rewrite
         ->
         rewrite_alternative
          rewrite_tree_alternative
           rewrite_tree_element
            rewrite_tree
             ^(
             rewrite_tree_atom
              OPTIONAL
              argActionBlock
               [
               $
               b
               .
               s
               t
               a
               r
               t
               ,
               "?"
               ]
             rewrite_tree_element
              rewrite_tree_atom
               $
               id_
                b
             )
        |
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             STAR
        rewrite
         ->
         rewrite_alternative
          rewrite_tree_alternative
           rewrite_tree_element
            rewrite_tree
             ^(
             rewrite_tree_atom
              CLOSURE
              argActionBlock
               [
               $
               b
               .
               s
               t
               a
               r
               t
               ,
               "*"
               ]
             rewrite_tree_element
              rewrite_tree_atom
               $
               id_
                b
             )
        |
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             PLUS
        rewrite
         ->
         rewrite_alternative
          rewrite_tree_alternative
           rewrite_tree_element
            rewrite_tree
             ^(
             rewrite_tree_atom
              POSITIVE_CLOSURE
              argActionBlock
               [
               $
               b
               .
               s
               t
               a
               r
               t
               ,
               "+"
               ]
             rewrite_tree_element
              rewrite_tree_atom
               $
               id_
                b
             )
        )
   rewrite
  ;
 rule_
  id_
   rewrite_tree
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        TREE_BEGIN
        ^
    element
     elementNoOptionSpec
      atom
       rewrite_atom
    element
     elementNoOptionSpec
      atom
       rewrite_element
      ebnfSuffix
       *
    element
     elementNoOptionSpec
      atom
       terminal_
        RPAREN
        !
   rewrite
  ;
 rule_
  public
  id_
   rewrite_template
  optionsSpec
   options
   {
   option
    id_
     k
    =
    optionValue
     1
    ;
   }
  :
  altList
   alternative
    element
     elementNoOptionSpec
      actionBlock
       {
       L
       T
       (
       1
       )
       .
       g
       e
       t
       T
       e
       x
       t
       (
       )
       .
       e
       q
       u
       a
       l
       s
       (
       "template"
       )
       }
      ?
      =>
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           atom
            rewrite_template_head
        rewrite
         ->
         rewrite_alternative
          rewrite_tree_alternative
           rewrite_tree_element
            rewrite_tree_atom
             rewrite_template_head
        )
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           id_
            st
           =
           atom
            terminal_
             DOUBLE_QUOTE_STRING_LITERAL
        rewrite
        |
        alternative
         element
          elementNoOptionSpec
           id_
            st
           =
           atom
            terminal_
             DOUBLE_ANGLE_STRING_LITERAL
        rewrite
        )
    element
     elementNoOptionSpec
      actionBlock
       {
        
       a
       d
       a
       p
       t
       o
       r
       .
       a
       d
       d
       C
       h
       i
       l
       d
       (
        
       $
       t
       r
       e
       e
       .
       g
       e
       t
       C
       h
       i
       l
       d
       (
       0
       )
       ,
        
       a
       d
       a
       p
       t
       o
       r
       .
       c
       r
       e
       a
       t
       e
       (
       $
       s
       t
       )
        
       )
       ;
        
       }
   rewrite
   |
   alternative
    element
     elementNoOptionSpec
      atom
       rewrite_template_head
   rewrite
   |
   alternative
    element
     elementNoOptionSpec
      atom
       rewrite_indirect_template_head
   rewrite
   |
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        ACTION
   rewrite
  ;
 rule_
  id_
   rewrite_template_head
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       id
    element
     elementNoOptionSpec
      id_
       lp
      =
      atom
       terminal_
        LPAREN
    element
     elementNoOptionSpec
      atom
       rewrite_template_args
    element
     elementNoOptionSpec
      atom
       terminal_
        RPAREN
   rewrite
    ->
    rewrite_alternative
     rewrite_tree_alternative
      rewrite_tree_element
       rewrite_tree
        ^(
        rewrite_tree_atom
         TEMPLATE
         argActionBlock
          [
          $
          l
          p
          ,
          "TEMPLATE"
          ]
        rewrite_tree_element
         rewrite_tree_atom
          id
        rewrite_tree_element
         rewrite_tree_atom
          rewrite_template_args
        )
  ;
 rule_
  id_
   rewrite_indirect_template_head
  :
  altList
   alternative
    element
     elementNoOptionSpec
      id_
       lp
      =
      atom
       terminal_
        LPAREN
    element
     elementNoOptionSpec
      atom
       terminal_
        ACTION
    element
     elementNoOptionSpec
      atom
       terminal_
        RPAREN
    element
     elementNoOptionSpec
      atom
       terminal_
        LPAREN
    element
     elementNoOptionSpec
      atom
       rewrite_template_args
    element
     elementNoOptionSpec
      atom
       terminal_
        RPAREN
   rewrite
    ->
    rewrite_alternative
     rewrite_tree_alternative
      rewrite_tree_element
       rewrite_tree
        ^(
        rewrite_tree_atom
         TEMPLATE
         argActionBlock
          [
          $
          l
          p
          ,
          "TEMPLATE"
          ]
        rewrite_tree_element
         rewrite_tree_atom
          ACTION
        rewrite_tree_element
         rewrite_tree_atom
          rewrite_template_args
        )
  ;
 rule_
  id_
   rewrite_template_args
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       rewrite_template_arg
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             COMMA
         element
          elementNoOptionSpec
           atom
            rewrite_template_arg
        rewrite
        )
       *
   rewrite
    ->
    rewrite_alternative
     rewrite_tree_alternative
      rewrite_tree_element
       rewrite_tree
        ^(
        rewrite_tree_atom
         ARGLIST
         argActionBlock
          [
          "ARGLIST"
          ]
        rewrite_tree_element
         rewrite_tree_atom
          rewrite_template_arg
         ebnfSuffix
          +
        )
   |
   alternative
   rewrite
    ->
    rewrite_alternative
     rewrite_tree_alternative
      rewrite_tree_element
       rewrite_tree_atom
        ARGLIST
        argActionBlock
         [
         "ARGLIST"
         ]
  ;
 rule_
  id_
   rewrite_template_arg
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       id
    element
     elementNoOptionSpec
      id_
       a
      =
      atom
       terminal_
        ASSIGN
    element
     elementNoOptionSpec
      atom
       terminal_
        ACTION
   rewrite
    ->
    rewrite_alternative
     rewrite_tree_alternative
      rewrite_tree_element
       rewrite_tree
        ^(
        rewrite_tree_atom
         ARG
         argActionBlock
          [
          $
          a
          ,
          "ARG"
          ]
        rewrite_tree_element
         rewrite_tree_atom
          id
        rewrite_tree_element
         rewrite_tree_atom
          ACTION
        )
  ;
 rule_
  fragment
  id_
   STRING_LITERAL
  :
  altList
   alternative
   rewrite
  ;
 rule_
  fragment
  id_
   FORCED_ACTION
  :
  altList
   alternative
   rewrite
  ;
 rule_
  fragment
  id_
   DOC_COMMENT
  :
  altList
   alternative
   rewrite
  ;
 rule_
  fragment
  id_
   SEMPRED
  :
  altList
   alternative
   rewrite
  ;
 rule_
  id_
   WS
  :
  altList
   alternative
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             ' '
        rewrite
        |
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             '\t'
        rewrite
        |
        alternative
         element
          elementNoOptionSpec
           ebnf
            block
             (
             alternative
              element
               elementNoOptionSpec
                atom
                 terminal_
                  '\r'
             rewrite
             )
            ?
         element
          elementNoOptionSpec
           atom
            terminal_
             '\n'
        rewrite
        )
    element
     elementNoOptionSpec
      actionBlock
       {
        
       $
       c
       h
       a
       n
       n
       e
       l
        
       =
        
       H
       I
       D
       D
       E
       N
       ;
        
       }
   rewrite
  ;
 rule_
  id_
   COMMENT
  ruleAction
   @
   id_
    init
   actionBlock
    {
    L
    i
    s
    t
    <
    I
    n
    t
    e
    g
    e
    r
    >
     
    t
    y
    p
    e
     
    =
     
    n
    e
    w
     
    A
    r
    r
    a
    y
    L
    i
    s
    t
    <
    I
    n
    t
    e
    g
    e
    r
    >
    (
    )
     
    {
    {
     
    a
    d
    d
    (
    0
    )
    ;
     
    }
    }
    ;
    }
  :
  altList
   alternative
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             SL_COMMENT
        rewrite
        |
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             ML_COMMENT
             argActionBlock
              [
              t
              y
              p
              e
              ]
         element
          elementNoOptionSpec
           actionBlock
            {
            $
            t
            y
            p
            e
             
            =
             
            t
            y
            p
            e
            .
            g
            e
            t
            (
            0
            )
            ;
            }
        rewrite
        )
    element
     elementNoOptionSpec
      actionBlock
       {
       \n
        
        
        
        
        
        
        
        
        
        
        
        
       i
       f
        
       (
        
       $
       t
       y
       p
       e
        
       !
       =
        
       D
       O
       C
       _
       C
       O
       M
       M
       E
       N
       T
        
       )
       \n
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
       $
       c
       h
       a
       n
       n
       e
       l
        
       =
        
       H
       I
       D
       D
       E
       N
       ;
       \n
        
        
        
        
        
        
        
        
       }
   rewrite
  ;
 rule_
  fragment
  id_
   SL_COMMENT
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        '//'
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           ebnf
            block
             (
             alternative
              element
               elementNoOptionSpec
                atom
                 terminal_
                  ' $ANTLR'
             rewrite
             )
            =>
         element
          elementNoOptionSpec
           atom
            terminal_
             ' $ANTLR '
         element
          elementNoOptionSpec
           atom
            terminal_
             SRC
         element
          elementNoOptionSpec
           ebnf
            block
             (
             alternative
              element
               elementNoOptionSpec
                ebnf
                 block
                  (
                  alternative
                   element
                    elementNoOptionSpec
                     atom
                      terminal_
                       '\r'
                  rewrite
                  )
                 ?
              element
               elementNoOptionSpec
                atom
                 terminal_
                  '\n'
             rewrite
             )
            ?
        rewrite
        |
        alternative
         element
          elementNoOptionSpec
           atom
            notSet
             ~
             block
              (
              alternative
               element
                elementNoOptionSpec
                 atom
                  terminal_
                   '\r'
              rewrite
              |
              alternative
               element
                elementNoOptionSpec
                 atom
                  terminal_
                   '\n'
              rewrite
              )
           ebnfSuffix
            *
         element
          elementNoOptionSpec
           ebnf
            block
             (
             alternative
              element
               elementNoOptionSpec
                ebnf
                 block
                  (
                  alternative
                   element
                    elementNoOptionSpec
                     atom
                      terminal_
                       '\r'
                  rewrite
                  )
                 ?
              element
               elementNoOptionSpec
                atom
                 terminal_
                  '\n'
             rewrite
             )
            ?
        rewrite
        )
   rewrite
  ;
 rule_
  fragment
  id_
   ML_COMMENT
  argActionBlock
   [
   L
   i
   s
   t
   <
   I
   n
   t
   e
   g
   e
   r
   >
    
   t
   y
   p
   e
   ]
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        '/*'
    element
     elementNoOptionSpec
      actionBlock
       {
       $
       t
       y
       p
       e
       .
       s
       e
       t
       (
       0
       ,
        
       (
       i
       n
       p
       u
       t
       .
       L
       A
       (
       1
       )
        
       =
       =
        
       '*'
        
       &
       &
        
       i
       n
       p
       u
       t
       .
       L
       A
       (
       2
       )
        
       !
       =
        
       '/'
       )
        
       ?
        
       D
       O
       C
       _
       C
       O
       M
       M
       E
       N
       T
        
       :
        
       M
       L
       _
       C
       O
       M
       M
       E
       N
       T
       )
       ;
       }
    element
     elementNoOptionSpec
      atom
       terminal_
        .
      ebnfSuffix
       *
    element
     elementNoOptionSpec
      atom
       terminal_
        '*/'
   rewrite
  ;
 rule_
  id_
   OPEN_ELEMENT_OPTION
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        '<'
   rewrite
  ;
 rule_
  id_
   CLOSE_ELEMENT_OPTION
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        '>'
   rewrite
  ;
 rule_
  id_
   AMPERSAND
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        '@'
   rewrite
  ;
 rule_
  id_
   COMMA
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        ','
   rewrite
  ;
 rule_
  id_
   QUESTION
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        '?'
   rewrite
  ;
 rule_
  id_
   TREE_BEGIN
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        '^('
   rewrite
  ;
 rule_
  id_
   LPAREN
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        '('
   rewrite
  ;
 rule_
  id_
   RPAREN
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        ')'
   rewrite
  ;
 rule_
  id_
   COLON
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        ':'
   rewrite
  ;
 rule_
  id_
   STAR
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        '*'
   rewrite
  ;
 rule_
  id_
   PLUS
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        '+'
   rewrite
  ;
 rule_
  id_
   ASSIGN
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        '='
   rewrite
  ;
 rule_
  id_
   PLUS_ASSIGN
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        '+='
   rewrite
  ;
 rule_
  id_
   IMPLIES
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        '=>'
   rewrite
  ;
 rule_
  id_
   REWRITE
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        '->'
   rewrite
  ;
 rule_
  id_
   SEMI
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        ';'
   rewrite
  ;
 rule_
  id_
   ROOT
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        '^'
    element
     elementNoOptionSpec
      actionBlock
       {
       h
       a
       s
       A
       S
       T
       O
       p
       e
       r
       a
       t
       o
       r
       =
       t
       r
       u
       e
       ;
       }
   rewrite
  ;
 rule_
  id_
   BANG
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        '!'
    element
     elementNoOptionSpec
      actionBlock
       {
       h
       a
       s
       A
       S
       T
       O
       p
       e
       r
       a
       t
       o
       r
       =
       t
       r
       u
       e
       ;
       }
   rewrite
  ;
 rule_
  id_
   OR
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        '|'
   rewrite
  ;
 rule_
  id_
   WILDCARD
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        '.'
   rewrite
  ;
 rule_
  id_
   ETC
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        '...'
   rewrite
  ;
 rule_
  id_
   RANGE
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        '..'
   rewrite
  ;
 rule_
  id_
   NOT
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        '~'
   rewrite
  ;
 rule_
  id_
   RCURLY
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        '}'
   rewrite
  ;
 rule_
  id_
   DOLLAR
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        '$'
   rewrite
  ;
 rule_
  id_
   STRAY_BRACKET
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        ']'
   rewrite
  ;
 rule_
  id_
   CHAR_LITERAL
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        '\''
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             ESC
        rewrite
        |
        alternative
         element
          elementNoOptionSpec
           atom
            notSet
             ~
             block
              (
              alternative
               element
                elementNoOptionSpec
                 atom
                  terminal_
                   '\\'
              rewrite
              |
              alternative
               element
                elementNoOptionSpec
                 atom
                  terminal_
                   '\''
              rewrite
              )
        rewrite
        )
       *
    element
     elementNoOptionSpec
      atom
       terminal_
        '\''
    element
     elementNoOptionSpec
      actionBlock
       {
       \n
        
        
        
        
        
        
        
        
        
        
        
        
       S
       t
       r
       i
       n
       g
       B
       u
       f
       f
       e
       r
        
       s
        
       =
        
       G
       r
       a
       m
       m
       a
       r
       .
       g
       e
       t
       U
       n
       e
       s
       c
       a
       p
       e
       d
       S
       t
       r
       i
       n
       g
       F
       r
       o
       m
       G
       r
       a
       m
       m
       a
       r
       S
       t
       r
       i
       n
       g
       L
       i
       t
       e
       r
       a
       l
       (
       $
       t
       e
       x
       t
       )
       ;
       \n
        
        
        
        
        
        
        
        
        
        
        
        
       i
       f
        
       (
        
       s
       .
       l
       e
       n
       g
       t
       h
       (
       )
        
       >
        
       1
        
       )
       \n
        
        
        
        
        
        
        
        
        
        
        
        
       {
       \n
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
       $
       t
       y
       p
       e
        
       =
        
       S
       T
       R
       I
       N
       G
       _
       L
       I
       T
       E
       R
       A
       L
       ;
       \n
        
        
        
        
        
        
        
        
        
        
        
        
       }
       \n
        
        
        
        
        
        
        
        
       }
   rewrite
  ;
 rule_
  id_
   DOUBLE_QUOTE_STRING_LITERAL
  ruleAction
   @
   id_
    init
   actionBlock
    {
    \n
     
     
     
     
    S
    t
    r
    i
    n
    g
    B
    u
    i
    l
    d
    e
    r
     
    b
    u
    i
    l
    d
    e
    r
     
    =
     
    n
    e
    w
     
    S
    t
    r
    i
    n
    g
    B
    u
    i
    l
    d
    e
    r
    (
    )
    ;
    \n
    }
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        '"'
    element
     elementNoOptionSpec
      actionBlock
       {
       b
       u
       i
       l
       d
       e
       r
       .
       a
       p
       p
       e
       n
       d
       (
       '"'
       )
       ;
       }
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           ebnf
            block
             (
             alternative
              element
               elementNoOptionSpec
                atom
                 terminal_
                  '\\\"'
             rewrite
             )
            =>
         element
          elementNoOptionSpec
           atom
            terminal_
             '\\'
         element
          elementNoOptionSpec
           atom
            terminal_
             '"'
         element
          elementNoOptionSpec
           actionBlock
            {
            b
            u
            i
            l
            d
            e
            r
            .
            a
            p
            p
            e
            n
            d
            (
            '"'
            )
            ;
            }
        rewrite
        |
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             '\\'
         element
          elementNoOptionSpec
           id_
            c
           =
           atom
            notSet
             ~
             notTerminal
              '"'
         element
          elementNoOptionSpec
           actionBlock
            {
            b
            u
            i
            l
            d
            e
            r
            .
            a
            p
            p
            e
            n
            d
            (
            "\\"
             
            +
             
            (
            c
            h
            a
            r
            )
            $
            c
            )
            ;
            }
        rewrite
        |
        alternative
         element
          elementNoOptionSpec
           id_
            c
           =
           atom
            notSet
             ~
             block
              (
              alternative
               element
                elementNoOptionSpec
                 atom
                  terminal_
                   '\\'
              rewrite
              |
              alternative
               element
                elementNoOptionSpec
                 atom
                  terminal_
                   '"'
              rewrite
              )
         element
          elementNoOptionSpec
           actionBlock
            {
            b
            u
            i
            l
            d
            e
            r
            .
            a
            p
            p
            e
            n
            d
            (
            (
            c
            h
            a
            r
            )
            $
            c
            )
            ;
            }
        rewrite
        )
       *
    element
     elementNoOptionSpec
      atom
       terminal_
        '"'
    element
     elementNoOptionSpec
      actionBlock
       {
       b
       u
       i
       l
       d
       e
       r
       .
       a
       p
       p
       e
       n
       d
       (
       '"'
       )
       ;
       }
    element
     elementNoOptionSpec
      actionBlock
       {
       \n
        
        
        
        
        
        
        
        
        
        
        
        
       s
       e
       t
       T
       e
       x
       t
       (
       b
       u
       i
       l
       d
       e
       r
       .
       t
       o
       S
       t
       r
       i
       n
       g
       (
       )
       )
       ;
       \n
        
        
        
        
        
        
        
        
       }
   rewrite
  ;
 rule_
  id_
   DOUBLE_ANGLE_STRING_LITERAL
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        '<<'
    element
     elementNoOptionSpec
      atom
       terminal_
        .
      ebnfSuffix
       *
    element
     elementNoOptionSpec
      atom
       terminal_
        '>>'
   rewrite
  ;
 rule_
  fragment
  id_
   ESC
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        '\\'
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             .
        rewrite
        )
   rewrite
  ;
 rule_
  fragment
  id_
   DIGIT
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       range_
        '0'
        ..
        '9'
   rewrite
  ;
 rule_
  fragment
  id_
   XDIGIT
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       range_
        '0'
        ..
        '9'
   rewrite
   |
   alternative
    element
     elementNoOptionSpec
      atom
       range_
        'a'
        ..
        'f'
   rewrite
   |
   alternative
    element
     elementNoOptionSpec
      atom
       range_
        'A'
        ..
        'F'
   rewrite
  ;
 rule_
  id_
   INT
  :
  altList
   alternative
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           atom
            range_
             '0'
             ..
             '9'
        rewrite
        )
       +
   rewrite
  ;
 rule_
  id_
   ARG_ACTION
  ruleAction
   @
   id_
    init
   actionBlock
    {
    \n
     
     
     
     
    L
    i
    s
    t
    <
    S
    t
    r
    i
    n
    g
    >
     
    t
    e
    x
    t
     
    =
     
    n
    e
    w
     
    A
    r
    r
    a
    y
    L
    i
    s
    t
    <
    S
    t
    r
    i
    n
    g
    >
    (
    )
     
    {
    {
     
    a
    d
    d
    (
    n
    u
    l
    l
    )
    ;
     
    }
    }
    ;
    \n
    }
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        '['
    element
     elementNoOptionSpec
      atom
       terminal_
        NESTED_ARG_ACTION
        argActionBlock
         [
         t
         e
         x
         t
         ]
    element
     elementNoOptionSpec
      atom
       terminal_
        ']'
    element
     elementNoOptionSpec
      actionBlock
       {
       s
       e
       t
       T
       e
       x
       t
       (
       t
       e
       x
       t
       .
       g
       e
       t
       (
       0
       )
       )
       ;
       }
   rewrite
  ;
 rule_
  fragment
  id_
   NESTED_ARG_ACTION
  argActionBlock
   [
   L
   i
   s
   t
   <
   S
   t
   r
   i
   n
   g
   >
    
   t
   e
   x
   t
   ]
  ruleAction
   @
   id_
    init
   actionBlock
    {
    \n
     
     
     
     
    $
    t
    e
    x
    t
    .
    s
    e
    t
    (
    0
    ,
     
    ""
    )
    ;
    \n
     
     
     
     
    S
    t
    r
    i
    n
    g
    B
    u
    i
    l
    d
    e
    r
     
    b
    u
    i
    l
    d
    e
    r
     
    =
     
    n
    e
    w
     
    S
    t
    r
    i
    n
    g
    B
    u
    i
    l
    d
    e
    r
    (
    )
    ;
    \n
    }
  :
  altList
   alternative
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           ebnf
            block
             (
             alternative
              element
               elementNoOptionSpec
                atom
                 terminal_
                  '\\]'
             rewrite
             )
            =>
         element
          elementNoOptionSpec
           atom
            terminal_
             '\\'
         element
          elementNoOptionSpec
           atom
            terminal_
             ']'
         element
          elementNoOptionSpec
           actionBlock
            {
            b
            u
            i
            l
            d
            e
            r
            .
            a
            p
            p
            e
            n
            d
            (
            "]"
            )
            ;
            }
        rewrite
        |
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             '\\'
         element
          elementNoOptionSpec
           id_
            c
           =
           atom
            notSet
             ~
             block
              (
              alternative
               element
                elementNoOptionSpec
                 atom
                  terminal_
                   ']'
              rewrite
              )
         element
          elementNoOptionSpec
           actionBlock
            {
            b
            u
            i
            l
            d
            e
            r
            .
            a
            p
            p
            e
            n
            d
            (
            "\\"
             
            +
             
            (
            c
            h
            a
            r
            )
            $
            c
            )
            ;
            }
        rewrite
        |
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             ACTION_STRING_LITERAL
         element
          elementNoOptionSpec
           actionBlock
            {
            b
            u
            i
            l
            d
            e
            r
            .
            a
            p
            p
            e
            n
            d
            (
            $
            A
            C
            T
            I
            O
            N
            _
            S
            T
            R
            I
            N
            G
            _
            L
            I
            T
            E
            R
            A
            L
            .
            t
            e
            x
            t
            )
            ;
            }
        rewrite
        |
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             ACTION_CHAR_LITERAL
         element
          elementNoOptionSpec
           actionBlock
            {
            b
            u
            i
            l
            d
            e
            r
            .
            a
            p
            p
            e
            n
            d
            (
            $
            A
            C
            T
            I
            O
            N
            _
            C
            H
            A
            R
            _
            L
            I
            T
            E
            R
            A
            L
            .
            t
            e
            x
            t
            )
            ;
            }
        rewrite
        |
        alternative
         element
          elementNoOptionSpec
           id_
            c
           =
           atom
            notSet
             ~
             block
              (
              alternative
               element
                elementNoOptionSpec
                 atom
                  terminal_
                   '\\'
              rewrite
              |
              alternative
               element
                elementNoOptionSpec
                 atom
                  terminal_
                   '"'
              rewrite
              |
              alternative
               element
                elementNoOptionSpec
                 atom
                  terminal_
                   '\''
              rewrite
              |
              alternative
               element
                elementNoOptionSpec
                 atom
                  terminal_
                   ']'
              rewrite
              )
         element
          elementNoOptionSpec
           actionBlock
            {
            b
            u
            i
            l
            d
            e
            r
            .
            a
            p
            p
            e
            n
            d
            (
            (
            c
            h
            a
            r
            )
            $
            c
            )
            ;
            }
        rewrite
        )
       *
    element
     elementNoOptionSpec
      actionBlock
       {
       \n
        
        
        
        
        
        
        
        
        
        
        
        
       $
       t
       e
       x
       t
       .
       s
       e
       t
       (
       0
       ,
        
       b
       u
       i
       l
       d
       e
       r
       .
       t
       o
       S
       t
       r
       i
       n
       g
       (
       )
       )
       ;
       \n
        
        
        
        
        
        
        
        
       }
   rewrite
  ;
 rule_
  id_
   ACTION
  ruleAction
   @
   id_
    init
   actionBlock
    {
    \n
     
     
     
     
    i
    n
    t
     
    a
    c
    t
    i
    o
    n
    L
    i
    n
    e
     
    =
     
    g
    e
    t
    L
    i
    n
    e
    (
    )
    ;
    \n
     
     
     
     
    i
    n
    t
     
    a
    c
    t
    i
    o
    n
    C
    o
    l
    u
    m
    n
     
    =
     
    g
    e
    t
    C
    h
    a
    r
    P
    o
    s
    i
    t
    i
    o
    n
    I
    n
    L
    i
    n
    e
    (
    )
    ;
    \n
    }
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        NESTED_ACTION
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             '?'
         element
          elementNoOptionSpec
           actionBlock
            {
            $
            t
            y
            p
            e
             
            =
             
            S
            E
            M
            P
            R
            E
            D
            ;
            }
        rewrite
        )
       ?
    element
     elementNoOptionSpec
      actionBlock
       {
       \n
        
        
        
        
        
        
        
        
        
        
        
        
       S
       t
       r
       i
       n
       g
        
       a
       c
       t
       i
       o
       n
        
       =
        
       $
       t
       e
       x
       t
       ;
       \n
        
        
        
        
        
        
        
        
        
        
        
        
       i
       n
       t
        
       n
        
       =
        
       1
       ;
        
       // num delimiter chars
       \n
        
        
        
        
        
        
        
        
        
        
        
        
       i
       f
        
       (
        
       a
       c
       t
       i
       o
       n
       .
       s
       t
       a
       r
       t
       s
       W
       i
       t
       h
       (
       "{{"
       )
        
       &
       &
        
       a
       c
       t
       i
       o
       n
       .
       e
       n
       d
       s
       W
       i
       t
       h
       (
       "}}"
       )
        
       )
       \n
        
        
        
        
        
        
        
        
        
        
        
        
       {
       \n
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
       $
       t
       y
       p
       e
        
       =
        
       F
       O
       R
       C
       E
       D
       _
       A
       C
       T
       I
       O
       N
       ;
       \n
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
       n
        
       =
        
       2
       ;
       \n
        
        
        
        
        
        
        
        
        
        
        
        
       }
       \n
        
        
        
        
        
        
        
        
        
        
        
        
       a
       c
       t
       i
       o
       n
        
       =
        
       a
       c
       t
       i
       o
       n
       .
       s
       u
       b
       s
       t
       r
       i
       n
       g
       (
       n
       ,
       a
       c
       t
       i
       o
       n
       .
       l
       e
       n
       g
       t
       h
       (
       )
       -
       n
        
       -
        
       (
       $
       t
       y
       p
       e
       =
       =
       S
       E
       M
       P
       R
       E
       D
        
       ?
        
       1
        
       :
        
       0
       )
       )
       ;
       \n
        
        
        
        
        
        
        
        
        
        
        
        
       s
       e
       t
       T
       e
       x
       t
       (
       a
       c
       t
       i
       o
       n
       )
       ;
       \n
        
        
        
        
        
        
        
        
       }
   rewrite
  ;
 rule_
  fragment
  id_
   NESTED_ACTION
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        '{'
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             NESTED_ACTION
        rewrite
        |
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             ACTION_CHAR_LITERAL
        rewrite
        |
        alternative
         element
          elementNoOptionSpec
           ebnf
            block
             (
             alternative
              element
               elementNoOptionSpec
                atom
                 terminal_
                  '//'
             rewrite
             |
             alternative
              element
               elementNoOptionSpec
                atom
                 terminal_
                  '/*'
             rewrite
             )
            =>
         element
          elementNoOptionSpec
           atom
            terminal_
             COMMENT
        rewrite
        |
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             ACTION_STRING_LITERAL
        rewrite
        |
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             ACTION_ESC
        rewrite
        |
        alternative
         element
          elementNoOptionSpec
           atom
            notSet
             ~
             block
              (
              alternative
               element
                elementNoOptionSpec
                 atom
                  terminal_
                   '{'
              rewrite
              |
              alternative
               element
                elementNoOptionSpec
                 atom
                  terminal_
                   '\''
              rewrite
              |
              alternative
               element
                elementNoOptionSpec
                 atom
                  terminal_
                   '"'
              rewrite
              |
              alternative
               element
                elementNoOptionSpec
                 atom
                  terminal_
                   '\\'
              rewrite
              |
              alternative
               element
                elementNoOptionSpec
                 atom
                  terminal_
                   '}'
              rewrite
              )
        rewrite
        )
       *
    element
     elementNoOptionSpec
      atom
       terminal_
        '}'
   rewrite
  ;
 rule_
  fragment
  id_
   ACTION_CHAR_LITERAL
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        '\''
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             ACTION_ESC
        rewrite
        |
        alternative
         element
          elementNoOptionSpec
           atom
            notSet
             ~
             block
              (
              alternative
               element
                elementNoOptionSpec
                 atom
                  terminal_
                   '\\'
              rewrite
              |
              alternative
               element
                elementNoOptionSpec
                 atom
                  terminal_
                   '\''
              rewrite
              )
        rewrite
        )
       *
    element
     elementNoOptionSpec
      atom
       terminal_
        '\''
   rewrite
  ;
 rule_
  fragment
  id_
   ACTION_STRING_LITERAL
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        '"'
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             ACTION_ESC
        rewrite
        |
        alternative
         element
          elementNoOptionSpec
           atom
            notSet
             ~
             block
              (
              alternative
               element
                elementNoOptionSpec
                 atom
                  terminal_
                   '\\'
              rewrite
              |
              alternative
               element
                elementNoOptionSpec
                 atom
                  terminal_
                   '"'
              rewrite
              )
        rewrite
        )
       *
    element
     elementNoOptionSpec
      atom
       terminal_
        '"'
   rewrite
  ;
 rule_
  fragment
  id_
   ACTION_ESC
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        '\\\''
   rewrite
   |
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        '\\\"'
   rewrite
   |
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        '\\'
    element
     elementNoOptionSpec
      atom
       notSet
        ~
        block
         (
         alternative
          element
           elementNoOptionSpec
            atom
             terminal_
              '\''
         rewrite
         |
         alternative
          element
           elementNoOptionSpec
            atom
             terminal_
              '"'
         rewrite
         )
   rewrite
  ;
 rule_
  id_
   TOKEN_REF
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       range_
        'A'
        ..
        'Z'
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           atom
            range_
             'a'
             ..
             'z'
        rewrite
        |
        alternative
         element
          elementNoOptionSpec
           atom
            range_
             'A'
             ..
             'Z'
        rewrite
        |
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             '_'
        rewrite
        |
        alternative
         element
          elementNoOptionSpec
           atom
            range_
             '0'
             ..
             '9'
        rewrite
        )
       *
   rewrite
  ;
 rule_
  id_
   TOKENS
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        'tokens'
    element
     elementNoOptionSpec
      atom
       terminal_
        WS_LOOP
    element
     elementNoOptionSpec
      atom
       terminal_
        '{'
   rewrite
  ;
 rule_
  id_
   OPTIONS
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        'options'
    element
     elementNoOptionSpec
      atom
       terminal_
        WS_LOOP
    element
     elementNoOptionSpec
      atom
       terminal_
        '{'
   rewrite
  ;
 rule_
  id_
   RULE_REF
  ruleAction
   @
   id_
    init
   actionBlock
    {
    \n
     
     
     
     
    i
    n
    t
     
    t
    =
    0
    ;
    \n
    }
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       range_
        'a'
        ..
        'z'
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           atom
            range_
             'a'
             ..
             'z'
        rewrite
        |
        alternative
         element
          elementNoOptionSpec
           atom
            range_
             'A'
             ..
             'Z'
        rewrite
        |
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             '_'
        rewrite
        |
        alternative
         element
          elementNoOptionSpec
           atom
            range_
             '0'
             ..
             '9'
        rewrite
        )
       *
   rewrite
  ;
 rule_
  fragment
  id_
   WS_LOOP
  :
  altList
   alternative
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             WS
        rewrite
        |
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             COMMENT
        rewrite
        )
       *
   rewrite
  ;
 rule_
  fragment
  id_
   WS_OPT
  :
  altList
   alternative
    element
     elementNoOptionSpec
      ebnf
       block
        (
        alternative
         element
          elementNoOptionSpec
           atom
            terminal_
             WS
        rewrite
        )
       ?
   rewrite
  ;
 rule_
  fragment
  id_
   SRC
  :
  altList
   alternative
    element
     elementNoOptionSpec
      atom
       terminal_
        'src'
    element
     elementNoOptionSpec
      atom
       terminal_
        ' '
    element
     elementNoOptionSpec
      id_
       file
      =
      atom
       terminal_
        ACTION_STRING_LITERAL
    element
     elementNoOptionSpec
      atom
       terminal_
        ' '
    element
     elementNoOptionSpec
      id_
       line
      =
      atom
       terminal_
        INT
    element
     elementNoOptionSpec
      actionBlock
       {
       \n
        
        
        
        
        
        
        
        
        
        
        
        
       s
       e
       t
       F
       i
       l
       e
       N
       a
       m
       e
       (
       $
       f
       i
       l
       e
       .
       t
       e
       x
       t
       .
       s
       u
       b
       s
       t
       r
       i
       n
       g
       (
       1
       ,
       $
       f
       i
       l
       e
       .
       t
       e
       x
       t
       .
       l
       e
       n
       g
       t
       h
       (
       )
       -
       1
       )
       )
       ;
       \n
        
        
        
        
        
        
        
        
        
        
        
        
       i
       n
       p
       u
       t
       .
       s
       e
       t
       L
       i
       n
       e
       (
       I
       n
       t
       e
       g
       e
       r
       .
       p
       a
       r
       s
       e
       I
       n
       t
       (
       $
       l
       i
       n
       e
       .
       t
       e
       x
       t
       )
        
       -
        
       1
       )
       ;
        
        
       // -1 because SL_COMMENT will increment the line no. KR
       \n
        
        
        
        
        
        
        
        
       }
   rewrite
  ;
 <EOF>
