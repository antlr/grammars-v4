ql
 moduleBody
  alias
   annotations
   module
   modulename
    simpleId
     ModAlias
   =
   moduleExpr
    modulename
     simpleId
      ModuleName
   ;
  alias
   annotations
    annotation
     simpleAnnotation
      deprecated
   module
   modulename
    simpleId
     OldVersion
   =
   moduleExpr
    modulename
     simpleId
      NewVersion
   ;
  typeunion
   annotations
   class
   TypeAlias
   =
   unionBranches
    type
     classname
      TypeName
   ;
  typeunion
   annotations
   class
   Bool
   =
   unionBranches
    type
     boolean
   ;
  importDeclaration
   annotations
   import
   importModuleExpr
    qualId
     simpleId
      OneTwoThreeLib
  typeunion
   annotations
   class
   OT
   =
   unionBranches
    type
     moduleExpr
      modulename
       simpleId
        M
     ::
     classname
      OneTwo
   ;
  select
   from
   var_decls
    var_decl
     type
      classname
       OT
     varname
      ot
   select
   as_exprs
    as_expr
     expr
      multExpr
       unaryExpr
        nonOpExpr
         primary
          primaryBase
           variable
            varname
             ot
  predicate
   annotations
   head
    type
     int
    predicateName
     getSuccessor
    (
    var_decls
     var_decl
      type
       int
      varname
       i
    )
   optbody
    {
    formula
     conjunction_formula
      implies_formula
       formula_base
        comparison
         expr
          multExpr
           unaryExpr
            nonOpExpr
             primary
              primaryBase
               variable
                result
         compop
          =
         expr
          multExpr
           unaryExpr
            nonOpExpr
             primary
              primaryBase
               variable
                varname
                 i
          +
          multExpr
           unaryExpr
            nonOpExpr
             primary
              primaryBase
               literal
                1
      and
      formula
       conjunction_formula
        implies_formula
         formula_base
          inrange
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 variable
                  varname
                   i
           in
           range
            [
            expr
             multExpr
              unaryExpr
               nonOpExpr
                primary
                 primaryBase
                  literal
                   1
            ..
            expr
             multExpr
              unaryExpr
               nonOpExpr
                primary
                 primaryBase
                  literal
                   9
            ]
    }
  alias
   annotations
   predicate
   predicateName
    succ
   =
   predicateRef
    predicateCallName
     getSuccessor
   /
   1
   ;
  predicate
   annotations
   head
    predicate
    predicateName
     isSmall
    (
    var_decls
     var_decl
      type
       int
      varname
       i
    )
   optbody
    {
    formula
     conjunction_formula
      implies_formula
       formula_base
        inrange
         expr
          multExpr
           unaryExpr
            nonOpExpr
             primary
              primaryBase
               variable
                varname
                 i
         in
         range
          [
          expr
           multExpr
            unaryExpr
             nonOpExpr
              primary
               primaryBase
                literal
                 1
          ..
          expr
           multExpr
            unaryExpr
             nonOpExpr
              primary
               primaryBase
                literal
                 9
          ]
    }
  alias
   annotations
   predicate
   predicateName
    lessThanTen
   =
   predicateRef
    predicateCallName
     isSmall
   /
   1
   ;
 <EOF>
