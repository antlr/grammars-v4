ql
 moduleBody
  class_
   annotations
   class
   classname
    OneTwoThree
   extends
   type
    int
   {
   member
    character
     annotations
     classname
      OneTwoThree
     (
     )
     {
     formula
      conjunction_formula
       implies_formula
        formula_base
         comparison
          expr
           multExpr
            unaryExpr
             nonOpExpr
              primary
               primaryBase
                variable
                 this
          compop
           =
          expr
           multExpr
            unaryExpr
             nonOpExpr
              primary
               primaryBase
                literal
                 1
      or
      formula
       conjunction_formula
        implies_formula
         formula_base
          comparison
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 variable
                  this
           compop
            =
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 literal
                  2
       or
       formula
        conjunction_formula
         implies_formula
          formula_base
           comparison
            expr
             multExpr
              unaryExpr
               nonOpExpr
                primary
                 primaryBase
                  variable
                   this
            compop
             =
            expr
             multExpr
              unaryExpr
               nonOpExpr
                primary
                 primaryBase
                  literal
                   3
     }
   member
    predicate
     annotations
     head
      type
       string
      predicateName
       getAString
      (
      var_decls
      )
     optbody
      {
      formula
       conjunction_formula
        implies_formula
         formula_base
          comparison
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 variable
                  result
           compop
            =
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 literal
                  "One, two or three: "
            +
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 variable
                  this
                primaryPostfixOp
                 .
                 predicateName
                  toString
                 (
                 )
      }
   member
    predicate
     annotations
     head
      predicate
      predicateName
       isEven
      (
      var_decls
      )
     optbody
      {
      formula
       conjunction_formula
        implies_formula
         formula_base
          comparison
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 variable
                  this
           compop
            =
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 literal
                  2
      }
   }
  class_
   annotations
   class
   classname
    SmallInt
   extends
   type
    int
   {
   member
    character
     annotations
     classname
      SmallInt
     (
     )
     {
     formula
      conjunction_formula
       implies_formula
        formula_base
         comparison
          expr
           multExpr
            unaryExpr
             nonOpExpr
              primary
               primaryBase
                variable
                 this
          compop
           =
          expr
           multExpr
            unaryExpr
             nonOpExpr
              primary
               primaryBase
                range
                 [
                 expr
                  multExpr
                   unaryExpr
                    nonOpExpr
                     primary
                      primaryBase
                       literal
                        1
                 ..
                 expr
                  multExpr
                   unaryExpr
                    nonOpExpr
                     primary
                      primaryBase
                       literal
                        10
                 ]
     }
   }
  class_
   annotations
   class
   classname
    DivisibleInt
   extends
   type
    classname
     SmallInt
   {
   member
    field
     annotations
     var_decl
      type
       classname
        SmallInt
      varname
       divisor
     ;
   member
    character
     annotations
     classname
      DivisibleInt
     (
     )
     {
     formula
      conjunction_formula
       implies_formula
        formula_base
         comparison
          expr
           multExpr
            unaryExpr
             nonOpExpr
              primary
               primaryBase
                variable
                 this
            %
            unaryExpr
             nonOpExpr
              primary
               primaryBase
                variable
                 varname
                  divisor
          compop
           =
          expr
           multExpr
            unaryExpr
             nonOpExpr
              primary
               primaryBase
                literal
                 0
     }
   member
    predicate
     annotations
     head
      type
       classname
        SmallInt
      predicateName
       getADivisor
      (
      var_decls
      )
     optbody
      {
      formula
       conjunction_formula
        implies_formula
         formula_base
          comparison
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 variable
                  result
           compop
            =
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 variable
                  varname
                   divisor
      }
   }
  class_
   annotations
   class
   classname
    OneTwo
   extends
   type
    classname
     OneTwoThree
   {
   member
    character
     annotations
     classname
      OneTwo
     (
     )
     {
     formula
      conjunction_formula
       implies_formula
        formula_base
         comparison
          expr
           multExpr
            unaryExpr
             nonOpExpr
              primary
               primaryBase
                variable
                 this
          compop
           =
          expr
           multExpr
            unaryExpr
             nonOpExpr
              primary
               primaryBase
                literal
                 1
      or
      formula
       conjunction_formula
        implies_formula
         formula_base
          comparison
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 variable
                  this
           compop
            =
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 literal
                  2
     }
   member
    predicate
     annotations
      annotation
       simpleAnnotation
        override
     head
      type
       string
      predicateName
       getAString
      (
      var_decls
      )
     optbody
      {
      formula
       conjunction_formula
        implies_formula
         formula_base
          comparison
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 variable
                  result
           compop
            =
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 literal
                  "One or two: "
            +
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 variable
                  this
                primaryPostfixOp
                 .
                 predicateName
                  toString
                 (
                 )
      }
   }
  class_
   annotations
   class
   classname
    TwoThree
   extends
   type
    classname
     OneTwoThree
   {
   member
    character
     annotations
     classname
      TwoThree
     (
     )
     {
     formula
      conjunction_formula
       implies_formula
        formula_base
         comparison
          expr
           multExpr
            unaryExpr
             nonOpExpr
              primary
               primaryBase
                variable
                 this
          compop
           =
          expr
           multExpr
            unaryExpr
             nonOpExpr
              primary
               primaryBase
                literal
                 2
      or
      formula
       conjunction_formula
        implies_formula
         formula_base
          comparison
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 variable
                  this
           compop
            =
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 literal
                  3
     }
   member
    predicate
     annotations
      annotation
       simpleAnnotation
        override
     head
      type
       string
      predicateName
       getAString
      (
      var_decls
      )
     optbody
      {
      formula
       conjunction_formula
        implies_formula
         formula_base
          comparison
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 variable
                  result
           compop
            =
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 literal
                  "Two or three: "
            +
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 variable
                  this
                primaryPostfixOp
                 .
                 predicateName
                  toString
                 (
                 )
      }
   }
  typeunion
   annotations
    annotation
     simpleAnnotation
      final
   class
   FinalOneTwoThree
   =
   unionBranches
    type
     classname
      OneTwoThree
   ;
  class_
   annotations
   class
   classname
    OneTwoFinalExtension
   extends
   type
    classname
     FinalOneTwoThree
   {
   member
    character
     annotations
     classname
      OneTwoFinalExtension
     (
     )
     {
     formula
      conjunction_formula
       implies_formula
        formula_base
         comparison
          expr
           multExpr
            unaryExpr
             nonOpExpr
              primary
               primaryBase
                variable
                 this
          compop
           =
          expr
           multExpr
            unaryExpr
             nonOpExpr
              primary
               primaryBase
                literal
                 1
      or
      formula
       conjunction_formula
        implies_formula
         formula_base
          comparison
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 variable
                  this
           compop
            =
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 literal
                  2
     }
   member
    predicate
     annotations
     head
      type
       string
      predicateName
       getAString
      (
      var_decls
      )
     optbody
      {
      formula
       conjunction_formula
        implies_formula
         formula_base
          comparison
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 variable
                  result
           compop
            =
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 literal
                  "One or two: "
            +
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 variable
                  this
                primaryPostfixOp
                 .
                 predicateName
                  toString
                 (
                 )
      }
   }
  class_
   annotations
   class
   classname
    Interface
   extends
   type
    int
   {
   member
    character
     annotations
     classname
      Interface
     (
     )
     {
     formula
      conjunction_formula
       implies_formula
        formula_base
         inrange
          expr
           multExpr
            unaryExpr
             nonOpExpr
              primary
               primaryBase
                variable
                 this
          in
          range
           [
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 literal
                  1
           ..
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 literal
                  10
           ]
     }
   member
    predicate
     annotations
     head
      type
       string
      predicateName
       foo
      (
      var_decls
      )
     optbody
      {
      formula
       conjunction_formula
        implies_formula
         formula_base
          comparison
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 variable
                  result
           compop
            =
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 literal
                  ""
      }
   }
  class_
   annotations
   class
   classname
    Foo
   extends
   type
    int
   {
   member
    character
     annotations
     classname
      Foo
     (
     )
     {
     formula
      conjunction_formula
       implies_formula
        formula_base
         inrange
          expr
           multExpr
            unaryExpr
             nonOpExpr
              primary
               primaryBase
                variable
                 this
          in
          range
           [
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 literal
                  1
           ..
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 literal
                  5
           ]
     }
   member
    predicate
     annotations
     head
      type
       string
      predicateName
       foo
      (
      var_decls
      )
     optbody
      {
      formula
       conjunction_formula
        implies_formula
         formula_base
          comparison
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 variable
                  result
           compop
            =
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 literal
                  "foo"
      }
   }
  class_
   annotations
   class
   classname
    Bar
   extends
   type
    classname
     Interface
   instanceof
   type
    classname
     Foo
   {
   member
    predicate
     annotations
      annotation
       simpleAnnotation
        override
     head
      type
       string
      predicateName
       foo
      (
      var_decls
      )
     optbody
      {
      formula
       conjunction_formula
        implies_formula
         formula_base
          comparison
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 variable
                  result
           compop
            =
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 literal
                  "bar"
      }
   }
  datatype
   annotations
   newtype
   dtName
    T
   =
   dtBranches
    dtBranche
     dtBranchName
      Type1
     (
     var_decls
      var_decl
       type
        classname
         SmallInt
       varname
        a
      ,
      var_decl
       type
        classname
         SmallInt
       varname
        b
     )
     {
     formula
      conjunction_formula
       implies_formula
        formula_base
         comparison
          expr
           multExpr
            unaryExpr
             nonOpExpr
              primary
               primaryBase
                variable
                 varname
                  a
          compop
           =
          expr
           multExpr
            unaryExpr
             nonOpExpr
              primary
               primaryBase
                variable
                 varname
                  b
     }
    or
    dtBranche
     dtBranchName
      Type2
     (
     var_decls
      var_decl
       type
        classname
         SmallInt
       varname
        c
     )
    or
    dtBranche
     dtBranchName
      Type3
     (
     var_decls
     )
  datatype
   annotations
    annotation
     simpleAnnotation
      private
   newtype
   dtName
    TTaintType
   =
   dtBranches
    dtBranche
     dtBranchName
      TExactValue
     (
     var_decls
     )
    or
    dtBranche
     dtBranchName
      TTaintedValue
     (
     var_decls
     )
  class_
   annotations
   class
   classname
    TaintType
   extends
   type
    classname
     TTaintType
   {
   member
    predicate
     annotations
     head
      type
       string
      predicateName
       toString
      (
      var_decls
      )
     optbody
      {
      formula
       conjunction_formula
        implies_formula
         formula_base
          comparison
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 variable
                  this
           compop
            =
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 callwithresults_nomember
                  predicateRef
                   predicateCallName
                    TExactValue
                  (
                  )
        and
        formula
         conjunction_formula
          implies_formula
           formula_base
            comparison
             expr
              multExpr
               unaryExpr
                nonOpExpr
                 primary
                  primaryBase
                   variable
                    result
             compop
              =
             expr
              multExpr
               unaryExpr
                nonOpExpr
                 primary
                  primaryBase
                   literal
                    "exact"
         or
         formula
          conjunction_formula
           implies_formula
            formula_base
             comparison
              expr
               multExpr
                unaryExpr
                 nonOpExpr
                  primary
                   primaryBase
                    variable
                     this
              compop
               =
              expr
               multExpr
                unaryExpr
                 nonOpExpr
                  primary
                   primaryBase
                    callwithresults_nomember
                     predicateRef
                      predicateCallName
                       TTaintedValue
                     (
                     )
           and
           formula
            conjunction_formula
             implies_formula
              formula_base
               comparison
                expr
                 multExpr
                  unaryExpr
                   nonOpExpr
                    primary
                     primaryBase
                      variable
                       result
                compop
                 =
                expr
                 multExpr
                  unaryExpr
                   nonOpExpr
                    primary
                     primaryBase
                      literal
                       "tainted"
      }
   }
  class_
   annotations
   class
   classname
    Untainted
   extends
   type
    classname
     TaintType
   ,
   type
    classname
     TExactValue
   {
   }
  class_
   annotations
   class
   classname
    Tainted
   extends
   type
    classname
     TaintType
   ,
   type
    classname
     TTaintedValue
   {
   }
  typeunion
   annotations
   class
   TypeX
   =
   unionBranches
    type
     classname
      Type1
    or
    type
     classname
      Type2
   ;
  select
   from
   var_decls
    var_decl
     type
      classname
       DivisibleInt
     varname
      i
   select
   as_exprs
    as_expr
     expr
      multExpr
       unaryExpr
        nonOpExpr
         primary
          primaryBase
           variable
            varname
             i
    ,
    as_expr
     expr
      multExpr
       unaryExpr
        nonOpExpr
         primary
          primaryBase
           variable
            varname
             i
          primaryPostfixOp
           .
           predicateName
            getADivisor
           (
           )
    ,
    as_expr
     expr
      multExpr
       unaryExpr
        nonOpExpr
         primary
          primaryBase
           literal
            1
          primaryPostfixOp
           .
           (
           type
            classname
             OneTwoThree
           )
          primaryPostfixOp
           .
           predicateName
            getAString
           (
           )
    ,
    as_expr
     expr
      multExpr
       unaryExpr
        nonOpExpr
         primary
          primaryBase
           literal
            1
          primaryPostfixOp
           .
           (
           type
            classname
             OneTwoThree
           )
          primaryPostfixOp
           .
           predicateName
            getAString
           (
           )
          primaryPostfixOp
           .
           predicateName
            toUpperCase
           (
           )
 <EOF>
