ql
 moduleBody
  signature
   predicateSignature
    signature
    head
     type
      int
     predicateName
      operator
     (
     var_decls
      var_decl
       type
        int
       varname
        lhs
      ,
      var_decl
       type
        int
       varname
        rhs
     )
    ;
  signature
   typeSignature
    annotations
    signature
    class
    classname
     ExtendsInt
    extends
    type
     int
    ;
  signature
   typeSignature
    annotations
    signature
    class
    classname
     CanBePrinted
    {
    signaturePredicate
     annotations
     head
      type
       string
      predicateName
       toString
      (
      var_decls
      )
     ;
    }
  signature
   moduleSignature
    signature
    module
    moduleSignatureName
     MSig
    {
    moduleSignatureBody
     signatureType
      annotations
      class
      classname
       T
      ;
     signaturePredicate
      annotations
      head
       predicate
       predicateName
        restriction
       (
       var_decls
        var_decl
         type
          classname
           T
         varname
          t
       )
      ;
     defaultPredicate
      annotations
      default
      head
       type
        string
       predicateName
        descr
       (
       var_decls
        var_decl
         type
          classname
           T
         varname
          t
       )
      {
      formula
       conjunction_formula
        implies_formula
         formula_base
          comparison
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 variable
                  result
           compop
            =
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 literal
                  "default"
      }
    }
  module
   module
   modulename
    simpleId
     Module
   implements
    implements
    moduleSignatureExpr
     moduleSignatureName
      MSig
   {
   moduleBody
    datatype
     annotations
     newtype
     dtName
      T
     =
     dtBranches
      dtBranche
       dtBranchName
        A
       (
       var_decls
       )
      or
      dtBranche
       dtBranchName
        B
       (
       var_decls
       )
    predicate
     annotations
     head
      predicate
      predicateName
       restriction
      (
      var_decls
       var_decl
        type
         classname
          T
        varname
         t
      )
     optbody
      {
      formula
       conjunction_formula
        implies_formula
         formula_base
          comparison
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 variable
                  varname
                   t
           compop
            =
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 callwithresults_nomember
                  predicateRef
                   predicateCallName
                    A
                  (
                  )
      }
   }
  signature
   typeSignature
    annotations
    signature
    class
    classname
     NodeSig
    ;
  signature
   moduleSignature
    signature
    module
    moduleSignatureName
     EdgeSig
    parameters
     <
     signatureExpr
      simpleId
       NodeSig
     parameterName
      simpleId
       Node
     >
    {
    moduleSignatureBody
     signaturePredicate
      annotations
      head
       predicate
       predicateName
        apply
       (
       var_decls
        var_decl
         type
          classname
           Node
         varname
          src
        ,
        var_decl
         type
          classname
           Node
         varname
          dst
       )
      ;
    }
  module
   module
   modulename
    simpleId
     Reachability
   parameters
    <
    signatureExpr
     simpleId
      NodeSig
    parameterName
     simpleId
      Node
    ,
    signatureExpr
     simpleId
      EdgeSig
     arguments
      <
      argument
       moduleExpr
        modulename
         simpleId
          Node
      >
    parameterName
     simpleId
      Edge
    >
   {
   moduleBody
    predicate
     annotations
     head
      type
       classname
        Node
      predicateName
       reachableFrom
      (
      var_decls
       var_decl
        type
         classname
          Node
        varname
         src
      )
     optbody
      {
      formula
       conjunction_formula
        implies_formula
         formula_base
          call
           predicateRef
            moduleExpr
             modulename
              simpleId
               Edge
            ::
            predicateCallName
             apply
           closure
            +
           (
           exprs
            expr
             multExpr
              unaryExpr
               nonOpExpr
                primary
                 primaryBase
                  variable
                   varname
                    src
            ,
            expr
             multExpr
              unaryExpr
               nonOpExpr
                primary
                 primaryBase
                  variable
                   result
           )
      }
   }
 <EOF>
