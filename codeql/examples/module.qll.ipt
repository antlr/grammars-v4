ql
 moduleBody
  module
   module
   modulename
    simpleId
     Example
   {
   moduleBody
    class_
     annotations
     class
     classname
      OneTwoThree
     extends
     type
      int
     {
     member
      character
       annotations
       classname
        OneTwoThree
       (
       )
       {
       formula
        conjunction_formula
         implies_formula
          formula_base
           comparison
            expr
             multExpr
              unaryExpr
               nonOpExpr
                primary
                 primaryBase
                  variable
                   this
            compop
             =
            expr
             multExpr
              unaryExpr
               nonOpExpr
                primary
                 primaryBase
                  literal
                   1
        or
        formula
         conjunction_formula
          implies_formula
           formula_base
            comparison
             expr
              multExpr
               unaryExpr
                nonOpExpr
                 primary
                  primaryBase
                   variable
                    this
             compop
              =
             expr
              multExpr
               unaryExpr
                nonOpExpr
                 primary
                  primaryBase
                   literal
                    2
         or
         formula
          conjunction_formula
           implies_formula
            formula_base
             comparison
              expr
               multExpr
                unaryExpr
                 nonOpExpr
                  primary
                   primaryBase
                    variable
                     this
              compop
               =
              expr
               multExpr
                unaryExpr
                 nonOpExpr
                  primary
                   primaryBase
                    literal
                     3
       }
     }
   }
  predicate
   annotations
    annotation
     argsAnnotation
      bindingset
      [
      variable
       result
      ]
    annotation
     argsAnnotation
      bindingset
      [
      variable
       varname
        x
      ]
   head
    type
     int
    predicateName
     increment
    (
    var_decls
     var_decl
      type
       int
      varname
       x
    )
   optbody
    {
    formula
     conjunction_formula
      implies_formula
       formula_base
        comparison
         expr
          multExpr
           unaryExpr
            nonOpExpr
             primary
              primaryBase
               variable
                result
         compop
          =
         expr
          multExpr
           unaryExpr
            nonOpExpr
             primary
              primaryBase
               variable
                varname
                 x
          +
          multExpr
           unaryExpr
            nonOpExpr
             primary
              primaryBase
               literal
                1
    }
  alias
   annotations
   module
   modulename
    simpleId
     IncrementTwice
   =
   moduleExpr
    modulename
     simpleId
      M
    arguments
     <
     argument
      predicateRef
       predicateCallName
        increment
      /
      1
     ,
     argument
      predicateRef
       predicateCallName
        increment
      /
      1
     >
   ;
  signature
   predicateSignature
    annotation
     argsAnnotation
      bindingset
      [
      variable
       varname
        x
      ]
    signature
    head
     type
      int
     predicateName
      transformer
     (
     var_decls
      var_decl
       type
        int
       varname
        x
     )
    ;
  module
   module
   modulename
    simpleId
     M
   parameters
    <
    signatureExpr
     simpleId
      transformer
     /
     1
    parameterName
     simpleId
      first
    ,
    signatureExpr
     simpleId
      transformer
     /
     1
    parameterName
     simpleId
      second
    >
   {
   moduleBody
    predicate
     annotations
      annotation
       argsAnnotation
        bindingset
        [
        variable
         varname
          x
        ]
     head
      type
       int
      predicateName
       applyBoth
      (
      var_decls
       var_decl
        type
         int
        varname
         x
      )
     optbody
      {
      formula
       conjunction_formula
        implies_formula
         formula_base
          comparison
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 variable
                  result
           compop
            =
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 callwithresults_nomember
                  predicateRef
                   predicateCallName
                    second
                  (
                  exprs
                   expr
                    multExpr
                     unaryExpr
                      nonOpExpr
                       primary
                        primaryBase
                         callwithresults_nomember
                          predicateRef
                           predicateCallName
                            first
                          (
                          exprs
                           expr
                            multExpr
                             unaryExpr
                              nonOpExpr
                               primary
                                primaryBase
                                 variable
                                  varname
                                   x
                          )
                  )
      }
   }
  signature
   typeSignature
    annotations
     annotation
      argsAnnotation
       bindingset
       [
       variable
        this
       ]
    signature
    class
    classname
     TSig
    ;
  module
   module
   modulename
    simpleId
     M1
   parameters
    <
    signatureExpr
     simpleId
      TSig
    parameterName
     simpleId
      T
    >
   {
   moduleBody
    datatype
     annotations
     newtype
     dtName
      A
     =
     dtBranches
      dtBranche
       dtBranchName
        B
       (
       var_decls
       )
      or
      dtBranche
       dtBranchName
        C
       (
       var_decls
       )
   }
  predicate
   annotations
   head
    type
     string
    predicateName
     foo
    (
    var_decls
     var_decl
      type
       moduleExpr
        modulename
         simpleId
          M1
        arguments
         <
         argument
          type
           int
         >
       ::
       classname
        A
      varname
       a
    )
   optbody
    {
    formula
     conjunction_formula
      implies_formula
       formula_base
        comparison
         expr
          multExpr
           unaryExpr
            nonOpExpr
             primary
              primaryBase
               variable
                result
         compop
          =
         expr
          multExpr
           unaryExpr
            nonOpExpr
             primary
              primaryBase
               literal
                "1"
    }
  predicate
   annotations
   head
    predicate
    predicateName
     test
    (
    var_decls
    )
   optbody
    {
    formula
     conjunction_formula
      implies_formula
       formula_base
        comparison
         expr
          multExpr
           unaryExpr
            nonOpExpr
             primary
              primaryBase
               callwithresults_nomember
                predicateRef
                 predicateCallName
                  foo
                (
                exprs
                 expr
                  multExpr
                   unaryExpr
                    nonOpExpr
                     primary
                      primaryBase
                       callwithresults_nomember
                        predicateRef
                         moduleExpr
                          modulename
                           simpleId
                            M1
                          arguments
                           <
                           argument
                            type
                             int
                           >
                         ::
                         predicateCallName
                          B
                        (
                        )
                )
         compop
          =
         expr
          multExpr
           unaryExpr
            nonOpExpr
             primary
              primaryBase
               literal
                ""
    }
 <EOF>
