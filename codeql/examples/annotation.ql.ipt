ql
 moduleBody
  module
   annotation
    simpleAnnotation
     private
   module
   modulename
    simpleId
     M
   {
   moduleBody
   }
  module
   module
   modulename
    simpleId
     M1
   {
   moduleBody
    predicate
     annotations
      annotation
       simpleAnnotation
        private
     head
      type
       int
      predicateName
       foo
      (
      var_decls
      )
     optbody
      {
      formula
       conjunction_formula
        implies_formula
         formula_base
          comparison
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 variable
                  result
           compop
            =
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 literal
                  1
      }
    alias
     annotations
     predicate
     predicateName
      bar
     =
     predicateRef
      predicateCallName
       foo
     /
     0
     ;
   }
  class_
   annotations
    annotation
     simpleAnnotation
      abstract
   class
   classname
    Configuration
   extends
   type
    string
   {
   member
    predicate
     annotations
      annotation
       simpleAnnotation
        abstract
     head
      predicate
      predicateName
       isSource
      (
      var_decls
       var_decl
        type
         classname
          Node
        varname
         source
      )
     optbody
      ;
   }
  class_
   annotations
   class
   classname
    ConfigA
   extends
   type
    classname
     Configuration
   {
   member
    predicate
     annotations
      annotation
       simpleAnnotation
        override
     head
      predicate
      predicateName
       isSource
      (
      var_decls
       var_decl
        type
         classname
          Node
        varname
         source
      )
     optbody
      {
      formula
       conjunction_formula
        implies_formula
         formula_base
          call
           predicateRef
            predicateCallName
             keywordPredCallAllowed
              any
           (
           )
      }
   }
  class_
   annotations
   class
   classname
    ConfigB
   extends
   type
    classname
     ConfigA
   {
   }
  class_
   annotations
    annotation
     simpleAnnotation
      deprecated
   class
   classname
    DataFlowNode
   extends
   type
    dbbasetype
     @dataflownode
   {
   }
  class_
   annotations
   class
   classname
    Element
   extends
   type
    int
   {
   member
    predicate
     annotations
     head
      type
       string
      predicateName
       getName
      (
      var_decls
      )
     optbody
      {
      formula
       conjunction_formula
        implies_formula
         formula_base
          comparison
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 variable
                  result
           compop
            =
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 literal
                  ""
      }
   member
    predicate
     annotations
      annotation
       simpleAnnotation
        final
     head
      predicate
      predicateName
       hasName
      (
      var_decls
       var_decl
        type
         string
        varname
         name
      )
     optbody
      {
      formula
       conjunction_formula
        implies_formula
         formula_base
          comparison
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 variable
                  varname
                   name
           compop
            =
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 variable
                  this
                primaryPostfixOp
                 .
                 predicateName
                  getName
                 (
                 )
      }
   }
  select
   select
   as_exprs
    as_expr
     expr
      multExpr
       unaryExpr
        nonOpExpr
         primary
          primaryBase
           literal
            1
 <EOF>
