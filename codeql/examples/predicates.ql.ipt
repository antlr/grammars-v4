ql
 moduleBody
  predicate
   annotations
   head
    predicate
    predicateName
     isCountry
    (
    var_decls
     var_decl
      type
       string
      varname
       country
    )
   optbody
    {
    formula
     conjunction_formula
      implies_formula
       formula_base
        comparison
         expr
          multExpr
           unaryExpr
            nonOpExpr
             primary
              primaryBase
               variable
                varname
                 country
         compop
          =
         expr
          multExpr
           unaryExpr
            nonOpExpr
             primary
              primaryBase
               literal
                "Germany"
     or
     formula
      conjunction_formula
       implies_formula
        formula_base
         comparison
          expr
           multExpr
            unaryExpr
             nonOpExpr
              primary
               primaryBase
                variable
                 varname
                  country
          compop
           =
          expr
           multExpr
            unaryExpr
             nonOpExpr
              primary
               primaryBase
                literal
                 "Belgium"
      or
      formula
       conjunction_formula
        implies_formula
         formula_base
          comparison
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 variable
                  varname
                   country
           compop
            =
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 literal
                  "France"
    }
  predicate
   annotations
   head
    predicate
    predicateName
     hasCapital
    (
    var_decls
     var_decl
      type
       string
      varname
       country
     ,
     var_decl
      type
       string
      varname
       capital
    )
   optbody
    {
    formula
     conjunction_formula
      implies_formula
       formula_base
        comparison
         expr
          multExpr
           unaryExpr
            nonOpExpr
             primary
              primaryBase
               variable
                varname
                 country
         compop
          =
         expr
          multExpr
           unaryExpr
            nonOpExpr
             primary
              primaryBase
               literal
                "Belgium"
      and
      formula
       conjunction_formula
        implies_formula
         formula_base
          comparison
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 variable
                  varname
                   capital
           compop
            =
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 literal
                  "Brussels"
       or
       formula
        conjunction_formula
         implies_formula
          formula_base
           comparison
            expr
             multExpr
              unaryExpr
               nonOpExpr
                primary
                 primaryBase
                  variable
                   varname
                    country
            compop
             =
            expr
             multExpr
              unaryExpr
               nonOpExpr
                primary
                 primaryBase
                  literal
                   "Germany"
         and
         formula
          conjunction_formula
           implies_formula
            formula_base
             comparison
              expr
               multExpr
                unaryExpr
                 nonOpExpr
                  primary
                   primaryBase
                    variable
                     varname
                      capital
              compop
               =
              expr
               multExpr
                unaryExpr
                 nonOpExpr
                  primary
                   primaryBase
                    literal
                     "Berlin"
          or
          formula
           conjunction_formula
            implies_formula
             formula_base
              comparison
               expr
                multExpr
                 unaryExpr
                  nonOpExpr
                   primary
                    primaryBase
                     variable
                      varname
                       country
               compop
                =
               expr
                multExpr
                 unaryExpr
                  nonOpExpr
                   primary
                    primaryBase
                     literal
                      "France"
            and
            formula
             conjunction_formula
              implies_formula
               formula_base
                comparison
                 expr
                  multExpr
                   unaryExpr
                    nonOpExpr
                     primary
                      primaryBase
                       variable
                        varname
                         capital
                 compop
                  =
                 expr
                  multExpr
                   unaryExpr
                    nonOpExpr
                     primary
                      primaryBase
                       literal
                        "Paris"
    }
  predicate
   annotations
   head
    type
     string
    predicateName
     getANeighbor
    (
    var_decls
     var_decl
      type
       string
      varname
       country
    )
   optbody
    {
    formula
     conjunction_formula
      implies_formula
       formula_base
        comparison
         expr
          multExpr
           unaryExpr
            nonOpExpr
             primary
              primaryBase
               variable
                varname
                 country
         compop
          =
         expr
          multExpr
           unaryExpr
            nonOpExpr
             primary
              primaryBase
               literal
                "France"
      and
      formula
       conjunction_formula
        implies_formula
         formula_base
          comparison
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 variable
                  result
           compop
            =
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 literal
                  "Belgium"
       or
       formula
        conjunction_formula
         implies_formula
          formula_base
           comparison
            expr
             multExpr
              unaryExpr
               nonOpExpr
                primary
                 primaryBase
                  variable
                   varname
                    country
            compop
             =
            expr
             multExpr
              unaryExpr
               nonOpExpr
                primary
                 primaryBase
                  literal
                   "France"
         and
         formula
          conjunction_formula
           implies_formula
            formula_base
             comparison
              expr
               multExpr
                unaryExpr
                 nonOpExpr
                  primary
                   primaryBase
                    variable
                     result
              compop
               =
              expr
               multExpr
                unaryExpr
                 nonOpExpr
                  primary
                   primaryBase
                    literal
                     "Germany"
          or
          formula
           conjunction_formula
            implies_formula
             formula_base
              comparison
               expr
                multExpr
                 unaryExpr
                  nonOpExpr
                   primary
                    primaryBase
                     variable
                      varname
                       country
               compop
                =
               expr
                multExpr
                 unaryExpr
                  nonOpExpr
                   primary
                    primaryBase
                     literal
                      "Germany"
            and
            formula
             conjunction_formula
              implies_formula
               formula_base
                comparison
                 expr
                  multExpr
                   unaryExpr
                    nonOpExpr
                     primary
                      primaryBase
                       variable
                        result
                 compop
                  =
                 expr
                  multExpr
                   unaryExpr
                    nonOpExpr
                     primary
                      primaryBase
                       literal
                        "Austria"
             or
             formula
              conjunction_formula
               implies_formula
                formula_base
                 comparison
                  expr
                   multExpr
                    unaryExpr
                     nonOpExpr
                      primary
                       primaryBase
                        variable
                         varname
                          country
                  compop
                   =
                  expr
                   multExpr
                    unaryExpr
                     nonOpExpr
                      primary
                       primaryBase
                        literal
                         "Germany"
               and
               formula
                conjunction_formula
                 implies_formula
                  formula_base
                   comparison
                    expr
                     multExpr
                      unaryExpr
                       nonOpExpr
                        primary
                         primaryBase
                          variable
                           result
                    compop
                     =
                    expr
                     multExpr
                      unaryExpr
                       nonOpExpr
                        primary
                         primaryBase
                          literal
                           "Belgium"
                or
                formula
                 conjunction_formula
                  implies_formula
                   formula_base
                    comparison
                     expr
                      multExpr
                       unaryExpr
                        nonOpExpr
                         primary
                          primaryBase
                           variable
                            varname
                             country
                     compop
                      =
                     expr
                      multExpr
                       unaryExpr
                        nonOpExpr
                         primary
                          primaryBase
                           callwithresults_nomember
                            predicateRef
                             predicateCallName
                              getANeighbor
                            (
                            exprs
                             expr
                              multExpr
                               unaryExpr
                                nonOpExpr
                                 primary
                                  primaryBase
                                   variable
                                    result
                            )
    }
  class_
   annotations
   class
   classname
    FavoriteNumbers
   extends
   type
    int
   {
   member
    character
     annotations
     classname
      FavoriteNumbers
     (
     )
     {
     formula
      conjunction_formula
       implies_formula
        formula_base
         comparison
          expr
           multExpr
            unaryExpr
             nonOpExpr
              primary
               primaryBase
                variable
                 this
          compop
           =
          expr
           multExpr
            unaryExpr
             nonOpExpr
              primary
               primaryBase
                literal
                 1
      or
      formula
       conjunction_formula
        implies_formula
         formula_base
          comparison
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 variable
                  this
           compop
            =
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 literal
                  4
       or
       formula
        conjunction_formula
         implies_formula
          formula_base
           comparison
            expr
             multExpr
              unaryExpr
               nonOpExpr
                primary
                 primaryBase
                  variable
                   this
            compop
             =
            expr
             multExpr
              unaryExpr
               nonOpExpr
                primary
                 primaryBase
                  literal
                   9
     }
   member
    predicate
     annotations
     head
      type
       string
      predicateName
       getName
      (
      var_decls
      )
     optbody
      {
      formula
       conjunction_formula
        implies_formula
         formula_base
          comparison
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 variable
                  this
           compop
            =
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 literal
                  1
        and
        formula
         conjunction_formula
          implies_formula
           formula_base
            comparison
             expr
              multExpr
               unaryExpr
                nonOpExpr
                 primary
                  primaryBase
                   variable
                    result
             compop
              =
             expr
              multExpr
               unaryExpr
                nonOpExpr
                 primary
                  primaryBase
                   literal
                    "one"
         or
         formula
          conjunction_formula
           implies_formula
            formula_base
             comparison
              expr
               multExpr
                unaryExpr
                 nonOpExpr
                  primary
                   primaryBase
                    variable
                     this
              compop
               =
              expr
               multExpr
                unaryExpr
                 nonOpExpr
                  primary
                   primaryBase
                    literal
                     4
           and
           formula
            conjunction_formula
             implies_formula
              formula_base
               comparison
                expr
                 multExpr
                  unaryExpr
                   nonOpExpr
                    primary
                     primaryBase
                      variable
                       result
                compop
                 =
                expr
                 multExpr
                  unaryExpr
                   nonOpExpr
                    primary
                     primaryBase
                      literal
                       "four"
            or
            formula
             conjunction_formula
              implies_formula
               formula_base
                comparison
                 expr
                  multExpr
                   unaryExpr
                    nonOpExpr
                     primary
                      primaryBase
                       variable
                        this
                 compop
                  =
                 expr
                  multExpr
                   unaryExpr
                    nonOpExpr
                     primary
                      primaryBase
                       literal
                        9
              and
              formula
               conjunction_formula
                implies_formula
                 formula_base
                  comparison
                   expr
                    multExpr
                     unaryExpr
                      nonOpExpr
                       primary
                        primaryBase
                         variable
                          result
                   compop
                    =
                   expr
                    multExpr
                     unaryExpr
                      nonOpExpr
                       primary
                        primaryBase
                         literal
                          "nine"
      }
   }
  predicate
   annotations
    annotation
     argsAnnotation
      bindingset
      [
      variable
       varname
        i
      ]
   head
    type
     int
    predicateName
     multiplyBy4
    (
    var_decls
     var_decl
      type
       int
      varname
       i
    )
   optbody
    {
    formula
     conjunction_formula
      implies_formula
       formula_base
        comparison
         expr
          multExpr
           unaryExpr
            nonOpExpr
             primary
              primaryBase
               variable
                result
         compop
          =
         expr
          multExpr
           unaryExpr
            nonOpExpr
             primary
              primaryBase
               variable
                varname
                 i
           *
           unaryExpr
            nonOpExpr
             primary
              primaryBase
               literal
                4
    }
  predicate
   annotations
    annotation
     argsAnnotation
      bindingset
      [
      variable
       varname
        x
      ]
    annotation
     argsAnnotation
      bindingset
      [
      variable
       varname
        y
      ]
   head
    predicate
    predicateName
     plusOne
    (
    var_decls
     var_decl
      type
       int
      varname
       x
     ,
     var_decl
      type
       int
      varname
       y
    )
   optbody
    {
    formula
     conjunction_formula
      implies_formula
       formula_base
        comparison
         expr
          multExpr
           unaryExpr
            nonOpExpr
             primary
              primaryBase
               variable
                varname
                 x
          +
          multExpr
           unaryExpr
            nonOpExpr
             primary
              primaryBase
               literal
                1
         compop
          =
         expr
          multExpr
           unaryExpr
            nonOpExpr
             primary
              primaryBase
               variable
                varname
                 y
    }
  predicate
   annotations
    annotation
     argsAnnotation
      bindingset
      [
      variable
       varname
        str
      ,
      variable
       varname
        len
      ]
   head
    type
     string
    predicateName
     truncate
    (
    var_decls
     var_decl
      type
       string
      varname
       str
     ,
     var_decl
      type
       int
      varname
       len
    )
   optbody
    {
    formula
     conjunction_formula
      implies_formula
       formula_base
        ifthen
         if
         formula
          conjunction_formula
           implies_formula
            formula_base
             comparison
              expr
               multExpr
                unaryExpr
                 nonOpExpr
                  primary
                   primaryBase
                    variable
                     varname
                      str
                   primaryPostfixOp
                    .
                    predicateName
                     length
                    (
                    )
              compop
               >
              expr
               multExpr
                unaryExpr
                 nonOpExpr
                  primary
                   primaryBase
                    variable
                     varname
                      len
         then
         formula
          conjunction_formula
           implies_formula
            formula_base
             comparison
              expr
               multExpr
                unaryExpr
                 nonOpExpr
                  primary
                   primaryBase
                    variable
                     result
              compop
               =
              expr
               multExpr
                unaryExpr
                 nonOpExpr
                  primary
                   primaryBase
                    variable
                     varname
                      str
                   primaryPostfixOp
                    .
                    predicateName
                     prefix
                    (
                    exprs
                     expr
                      multExpr
                       unaryExpr
                        nonOpExpr
                         primary
                          primaryBase
                           variable
                            varname
                             len
                    )
         else
         formula
          conjunction_formula
           implies_formula
            formula_base
             comparison
              expr
               multExpr
                unaryExpr
                 nonOpExpr
                  primary
                   primaryBase
                    variable
                     result
              compop
               =
              expr
               multExpr
                unaryExpr
                 nonOpExpr
                  primary
                   primaryBase
                    variable
                     varname
                      str
    }
  select
   from
   var_decls
    var_decl
     type
      int
     varname
      x
    ,
    var_decl
     type
      int
     varname
      y
   where
   formula
    conjunction_formula
     implies_formula
      formula_base
       comparison
        expr
         multExpr
          unaryExpr
           nonOpExpr
            primary
             primaryBase
              variable
               varname
                x
        compop
         =
        expr
         multExpr
          unaryExpr
           nonOpExpr
            primary
             primaryBase
              literal
               3
     and
     formula
      conjunction_formula
       implies_formula
        formula_base
         inrange
          expr
           multExpr
            unaryExpr
             nonOpExpr
              primary
               primaryBase
                variable
                 varname
                  y
          in
          range
           [
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 literal
                  0
           ..
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 literal
                  2
           ]
   select
   as_exprs
    as_expr
     expr
      multExpr
       unaryExpr
        nonOpExpr
         primary
          primaryBase
           variable
            varname
             x
    ,
    as_expr
     expr
      multExpr
       unaryExpr
        nonOpExpr
         primary
          primaryBase
           variable
            varname
             y
    ,
    as_expr
     expr
      multExpr
       unaryExpr
        nonOpExpr
         primary
          primaryBase
           variable
            varname
             x
       *
       unaryExpr
        nonOpExpr
         primary
          primaryBase
           variable
            varname
             y
     as
     product
    ,
    as_expr
     expr
      multExpr
       unaryExpr
        nonOpExpr
         primary
          primaryBase
           literal
            "product: "
      +
      multExpr
       unaryExpr
        nonOpExpr
         primary
          primaryBase
           variable
            varname
             product
  class_
   annotations
   class
   classname
    OneTwoThree
   extends
   type
    int
   {
   member
    character
     annotations
     classname
      OneTwoThree
     (
     )
     {
     formula
      conjunction_formula
       implies_formula
        formula_base
         comparison
          expr
           multExpr
            unaryExpr
             nonOpExpr
              primary
               primaryBase
                variable
                 this
          compop
           =
          expr
           multExpr
            unaryExpr
             nonOpExpr
              primary
               primaryBase
                literal
                 1
      or
      formula
       conjunction_formula
        implies_formula
         formula_base
          comparison
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 variable
                  this
           compop
            =
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 literal
                  2
       or
       formula
        conjunction_formula
         implies_formula
          formula_base
           comparison
            expr
             multExpr
              unaryExpr
               nonOpExpr
                primary
                 primaryBase
                  variable
                   this
            compop
             =
            expr
             multExpr
              unaryExpr
               nonOpExpr
                primary
                 primaryBase
                  literal
                   3
     }
   member
    predicate
     annotations
     head
      type
       string
      predicateName
       getAString
      (
      var_decls
      )
     optbody
      {
      formula
       conjunction_formula
        implies_formula
         formula_base
          comparison
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 variable
                  result
           compop
            =
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 literal
                  "One, two or three: "
            +
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 variable
                  this
                primaryPostfixOp
                 .
                 predicateName
                  toString
                 (
                 )
      }
   member
    predicate
     annotations
     head
      predicate
      predicateName
       isEven
      (
      var_decls
      )
     optbody
      {
      formula
       conjunction_formula
        implies_formula
         formula_base
          comparison
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 variable
                  this
           compop
            =
           expr
            multExpr
             unaryExpr
              nonOpExpr
               primary
                primaryBase
                 literal
                  2
      }
   }
 <EOF>
