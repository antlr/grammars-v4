crate
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       identifier
        inline_python
      ::
      simplePathSegment
       identifier
        python
    ;
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     main
    (
    )
    blockExpression
     {
     statements
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            who
        =
        expression
         literalExpression
          "world"
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            n
        =
        expression
         literalExpression
          5
        ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             python
          !
          {
          tokenTree
           tokenTreeToken
            macroIdentifierLikeToken
             keyword
              for
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              i
           tokenTreeToken
            macroIdentifierLikeToken
             keyword
              in
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              range
          tokenTree
           delimTokenTree
            (
            tokenTree
             tokenTreeToken
              macroIdentifierLikeToken
               'n
            )
          tokenTree
           tokenTreeToken
            macroPunctuationToken
             :
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              print
          tokenTree
           delimTokenTree
            (
            tokenTree
             tokenTreeToken
              macroIdentifierLikeToken
               identifier
                i
             tokenTreeToken
              macroPunctuationToken
               ,
             tokenTreeToken
              macroLiteralToken
               literalExpression
                "Hello"
             tokenTreeToken
              macroPunctuationToken
               ,
             tokenTreeToken
              macroIdentifierLikeToken
               'who
            )
          tokenTree
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              print
          tokenTree
           delimTokenTree
            (
            tokenTree
             tokenTreeToken
              macroLiteralToken
               literalExpression
                "Goodbye"
            )
          }
     }
 <EOF>
